
STM32F769I_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002b324  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f04  0802b528  0802b528  0002c528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000001c  0802f42c  0802f42c  0003042c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802f448  0802f448  000325d8  2**0
                  CONTENTS
  5 .ARM          00000008  0802f448  0802f448  00030448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802f450  0802f450  000325d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802f450  0802f450  00030450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802f46c  0802f46c  0003046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000150  20000000  0802f474  00031000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000284c0  20000150  0802f5c4  00031150  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  20028610  0802f5c4  00031610  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000325d8  2**0
                  CONTENTS, READONLY
 13 ExtFlashSection 00000000  90000000  90000000  00032606  2**0
                  CONTENTS
 14 FontFlashSection 000005c8  90000000  90000000  00032000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 00000010  900005c8  900005c8  000325c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 BufferSection 00177000  c0000000  c0000000  00033000  2**2
                  ALLOC
 17 .debug_line   00063954  00000000  00000000  00032606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000060  00000000  00000000  00095f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   000d36bf  00000000  00000000  00095fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00015c53  00000000  00000000  00169679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003690  00000000  00000000  0017f2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0015da7a  00000000  00000000  00182960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 000062a9  00000000  00000000  002e03da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  0003e9f6  00000000  00000000  002e6683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000c2  00000000  00000000  00325079  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00009d88  00000000  00000000  0032513c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loclists 0002bd81  00000000  00000000  0032eec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000150 	.word	0x20000150
 800021c:	00000000 	.word	0x00000000
 8000220:	0802b50c 	.word	0x0802b50c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000154 	.word	0x20000154
 800023c:	0802b50c 	.word	0x0802b50c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_ldivmod>:
 8000658:	b97b      	cbnz	r3, 800067a <__aeabi_ldivmod+0x22>
 800065a:	b972      	cbnz	r2, 800067a <__aeabi_ldivmod+0x22>
 800065c:	2900      	cmp	r1, #0
 800065e:	bfbe      	ittt	lt
 8000660:	2000      	movlt	r0, #0
 8000662:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000666:	e006      	blt.n	8000676 <__aeabi_ldivmod+0x1e>
 8000668:	bf08      	it	eq
 800066a:	2800      	cmpeq	r0, #0
 800066c:	bf1c      	itt	ne
 800066e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000672:	f04f 30ff 	movne.w	r0, #4294967295
 8000676:	f000 b9b5 	b.w	80009e4 <__aeabi_idiv0>
 800067a:	f1ad 0c08 	sub.w	ip, sp, #8
 800067e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000682:	2900      	cmp	r1, #0
 8000684:	db09      	blt.n	800069a <__aeabi_ldivmod+0x42>
 8000686:	2b00      	cmp	r3, #0
 8000688:	db1a      	blt.n	80006c0 <__aeabi_ldivmod+0x68>
 800068a:	f000 f84d 	bl	8000728 <__udivmoddi4>
 800068e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000696:	b004      	add	sp, #16
 8000698:	4770      	bx	lr
 800069a:	4240      	negs	r0, r0
 800069c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db1b      	blt.n	80006dc <__aeabi_ldivmod+0x84>
 80006a4:	f000 f840 	bl	8000728 <__udivmoddi4>
 80006a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b0:	b004      	add	sp, #16
 80006b2:	4240      	negs	r0, r0
 80006b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b8:	4252      	negs	r2, r2
 80006ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006be:	4770      	bx	lr
 80006c0:	4252      	negs	r2, r2
 80006c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006c6:	f000 f82f 	bl	8000728 <__udivmoddi4>
 80006ca:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006d2:	b004      	add	sp, #16
 80006d4:	4240      	negs	r0, r0
 80006d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006da:	4770      	bx	lr
 80006dc:	4252      	negs	r2, r2
 80006de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006e2:	f000 f821 	bl	8000728 <__udivmoddi4>
 80006e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006ee:	b004      	add	sp, #16
 80006f0:	4252      	negs	r2, r2
 80006f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f6:	4770      	bx	lr

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b96a 	b.w	80009e4 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	460c      	mov	r4, r1
 8000730:	2b00      	cmp	r3, #0
 8000732:	d14e      	bne.n	80007d2 <__udivmoddi4+0xaa>
 8000734:	4694      	mov	ip, r2
 8000736:	458c      	cmp	ip, r1
 8000738:	4686      	mov	lr, r0
 800073a:	fab2 f282 	clz	r2, r2
 800073e:	d962      	bls.n	8000806 <__udivmoddi4+0xde>
 8000740:	b14a      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000742:	f1c2 0320 	rsb	r3, r2, #32
 8000746:	4091      	lsls	r1, r2
 8000748:	fa20 f303 	lsr.w	r3, r0, r3
 800074c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000750:	4319      	orrs	r1, r3
 8000752:	fa00 fe02 	lsl.w	lr, r0, r2
 8000756:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800075a:	fa1f f68c 	uxth.w	r6, ip
 800075e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000762:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000766:	fb07 1114 	mls	r1, r7, r4, r1
 800076a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076e:	fb04 f106 	mul.w	r1, r4, r6
 8000772:	4299      	cmp	r1, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x64>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f104 30ff 	add.w	r0, r4, #4294967295
 800077e:	f080 8112 	bcs.w	80009a6 <__udivmoddi4+0x27e>
 8000782:	4299      	cmp	r1, r3
 8000784:	f240 810f 	bls.w	80009a6 <__udivmoddi4+0x27e>
 8000788:	3c02      	subs	r4, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	fa1f f38e 	uxth.w	r3, lr
 8000792:	fbb1 f0f7 	udiv	r0, r1, r7
 8000796:	fb07 1110 	mls	r1, r7, r0, r1
 800079a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800079e:	fb00 f606 	mul.w	r6, r0, r6
 80007a2:	429e      	cmp	r6, r3
 80007a4:	d90a      	bls.n	80007bc <__udivmoddi4+0x94>
 80007a6:	eb1c 0303 	adds.w	r3, ip, r3
 80007aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80007ae:	f080 80fc 	bcs.w	80009aa <__udivmoddi4+0x282>
 80007b2:	429e      	cmp	r6, r3
 80007b4:	f240 80f9 	bls.w	80009aa <__udivmoddi4+0x282>
 80007b8:	4463      	add	r3, ip
 80007ba:	3802      	subs	r0, #2
 80007bc:	1b9b      	subs	r3, r3, r6
 80007be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007c2:	2100      	movs	r1, #0
 80007c4:	b11d      	cbz	r5, 80007ce <__udivmoddi4+0xa6>
 80007c6:	40d3      	lsrs	r3, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	e9c5 3200 	strd	r3, r2, [r5]
 80007ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d905      	bls.n	80007e2 <__udivmoddi4+0xba>
 80007d6:	b10d      	cbz	r5, 80007dc <__udivmoddi4+0xb4>
 80007d8:	e9c5 0100 	strd	r0, r1, [r5]
 80007dc:	2100      	movs	r1, #0
 80007de:	4608      	mov	r0, r1
 80007e0:	e7f5      	b.n	80007ce <__udivmoddi4+0xa6>
 80007e2:	fab3 f183 	clz	r1, r3
 80007e6:	2900      	cmp	r1, #0
 80007e8:	d146      	bne.n	8000878 <__udivmoddi4+0x150>
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	d302      	bcc.n	80007f4 <__udivmoddi4+0xcc>
 80007ee:	4290      	cmp	r0, r2
 80007f0:	f0c0 80f0 	bcc.w	80009d4 <__udivmoddi4+0x2ac>
 80007f4:	1a86      	subs	r6, r0, r2
 80007f6:	eb64 0303 	sbc.w	r3, r4, r3
 80007fa:	2001      	movs	r0, #1
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d0e6      	beq.n	80007ce <__udivmoddi4+0xa6>
 8000800:	e9c5 6300 	strd	r6, r3, [r5]
 8000804:	e7e3      	b.n	80007ce <__udivmoddi4+0xa6>
 8000806:	2a00      	cmp	r2, #0
 8000808:	f040 8090 	bne.w	800092c <__udivmoddi4+0x204>
 800080c:	eba1 040c 	sub.w	r4, r1, ip
 8000810:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000814:	fa1f f78c 	uxth.w	r7, ip
 8000818:	2101      	movs	r1, #1
 800081a:	fbb4 f6f8 	udiv	r6, r4, r8
 800081e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000822:	fb08 4416 	mls	r4, r8, r6, r4
 8000826:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800082a:	fb07 f006 	mul.w	r0, r7, r6
 800082e:	4298      	cmp	r0, r3
 8000830:	d908      	bls.n	8000844 <__udivmoddi4+0x11c>
 8000832:	eb1c 0303 	adds.w	r3, ip, r3
 8000836:	f106 34ff 	add.w	r4, r6, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x11a>
 800083c:	4298      	cmp	r0, r3
 800083e:	f200 80cd 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 8000842:	4626      	mov	r6, r4
 8000844:	1a1c      	subs	r4, r3, r0
 8000846:	fa1f f38e 	uxth.w	r3, lr
 800084a:	fbb4 f0f8 	udiv	r0, r4, r8
 800084e:	fb08 4410 	mls	r4, r8, r0, r4
 8000852:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000856:	fb00 f707 	mul.w	r7, r0, r7
 800085a:	429f      	cmp	r7, r3
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x148>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f100 34ff 	add.w	r4, r0, #4294967295
 8000866:	d202      	bcs.n	800086e <__udivmoddi4+0x146>
 8000868:	429f      	cmp	r7, r3
 800086a:	f200 80b0 	bhi.w	80009ce <__udivmoddi4+0x2a6>
 800086e:	4620      	mov	r0, r4
 8000870:	1bdb      	subs	r3, r3, r7
 8000872:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000876:	e7a5      	b.n	80007c4 <__udivmoddi4+0x9c>
 8000878:	f1c1 0620 	rsb	r6, r1, #32
 800087c:	408b      	lsls	r3, r1
 800087e:	fa22 f706 	lsr.w	r7, r2, r6
 8000882:	431f      	orrs	r7, r3
 8000884:	fa20 fc06 	lsr.w	ip, r0, r6
 8000888:	fa04 f301 	lsl.w	r3, r4, r1
 800088c:	ea43 030c 	orr.w	r3, r3, ip
 8000890:	40f4      	lsrs	r4, r6
 8000892:	fa00 f801 	lsl.w	r8, r0, r1
 8000896:	0c38      	lsrs	r0, r7, #16
 8000898:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800089c:	fbb4 fef0 	udiv	lr, r4, r0
 80008a0:	fa1f fc87 	uxth.w	ip, r7
 80008a4:	fb00 441e 	mls	r4, r0, lr, r4
 80008a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008ac:	fb0e f90c 	mul.w	r9, lr, ip
 80008b0:	45a1      	cmp	r9, r4
 80008b2:	fa02 f201 	lsl.w	r2, r2, r1
 80008b6:	d90a      	bls.n	80008ce <__udivmoddi4+0x1a6>
 80008b8:	193c      	adds	r4, r7, r4
 80008ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008be:	f080 8084 	bcs.w	80009ca <__udivmoddi4+0x2a2>
 80008c2:	45a1      	cmp	r9, r4
 80008c4:	f240 8081 	bls.w	80009ca <__udivmoddi4+0x2a2>
 80008c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008cc:	443c      	add	r4, r7
 80008ce:	eba4 0409 	sub.w	r4, r4, r9
 80008d2:	fa1f f983 	uxth.w	r9, r3
 80008d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008da:	fb00 4413 	mls	r4, r0, r3, r4
 80008de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008e6:	45a4      	cmp	ip, r4
 80008e8:	d907      	bls.n	80008fa <__udivmoddi4+0x1d2>
 80008ea:	193c      	adds	r4, r7, r4
 80008ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80008f0:	d267      	bcs.n	80009c2 <__udivmoddi4+0x29a>
 80008f2:	45a4      	cmp	ip, r4
 80008f4:	d965      	bls.n	80009c2 <__udivmoddi4+0x29a>
 80008f6:	3b02      	subs	r3, #2
 80008f8:	443c      	add	r4, r7
 80008fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000902:	eba4 040c 	sub.w	r4, r4, ip
 8000906:	429c      	cmp	r4, r3
 8000908:	46ce      	mov	lr, r9
 800090a:	469c      	mov	ip, r3
 800090c:	d351      	bcc.n	80009b2 <__udivmoddi4+0x28a>
 800090e:	d04e      	beq.n	80009ae <__udivmoddi4+0x286>
 8000910:	b155      	cbz	r5, 8000928 <__udivmoddi4+0x200>
 8000912:	ebb8 030e 	subs.w	r3, r8, lr
 8000916:	eb64 040c 	sbc.w	r4, r4, ip
 800091a:	fa04 f606 	lsl.w	r6, r4, r6
 800091e:	40cb      	lsrs	r3, r1
 8000920:	431e      	orrs	r6, r3
 8000922:	40cc      	lsrs	r4, r1
 8000924:	e9c5 6400 	strd	r6, r4, [r5]
 8000928:	2100      	movs	r1, #0
 800092a:	e750      	b.n	80007ce <__udivmoddi4+0xa6>
 800092c:	f1c2 0320 	rsb	r3, r2, #32
 8000930:	fa20 f103 	lsr.w	r1, r0, r3
 8000934:	fa0c fc02 	lsl.w	ip, ip, r2
 8000938:	fa24 f303 	lsr.w	r3, r4, r3
 800093c:	4094      	lsls	r4, r2
 800093e:	430c      	orrs	r4, r1
 8000940:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000944:	fa00 fe02 	lsl.w	lr, r0, r2
 8000948:	fa1f f78c 	uxth.w	r7, ip
 800094c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000950:	fb08 3110 	mls	r1, r8, r0, r3
 8000954:	0c23      	lsrs	r3, r4, #16
 8000956:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800095a:	fb00 f107 	mul.w	r1, r0, r7
 800095e:	4299      	cmp	r1, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x24c>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 36ff 	add.w	r6, r0, #4294967295
 800096a:	d22c      	bcs.n	80009c6 <__udivmoddi4+0x29e>
 800096c:	4299      	cmp	r1, r3
 800096e:	d92a      	bls.n	80009c6 <__udivmoddi4+0x29e>
 8000970:	3802      	subs	r0, #2
 8000972:	4463      	add	r3, ip
 8000974:	1a5b      	subs	r3, r3, r1
 8000976:	b2a4      	uxth	r4, r4
 8000978:	fbb3 f1f8 	udiv	r1, r3, r8
 800097c:	fb08 3311 	mls	r3, r8, r1, r3
 8000980:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000984:	fb01 f307 	mul.w	r3, r1, r7
 8000988:	42a3      	cmp	r3, r4
 800098a:	d908      	bls.n	800099e <__udivmoddi4+0x276>
 800098c:	eb1c 0404 	adds.w	r4, ip, r4
 8000990:	f101 36ff 	add.w	r6, r1, #4294967295
 8000994:	d213      	bcs.n	80009be <__udivmoddi4+0x296>
 8000996:	42a3      	cmp	r3, r4
 8000998:	d911      	bls.n	80009be <__udivmoddi4+0x296>
 800099a:	3902      	subs	r1, #2
 800099c:	4464      	add	r4, ip
 800099e:	1ae4      	subs	r4, r4, r3
 80009a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009a4:	e739      	b.n	800081a <__udivmoddi4+0xf2>
 80009a6:	4604      	mov	r4, r0
 80009a8:	e6f0      	b.n	800078c <__udivmoddi4+0x64>
 80009aa:	4608      	mov	r0, r1
 80009ac:	e706      	b.n	80007bc <__udivmoddi4+0x94>
 80009ae:	45c8      	cmp	r8, r9
 80009b0:	d2ae      	bcs.n	8000910 <__udivmoddi4+0x1e8>
 80009b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ba:	3801      	subs	r0, #1
 80009bc:	e7a8      	b.n	8000910 <__udivmoddi4+0x1e8>
 80009be:	4631      	mov	r1, r6
 80009c0:	e7ed      	b.n	800099e <__udivmoddi4+0x276>
 80009c2:	4603      	mov	r3, r0
 80009c4:	e799      	b.n	80008fa <__udivmoddi4+0x1d2>
 80009c6:	4630      	mov	r0, r6
 80009c8:	e7d4      	b.n	8000974 <__udivmoddi4+0x24c>
 80009ca:	46d6      	mov	lr, sl
 80009cc:	e77f      	b.n	80008ce <__udivmoddi4+0x1a6>
 80009ce:	4463      	add	r3, ip
 80009d0:	3802      	subs	r0, #2
 80009d2:	e74d      	b.n	8000870 <__udivmoddi4+0x148>
 80009d4:	4606      	mov	r6, r0
 80009d6:	4623      	mov	r3, r4
 80009d8:	4608      	mov	r0, r1
 80009da:	e70f      	b.n	80007fc <__udivmoddi4+0xd4>
 80009dc:	3e02      	subs	r6, #2
 80009de:	4463      	add	r3, ip
 80009e0:	e730      	b.n	8000844 <__udivmoddi4+0x11c>
 80009e2:	bf00      	nop

080009e4 <__aeabi_idiv0>:
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009ee:	e003      	b.n	80009f8 <LoopCopyDataInit>

080009f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009f6:	3104      	adds	r1, #4

080009f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009f8:	480b      	ldr	r0, [pc, #44]	@ (8000a28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a00:	d3f6      	bcc.n	80009f0 <CopyDataInit>
  ldr  r2, =_sbss
 8000a02:	4a0b      	ldr	r2, [pc, #44]	@ (8000a30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a04:	e002      	b.n	8000a0c <LoopFillZerobss>

08000a06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a08:	f842 3b04 	str.w	r3, [r2], #4

08000a0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a10:	d3f9      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a12:	f009 faf3 	bl	8009ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f02a f89d 	bl	802ab54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a1a:	f002 fe1f 	bl	800365c <main>
  bx  lr    
 8000a1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a20:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000a24:	0802f474 	.word	0x0802f474
  ldr  r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a2c:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 8000a30:	20000150 	.word	0x20000150
  ldr  r3, = _ebss
 8000a34:	20028610 	.word	0x20028610

08000a38 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <CAN1_RX0_IRQHandler>

08000a3a <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8000a3a:	4770      	bx	lr

08000a3c <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8000a3c:	4770      	bx	lr

08000a3e <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8000a3e:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8000a40:	f001 fd38 	bl	80024b4 <touchgfx_components_init>
    touchgfx_init();
}
 8000a44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8000a48:	f001 bcba 	b.w	80023c0 <touchgfx_init>

08000a4c <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8000a4c:	f001 bd34 	b.w	80024b8 <touchgfx_taskEntry>

08000a50 <BSP_PB_Init>:
    __weak void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
    {
        GPIO_InitTypeDef gpio_init_structure;

        /* Enable the BUTTON clock */
        BUTTON_GPIO_CLK_ENABLE();
 8000a50:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <BSP_PB_Init+0x60>)
 8000a52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000a54:	f042 0201 	orr.w	r2, r2, #1
    {
 8000a58:	b510      	push	{r4, lr}
        BUTTON_GPIO_CLK_ENABLE();
 8000a5a:	631a      	str	r2, [r3, #48]	@ 0x30
    {
 8000a5c:	b086      	sub	sp, #24
        BUTTON_GPIO_CLK_ENABLE();
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	9b00      	ldr	r3, [sp, #0]

        if (Button_Mode == BUTTON_MODE_GPIO)
 8000a68:	b959      	cbnz	r1, 8000a82 <BSP_PB_Init+0x32>
        {
            /* Configure Button pin as input */
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000a6a:	2301      	movs	r3, #1
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
            gpio_init_structure.Pull = GPIO_NOPULL;
 8000a6c:	9103      	str	r1, [sp, #12]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000a6e:	4811      	ldr	r0, [pc, #68]	@ (8000ab4 <BSP_PB_Init+0x64>)
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000a70:	e9cd 3101 	strd	r3, r1, [sp, #4]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000a74:	2302      	movs	r3, #2
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000a76:	a901      	add	r1, sp, #4
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000a78:	9304      	str	r3, [sp, #16]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000a7a:	f00a fd17 	bl	800b4ac <HAL_GPIO_Init>

            /* Enable and set Button EXTI Interrupt to the lowest priority */
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
        }
    }
 8000a7e:	b006      	add	sp, #24
 8000a80:	bd10      	pop	{r4, pc}
        if (Button_Mode == BUTTON_MODE_EXTI)
 8000a82:	2901      	cmp	r1, #1
 8000a84:	d1fb      	bne.n	8000a7e <BSP_PB_Init+0x2e>
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000a86:	2400      	movs	r4, #0
 8000a88:	2302      	movs	r3, #2
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000a8a:	9101      	str	r1, [sp, #4]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000a8c:	a901      	add	r1, sp, #4
 8000a8e:	4809      	ldr	r0, [pc, #36]	@ (8000ab4 <BSP_PB_Init+0x64>)
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000a90:	e9cd 4303 	strd	r4, r3, [sp, #12]
            gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000a94:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a98:	9302      	str	r3, [sp, #8]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000a9a:	f00a fd07 	bl	800b4ac <HAL_GPIO_Init>
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000a9e:	4622      	mov	r2, r4
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	2006      	movs	r0, #6
 8000aa4:	f009 fd80 	bl	800a5a8 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000aa8:	2006      	movs	r0, #6
 8000aaa:	f009 fdaf 	bl	800a60c <HAL_NVIC_EnableIRQ>
    }
 8000aae:	e7e6      	b.n	8000a7e <BSP_PB_Init+0x2e>
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <_ZN8touchgfx7Buttons4initEv>:
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000ab8:	2100      	movs	r1, #0
{
 8000aba:	b508      	push	{r3, lr}
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000abc:	4608      	mov	r0, r1
 8000abe:	f7ff ffc7 	bl	8000a50 <BSP_PB_Init>
}
 8000ac2:	bd08      	pop	{r3, pc}

08000ac4 <BSP_PB_GetState>:
      *            @arg  BUTTON_USER: User Push Button
      * @retval The Button GPIO pin value
      */
    __weak uint32_t BSP_PB_GetState(Button_TypeDef Button)
    {
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <BSP_PB_GetState+0xc>)
    {
 8000ac8:	b508      	push	{r3, lr}
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000aca:	f00a fe6d 	bl	800b7a8 <HAL_GPIO_ReadPin>
    }
 8000ace:	bd08      	pop	{r3, pc}
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <_ZN8touchgfx7Buttons6sampleEv>:
{
 8000ad4:	b508      	push	{r3, lr}
    result = BSP_PB_GetState(BUTTON_WAKEUP);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff fff4 	bl	8000ac4 <BSP_PB_GetState>
}
 8000adc:	bd08      	pop	{r3, pc}

08000ade <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8000ade:	6840      	ldr	r0, [r0, #4]
    }
 8000ae0:	4770      	bx	lr

08000ae2 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8000ae2:	6041      	str	r1, [r0, #4]
    }
 8000ae4:	4770      	bx	lr
	...

08000ae8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8000ae8:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8000aec:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	@ 0xdfc
 8000af0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000af4:	f8c2 3dfc 	str.w	r3, [r2, #3580]	@ 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8000afa:	4a06      	ldr	r2, [pc, #24]	@ (8000b14 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8000afc:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	@ 0xfb0
 8000b00:	430a      	orrs	r2, r1
 8000b02:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	f042 0201 	orr.w	r2, r2, #1
 8000b0c:	601a      	str	r2, [r3, #0]
}
 8000b0e:	4770      	bx	lr
 8000b10:	e0001000 	.word	0xe0001000
 8000b14:	c5acce55 	.word	0xc5acce55

08000b18 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8000b18:	1a52      	subs	r2, r2, r1
 8000b1a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8000b1e:	fbb2 f0f3 	udiv	r0, r2, r3
 8000b22:	4770      	bx	lr

08000b24 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8000b24:	4b01      	ldr	r3, [pc, #4]	@ (8000b2c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8000b26:	6858      	ldr	r0, [r3, #4]
}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e0001000 	.word	0xe0001000

08000b30 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8000b30:	4770      	bx	lr

08000b32 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8000b32:	b510      	push	{r4, lr}
 8000b34:	4604      	mov	r4, r0
 8000b36:	210c      	movs	r1, #12
 8000b38:	f029 f93f 	bl	8029dba <_ZdlPvj>
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	bd10      	pop	{r4, pc}

08000b40 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000b40:	6803      	ldr	r3, [r0, #0]
{
 8000b42:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000b44:	691b      	ldr	r3, [r3, #16]
{
 8000b46:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8000b48:	b131      	cbz	r1, 8000b58 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000b4a:	4798      	blx	r3
 8000b4c:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8000b4e:	6863      	ldr	r3, [r4, #4]
 8000b50:	1a9b      	subs	r3, r3, r2
 8000b52:	4403      	add	r3, r0
 8000b54:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8000b56:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8000b58:	4798      	blx	r3
 8000b5a:	60a0      	str	r0, [r4, #8]
}
 8000b5c:	e7fb      	b.n	8000b56 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

08000b5e <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 8000b5e:	4770      	bx	lr

08000b60 <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 8000b60:	4770      	bx	lr
	...

08000b64 <_ZN8touchgfx10KeySampler4initEv>:
using namespace touchgfx;

static uint8_t btnstatus[4];

void KeySampler::init()
{
 8000b64:	b508      	push	{r3, lr}
    Buttons::init();
 8000b66:	f7ff ffa7 	bl	8000ab8 <_ZN8touchgfx7Buttons4initEv>

    memset(btnstatus, 0x00, sizeof(uint8_t) * 4);
 8000b6a:	4b02      	ldr	r3, [pc, #8]	@ (8000b74 <_ZN8touchgfx10KeySampler4initEv+0x10>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
}
 8000b70:	bd08      	pop	{r3, pc}
 8000b72:	bf00      	nop
 8000b74:	2000016c 	.word	0x2000016c

08000b78 <_ZN8touchgfx10KeySampler6sampleERh>:

bool KeySampler::sample(uint8_t& key)
{
 8000b78:	b570      	push	{r4, r5, r6, lr}
 8000b7a:	460d      	mov	r5, r1
    unsigned int buttonValue = Buttons::sample();
 8000b7c:	f7ff ffaa 	bl	8000ad4 <_ZN8touchgfx7Buttons6sampleEv>

    //Propergate values through buffer
    btnstatus[3] = btnstatus[2];
 8000b80:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb0 <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
    btnstatus[2] = btnstatus[1];
    btnstatus[1] = btnstatus[0];
    btnstatus[0] = buttonValue;
 8000b82:	b2c4      	uxtb	r4, r0
    btnstatus[3] = btnstatus[2];
 8000b84:	7893      	ldrb	r3, [r2, #2]
    btnstatus[2] = btnstatus[1];
 8000b86:	7856      	ldrb	r6, [r2, #1]
    btnstatus[1] = btnstatus[0];
 8000b88:	7811      	ldrb	r1, [r2, #0]

    //User key
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000b8a:	f013 0001 	ands.w	r0, r3, #1
    btnstatus[3] = btnstatus[2];
 8000b8e:	70d3      	strb	r3, [r2, #3]
    btnstatus[2] = btnstatus[1];
 8000b90:	7096      	strb	r6, [r2, #2]
    btnstatus[1] = btnstatus[0];
 8000b92:	7051      	strb	r1, [r2, #1]
    btnstatus[0] = buttonValue;
 8000b94:	7014      	strb	r4, [r2, #0]
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000b96:	d00a      	beq.n	8000bae <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000b98:	f016 0001 	ands.w	r0, r6, #1
 8000b9c:	d007      	beq.n	8000bae <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000b9e:	f011 0001 	ands.w	r0, r1, #1
 8000ba2:	d004      	beq.n	8000bae <_ZN8touchgfx10KeySampler6sampleERh+0x36>
            ((btnstatus[1] & Key1) == 1) && ((btnstatus[0] & Key1) == 0))
 8000ba4:	07e3      	lsls	r3, r4, #31
    {
        key = 1;
 8000ba6:	bf56      	itet	pl
 8000ba8:	2001      	movpl	r0, #1
        return true;
    }

    return false;
 8000baa:	2000      	movmi	r0, #0
        key = 1;
 8000bac:	7028      	strbpl	r0, [r5, #0]
}
 8000bae:	bd70      	pop	{r4, r5, r6, pc}
 8000bb0:	2000016c 	.word	0x2000016c

08000bb4 <_ZN8touchgfx10KeySamplerD0Ev>:
 8000bb4:	b510      	push	{r4, lr}
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	2104      	movs	r1, #4
 8000bba:	f029 f8fe 	bl	8029dba <_ZdlPvj>
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	bd10      	pop	{r4, pc}

08000bc2 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000bc2:	4770      	bx	lr

08000bc4 <_ZN20STM32TouchControllerD0Ev>:
 8000bc4:	b510      	push	{r4, lr}
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	2104      	movs	r1, #4
 8000bca:	f029 f8f6 	bl	8029dba <_ZdlPvj>
 8000bce:	4620      	mov	r0, r4
 8000bd0:	bd10      	pop	{r4, pc}

08000bd2 <TS_IO_Init>:
      * @retval None
      */
    __weak void TS_IO_Init(void)
    {
        // I2Cx_Init(&hi2c4);
    }
 8000bd2:	4770      	bx	lr

08000bd4 <TS_IO_Write>:
      * @param  Reg: Reg address
      * @param  Value: Data to be written
      * @retval None
      */
    __weak void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
    {
 8000bd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000bd6:	2301      	movs	r3, #1
    {
 8000bd8:	f88d 2017 	strb.w	r2, [sp, #23]
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000bdc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000be0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000be4:	f10d 0217 	add.w	r2, sp, #23
 8000be8:	9200      	str	r2, [sp, #0]
 8000bea:	460a      	mov	r2, r1
 8000bec:	4601      	mov	r1, r0
 8000bee:	4806      	ldr	r0, [pc, #24]	@ (8000c08 <TS_IO_Write+0x34>)
 8000bf0:	f00a ff72 	bl	800bad8 <HAL_I2C_Mem_Write>
        if (status != HAL_OK)
 8000bf4:	b120      	cbz	r0, 8000c00 <TS_IO_Write+0x2c>
        HAL_I2C_DeInit(i2c_handler);
 8000bf6:	4804      	ldr	r0, [pc, #16]	@ (8000c08 <TS_IO_Write+0x34>)
 8000bf8:	f00a ff55 	bl	800baa6 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000bfc:	f002 fd0c 	bl	8003618 <MX_I2C4_Init>
        I2Cx_WriteMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
    }
 8000c00:	b007      	add	sp, #28
 8000c02:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c06:	bf00      	nop
 8000c08:	20012178 	.word	0x20012178

08000c0c <TS_IO_Read>:
      * @param  Addr: I2C address
      * @param  Reg: Reg address
      * @retval Data to be read
      */
    __weak uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
    {
 8000c0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        uint8_t read_value = 0;
 8000c0e:	2300      	movs	r3, #0
    {
 8000c10:	460a      	mov	r2, r1
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000c12:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
        uint8_t read_value = 0;
 8000c16:	f88d 3017 	strb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8000c20:	f10d 0117 	add.w	r1, sp, #23
 8000c24:	9100      	str	r1, [sp, #0]
 8000c26:	4601      	mov	r1, r0
 8000c28:	4806      	ldr	r0, [pc, #24]	@ (8000c44 <TS_IO_Read+0x38>)
 8000c2a:	f00b f82f 	bl	800bc8c <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 8000c2e:	b120      	cbz	r0, 8000c3a <TS_IO_Read+0x2e>
        HAL_I2C_DeInit(i2c_handler);
 8000c30:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <TS_IO_Read+0x38>)
 8000c32:	f00a ff38 	bl	800baa6 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000c36:	f002 fcef 	bl	8003618 <MX_I2C4_Init>

        I2Cx_ReadMultiple(&hi2c4, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

        return read_value;
    }
 8000c3a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000c3e:	b007      	add	sp, #28
 8000c40:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c44:	20012178 	.word	0x20012178

08000c48 <TS_IO_ReadMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval Number of read data
      */
    __weak uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t* Buffer, uint16_t Length)
    {
 8000c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000c4a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8000c4e:	9200      	str	r2, [sp, #0]
 8000c50:	460a      	mov	r2, r1
 8000c52:	4601      	mov	r1, r0
 8000c54:	4807      	ldr	r0, [pc, #28]	@ (8000c74 <TS_IO_ReadMultiple+0x2c>)
 8000c56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f00b f816 	bl	800bc8c <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 8000c60:	4604      	mov	r4, r0
 8000c62:	b120      	cbz	r0, 8000c6e <TS_IO_ReadMultiple+0x26>
        HAL_I2C_DeInit(i2c_handler);
 8000c64:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <TS_IO_ReadMultiple+0x2c>)
 8000c66:	f00a ff1e 	bl	800baa6 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000c6a:	f002 fcd5 	bl	8003618 <MX_I2C4_Init>
        return I2Cx_ReadMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
    }
 8000c6e:	4620      	mov	r0, r4
 8000c70:	b004      	add	sp, #16
 8000c72:	bd10      	pop	{r4, pc}
 8000c74:	20012178 	.word	0x20012178

08000c78 <BSP_TS_Init>:
      * @param  ts_SizeX : Maximum X size of the TS area on LCD
      * @param  ts_SizeY : Maximum Y size of the TS area on LCD
      * @retval TS_OK if all initializations are OK. Other value if error.
      */
    __weak uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
    {
 8000c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
        /* but the prototype of Init() is like that in template and should be respected       */

        /* Initialize the communication channel to sensor (I2C) if necessary */
        /* that is initialization is done only once after a power up         */
        ft6x06_ts_drv.Init(I2C_Address);
 8000c7a:	4d13      	ldr	r5, [pc, #76]	@ (8000cc8 <BSP_TS_Init+0x50>)
    {
 8000c7c:	4606      	mov	r6, r0
        ft6x06_ts_drv.Init(I2C_Address);
 8000c7e:	4c13      	ldr	r4, [pc, #76]	@ (8000ccc <BSP_TS_Init+0x54>)
    {
 8000c80:	460f      	mov	r7, r1
        ft6x06_ts_drv.Init(I2C_Address);
 8000c82:	682b      	ldr	r3, [r5, #0]
 8000c84:	7820      	ldrb	r0, [r4, #0]
 8000c86:	4798      	blx	r3

        ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8000c88:	686b      	ldr	r3, [r5, #4]
 8000c8a:	2054      	movs	r0, #84	@ 0x54
 8000c8c:	4798      	blx	r3
        if (ts_id1 != FT6206_ID_VALUE)
 8000c8e:	b2c0      	uxtb	r0, r0
 8000c90:	2811      	cmp	r0, #17
 8000c92:	d009      	beq.n	8000ca8 <BSP_TS_Init+0x30>
        {
            ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8000c94:	686b      	ldr	r3, [r5, #4]
 8000c96:	2070      	movs	r0, #112	@ 0x70
 8000c98:	4798      	blx	r3
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000c9a:	2370      	movs	r3, #112	@ 0x70
            I2C_Address    = TS_I2C_ADDRESS;
        }

        /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
        /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000c9c:	b2c0      	uxtb	r0, r0
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000c9e:	7023      	strb	r3, [r4, #0]
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000ca0:	2811      	cmp	r0, #17
 8000ca2:	d003      	beq.n	8000cac <BSP_TS_Init+0x34>

            } /* of if(ts_status == TS_OK) */
        }
        else
        {
            ts_status = TS_DEVICE_NOT_FOUND;
 8000ca4:	2003      	movs	r0, #3
        }

        return (ts_status);
    }
 8000ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            I2C_Address    = TS_I2C_ADDRESS;
 8000ca8:	2354      	movs	r3, #84	@ 0x54
 8000caa:	7023      	strb	r3, [r4, #0]
            if (ts_SizeX < ts_SizeY)
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <BSP_TS_Init+0x58>)
                ts_orientation = TS_SWAP_NONE;
 8000cae:	42be      	cmp	r6, r7
 8000cb0:	bf2c      	ite	cs
 8000cb2:	260c      	movcs	r6, #12
 8000cb4:	2601      	movcc	r6, #1
                ft6x06_ts_drv.Reset(I2C_Address);
 8000cb6:	7820      	ldrb	r0, [r4, #0]
 8000cb8:	701e      	strb	r6, [r3, #0]
 8000cba:	68ab      	ldr	r3, [r5, #8]
 8000cbc:	4798      	blx	r3
                ft6x06_ts_drv.Start(I2C_Address);
 8000cbe:	7820      	ldrb	r0, [r4, #0]
 8000cc0:	68eb      	ldr	r3, [r5, #12]
 8000cc2:	4798      	blx	r3
        uint8_t ts_status = TS_OK;
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	e7ee      	b.n	8000ca6 <BSP_TS_Init+0x2e>
 8000cc8:	20000038 	.word	0x20000038
 8000ccc:	20000181 	.word	0x20000181
 8000cd0:	20000182 	.word	0x20000182

08000cd4 <_ZN20STM32TouchController4initEv>:
{
 8000cd4:	b508      	push	{r3, lr}
    if (BSP_TS_Init(800, 480) == TS_OK)
 8000cd6:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8000cda:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000cde:	f7ff ffcb 	bl	8000c78 <BSP_TS_Init>
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <_ZN20STM32TouchController4initEv+0x2c>)
 8000ce4:	b910      	cbnz	r0, 8000cec <_ZN20STM32TouchController4initEv+0x18>
        bsp_ts_initialized = true;
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
}
 8000cea:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1fb      	bne.n	8000cea <_ZN20STM32TouchController4initEv+0x16>
 8000cf2:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <_ZN20STM32TouchController4initEv+0x30>)
 8000cf4:	216a      	movs	r1, #106	@ 0x6a
 8000cf6:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <_ZN20STM32TouchController4initEv+0x34>)
 8000cf8:	4804      	ldr	r0, [pc, #16]	@ (8000d0c <_ZN20STM32TouchController4initEv+0x38>)
 8000cfa:	f029 fbd5 	bl	802a4a8 <__assert_func>
 8000cfe:	bf00      	nop
 8000d00:	20000180 	.word	0x20000180
 8000d04:	0802b5ac 	.word	0x0802b5ac
 8000d08:	0802b5bf 	.word	0x0802b5bf
 8000d0c:	0802b5e9 	.word	0x0802b5e9

08000d10 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
__weak uint8_t BSP_TS_GetState(TS_StateTypeDef* TS_State)
{
 8000d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t xDiff;
    uint16_t yDiff;
    uint32_t index;

    /* Check and update the number of touches active detected */
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000d14:	4a34      	ldr	r2, [pc, #208]	@ (8000de8 <BSP_TS_GetState+0xd8>)
{
 8000d16:	4605      	mov	r5, r0
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000d18:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 8000df8 <BSP_TS_GetState+0xe8>
{
 8000d1c:	b085      	sub	sp, #20
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000d1e:	7810      	ldrb	r0, [r2, #0]
 8000d20:	f8da 3010 	ldr.w	r3, [sl, #16]
 8000d24:	4798      	blx	r3
 8000d26:	7028      	strb	r0, [r5, #0]
    if (TS_State->touchDetected)
 8000d28:	b150      	cbz	r0, 8000d40 <BSP_TS_GetState+0x30>
 8000d2a:	4e30      	ldr	r6, [pc, #192]	@ (8000dec <BSP_TS_GetState+0xdc>)
 8000d2c:	46a9      	mov	r9, r5
 8000d2e:	4f30      	ldr	r7, [pc, #192]	@ (8000df0 <BSP_TS_GetState+0xe0>)
 8000d30:	f10d 0b0c 	add.w	fp, sp, #12
 8000d34:	ac02      	add	r4, sp, #8
    {
        for (index = 0; index < TS_State->touchDetected; index++)
 8000d36:	f04f 0800 	mov.w	r8, #0
 8000d3a:	782b      	ldrb	r3, [r5, #0]
 8000d3c:	4598      	cmp	r8, r3
 8000d3e:	d303      	bcc.n	8000d48 <BSP_TS_GetState+0x38>
            TS_State->touchY[index] = _y[index];
        } /* of for(index=0; index < TS_State->touchDetected; index++) */
    } /* end of if(TS_State->touchDetected != 0) */

    return (ts_status);
}
 8000d40:	2000      	movs	r0, #0
 8000d42:	b005      	add	sp, #20
 8000d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8000d48:	4827      	ldr	r0, [pc, #156]	@ (8000de8 <BSP_TS_GetState+0xd8>)
 8000d4a:	465a      	mov	r2, fp
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8000d52:	7800      	ldrb	r0, [r0, #0]
        for (index = 0; index < TS_State->touchDetected; index++)
 8000d54:	f108 0801 	add.w	r8, r8, #1
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8000d58:	4798      	blx	r3
            if (ts_orientation & TS_SWAP_XY)
 8000d5a:	4b26      	ldr	r3, [pc, #152]	@ (8000df4 <BSP_TS_GetState+0xe4>)
 8000d5c:	46b4      	mov	ip, r6
 8000d5e:	46be      	mov	lr, r7
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	3604      	adds	r6, #4
 8000d64:	3704      	adds	r7, #4
 8000d66:	0719      	lsls	r1, r3, #28
                tmp = Raw_x[index];
 8000d68:	bf41      	itttt	mi
 8000d6a:	8822      	ldrhmi	r2, [r4, #0]
                Raw_x[index] = Raw_y[index];
 8000d6c:	f8bb 1000 	ldrhmi.w	r1, [fp]
                Raw_y[index] = tmp;
 8000d70:	f8ab 2000 	strhmi.w	r2, [fp]
                Raw_x[index] = Raw_y[index];
 8000d74:	8021      	strhmi	r1, [r4, #0]
            if (ts_orientation & TS_SWAP_X)
 8000d76:	079a      	lsls	r2, r3, #30
                Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8000d78:	bf41      	itttt	mi
 8000d7a:	8822      	ldrhmi	r2, [r4, #0]
 8000d7c:	f5c2 7247 	rsbmi	r2, r2, #796	@ 0x31c
 8000d80:	3203      	addmi	r2, #3
 8000d82:	8022      	strhmi	r2, [r4, #0]
            if (ts_orientation & TS_SWAP_Y)
 8000d84:	075b      	lsls	r3, r3, #29
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000d86:	f856 2c04 	ldr.w	r2, [r6, #-4]
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000d8a:	bf48      	it	mi
 8000d8c:	f8bb 3000 	ldrhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000d90:	f834 0b02 	ldrh.w	r0, [r4], #2
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000d94:	bf42      	ittt	mi
 8000d96:	f5c3 73ef 	rsbmi	r3, r3, #478	@ 0x1de
 8000d9a:	3301      	addmi	r3, #1
 8000d9c:	f8ab 3000 	strhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000da0:	b293      	uxth	r3, r2
 8000da2:	4290      	cmp	r0, r2
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000da4:	f83b 1b02 	ldrh.w	r1, [fp], #2
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000da8:	bf8c      	ite	hi
 8000daa:	1ac3      	subhi	r3, r0, r3
 8000dac:	1a1b      	subls	r3, r3, r0
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	9301      	str	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000db2:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4299      	cmp	r1, r3
            if ((xDiff + yDiff) > 5)
 8000dba:	9b01      	ldr	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000dbc:	bf8c      	ite	hi
 8000dbe:	1a8a      	subhi	r2, r1, r2
 8000dc0:	1a52      	subls	r2, r2, r1
 8000dc2:	b292      	uxth	r2, r2
            if ((xDiff + yDiff) > 5)
 8000dc4:	4413      	add	r3, r2
 8000dc6:	2b05      	cmp	r3, #5
                _x[index] = Raw_x[index];
 8000dc8:	bfc8      	it	gt
 8000dca:	f846 0c04 	strgt.w	r0, [r6, #-4]
            TS_State->touchX[index] = _x[index];
 8000dce:	f8dc 3000 	ldr.w	r3, [ip]
                _y[index] = Raw_y[index];
 8000dd2:	bfc8      	it	gt
 8000dd4:	f847 1c04 	strgt.w	r1, [r7, #-4]
            TS_State->touchX[index] = _x[index];
 8000dd8:	f829 3f02 	strh.w	r3, [r9, #2]!
            TS_State->touchY[index] = _y[index];
 8000ddc:	f8de 3000 	ldr.w	r3, [lr]
 8000de0:	f8a9 3004 	strh.w	r3, [r9, #4]
        for (index = 0; index < TS_State->touchDetected; index++)
 8000de4:	e7a9      	b.n	8000d3a <BSP_TS_GetState+0x2a>
 8000de6:	bf00      	nop
 8000de8:	20000181 	.word	0x20000181
 8000dec:	20000178 	.word	0x20000178
 8000df0:	20000170 	.word	0x20000170
 8000df4:	20000182 	.word	0x20000182
 8000df8:	20000038 	.word	0x20000038

08000dfc <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8000dfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (bsp_ts_initialized)
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
{
 8000e00:	460e      	mov	r6, r1
 8000e02:	4615      	mov	r5, r2
    if (bsp_ts_initialized)
 8000e04:	781c      	ldrb	r4, [r3, #0]
 8000e06:	b91c      	cbnz	r4, 8000e10 <_ZN20STM32TouchController11sampleTouchERlS0_+0x14>
    return false;
 8000e08:	2400      	movs	r4, #0
}
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	b004      	add	sp, #16
 8000e0e:	bd70      	pop	{r4, r5, r6, pc}
        BSP_TS_GetState(&state);
 8000e10:	a801      	add	r0, sp, #4
 8000e12:	f7ff ff7d 	bl	8000d10 <BSP_TS_GetState>
        if (state.touchDetected)
 8000e16:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f4      	beq.n	8000e08 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = state.touchX[0];
 8000e1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000e22:	6033      	str	r3, [r6, #0]
            y = state.touchY[0];
 8000e24:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8000e28:	602b      	str	r3, [r5, #0]
            return true;
 8000e2a:	e7ee      	b.n	8000e0a <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8000e2c:	20000180 	.word	0x20000180

08000e30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000e30:	2803      	cmp	r0, #3
 8000e32:	d823      	bhi.n	8000e7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8000e34:	e8df f000 	tbb	[pc, r0]
 8000e38:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000e3c:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000e3e:	2140      	movs	r1, #64	@ 0x40
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	fab2 f282 	clz	r2, r2
 8000e46:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000e48:	480e      	ldr	r0, [pc, #56]	@ (8000e84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000e4a:	f00a bcb3 	b.w	800b7b4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000e50:	2180      	movs	r1, #128	@ 0x80
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	fab2 f282 	clz	r2, r2
 8000e58:	0952      	lsrs	r2, r2, #5
 8000e5a:	e7f5      	b.n	8000e48 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000e5e:	2102      	movs	r1, #2
 8000e60:	4809      	ldr	r0, [pc, #36]	@ (8000e88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	fab2 f282 	clz	r2, r2
 8000e68:	0952      	lsrs	r2, r2, #5
 8000e6a:	e7ee      	b.n	8000e4a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000e6e:	2140      	movs	r1, #64	@ 0x40
 8000e70:	4806      	ldr	r0, [pc, #24]	@ (8000e8c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	fab2 f282 	clz	r2, r2
 8000e78:	0952      	lsrs	r2, r2, #5
 8000e7a:	e7e6      	b.n	8000e4a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000184 	.word	0x20000184
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40022400 	.word	0x40022400
 8000e8c:	40021400 	.word	0x40021400

08000e90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8000e90:	2803      	cmp	r0, #3
 8000e92:	d823      	bhi.n	8000edc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8000e94:	e8df f000 	tbb	[pc, r0]
 8000e98:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8000e9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000e9e:	2140      	movs	r1, #64	@ 0x40
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	3a00      	subs	r2, #0
 8000ea4:	bf18      	it	ne
 8000ea6:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000ea8:	480e      	ldr	r0, [pc, #56]	@ (8000ee4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000eaa:	f00a bc83 	b.w	800b7b4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000eb0:	2180      	movs	r1, #128	@ 0x80
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	3a00      	subs	r2, #0
 8000eb6:	bf18      	it	ne
 8000eb8:	2201      	movne	r2, #1
 8000eba:	e7f5      	b.n	8000ea8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	4809      	ldr	r0, [pc, #36]	@ (8000ee8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	3a00      	subs	r2, #0
 8000ec6:	bf18      	it	ne
 8000ec8:	2201      	movne	r2, #1
 8000eca:	e7ee      	b.n	8000eaa <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000ece:	2140      	movs	r1, #64	@ 0x40
 8000ed0:	4806      	ldr	r0, [pc, #24]	@ (8000eec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	3a00      	subs	r2, #0
 8000ed6:	bf18      	it	ne
 8000ed8:	2201      	movne	r2, #1
 8000eda:	e7e6      	b.n	8000eaa <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000184 	.word	0x20000184
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40022400 	.word	0x40022400
 8000eec:	40021400 	.word	0x40021400

08000ef0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8000ef0:	2803      	cmp	r0, #3
 8000ef2:	d80f      	bhi.n	8000f14 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8000ef4:	e8df f000 	tbb	[pc, r0]
 8000ef8:	0b080602 	.word	0x0b080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000efc:	2140      	movs	r1, #64	@ 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000efe:	4806      	ldr	r0, [pc, #24]	@ (8000f18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000f00:	f00a bc5d 	b.w	800b7be <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000f04:	2180      	movs	r1, #128	@ 0x80
 8000f06:	e7fa      	b.n	8000efe <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000f08:	2102      	movs	r1, #2
 8000f0a:	4804      	ldr	r0, [pc, #16]	@ (8000f1c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8000f0c:	e7f8      	b.n	8000f00 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000f0e:	2140      	movs	r1, #64	@ 0x40
 8000f10:	4803      	ldr	r0, [pc, #12]	@ (8000f20 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8000f12:	e7f5      	b.n	8000f00 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40022400 	.word	0x40022400
 8000f20:	40021400 	.word	0x40021400

08000f24 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000f24:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8000f26:	2803      	cmp	r0, #3
 8000f28:	d813      	bhi.n	8000f52 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 8000f2a:	e8df f000 	tbb	[pc, r0]
 8000f2e:	0a02      	.short	0x0a02
 8000f30:	0f0c      	.short	0x0f0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000f32:	2140      	movs	r1, #64	@ 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000f34:	4808      	ldr	r0, [pc, #32]	@ (8000f58 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000f36:	f00a fc37 	bl	800b7a8 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8000f3a:	1e43      	subs	r3, r0, #1
 8000f3c:	4258      	negs	r0, r3
 8000f3e:	4158      	adcs	r0, r3
 8000f40:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000f42:	2180      	movs	r1, #128	@ 0x80
 8000f44:	e7f6      	b.n	8000f34 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000f46:	2102      	movs	r1, #2
 8000f48:	4804      	ldr	r0, [pc, #16]	@ (8000f5c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8000f4a:	e7f4      	b.n	8000f36 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000f4c:	2140      	movs	r1, #64	@ 0x40
 8000f4e:	4804      	ldr	r0, [pc, #16]	@ (8000f60 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8000f50:	e7f1      	b.n	8000f36 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8000f52:	2000      	movs	r0, #0
 8000f54:	e7f1      	b.n	8000f3a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000f56:	bf00      	nop
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40022400 	.word	0x40022400
 8000f60:	40021400 	.word	0x40021400

08000f64 <_ZN8touchgfx4GPIO4initEv>:
{
 8000f64:	b570      	push	{r4, r5, r6, lr}
 8000f66:	4d08      	ldr	r5, [pc, #32]	@ (8000f88 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8000f68:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8000f6a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000f6c:	b2e0      	uxtb	r0, r4
 8000f6e:	f7ff ffd9 	bl	8000f24 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000f72:	b118      	cbz	r0, 8000f7c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8000f74:	682b      	ldr	r3, [r5, #0]
 8000f76:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8000f78:	bf18      	it	ne
 8000f7a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000f7c:	3401      	adds	r4, #1
 8000f7e:	3504      	adds	r5, #4
 8000f80:	2c05      	cmp	r4, #5
 8000f82:	d1f3      	bne.n	8000f6c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8000f84:	bd70      	pop	{r4, r5, r6, pc}
 8000f86:	bf00      	nop
 8000f88:	20000184 	.word	0x20000184

08000f8c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8000f8c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8000f8e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8000f92:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8000f96:	4770      	bx	lr

08000f98 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8000f98:	2000      	movs	r0, #0
 8000f9a:	4770      	bx	lr

08000f9c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000f9c:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000f9e:	3900      	subs	r1, #0
 8000fa0:	4b02      	ldr	r3, [pc, #8]	@ (8000fac <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8000fa2:	bf18      	it	ne
 8000fa4:	2101      	movne	r1, #1
 8000fa6:	7019      	strb	r1, [r3, #0]
    }
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	200279d7 	.word	0x200279d7

08000fb0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	4770      	bx	lr

08000fb4 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8000fb4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8000fb6:	b10b      	cbz	r3, 8000fbc <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8000fb8:	4608      	mov	r0, r1
 8000fba:	4718      	bx	r3
        }
    }
 8000fbc:	4770      	bx	lr

08000fbe <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000fbe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000fc2:	4770      	bx	lr

08000fc4 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8000fc4:	6840      	ldr	r0, [r0, #4]
 8000fc6:	6803      	ldr	r3, [r0, #0]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	4718      	bx	r3

08000fcc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8000fcc:	4b01      	ldr	r3, [pc, #4]	@ (8000fd4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200001a8 	.word	0x200001a8

08000fd8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000fd8:	4770      	bx	lr
	...

08000fdc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000fdc:	b4f0      	push	{r4, r5, r6, r7}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000fde:	2300      	movs	r3, #0
 8000fe0:	4c10      	ldr	r4, [pc, #64]	@ (8001024 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8000fe2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000fea:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000fee:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ff2:	f3c3 05c9 	ubfx	r5, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ff6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000ffa:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000ffc:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001000:	462a      	mov	r2, r5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001002:	ea4c 7782 	orr.w	r7, ip, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001006:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001008:	f8c4 7274 	str.w	r7, [r4, #628]	@ 0x274
      } while (ways-- != 0U);
 800100c:	d2f9      	bcs.n	8001002 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
    } while(sets-- != 0U);
 800100e:	3b20      	subs	r3, #32
 8001010:	f113 0f20 	cmn.w	r3, #32
 8001014:	d1f2      	bne.n	8000ffc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x20>
 8001016:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800101a:	f3bf 8f6f 	isb	sy
    /* USER CODE END flushFrameBuffer step 1 */

    /* USER CODE BEGIN flushFrameBuffer step 2 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
    /* USER CODE END flushFrameBuffer step 2 */
}
 800101e:	bcf0      	pop	{r4, r5, r6, r7}
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001020:	f001 bb5e 	b.w	80026e0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001028:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 800102a:	f001 fadb 	bl	80025e4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102e:	4b02      	ldr	r3, [pc, #8]	@ (8001038 <_ZN11TouchGFXHAL16enableInterruptsEv+0x10>)
 8001030:	2204      	movs	r2, #4
 8001032:	60da      	str	r2, [r3, #12]
    NVIC_EnableIRQ(DSI_IRQn);
    /* USER CODE END enableInterrupts */
}
 8001034:	bd08      	pop	{r3, pc}
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100

0800103c <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 800103c:	b510      	push	{r4, lr}
 800103e:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001040:	f001 fc5e 	bl	8002900 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001044:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001048:	b113      	cbz	r3, 8001050 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 800104a:	4b02      	ldr	r3, [pc, #8]	@ (8001054 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
    }
}
 8001050:	bd10      	pop	{r4, pc}
 8001052:	bf00      	nop
 8001054:	20000014 	.word	0x20000014

08001058 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001058:	f001 bacd 	b.w	80025f6 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

0800105c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 800105c:	b510      	push	{r4, lr}
 800105e:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001060:	f011 fc80 	bl	8012964 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	4620      	mov	r0, r4
 8001068:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 800106c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001070:	4718      	bx	r3

08001072 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001072:	f010 bed5 	b.w	8011e20 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001076 <_ZN11TouchGFXHALD0Ev>:
 8001076:	b510      	push	{r4, lr}
 8001078:	4604      	mov	r4, r0
 800107a:	217c      	movs	r1, #124	@ 0x7c
 800107c:	f028 fe9d 	bl	8029dba <_ZdlPvj>
 8001080:	4620      	mov	r0, r4
 8001082:	bd10      	pop	{r4, pc}

08001084 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001084:	4b02      	ldr	r3, [pc, #8]	@ (8001090 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 800108a:	f010 bf05 	b.w	8011e98 <_ZN8touchgfx3HAL10beginFrameEv>
 800108e:	bf00      	nop
 8001090:	20000014 	.word	0x20000014

08001094 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001094:	b538      	push	{r3, r4, r5, lr}
 8001096:	4604      	mov	r4, r0
    instrumentation.init();
 8001098:	4d07      	ldr	r5, [pc, #28]	@ (80010b8 <_ZN11TouchGFXHAL10initializeEv+0x24>)
    TouchGFXGeneratedHAL::initialize();
 800109a:	f001 fafb 	bl	8002694 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 800109e:	2300      	movs	r3, #0
    instrumentation.init();
 80010a0:	4628      	mov	r0, r5
 80010a2:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 80010a6:	f7ff fd1f 	bl	8000ae8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 80010aa:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 80010ac:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 80010ae:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
        buttonController = btnCtrl;
 80010b2:	4b02      	ldr	r3, [pc, #8]	@ (80010bc <_ZN11TouchGFXHAL10initializeEv+0x28>)
 80010b4:	6163      	str	r3, [r4, #20]
}
 80010b6:	bd38      	pop	{r3, r4, r5, pc}
 80010b8:	2000019c 	.word	0x2000019c
 80010bc:	20000198 	.word	0x20000198

080010c0 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 80010c0:	6803      	ldr	r3, [r0, #0]
{
 80010c2:	4604      	mov	r4, r0
 80010c4:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 80010c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010ca:	4798      	blx	r3
    enableInterrupts();
 80010cc:	6823      	ldr	r3, [r4, #0]
 80010ce:	4620      	mov	r0, r4
 80010d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80010d2:	4798      	blx	r3
    OSWrappers::waitForVSync();
 80010d4:	f000 ff04 	bl	8001ee0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80010d8:	6823      	ldr	r3, [r4, #0]
 80010da:	4620      	mov	r0, r4
 80010dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010de:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 80010e0:	2100      	movs	r1, #0
 80010e2:	2329      	movs	r3, #41	@ 0x29
 80010e4:	2215      	movs	r2, #21
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 80010e8:	9100      	str	r1, [sp, #0]
 80010ea:	f00a f958 	bl	800b39e <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 80010ee:	f000 fef7 	bl	8001ee0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	4620      	mov	r0, r4
 80010f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010f8:	4798      	blx	r3
    for (;;)
 80010fa:	e7f8      	b.n	80010ee <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 80010fc:	200121cc 	.word	0x200121cc

08001100 <_ZN11TouchGFXHAL19configureInterruptsEv>:
{
 8001100:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::configureInterrupts();
 8001102:	f001 fa67 	bl	80025d4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2107      	movs	r1, #7
 800110a:	205a      	movs	r0, #90	@ 0x5a
 800110c:	f009 fa4c 	bl	800a5a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2107      	movs	r1, #7
 8001114:	2062      	movs	r0, #98	@ 0x62
}
 8001116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 800111a:	f009 ba45 	b.w	800a5a8 <HAL_NVIC_SetPriority>
	...

08001120 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001120:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001124:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001126:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001128:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 800112c:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 800112e:	428c      	cmp	r4, r1
 8001130:	d009      	beq.n	8001146 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001132:	b93a      	cbnz	r2, 8001144 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001134:	490a      	ldr	r1, [pc, #40]	@ (8001160 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001136:	4a0b      	ldr	r2, [pc, #44]	@ (8001164 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001138:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800113a:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 800113c:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800113e:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001140:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001142:	701a      	strb	r2, [r3, #0]
        }
    }
 8001144:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001146:	2a00      	cmp	r2, #0
 8001148:	d0fc      	beq.n	8001144 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800114a:	4a06      	ldr	r2, [pc, #24]	@ (8001164 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 800114c:	4904      	ldr	r1, [pc, #16]	@ (8001160 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800114e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001150:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001152:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001154:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001156:	2200      	movs	r2, #0
 8001158:	e7f3      	b.n	8001142 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 800115a:	bf00      	nop
 800115c:	200279d0 	.word	0x200279d0
 8001160:	200279ce 	.word	0x200279ce
 8001164:	200279cc 	.word	0x200279cc

08001168 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001168:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	428b      	cmp	r3, r1
 8001170:	d803      	bhi.n	800117a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001172:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	4293      	cmp	r3, r2
 8001178:	d905      	bls.n	8001186 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 800117a:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 800117c:	219e      	movs	r1, #158	@ 0x9e
 800117e:	4a07      	ldr	r2, [pc, #28]	@ (800119c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001180:	4807      	ldr	r0, [pc, #28]	@ (80011a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001182:	f029 f991 	bl	802a4a8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001188:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 800118a:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 800118c:	801a      	strh	r2, [r3, #0]
    }
 800118e:	bd08      	pop	{r3, pc}
 8001190:	200279cc 	.word	0x200279cc
 8001194:	200279ce 	.word	0x200279ce
 8001198:	0802b648 	.word	0x0802b648
 800119c:	0802b6ab 	.word	0x0802b6ab
 80011a0:	0802b6ee 	.word	0x0802b6ee
 80011a4:	200279d2 	.word	0x200279d2
 80011a8:	200279d4 	.word	0x200279d4

080011ac <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 80011ac:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 80011ae:	f001 fbdf 	bl	8002970 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <_ZN11TouchGFXHAL17disableInterruptsEv+0x18>)
 80011b4:	2204      	movs	r2, #4
 80011b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 80011ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011be:	f3bf 8f6f 	isb	sy
}
 80011c2:	bd08      	pop	{r3, pc}
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 80011c8:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 80011ca:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 80011ce:	b118      	cbz	r0, 80011d8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 80011d0:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 80011d2:	6803      	ldr	r3, [r0, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4718      	bx	r3
    }
 80011d8:	4770      	bx	lr
	...

080011dc <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 80011dc:	b570      	push	{r4, r5, r6, lr}
 80011de:	460d      	mov	r5, r1
 80011e0:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 80011e4:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80011e6:	b935      	cbnz	r5, 80011f6 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 80011e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 80011ea:	f240 21d2 	movw	r1, #722	@ 0x2d2
 80011ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001218 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 80011f0:	480a      	ldr	r0, [pc, #40]	@ (800121c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 80011f2:	f029 f959 	bl	802a4a8 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80011f6:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80011fa:	3a00      	subs	r2, #0
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 80011fe:	bf18      	it	ne
 8001200:	2201      	movne	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001204:	6803      	ldr	r3, [r0, #0]
}
 8001206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800120a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800120e:	4718      	bx	r3
 8001210:	200001a8 	.word	0x200001a8
 8001214:	0802b733 	.word	0x0802b733
 8001218:	0802b76b 	.word	0x0802b76b
 800121c:	0802b6ee 	.word	0x0802b6ee
 8001220:	200279d6 	.word	0x200279d6

08001224 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8001224:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001228:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800122a:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 800122e:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 8001230:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001234:	4a1d      	ldr	r2, [pc, #116]	@ (80012ac <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001236:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001238:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 800123c:	62c3      	str	r3, [r0, #44]	@ 0x2c
 800123e:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 8001240:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001244:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 8001246:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 800124a:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 800124c:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 800124e:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 8001252:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001256:	4a16      	ldr	r2, [pc, #88]	@ (80012b0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001258:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 800125c:	3520      	adds	r5, #32
          buttonController(0),
 800125e:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8001262:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8001266:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 800126a:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 800126e:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001272:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8001276:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800127a:	6782      	str	r2, [r0, #120]	@ 0x78
 800127c:	b2ad      	uxth	r5, r5
        instance = this;
 800127e:	4a0d      	ldr	r2, [pc, #52]	@ (80012b4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001280:	42b5      	cmp	r5, r6
        instance = this;
 8001282:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001284:	4a0c      	ldr	r2, [pc, #48]	@ (80012b8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001286:	8015      	strh	r5, [r2, #0]
 8001288:	4a0c      	ldr	r2, [pc, #48]	@ (80012bc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 800128a:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800128c:	bf28      	it	cs
 800128e:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001290:	4a0b      	ldr	r2, [pc, #44]	@ (80012c0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001292:	bf38      	it	cc
 8001294:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001296:	8016      	strh	r6, [r2, #0]
 8001298:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800129a:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800129e:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80012a0:	4a09      	ldr	r2, [pc, #36]	@ (80012c8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 80012a2:	7013      	strb	r3, [r2, #0]
 80012a4:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 80012a6:	6003      	str	r3, [r0, #0]
}
 80012a8:	bd70      	pop	{r4, r5, r6, pc}
 80012aa:	bf00      	nop
 80012ac:	01000001 	.word	0x01000001
 80012b0:	01010000 	.word	0x01010000
 80012b4:	200279d8 	.word	0x200279d8
 80012b8:	200279cc 	.word	0x200279cc
 80012bc:	200279d2 	.word	0x200279d2
 80012c0:	200279ce 	.word	0x200279ce
 80012c4:	200279d4 	.word	0x200279d4
 80012c8:	200279d0 	.word	0x200279d0
 80012cc:	0802b7c4 	.word	0x0802b7c4

080012d0 <OTM8009A_IO_Delay>:
      * @brief  OTM8009A delay
      * @param  Delay: Delay in ms
      */
    __weak void OTM8009A_IO_Delay(uint32_t Delay)
    {
        HAL_Delay(Delay);
 80012d0:	f008 bede 	b.w	800a090 <HAL_Delay>

080012d4 <DSI_IO_WriteCmd>:
     * @param  pParams: Pointer to parameter values table.
     * @retval HAL status
     */
    void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t* pParams)
    {
        if (NbrParams <= 1)
 80012d4:	2801      	cmp	r0, #1
    {
 80012d6:	4603      	mov	r3, r0
 80012d8:	b507      	push	{r0, r1, r2, lr}
        if (NbrParams <= 1)
 80012da:	d80a      	bhi.n	80012f2 <DSI_IO_WriteCmd+0x1e>
        {
            HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 80012dc:	784b      	ldrb	r3, [r1, #1]
 80012de:	2215      	movs	r2, #21
 80012e0:	4808      	ldr	r0, [pc, #32]	@ (8001304 <DSI_IO_WriteCmd+0x30>)
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	780b      	ldrb	r3, [r1, #0]
 80012e6:	2100      	movs	r1, #0
 80012e8:	f00a f859 	bl	800b39e <HAL_DSI_ShortWrite>
        }
        else
        {
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
        }
    }
 80012ec:	b003      	add	sp, #12
 80012ee:	f85d fb04 	ldr.w	pc, [sp], #4
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 80012f2:	9101      	str	r1, [sp, #4]
 80012f4:	5c0a      	ldrb	r2, [r1, r0]
 80012f6:	2100      	movs	r1, #0
 80012f8:	4802      	ldr	r0, [pc, #8]	@ (8001304 <DSI_IO_WriteCmd+0x30>)
 80012fa:	9200      	str	r2, [sp, #0]
 80012fc:	2239      	movs	r2, #57	@ 0x39
 80012fe:	f00a f85f 	bl	800b3c0 <HAL_DSI_LongWrite>
    }
 8001302:	e7f3      	b.n	80012ec <DSI_IO_WriteCmd+0x18>
 8001304:	200121cc 	.word	0x200121cc

08001308 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001308:	b537      	push	{r0, r1, r2, r4, r5, lr}
        static uint8_t ScanLineParams[2];

        uint16_t scanline = 533;
        ScanLineParams[0] = scanline >> 8;
 800130a:	2302      	movs	r3, #2
 800130c:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <LCD_ReqTear+0x30>)
        ScanLineParams[1] = scanline & 0x00FF;
 800130e:	2515      	movs	r5, #21

        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001310:	4c0a      	ldr	r4, [pc, #40]	@ (800133c <LCD_ReqTear+0x34>)
        ScanLineParams[0] = scanline >> 8;
 8001312:	7013      	strb	r3, [r2, #0]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001314:	2100      	movs	r1, #0
        ScanLineParams[1] = scanline & 0x00FF;
 8001316:	7055      	strb	r5, [r2, #1]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001318:	4620      	mov	r0, r4
 800131a:	9201      	str	r2, [sp, #4]
 800131c:	2244      	movs	r2, #68	@ 0x44
 800131e:	9200      	str	r2, [sp, #0]
 8001320:	2239      	movs	r2, #57	@ 0x39
 8001322:	f00a f84d 	bl	800b3c0 <HAL_DSI_LongWrite>
        // set_tear_on
        HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001326:	2100      	movs	r1, #0
 8001328:	2335      	movs	r3, #53	@ 0x35
 800132a:	462a      	mov	r2, r5
 800132c:	4620      	mov	r0, r4
 800132e:	9100      	str	r1, [sp, #0]
 8001330:	f00a f835 	bl	800b39e <HAL_DSI_ShortWrite>
    }
 8001334:	b003      	add	sp, #12
 8001336:	bd30      	pop	{r4, r5, pc}
 8001338:	20000194 	.word	0x20000194
 800133c:	200121cc 	.word	0x200121cc

08001340 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001340:	b510      	push	{r4, lr}
 8001342:	4604      	mov	r4, r0
    LCD_ReqTear();
 8001344:	f7ff ffe0 	bl	8001308 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x48>)
 800134a:	2202      	movs	r2, #2
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800134c:	4620      	mov	r0, r4
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001354:	2201      	movs	r2, #1
 8001356:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 800135a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001366:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800136a:	f042 0202 	orr.w	r2, r2, #2
 800136e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_LTDC_ENABLE_IT(&hltdc, (LTDC_IT_LI | LTDC_IT_FU)); /* Enable line and FIFO underrun interrupts */
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x4c>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8001378:	f043 0303 	orr.w	r3, r3, #3
}
 800137c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_LTDC_ENABLE_IT(&hltdc, (LTDC_IT_LI | LTDC_IT_FU)); /* Enable line and FIFO underrun interrupts */
 8001380:	6353      	str	r3, [r2, #52]	@ 0x34
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001382:	f001 b937 	b.w	80025f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
 8001386:	bf00      	nop
 8001388:	200121cc 	.word	0x200121cc
 800138c:	20011fb8 	.word	0x20011fb8

08001390 <LCD_SetUpdateRegion>:

    void LCD_SetUpdateRegion(int idx)
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001390:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <LCD_SetUpdateRegion+0x20>)
 8001392:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    {
 8001396:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	232a      	movs	r3, #42	@ 0x2a
 800139c:	2239      	movs	r2, #57	@ 0x39
 800139e:	2100      	movs	r1, #0
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2304      	movs	r3, #4
 80013a4:	4803      	ldr	r0, [pc, #12]	@ (80013b4 <LCD_SetUpdateRegion+0x24>)
 80013a6:	f00a f80b 	bl	800b3c0 <HAL_DSI_LongWrite>
    }
 80013aa:	b003      	add	sp, #12
 80013ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80013b0:	20000004 	.word	0x20000004
 80013b4:	200121cc 	.word	0x200121cc

080013b8 <HAL_DSI_TearingEffectCallback>:
    // {
    //     HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
    // }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 80013b8:	b570      	push	{r4, r5, r6, lr}
        return instance;
 80013ba:	4d15      	ldr	r5, [pc, #84]	@ (8001410 <HAL_DSI_TearingEffectCallback+0x58>)
 80013bc:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff fd36 	bl	8000e30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80013c4:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 80013c6:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80013ca:	3301      	adds	r3, #1
 80013cc:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 80013d0:	f000 fd7a 	bl	8001ec8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 80013d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <HAL_DSI_TearingEffectCallback+0x5c>)
        return instance;
 80013d6:	6828      	ldr	r0, [r5, #0]
 80013d8:	781a      	ldrb	r2, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 80013da:	781b      	ldrb	r3, [r3, #0]
        lockDMAToPorch = enableLock;
 80013dc:	f880 204a 	strb.w	r2, [r0, #74]	@ 0x4a
 80013e0:	b123      	cbz	r3, 80013ec <HAL_DSI_TearingEffectCallback+0x34>
 80013e2:	4d0d      	ldr	r5, [pc, #52]	@ (8001418 <HAL_DSI_TearingEffectCallback+0x60>)
 80013e4:	782b      	ldrb	r3, [r5, #0]
 80013e6:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 80013ea:	b123      	cbz	r3, 80013f6 <HAL_DSI_TearingEffectCallback+0x3e>
            HAL_DSI_Refresh(hdsi);
            displayRefreshing = true;
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
 80013ec:	2000      	movs	r0, #0
        }
    }
 80013ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80013f2:	f7ff bd4d 	b.w	8000e90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                HAL::getInstance()->swapFrameBuffers();
 80013f6:	f011 fab5 	bl	8012964 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            updateRegion = 0;
 80013fa:	4b08      	ldr	r3, [pc, #32]	@ (800141c <HAL_DSI_TearingEffectCallback+0x64>)
            LCD_SetUpdateRegion(updateRegion);
 80013fc:	4630      	mov	r0, r6
            updateRegion = 0;
 80013fe:	601e      	str	r6, [r3, #0]
            LCD_SetUpdateRegion(updateRegion);
 8001400:	f7ff ffc6 	bl	8001390 <LCD_SetUpdateRegion>
            HAL_DSI_Refresh(hdsi);
 8001404:	4620      	mov	r0, r4
 8001406:	f009 ffba 	bl	800b37e <HAL_DSI_Refresh>
            displayRefreshing = true;
 800140a:	2301      	movs	r3, #1
 800140c:	702b      	strb	r3, [r5, #0]
    }
 800140e:	bd70      	pop	{r4, r5, r6, pc}
 8001410:	200279d8 	.word	0x200279d8
 8001414:	20000014 	.word	0x20000014
 8001418:	200001b0 	.word	0x200001b0
 800141c:	200001ac 	.word	0x200001ac

08001420 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
        updateRegion++;
 8001420:	4b30      	ldr	r3, [pc, #192]	@ (80014e4 <HAL_DSI_EndOfRefreshCallback+0xc4>)
    {
 8001422:	b570      	push	{r4, r5, r6, lr}
 8001424:	4c30      	ldr	r4, [pc, #192]	@ (80014e8 <HAL_DSI_EndOfRefreshCallback+0xc8>)
 8001426:	4605      	mov	r5, r0
        updateRegion++;
 8001428:	6818      	ldr	r0, [r3, #0]
        if (updateRegion < 4)
        {
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 800142a:	f8d4 1404 	ldr.w	r1, [r4, #1028]	@ 0x404
        updateRegion++;
 800142e:	3001      	adds	r0, #1
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 8001430:	f021 0108 	bic.w	r1, r1, #8
        updateRegion++;
 8001434:	6018      	str	r0, [r3, #0]
        if (updateRegion < 4)
 8001436:	2803      	cmp	r0, #3
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 8001438:	4b2c      	ldr	r3, [pc, #176]	@ (80014ec <HAL_DSI_EndOfRefreshCallback+0xcc>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b2c      	ldr	r3, [pc, #176]	@ (80014f0 <HAL_DSI_EndOfRefreshCallback+0xd0>)
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 800143e:	f8c4 1404 	str.w	r1, [r4, #1028]	@ 0x404
        if (updateRegion < 4)
 8001442:	dc27      	bgt.n	8001494 <HAL_DSI_EndOfRefreshCallback+0x74>
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 8001444:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001448:	fb01 2200 	mla	r2, r1, r0, r2
 800144c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

            uint16_t REAL_WIDTH = 200;
            uint16_t ADJUSTED_WIDTH = 200;
            if (updateRegion == 3)
            {
                ADJUSTED_WIDTH += 32;
 8001450:	bf0c      	ite	eq
 8001452:	23e8      	moveq	r3, #232	@ 0xe8
            uint16_t ADJUSTED_WIDTH = 200;
 8001454:	23c8      	movne	r3, #200	@ 0xc8
            }

            LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2; //adj
 8001456:	4a26      	ldr	r2, [pc, #152]	@ (80014f0 <HAL_DSI_EndOfRefreshCallback+0xd0>)
 8001458:	3302      	adds	r3, #2
 800145a:	041b      	lsls	r3, r3, #16
 800145c:	f443 73f1 	orr.w	r3, r3, #482	@ 0x1e2
 8001460:	6113      	str	r3, [r2, #16]
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001462:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <HAL_DSI_EndOfRefreshCallback+0xd4>)
 8001464:	6153      	str	r3, [r2, #20]
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8001466:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800146a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);
 800146e:	4b22      	ldr	r3, [pc, #136]	@ (80014f8 <HAL_DSI_EndOfRefreshCallback+0xd8>)
 8001470:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001474:	2301      	movs	r3, #1
 8001476:	6253      	str	r3, [r2, #36]	@ 0x24
            LCD_SetUpdateRegion(updateRegion);
 8001478:	f7ff ff8a 	bl	8001390 <LCD_SetUpdateRegion>

            DSI->WCR |= DSI_WCR_DSIEN;
 800147c:	4a1a      	ldr	r2, [pc, #104]	@ (80014e8 <HAL_DSI_EndOfRefreshCallback+0xc8>)
            HAL_DSI_Refresh(hdsi);
 800147e:	4628      	mov	r0, r5
            DSI->WCR |= DSI_WCR_DSIEN;
 8001480:	f8d2 3404 	ldr.w	r3, [r2, #1028]	@ 0x404
 8001484:	f043 0308 	orr.w	r3, r3, #8
        //             // Signal to the framework that display update has finished.
        //             HAL::getInstance()->frontPorchEntered();
        //         }
        //     }
        // }
    }
 8001488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DSI->WCR |= DSI_WCR_DSIEN;
 800148c:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
            HAL_DSI_Refresh(hdsi);
 8001490:	f009 bf75 	b.w	800b37e <HAL_DSI_Refresh>
            LTDC_Layer1->CFBAR = (uint32_t)currFbBase;
 8001494:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
            LCD_SetUpdateRegion(0);
 8001498:	2000      	movs	r0, #0
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 800149a:	4a18      	ldr	r2, [pc, #96]	@ (80014fc <HAL_DSI_EndOfRefreshCallback+0xdc>)
 800149c:	611a      	str	r2, [r3, #16]
            LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 800149e:	f102 1201 	add.w	r2, r2, #65537	@ 0x10001
 80014a2:	615a      	str	r2, [r3, #20]
            LTDC_Layer1->WHPCR = ((WIDTH + 2) << 16) | 3;
 80014a4:	4a16      	ldr	r2, [pc, #88]	@ (8001500 <HAL_DSI_EndOfRefreshCallback+0xe0>)
 80014a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
            LTDC_Layer1->CFBLR = (((832 * 2) << 16) | ((WIDTH * 2) + 3));
 80014aa:	4a13      	ldr	r2, [pc, #76]	@ (80014f8 <HAL_DSI_EndOfRefreshCallback+0xd8>)
 80014ac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80014b0:	2201      	movs	r2, #1
 80014b2:	625a      	str	r2, [r3, #36]	@ 0x24
            LCD_SetUpdateRegion(0);
 80014b4:	f7ff ff6c 	bl	8001390 <LCD_SetUpdateRegion>
            DSI->WCR |= DSI_WCR_DSIEN;
 80014b8:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 80014bc:	2000      	movs	r0, #0
            DSI->WCR |= DSI_WCR_DSIEN;
 80014be:	f043 0308 	orr.w	r3, r3, #8
 80014c2:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 80014c6:	f7ff fce3 	bl	8000e90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            displayRefreshing = false;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
        return instance;
 80014d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <HAL_DSI_EndOfRefreshCallback+0xe8>)
 80014d2:	6818      	ldr	r0, [r3, #0]
            if (HAL::getInstance())
 80014d4:	b120      	cbz	r0, 80014e0 <HAL_DSI_EndOfRefreshCallback+0xc0>
        allowDMATransfers();
 80014d6:	6803      	ldr	r3, [r0, #0]
    }
 80014d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	4718      	bx	r3
 80014e0:	bd70      	pop	{r4, r5, r6, pc}
 80014e2:	bf00      	nop
 80014e4:	200001ac 	.word	0x200001ac
 80014e8:	40016c00 	.word	0x40016c00
 80014ec:	200001a8 	.word	0x200001a8
 80014f0:	40016800 	.word	0x40016800
 80014f4:	00ca01e3 	.word	0x00ca01e3
 80014f8:	06800193 	.word	0x06800193
 80014fc:	00ca01e2 	.word	0x00ca01e2
 8001500:	00ca0003 	.word	0x00ca0003
 8001504:	200001b0 	.word	0x200001b0
 8001508:	200279d8 	.word	0x200279d8

0800150c <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 800150c:	4601      	mov	r1, r0
 800150e:	b508      	push	{r3, lr}
        return instance;
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <IdleTaskHook+0x14>)
 8001512:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001514:	b101      	cbz	r1, 8001518 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001516:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001518:	f011 fa3e 	bl	8012998 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 800151c:	2001      	movs	r0, #1
 800151e:	bd08      	pop	{r3, pc}
 8001520:	200279d8 	.word	0x200279d8

08001524 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <_GLOBAL__sub_I_displayRefreshing+0x18>)
 8001526:	2200      	movs	r2, #0
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 8001528:	4805      	ldr	r0, [pc, #20]	@ (8001540 <_GLOBAL__sub_I_displayRefreshing+0x1c>)
 800152a:	605a      	str	r2, [r3, #4]
          cc_in(0)
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	4a05      	ldr	r2, [pc, #20]	@ (8001544 <_GLOBAL__sub_I_displayRefreshing+0x20>)
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <_GLOBAL__sub_I_displayRefreshing+0x24>)
 8001534:	6003      	str	r3, [r0, #0]
        init();
 8001536:	f7ff bb15 	b.w	8000b64 <_ZN8touchgfx10KeySampler4initEv>
 800153a:	bf00      	nop
 800153c:	2000019c 	.word	0x2000019c
 8001540:	20000198 	.word	0x20000198
 8001544:	0802b570 	.word	0x0802b570
 8001548:	0802b598 	.word	0x0802b598

0800154c <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 800154c:	6940      	ldr	r0, [r0, #20]
 800154e:	4770      	bx	lr

08001550 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8001550:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8001554:	4770      	bx	lr

08001556 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 8001556:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001558:	b923      	cbnz	r3, 8001564 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 800155a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800155c:	3800      	subs	r0, #0
 800155e:	bf18      	it	ne
 8001560:	2001      	movne	r0, #1
 8001562:	4770      	bx	lr
 8001564:	2001      	movs	r0, #1
}
 8001566:	4770      	bx	lr

08001568 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8001568:	6880      	ldr	r0, [r0, #8]
 800156a:	4770      	bx	lr

0800156c <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 800156c:	4770      	bx	lr

0800156e <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 800156e:	3004      	adds	r0, #4
{
 8001570:	b510      	push	{r4, lr}
 8001572:	460c      	mov	r4, r1
    *data = videoInfo;
 8001574:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8001576:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800157a:	bd10      	pop	{r4, pc}

0800157c <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 800157c:	4770      	bx	lr
	...

08001580 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8001580:	b508      	push	{r3, lr}
    assert(0);
 8001582:	4a03      	ldr	r2, [pc, #12]	@ (8001590 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8001584:	f240 11cf 	movw	r1, #463	@ 0x1cf
 8001588:	4b02      	ldr	r3, [pc, #8]	@ (8001594 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800158a:	4803      	ldr	r0, [pc, #12]	@ (8001598 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 800158c:	f028 ff8c 	bl	802a4a8 <__assert_func>
 8001590:	0802b894 	.word	0x0802b894
 8001594:	0802dd1b 	.word	0x0802dd1b
 8001598:	0802b8ef 	.word	0x0802b8ef

0800159c <_ZN20HardwareMJPEGDecoderD0Ev>:
 800159c:	b510      	push	{r4, lr}
 800159e:	4604      	mov	r4, r0
 80015a0:	2144      	movs	r1, #68	@ 0x44
 80015a2:	f028 fc0a 	bl	8029dba <_ZdlPvj>
 80015a6:	4620      	mov	r0, r4
 80015a8:	bd10      	pop	{r4, pc}
	...

080015ac <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80015ac:	b538      	push	{r3, r4, r5, lr}
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80015ae:	2500      	movs	r5, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80015b2:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80015b4:	6003      	str	r3, [r0, #0]
 80015b6:	63c5      	str	r5, [r0, #60]	@ 0x3c
 80015b8:	f880 5040 	strb.w	r5, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80015bc:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80015c0:	e9c0 5507 	strd	r5, r5, [r0, #28]
 80015c4:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80015c8:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
 80015cc:	e9c0 550d 	strd	r5, r5, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 80015d0:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
 80015d4:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
 80015d8:	f001 fe48 	bl	800326c <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
 80015dc:	462a      	mov	r2, r5
 80015de:	4629      	mov	r1, r5
 80015e0:	2001      	movs	r0, #1
 80015e2:	f00d fc87 	bl	800eef4 <osSemaphoreNew>
 80015e6:	4b03      	ldr	r3, [pc, #12]	@ (80015f4 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
 80015e8:	6018      	str	r0, [r3, #0]
}
 80015ea:	4620      	mov	r0, r4
 80015ec:	bd38      	pop	{r3, r4, r5, pc}
 80015ee:	bf00      	nop
 80015f0:	0802bb70 	.word	0x0802bb70
 80015f4:	200001c8 	.word	0x200001c8

080015f8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 80015f8:	b410      	push	{r4}
 80015fa:	460c      	mov	r4, r1
 80015fc:	4611      	mov	r1, r2
 80015fe:	461a      	mov	r2, r3
    if (reader != 0)
 8001600:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001602:	b13b      	cbz	r3, 8001614 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8001604:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8001606:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001608:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 800160a:	4420      	add	r0, r4
}
 800160c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8001610:	f029 b9ee 	b.w	802a9f0 <strncmp>
        src = (const char*)movieData + offset;
 8001614:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8001616:	e7f8      	b.n	800160a <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08001618 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8001618:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 800161a:	b510      	push	{r4, lr}
    if (reader != 0)
 800161c:	b173      	cbz	r3, 800163c <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800161e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8001620:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 8001622:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8001624:	1853      	adds	r3, r2, r1
 8001626:	5c52      	ldrb	r2, [r2, r1]
 8001628:	7898      	ldrb	r0, [r3, #2]
 800162a:	785c      	ldrb	r4, [r3, #1]
 800162c:	0400      	lsls	r0, r0, #16
 800162e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 8001632:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8001634:	78db      	ldrb	r3, [r3, #3]
 8001636:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800163a:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 800163c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800163e:	1853      	adds	r3, r2, r1
        val |= d[0];
 8001640:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 8001642:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8001644:	7898      	ldrb	r0, [r3, #2]
 8001646:	0400      	lsls	r0, r0, #16
 8001648:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800164c:	e7f1      	b.n	8001632 <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800164e <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800164e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001650:	b143      	cbz	r3, 8001664 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 8001652:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8001654:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8001656:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001658:	185a      	adds	r2, r3, r1
 800165a:	5c58      	ldrb	r0, [r3, r1]
 800165c:	7852      	ldrb	r2, [r2, #1]
 800165e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8001662:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8001664:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001666:	185a      	adds	r2, r3, r1
        val |= d[0];
 8001668:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 800166a:	7853      	ldrb	r3, [r2, #1]
 800166c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8001670:	4770      	bx	lr
	...

08001674 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8001674:	b570      	push	{r4, r5, r6, lr}
 8001676:	4604      	mov	r4, r0
    if (reader != 0)
 8001678:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 800167a:	460d      	mov	r5, r1
 800167c:	4616      	mov	r6, r2
    if (reader != 0)
 800167e:	b1d8      	cbz	r0, 80016b8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8001680:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001682:	4293      	cmp	r3, r2
 8001684:	d208      	bcs.n	8001698 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8001686:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8001688:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 800168a:	21ab      	movs	r1, #171	@ 0xab
 800168c:	480d      	ldr	r0, [pc, #52]	@ (80016c4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800168e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8001694:	f028 ff08 	bl	802a4a8 <__assert_func>
        reader->seek(offset);
 8001698:	6803      	ldr	r3, [r0, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800169e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80016a0:	4632      	mov	r2, r6
 80016a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80016a4:	6803      	ldr	r3, [r0, #0]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	4798      	blx	r3
 80016aa:	b910      	cbnz	r0, 80016b2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80016ac:	230d      	movs	r3, #13
 80016ae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 80016b2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 80016b4:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 80016b6:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80016b8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80016ba:	4408      	add	r0, r1
 80016bc:	e7fb      	b.n	80016b6 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80016be:	bf00      	nop
 80016c0:	0802b953 	.word	0x0802b953
 80016c4:	0802b8ef 	.word	0x0802b8ef
 80016c8:	0802b940 	.word	0x0802b940

080016cc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80016cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80016d0:	6943      	ldr	r3, [r0, #20]
{
 80016d2:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80016d4:	b92b      	cbnz	r3, 80016e2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80016d6:	4b22      	ldr	r3, [pc, #136]	@ (8001760 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80016d8:	21f1      	movs	r1, #241	@ 0xf1
 80016da:	4a22      	ldr	r2, [pc, #136]	@ (8001764 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80016dc:	4822      	ldr	r0, [pc, #136]	@ (8001768 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80016de:	f028 fee3 	bl	802a4a8 <__assert_func>
    readData(currentMovieOffset, 8);
 80016e2:	2208      	movs	r2, #8
 80016e4:	6981      	ldr	r1, [r0, #24]
 80016e6:	f7ff ffc5 	bl	8001674 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80016ea:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80016ec:	f243 0630 	movw	r6, #12336	@ 0x3030
 80016f0:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80016f4:	3104      	adds	r1, #4
 80016f6:	4620      	mov	r0, r4
 80016f8:	f7ff ff8e 	bl	8001618 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80016fc:	69a3      	ldr	r3, [r4, #24]
 80016fe:	4418      	add	r0, r3
 8001700:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001702:	f100 0208 	add.w	r2, r0, #8
 8001706:	429a      	cmp	r2, r3
 8001708:	d306      	bcc.n	8001718 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 800170a:	2301      	movs	r3, #1
    return false;
 800170c:	2000      	movs	r0, #0
    frameNumber = 1;
 800170e:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 8001710:	6a23      	ldr	r3, [r4, #32]
 8001712:	61a3      	str	r3, [r4, #24]
}
 8001714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8001718:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800171a:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800171e:	2208      	movs	r2, #8
 8001720:	4620      	mov	r0, r4
        frameNumber++;
 8001722:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8001724:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8001728:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800172a:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 800172c:	f7ff ffa2 	bl	8001674 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 8001730:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8001734:	4620      	mov	r0, r4
 8001736:	4649      	mov	r1, r9
 8001738:	f7ff ff89 	bl	800164e <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800173c:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 8001740:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001742:	4620      	mov	r0, r4
 8001744:	f7ff ff83 	bl	800164e <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8001748:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800174c:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800174e:	4620      	mov	r0, r4
 8001750:	f7ff ff62 	bl	8001618 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8001754:	45b0      	cmp	r8, r6
 8001756:	d1d1      	bne.n	80016fc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8001758:	42bd      	cmp	r5, r7
 800175a:	d1cf      	bne.n	80016fc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 800175c:	2001      	movs	r0, #1
 800175e:	e7d9      	b.n	8001714 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 8001760:	0802b995 	.word	0x0802b995
 8001764:	0802b9de 	.word	0x0802b9de
 8001768:	0802b8ef 	.word	0x0802b8ef

0800176c <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 800176c:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800176e:	6803      	ldr	r3, [r0, #0]
 8001770:	bf38      	it	cc
 8001772:	2101      	movcc	r1, #1
 8001774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8001776:	b570      	push	{r4, r5, r6, lr}
 8001778:	460d      	mov	r5, r1
 800177a:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 800177c:	4798      	blx	r3
 800177e:	42a8      	cmp	r0, r5
 8001780:	d204      	bcs.n	800178c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	4620      	mov	r0, r4
 8001786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001788:	4798      	blx	r3
 800178a:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 800178c:	1e6b      	subs	r3, r5, #1
 800178e:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8001790:	2210      	movs	r2, #16
 8001792:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8001794:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8001798:	f106 0108 	add.w	r1, r6, #8
 800179c:	f7ff ff6a 	bl	8001674 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80017a0:	f106 0110 	add.w	r1, r6, #16
 80017a4:	4620      	mov	r0, r4
 80017a6:	f7ff ff37 	bl	8001618 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80017aa:	6a23      	ldr	r3, [r4, #32]
 80017ac:	3b04      	subs	r3, #4
 80017ae:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80017b0:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80017b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080017b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80017b8:	2100      	movs	r1, #0
    readData(0, 72);
 80017ba:	2248      	movs	r2, #72	@ 0x48
{
 80017bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017c0:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80017c2:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80017c4:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 80017c8:	f7ff ff54 	bl	8001674 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80017cc:	69a6      	ldr	r6, [r4, #24]
 80017ce:	2304      	movs	r3, #4
 80017d0:	4a63      	ldr	r2, [pc, #396]	@ (8001960 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80017d2:	4631      	mov	r1, r6
 80017d4:	4620      	mov	r0, r4
 80017d6:	f7ff ff0f 	bl	80015f8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80017da:	b148      	cbz	r0, 80017f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80017dc:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80017de:	4a61      	ldr	r2, [pc, #388]	@ (8001964 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80017e0:	f240 1139 	movw	r1, #313	@ 0x139
        lastError = AVI_ERROR_NOT_RIFF;
 80017e4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 80017e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001968 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80017ea:	4860      	ldr	r0, [pc, #384]	@ (800196c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 80017ec:	f028 fe5c 	bl	802a4a8 <__assert_func>
    currentMovieOffset += 8;
 80017f0:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80017f4:	2304      	movs	r3, #4
 80017f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001970 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80017f8:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80017fa:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80017fc:	f7ff fefc 	bl	80015f8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001800:	b138      	cbz	r0, 8001812 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8001802:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8001804:	4a57      	ldr	r2, [pc, #348]	@ (8001964 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8001806:	f240 1141 	movw	r1, #321	@ 0x141
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800180a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 800180e:	4b59      	ldr	r3, [pc, #356]	@ (8001974 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8001810:	e7eb      	b.n	80017ea <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 8001812:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8001816:	2304      	movs	r3, #4
 8001818:	4a57      	ldr	r2, [pc, #348]	@ (8001978 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 800181a:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 800181c:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800181e:	f7ff feeb 	bl	80015f8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001822:	4607      	mov	r7, r0
 8001824:	b138      	cbz	r0, 8001836 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8001826:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8001828:	4a4e      	ldr	r2, [pc, #312]	@ (8001964 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800182a:	f44f 71a4 	mov.w	r1, #328	@ 0x148
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800182e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 8001832:	4b52      	ldr	r3, [pc, #328]	@ (800197c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8001834:	e7d9      	b.n	80017ea <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8001836:	f106 0110 	add.w	r1, r6, #16
 800183a:	4620      	mov	r0, r4
 800183c:	f7ff feec 	bl	8001618 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8001840:	4605      	mov	r5, r0
 8001842:	b920      	cbnz	r0, 800184e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8001844:	4b4e      	ldr	r3, [pc, #312]	@ (8001980 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8001846:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 800184a:	4a46      	ldr	r2, [pc, #280]	@ (8001964 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800184c:	e7cd      	b.n	80017ea <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800184e:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 8001852:	2304      	movs	r3, #4
 8001854:	4a4b      	ldr	r2, [pc, #300]	@ (8001984 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8001856:	4620      	mov	r0, r4
 8001858:	4641      	mov	r1, r8
 800185a:	f7ff fecd 	bl	80015f8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800185e:	2800      	cmp	r0, #0
 8001860:	d049      	beq.n	80018f6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8001862:	2306      	movs	r3, #6
 8001864:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 8001868:	2304      	movs	r3, #4
 800186a:	4a47      	ldr	r2, [pc, #284]	@ (8001988 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 800186c:	f106 0118 	add.w	r1, r6, #24
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff fec1 	bl	80015f8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001876:	2800      	cmp	r0, #0
 8001878:	d03f      	beq.n	80018fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800187a:	2307      	movs	r3, #7
 800187c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8001880:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8001882:	4f42      	ldr	r7, [pc, #264]	@ (800198c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8001884:	220c      	movs	r2, #12
 8001886:	4620      	mov	r0, r4
 8001888:	4629      	mov	r1, r5
 800188a:	f7ff fef3 	bl	8001674 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800188e:	f105 0608 	add.w	r6, r5, #8
 8001892:	2304      	movs	r3, #4
 8001894:	463a      	mov	r2, r7
 8001896:	4620      	mov	r0, r4
 8001898:	4631      	mov	r1, r6
 800189a:	f7ff fead 	bl	80015f8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800189e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80018a2:	2800      	cmp	r0, #0
 80018a4:	d048      	beq.n	8001938 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d148      	bne.n	800193c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80018aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80018ac:	42ab      	cmp	r3, r5
 80018ae:	d849      	bhi.n	8001944 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80018b0:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80018b4:	3504      	adds	r5, #4
 80018b6:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80018b8:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80018ba:	4629      	mov	r1, r5
 80018bc:	f7ff feac 	bl	8001618 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80018c0:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80018c2:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80018c4:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff fea6 	bl	8001618 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80018cc:	4406      	add	r6, r0
    readData(listOffset, 4);
 80018ce:	2204      	movs	r2, #4
 80018d0:	4620      	mov	r0, r4
 80018d2:	4631      	mov	r1, r6
 80018d4:	f7ff fece 	bl	8001674 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80018d8:	2304      	movs	r3, #4
 80018da:	4a2d      	ldr	r2, [pc, #180]	@ (8001990 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80018dc:	4631      	mov	r1, r6
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff fe8a 	bl	80015f8 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80018e4:	2800      	cmp	r0, #0
 80018e6:	d138      	bne.n	800195a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 80018e8:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80018ea:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 80018ec:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80018ee:	69a3      	ldr	r3, [r4, #24]
 80018f0:	6223      	str	r3, [r4, #32]
}
 80018f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80018f6:	2701      	movs	r7, #1
 80018f8:	e7b6      	b.n	8001868 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 80018fa:	2f00      	cmp	r7, #0
 80018fc:	d0c0      	beq.n	8001880 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80018fe:	f106 0120 	add.w	r1, r6, #32
 8001902:	4620      	mov	r0, r4
 8001904:	f7ff fe88 	bl	8001618 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001908:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 800190c:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8001910:	fbb0 f0f3 	udiv	r0, r0, r3
 8001914:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8001916:	4620      	mov	r0, r4
 8001918:	f7ff fe7e 	bl	8001618 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 800191c:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8001920:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8001922:	4620      	mov	r0, r4
 8001924:	f7ff fe78 	bl	8001618 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8001928:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 800192c:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800192e:	4620      	mov	r0, r4
 8001930:	f7ff fe72 	bl	8001618 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001934:	6120      	str	r0, [r4, #16]
 8001936:	e7a3      	b.n	8001880 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0b9      	beq.n	80018b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 800193c:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800193e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 8001942:	e7d6      	b.n	80018f2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8001944:	1d29      	adds	r1, r5, #4
 8001946:	4620      	mov	r0, r4
 8001948:	f7ff fe66 	bl	8001618 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 800194c:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800194e:	220c      	movs	r2, #12
 8001950:	4620      	mov	r0, r4
 8001952:	4629      	mov	r1, r5
 8001954:	f7ff fe8e 	bl	8001674 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8001958:	e799      	b.n	800188e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800195a:	230b      	movs	r3, #11
 800195c:	e7ef      	b.n	800193e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 800195e:	bf00      	nop
 8001960:	0802ba11 	.word	0x0802ba11
 8001964:	0802ba2f 	.word	0x0802ba2f
 8001968:	0802ba16 	.word	0x0802ba16
 800196c:	0802b8ef 	.word	0x0802b8ef
 8001970:	0802ba5c 	.word	0x0802ba5c
 8001974:	0802ba61 	.word	0x0802ba61
 8001978:	0802ba79 	.word	0x0802ba79
 800197c:	0802ba7e 	.word	0x0802ba7e
 8001980:	0802ba94 	.word	0x0802ba94
 8001984:	0802baa0 	.word	0x0802baa0
 8001988:	0802baa5 	.word	0x0802baa5
 800198c:	0802baaa 	.word	0x0802baaa
 8001990:	0802baaf 	.word	0x0802baaf

08001994 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8001994:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 8001998:	2200      	movs	r2, #0
 800199a:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 800199c:	f7ff bf0c 	b.w	80017b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

080019a0 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80019a0:	b510      	push	{r4, lr}
    movieData = 0;
 80019a2:	2300      	movs	r3, #0
{
 80019a4:	4604      	mov	r4, r0
 80019a6:	4608      	mov	r0, r1
    movieData = 0;
 80019a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 80019aa:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80019ac:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	4798      	blx	r3
 80019b2:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80019b4:	4620      	mov	r0, r4
}
 80019b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80019ba:	f7ff befd 	b.w	80017b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080019c0 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80019c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 80019c2:	4c14      	ldr	r4, [pc, #80]	@ (8001a14 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 80019c4:	4d14      	ldr	r5, [pc, #80]	@ (8001a18 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 80019c6:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 80019c8:	2400      	movs	r4, #0
 80019ca:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <JPEG_Decode_DMA+0x5c>)
 80019cc:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80019ce:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <JPEG_Decode_DMA+0x60>)
        JPEG_OUT_Write_BufferIndex = 0;
 80019d0:	602c      	str	r4, [r5, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80019d2:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80019d4:	4b13      	ldr	r3, [pc, #76]	@ (8001a24 <JPEG_Decode_DMA+0x64>)
 80019d6:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80019d8:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <JPEG_Decode_DMA+0x68>)
 80019da:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80019dc:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <JPEG_Decode_DMA+0x6c>)
 80019de:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 80019e0:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <JPEG_Decode_DMA+0x70>)
 80019e2:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80019e4:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80019e6:	682a      	ldr	r2, [r5, #0]
 80019e8:	250c      	movs	r5, #12
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80019ea:	701c      	strb	r4, [r3, #0]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 80019ec:	609c      	str	r4, [r3, #8]
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80019ee:	731c      	strb	r4, [r3, #12]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 80019f0:	615c      	str	r4, [r3, #20]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80019f2:	fb05 3302 	mla	r3, r5, r2, r3
 80019f6:	4a10      	ldr	r2, [pc, #64]	@ (8001a38 <JPEG_Decode_DMA+0x78>)
 80019f8:	f44f 75c0 	mov.w	r5, #384	@ 0x180
 80019fc:	68d2      	ldr	r2, [r2, #12]
 80019fe:	436a      	muls	r2, r5
 8001a00:	9200      	str	r2, [sp, #0]
 8001a02:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f00a fdb2 	bl	800c570 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	b003      	add	sp, #12
 8001a10:	bd30      	pop	{r4, r5, pc}
 8001a12:	bf00      	nop
 8001a14:	200097f8 	.word	0x200097f8
 8001a18:	200097d0 	.word	0x200097d0
 8001a1c:	200097e4 	.word	0x200097e4
 8001a20:	200097d8 	.word	0x200097d8
 8001a24:	200097f4 	.word	0x200097f4
 8001a28:	200097ec 	.word	0x200097ec
 8001a2c:	200097f0 	.word	0x200097f0
 8001a30:	200001cc 	.word	0x200001cc
 8001a34:	20000018 	.word	0x20000018
 8001a38:	200001b4 	.word	0x200001b4

08001a3c <HAL_JPEG_InfoReadyCallback>:
     * @param hjpeg: JPEG handle pointer
     * @param pInfo: JPEG Info Struct pointer
     * @retval None
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
 8001a3c:	b508      	push	{r3, lr}
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8001a3e:	684b      	ldr	r3, [r1, #4]
    {
 8001a40:	4608      	mov	r0, r1
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d119      	bne.n	8001a7a <HAL_JPEG_InfoReadyCallback+0x3e>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 8001a46:	68cb      	ldr	r3, [r1, #12]
 8001a48:	071a      	lsls	r2, r3, #28
            if ((pInfo->ImageHeight % 16) != 0)
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
            }

            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac4 <HAL_JPEG_InfoReadyCallback+0x88>)
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8001a4c:	bf1e      	ittt	ne
 8001a4e:	f023 030f 	bicne.w	r3, r3, #15
 8001a52:	3310      	addne	r3, #16
 8001a54:	60cb      	strne	r3, [r1, #12]
            if ((pInfo->ImageHeight % 16) != 0)
 8001a56:	688b      	ldr	r3, [r1, #8]
 8001a58:	0719      	lsls	r1, r3, #28
            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001a5a:	491b      	ldr	r1, [pc, #108]	@ (8001ac8 <HAL_JPEG_InfoReadyCallback+0x8c>)
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8001a5c:	bf1e      	ittt	ne
 8001a5e:	f023 030f 	bicne.w	r3, r3, #15
 8001a62:	3310      	addne	r3, #16
 8001a64:	6083      	strne	r3, [r0, #8]
            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001a66:	f001 fb9f 	bl	80031a8 <TGFX_JPEG_GetDecodeColorConvertFunc>
            if (status != HAL_OK)
 8001a6a:	b348      	cbz	r0, 8001ac0 <HAL_JPEG_InfoReadyCallback+0x84>
            {
                assert(status == HAL_OK);
 8001a6c:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <HAL_JPEG_InfoReadyCallback+0x90>)
 8001a6e:	f240 2131 	movw	r1, #561	@ 0x231
 8001a72:	4a17      	ldr	r2, [pc, #92]	@ (8001ad0 <HAL_JPEG_InfoReadyCallback+0x94>)
                }
            }
            HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
            if (status != HAL_OK)
            {
                assert(status == HAL_OK);
 8001a74:	4817      	ldr	r0, [pc, #92]	@ (8001ad4 <HAL_JPEG_InfoReadyCallback+0x98>)
 8001a76:	f028 fd17 	bl	802a4a8 <__assert_func>
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d117      	bne.n	8001aae <HAL_JPEG_InfoReadyCallback+0x72>
                if ((pInfo->ImageWidth % 16) != 0)
 8001a7e:	68cb      	ldr	r3, [r1, #12]
 8001a80:	071a      	lsls	r2, r3, #28
 8001a82:	d003      	beq.n	8001a8c <HAL_JPEG_InfoReadyCallback+0x50>
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8001a84:	f023 030f 	bic.w	r3, r3, #15
 8001a88:	3310      	adds	r3, #16
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8001a8a:	60c3      	str	r3, [r0, #12]
                if ((pInfo->ImageHeight % 8) != 0)
 8001a8c:	6883      	ldr	r3, [r0, #8]
 8001a8e:	075a      	lsls	r2, r3, #29
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8001a90:	bf1e      	ittt	ne
 8001a92:	f023 0307 	bicne.w	r3, r3, #7
 8001a96:	3308      	addne	r3, #8
 8001a98:	6083      	strne	r3, [r0, #8]
            HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <HAL_JPEG_InfoReadyCallback+0x88>)
 8001a9c:	490a      	ldr	r1, [pc, #40]	@ (8001ac8 <HAL_JPEG_InfoReadyCallback+0x8c>)
 8001a9e:	f00f fe93 	bl	80117c8 <JPEG_GetDecodeColorConvertFunc>
            if (status != HAL_OK)
 8001aa2:	b168      	cbz	r0, 8001ac0 <HAL_JPEG_InfoReadyCallback+0x84>
                assert(status == HAL_OK);
 8001aa4:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <HAL_JPEG_InfoReadyCallback+0x90>)
 8001aa6:	f240 2152 	movw	r1, #594	@ 0x252
 8001aaa:	4a09      	ldr	r2, [pc, #36]	@ (8001ad0 <HAL_JPEG_InfoReadyCallback+0x94>)
 8001aac:	e7e2      	b.n	8001a74 <HAL_JPEG_InfoReadyCallback+0x38>
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f3      	bne.n	8001a9a <HAL_JPEG_InfoReadyCallback+0x5e>
                if ((pInfo->ImageWidth % 8) != 0)
 8001ab2:	68cb      	ldr	r3, [r1, #12]
 8001ab4:	0759      	lsls	r1, r3, #29
 8001ab6:	d0e9      	beq.n	8001a8c <HAL_JPEG_InfoReadyCallback+0x50>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8001ab8:	f023 0307 	bic.w	r3, r3, #7
 8001abc:	3308      	adds	r3, #8
 8001abe:	e7e4      	b.n	8001a8a <HAL_JPEG_InfoReadyCallback+0x4e>
            }
        }
    }
 8001ac0:	bd08      	pop	{r3, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200097dc 	.word	0x200097dc
 8001ac8:	200097d4 	.word	0x200097d4
 8001acc:	0802bab4 	.word	0x0802bab4
 8001ad0:	0802bac5 	.word	0x0802bac5
 8001ad4:	0802b8ef 	.word	0x0802b8ef

08001ad8 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8001ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8001b08 <HAL_JPEG_GetDataCallback+0x30>)
 8001ada:	6813      	ldr	r3, [r2, #0]
 8001adc:	440b      	add	r3, r1
    {
 8001ade:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 8001ae0:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b0c <HAL_JPEG_GetDataCallback+0x34>)
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d20c      	bcs.n	8001b04 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001aea:	4c09      	ldr	r4, [pc, #36]	@ (8001b10 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8001aec:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001aee:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001af0:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001af4:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001af6:	bf28      	it	cs
 8001af8:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001afc:	6021      	str	r1, [r4, #0]
        }
    }
 8001afe:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001b00:	f00a bd9d 	b.w	800c63e <HAL_JPEG_ConfigInputBuffer>
    }
 8001b04:	bc30      	pop	{r4, r5}
 8001b06:	4770      	bx	lr
 8001b08:	200097f4 	.word	0x200097f4
 8001b0c:	200097f0 	.word	0x200097f0
 8001b10:	200097ec 	.word	0x200097ec

08001b14 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8001b14:	b570      	push	{r4, r5, r6, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001b16:	4c19      	ldr	r4, [pc, #100]	@ (8001b7c <HAL_JPEG_DataReadyCallback+0x68>)
 8001b18:	210c      	movs	r1, #12
 8001b1a:	4d19      	ldr	r5, [pc, #100]	@ (8001b80 <HAL_JPEG_DataReadyCallback+0x6c>)
    {
 8001b1c:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	2001      	movs	r0, #1
 8001b22:	434b      	muls	r3, r1
 8001b24:	54e8      	strb	r0, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	fb01 5303 	mla	r3, r1, r3, r5
 8001b2c:	609a      	str	r2, [r3, #8]

        JPEG_OUT_Write_BufferIndex++;
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	4403      	add	r3, r0
 8001b32:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	4283      	cmp	r3, r0
 8001b38:	d901      	bls.n	8001b3e <HAL_JPEG_DataReadyCallback+0x2a>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	220c      	movs	r2, #12
 8001b42:	4353      	muls	r3, r2
 8001b44:	5ceb      	ldrb	r3, [r5, r3]
 8001b46:	b133      	cbz	r3, 8001b56 <HAL_JPEG_DataReadyCallback+0x42>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001b48:	2102      	movs	r1, #2
 8001b4a:	4630      	mov	r0, r6
 8001b4c:	f00a fd44 	bl	800c5d8 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <HAL_JPEG_DataReadyCallback+0x70>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001b56:	6822      	ldr	r2, [r4, #0]
 8001b58:	210c      	movs	r1, #12
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <HAL_JPEG_DataReadyCallback+0x74>)
 8001b5c:	4630      	mov	r0, r6
 8001b5e:	fb01 5502 	mla	r5, r1, r2, r5
 8001b62:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	6869      	ldr	r1, [r5, #4]
 8001b6a:	435a      	muls	r2, r3
 8001b6c:	f00a fd6a 	bl	800c644 <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        SEM_POST(semDecodingDone);
 8001b70:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_JPEG_DataReadyCallback+0x78>)
    }
 8001b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SEM_POST(semDecodingDone);
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	f00d ba50 	b.w	800f01c <osSemaphoreRelease>
 8001b7c:	200097d0 	.word	0x200097d0
 8001b80:	20000018 	.word	0x20000018
 8001b84:	200097e4 	.word	0x200097e4
 8001b88:	200001b4 	.word	0x200001b4
 8001b8c:	200001c8 	.word	0x200001c8

08001b90 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001b90:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8001b92:	e7fe      	b.n	8001b92 <HAL_JPEG_ErrorCallback+0x2>

08001b94 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8001b94:	4b01      	ldr	r3, [pc, #4]	@ (8001b9c <HAL_JPEG_DecodeCpltCallback+0x8>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	601a      	str	r2, [r3, #0]
    }
 8001b9a:	4770      	bx	lr
 8001b9c:	200097e8 	.word	0x200097e8

08001ba0 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8001ba0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint32_t ConvertedDataCount;

    if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 8001ba4:	4d38      	ldr	r5, [pc, #224]	@ (8001c88 <JPEG_OutputHandler+0xe8>)
 8001ba6:	260c      	movs	r6, #12
 8001ba8:	4c38      	ldr	r4, [pc, #224]	@ (8001c8c <JPEG_OutputHandler+0xec>)
 8001baa:	682b      	ldr	r3, [r5, #0]
 8001bac:	4373      	muls	r3, r6
 8001bae:	5ce3      	ldrb	r3, [r4, r3]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d149      	bne.n	8001c48 <JPEG_OutputHandler+0xa8>
    {
        /* Invalidate DCache prior to YCbCr/RGB software conversion. */
        if (SCB->CCR & SCB_CCR_DC_Msk)
 8001bb4:	4a36      	ldr	r2, [pc, #216]	@ (8001c90 <JPEG_OutputHandler+0xf0>)
 8001bb6:	6953      	ldr	r3, [r2, #20]
 8001bb8:	03db      	lsls	r3, r3, #15
 8001bba:	d51e      	bpl.n	8001bfa <JPEG_OutputHandler+0x5a>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001bc6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001bca:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001bce:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001bd2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001bd6:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001bd8:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001bdc:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001bde:	ea4c 7781 	orr.w	r7, ip, r1, lsl #30
      } while (ways-- != 0U);
 8001be2:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001be4:	f8c2 7274 	str.w	r7, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8001be8:	d2f9      	bcs.n	8001bde <JPEG_OutputHandler+0x3e>
    } while(sets-- != 0U);
 8001bea:	3b20      	subs	r3, #32
 8001bec:	f113 0f20 	cmn.w	r3, #32
 8001bf0:	d1f2      	bne.n	8001bd8 <JPEG_OutputHandler+0x38>
 8001bf2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001bf6:	f3bf 8f6f 	isb	sy
        {
            SCB_CleanInvalidateDCache();
        }

        MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001bfa:	270c      	movs	r7, #12
 8001bfc:	4e25      	ldr	r6, [pc, #148]	@ (8001c94 <JPEG_OutputHandler+0xf4>)
 8001bfe:	6828      	ldr	r0, [r5, #0]
 8001c00:	eb0d 0307 	add.w	r3, sp, r7
 8001c04:	6832      	ldr	r2, [r6, #0]
 8001c06:	fb07 4000 	mla	r0, r7, r0, r4
 8001c0a:	4923      	ldr	r1, [pc, #140]	@ (8001c98 <JPEG_OutputHandler+0xf8>)
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	4b23      	ldr	r3, [pc, #140]	@ (8001c9c <JPEG_OutputHandler+0xfc>)
 8001c10:	6809      	ldr	r1, [r1, #0]
 8001c12:	f8d3 8000 	ldr.w	r8, [r3]
 8001c16:	6883      	ldr	r3, [r0, #8]
 8001c18:	6840      	ldr	r0, [r0, #4]
 8001c1a:	47c0      	blx	r8
 8001c1c:	6833      	ldr	r3, [r6, #0]

        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001c1e:	2100      	movs	r1, #0
        MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001c20:	4403      	add	r3, r0
 8001c22:	6033      	str	r3, [r6, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001c24:	682b      	ldr	r3, [r5, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;

        JPEG_OUT_Read_BufferIndex++;
 8001c26:	1c5a      	adds	r2, r3, #1
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001c28:	437b      	muls	r3, r7
 8001c2a:	2a02      	cmp	r2, #2
 8001c2c:	eb04 0003 	add.w	r0, r4, r3
 8001c30:	54e1      	strb	r1, [r4, r3]
 8001c32:	bf28      	it	cs
 8001c34:	2200      	movcs	r2, #0
        if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
        {
            JPEG_OUT_Read_BufferIndex = 0;
        }

        if (MCU_BlockIndex == MCU_TotalNb)
 8001c36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <JPEG_OutputHandler+0x100>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 8001c38:	6081      	str	r1, [r0, #8]
        if (MCU_BlockIndex == MCU_TotalNb)
 8001c3a:	681b      	ldr	r3, [r3, #0]
        JPEG_OUT_Read_BufferIndex++;
 8001c3c:	602a      	str	r2, [r5, #0]
        if (MCU_BlockIndex == MCU_TotalNb)
 8001c3e:	6832      	ldr	r2, [r6, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d10f      	bne.n	8001c64 <JPEG_OutputHandler+0xc4>
        {
            return 1;
 8001c44:	2001      	movs	r0, #1
 8001c46:	e018      	b.n	8001c7a <JPEG_OutputHandler+0xda>
        }
    }
    else if ((JPEG_output_is_paused == 1) && \
 8001c48:	4916      	ldr	r1, [pc, #88]	@ (8001ca4 <JPEG_OutputHandler+0x104>)
 8001c4a:	680a      	ldr	r2, [r1, #0]
             (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
 8001c4c:	2a01      	cmp	r2, #1
 8001c4e:	d117      	bne.n	8001c80 <JPEG_OutputHandler+0xe0>
 8001c50:	4a15      	ldr	r2, [pc, #84]	@ (8001ca8 <JPEG_OutputHandler+0x108>)
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	4372      	muls	r2, r6
    else if ((JPEG_output_is_paused == 1) && \
 8001c56:	5ca2      	ldrb	r2, [r4, r2]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	d111      	bne.n	8001c80 <JPEG_OutputHandler+0xe0>
             (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
    {
        JPEG_output_is_paused = 0;
 8001c5c:	600b      	str	r3, [r1, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001c5e:	2102      	movs	r1, #2
 8001c60:	f00a ff28 	bl	800cab4 <HAL_JPEG_Resume>
    {
        return 2;
    }

    /* decode completed */
    if ((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd))
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <JPEG_OutputHandler+0xf4>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca0 <JPEG_OutputHandler+0x100>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d109      	bne.n	8001c84 <JPEG_OutputHandler+0xe4>
 8001c70:	4b0e      	ldr	r3, [pc, #56]	@ (8001cac <JPEG_OutputHandler+0x10c>)
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	3800      	subs	r0, #0
 8001c76:	bf18      	it	ne
 8001c78:	2001      	movne	r0, #1
    {
        return 1;
    }

    return 0;
}
 8001c7a:	b004      	add	sp, #16
 8001c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 2;
 8001c80:	2002      	movs	r0, #2
 8001c82:	e7fa      	b.n	8001c7a <JPEG_OutputHandler+0xda>
    return 0;
 8001c84:	2000      	movs	r0, #0
 8001c86:	e7f8      	b.n	8001c7a <JPEG_OutputHandler+0xda>
 8001c88:	200097d8 	.word	0x200097d8
 8001c8c:	20000018 	.word	0x20000018
 8001c90:	e000ed00 	.word	0xe000ed00
 8001c94:	200001cc 	.word	0x200001cc
 8001c98:	200097f8 	.word	0x200097f8
 8001c9c:	200097d4 	.word	0x200097d4
 8001ca0:	200097dc 	.word	0x200097dc
 8001ca4:	200097e4 	.word	0x200097e4
 8001ca8:	200097d0 	.word	0x200097d0
 8001cac:	200097e8 	.word	0x200097e8

08001cb0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8001cb0:	b570      	push	{r4, r5, r6, lr}
    if (length == 0)
 8001cb2:	2a00      	cmp	r2, #0
 8001cb4:	d030      	beq.n	8001d18 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d02e      	beq.n	8001d18 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>
        JPEG_ConvertorParams.bytes_pr_pixel = 2;
 8001cba:	4d18      	ldr	r5, [pc, #96]	@ (8001d1c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x6c>)
 8001cbc:	2402      	movs	r4, #2
 8001cbe:	612c      	str	r4, [r5, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8001cc0:	68c4      	ldr	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001cc2:	6900      	ldr	r0, [r0, #16]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8001cc4:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8001cc6:	f44f 66c8 	mov.w	r6, #1600	@ 0x640
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001cca:	bf18      	it	ne
 8001ccc:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8001cd0:	606e      	str	r6, [r5, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001cd2:	bf18      	it	ne
 8001cd4:	3410      	addne	r4, #16
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001cd6:	f010 000f 	ands.w	r0, r0, #15
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8001cda:	602c      	str	r4, [r5, #0]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001cdc:	bf18      	it	ne
 8001cde:	f1c0 0010 	rsbne	r0, r0, #16
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8001ce2:	0924      	lsrs	r4, r4, #4
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001ce4:	60a8      	str	r0, [r5, #8]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8001ce6:	60ec      	str	r4, [r5, #12]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001ce8:	4d0d      	ldr	r5, [pc, #52]	@ (8001d20 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x70>)
 8001cea:	4c0e      	ldr	r4, [pc, #56]	@ (8001d24 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8001cec:	480c      	ldr	r0, [pc, #48]	@ (8001d20 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x70>)
 8001cee:	f7ff fe67 	bl	80019c0 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001cf2:	4628      	mov	r0, r5
 8001cf4:	f7ff ff54 	bl	8001ba0 <JPEG_OutputHandler>
 8001cf8:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d105      	bne.n	8001d0c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x5c>
                SEM_WAIT(semDecodingDone);
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8001d02:	f04f 31ff 	mov.w	r1, #4294967295
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	f00d f94c 	bl	800efa4 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d1ef      	bne.n	8001cf2 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
        Jpeg_HWDecodingEnd = 0;
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
}
 8001d18:	bd70      	pop	{r4, r5, r6, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200001b4 	.word	0x200001b4
 8001d20:	20012120 	.word	0x20012120
 8001d24:	200097e0 	.word	0x200097e0
 8001d28:	200001c8 	.word	0x200001c8
 8001d2c:	200097e8 	.word	0x200097e8

08001d30 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8001d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d34:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001d36:	6943      	ldr	r3, [r0, #20]
{
 8001d38:	b085      	sub	sp, #20
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	460f      	mov	r7, r1
 8001d3e:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001d40:	b92b      	cbnz	r3, 8001d4e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8001d42:	4b29      	ldr	r3, [pc, #164]	@ (8001de8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 8001d44:	21bd      	movs	r1, #189	@ 0xbd
 8001d46:	4a29      	ldr	r2, [pc, #164]	@ (8001dec <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8001d48:	4829      	ldr	r0, [pc, #164]	@ (8001df0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8001d4a:	f028 fbad 	bl	802a4a8 <__assert_func>
    readData(currentMovieOffset, 8);
 8001d4e:	2208      	movs	r2, #8
 8001d50:	6981      	ldr	r1, [r0, #24]
 8001d52:	f7ff fc8f 	bl	8001674 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001d56:	69a6      	ldr	r6, [r4, #24]
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4631      	mov	r1, r6
 8001d5c:	f7ff fc77 	bl	800164e <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001d60:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001d62:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001d64:	4620      	mov	r0, r4
 8001d66:	f7ff fc72 	bl	800164e <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001d6a:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001d6c:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7ff fc52 	bl	8001618 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001d74:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8001d78:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001d7a:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8001d7c:	1842      	adds	r2, r0, r1
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d226      	bcs.n	8001dd0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8001d82:	f243 0330 	movw	r3, #12336	@ 0x3030
 8001d86:	459b      	cmp	fp, r3
 8001d88:	d117      	bne.n	8001dba <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8001d8a:	f246 3364 	movw	r3, #25444	@ 0x6364
 8001d8e:	459a      	cmp	sl, r3
 8001d90:	d113      	bne.n	8001dba <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8001d92:	b190      	cbz	r0, 8001dba <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001d94:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8001d96:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7ff fc6b 	bl	8001674 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001d9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001da0:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001da2:	462a      	mov	r2, r5
 8001da4:	4620      	mov	r0, r4
 8001da6:	f8cd 8000 	str.w	r8, [sp]
 8001daa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8001dae:	463b      	mov	r3, r7
 8001db0:	f7ff ff7e 	bl	8001cb0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8001db4:	6963      	ldr	r3, [r4, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8001dba:	69a3      	ldr	r3, [r4, #24]
 8001dbc:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8001dbe:	b905      	cbnz	r5, 8001dc2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8001dc0:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8001dc2:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8001dc4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8001dca:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8001dcc:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8001dce:	d109      	bne.n	8001de4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8001dd0:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8001dd2:	2001      	movs	r0, #1
        frameNumber = 1;
 8001dd4:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8001dd6:	6a23      	ldr	r3, [r4, #32]
 8001dd8:	61a3      	str	r3, [r4, #24]
}
 8001dda:	f080 0001 	eor.w	r0, r0, #1
 8001dde:	b005      	add	sp, #20
 8001de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8001de4:	2000      	movs	r0, #0
 8001de6:	e7f8      	b.n	8001dda <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8001de8:	0802b995 	.word	0x0802b995
 8001dec:	0802bb0d 	.word	0x0802bb0d
 8001df0:	0802b8ef 	.word	0x0802b8ef

08001df4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df6:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8001df8:	6981      	ldr	r1, [r0, #24]
{
 8001dfa:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	f7ff fc39 	bl	8001674 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001e02:	69a7      	ldr	r7, [r4, #24]
 8001e04:	4620      	mov	r0, r4
 8001e06:	1d39      	adds	r1, r7, #4
 8001e08:	f7ff fc06 	bl	8001618 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001e0c:	f107 0108 	add.w	r1, r7, #8
 8001e10:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001e12:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001e14:	4620      	mov	r0, r4
 8001e16:	f7ff fc2d 	bl	8001674 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8001e1a:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8001e1c:	b16e      	cbz	r6, 8001e3a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001e1e:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001e20:	4c07      	ldr	r4, [pc, #28]	@ (8001e40 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8001e22:	4d08      	ldr	r5, [pc, #32]	@ (8001e44 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001e24:	4633      	mov	r3, r6
 8001e26:	4807      	ldr	r0, [pc, #28]	@ (8001e44 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8001e28:	f7ff fdca 	bl	80019c0 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001e2c:	4628      	mov	r0, r5
 8001e2e:	f7ff feb7 	bl	8001ba0 <JPEG_OutputHandler>
 8001e32:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f8      	beq.n	8001e2c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200097e0 	.word	0x200097e0
 8001e44:	20012120 	.word	0x20012120

08001e48 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e48:	2101      	movs	r1, #1
 8001e4a:	2200      	movs	r2, #0
{
 8001e4c:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e4e:	4608      	mov	r0, r1
 8001e50:	f00d f850 	bl	800eef4 <osSemaphoreNew>
 8001e54:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001e56:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001e58:	b928      	cbnz	r0, 8001e66 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001e5c:	2128      	movs	r1, #40	@ 0x28
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e60:	480a      	ldr	r0, [pc, #40]	@ (8001e8c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001e62:	f028 fb21 	bl	802a4a8 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2104      	movs	r1, #4
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f00d f90c 	bl	800f088 <osMessageQueueNew>
 8001e70:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001e72:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e74:	b918      	cbnz	r0, 8001e7e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001e76:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001e78:	212c      	movs	r1, #44	@ 0x2c
 8001e7a:	4a03      	ldr	r2, [pc, #12]	@ (8001e88 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001e7c:	e7f0      	b.n	8001e60 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001e7e:	bd08      	pop	{r3, pc}
 8001e80:	20009800 	.word	0x20009800
 8001e84:	0802bbac 	.word	0x0802bbac
 8001e88:	0802bbf5 	.word	0x0802bbf5
 8001e8c:	0802bc24 	.word	0x0802bc24
 8001e90:	200097fc 	.word	0x200097fc
 8001e94:	0802bc6b 	.word	0x0802bc6b

08001e98 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001e98:	4b02      	ldr	r3, [pc, #8]	@ (8001ea4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001e9a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	f00d b880 	b.w	800efa4 <osSemaphoreAcquire>
 8001ea4:	20009800 	.word	0x20009800

08001ea8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001ea8:	4b01      	ldr	r3, [pc, #4]	@ (8001eb0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	f00d b8b6 	b.w	800f01c <osSemaphoreRelease>
 8001eb0:	20009800 	.word	0x20009800

08001eb4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001eb4:	4b02      	ldr	r3, [pc, #8]	@ (8001ec0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	f00d b873 	b.w	800efa4 <osSemaphoreAcquire>
 8001ebe:	bf00      	nop
 8001ec0:	20009800 	.word	0x20009800

08001ec4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8001ec4:	f7ff bff0 	b.w	8001ea8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001ec8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001ec8:	2300      	movs	r3, #0
 8001eca:	4803      	ldr	r0, [pc, #12]	@ (8001ed8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001ecc:	4903      	ldr	r1, [pc, #12]	@ (8001edc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001ece:	461a      	mov	r2, r3
 8001ed0:	6800      	ldr	r0, [r0, #0]
 8001ed2:	f00d b91f 	b.w	800f114 <osMessageQueuePut>
 8001ed6:	bf00      	nop
 8001ed8:	200097fc 	.word	0x200097fc
 8001edc:	20000030 	.word	0x20000030

08001ee0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001ee0:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	4c07      	ldr	r4, [pc, #28]	@ (8001f04 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001ee6:	a901      	add	r1, sp, #4
 8001ee8:	461a      	mov	r2, r3
 8001eea:	6820      	ldr	r0, [r4, #0]
 8001eec:	f00d f954 	bl	800f198 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	a901      	add	r1, sp, #4
 8001ef8:	6820      	ldr	r0, [r4, #0]
 8001efa:	f00d f94d 	bl	800f198 <osMessageQueueGet>
}
 8001efe:	b002      	add	sp, #8
 8001f00:	bd10      	pop	{r4, pc}
 8001f02:	bf00      	nop
 8001f04:	200097fc 	.word	0x200097fc

08001f08 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001f08:	6803      	ldr	r3, [r0, #0]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0c:	4718      	bx	r3

08001f0e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001f0e:	2001      	movs	r0, #1
 8001f10:	4770      	bx	lr

08001f12 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001f12:	6803      	ldr	r3, [r0, #0]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f16:	4718      	bx	r3

08001f18 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f18:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001f1a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f1e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001f22:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f26:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8001f2a:	9201      	str	r2, [sp, #4]
 8001f2c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001f34:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8001f3c:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001f3e:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <_ZN8STM32DMA10initializeEv+0x3c>)
 8001f40:	4a05      	ldr	r2, [pc, #20]	@ (8001f58 <_ZN8STM32DMA10initializeEv+0x40>)
 8001f42:	619a      	str	r2, [r3, #24]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f44:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f48:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <_ZN8STM32DMA10initializeEv+0x44>)
 8001f4a:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001f4c:	b002      	add	sp, #8
 8001f4e:	4770      	bx	lr
 8001f50:	40023800 	.word	0x40023800
 8001f54:	200121e8 	.word	0x200121e8
 8001f58:	080021e9 	.word	0x080021e9
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001f60:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8001f64:	4770      	bx	lr
	...

08001f68 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001f68:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f6e:	6003      	str	r3, [r0, #0]
 8001f70:	4b04      	ldr	r3, [pc, #16]	@ (8001f84 <_ZN8STM32DMAD1Ev+0x1c>)
 8001f72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001f76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f7a:	f3bf 8f6f 	isb	sy
}
 8001f7e:	4770      	bx	lr
 8001f80:	0802be04 	.word	0x0802be04
 8001f84:	e000e100 	.word	0xe000e100

08001f88 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001f88:	b510      	push	{r4, lr}
 8001f8a:	4604      	mov	r4, r0
}
 8001f8c:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8001f90:	f7ff ffea 	bl	8001f68 <_ZN8STM32DMAD1Ev>
 8001f94:	4620      	mov	r0, r4
 8001f96:	f027 ff10 	bl	8029dba <_ZdlPvj>
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	bd10      	pop	{r4, pc}
	...

08001fa0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8001fa0:	b508      	push	{r3, lr}
    switch (format)
 8001fa2:	280a      	cmp	r0, #10
 8001fa4:	d809      	bhi.n	8001fba <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8001fa6:	e8df f000 	tbb	[pc, r0]
 8001faa:	1006      	.short	0x1006
 8001fac:	0808080e 	.word	0x0808080e
 8001fb0:	10101008 	.word	0x10101008
 8001fb4:	10          	.byte	0x10
 8001fb5:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001fb6:	2002      	movs	r0, #2
}
 8001fb8:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001fba:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8001fbc:	2186      	movs	r1, #134	@ 0x86
 8001fbe:	4a05      	ldr	r2, [pc, #20]	@ (8001fd4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001fc0:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001fc2:	f028 fa71 	bl	802a4a8 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	e7f6      	b.n	8001fb8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8001fca:	2001      	movs	r0, #1
    return dma2dColorMode;
 8001fcc:	e7f4      	b.n	8001fb8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001fce:	bf00      	nop
 8001fd0:	0802bcad 	.word	0x0802bcad
 8001fd4:	0802bcc8 	.word	0x0802bcc8
 8001fd8:	0802bd13 	.word	0x0802bd13

08001fdc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001fdc:	b538      	push	{r3, r4, r5, lr}
 8001fde:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001fe0:	7f88      	ldrb	r0, [r1, #30]
 8001fe2:	f7ff ffdd 	bl	8001fa0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001fe6:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001fe8:	8aa5      	ldrh	r5, [r4, #20]
 8001fea:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001fec:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001fee:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001ff2:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001ff4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ff6:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001ff8:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ffa:	1b52      	subs	r2, r2, r5
 8001ffc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001ffe:	6825      	ldr	r5, [r4, #0]
 8002000:	2d08      	cmp	r5, #8
 8002002:	d10e      	bne.n	8002022 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002004:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002006:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002008:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800200a:	4a0f      	ldr	r2, [pc, #60]	@ (8002048 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 800200c:	7f20      	ldrb	r0, [r4, #28]
 800200e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002012:	61da      	str	r2, [r3, #28]
        return color;
 8002014:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002016:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002018:	4a0c      	ldr	r2, [pc, #48]	@ (800204c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800201a:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800201c:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800201e:	601a      	str	r2, [r3, #0]
    }
}
 8002020:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002022:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002024:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002026:	611a      	str	r2, [r3, #16]
 8002028:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800202a:	0a0a      	lsrs	r2, r1, #8
 800202c:	0948      	lsrs	r0, r1, #5
 800202e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8002032:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8002036:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 800203a:	4302      	orrs	r2, r0
 800203c:	430a      	orrs	r2, r1
 800203e:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002040:	4a03      	ldr	r2, [pc, #12]	@ (8002050 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8002042:	e7ec      	b.n	800201e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002044:	4002b000 	.word	0x4002b000
 8002048:	00010009 	.word	0x00010009
 800204c:	00020201 	.word	0x00020201
 8002050:	00030201 	.word	0x00030201

08002054 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002054:	b508      	push	{r3, lr}
    switch (format)
 8002056:	280b      	cmp	r0, #11
 8002058:	d80b      	bhi.n	8002072 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 800205a:	e8df f000 	tbb	[pc, r0]
 800205e:	1206      	.short	0x1206
 8002060:	0a0a0a10 	.word	0x0a0a0a10
 8002064:	0808080a 	.word	0x0808080a
 8002068:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800206a:	2002      	movs	r0, #2
}
 800206c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 800206e:	2005      	movs	r0, #5
        break;
 8002070:	e7fc      	b.n	800206c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002072:	4b05      	ldr	r3, [pc, #20]	@ (8002088 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002074:	2165      	movs	r1, #101	@ 0x65
 8002076:	4a05      	ldr	r2, [pc, #20]	@ (800208c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002078:	4805      	ldr	r0, [pc, #20]	@ (8002090 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 800207a:	f028 fa15 	bl	802a4a8 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800207e:	2000      	movs	r0, #0
 8002080:	e7f4      	b.n	800206c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002082:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002084:	e7f2      	b.n	800206c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002086:	bf00      	nop
 8002088:	0802bcad 	.word	0x0802bcad
 800208c:	0802bd58 	.word	0x0802bd58
 8002090:	0802bd13 	.word	0x0802bd13

08002094 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002098:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 800209c:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800209e:	4640      	mov	r0, r8
 80020a0:	f7ff ffd8 	bl	8002054 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80020a4:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80020a6:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80020a8:	4638      	mov	r0, r7
 80020aa:	f7ff ffd3 	bl	8002054 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 80020ae:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80020b0:	4638      	mov	r0, r7
 80020b2:	f7ff ff75 	bl	8001fa0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020b6:	8aa1      	ldrh	r1, [r4, #20]
 80020b8:	8b62      	ldrh	r2, [r4, #26]
 80020ba:	4b43      	ldr	r3, [pc, #268]	@ (80021c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>)
 80020bc:	1a52      	subs	r2, r2, r1
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020c0:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80020c2:	8b22      	ldrh	r2, [r4, #24]
 80020c4:	1a52      	subs	r2, r2, r1
 80020c6:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020c8:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80020ca:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020d0:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020d2:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020d4:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020d6:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020d8:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 80020da:	6820      	ldr	r0, [r4, #0]
 80020dc:	2880      	cmp	r0, #128	@ 0x80
 80020de:	d028      	beq.n	8002132 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 80020e0:	7f22      	ldrb	r2, [r4, #28]
 80020e2:	d80f      	bhi.n	8002104 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x70>
 80020e4:	2820      	cmp	r0, #32
 80020e6:	d066      	beq.n	80021b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x122>
 80020e8:	2840      	cmp	r0, #64	@ 0x40
 80020ea:	d064      	beq.n	80021b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x122>
 80020ec:	2804      	cmp	r0, #4
 80020ee:	d01a      	beq.n	8002126 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020f0:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 80020f4:	4b34      	ldr	r3, [pc, #208]	@ (80021c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020f6:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020f8:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 80020fc:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020fe:	d060      	beq.n	80021c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002100:	4a32      	ldr	r2, [pc, #200]	@ (80021cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002102:	e044      	b.n	800218e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
    switch (blitOp.operation)
 8002104:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8002108:	d004      	beq.n	8002114 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 800210a:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800210e:	d1ef      	bne.n	80020f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002110:	482f      	ldr	r0, [pc, #188]	@ (80021d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002112:	e000      	b.n	8002116 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002114:	482f      	ldr	r0, [pc, #188]	@ (80021d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002116:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 800211a:	61da      	str	r2, [r3, #28]
 800211c:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800211e:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002120:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002122:	6159      	str	r1, [r3, #20]
 8002124:	e032      	b.n	800218c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002126:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 800212a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800212e:	61da      	str	r2, [r3, #28]
 8002130:	e7f6      	b.n	8002120 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002132:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002134:	1d02      	adds	r2, r0, #4
 8002136:	62da      	str	r2, [r3, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002138:	7f22      	ldrb	r2, [r4, #28]
 800213a:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 800213e:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 8002142:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002144:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002146:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8002148:	7801      	ldrb	r1, [r0, #0]
 800214a:	b141      	cbz	r1, 800215e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xca>
 800214c:	2901      	cmp	r1, #1
 800214e:	d021      	beq.n	8002194 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
                assert(0 && "Unsupported format");
 8002150:	4b21      	ldr	r3, [pc, #132]	@ (80021d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002152:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002156:	4a21      	ldr	r2, [pc, #132]	@ (80021dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002158:	4821      	ldr	r0, [pc, #132]	@ (80021e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 800215a:	f028 f9a5 	bl	802a4a8 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800215e:	69da      	ldr	r2, [r3, #28]
 8002160:	8841      	ldrh	r1, [r0, #2]
 8002162:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002166:	3901      	subs	r1, #1
 8002168:	f022 0210 	bic.w	r2, r2, #16
 800216c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            bool blend = true;
 8002170:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002172:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002174:	4b14      	ldr	r3, [pc, #80]	@ (80021c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>)
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	f042 0220 	orr.w	r2, r2, #32
 800217c:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800217e:	69da      	ldr	r2, [r3, #28]
 8002180:	0692      	lsls	r2, r2, #26
 8002182:	d4fc      	bmi.n	800217e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002184:	2210      	movs	r2, #16
 8002186:	609a      	str	r2, [r3, #8]
            if (blend)
 8002188:	2900      	cmp	r1, #0
 800218a:	d0b9      	beq.n	8002100 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800218c:	4a15      	ldr	r2, [pc, #84]	@ (80021e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800218e:	601a      	str	r2, [r3, #0]
}
 8002190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (blitOp.alpha == 255)
 8002194:	f1b2 01ff 	subs.w	r1, r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002198:	69da      	ldr	r2, [r3, #28]
 800219a:	8840      	ldrh	r0, [r0, #2]
 800219c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 80021a0:	bf18      	it	ne
 80021a2:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80021a4:	3801      	subs	r0, #1
 80021a6:	f022 0210 	bic.w	r2, r2, #16
 80021aa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80021ae:	f042 0210 	orr.w	r2, r2, #16
 80021b2:	61da      	str	r2, [r3, #28]
                break;
 80021b4:	e7de      	b.n	8002174 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021b6:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 80021ba:	4b03      	ldr	r3, [pc, #12]	@ (80021c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>)
 80021bc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80021c0:	e7b5      	b.n	800212e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80021c2:	f240 2201 	movw	r2, #513	@ 0x201
 80021c6:	e7e2      	b.n	800218e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 80021c8:	4002b000 	.word	0x4002b000
 80021cc:	00010201 	.word	0x00010201
 80021d0:	00020009 	.word	0x00020009
 80021d4:	0002000a 	.word	0x0002000a
 80021d8:	0802bda2 	.word	0x0802bda2
 80021dc:	0802bdbc 	.word	0x0802bdbc
 80021e0:	0802bd13 	.word	0x0802bd13
 80021e4:	00020201 	.word	0x00020201

080021e8 <DMA2D_XferCpltCallback>:
 80021e8:	4b02      	ldr	r3, [pc, #8]	@ (80021f4 <DMA2D_XferCpltCallback+0xc>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80021ee:	6803      	ldr	r3, [r0, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	4718      	bx	r3
 80021f4:	200279d8 	.word	0x200279d8

080021f8 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 80021f8:	b570      	push	{r4, r5, r6, lr}
 80021fa:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80021fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <_ZN8STM32DMAC1Ev+0x30>)
 80021fe:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002200:	2600      	movs	r6, #0
 8002202:	4625      	mov	r5, r4
 8002204:	2260      	movs	r2, #96	@ 0x60
 8002206:	6060      	str	r0, [r4, #4]
 8002208:	7226      	strb	r6, [r4, #8]
 800220a:	7266      	strb	r6, [r4, #9]
 800220c:	f845 3b20 	str.w	r3, [r5], #32
 8002210:	4629      	mov	r1, r5
 8002212:	f010 fd17 	bl	8012c44 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002216:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 800221a:	60ee      	str	r6, [r5, #12]
 800221c:	3524      	adds	r5, #36	@ 0x24
 800221e:	429d      	cmp	r5, r3
 8002220:	d1fb      	bne.n	800221a <_ZN8STM32DMAC1Ev+0x22>
}
 8002222:	4620      	mov	r0, r4
 8002224:	bd70      	pop	{r4, r5, r6, pc}
 8002226:	bf00      	nop
 8002228:	0802be04 	.word	0x0802be04

0800222c <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <_ZN8touchgfx5paint8tearDownEv+0x10>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	07d2      	lsls	r2, r2, #31
 8002232:	d4fc      	bmi.n	800222e <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002234:	2223      	movs	r2, #35	@ 0x23
 8002236:	609a      	str	r2, [r3, #8]
}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	4002b000 	.word	0x4002b000

08002240 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 8002240:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002242:	4c10      	ldr	r4, [pc, #64]	@ (8002284 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>)
 8002244:	6825      	ldr	r5, [r4, #0]
 8002246:	07ed      	lsls	r5, r5, #31
 8002248:	d4fc      	bmi.n	8002244 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800224a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800224c:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 800224e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002250:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002252:	f041 0101 	orr.w	r1, r1, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8002256:	f04f 0502 	mov.w	r5, #2
 800225a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800225c:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800225e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8002260:	d00a      	beq.n	8002278 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x38>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002262:	4909      	ldr	r1, [pc, #36]	@ (8002288 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x48>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002264:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002266:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 800226a:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 800226c:	4b07      	ldr	r3, [pc, #28]	@ (800228c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color);
 800226e:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002270:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002272:	60e0      	str	r0, [r4, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002274:	6023      	str	r3, [r4, #0]
    }
}
 8002276:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002278:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
 800227a:	9b03      	ldr	r3, [sp, #12]
 800227c:	63a3      	str	r3, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800227e:	4b04      	ldr	r3, [pc, #16]	@ (8002290 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x50>)
 8002280:	e7f8      	b.n	8002274 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x34>
 8002282:	bf00      	nop
 8002284:	4002b000 	.word	0x4002b000
 8002288:	00010009 	.word	0x00010009
 800228c:	00020001 	.word	0x00020001
 8002290:	00030001 	.word	0x00030001

08002294 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002294:	2001      	movs	r0, #1
 8002296:	4770      	bx	lr

08002298 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002298:	200c      	movs	r0, #12
 800229a:	4770      	bx	lr

0800229c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 800229c:	230c      	movs	r3, #12
 800229e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022a2:	3008      	adds	r0, #8
 80022a4:	4770      	bx	lr

080022a6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80022a6:	230c      	movs	r3, #12
 80022a8:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022ac:	3008      	adds	r0, #8
 80022ae:	4770      	bx	lr

080022b0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80022b0:	2001      	movs	r0, #1
 80022b2:	4770      	bx	lr

080022b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80022b4:	f243 40d8 	movw	r0, #13528	@ 0x34d8
 80022b8:	4770      	bx	lr

080022ba <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022ba:	f243 43d8 	movw	r3, #13528	@ 0x34d8
 80022be:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022c2:	3008      	adds	r0, #8
 80022c4:	4770      	bx	lr

080022c6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022c6:	f243 43d8 	movw	r3, #13528	@ 0x34d8
 80022ca:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022ce:	3008      	adds	r0, #8
 80022d0:	4770      	bx	lr

080022d2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80022d2:	2001      	movs	r0, #1
 80022d4:	4770      	bx	lr

080022d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80022d6:	2010      	movs	r0, #16
 80022d8:	4770      	bx	lr

080022da <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022da:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80022de:	3008      	adds	r0, #8
 80022e0:	4770      	bx	lr

080022e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022e2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80022e6:	3008      	adds	r0, #8
 80022e8:	4770      	bx	lr

080022ea <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80022ea:	4608      	mov	r0, r1
 80022ec:	f002 bd54 	b.w	8004d98 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

080022f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80022f0:	4b03      	ldr	r3, [pc, #12]	@ (8002300 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80022f2:	b510      	push	{r4, lr}
 80022f4:	4604      	mov	r4, r0
 80022f6:	6003      	str	r3, [r0, #0]
 80022f8:	f00f faeb 	bl	80118d2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80022fc:	4620      	mov	r0, r4
 80022fe:	bd10      	pop	{r4, pc}
 8002300:	0802bebc 	.word	0x0802bebc

08002304 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002304:	b510      	push	{r4, lr}
 8002306:	4604      	mov	r4, r0
 8002308:	f7ff fff2 	bl	80022f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800230c:	2114      	movs	r1, #20
 800230e:	4620      	mov	r0, r4
 8002310:	f027 fd53 	bl	8029dba <_ZdlPvj>
 8002314:	4620      	mov	r0, r4
 8002316:	bd10      	pop	{r4, pc}

08002318 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002318:	4b03      	ldr	r3, [pc, #12]	@ (8002328 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800231a:	b510      	push	{r4, lr}
 800231c:	4604      	mov	r4, r0
 800231e:	6003      	str	r3, [r0, #0]
 8002320:	f00f fad7 	bl	80118d2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002324:	4620      	mov	r0, r4
 8002326:	bd10      	pop	{r4, pc}
 8002328:	0802be88 	.word	0x0802be88

0800232c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800232c:	b510      	push	{r4, lr}
 800232e:	4604      	mov	r4, r0
 8002330:	f7ff fff2 	bl	8002318 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002334:	f243 41e0 	movw	r1, #13536	@ 0x34e0
 8002338:	4620      	mov	r0, r4
 800233a:	f027 fd3e 	bl	8029dba <_ZdlPvj>
 800233e:	4620      	mov	r0, r4
 8002340:	bd10      	pop	{r4, pc}
	...

08002344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002344:	4b03      	ldr	r3, [pc, #12]	@ (8002354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002346:	b510      	push	{r4, lr}
 8002348:	4604      	mov	r4, r0
 800234a:	6003      	str	r3, [r0, #0]
 800234c:	f00f fac1 	bl	80118d2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002350:	4620      	mov	r0, r4
 8002352:	bd10      	pop	{r4, pc}
 8002354:	0802be54 	.word	0x0802be54

08002358 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002358:	b510      	push	{r4, lr}
 800235a:	4604      	mov	r4, r0
 800235c:	f7ff fff2 	bl	8002344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002360:	2118      	movs	r1, #24
 8002362:	4620      	mov	r0, r4
 8002364:	f027 fd29 	bl	8029dba <_ZdlPvj>
 8002368:	4620      	mov	r0, r4
 800236a:	bd10      	pop	{r4, pc}

0800236c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800236c:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <_ZN12FrontendHeapD1Ev+0x28>)
 800236e:	b510      	push	{r4, lr}
 8002370:	4604      	mov	r4, r0
 8002372:	6003      	str	r3, [r0, #0]
 8002374:	f500 5054 	add.w	r0, r0, #13568	@ 0x3500
 8002378:	300c      	adds	r0, #12
 800237a:	f7ff ffb9 	bl	80022f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800237e:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8002382:	f7ff ffc9 	bl	8002318 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002386:	f104 0014 	add.w	r0, r4, #20
 800238a:	f7ff ffdb 	bl	8002344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800238e:	4620      	mov	r0, r4
 8002390:	bd10      	pop	{r4, pc}
 8002392:	bf00      	nop
 8002394:	0802bef0 	.word	0x0802bef0

08002398 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002398:	b508      	push	{r3, lr}
 800239a:	4802      	ldr	r0, [pc, #8]	@ (80023a4 <__tcf_0+0xc>)
 800239c:	f7ff ffe6 	bl	800236c <_ZN12FrontendHeapD1Ev>
 80023a0:	bd08      	pop	{r3, pc}
 80023a2:	bf00      	nop
 80023a4:	2000a6d0 	.word	0x2000a6d0

080023a8 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80023a8:	b510      	push	{r4, lr}
 80023aa:	4604      	mov	r4, r0
 80023ac:	f7ff ffde 	bl	800236c <_ZN12FrontendHeapD1Ev>
 80023b0:	f44f 515a 	mov.w	r1, #13952	@ 0x3680
 80023b4:	4620      	mov	r0, r4
 80023b6:	f027 fd00 	bl	8029dba <_ZdlPvj>
 80023ba:	4620      	mov	r0, r4
 80023bc:	bd10      	pop	{r4, pc}
	...

080023c0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80023c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80023c4:	f002 fb62 	bl	8004a8c <_ZN14BitmapDatabase11getInstanceEv>
 80023c8:	2400      	movs	r4, #0
 80023ca:	4605      	mov	r5, r0
 80023cc:	f002 fb62 	bl	8004a94 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80023d0:	4623      	mov	r3, r4
 80023d2:	4601      	mov	r1, r0
 80023d4:	4622      	mov	r2, r4
 80023d6:	4628      	mov	r0, r5
 80023d8:	9400      	str	r4, [sp, #0]
 80023da:	f019 fb1b 	bl	801ba14 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80023de:	4b27      	ldr	r3, [pc, #156]	@ (800247c <touchgfx_init+0xbc>)
 80023e0:	4a27      	ldr	r2, [pc, #156]	@ (8002480 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80023e2:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80023e4:	4d27      	ldr	r5, [pc, #156]	@ (8002484 <touchgfx_init+0xc4>)
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f007 fa6c 	bl	80098c4 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 80023ec:	4b26      	ldr	r3, [pc, #152]	@ (8002488 <touchgfx_init+0xc8>)
 80023ee:	4a27      	ldr	r2, [pc, #156]	@ (800248c <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 80023f0:	4827      	ldr	r0, [pc, #156]	@ (8002490 <touchgfx_init+0xd0>)
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	f019 fa76 	bl	801b8e4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80023f8:	682b      	ldr	r3, [r5, #0]
 80023fa:	f3bf 8f5b 	dmb	ish
 80023fe:	07db      	lsls	r3, r3, #31
 8002400:	d436      	bmi.n	8002470 <touchgfx_init+0xb0>
 8002402:	4628      	mov	r0, r5
 8002404:	f027 fcdb 	bl	8029dbe <__cxa_guard_acquire>
 8002408:	b390      	cbz	r0, 8002470 <touchgfx_init+0xb0>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 800240a:	4c22      	ldr	r4, [pc, #136]	@ (8002494 <touchgfx_init+0xd4>)
          screenStorage(scr),
          transitionStorage(tra),
 800240c:	4f22      	ldr	r7, [pc, #136]	@ (8002498 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800240e:	4b23      	ldr	r3, [pc, #140]	@ (800249c <touchgfx_init+0xdc>)
        : presenterStorage(pres),
 8002410:	f104 0014 	add.w	r0, r4, #20
          frontendApplication(app)
 8002414:	f107 0618 	add.w	r6, r7, #24
          screenStorage(scr),
 8002418:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800241c:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 800241e:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8002420:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8002424:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8002426:	6126      	str	r6, [r4, #16]
 8002428:	f00f fa54 	bl	80118d4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800242c:	4b1c      	ldr	r3, [pc, #112]	@ (80024a0 <touchgfx_init+0xe0>)
 800242e:	4640      	mov	r0, r8
 8002430:	6163      	str	r3, [r4, #20]
 8002432:	f00f fa4f 	bl	80118d4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002436:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <touchgfx_init+0xe4>)
 8002438:	4638      	mov	r0, r7
 800243a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800243c:	f00f fa4a 	bl	80118d4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002440:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8002444:	4a18      	ldr	r2, [pc, #96]	@ (80024a8 <touchgfx_init+0xe8>)
 8002446:	f503 60a4 	add.w	r0, r3, #1312	@ 0x520
 800244a:	f8c3 250c 	str.w	r2, [r3, #1292]	@ 0x50c
 800244e:	f007 fabd 	bl	80099cc <_ZN5ModelC1Ev>
 8002452:	4622      	mov	r2, r4
 8002454:	f107 0114 	add.w	r1, r7, #20
 8002458:	4630      	mov	r0, r6
 800245a:	f007 faad 	bl	80099b8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800245e:	4630      	mov	r0, r6
 8002460:	f002 fc9a 	bl	8004d98 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002464:	4811      	ldr	r0, [pc, #68]	@ (80024ac <touchgfx_init+0xec>)
 8002466:	f028 f83d 	bl	802a4e4 <atexit>
 800246a:	4628      	mov	r0, r5
 800246c:	f027 fcb3 	bl	8029dd6 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002470:	480f      	ldr	r0, [pc, #60]	@ (80024b0 <touchgfx_init+0xf0>)
}
 8002472:	b002      	add	sp, #8
 8002474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002478:	f7fe be0c 	b.w	8001094 <_ZN11TouchGFXHAL10initializeEv>
 800247c:	20027a3c 	.word	0x20027a3c
 8002480:	20009880 	.word	0x20009880
 8002484:	2000a6cc 	.word	0x2000a6cc
 8002488:	200098a0 	.word	0x200098a0
 800248c:	20009884 	.word	0x20009884
 8002490:	20000034 	.word	0x20000034
 8002494:	2000a6d0 	.word	0x2000a6d0
 8002498:	2000dbdc 	.word	0x2000dbdc
 800249c:	0802bef0 	.word	0x0802bef0
 80024a0:	0802be54 	.word	0x0802be54
 80024a4:	0802be88 	.word	0x0802be88
 80024a8:	0802bebc 	.word	0x0802bebc
 80024ac:	08002399 	.word	0x08002399
 80024b0:	20009804 	.word	0x20009804

080024b4 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80024b4:	4770      	bx	lr
	...

080024b8 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80024b8:	4801      	ldr	r0, [pc, #4]	@ (80024c0 <touchgfx_taskEntry+0x8>)
 80024ba:	f7fe be01 	b.w	80010c0 <_ZN11TouchGFXHAL9taskEntryEv>
 80024be:	bf00      	nop
 80024c0:	20009804 	.word	0x20009804

080024c4 <_GLOBAL__sub_I_touchgfx_init>:
}
 80024c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 80024c6:	4c0e      	ldr	r4, [pc, #56]	@ (8002500 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 80024c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80024ca:	4e0f      	ldr	r6, [pc, #60]	@ (8002508 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80024cc:	4620      	mov	r0, r4
static LCD16bpp display;
 80024ce:	4d0f      	ldr	r5, [pc, #60]	@ (800250c <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80024d0:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80024d2:	f7ff fe91 	bl	80021f8 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80024d6:	4628      	mov	r0, r5
 80024d8:	f01d fd7c 	bl	801ffd4 <_ZN8touchgfx8LCD16bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80024dc:	480c      	ldr	r0, [pc, #48]	@ (8002510 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80024de:	f016 ffa3 	bl	8019428 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80024e2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80024e6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80024ea:	4621      	mov	r1, r4
 80024ec:	4809      	ldr	r0, [pc, #36]	@ (8002514 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 80024ee:	e9cd 3200 	strd	r3, r2, [sp]
 80024f2:	4633      	mov	r3, r6
 80024f4:	462a      	mov	r2, r5
 80024f6:	f7fe fe95 	bl	8001224 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80024fa:	b002      	add	sp, #8
 80024fc:	bd70      	pop	{r4, r5, r6, pc}
 80024fe:	bf00      	nop
 8002500:	20009928 	.word	0x20009928
 8002504:	0802b638 	.word	0x0802b638
 8002508:	2000a6c8 	.word	0x2000a6c8
 800250c:	200098a0 	.word	0x200098a0
 8002510:	20009884 	.word	0x20009884
 8002514:	20009804 	.word	0x20009804

08002518 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002518:	4801      	ldr	r0, [pc, #4]	@ (8002520 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800251a:	f7ff bd25 	b.w	8001f68 <_ZN8STM32DMAD1Ev>
 800251e:	bf00      	nop
 8002520:	20009928 	.word	0x20009928

08002524 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002524:	2000      	movs	r0, #0
 8002526:	4770      	bx	lr

08002528 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002528:	8081      	strh	r1, [r0, #4]
    }
 800252a:	4770      	bx	lr

0800252c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800252c:	80c1      	strh	r1, [r0, #6]
    }
 800252e:	4770      	bx	lr

08002530 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002530:	8101      	strh	r1, [r0, #8]
    }
 8002532:	4770      	bx	lr

08002534 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002534:	8141      	strh	r1, [r0, #10]
    }
 8002536:	4770      	bx	lr

08002538 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002538:	4770      	bx	lr

0800253a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800253a:	4770      	bx	lr

0800253c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 800253c:	4770      	bx	lr

0800253e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800253e:	4770      	bx	lr

08002540 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002540:	4770      	bx	lr

08002542 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002542:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002544:	88c4      	ldrh	r4, [r0, #6]
 8002546:	6803      	ldr	r3, [r0, #0]
 8002548:	1b12      	subs	r2, r2, r4
 800254a:	8884      	ldrh	r4, [r0, #4]
 800254c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254e:	1b09      	subs	r1, r1, r4
 8002550:	b212      	sxth	r2, r2
    }
 8002552:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002556:	b209      	sxth	r1, r1
 8002558:	4718      	bx	r3

0800255a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800255a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800255e:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
 8002564:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002566:	6813      	ldr	r3, [r2, #0]
 8002568:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800256a:	6010      	str	r0, [r2, #0]
    }
 800256c:	4770      	bx	lr

0800256e <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 800256e:	2000      	movs	r0, #0
 8002570:	4770      	bx	lr

08002572 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8002572:	888b      	ldrh	r3, [r1, #4]
 8002574:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8002576:	2001      	movs	r0, #1
 8002578:	4770      	bx	lr

0800257a <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800257a:	4770      	bx	lr

0800257c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800257c:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8002580:	4770      	bx	lr

08002582 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8002582:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8002586:	4770      	bx	lr

08002588 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002588:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800258a:	b510      	push	{r4, lr}
        return rect.width;
 800258c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8002590:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002594:	8002      	strh	r2, [r0, #0]
 8002596:	8042      	strh	r2, [r0, #2]
 8002598:	8084      	strh	r4, [r0, #4]
 800259a:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 800259c:	bd10      	pop	{r4, pc}

0800259e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800259e:	2200      	movs	r2, #0
 80025a0:	8002      	strh	r2, [r0, #0]
 80025a2:	8042      	strh	r2, [r0, #2]
 80025a4:	8082      	strh	r2, [r0, #4]
 80025a6:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80025a8:	4770      	bx	lr

080025aa <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 80025aa:	7701      	strb	r1, [r0, #28]
    }
 80025ac:	4770      	bx	lr

080025ae <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 80025ae:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 80025b2:	4770      	bx	lr

080025b4 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80025b4:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 80025b8:	4770      	bx	lr

080025ba <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 80025ba:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80025be:	4770      	bx	lr

080025c0 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80025c0:	2001      	movs	r0, #1
 80025c2:	4770      	bx	lr

080025c4 <_ZN8touchgfx23CWRVectorRendererRGB56516getLinearPainterEv>:
class CWRVectorRendererRGB565 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80025c4:	3098      	adds	r0, #152	@ 0x98
 80025c6:	4770      	bx	lr

080025c8 <_ZN8touchgfx23CWRVectorRendererRGB56520getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80025c8:	308c      	adds	r0, #140	@ 0x8c
 80025ca:	4770      	bx	lr

080025cc <_ZN8touchgfx23CWRVectorRendererRGB56515getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80025cc:	3084      	adds	r0, #132	@ 0x84
 80025ce:	4770      	bx	lr

080025d0 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB565 renderer;
 80025d0:	4770      	bx	lr
	...

080025d4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	4b02      	ldr	r3, [pc, #8]	@ (80025e0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80025d6:	2290      	movs	r2, #144	@ 0x90
 80025d8:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e4:	4b02      	ldr	r3, [pc, #8]	@ (80025f0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80025e6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80025ea:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
}
 80025f4:	4770      	bx	lr

080025f6 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80025f6:	4770      	bx	lr

080025f8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80025f8:	4a12      	ldr	r2, [pc, #72]	@ (8002644 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80025fa:	6953      	ldr	r3, [r2, #20]
 80025fc:	03db      	lsls	r3, r3, #15
{
 80025fe:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002600:	d51e      	bpl.n	8002640 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002602:	2300      	movs	r3, #0
 8002604:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002608:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800260c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002610:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002614:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002618:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800261c:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800261e:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002622:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002624:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002628:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800262a:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 800262e:	d2f9      	bcs.n	8002624 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8002630:	3b20      	subs	r3, #32
 8002632:	f113 0f20 	cmn.w	r3, #32
 8002636:	d1f2      	bne.n	800261e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8002638:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800263c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002640:	bd70      	pop	{r4, r5, r6, pc}
 8002642:	bf00      	nop
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 8002648:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 800264a:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 800264e:	4770      	bx	lr

08002650 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8002650:	4770      	bx	lr

08002652 <_ZN8touchgfx23CWRVectorRendererRGB565D1Ev>:
class CWRVectorRendererRGB565 : public CWRVectorRenderer
 8002652:	4770      	bx	lr

08002654 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8002654:	4770      	bx	lr

08002656 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8002656:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800265a:	4611      	mov	r1, r2
 800265c:	6840      	ldr	r0, [r0, #4]
 800265e:	6803      	ldr	r3, [r0, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	4718      	bx	r3

08002664 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8002664:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 8002668:	4770      	bx	lr

0800266a <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 800266a:	b510      	push	{r4, lr}
 800266c:	4604      	mov	r4, r0
 800266e:	212c      	movs	r1, #44	@ 0x2c
 8002670:	f027 fba3 	bl	8029dba <_ZdlPvj>
 8002674:	4620      	mov	r0, r4
 8002676:	bd10      	pop	{r4, pc}

08002678 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8002678:	b510      	push	{r4, lr}
 800267a:	4604      	mov	r4, r0
 800267c:	2148      	movs	r1, #72	@ 0x48
 800267e:	f027 fb9c 	bl	8029dba <_ZdlPvj>
 8002682:	4620      	mov	r0, r4
 8002684:	bd10      	pop	{r4, pc}

08002686 <_ZN8touchgfx23CWRVectorRendererRGB565D0Ev>:
class CWRVectorRendererRGB565 : public CWRVectorRenderer
 8002686:	b510      	push	{r4, lr}
 8002688:	4604      	mov	r4, r0
 800268a:	21bc      	movs	r1, #188	@ 0xbc
 800268c:	f027 fb95 	bl	8029dba <_ZdlPvj>
 8002690:	4620      	mov	r0, r4
 8002692:	bd10      	pop	{r4, pc}

08002694 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002694:	b538      	push	{r3, r4, r5, lr}
 8002696:	4604      	mov	r4, r0
    HAL::initialize();
 8002698:	f00f fc17 	bl	8011eca <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 80026a0:	f015 fd94 	bl	80181cc <_ZN8touchgfx11Application11getInstanceEv>
 80026a4:	4601      	mov	r1, r0
 80026a6:	4620      	mov	r0, r4
 80026a8:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	4907      	ldr	r1, [pc, #28]	@ (80026cc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x38>)
 80026ae:	4620      	mov	r0, r4
 80026b0:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80026b4:	2300      	movs	r3, #0
 80026b6:	461a      	mov	r2, r3
 80026b8:	47a8      	blx	r5
        mjpegDecoders[index] = &decoder;
 80026ba:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 80026bc:	4a05      	ldr	r2, [pc, #20]	@ (80026d4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80026be:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 80026c0:	4a05      	ldr	r2, [pc, #20]	@ (80026d8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80026c2:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 80026c4:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 80026c6:	4a05      	ldr	r2, [pc, #20]	@ (80026dc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 80026c8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80026ca:	bd38      	pop	{r3, r4, r5, pc}
 80026cc:	c00bb800 	.word	0xc00bb800
 80026d0:	2000de10 	.word	0x2000de10
 80026d4:	2000de58 	.word	0x2000de58
 80026d8:	c0000000 	.word	0xc0000000
 80026dc:	000bb800 	.word	0x000bb800

080026e0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
    HAL::flushFrameBuffer(rect);
 80026e0:	f00f bba4 	b.w	8011e2c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080026e4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 80026e4:	f00f bd05 	b.w	80120f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080026e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 80026e8:	b538      	push	{r3, r4, r5, lr}
 80026ea:	4604      	mov	r4, r0
 80026ec:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 80026ee:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295
 80026f4:	f00c fba2 	bl	800ee3c <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80026f8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80026fa:	f00c fbcf 	bl	800ee9c <osMutexRelease>
        streams[handle].isActive = false;
 80026fe:	2324      	movs	r3, #36	@ 0x24
 8002700:	fb03 4505 	mla	r5, r3, r5, r4
 8002704:	2300      	movs	r3, #0
 8002706:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 800270a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800270e:	b90b      	cbnz	r3, 8002714 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 8002710:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002712:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 8002714:	bd38      	pop	{r3, r4, r5, pc}

08002716 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002716:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800271a:	b112      	cbz	r2, 8002722 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 800271c:	6803      	ldr	r3, [r0, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	4718      	bx	r3
    }
 8002722:	4770      	bx	lr

08002724 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8002724:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002726:	b131      	cbz	r1, 8002736 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8002728:	4b04      	ldr	r3, [pc, #16]	@ (800273c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 800272a:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 800272e:	4a04      	ldr	r2, [pc, #16]	@ (8002740 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 8002730:	4804      	ldr	r0, [pc, #16]	@ (8002744 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 8002732:	f027 feb9 	bl	802a4a8 <__assert_func>
    }
 8002736:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 800273a:	bd08      	pop	{r3, pc}
 800273c:	0802befc 	.word	0x0802befc
 8002740:	0802bf10 	.word	0x0802bf10
 8002744:	0802c09a 	.word	0x0802c09a

08002748 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002748:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 800274a:	b131      	cbz	r1, 800275a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 800274c:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 800274e:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8002752:	4a06      	ldr	r2, [pc, #24]	@ (800276c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002754:	4806      	ldr	r0, [pc, #24]	@ (8002770 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002756:	f027 fea7 	bl	802a4a8 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 800275a:	6840      	ldr	r0, [r0, #4]
 800275c:	4611      	mov	r1, r2
 800275e:	6803      	ldr	r3, [r0, #0]
    }
 8002760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	4718      	bx	r3
 8002768:	0802befc 	.word	0x0802befc
 800276c:	0802c0dd 	.word	0x0802c0dd
 8002770:	0802c09a 	.word	0x0802c09a

08002774 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8002774:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002776:	b129      	cbz	r1, 8002784 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 8002778:	4b03      	ldr	r3, [pc, #12]	@ (8002788 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 800277a:	2179      	movs	r1, #121	@ 0x79
 800277c:	4a03      	ldr	r2, [pc, #12]	@ (800278c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 800277e:	4804      	ldr	r0, [pc, #16]	@ (8002790 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8002780:	f027 fe92 	bl	802a4a8 <__assert_func>
    }
 8002784:	68c0      	ldr	r0, [r0, #12]
 8002786:	bd08      	pop	{r3, pc}
 8002788:	0802befc 	.word	0x0802befc
 800278c:	0802c28b 	.word	0x0802c28b
 8002790:	0802c09a 	.word	0x0802c09a

08002794 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002794:	b510      	push	{r4, lr}
 8002796:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8002798:	b129      	cbz	r1, 80027a6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 800279a:	4b19      	ldr	r3, [pc, #100]	@ (8002800 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 800279c:	21a2      	movs	r1, #162	@ 0xa2
 800279e:	4a19      	ldr	r2, [pc, #100]	@ (8002804 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 80027a0:	4819      	ldr	r0, [pc, #100]	@ (8002808 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 80027a2:	f027 fe81 	bl	802a4a8 <__assert_func>
        switch (cmd)
 80027a6:	2a05      	cmp	r2, #5
 80027a8:	d815      	bhi.n	80027d6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80027aa:	e8df f002 	tbb	[pc, r2]
 80027ae:	1103      	.short	0x1103
 80027b0:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80027b4:	6840      	ldr	r0, [r0, #4]
 80027b6:	6803      	ldr	r3, [r0, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	4798      	blx	r3
 80027bc:	b158      	cbz	r0, 80027d6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80027be:	2301      	movs	r3, #1
 80027c0:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80027c4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80027c8:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80027ca:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80027ce:	e002      	b.n	80027d6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80027d6:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80027d8:	6203      	str	r3, [r0, #32]
 80027da:	e7f5      	b.n	80027c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80027dc:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80027de:	2301      	movs	r3, #1
 80027e0:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80027e4:	e7f0      	b.n	80027c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 80027ec:	2301      	movs	r3, #1
 80027ee:	6203      	str	r3, [r0, #32]
            break;
 80027f0:	e7f1      	b.n	80027d6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80027f2:	3b00      	subs	r3, #0
 80027f4:	bf18      	it	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 80027fc:	e7eb      	b.n	80027d6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80027fe:	bf00      	nop
 8002800:	0802befc 	.word	0x0802befc
 8002804:	0802c440 	.word	0x0802c440
 8002808:	0802c09a 	.word	0x0802c09a

0800280c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 800280c:	b510      	push	{r4, lr}
 800280e:	460c      	mov	r4, r1
 8002810:	4611      	mov	r1, r2
 8002812:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8002814:	b12c      	cbz	r4, 8002822 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x16>
 8002816:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x24>)
 8002818:	2190      	movs	r1, #144	@ 0x90
 800281a:	4a06      	ldr	r2, [pc, #24]	@ (8002834 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
 800281c:	4806      	ldr	r0, [pc, #24]	@ (8002838 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
 800281e:	f027 fe43 	bl	802a4a8 <__assert_func>
        stream.frameNumber = 0;
 8002822:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8002824:	6840      	ldr	r0, [r0, #4]
 8002826:	6803      	ldr	r3, [r0, #0]
    }
 8002828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	4718      	bx	r3
 8002830:	0802befc 	.word	0x0802befc
 8002834:	0802c614 	.word	0x0802c614
 8002838:	0802c09a 	.word	0x0802c09a

0800283c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 800283c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800283e:	b129      	cbz	r1, 800284c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 8002840:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 8002842:	2182      	movs	r1, #130	@ 0x82
 8002844:	4a05      	ldr	r2, [pc, #20]	@ (800285c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 8002846:	4806      	ldr	r0, [pc, #24]	@ (8002860 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 8002848:	f027 fe2e 	bl	802a4a8 <__assert_func>
        stream.tickCount = 0;
 800284c:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8002850:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002854:	bd08      	pop	{r3, pc}
 8002856:	bf00      	nop
 8002858:	0802befc 	.word	0x0802befc
 800285c:	0802c7ef 	.word	0x0802c7ef
 8002860:	0802c09a 	.word	0x0802c09a

08002864 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8002864:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8002868:	b510      	push	{r4, lr}
 800286a:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 800286c:	b153      	cbz	r3, 8002884 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 800286e:	f04f 31ff 	mov.w	r1, #4294967295
 8002872:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8002874:	f00c fae2 	bl	800ee3c <osMutexAcquire>
            firstDrawThisFrame = false;
 8002878:	2300      	movs	r3, #0
 800287a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 800287e:	2301      	movs	r3, #1
 8002880:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 8002884:	bd10      	pop	{r4, pc}

08002886 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002886:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800288a:	b11a      	cbz	r2, 8002894 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800288c:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002890:	b102      	cbz	r2, 8002894 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002892:	6018      	str	r0, [r3, #0]
        }
    }
 8002894:	4770      	bx	lr
	...

08002898 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8002898:	b510      	push	{r4, lr}
 800289a:	4604      	mov	r4, r0
 800289c:	4610      	mov	r0, r2
        assert(handle < no_streams);
 800289e:	b129      	cbz	r1, 80028ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 80028a0:	4b13      	ldr	r3, [pc, #76]	@ (80028f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 80028a2:	21d0      	movs	r1, #208	@ 0xd0
 80028a4:	4a13      	ldr	r2, [pc, #76]	@ (80028f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 80028a6:	4814      	ldr	r0, [pc, #80]	@ (80028f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 80028a8:	f027 fdfe 	bl	802a4a8 <__assert_func>
        if (stream.isPlaying)
 80028ac:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80028b0:	b133      	cbz	r3, 80028c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 80028b2:	4b12      	ldr	r3, [pc, #72]	@ (80028fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 80028ba:	6963      	ldr	r3, [r4, #20]
 80028bc:	4413      	add	r3, r2
 80028be:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80028c0:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80028c4:	b90b      	cbnz	r3, 80028ca <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80028c6:	2001      	movs	r0, #1
    }
 80028c8:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80028ca:	68a3      	ldr	r3, [r4, #8]
 80028cc:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80028ce:	6803      	ldr	r3, [r0, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80028d4:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80028d6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80028da:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80028de:	2800      	cmp	r0, #0
 80028e0:	d1f1      	bne.n	80028c6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80028e2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ee      	bne.n	80028c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 80028ea:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 80028ee:	e7eb      	b.n	80028c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 80028f0:	0802befc 	.word	0x0802befc
 80028f4:	0802c9ab 	.word	0x0802c9ab
 80028f8:	0802c09a 	.word	0x0802c09a
 80028fc:	200279d8 	.word	0x200279d8

08002900 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8002900:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8002902:	4c1a      	ldr	r4, [pc, #104]	@ (800296c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8002904:	4605      	mov	r5, r0
    HAL::endFrame();
 8002906:	f00f fad3 	bl	8011eb0 <_ZN8touchgfx3HAL8endFrameEv>
 800290a:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 800290e:	b913      	cbnz	r3, 8002916 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8002910:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8002914:	b1ab      	cbz	r3, 8002942 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002916:	69e1      	ldr	r1, [r4, #28]
 8002918:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800291c:	4353      	muls	r3, r2
 800291e:	6922      	ldr	r2, [r4, #16]
 8002920:	434a      	muls	r2, r1
 8002922:	4293      	cmp	r3, r2
 8002924:	d30d      	bcc.n	8002942 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 8002926:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 800292a:	b138      	cbz	r0, 800293c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8002932:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8002934:	bf98      	it	ls
 8002936:	f102 32ff 	addls.w	r2, r2, #4294967295
 800293a:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 800293c:	2301      	movs	r3, #1
 800293e:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8002942:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8002944:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8002946:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 800294a:	f00c fb67 	bl	800f01c <osSemaphoreRelease>
        if (uiHasMutex)
 800294e:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8002952:	b12b      	cbz	r3, 8002960 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8002954:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002956:	f00c faa1 	bl	800ee9c <osMutexRelease>
            uiHasMutex = false;
 800295a:	2300      	movs	r3, #0
 800295c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8002960:	6868      	ldr	r0, [r5, #4]
 8002962:	6803      	ldr	r3, [r0, #0]
}
 8002964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	4718      	bx	r3
 800296c:	2000de10 	.word	0x2000de10

08002970 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002970:	4b04      	ldr	r3, [pc, #16]	@ (8002984 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8002972:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800297a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800297e:	f3bf 8f6f 	isb	sy
}
 8002982:	4770      	bx	lr
 8002984:	e000e100 	.word	0xe000e100

08002988 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8002988:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 800298a:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 800298e:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
 8002990:	b9d8      	cbnz	r0, 80029ca <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
        streams[handle].isActive = true;
 8002992:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002994:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
            {
                // Reset stream parameters
                streams[i] = Stream();
 8002996:	60d8      	str	r0, [r3, #12]
        streams[handle].isActive = true;
 8002998:	629a      	str	r2, [r3, #40]	@ 0x28
                streams[i] = Stream();
 800299a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800299e:	6118      	str	r0, [r3, #16]
 80029a0:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80029a2:	f505 223b 	add.w	r2, r5, #765952	@ 0xbb000
                streams[i] = Stream();
 80029a6:	6158      	str	r0, [r3, #20]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80029a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
                streams[i] = Stream();
 80029ac:	6198      	str	r0, [r3, #24]
 80029ae:	61d8      	str	r0, [r3, #28]
 80029b0:	6218      	str	r0, [r3, #32]
 80029b2:	6258      	str	r0, [r3, #36]	@ 0x24
 80029b4:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80029b8:	e9d3 460c 	ldrd	r4, r6, [r3, #48]	@ 0x30
 80029bc:	4434      	add	r4, r6
 80029be:	42a2      	cmp	r2, r4
 80029c0:	d90a      	bls.n	80029d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80029c2:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 80029c4:	2152      	movs	r1, #82	@ 0x52
 80029c6:	4a0b      	ldr	r2, [pc, #44]	@ (80029f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80029c8:	e003      	b.n	80029d2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80029ca:	4b0b      	ldr	r3, [pc, #44]	@ (80029f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 80029cc:	f240 11c5 	movw	r1, #453	@ 0x1c5
 80029d0:	4a0a      	ldr	r2, [pc, #40]	@ (80029fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80029d2:	480b      	ldr	r0, [pc, #44]	@ (8002a00 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80029d4:	f027 fd68 	bl	802a4a8 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 80029d8:	609d      	str	r5, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 80029da:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 80029dc:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 80029e0:	f881 0034 	strb.w	r0, [r1, #52]	@ 0x34
        bufferWidth = width;
 80029e4:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 80029e6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 80029ea:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 80029ec:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
 80029f0:	0802cd03 	.word	0x0802cd03
 80029f4:	0802cd3e 	.word	0x0802cd3e
 80029f8:	0802cb4c 	.word	0x0802cb4c
 80029fc:	0802cb7c 	.word	0x0802cb7c
 8002a00:	0802c09a 	.word	0x0802c09a

08002a04 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
        : widgetWidth(0)
 8002a04:	2300      	movs	r3, #0
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 8002a06:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002a08:	4e12      	ldr	r6, [pc, #72]	@ (8002a54 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x50>)
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8002a0e:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x54>)
 8002a10:	6003      	str	r3, [r0, #0]
 8002a12:	6833      	ldr	r3, [r6, #0]
 8002a14:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002a18:	b10a      	cbz	r2, 8002a1e <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1a>
 8002a1a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002a1c:	b900      	cbnz	r0, 8002a20 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1c>
        return instance->lcdRef;
 8002a1e:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8002a20:	6803      	ldr	r3, [r0, #0]
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	4798      	blx	r3
        return auxiliaryLCD;
 8002a26:	6833      	ldr	r3, [r6, #0]
 8002a28:	fab0 f480 	clz	r4, r0
 8002a2c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002a2e:	0964      	lsrs	r4, r4, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
 8002a30:	b130      	cbz	r0, 8002a40 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8002a32:	6803      	ldr	r3, [r0, #0]
 8002a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a36:	4798      	blx	r3
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	bf08      	it	eq
 8002a3c:	f044 0401 	orreq.w	r4, r4, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 8002a40:	b92c      	cbnz	r4, 8002a4e <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x4a>
 8002a42:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x58>)
 8002a44:	212c      	movs	r1, #44	@ 0x2c
 8002a46:	4a06      	ldr	r2, [pc, #24]	@ (8002a60 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x5c>)
 8002a48:	4806      	ldr	r0, [pc, #24]	@ (8002a64 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x60>)
 8002a4a:	f027 fd2d 	bl	802a4a8 <__assert_func>
    }
 8002a4e:	4628      	mov	r0, r5
 8002a50:	bd70      	pop	{r4, r5, r6, pc}
 8002a52:	bf00      	nop
 8002a54:	200279d8 	.word	0x200279d8
 8002a58:	0802cfe4 	.word	0x0802cfe4
 8002a5c:	0802cee1 	.word	0x0802cee1
 8002a60:	0802cf3f 	.word	0x0802cf3f
 8002a64:	0802cf78 	.word	0x0802cf78

08002a68 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8002a68:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB565 renderer;
 8002a6a:	4e24      	ldr	r6, [pc, #144]	@ (8002afc <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 8002a6c:	6835      	ldr	r5, [r6, #0]
 8002a6e:	f3bf 8f5b 	dmb	ish
 8002a72:	f015 0501 	ands.w	r5, r5, #1
 8002a76:	d13f      	bne.n	8002af8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8002a78:	4630      	mov	r0, r6
 8002a7a:	f027 f9a0 	bl	8029dbe <__cxa_guard_acquire>
 8002a7e:	2800      	cmp	r0, #0
 8002a80:	d03a      	beq.n	8002af8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8002a82:	4c1f      	ldr	r4, [pc, #124]	@ (8002b00 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8002a84:	4b1f      	ldr	r3, [pc, #124]	@ (8002b04 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8002a86:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8002a8a:	6125      	str	r5, [r4, #16]
 8002a8c:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8002a8e:	62a5      	str	r5, [r4, #40]	@ 0x28
 8002a90:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8002a92:	e9c4 3500 	strd	r3, r5, [r4]
 8002a96:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8002a9a:	f016 ff24 	bl	80198e6 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8002a9e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002aa2:	f011 fcbb 	bl	801441c <_ZN8touchgfx12CanvasWidgetC1Ev>
 8002aa6:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB565 : public CWRVectorRenderer
 8002aa8:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8002aaa:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB565 : public CWRVectorRenderer
 8002aac:	4b17      	ldr	r3, [pc, #92]	@ (8002b0c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 8002aae:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 8002ab2:	f7ff ffa7 	bl	8002a04 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8002ab6:	4b16      	ldr	r3, [pc, #88]	@ (8002b10 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8002ab8:	4816      	ldr	r0, [pc, #88]	@ (8002b14 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 8002aba:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8002abe:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8002ac0:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8002ac4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8002ac8:	2364      	movs	r3, #100	@ 0x64
 8002aca:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8002ace:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8002ad2:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8002adc:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8002ae0:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8002ae4:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB565LinearGradient : public AbstractPainterLinearGradient
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8002aea:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8002aee:	f027 fcf9 	bl	802a4e4 <atexit>
 8002af2:	4630      	mov	r0, r6
 8002af4:	f027 f96f 	bl	8029dd6 <__cxa_guard_release>
}
 8002af8:	4801      	ldr	r0, [pc, #4]	@ (8002b00 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8002afa:	bd70      	pop	{r4, r5, r6, pc}
 8002afc:	2000dd50 	.word	0x2000dd50
 8002b00:	2000dd54 	.word	0x2000dd54
 8002b04:	0802e838 	.word	0x0802e838
 8002b08:	0802d004 	.word	0x0802d004
 8002b0c:	0802d07c 	.word	0x0802d07c
 8002b10:	0802e7ec 	.word	0x0802e7ec
 8002b14:	080025d1 	.word	0x080025d1
 8002b18:	0802e7cc 	.word	0x0802e7cc

08002b1c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8002b1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002b20:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8002b22:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002b24:	f44f 67c8 	mov.w	r7, #1600	@ 0x640
            SEM_WAIT(semDecode);
 8002b28:	f04f 31ff 	mov.w	r1, #4294967295
 8002b2c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002b2e:	f00c fa39 	bl	800efa4 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8002b32:	f04f 31ff 	mov.w	r1, #4294967295
 8002b36:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002b38:	f00c f980 	bl	800ee3c <osMutexAcquire>
                if (stream.doDecode)
 8002b3c:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8002b40:	b343      	cbz	r3, 8002b94 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8002b42:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8002b44:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8002b48:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8002b4a:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8002b4e:	f1b8 0f00 	cmp.w	r8, #0
 8002b52:	d023      	beq.n	8002b9c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8002b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b56:	4641      	mov	r1, r8
 8002b58:	4628      	mov	r0, r5
 8002b5a:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002b60:	682b      	ldr	r3, [r5, #0]
 8002b62:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002b66:	9700      	str	r7, [sp, #0]
 8002b68:	4628      	mov	r0, r5
 8002b6a:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8002b6e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002b72:	68a1      	ldr	r1, [r4, #8]
 8002b74:	47c0      	blx	r8
                    stream.frameCount++;
 8002b76:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002b78:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8002b80:	b1f0      	cbz	r0, 8002bc0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8002b82:	682b      	ldr	r3, [r5, #0]
 8002b84:	4628      	mov	r0, r5
 8002b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b88:	4798      	blx	r3
 8002b8a:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8002b8c:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8002b8e:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8002b90:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8002b94:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002b96:	f00c f981 	bl	800ee9c <osMutexRelease>
        while (1)
 8002b9a:	e7c5      	b.n	8002b28 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8002b9c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002b9e:	2a00      	cmp	r2, #0
 8002ba0:	d0de      	beq.n	8002b60 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8002ba8:	4798      	blx	r3
 8002baa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002bac:	4401      	add	r1, r0
 8002bae:	4628      	mov	r0, r5
 8002bb0:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8002bb2:	6923      	ldr	r3, [r4, #16]
 8002bb4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 8002bb6:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 8002bba:	4413      	add	r3, r2
 8002bbc:	6123      	str	r3, [r4, #16]
 8002bbe:	e7cf      	b.n	8002b60 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	e7e3      	b.n	8002b8c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x70>

08002bc4 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 8002bc4:	4801      	ldr	r0, [pc, #4]	@ (8002bcc <videoTaskFunc+0x8>)
{
 8002bc6:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8002bc8:	f7ff ffa8 	bl	8002b1c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 8002bcc:	2000de10 	.word	0x2000de10

08002bd0 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8002bd0:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8002bd2:	4814      	ldr	r0, [pc, #80]	@ (8002c24 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8002bd4:	2500      	movs	r5, #0
 8002bd6:	f7fe fce9 	bl	80015ac <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002bda:	4c13      	ldr	r4, [pc, #76]	@ (8002c28 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8002bdc:	4b13      	ldr	r3, [pc, #76]	@ (8002c2c <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8002bde:	462a      	mov	r2, r5
 8002be0:	4629      	mov	r1, r5
 8002be2:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002be4:	6023      	str	r3, [r4, #0]
 8002be6:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8002bea:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002bec:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8002bee:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002bf0:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8002bf4:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8002bf8:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002bfc:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8002c00:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8002c04:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8002c08:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8002c0c:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8002c10:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8002c14:	f00c f96e 	bl	800eef4 <osSemaphoreNew>
 8002c18:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	f00c f8cc 	bl	800edb8 <osMutexNew>
 8002c20:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8002c22:	bd38      	pop	{r3, r4, r5, pc}
 8002c24:	2000de58 	.word	0x2000de58
 8002c28:	2000de10 	.word	0x2000de10
 8002c2c:	0802d0c8 	.word	0x0802d0c8

08002c30 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t* pInBuffer,
                                                          uint8_t* pOutBuffer,
                                                          uint32_t BlockIndex,
                                                          uint32_t DataCount,
                                                          uint32_t* ConvertedDataCount)
{
 8002c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c34:	b08d      	sub	sp, #52	@ 0x34
 8002c36:	9207      	str	r2, [sp, #28]
    int32_t c_red, c_blue, c_green;

    uint8_t* pOutAddr, *pOutAddr2;
    uint8_t* pChrom, *pLum;

    numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8002c38:	f44f 72c0 	mov.w	r2, #384	@ 0x180
    currentMCU = BlockIndex;
 8002c3c:	f8dd 801c 	ldr.w	r8, [sp, #28]
{
 8002c40:	9001      	str	r0, [sp, #4]
 8002c42:	910b      	str	r1, [sp, #44]	@ 0x2c
    numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8002c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c48:	9306      	str	r3, [sp, #24]

    while (currentMCU < (numberMCU + BlockIndex))
    {
        xRef = ((currentMCU * 16) / JPEG_ConvertorParams.WidthExtend) * 16;
 8002c4a:	4b6c      	ldr	r3, [pc, #432]	@ (8002dfc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	9305      	str	r3, [sp, #20]
    while (currentMCU < (numberMCU + BlockIndex))
 8002c50:	2300      	movs	r3, #0
 8002c52:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8002c56:	440a      	add	r2, r1
 8002c58:	4542      	cmp	r2, r8
 8002c5a:	d808      	bhi.n	8002c6e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3e>
 8002c5c:	b11b      	cbz	r3, 8002c66 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x36>
 8002c5e:	4b67      	ldr	r3, [pc, #412]	@ (8002dfc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 8002c60:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8002c64:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pInBuffer +=  YCBCR_420_BLOCK_SIZE;
    }
    return numberMCU;
}
 8002c66:	9806      	ldr	r0, [sp, #24]
 8002c68:	b00d      	add	sp, #52	@ 0x34
 8002c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xRef = ((currentMCU * 16) / JPEG_ConvertorParams.WidthExtend) * 16;
 8002c6e:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8002c72:	9a05      	ldr	r2, [sp, #20]
        yRef = ((currentMCU * 16) % JPEG_ConvertorParams.WidthExtend);
 8002c74:	9905      	ldr	r1, [sp, #20]
        currentMCU++;
 8002c76:	f108 0801 	add.w	r8, r8, #1
        for (i = 0; i < 16; i += 2)
 8002c7a:	f04f 0b00 	mov.w	fp, #0
        xRef = ((currentMCU * 16) / JPEG_ConvertorParams.WidthExtend) * 16;
 8002c7e:	fbb3 f2f2 	udiv	r2, r3, r2
        yRef = ((currentMCU * 16) % JPEG_ConvertorParams.WidthExtend);
 8002c82:	fb01 3312 	mls	r3, r1, r2, r3
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002c86:	f44f 41c8 	mov.w	r1, #25600	@ 0x6400
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fb01 3302 	mla	r3, r1, r2, r3
 8002c90:	9302      	str	r3, [sp, #8]
        pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 8002c92:	9b01      	ldr	r3, [sp, #4]
 8002c94:	f503 7c80 	add.w	ip, r3, #256	@ 0x100
        pLum = pInBuffer;
 8002c98:	4699      	mov	r9, r3
            if (refline < JPEG_ConvertorParams.ScaledWidth * 480)
 8002c9a:	9b02      	ldr	r3, [sp, #8]
 8002c9c:	4a58      	ldr	r2, [pc, #352]	@ (8002e00 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	f200 8099 	bhi.w	8002dd6 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1a6>
                pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 8002ca4:	f503 65c8 	add.w	r5, r3, #1600	@ 0x640
 8002ca8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002caa:	f8cd 900c 	str.w	r9, [sp, #12]
 8002cae:	441d      	add	r5, r3
                for (k = 0; k < 2; k++)
 8002cb0:	f10c 0308 	add.w	r3, ip, #8
 8002cb4:	930a      	str	r3, [sp, #40]	@ 0x28
                    for (j = 0; j < 8; j += 2)
 8002cb6:	f10c 33ff 	add.w	r3, ip, #4294967295
 8002cba:	9f03      	ldr	r7, [sp, #12]
        for (i = 0; i < 16; i += 2)
 8002cbc:	2600      	movs	r6, #0
 8002cbe:	9304      	str	r3, [sp, #16]
 8002cc0:	f5a5 63c8 	sub.w	r3, r5, #1600	@ 0x640
 8002cc4:	9308      	str	r3, [sp, #32]
 8002cc6:	9b08      	ldr	r3, [sp, #32]
                    for (j = 0; j < 8; j += 2)
 8002cc8:	3702      	adds	r7, #2
                        c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002cca:	484e      	ldr	r0, [pc, #312]	@ (8002e04 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d4>)
 8002ccc:	4433      	add	r3, r6
                        ycomp = (int32_t)(*(pLum + j));
 8002cce:	f817 ec02 	ldrb.w	lr, [r7, #-2]
 8002cd2:	9309      	str	r3, [sp, #36]	@ 0x24
                        c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002cd4:	9b04      	ldr	r3, [sp, #16]
 8002cd6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002cda:	9304      	str	r3, [sp, #16]
 8002cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8002e08 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d8>)
 8002cde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                        c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002ce2:	9b04      	ldr	r3, [sp, #16]
 8002ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ce8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
                        c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002cec:	4847      	ldr	r0, [pc, #284]	@ (8002e0c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>)
 8002cee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002cf2:	4847      	ldr	r0, [pc, #284]	@ (8002e10 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e0>)
 8002cf4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8002cf8:	4413      	add	r3, r2
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002cfa:	4a46      	ldr	r2, [pc, #280]	@ (8002e14 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e4>)
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	4414      	add	r4, r2
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d00:	eb00 4323 	add.w	r3, r0, r3, asr #16
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d04:	eb04 020e 	add.w	r2, r4, lr
                            ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002d08:	4401      	add	r1, r0
                        *(__IO uint16_t*)pOutAddr =
 8002d0a:	9808      	ldr	r0, [sp, #32]
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d0c:	f892 a100 	ldrb.w	sl, [r2, #256]	@ 0x100
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d10:	eb03 020e 	add.w	r2, r3, lr
                            ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002d14:	448e      	add	lr, r1
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d16:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d1a:	ea4f 0ada 	mov.w	sl, sl, lsr #3
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d1e:	f89e e100 	ldrb.w	lr, [lr, #256]	@ 0x100
 8002d22:	0892      	lsrs	r2, r2, #2
 8002d24:	0152      	lsls	r2, r2, #5
 8002d26:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002d2a:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
                        *(__IO uint16_t*)pOutAddr =
 8002d2e:	5382      	strh	r2, [r0, r6]
                        ycomp = (int32_t)(*(pLum + j + 1));
 8002d30:	f817 ec01 	ldrb.w	lr, [r7, #-1]
                        *((__IO uint16_t*)(pOutAddr + 2)) =
 8002d34:	9809      	ldr	r0, [sp, #36]	@ 0x24
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d36:	eb04 020e 	add.w	r2, r4, lr
 8002d3a:	f892 a100 	ldrb.w	sl, [r2, #256]	@ 0x100
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d3e:	eb03 020e 	add.w	r2, r3, lr
                            ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002d42:	448e      	add	lr, r1
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d44:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d48:	ea4f 0ada 	mov.w	sl, sl, lsr #3
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d4c:	f89e e100 	ldrb.w	lr, [lr, #256]	@ 0x100
 8002d50:	0892      	lsrs	r2, r2, #2
 8002d52:	0152      	lsls	r2, r2, #5
 8002d54:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002d58:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
                        *((__IO uint16_t*)(pOutAddr + 2)) =
 8002d5c:	8042      	strh	r2, [r0, #2]
                        ycomp = (int32_t)(*(pLum + j + 8));
 8002d5e:	f897 e006 	ldrb.w	lr, [r7, #6]
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d62:	eb04 020e 	add.w	r2, r4, lr
 8002d66:	f892 a100 	ldrb.w	sl, [r2, #256]	@ 0x100
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d6a:	eb03 020e 	add.w	r2, r3, lr
                            ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002d6e:	448e      	add	lr, r1
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d70:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d74:	ea4f 0ada 	mov.w	sl, sl, lsr #3
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d78:	f89e e100 	ldrb.w	lr, [lr, #256]	@ 0x100
 8002d7c:	0892      	lsrs	r2, r2, #2
 8002d7e:	0152      	lsls	r2, r2, #5
 8002d80:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002d84:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
                        *(__IO uint16_t*)pOutAddr2 =
 8002d88:	53aa      	strh	r2, [r5, r6]
                        ycomp = (int32_t)(*(pLum + j + 8 + 1));
 8002d8a:	79fa      	ldrb	r2, [r7, #7]
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d8c:	4413      	add	r3, r2
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d8e:	4414      	add	r4, r2
                            ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002d90:	4411      	add	r1, r2
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d92:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d96:	f894 4100 	ldrb.w	r4, [r4, #256]	@ 0x100
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	f891 2100 	ldrb.w	r2, [r1, #256]	@ 0x100
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002da0:	08e4      	lsrs	r4, r4, #3
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002da2:	015b      	lsls	r3, r3, #5
 8002da4:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
 8002da8:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
                        *((__IO uint16_t*)(pOutAddr2 + 2)) =
 8002dac:	19aa      	adds	r2, r5, r6
                    for (j = 0; j < 8; j += 2)
 8002dae:	3604      	adds	r6, #4
                        *((__IO uint16_t*)(pOutAddr2 + 2)) =
 8002db0:	8053      	strh	r3, [r2, #2]
                    for (j = 0; j < 8; j += 2)
 8002db2:	2e10      	cmp	r6, #16
 8002db4:	d187      	bne.n	8002cc6 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x96>
                    pLum += 64;
 8002db6:	9b03      	ldr	r3, [sp, #12]
                        pChrom++;
 8002db8:	f10c 0c04 	add.w	ip, ip, #4
                        pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8002dbc:	3510      	adds	r5, #16
                    pLum += 64;
 8002dbe:	3340      	adds	r3, #64	@ 0x40
 8002dc0:	9303      	str	r3, [sp, #12]
                for (k = 0; k < 2; k++)
 8002dc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002dc4:	4563      	cmp	r3, ip
 8002dc6:	f47f af76 	bne.w	8002cb6 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x86>
                refline += 2 * JPEG_ConvertorParams.ScaledWidth;
 8002dca:	9b02      	ldr	r3, [sp, #8]
                pLum = pLum - 128 + 16;
 8002dcc:	f109 0910 	add.w	r9, r9, #16
                refline += 2 * JPEG_ConvertorParams.ScaledWidth;
 8002dd0:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 8002dd4:	9302      	str	r3, [sp, #8]
        for (i = 0; i < 16; i += 2)
 8002dd6:	f10b 0b02 	add.w	fp, fp, #2
 8002dda:	f1bb 0f10 	cmp.w	fp, #16
 8002dde:	d105      	bne.n	8002dec <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1bc>
        pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8002de0:	9b01      	ldr	r3, [sp, #4]
 8002de2:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	2301      	movs	r3, #1
 8002dea:	e732      	b.n	8002c52 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x22>
            if (i == 8)
 8002dec:	f1bb 0f08 	cmp.w	fp, #8
                pLum = pInBuffer + 128;
 8002df0:	bf04      	itt	eq
 8002df2:	9b01      	ldreq	r3, [sp, #4]
 8002df4:	f103 0980 	addeq.w	r9, r3, #128	@ 0x80
 8002df8:	e74f      	b.n	8002c9a <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6a>
 8002dfa:	bf00      	nop
 8002dfc:	20011e9c 	.word	0x20011e9c
 8002e00:	000bb7ff 	.word	0x000bb7ff
 8002e04:	20011a9c 	.word	0x20011a9c
 8002e08:	2001169c 	.word	0x2001169c
 8002e0c:	2001129c 	.word	0x2001129c
 8002e10:	20010e9c 	.word	0x20010e9c
 8002e14:	0802d104 	.word	0x0802d104

08002e18 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t* pInBuffer,
                                                     uint8_t* pOutBuffer,
                                                     uint32_t BlockIndex,
                                                     uint32_t DataCount,
                                                     uint32_t* ConvertedDataCount)
{
 8002e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int32_t c_red, c_blue, c_green;

    uint8_t* pOutAddr;
    uint8_t* pChrom, *pLum;

    numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8002e1c:	0a1b      	lsrs	r3, r3, #8
{
 8002e1e:	b08d      	sub	sp, #52	@ 0x34
    numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8002e20:	9305      	str	r3, [sp, #20]
    currentMCU = BlockIndex;

    while (currentMCU < (numberMCU + BlockIndex))
    {
        xRef = ((currentMCU * 16) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002e22:	4b4f      	ldr	r3, [pc, #316]	@ (8002f60 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{
 8002e24:	9206      	str	r2, [sp, #24]
        xRef = ((currentMCU * 16) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002e26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
    currentMCU = BlockIndex;
 8002e28:	f8dd e018 	ldr.w	lr, [sp, #24]
        xRef = ((currentMCU * 16) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002e2c:	9202      	str	r2, [sp, #8]

        yRef = ((currentMCU * 16) % JPEG_ConvertorParams.WidthExtend);

        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002e2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28

        pLum = pInBuffer;

        for (i = 0; i < 8; i++)
        {
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002e30:	691b      	ldr	r3, [r3, #16]
{
 8002e32:	910a      	str	r1, [sp, #40]	@ 0x28
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002e34:	9203      	str	r2, [sp, #12]
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002e36:	9307      	str	r3, [sp, #28]
    while (currentMCU < (numberMCU + BlockIndex))
 8002e38:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4573      	cmp	r3, lr
 8002e40:	d803      	bhi.n	8002e4a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
        }

        pInBuffer +=  YCBCR_422_BLOCK_SIZE;
    }
    return numberMCU;
}
 8002e42:	9805      	ldr	r0, [sp, #20]
 8002e44:	b00d      	add	sp, #52	@ 0x34
 8002e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xRef = ((currentMCU * 16) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002e4a:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8002e4e:	9a02      	ldr	r2, [sp, #8]
        yRef = ((currentMCU * 16) % JPEG_ConvertorParams.WidthExtend);
 8002e50:	9c02      	ldr	r4, [sp, #8]
        currentMCU++;
 8002e52:	f10e 0e01 	add.w	lr, lr, #1
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002e56:	9903      	ldr	r1, [sp, #12]
        pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8002e58:	f100 0780 	add.w	r7, r0, #128	@ 0x80
        pLum = pInBuffer;
 8002e5c:	4682      	mov	sl, r0
        xRef = ((currentMCU * 16) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002e5e:	fbb3 f2f2 	udiv	r2, r3, r2
        yRef = ((currentMCU * 16) % JPEG_ConvertorParams.WidthExtend);
 8002e62:	fb04 3312 	mls	r3, r4, r2, r3
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002e66:	4351      	muls	r1, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002e6e:	9300      	str	r3, [sp, #0]
        pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8002e70:	2308      	movs	r3, #8
 8002e72:	9304      	str	r3, [sp, #16]
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002e74:	9b07      	ldr	r3, [sp, #28]
 8002e76:	9a00      	ldr	r2, [sp, #0]
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d969      	bls.n	8002f50 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x138>
                pOutAddr = pOutBuffer + refline;
 8002e7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002e7e:	46d0      	mov	r8, sl
 8002e80:	eb03 0902 	add.w	r9, r3, r2
                for (k = 0; k < 2; k++)
 8002e84:	f107 0308 	add.w	r3, r7, #8
 8002e88:	9308      	str	r3, [sp, #32]
                    for (j = 0; j < 8; j += 2)
 8002e8a:	1e7b      	subs	r3, r7, #1
        pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8002e8c:	2400      	movs	r4, #0
 8002e8e:	9301      	str	r3, [sp, #4]
                        ycomp = (int32_t)(*(pLum + j + 1));
 8002e90:	f108 0301 	add.w	r3, r8, #1
 8002e94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002e96:	eb09 0384 	add.w	r3, r9, r4, lsl #2
                        ycomp = (int32_t)(*(pLum + j));
 8002e9a:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 8002e9e:	9309      	str	r3, [sp, #36]	@ 0x24
                        c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002ea0:	9b01      	ldr	r3, [sp, #4]
 8002ea2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8002f64 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 8002eaa:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
                        c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002eae:	9b01      	ldr	r3, [sp, #4]
 8002eb0:	f893 1040 	ldrb.w	r1, [r3, #64]	@ 0x40
 8002eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8002f68 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 8002eb6:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
                        c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002eba:	4b2c      	ldr	r3, [pc, #176]	@ (8002f6c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 8002ebc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f70 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 8002ec2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ec6:	4411      	add	r1, r2
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8002f74 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 8002eca:	4613      	mov	r3, r2
 8002ecc:	4416      	add	r6, r2
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ece:	eb03 4121 	add.w	r1, r3, r1, asr #16
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ed2:	eb06 020c 	add.w	r2, r6, ip
                            ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002ed6:	441d      	add	r5, r3
                        ycomp = (int32_t)(*(pLum + j + 1));
 8002ed8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002eda:	f892 b100 	ldrb.w	fp, [r2, #256]	@ 0x100
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ede:	eb01 020c 	add.w	r2, r1, ip
                            ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002ee2:	44ac      	add	ip, r5
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ee4:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ee8:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002eec:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
 8002ef0:	0892      	lsrs	r2, r2, #2
 8002ef2:	0152      	lsls	r2, r2, #5
 8002ef4:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 8002ef8:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
                        *(__IO uint16_t*)pOutAddr =
 8002efc:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
                        ycomp = (int32_t)(*(pLum + j + 1));
 8002f00:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
                    for (j = 0; j < 8; j += 2)
 8002f04:	3401      	adds	r4, #1
                        *((__IO uint16_t*)(pOutAddr + 2)) =
 8002f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002f08:	4411      	add	r1, r2
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002f0a:	4416      	add	r6, r2
                            ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002f0c:	4415      	add	r5, r2
                    for (j = 0; j < 8; j += 2)
 8002f0e:	2c04      	cmp	r4, #4
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002f10:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002f14:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002f18:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8002f1c:	f895 2100 	ldrb.w	r2, [r5, #256]	@ 0x100
                            ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002f20:	ea4f 06d6 	mov.w	r6, r6, lsr #3
                            ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002f24:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8002f28:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 8002f2c:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
                        *((__IO uint16_t*)(pOutAddr + 2)) =
 8002f30:	8059      	strh	r1, [r3, #2]
                    for (j = 0; j < 8; j += 2)
 8002f32:	d1b0      	bne.n	8002e96 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x7e>
                        pChrom++;
 8002f34:	3704      	adds	r7, #4
                for (k = 0; k < 2; k++)
 8002f36:	9b08      	ldr	r3, [sp, #32]
                        pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8002f38:	f109 0910 	add.w	r9, r9, #16
                    pLum += 64;
 8002f3c:	f108 0840 	add.w	r8, r8, #64	@ 0x40
                for (k = 0; k < 2; k++)
 8002f40:	42bb      	cmp	r3, r7
 8002f42:	d1a2      	bne.n	8002e8a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x72>
                refline += JPEG_ConvertorParams.ScaledWidth;
 8002f44:	9a00      	ldr	r2, [sp, #0]
                pLum = pLum - 128 + 8;
 8002f46:	f10a 0a08 	add.w	sl, sl, #8
                refline += JPEG_ConvertorParams.ScaledWidth;
 8002f4a:	9b03      	ldr	r3, [sp, #12]
 8002f4c:	441a      	add	r2, r3
 8002f4e:	9200      	str	r2, [sp, #0]
        for (i = 0; i < 8; i++)
 8002f50:	9b04      	ldr	r3, [sp, #16]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	9304      	str	r3, [sp, #16]
 8002f56:	d18d      	bne.n	8002e74 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5c>
        pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8002f58:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 8002f5c:	e76c      	b.n	8002e38 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 8002f5e:	bf00      	nop
 8002f60:	20011e9c 	.word	0x20011e9c
 8002f64:	2001169c 	.word	0x2001169c
 8002f68:	20011a9c 	.word	0x20011a9c
 8002f6c:	2001129c 	.word	0x2001129c
 8002f70:	20010e9c 	.word	0x20010e9c
 8002f74:	0802d104 	.word	0x0802d104

08002f78 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t* pInBuffer,
                                                     uint8_t* pOutBuffer,
                                                     uint32_t BlockIndex,
                                                     uint32_t DataCount,
                                                     uint32_t* ConvertedDataCount)
{
 8002f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f7c:	4692      	mov	sl, r2
    int32_t c_red, c_blue, c_green;

    uint8_t* pOutAddr;
    uint8_t* pChrom, *pLum;

    numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002f7e:	22c0      	movs	r2, #192	@ 0xc0
{
 8002f80:	b089      	sub	sp, #36	@ 0x24
    numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002f82:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f86:	9304      	str	r3, [sp, #16]
    currentMCU = BlockIndex;

    while (currentMCU < (numberMCU + BlockIndex))
    {

        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002f88:	4b34      	ldr	r3, [pc, #208]	@ (800305c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe4>)
{
 8002f8a:	9107      	str	r1, [sp, #28]
    currentMCU = BlockIndex;
 8002f8c:	4651      	mov	r1, sl
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002f8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f90:	9200      	str	r2, [sp, #0]

        yRef = ((currentMCU * 8) % JPEG_ConvertorParams.WidthExtend);

        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002f92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28

        pLum = pInBuffer;

        for (i = 0; i < 8; i++)
        {
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002f94:	691b      	ldr	r3, [r3, #16]
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002f96:	9201      	str	r2, [sp, #4]
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002f98:	9305      	str	r3, [sp, #20]
    while (currentMCU < (numberMCU + BlockIndex))
 8002f9a:	9b04      	ldr	r3, [sp, #16]
 8002f9c:	4453      	add	r3, sl
 8002f9e:	428b      	cmp	r3, r1
 8002fa0:	d803      	bhi.n	8002faa <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x32>
        }

        pInBuffer +=  YCBCR_444_BLOCK_SIZE;
    }
    return numberMCU;
}
 8002fa2:	9804      	ldr	r0, [sp, #16]
 8002fa4:	b009      	add	sp, #36	@ 0x24
 8002fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002faa:	00cb      	lsls	r3, r1, #3
 8002fac:	9a00      	ldr	r2, [sp, #0]
        yRef = ((currentMCU * 8) % JPEG_ConvertorParams.WidthExtend);
 8002fae:	9d00      	ldr	r5, [sp, #0]
        currentMCU++;
 8002fb0:	3101      	adds	r1, #1
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002fb2:	9c01      	ldr	r4, [sp, #4]
        pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8002fb4:	f100 0640 	add.w	r6, r0, #64	@ 0x40
        pLum = pInBuffer;
 8002fb8:	4684      	mov	ip, r0
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8002fba:	fbb3 f2f2 	udiv	r2, r3, r2
        yRef = ((currentMCU * 8) % JPEG_ConvertorParams.WidthExtend);
 8002fbe:	fb05 3312 	mls	r3, r5, r2, r3
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002fc2:	4354      	muls	r4, r2
        pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8002fc4:	2208      	movs	r2, #8
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002fc6:	005b      	lsls	r3, r3, #1
        pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8002fc8:	9203      	str	r2, [sp, #12]
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8002fca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002fce:	9a05      	ldr	r2, [sp, #20]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d93c      	bls.n	800304e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xd6>
                pOutAddr = pOutBuffer + refline;
 8002fd4:	9a07      	ldr	r2, [sp, #28]
 8002fd6:	f106 3eff 	add.w	lr, r6, #4294967295
 8002fda:	18d4      	adds	r4, r2, r3
                for (j = 0; j < 8; j++)
 8002fdc:	f10c 32ff 	add.w	r2, ip, #4294967295
 8002fe0:	9202      	str	r2, [sp, #8]
 8002fe2:	f104 0210 	add.w	r2, r4, #16
 8002fe6:	9206      	str	r2, [sp, #24]
                    ycomp = (int32_t)(*(pLum + j));
 8002fe8:	9f02      	ldr	r7, [sp, #8]
                    c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002fea:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
                    ycomp = (int32_t)(*(pLum + j));
 8002fee:	f817 2f01 	ldrb.w	r2, [r7, #1]!
                    c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002ff2:	f89e 9040 	ldrb.w	r9, [lr, #64]	@ 0x40
                        ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ff6:	4d1a      	ldr	r5, [pc, #104]	@ (8003060 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
                    ycomp = (int32_t)(*(pLum + j));
 8002ff8:	9702      	str	r7, [sp, #8]
                        ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ffa:	4f1a      	ldr	r7, [pc, #104]	@ (8003064 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
 8002ffc:	442a      	add	r2, r5
                        ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002ffe:	4d1a      	ldr	r5, [pc, #104]	@ (8003068 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
                        ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8003000:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 8003004:	4417      	add	r7, r2
 8003006:	f897 b100 	ldrb.w	fp, [r7, #256]	@ 0x100
                        ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800300a:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
                    c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 800300e:	4d17      	ldr	r5, [pc, #92]	@ (800306c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
                        ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8003010:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
                        ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8003014:	4417      	add	r7, r2
                    c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8003016:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 800301a:	4d15      	ldr	r5, [pc, #84]	@ (8003070 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
                        ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800301c:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
                    c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8003020:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
                        ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8003024:	08ff      	lsrs	r7, r7, #3
                    c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8003026:	44c1      	add	r9, r8
                        ((CLAMP(ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8003028:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 800302c:	eb02 4229 	add.w	r2, r2, r9, asr #16
 8003030:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
 8003034:	0892      	lsrs	r2, r2, #2
 8003036:	ea47 1742 	orr.w	r7, r7, r2, lsl #5
                for (j = 0; j < 8; j++)
 800303a:	9a06      	ldr	r2, [sp, #24]
                    *(__IO uint16_t*)pOutAddr =
 800303c:	f824 7b02 	strh.w	r7, [r4], #2
                for (j = 0; j < 8; j++)
 8003040:	4294      	cmp	r4, r2
 8003042:	d1d1      	bne.n	8002fe8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
                refline += JPEG_ConvertorParams.ScaledWidth;
 8003044:	9a01      	ldr	r2, [sp, #4]
                    pChrom++;
 8003046:	3608      	adds	r6, #8
                pLum += 8;
 8003048:	f10c 0c08 	add.w	ip, ip, #8
                refline += JPEG_ConvertorParams.ScaledWidth;
 800304c:	4413      	add	r3, r2
        for (i = 0; i < 8; i++)
 800304e:	9a03      	ldr	r2, [sp, #12]
 8003050:	3a01      	subs	r2, #1
 8003052:	9203      	str	r2, [sp, #12]
 8003054:	d1bb      	bne.n	8002fce <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x56>
        pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8003056:	30c0      	adds	r0, #192	@ 0xc0
 8003058:	e79f      	b.n	8002f9a <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 800305a:	bf00      	nop
 800305c:	20011e9c 	.word	0x20011e9c
 8003060:	0802d104 	.word	0x0802d104
 8003064:	20011a9c 	.word	0x20011a9c
 8003068:	2001169c 	.word	0x2001169c
 800306c:	2001129c 	.word	0x2001129c
 8003070:	20010e9c 	.word	0x20010e9c

08003074 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t* pInBuffer,
                                                 uint8_t* pOutBuffer,
                                                 uint32_t BlockIndex,
                                                 uint32_t DataCount,
                                                 uint32_t* ConvertedDataCount)
{
 8003074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003078:	b085      	sub	sp, #20
 800307a:	4604      	mov	r4, r0
    uint32_t refline;

    uint32_t i, j, ySample;
    uint8_t* pOutAddr,  *pLum;

    numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 800307c:	0998      	lsrs	r0, r3, #6
{
 800307e:	9102      	str	r1, [sp, #8]
    currentMCU = BlockIndex;

    while (currentMCU < (numberMCU + BlockIndex))
 8003080:	eb02 1393 	add.w	r3, r2, r3, lsr #6
    {
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8003084:	491a      	ldr	r1, [pc, #104]	@ (80030f0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
    while (currentMCU < (numberMCU + BlockIndex))
 8003086:	9303      	str	r3, [sp, #12]

        yRef = ((currentMCU * 8) % JPEG_ConvertorParams.WidthExtend);

        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8003088:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	@ 0x24
        pLum = pInBuffer;

        for (i = 0; i < 8; i++)
        {
            pOutAddr = pOutBuffer + refline;
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800308c:	6909      	ldr	r1, [r1, #16]
 800308e:	9101      	str	r1, [sp, #4]
    while (currentMCU < (numberMCU + BlockIndex))
 8003090:	9b03      	ldr	r3, [sp, #12]
 8003092:	4293      	cmp	r3, r2
 8003094:	d802      	bhi.n	800309c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
        }

        pInBuffer +=  GRAY_444_BLOCK_SIZE;
    }
    return numberMCU;
}
 8003096:	b005      	add	sp, #20
 8003098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 800309c:	00d3      	lsls	r3, r2, #3
        pLum = pInBuffer;
 800309e:	46a4      	mov	ip, r4
        currentMCU++;
 80030a0:	3201      	adds	r2, #1
 80030a2:	2708      	movs	r7, #8
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 80030a4:	fbb3 f1f8 	udiv	r1, r3, r8
        yRef = ((currentMCU * 8) % JPEG_ConvertorParams.WidthExtend);
 80030a8:	fb08 3311 	mls	r3, r8, r1, r3
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 80030ac:	fb09 f501 	mul.w	r5, r9, r1
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80030b6:	9901      	ldr	r1, [sp, #4]
 80030b8:	4299      	cmp	r1, r3
 80030ba:	d915      	bls.n	80030e8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x74>
            pOutAddr = pOutBuffer + refline;
 80030bc:	9902      	ldr	r1, [sp, #8]
 80030be:	46e2      	mov	sl, ip
 80030c0:	4419      	add	r1, r3
                for (j = 0; j < 8; j++)
 80030c2:	f101 0b10 	add.w	fp, r1, #16
                    ySample = (uint32_t)(*pLum);
 80030c6:	f81a 6b01 	ldrb.w	r6, [sl], #1
                    *(__IO uint16_t*)pOutAddr = ((ySample >> 3) << 11) | ((ySample >> 2) << 5) | (ySample >> 3);
 80030ca:	08f5      	lsrs	r5, r6, #3
 80030cc:	08b6      	lsrs	r6, r6, #2
 80030ce:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 80030d2:	ea4e 1e46 	orr.w	lr, lr, r6, lsl #5
 80030d6:	ea45 050e 	orr.w	r5, r5, lr
 80030da:	f821 5b02 	strh.w	r5, [r1], #2
                for (j = 0; j < 8; j++)
 80030de:	4559      	cmp	r1, fp
 80030e0:	d1f1      	bne.n	80030c6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
                    pLum++;
 80030e2:	f10c 0c08 	add.w	ip, ip, #8
                refline += JPEG_ConvertorParams.ScaledWidth;
 80030e6:	444b      	add	r3, r9
        for (i = 0; i < 8; i++)
 80030e8:	3f01      	subs	r7, #1
 80030ea:	d1e4      	bne.n	80030b6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
        pInBuffer +=  GRAY_444_BLOCK_SIZE;
 80030ec:	3440      	adds	r4, #64	@ 0x40
 80030ee:	e7cf      	b.n	8003090 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 80030f0:	20011e9c 	.word	0x20011e9c

080030f4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t* pInBuffer,
                                                 uint8_t* pOutBuffer,
                                                 uint32_t BlockIndex,
                                                 uint32_t DataCount,
                                                 uint32_t* ConvertedDataCount)
{
 80030f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f8:	b085      	sub	sp, #20
 80030fa:	4605      	mov	r5, r0
                pOutAddr = pOutBuffer + refline;

                for (j = 0; j < 8; j++)
                {
                    color_k = (int32_t)(*(pChrom + 192));
                    c_red = (color_k * ((int32_t)(*pChrom))) / 255;
 80030fc:	27ff      	movs	r7, #255	@ 0xff
    numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 80030fe:	0a18      	lsrs	r0, r3, #8
{
 8003100:	9102      	str	r1, [sp, #8]
    while (currentMCU < (numberMCU + BlockIndex))
 8003102:	eb02 2313 	add.w	r3, r2, r3, lsr #8
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8003106:	4927      	ldr	r1, [pc, #156]	@ (80031a4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb0>)
    while (currentMCU < (numberMCU + BlockIndex))
 8003108:	9303      	str	r3, [sp, #12]
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 800310a:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	@ 0x24
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800310e:	6909      	ldr	r1, [r1, #16]
 8003110:	9100      	str	r1, [sp, #0]
    while (currentMCU < (numberMCU + BlockIndex))
 8003112:	9b03      	ldr	r3, [sp, #12]
 8003114:	4293      	cmp	r3, r2
 8003116:	d802      	bhi.n	800311e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
        }

        pInBuffer +=  CMYK_444_BLOCK_SIZE;
    }
    return numberMCU;
}
 8003118:	b005      	add	sp, #20
 800311a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 800311e:	00d1      	lsls	r1, r2, #3
        pChrom = pInBuffer;
 8003120:	46ae      	mov	lr, r5
        currentMCU++;
 8003122:	3201      	adds	r2, #1
 8003124:	f04f 0c08 	mov.w	ip, #8
        xRef = ((currentMCU * 8) / JPEG_ConvertorParams.WidthExtend) * 8;
 8003128:	fbb1 f3f9 	udiv	r3, r1, r9
        yRef = ((currentMCU * 8) % JPEG_ConvertorParams.WidthExtend);
 800312c:	fb09 1113 	mls	r1, r9, r3, r1
        refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL * yRef);
 8003130:	fb0a f403 	mul.w	r4, sl, r3
 8003134:	0049      	lsls	r1, r1, #1
 8003136:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
            if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800313a:	9b00      	ldr	r3, [sp, #0]
 800313c:	428b      	cmp	r3, r1
 800313e:	d92b      	bls.n	8003198 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa4>
                pOutAddr = pOutBuffer + refline;
 8003140:	9b02      	ldr	r3, [sp, #8]
 8003142:	4674      	mov	r4, lr
 8003144:	185e      	adds	r6, r3, r1
                for (j = 0; j < 8; j++)
 8003146:	f106 0310 	add.w	r3, r6, #16
 800314a:	9301      	str	r3, [sp, #4]
                    color_k = (int32_t)(*(pChrom + 192));
 800314c:	f894 80c0 	ldrb.w	r8, [r4, #192]	@ 0xc0
                    pChrom++;
 8003150:	3401      	adds	r4, #1
                    c_green = (color_k * (int32_t)(*(pChrom + 64))) / 255;
 8003152:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
                    c_red = (color_k * ((int32_t)(*pChrom))) / 255;
 8003156:	f814 bc01 	ldrb.w	fp, [r4, #-1]
                    c_green = (color_k * (int32_t)(*(pChrom + 64))) / 255;
 800315a:	fb13 f308 	smulbb	r3, r3, r8
                    c_red = (color_k * ((int32_t)(*pChrom))) / 255;
 800315e:	fb1b fb08 	smulbb	fp, fp, r8
                    c_green = (color_k * (int32_t)(*(pChrom + 64))) / 255;
 8003162:	fbb3 f3f7 	udiv	r3, r3, r7
                    c_red = (color_k * ((int32_t)(*pChrom))) / 255;
 8003166:	fbbb fbf7 	udiv	fp, fp, r7
                        ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800316a:	109b      	asrs	r3, r3, #2
                        ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800316c:	ea4f 0beb 	mov.w	fp, fp, asr #3
                        ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8003170:	015b      	lsls	r3, r3, #5
                        ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8003172:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
                    c_blue = (color_k * (int32_t)(*(pChrom + 128))) / 255;
 8003176:	f894 b07f 	ldrb.w	fp, [r4, #127]	@ 0x7f
 800317a:	fb1b fb08 	smulbb	fp, fp, r8
 800317e:	fbbb fbf7 	udiv	fp, fp, r7
                        ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8003182:	ea43 03db 	orr.w	r3, r3, fp, lsr #3
 8003186:	b29b      	uxth	r3, r3
                    *(__IO uint16_t*)pOutAddr =
 8003188:	f826 3b02 	strh.w	r3, [r6], #2
                for (j = 0; j < 8; j++)
 800318c:	9b01      	ldr	r3, [sp, #4]
 800318e:	429e      	cmp	r6, r3
 8003190:	d1dc      	bne.n	800314c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
                    pChrom++;
 8003192:	f10e 0e08 	add.w	lr, lr, #8
                refline += JPEG_ConvertorParams.ScaledWidth;
 8003196:	4451      	add	r1, sl
        for (i = 0; i < 8; i++)
 8003198:	f1bc 0c01 	subs.w	ip, ip, #1
 800319c:	d1cd      	bne.n	800313a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
        pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800319e:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 80031a2:	e7b6      	b.n	8003112 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 80031a4:	20011e9c 	.word	0x20011e9c

080031a8 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef* pJpegInfo, JPEG_YCbCrToRGB_Convert_Function* pFunction, uint32_t* ImageNbMCUs)
{
 80031a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t hMCU, vMCU;

    JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
    JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 80031aa:	68c3      	ldr	r3, [r0, #12]
    JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 80031ac:	6886      	ldr	r6, [r0, #8]
    JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 80031ae:	6805      	ldr	r5, [r0, #0]
    JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 80031b0:	fb06 f703 	mul.w	r7, r6, r3
    JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 80031b4:	4c27      	ldr	r4, [pc, #156]	@ (8003254 <TGFX_JPEG_GetDecodeColorConvertFunc+0xac>)

    JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 80031b6:	6840      	ldr	r0, [r0, #4]
    if (JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 80031b8:	2d10      	cmp	r5, #16
    JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 80031ba:	ea4f 0747 	mov.w	r7, r7, lsl #1
    JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 80031be:	6025      	str	r5, [r4, #0]
    JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 80031c0:	60a3      	str	r3, [r4, #8]
    JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 80031c2:	60e6      	str	r6, [r4, #12]
    JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 80031c4:	6127      	str	r7, [r4, #16]
    JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 80031c6:	6060      	str	r0, [r4, #4]
    if (JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 80031c8:	d13a      	bne.n	8003240 <TGFX_JPEG_GetDecodeColorConvertFunc+0x98>
    {
        if (JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80031ca:	2801      	cmp	r0, #1
 80031cc:	d120      	bne.n	8003210 <TGFX_JPEG_GetDecodeColorConvertFunc+0x68>
        {
            *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;

            JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;

            if (JPEG_ConvertorParams.LineOffset != 0)
 80031ce:	f013 000f 	ands.w	r0, r3, #15
            *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 80031d2:	4f21      	ldr	r7, [pc, #132]	@ (8003258 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb0>)
            {
                JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 80031d4:	bf18      	it	ne
 80031d6:	f1c0 0010 	rsbne	r0, r0, #16
            *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 80031da:	600f      	str	r7, [r1, #0]
            JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 80031dc:	6160      	str	r0, [r4, #20]
            }
            JPEG_ConvertorParams.H_factor = 16;
            JPEG_ConvertorParams.V_factor  = 16;
 80031de:	2010      	movs	r0, #16
    else
    {
        return HAL_ERROR; /* Color space Not supported*/
    }

    JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 80031e0:	6961      	ldr	r1, [r4, #20]
 80031e2:	4419      	add	r1, r3
 80031e4:	6261      	str	r1, [r4, #36]	@ 0x24
    JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 80031e6:	0059      	lsls	r1, r3, #1
 80031e8:	62a1      	str	r1, [r4, #40]	@ 0x28

    hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 80031ea:	fbb3 f1f5 	udiv	r1, r3, r5
    if ((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 80031ee:	fb05 3311 	mls	r3, r5, r1, r3
            JPEG_ConvertorParams.V_factor  = 8;
 80031f2:	e9c4 5007 	strd	r5, r0, [r4, #28]
    if ((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 80031f6:	b103      	cbz	r3, 80031fa <TGFX_JPEG_GetDecodeColorConvertFunc+0x52>
    {
        hMCU++; /*+1 for horizenatl incomplete MCU */
 80031f8:	3101      	adds	r1, #1
    }

    vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 80031fa:	fbb6 f3f0 	udiv	r3, r6, r0
    if ((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 80031fe:	fb00 6613 	mls	r6, r0, r3, r6
 8003202:	b106      	cbz	r6, 8003206 <TGFX_JPEG_GetDecodeColorConvertFunc+0x5e>
    {
        vMCU++; /*+1 for vertical incomplete MCU */
 8003204:	3301      	adds	r3, #1
    }
    JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8003206:	4359      	muls	r1, r3
    *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

    return HAL_OK;
 8003208:	2000      	movs	r0, #0
    JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800320a:	62e1      	str	r1, [r4, #44]	@ 0x2c
    *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 800320c:	6011      	str	r1, [r2, #0]
}
 800320e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8003210:	2802      	cmp	r0, #2
 8003212:	d109      	bne.n	8003228 <TGFX_JPEG_GetDecodeColorConvertFunc+0x80>
            if (JPEG_ConvertorParams.LineOffset != 0)
 8003214:	f013 000f 	ands.w	r0, r3, #15
            *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8003218:	4f10      	ldr	r7, [pc, #64]	@ (800325c <TGFX_JPEG_GetDecodeColorConvertFunc+0xb4>)
                JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 800321a:	bf18      	it	ne
 800321c:	f1c0 0010 	rsbne	r0, r0, #16
            *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8003220:	600f      	str	r7, [r1, #0]
            JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8003222:	6160      	str	r0, [r4, #20]
            JPEG_ConvertorParams.V_factor  = 8;
 8003224:	2008      	movs	r0, #8
 8003226:	e7db      	b.n	80031e0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x38>
            *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8003228:	480d      	ldr	r0, [pc, #52]	@ (8003260 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb8>)
        *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800322a:	6008      	str	r0, [r1, #0]
        if (JPEG_ConvertorParams.LineOffset != 0)
 800322c:	f013 0107 	ands.w	r1, r3, #7
 8003230:	d002      	beq.n	8003238 <TGFX_JPEG_GetDecodeColorConvertFunc+0x90>
                JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8003232:	f1c1 0108 	rsb	r1, r1, #8
 8003236:	e000      	b.n	800323a <TGFX_JPEG_GetDecodeColorConvertFunc+0x92>
            JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8003238:	2100      	movs	r1, #0
 800323a:	2508      	movs	r5, #8
                JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 800323c:	6161      	str	r1, [r4, #20]
            JPEG_ConvertorParams.V_factor  = 8;
 800323e:	e7f1      	b.n	8003224 <TGFX_JPEG_GetDecodeColorConvertFunc+0x7c>
    else if (JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8003240:	b90d      	cbnz	r5, 8003246 <TGFX_JPEG_GetDecodeColorConvertFunc+0x9e>
        *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8003242:	4808      	ldr	r0, [pc, #32]	@ (8003264 <TGFX_JPEG_GetDecodeColorConvertFunc+0xbc>)
 8003244:	e7f1      	b.n	800322a <TGFX_JPEG_GetDecodeColorConvertFunc+0x82>
    else if (JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8003246:	2d30      	cmp	r5, #48	@ 0x30
 8003248:	d101      	bne.n	800324e <TGFX_JPEG_GetDecodeColorConvertFunc+0xa6>
        *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800324a:	4807      	ldr	r0, [pc, #28]	@ (8003268 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>)
 800324c:	e7ed      	b.n	800322a <TGFX_JPEG_GetDecodeColorConvertFunc+0x82>
        return HAL_ERROR; /* Color space Not supported*/
 800324e:	2001      	movs	r0, #1
 8003250:	e7dd      	b.n	800320e <TGFX_JPEG_GetDecodeColorConvertFunc+0x66>
 8003252:	bf00      	nop
 8003254:	20011e9c 	.word	0x20011e9c
 8003258:	08002c31 	.word	0x08002c31
 800325c:	08002e19 	.word	0x08002e19
 8003260:	08002f79 	.word	0x08002f79
 8003264:	08003075 	.word	0x08003075
 8003268:	080030f5 	.word	0x080030f5

0800326c <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 800326c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003270:	f8df c250 	ldr.w	ip, [pc, #592]	@ 80034c4 <TGFX_JPEG_InitColorTables+0x258>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
    int32_t i;

    for (i = 0; i <= 255; i++)
 8003274:	2300      	movs	r3, #0
 8003276:	f8df 8250 	ldr.w	r8, [pc, #592]	@ 80034c8 <TGFX_JPEG_InitColorTables+0x25c>
    {
        RED_Y_LUT[i]           = ((((int32_t)((0.299)  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800327a:	f644 4b8b 	movw	fp, #19595	@ 0x4c8b
 800327e:	4f7e      	ldr	r7, [pc, #504]	@ (8003478 <TGFX_JPEG_InitColorTables+0x20c>)
        GREEN_Y_LUT[i]         = ((((int32_t)((0.587)  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8003280:	f249 6a45 	movw	sl, #38469	@ 0x9645
 8003284:	4e7d      	ldr	r6, [pc, #500]	@ (800347c <TGFX_JPEG_InitColorTables+0x210>)
        BLUE_Y_LUT[i]          = ((((int32_t)((0.114)  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8003286:	f641 592f 	movw	r9, #7471	@ 0x1d2f
 800328a:	4d7d      	ldr	r5, [pc, #500]	@ (8003480 <TGFX_JPEG_InitColorTables+0x214>)
 800328c:	4c7d      	ldr	r4, [pc, #500]	@ (8003484 <TGFX_JPEG_InitColorTables+0x218>)
 800328e:	487e      	ldr	r0, [pc, #504]	@ (8003488 <TGFX_JPEG_InitColorTables+0x21c>)
 8003290:	497e      	ldr	r1, [pc, #504]	@ (800348c <TGFX_JPEG_InitColorTables+0x220>)
        RED_Y_LUT[i]           = ((((int32_t)((0.299)  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8003292:	fb0b f203 	mul.w	r2, fp, r3
        GREEN_CB_LUT[i]        = (((-((int32_t)((0.3313) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

        /* BLUE_CB_LUT and RED_CR_LUT are identical */
        BLUE_CB_RED_CR_LUT[i]  = ((((int32_t)((0.5)    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

        GREEN_CR_LUT[i]        = (((-((int32_t)((0.4187) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8003296:	f64e 3e2f 	movw	lr, #60207	@ 0xeb2f
        RED_Y_LUT[i]           = ((((int32_t)((0.299)  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800329a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800329e:	1412      	asrs	r2, r2, #16
 80032a0:	f848 2b04 	str.w	r2, [r8], #4
        GREEN_Y_LUT[i]         = ((((int32_t)((0.587)  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80032a4:	fb0a f203 	mul.w	r2, sl, r3
 80032a8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80032ac:	1412      	asrs	r2, r2, #16
 80032ae:	f84c 2b04 	str.w	r2, [ip], #4
        BLUE_Y_LUT[i]          = ((((int32_t)((0.114)  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80032b2:	fb09 f203 	mul.w	r2, r9, r3
 80032b6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80032ba:	1412      	asrs	r2, r2, #16
 80032bc:	f847 2b04 	str.w	r2, [r7], #4
        RED_CB_LUT[i]          = (((-((int32_t)((0.1687) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80032c0:	4a73      	ldr	r2, [pc, #460]	@ (8003490 <TGFX_JPEG_InitColorTables+0x224>)
 80032c2:	435a      	muls	r2, r3
 80032c4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80032c8:	1412      	asrs	r2, r2, #16
 80032ca:	f846 2b04 	str.w	r2, [r6], #4
        GREEN_CB_LUT[i]        = (((-((int32_t)((0.3313) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80032ce:	4a71      	ldr	r2, [pc, #452]	@ (8003494 <TGFX_JPEG_InitColorTables+0x228>)
 80032d0:	435a      	muls	r2, r3
        BLUE_CB_RED_CR_LUT[i]  = ((((int32_t)((0.5)    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80032d2:	3301      	adds	r3, #1
        GREEN_CB_LUT[i]        = (((-((int32_t)((0.3313) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80032d4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
    for (i = 0; i <= 255; i++)
 80032d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
        GREEN_CB_LUT[i]        = (((-((int32_t)((0.3313) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80032dc:	ea4f 4222 	mov.w	r2, r2, asr #16
 80032e0:	f845 2b04 	str.w	r2, [r5], #4
        BLUE_CB_RED_CR_LUT[i]  = ((((int32_t)((0.5)    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80032e4:	f343 024f 	sbfx	r2, r3, #1, #16
 80032e8:	f844 2b04 	str.w	r2, [r4], #4
        GREEN_CR_LUT[i]        = (((-((int32_t)((0.4187) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80032ec:	4a6a      	ldr	r2, [pc, #424]	@ (8003498 <TGFX_JPEG_InitColorTables+0x22c>)
 80032ee:	fb02 e203 	mla	r2, r2, r3, lr
        BLUE_CR_LUT[i]         = (((-((int32_t)((0.0813) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80032f2:	f249 4ed0 	movw	lr, #38096	@ 0x94d0
        GREEN_CR_LUT[i]        = (((-((int32_t)((0.4187) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80032f6:	ea4f 4222 	mov.w	r2, r2, asr #16
 80032fa:	f840 2b04 	str.w	r2, [r0], #4
        BLUE_CR_LUT[i]         = (((-((int32_t)((0.0813) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80032fe:	4a67      	ldr	r2, [pc, #412]	@ (800349c <TGFX_JPEG_InitColorTables+0x230>)
 8003300:	fb02 e203 	mla	r2, r2, r3, lr
 8003304:	ea4f 4222 	mov.w	r2, r2, asr #16
 8003308:	f841 2b04 	str.w	r2, [r1], #4
    for (i = 0; i <= 255; i++)
 800330c:	d1c1      	bne.n	8003292 <TGFX_JPEG_InitColorTables+0x26>
 800330e:	4c64      	ldr	r4, [pc, #400]	@ (80034a0 <TGFX_JPEG_InitColorTables+0x234>)
void TGFX_JPEG_Init_MCU_LUT(void)
{
    uint32_t i, j, offset;

    /*Y LUT */
    for (i = 0; i < 16; i++)
 8003310:	2200      	movs	r2, #0
    {
        for (j = 0; j < 16; j++)
 8003312:	00d3      	lsls	r3, r2, #3
    for (i = 0; i <= 255; i++)
 8003314:	4625      	mov	r5, r4
        for (j = 0; j < 16; j++)
 8003316:	2100      	movs	r1, #0
        {
            offset =  j + (i * 8);
            if ((j >= 8) && (i >= 8))
 8003318:	2907      	cmp	r1, #7
 800331a:	f240 80a6 	bls.w	800346a <TGFX_JPEG_InitColorTables+0x1fe>
 800331e:	2a07      	cmp	r2, #7
            {
                offset += 120;
 8003320:	bf8c      	ite	hi
 8003322:	f103 0078 	addhi.w	r0, r3, #120	@ 0x78
            }
            else  if ((j >= 8) && (i < 8))
            {
                offset += 56;
 8003326:	f103 0038 	addls.w	r0, r3, #56	@ 0x38
        for (j = 0; j < 16; j++)
 800332a:	3101      	adds	r1, #1
 800332c:	3301      	adds	r3, #1
            else  if ((j < 8) && (i >= 8))
            {
                offset += 64;
            }

            JPEG_Y_MCU_LUT[i * 16 + j] = offset;
 800332e:	f825 0b02 	strh.w	r0, [r5], #2
        for (j = 0; j < 16; j++)
 8003332:	2910      	cmp	r1, #16
 8003334:	d1f0      	bne.n	8003318 <TGFX_JPEG_InitColorTables+0xac>
    for (i = 0; i < 16; i++)
 8003336:	3201      	adds	r2, #1
 8003338:	3420      	adds	r4, #32
 800333a:	2a10      	cmp	r2, #16
 800333c:	d1e9      	bne.n	8003312 <TGFX_JPEG_InitColorTables+0xa6>
        }
    }

    /*Cb Cr K LUT*/
    for (i = 0; i < 16; i++)
 800333e:	2000      	movs	r0, #0
            offset = i * 16 + j;

            JPEG_Cb_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
            JPEG_Cb_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 128;

            JPEG_Cr_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 320;
 8003340:	f8df e188 	ldr.w	lr, [pc, #392]	@ 80034cc <TGFX_JPEG_InitColorTables+0x260>
            JPEG_Cr_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 192;
 8003344:	f8df 8188 	ldr.w	r8, [pc, #392]	@ 80034d0 <TGFX_JPEG_InitColorTables+0x264>

            JPEG_K_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 384;
 8003348:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 80034d4 <TGFX_JPEG_InitColorTables+0x268>
            JPEG_K_MCU_422_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 800334c:	f8df a188 	ldr.w	sl, [pc, #392]	@ 80034d8 <TGFX_JPEG_InitColorTables+0x26c>
            JPEG_Cb_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 8003350:	0844      	lsrs	r4, r0, #1
        for (j = 0; j < 16; j++)
 8003352:	2500      	movs	r5, #0
 8003354:	00c3      	lsls	r3, r0, #3
            JPEG_Cb_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 8003356:	00e4      	lsls	r4, r4, #3
 8003358:	fa1f fc83 	uxth.w	ip, r3
 800335c:	b2a4      	uxth	r4, r4
 800335e:	0142      	lsls	r2, r0, #5
 8003360:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8003364:	4f4f      	ldr	r7, [pc, #316]	@ (80034a4 <TGFX_JPEG_InitColorTables+0x238>)
        for (j = 0; j < 16; j++)
 8003366:	3501      	adds	r5, #1
            JPEG_Cb_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 8003368:	1919      	adds	r1, r3, r4
            JPEG_Cb_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 128;
 800336a:	4463      	add	r3, ip
        for (j = 0; j < 16; j++)
 800336c:	2d10      	cmp	r5, #16
            JPEG_Cb_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 800336e:	b289      	uxth	r1, r1
            JPEG_Cb_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 128;
 8003370:	b29b      	uxth	r3, r3
            JPEG_Cb_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 8003372:	f501 7680 	add.w	r6, r1, #256	@ 0x100
            JPEG_Cb_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 128;
 8003376:	f103 0b80 	add.w	fp, r3, #128	@ 0x80
            JPEG_Cr_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 192;
 800337a:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
            JPEG_Cb_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 800337e:	b2b6      	uxth	r6, r6
            JPEG_Cr_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 192;
 8003380:	f828 3002 	strh.w	r3, [r8, r2]
            JPEG_Cb_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 8003384:	52be      	strh	r6, [r7, r2]
            JPEG_Cb_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 128;
 8003386:	4f48      	ldr	r7, [pc, #288]	@ (80034a8 <TGFX_JPEG_InitColorTables+0x23c>)
            JPEG_K_MCU_422_LUT[offset] = (j / 2) + ((i / 2) * 8) + 256;
 8003388:	f82a 6002 	strh.w	r6, [sl, r2]
            JPEG_Cb_MCU_422_LUT[offset] = (j / 2) + (i * 8) + 128;
 800338c:	f827 b002 	strh.w	fp, [r7, r2]
            JPEG_Cr_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 320;
 8003390:	f501 7ba0 	add.w	fp, r1, #320	@ 0x140
            JPEG_K_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 384;
 8003394:	f501 71c0 	add.w	r1, r1, #384	@ 0x180
            JPEG_Cr_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 320;
 8003398:	f82e b002 	strh.w	fp, [lr, r2]
            JPEG_K_MCU_420_LUT[offset] = (j / 2) + ((i / 2) * 8) + 384;
 800339c:	f829 1002 	strh.w	r1, [r9, r2]
        for (j = 0; j < 16; j++)
 80033a0:	f102 0202 	add.w	r2, r2, #2
 80033a4:	d1dc      	bne.n	8003360 <TGFX_JPEG_InitColorTables+0xf4>
    for (i = 0; i < 16; i++)
 80033a6:	3001      	adds	r0, #1
 80033a8:	2810      	cmp	r0, #16
 80033aa:	d1d1      	bne.n	8003350 <TGFX_JPEG_InitColorTables+0xe4>
 80033ac:	2100      	movs	r1, #0
 80033ae:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 80034dc <TGFX_JPEG_InitColorTables+0x270>
 80033b2:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 80034e0 <TGFX_JPEG_InitColorTables+0x274>
 80033b6:	4608      	mov	r0, r1
 80033b8:	f8df e128 	ldr.w	lr, [pc, #296]	@ 80034e4 <TGFX_JPEG_InitColorTables+0x278>
 80033bc:	f8df c128 	ldr.w	ip, [pc, #296]	@ 80034e8 <TGFX_JPEG_InitColorTables+0x27c>
 80033c0:	b283      	uxth	r3, r0
 80033c2:	eb01 0709 	add.w	r7, r1, r9
 80033c6:	eb01 0608 	add.w	r6, r1, r8
 80033ca:	eb01 050e 	add.w	r5, r1, lr
        }
    }

    for (i = 0; i < 8; i++)
    {
        for (j = 0; j < 8; j++)
 80033ce:	f103 0208 	add.w	r2, r3, #8
 80033d2:	eb01 040c 	add.w	r4, r1, ip
 80033d6:	b292      	uxth	r2, r2
        {
            offset = i * 8 + j;

            JPEG_Y_MCU_444_LUT[offset]  = offset;
            JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 80033d8:	f103 0a40 	add.w	sl, r3, #64	@ 0x40
            JPEG_Y_MCU_444_LUT[offset]  = offset;
 80033dc:	f827 3b02 	strh.w	r3, [r7], #2
            JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 80033e0:	f826 ab02 	strh.w	sl, [r6], #2
            JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 80033e4:	f103 0a80 	add.w	sl, r3, #128	@ 0x80
 80033e8:	f825 ab02 	strh.w	sl, [r5], #2
            JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 80033ec:	f103 0ac0 	add.w	sl, r3, #192	@ 0xc0
        for (j = 0; j < 8; j++)
 80033f0:	3301      	adds	r3, #1
            JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 80033f2:	f824 ab02 	strh.w	sl, [r4], #2
        for (j = 0; j < 8; j++)
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d1ed      	bne.n	80033d8 <TGFX_JPEG_InitColorTables+0x16c>
    for (i = 0; i < 8; i++)
 80033fc:	3008      	adds	r0, #8
 80033fe:	3110      	adds	r1, #16
 8003400:	2840      	cmp	r0, #64	@ 0x40
 8003402:	d1dd      	bne.n	80033c0 <TGFX_JPEG_InitColorTables+0x154>
 8003404:	4d29      	ldr	r5, [pc, #164]	@ (80034ac <TGFX_JPEG_InitColorTables+0x240>)
    for (i = 0; i <= 255; i++)
 8003406:	2300      	movs	r3, #0
 8003408:	4c29      	ldr	r4, [pc, #164]	@ (80034b0 <TGFX_JPEG_InitColorTables+0x244>)
 800340a:	482a      	ldr	r0, [pc, #168]	@ (80034b4 <TGFX_JPEG_InitColorTables+0x248>)
 800340c:	492a      	ldr	r1, [pc, #168]	@ (80034b8 <TGFX_JPEG_InitColorTables+0x24c>)
        CR_RED_LUT[i] = ((((int32_t)((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800340e:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 80034ec <TGFX_JPEG_InitColorTables+0x280>
        CB_BLUE_LUT[i] = ((((int32_t)((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8003412:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 80034f0 <TGFX_JPEG_InitColorTables+0x284>
        CR_GREEN_LUT[i] = (-((int32_t)((0.71414 / 2) * (1L << 16)))) * index;
 8003416:	4f29      	ldr	r7, [pc, #164]	@ (80034bc <TGFX_JPEG_InitColorTables+0x250>)
        CB_GREEN_LUT[i] = (-((int32_t)((0.34414 / 2) * (1L << 16)))) * index;
 8003418:	4e29      	ldr	r6, [pc, #164]	@ (80034c0 <TGFX_JPEG_InitColorTables+0x254>)
        CR_RED_LUT[i] = ((((int32_t)((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800341a:	fb0e f203 	mul.w	r2, lr, r3
 800341e:	f5a2 0232 	sub.w	r2, r2, #11665408	@ 0xb20000
 8003422:	f5a2 4274 	sub.w	r2, r2, #62464	@ 0xf400
 8003426:	1412      	asrs	r2, r2, #16
 8003428:	f845 2b04 	str.w	r2, [r5], #4
        CB_BLUE_LUT[i] = ((((int32_t)((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800342c:	fb0c f203 	mul.w	r2, ip, r3
 8003430:	f5a2 0262 	sub.w	r2, r2, #14811136	@ 0xe20000
 8003434:	f5a2 42a0 	sub.w	r2, r2, #20480	@ 0x5000
 8003438:	1412      	asrs	r2, r2, #16
 800343a:	f844 2b04 	str.w	r2, [r4], #4
        CR_GREEN_LUT[i] = (-((int32_t)((0.71414 / 2) * (1L << 16)))) * index;
 800343e:	fb07 f203 	mul.w	r2, r7, r3
 8003442:	f502 02b6 	add.w	r2, r2, #5963776	@ 0x5b0000
 8003446:	f502 42d0 	add.w	r2, r2, #26624	@ 0x6800
 800344a:	f840 2b04 	str.w	r2, [r0], #4
        CB_GREEN_LUT[i] = (-((int32_t)((0.34414 / 2) * (1L << 16)))) * index;
 800344e:	fb06 f203 	mul.w	r2, r6, r3
    for (i = 0; i <= 255; i++)
 8003452:	3301      	adds	r3, #1
        CB_GREEN_LUT[i] = (-((int32_t)((0.34414 / 2) * (1L << 16)))) * index;
 8003454:	f502 1230 	add.w	r2, r2, #2883584	@ 0x2c0000
    for (i = 0; i <= 255; i++)
 8003458:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
        CB_GREEN_LUT[i] = (-((int32_t)((0.34414 / 2) * (1L << 16)))) * index;
 800345c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8003460:	f841 2b04 	str.w	r2, [r1], #4
    for (i = 0; i <= 255; i++)
 8003464:	d1d9      	bne.n	800341a <TGFX_JPEG_InitColorTables+0x1ae>
}
 8003466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else  if ((j < 8) && (i >= 8))
 800346a:	2a07      	cmp	r2, #7
                offset += 64;
 800346c:	bf8c      	ite	hi
 800346e:	f103 0040 	addhi.w	r0, r3, #64	@ 0x40
            offset =  j + (i * 8);
 8003472:	4618      	movls	r0, r3
 8003474:	e759      	b.n	800332a <TGFX_JPEG_InitColorTables+0xbe>
 8003476:	bf00      	nop
 8003478:	2000f29c 	.word	0x2000f29c
 800347c:	2001069c 	.word	0x2001069c
 8003480:	2000f69c 	.word	0x2000f69c
 8003484:	2001029c 	.word	0x2001029c
 8003488:	2000fa9c 	.word	0x2000fa9c
 800348c:	2000ee9c 	.word	0x2000ee9c
 8003490:	ffffd4d1 	.word	0xffffd4d1
 8003494:	ffffab30 	.word	0xffffab30
 8003498:	ffff94d1 	.word	0xffff94d1
 800349c:	ffffeb30 	.word	0xffffeb30
 80034a0:	2000ec9c 	.word	0x2000ec9c
 80034a4:	2000ea1c 	.word	0x2000ea1c
 80034a8:	2000e81c 	.word	0x2000e81c
 80034ac:	20011a9c 	.word	0x20011a9c
 80034b0:	2001169c 	.word	0x2001169c
 80034b4:	2001129c 	.word	0x2001129c
 80034b8:	20010e9c 	.word	0x20010e9c
 80034bc:	ffff4930 	.word	0xffff4930
 80034c0:	ffffa7e8 	.word	0xffffa7e8
 80034c4:	2000fe9c 	.word	0x2000fe9c
 80034c8:	20010a9c 	.word	0x20010a9c
 80034cc:	2000e59c 	.word	0x2000e59c
 80034d0:	2000e39c 	.word	0x2000e39c
 80034d4:	2000e11c 	.word	0x2000e11c
 80034d8:	2000df1c 	.word	0x2000df1c
 80034dc:	2000ec1c 	.word	0x2000ec1c
 80034e0:	2000e79c 	.word	0x2000e79c
 80034e4:	2000e31c 	.word	0x2000e31c
 80034e8:	2000de9c 	.word	0x2000de9c
 80034ec:	000166e8 	.word	0x000166e8
 80034f0:	0001c5a0 	.word	0x0001c5a0

080034f4 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80034f4:	4901      	ldr	r1, [pc, #4]	@ (80034fc <vApplicationIdleHook+0x8>)
 80034f6:	2000      	movs	r0, #0
 80034f8:	f00d ba30 	b.w	801095c <vTaskSetApplicationTaskTag>
 80034fc:	0800150d 	.word	0x0800150d

08003500 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003500:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(100);
 8003502:	2064      	movs	r0, #100	@ 0x64
 8003504:	f00b fc40 	bl	800ed88 <osDelay>
  for(;;)
 8003508:	e7fb      	b.n	8003502 <StartDefaultTask+0x2>
	...

0800350c <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 800350c:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800350e:	f44f 7340 	mov.w	r3, #768	@ 0x300
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003512:	b095      	sub	sp, #84	@ 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003518:	4817      	ldr	r0, [pc, #92]	@ (8003578 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800351a:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800351c:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800351e:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003520:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003522:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003524:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8003528:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 800352a:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800352c:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800352e:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003532:	f009 ff43 	bl	800d3bc <HAL_QSPI_Command>
 8003536:	b9e0      	cbnz	r0, 8003572 <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = MX25L512_SR_WREN;
 8003538:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 800353a:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800353c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003540:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003542:	480d      	ldr	r0, [pc, #52]	@ (8003578 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = MX25L512_SR_WREN;
 8003544:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8003548:	2310      	movs	r3, #16
 800354a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800354e:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003550:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003552:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8003556:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800355a:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_4_LINES;
 800355c:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800355e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003562:	f00a f82c 	bl	800d5be <HAL_QSPI_AutoPolling>
 8003566:	3800      	subs	r0, #0
 8003568:	bf18      	it	ne
 800356a:	2001      	movne	r0, #1
}
 800356c:	b015      	add	sp, #84	@ 0x54
 800356e:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8003572:	2001      	movs	r0, #1
 8003574:	e7fa      	b.n	800356c <QSPI_WriteEnable.constprop.0+0x60>
 8003576:	bf00      	nop
 8003578:	20011f6c 	.word	0x20011f6c

0800357c <SystemClock_Config>:
{
 800357c:	b510      	push	{r4, lr}
 800357e:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003580:	2210      	movs	r2, #16
 8003582:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003584:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003586:	a809      	add	r0, sp, #36	@ 0x24
 8003588:	f027 fa2a 	bl	802a9e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800358c:	2214      	movs	r2, #20
 800358e:	2100      	movs	r1, #0
 8003590:	a802      	add	r0, sp, #8
 8003592:	f027 fa25 	bl	802a9e0 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003596:	4b1e      	ldr	r3, [pc, #120]	@ (8003610 <SystemClock_Config+0x94>)
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003598:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800359a:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800359c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800359e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80035a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ae:	4b19      	ldr	r3, [pc, #100]	@ (8003614 <SystemClock_Config+0x98>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80035b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035b8:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035c8:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80035d0:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 80035d4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80035d8:	e9cd 130f 	strd	r1, r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 7;
 80035dc:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80035de:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = 7;
 80035e2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035e4:	f00a f87e 	bl	800d6e4 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80035e8:	f009 fd7c 	bl	800d0e4 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035ec:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035ee:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80035f0:	2106      	movs	r1, #6
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035f2:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80035fa:	e9cd 0304 	strd	r0, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80035fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003602:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003604:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003606:	f00a fa5f 	bl	800dac8 <HAL_RCC_ClockConfig>
}
 800360a:	b014      	add	sp, #80	@ 0x50
 800360c:	bd10      	pop	{r4, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800
 8003614:	40007000 	.word	0x40007000

08003618 <MX_I2C4_Init>:
{
 8003618:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Init.Timing = 0x00C0EAFF;
 800361a:	4a0d      	ldr	r2, [pc, #52]	@ (8003650 <MX_I2C4_Init+0x38>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800361c:	2500      	movs	r5, #0
  hi2c4.Instance = I2C4;
 800361e:	4c0d      	ldr	r4, [pc, #52]	@ (8003654 <MX_I2C4_Init+0x3c>)
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003620:	4b0d      	ldr	r3, [pc, #52]	@ (8003658 <MX_I2C4_Init+0x40>)
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003622:	4620      	mov	r0, r4
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003624:	6225      	str	r5, [r4, #32]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8003626:	e9c4 2300 	strd	r2, r3, [r4]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800362a:	2301      	movs	r3, #1
  hi2c4.Init.OwnAddress2 = 0;
 800362c:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003630:	e9c4 5302 	strd	r5, r3, [r4, #8]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003634:	e9c4 5506 	strd	r5, r5, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003638:	f008 f9e4 	bl	800ba04 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800363c:	4629      	mov	r1, r5
 800363e:	4620      	mov	r0, r4
 8003640:	f008 fc09 	bl	800be56 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8003644:	4629      	mov	r1, r5
 8003646:	4620      	mov	r0, r4
}
 8003648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800364c:	f008 bc29 	b.w	800bea2 <HAL_I2CEx_ConfigDigitalFilter>
 8003650:	40006000 	.word	0x40006000
 8003654:	20012178 	.word	0x20012178
 8003658:	00c0eaff 	.word	0x00c0eaff

0800365c <main>:
{
 800365c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003660:	b0bd      	sub	sp, #244	@ 0xf4

 /* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003662:	2210      	movs	r2, #16
 8003664:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003666:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003668:	a82e      	add	r0, sp, #184	@ 0xb8

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 800366a:	261c      	movs	r6, #28
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800366c:	f027 f9b8 	bl	802a9e0 <memset>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003670:	2503      	movs	r5, #3
  HAL_MPU_Disable();
 8003672:	f006 ffeb 	bl	800a64c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003676:	f04f 5e00 	mov.w	lr, #536870912	@ 0x20000000
 800367a:	4bcb      	ldr	r3, [pc, #812]	@ (80039a8 <main+0x34c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800367c:	a82e      	add	r0, sp, #184	@ 0xb8
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800367e:	f8ad 40b8 	strh.w	r4, [sp, #184]	@ 0xb8
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003682:	f240 1701 	movw	r7, #257	@ 0x101
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003686:	e9cd e32f 	strd	lr, r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800368a:	4bc8      	ldr	r3, [pc, #800]	@ (80039ac <main+0x350>)
 800368c:	9331      	str	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800368e:	f006 fffb 	bl	800a688 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
 8003692:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003696:	f88d 40b9 	strb.w	r4, [sp, #185]	@ 0xb9
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800369a:	2400      	movs	r4, #0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800369c:	a82e      	add	r0, sp, #184	@ 0xb8
  MPU_InitStruct.BaseAddress = 0x90000000;
 800369e:	932f      	str	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80036a0:	f88d 60c0 	strb.w	r6, [sp, #192]	@ 0xc0
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80036a4:	f88d 40c3 	strb.w	r4, [sp, #195]	@ 0xc3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80036a8:	f8ad 40c6 	strh.w	r4, [sp, #198]	@ 0xc6
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80036ac:	f006 ffec 	bl	800a688 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80036b0:	2302      	movs	r3, #2
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80036b2:	a82e      	add	r0, sp, #184	@ 0xb8
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80036b4:	f88d 50c3 	strb.w	r5, [sp, #195]	@ 0xc3
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80036b8:	f88d 30b9 	strb.w	r3, [sp, #185]	@ 0xb9
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80036bc:	2319      	movs	r3, #25
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80036be:	f8ad 70c6 	strh.w	r7, [sp, #198]	@ 0xc6
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80036c2:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80036c6:	f006 ffdf 	bl	800a688 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xC0000000;
 80036ca:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80036ce:	a82e      	add	r0, sp, #184	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80036d0:	f88d 60c0 	strb.w	r6, [sp, #192]	@ 0xc0

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80036d4:	2604      	movs	r6, #4
  MPU_InitStruct.BaseAddress = 0xC0000000;
 80036d6:	932f      	str	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80036d8:	f88d 50b9 	strb.w	r5, [sp, #185]	@ 0xb9
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80036dc:	f88d 40c3 	strb.w	r4, [sp, #195]	@ 0xc3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80036e0:	f8ad 40c6 	strh.w	r4, [sp, #198]	@ 0xc6
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80036e4:	f006 ffd0 	bl	800a688 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80036e8:	2317      	movs	r3, #23
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80036ea:	a82e      	add	r0, sp, #184	@ 0xb8
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80036ec:	f88d 60b9 	strb.w	r6, [sp, #185]	@ 0xb9
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80036f0:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80036f4:	f88d 50c3 	strb.w	r5, [sp, #195]	@ 0xc3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80036f8:	f8ad 70c6 	strh.w	r7, [sp, #198]	@ 0xc6
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80036fc:	f006 ffc4 	bl	800a688 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003700:	4630      	mov	r0, r6
 8003702:	f006 ffb1 	bl	800a668 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8003706:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800370a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800370e:	4aa8      	ldr	r2, [pc, #672]	@ (80039b0 <main+0x354>)
 8003710:	f8c2 4250 	str.w	r4, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003714:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003718:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800371c:	6953      	ldr	r3, [r2, #20]
 800371e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003722:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003724:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003728:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800372c:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003730:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003734:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003738:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800373c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003740:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003744:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003746:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800374a:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800374c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003750:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003752:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8003756:	d2f9      	bcs.n	800374c <main+0xf0>
    } while(sets-- != 0U);
 8003758:	3b20      	subs	r3, #32
 800375a:	f113 0f20 	cmn.w	r3, #32
 800375e:	d1f2      	bne.n	8003746 <main+0xea>
 8003760:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003764:	6953      	ldr	r3, [r2, #20]
 8003766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800376a:	6153      	str	r3, [r2, #20]
 800376c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003770:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003774:	4e8f      	ldr	r6, [pc, #572]	@ (80039b4 <main+0x358>)
  HAL_Init();
 8003776:	f006 fc67 	bl	800a048 <HAL_Init>
  SystemClock_Config();
 800377a:	f7ff feff 	bl	800357c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377e:	2214      	movs	r2, #20
 8003780:	2100      	movs	r1, #0
 8003782:	a82e      	add	r0, sp, #184	@ 0xb8
 8003784:	f027 f92c 	bl	802a9e0 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003788:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 800378a:	2201      	movs	r2, #1
 800378c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003790:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003794:	4888      	ldr	r0, [pc, #544]	@ (80039b8 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003796:	2501      	movs	r5, #1
 8003798:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800379c:	6333      	str	r3, [r6, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800379e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037a0:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a2:	f04f 0b03 	mov.w	fp, #3
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 80037a6:	f04f 0802 	mov.w	r8, #2
  hdsi.Init.TXEscapeCkdiv = 4;
 80037aa:	f04f 0a04 	mov.w	sl, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037ae:	f003 0310 	and.w	r3, r3, #16
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80037b2:	f44f 6980 	mov.w	r9, #1024	@ 0x400
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037b6:	9304      	str	r3, [sp, #16]
 80037b8:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ba:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	6333      	str	r3, [r6, #48]	@ 0x30
 80037c2:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	9305      	str	r3, [sp, #20]
 80037ca:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80037cc:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80037ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037d2:	6333      	str	r3, [r6, #48]	@ 0x30
 80037d4:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80037d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037da:	9306      	str	r3, [sp, #24]
 80037dc:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037de:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80037e0:	f043 0308 	orr.w	r3, r3, #8
 80037e4:	6333      	str	r3, [r6, #48]	@ 0x30
 80037e6:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	9307      	str	r3, [sp, #28]
 80037ee:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f0:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80037f2:	f043 0304 	orr.w	r3, r3, #4
 80037f6:	6333      	str	r3, [r6, #48]	@ 0x30
 80037f8:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	9308      	str	r3, [sp, #32]
 8003800:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003802:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003808:	6333      	str	r3, [r6, #48]	@ 0x30
 800380a:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800380c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003810:	9309      	str	r3, [sp, #36]	@ 0x24
 8003812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003814:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003816:	f043 0320 	orr.w	r3, r3, #32
 800381a:	6333      	str	r3, [r6, #48]	@ 0x30
 800381c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	930a      	str	r3, [sp, #40]	@ 0x28
 8003824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003826:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003828:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800382c:	6333      	str	r3, [r6, #48]	@ 0x30
 800382e:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003830:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003834:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003838:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800383a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800383e:	6333      	str	r3, [r6, #48]	@ 0x30
 8003840:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003846:	930c      	str	r3, [sp, #48]	@ 0x30
 8003848:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800384a:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6333      	str	r3, [r6, #48]	@ 0x30
 8003852:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	930d      	str	r3, [sp, #52]	@ 0x34
 800385a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 800385c:	f007 ffaa 	bl	800b7b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8003860:	2200      	movs	r2, #0
 8003862:	21c0      	movs	r1, #192	@ 0xc0
 8003864:	4855      	ldr	r0, [pc, #340]	@ (80039bc <main+0x360>)
 8003866:	f007 ffa5 	bl	800b7b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800386a:	2200      	movs	r2, #0
 800386c:	2140      	movs	r1, #64	@ 0x40
 800386e:	4854      	ldr	r0, [pc, #336]	@ (80039c0 <main+0x364>)
 8003870:	f007 ffa0 	bl	800b7b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8003874:	2200      	movs	r2, #0
 8003876:	2102      	movs	r1, #2
 8003878:	484f      	ldr	r0, [pc, #316]	@ (80039b8 <main+0x35c>)
 800387a:	f007 ff9b 	bl	800b7b4 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 800387e:	a92e      	add	r1, sp, #184	@ 0xb8
 8003880:	484d      	ldr	r0, [pc, #308]	@ (80039b8 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003882:	e9cd 752e 	strd	r7, r5, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003886:	e9cd 5530 	strd	r5, r5, [sp, #192]	@ 0xc0
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 800388a:	f007 fe0f 	bl	800b4ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 800388e:	23c0      	movs	r3, #192	@ 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003890:	a92e      	add	r1, sp, #184	@ 0xb8
 8003892:	484a      	ldr	r0, [pc, #296]	@ (80039bc <main+0x360>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003894:	e9cd 352e 	strd	r3, r5, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003898:	e9cd 4b30 	strd	r4, fp, [sp, #192]	@ 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800389c:	f007 fe06 	bl	800b4ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 80038a0:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80038a2:	a92e      	add	r1, sp, #184	@ 0xb8
 80038a4:	4846      	ldr	r0, [pc, #280]	@ (80039c0 <main+0x364>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a6:	e9cd 352e 	strd	r3, r5, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038aa:	e9cd 4b30 	strd	r4, fp, [sp, #192]	@ 0xc0
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80038ae:	f007 fdfd 	bl	800b4ac <HAL_GPIO_Init>
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 80038b2:	a92e      	add	r1, sp, #184	@ 0xb8
 80038b4:	4840      	ldr	r0, [pc, #256]	@ (80039b8 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038b6:	e9cd 852e 	strd	r8, r5, [sp, #184]	@ 0xb8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ba:	e9cd 4b30 	strd	r4, fp, [sp, #192]	@ 0xc0
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 80038be:	f007 fdf5 	bl	800b4ac <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038c2:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80038c4:	4622      	mov	r2, r4
 80038c6:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80038cc:	2038      	movs	r0, #56	@ 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038ce:	6333      	str	r3, [r6, #48]	@ 0x30
 80038d0:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  PhyTimings.ClockLaneLP2HSTime = 33;
 80038d2:	261c      	movs	r6, #28
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d8:	9303      	str	r3, [sp, #12]
 80038da:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80038dc:	f006 fe64 	bl	800a5a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80038e0:	2038      	movs	r0, #56	@ 0x38
 80038e2:	f006 fe93 	bl	800a60c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80038e6:	4622      	mov	r2, r4
 80038e8:	2105      	movs	r1, #5
 80038ea:	2039      	movs	r0, #57	@ 0x39
 80038ec:	f006 fe5c 	bl	800a5a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80038f0:	2039      	movs	r0, #57	@ 0x39
 80038f2:	f006 fe8b 	bl	800a60c <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 80038f6:	4639      	mov	r1, r7
 80038f8:	4622      	mov	r2, r4
 80038fa:	482f      	ldr	r0, [pc, #188]	@ (80039b8 <main+0x35c>)
 80038fc:	f007 ff5a 	bl	800b7b4 <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 8003900:	2014      	movs	r0, #20
 8003902:	f006 fbc5 	bl	800a090 <HAL_Delay>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003906:	4639      	mov	r1, r7
 8003908:	462a      	mov	r2, r5
 800390a:	482b      	ldr	r0, [pc, #172]	@ (80039b8 <main+0x35c>)
 800390c:	f007 ff52 	bl	800b7b4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8003910:	200a      	movs	r0, #10
 8003912:	f006 fbbd 	bl	800a090 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8003916:	2224      	movs	r2, #36	@ 0x24
 8003918:	4621      	mov	r1, r4
 800391a:	a817      	add	r0, sp, #92	@ 0x5c
  DSI_PLLInitTypeDef PLLInit = {0};
 800391c:	9410      	str	r4, [sp, #64]	@ 0x40
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800391e:	f027 f85f 	bl	802a9e0 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8003922:	2218      	movs	r2, #24
 8003924:	4621      	mov	r1, r4
 8003926:	a811      	add	r0, sp, #68	@ 0x44
  hdsi.Instance = DSI;
 8003928:	4f26      	ldr	r7, [pc, #152]	@ (80039c4 <main+0x368>)
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800392a:	f027 f859 	bl	802a9e0 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 800392e:	2234      	movs	r2, #52	@ 0x34
 8003930:	4621      	mov	r1, r4
 8003932:	a82e      	add	r0, sp, #184	@ 0xb8
 8003934:	f027 f854 	bl	802a9e0 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8003938:	222c      	movs	r2, #44	@ 0x2c
 800393a:	4621      	mov	r1, r4
 800393c:	a820      	add	r0, sp, #128	@ 0x80
 800393e:	f027 f84f 	bl	802a9e0 <memset>
  hdsi.Instance = DSI;
 8003942:	4b21      	ldr	r3, [pc, #132]	@ (80039c8 <main+0x36c>)
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8003944:	2064      	movs	r0, #100	@ 0x64
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8003946:	a90e      	add	r1, sp, #56	@ 0x38
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8003948:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800394c:	2305      	movs	r3, #5
 800394e:	e9cd 030e 	strd	r0, r3, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8003952:	4638      	mov	r0, r7
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8003954:	e9c7 a502 	strd	sl, r5, [r7, #8]
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8003958:	f007 fa5c 	bl	800ae14 <HAL_DSI_Init>
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800395c:	a917      	add	r1, sp, #92	@ 0x5c
 800395e:	4638      	mov	r0, r7
  HostTimeouts.BTATimeout = 0;
 8003960:	941f      	str	r4, [sp, #124]	@ 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8003962:	e9cd 5417 	strd	r5, r4, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8003966:	e9cd 4419 	strd	r4, r4, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800396a:	e9cd 441b 	strd	r4, r4, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 800396e:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8003972:	f007 fc7b 	bl	800b26c <HAL_DSI_ConfigHostTimeouts>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8003976:	2321      	movs	r3, #33	@ 0x21
  PhyTimings.DataLaneLP2HSTime = 25;
 8003978:	f04f 0c0f 	mov.w	ip, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800397c:	a911      	add	r1, sp, #68	@ 0x44
 800397e:	4638      	mov	r0, r7
  PhyTimings.ClockLaneLP2HSTime = 33;
 8003980:	e9cd 6311 	strd	r6, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8003984:	2319      	movs	r3, #25
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8003986:	f44f 2600 	mov.w	r6, #524288	@ 0x80000
  PhyTimings.DataLaneLP2HSTime = 25;
 800398a:	e9cd c313 	strd	ip, r3, [sp, #76]	@ 0x4c
  PhyTimings.StopWaitTime = 0;
 800398e:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8003992:	f007 fc2e 	bl	800b1f2 <HAL_DSI_ConfigPhyTimer>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8003996:	4651      	mov	r1, sl
 8003998:	4638      	mov	r0, r7
 800399a:	f007 fc19 	bl	800b1d0 <HAL_DSI_ConfigFlowControl>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800399e:	f242 7110 	movw	r1, #10000	@ 0x2710
 80039a2:	4638      	mov	r0, r7
 80039a4:	e012      	b.n	80039cc <main+0x370>
 80039a6:	bf00      	nop
 80039a8:	03000012 	.word	0x03000012
 80039ac:	01010001 	.word	0x01010001
 80039b0:	e000ed00 	.word	0xe000ed00
 80039b4:	40023800 	.word	0x40023800
 80039b8:	40022400 	.word	0x40022400
 80039bc:	40020800 	.word	0x40020800
 80039c0:	40021400 	.word	0x40021400
 80039c4:	200121cc 	.word	0x200121cc
 80039c8:	40016c00 	.word	0x40016c00
 80039cc:	f007 fd58 	bl	800b480 <HAL_DSI_SetLowPowerRXFilter>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_OVF) != HAL_OK)
 80039d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039d4:	4638      	mov	r0, r7
 80039d6:	f007 f9ba 	bl	800ad4e <HAL_DSI_ConfigErrorMonitor>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80039da:	f44f 7e80 	mov.w	lr, #256	@ 0x100
 80039de:	f44f 7300 	mov.w	r3, #512	@ 0x200
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 80039e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 80039e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 80039ea:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 80039ee:	f8cd 80e8 	str.w	r8, [sp, #232]	@ 0xe8
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80039f2:	e9cd e32e 	strd	lr, r3, [sp, #184]	@ 0xb8
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80039f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80039fa:	e9cd 9330 	strd	r9, r3, [sp, #192]	@ 0xc0
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 80039fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8003a02:	f04f 0910 	mov.w	r9, #16
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8003a06:	e9cd 2332 	strd	r2, r3, [sp, #200]	@ 0xc8
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8003a0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a0e:	e9cd 1334 	strd	r1, r3, [sp, #208]	@ 0xd0
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8003a12:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8003a16:	a92e      	add	r1, sp, #184	@ 0xb8
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8003a18:	e9cd 0336 	strd	r0, r3, [sp, #216]	@ 0xd8
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8003a1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8003a20:	4638      	mov	r0, r7
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8003a22:	e9cd 6338 	strd	r6, r3, [sp, #224]	@ 0xe0
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8003a26:	f007 fb9f 	bl	800b168 <HAL_DSI_ConfigCommand>
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8003a2a:	23c8      	movs	r3, #200	@ 0xc8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8003a2c:	a920      	add	r1, sp, #128	@ 0x80
 8003a2e:	4638      	mov	r0, r7
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8003a30:	952a      	str	r5, [sp, #168]	@ 0xa8
  hltdc.Instance = LTDC;
 8003a32:	4ec6      	ldr	r6, [pc, #792]	@ (8003d4c <main+0x6f0>)
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8003a34:	e9cd 3922 	strd	r3, r9, [sp, #136]	@ 0x88
  CmdCfg.ColorCoding = DSI_RGB565;
 8003a38:	e9cd 4420 	strd	r4, r4, [sp, #128]	@ 0x80
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8003a3c:	e9cd 4a24 	strd	r4, sl, [sp, #144]	@ 0x90
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8003a40:	e9cd 8426 	strd	r8, r4, [sp, #152]	@ 0x98
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8003a44:	e9cd 4428 	strd	r4, r4, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8003a48:	f007 fb1c 	bl	800b084 <HAL_DSI_ConfigAdaptedCommandMode>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	4638      	mov	r0, r7
 8003a50:	f007 fb07 	bl	800b062 <HAL_DSI_SetGenericVCID>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003a54:	4621      	mov	r1, r4
 8003a56:	2234      	movs	r2, #52	@ 0x34
 8003a58:	a820      	add	r0, sp, #128	@ 0x80
 8003a5a:	f026 ffc1 	bl	802a9e0 <memset>
  hltdc.Instance = LTDC;
 8003a5e:	4abc      	ldr	r2, [pc, #752]	@ (8003d50 <main+0x6f4>)
  hltdc.Init.AccumulatedActiveH = 482;
 8003a60:	f04f 0cca 	mov.w	ip, #202	@ 0xca
  hltdc.Init.TotalHeigh = 483;
 8003a64:	f04f 0ecb 	mov.w	lr, #203	@ 0xcb
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003a68:	4630      	mov	r0, r6
  hltdc.Init.AccumulatedVBP = 2;
 8003a6a:	f8c6 8020 	str.w	r8, [r6, #32]
  hltdc.Init.Backcolor.Blue = 0;
 8003a6e:	86b4      	strh	r4, [r6, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8003a70:	f886 4036 	strb.w	r4, [r6, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003a74:	e9c6 2400 	strd	r2, r4, [r6]
  hltdc.Init.AccumulatedActiveH = 482;
 8003a78:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8003a7c:	e9c6 c209 	strd	ip, r2, [r6, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8003a80:	f240 12e3 	movw	r2, #483	@ 0x1e3
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003a84:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.TotalHeigh = 483;
 8003a88:	e9c6 e20b 	strd	lr, r2, [r6, #44]	@ 0x2c
  hltdc.Init.HorizontalSync = 1;
 8003a8c:	e9c6 4504 	strd	r4, r5, [r6, #16]
  hltdc.Init.AccumulatedHBP = 2;
 8003a90:	e9c6 5806 	strd	r5, r8, [r6, #24]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003a94:	f009 f9f0 	bl	800ce78 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8003a98:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003a9a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  pLayerCfg.WindowX1 = 200;
 8003a9e:	23c8      	movs	r3, #200	@ 0xc8
  pLayerCfg.WindowY1 = 480;
 8003aa0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
  pLayerCfg.WindowX0 = 0;
 8003aa4:	9420      	str	r4, [sp, #128]	@ 0x80
  pLayerCfg.Backcolor.Blue = 0;
 8003aa6:	f8ad 40b0 	strh.w	r4, [sp, #176]	@ 0xb0
  pLayerCfg.ImageHeight = 480;
 8003aaa:	922b      	str	r2, [sp, #172]	@ 0xac
  pLayerCfg.Backcolor.Red = 0;
 8003aac:	f88d 40b2 	strb.w	r4, [sp, #178]	@ 0xb2
  pLayerCfg.Alpha0 = 0;
 8003ab0:	e9cd 1425 	strd	r1, r4, [sp, #148]	@ 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003ab4:	2105      	movs	r1, #5
 8003ab6:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xC0000000;
 8003aba:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003abe:	4630      	mov	r0, r6
  pLayerCfg.ImageWidth = 200;
 8003ac0:	e9cd 1329 	strd	r1, r3, [sp, #164]	@ 0xa4
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003ac4:	e9cd 2823 	strd	r2, r8, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003ac8:	a920      	add	r1, sp, #128	@ 0x80
 8003aca:	4622      	mov	r2, r4
  pLayerCfg.WindowY0 = 0;
 8003acc:	e9cd 3421 	strd	r3, r4, [sp, #132]	@ 0x84
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003ad0:	f009 fa9e 	bl	800d010 <HAL_LTDC_ConfigLayer>
  __HAL_LTDC_DISABLE(&hltdc);
 8003ad4:	6832      	ldr	r2, [r6, #0]
  HAL_DSI_Start(&hdsi);
 8003ad6:	4638      	mov	r0, r7
  __HAL_LTDC_DISABLE(&hltdc);
 8003ad8:	6993      	ldr	r3, [r2, #24]
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8003ae0:	f007 fc2a 	bl	800b338 <HAL_DSI_Start>
  OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	f006 f846 	bl	8009b78 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8003aec:	2328      	movs	r3, #40	@ 0x28
 8003aee:	2215      	movs	r2, #21
 8003af0:	4621      	mov	r1, r4
 8003af2:	4638      	mov	r0, r7
 8003af4:	9400      	str	r4, [sp, #0]
 8003af6:	f007 fc52 	bl	800b39e <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8003afa:	a92e      	add	r1, sp, #184	@ 0xb8
 8003afc:	4638      	mov	r0, r7
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8003afe:	9438      	str	r4, [sp, #224]	@ 0xe0
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003b00:	2720      	movs	r7, #32
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8003b02:	e9cd 442e 	strd	r4, r4, [sp, #184]	@ 0xb8
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8003b06:	e9cd 4430 	strd	r4, r4, [sp, #192]	@ 0xc0
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8003b0a:	e9cd 4432 	strd	r4, r4, [sp, #200]	@ 0xc8
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8003b0e:	e9cd 4434 	strd	r4, r4, [sp, #208]	@ 0xd0
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8003b12:	e9cd 4436 	strd	r4, r4, [sp, #216]	@ 0xd8
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8003b16:	f007 fb27 	bl	800b168 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8003b1a:	4622      	mov	r2, r4
 8003b1c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8003b20:	4630      	mov	r0, r6
 8003b22:	f009 faa3 	bl	800d06c <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8003b26:	6832      	ldr	r2, [r6, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003b28:	4e8a      	ldr	r6, [pc, #552]	@ (8003d54 <main+0x6f8>)
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003b2a:	f44f 6c00 	mov.w	ip, #2048	@ 0x800
  __HAL_LTDC_ENABLE(&hltdc);
 8003b2e:	6993      	ldr	r3, [r2, #24]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003b30:	a92e      	add	r1, sp, #184	@ 0xb8
 8003b32:	4630      	mov	r0, r6
  __HAL_LTDC_ENABLE(&hltdc);
 8003b34:	432b      	orrs	r3, r5
 8003b36:	6193      	str	r3, [r2, #24]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003b38:	4b87      	ldr	r3, [pc, #540]	@ (8003d58 <main+0x6fc>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8003b3a:	62b4      	str	r4, [r6, #40]	@ 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8003b3c:	f8cd 80b8 	str.w	r8, [sp, #184]	@ 0xb8
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003b40:	e9c6 3400 	strd	r3, r4, [r6]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003b44:	2340      	movs	r3, #64	@ 0x40
 8003b46:	e9c6 7304 	strd	r7, r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8003b4a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8003b4e:	f44f 7740 	mov.w	r7, #768	@ 0x300
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003b52:	e9c6 3406 	strd	r3, r4, [r6, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003b56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b5a:	e9c6 c308 	strd	ip, r3, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003b5e:	2307      	movs	r3, #7
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003b60:	e9c6 4a02 	strd	r4, sl, [r6, #8]
  SdramTiming.SelfRefreshTime = 4;
 8003b64:	e9cd 3a2f 	strd	r3, sl, [sp, #188]	@ 0xbc
  SdramTiming.WriteRecoveryTime = 2;
 8003b68:	e9cd 3831 	strd	r3, r8, [sp, #196]	@ 0xc4
  SdramTiming.RCDDelay = 3;
 8003b6c:	e9cd 8b33 	strd	r8, fp, [sp, #204]	@ 0xcc
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003b70:	f00a fb24 	bl	800e1bc <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003b74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b78:	a920      	add	r1, sp, #128	@ 0x80
 8003b7a:	4630      	mov	r0, r6
 __IO uint32_t tmpmrd = 0;
 8003b7c:	9411      	str	r4, [sp, #68]	@ 0x44
    Command->CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8003b7e:	e9cd 5920 	strd	r5, r9, [sp, #128]	@ 0x80
    Command->ModeRegisterDefinition = 0;
 8003b82:	e9cd 5422 	strd	r5, r4, [sp, #136]	@ 0x88
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003b86:	f00a fb39 	bl	800e1fc <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	f006 fa80 	bl	800a090 <HAL_Delay>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003b90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b94:	a920      	add	r1, sp, #128	@ 0x80
 8003b96:	4630      	mov	r0, r6
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003b98:	e9cd 8920 	strd	r8, r9, [sp, #128]	@ 0x80
    Command->ModeRegisterDefinition = 0;
 8003b9c:	e9cd 5422 	strd	r5, r4, [sp, #136]	@ 0x88
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003ba0:	f00a fb2c 	bl	800e1fc <HAL_SDRAM_SendCommand>
    Command->AutoRefreshNumber      = 8;
 8003ba4:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003ba6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003baa:	a920      	add	r1, sp, #128	@ 0x80
 8003bac:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = 0;
 8003bae:	e9cd 3422 	strd	r3, r4, [sp, #136]	@ 0x88
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003bb2:	e9cd b920 	strd	fp, r9, [sp, #128]	@ 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003bb6:	f00a fb21 	bl	800e1fc <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 8003bba:	f44f 730c 	mov.w	r3, #560	@ 0x230
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003bbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bc2:	a920      	add	r1, sp, #128	@ 0x80
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 8003bc4:	9311      	str	r3, [sp, #68]	@ 0x44
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003bc6:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = tmpmrd;
 8003bc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
    Command->AutoRefreshNumber      = 1;
 8003bca:	9522      	str	r5, [sp, #136]	@ 0x88
    Command->ModeRegisterDefinition = tmpmrd;
 8003bcc:	9323      	str	r3, [sp, #140]	@ 0x8c
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003bce:	e9cd a920 	strd	sl, r9, [sp, #128]	@ 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003bd2:	f00a fb13 	bl	800e1fc <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8003bd6:	f240 712a 	movw	r1, #1834	@ 0x72a
 8003bda:	4630      	mov	r0, r6
  hqspi.Instance = QUADSPI;
 8003bdc:	4e5f      	ldr	r6, [pc, #380]	@ (8003d5c <main+0x700>)
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8003bde:	f00a fb2c 	bl	800e23a <HAL_SDRAM_ProgramRefreshRate>
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8003be2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003be6:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003bea:	4630      	mov	r0, r6
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8003bec:	601a      	str	r2, [r3, #0]
  hqspi.Instance = QUADSPI;
 8003bee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8003bf2:	6234      	str	r4, [r6, #32]
  hqspi.Init.ClockPrescaler = 1;
 8003bf4:	e9c6 3500 	strd	r3, r5, [r6]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8003bf8:	2319      	movs	r3, #25
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003bfa:	e9c6 9902 	strd	r9, r9, [r6, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8003bfe:	e9c6 3704 	strd	r3, r7, [r6, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8003c02:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003c06:	f009 fb87 	bl	800d318 <HAL_QSPI_Init>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003c0a:	9734      	str	r7, [sp, #208]	@ 0xd0
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003c0c:	2766      	movs	r7, #102	@ 0x66
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c12:	a92e      	add	r1, sp, #184	@ 0xb8
 8003c14:	4630      	mov	r0, r6
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003c16:	972e      	str	r7, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_NONE;
 8003c18:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 8003c1a:	9433      	str	r4, [sp, #204]	@ 0xcc
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003c1c:	943b      	str	r4, [sp, #236]	@ 0xec
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003c1e:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003c22:	e9cd 4439 	strd	r4, r4, [sp, #228]	@ 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c26:	f009 fbc9 	bl	800d3bc <HAL_QSPI_Command>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	f040 80bb 	bne.w	8003da6 <main+0x74a>
  s_command.Instruction = RESET_MEMORY_CMD;
 8003c30:	2499      	movs	r4, #153	@ 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c36:	a92e      	add	r1, sp, #184	@ 0xb8
 8003c38:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 8003c3a:	942e      	str	r4, [sp, #184]	@ 0xb8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c3c:	f009 fbbe 	bl	800d3bc <HAL_QSPI_Command>
 8003c40:	2800      	cmp	r0, #0
 8003c42:	f040 80b0 	bne.w	8003da6 <main+0x74a>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003c46:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4e:	a92e      	add	r1, sp, #184	@ 0xb8
 8003c50:	4630      	mov	r0, r6
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003c52:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003c54:	972e      	str	r7, [sp, #184]	@ 0xb8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c56:	f009 fbb1 	bl	800d3bc <HAL_QSPI_Command>
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	f040 80a3 	bne.w	8003da6 <main+0x74a>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c64:	a92e      	add	r1, sp, #184	@ 0xb8
 8003c66:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 8003c68:	942e      	str	r4, [sp, #184]	@ 0xb8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c6a:	f009 fba7 	bl	800d3bc <HAL_QSPI_Command>
 8003c6e:	4604      	mov	r4, r0
 8003c70:	2800      	cmp	r0, #0
 8003c72:	f040 8098 	bne.w	8003da6 <main+0x74a>
  HAL_Delay( 1000 );
 8003c76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c7a:	f006 fa09 	bl	800a090 <HAL_Delay>
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003c7e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c82:	aa20      	add	r2, sp, #128	@ 0x80
 8003c84:	a92e      	add	r1, sp, #184	@ 0xb8
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003c86:	9325      	str	r3, [sp, #148]	@ 0x94
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003c88:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c8c:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 8003c8e:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003c92:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction     = READ_STATUS_REG_CMD;
 8003c94:	2305      	movs	r3, #5
 8003c96:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8003c98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c9c:	9337      	str	r3, [sp, #220]	@ 0xdc
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003c9e:	f241 3388 	movw	r3, #5000	@ 0x1388
  s_config.Mask            = MX25L512_SR_WIP;
 8003ca2:	e9cd 4520 	strd	r4, r5, [sp, #128]	@ 0x80
  s_config.StatusBytesSize = 1;
 8003ca6:	e9cd 5423 	strd	r5, r4, [sp, #140]	@ 0x8c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003caa:	f009 fc88 	bl	800d5be <HAL_QSPI_AutoPolling>
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d179      	bne.n	8003da6 <main+0x74a>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003cb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
  s_command.DummyCycles       = 0;
 8003cb6:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cbc:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003cbe:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003cc0:	2305      	movs	r3, #5
 8003cc2:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003cc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003cc8:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003ccc:	e9cd 5038 	strd	r5, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003cd0:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cd4:	4630      	mov	r0, r6
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003cd6:	9337      	str	r3, [sp, #220]	@ 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cd8:	f009 fb70 	bl	800d3bc <HAL_QSPI_Command>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d162      	bne.n	8003da6 <main+0x74a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce4:	a917      	add	r1, sp, #92	@ 0x5c
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	f009 fc09 	bl	800d4fe <HAL_QSPI_Receive>
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d15a      	bne.n	8003da6 <main+0x74a>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003cf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  s_command.DataMode          = QSPI_DATA_NONE;
 8003cf4:	9037      	str	r0, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 8003cf6:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003cfc:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003cfe:	2306      	movs	r3, #6
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003d00:	903b      	str	r0, [sp, #236]	@ 0xec
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d02:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003d04:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d06:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003d0a:	e9cd 0039 	strd	r0, r0, [sp, #228]	@ 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d0e:	4630      	mov	r0, r6
 8003d10:	f009 fb54 	bl	800d3bc <HAL_QSPI_Command>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	d146      	bne.n	8003da6 <main+0x74a>
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003d18:	2300      	movs	r3, #0
  s_config.StatusBytesSize = 1;
 8003d1a:	462c      	mov	r4, r5
 8003d1c:	9523      	str	r5, [sp, #140]	@ 0x8c
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003d1e:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003d22:	9324      	str	r3, [sp, #144]	@ 0x90
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003d24:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d28:	aa20      	add	r2, sp, #128	@ 0x80
 8003d2a:	a92e      	add	r1, sp, #184	@ 0xb8
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003d2c:	9325      	str	r3, [sp, #148]	@ 0x94
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003d2e:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d30:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 8003d32:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003d36:	932e      	str	r3, [sp, #184]	@ 0xb8
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d38:	f241 3388 	movw	r3, #5000	@ 0x1388
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003d3c:	9537      	str	r5, [sp, #220]	@ 0xdc
  s_config.Mask            = MX25L512_SR_WREN;
 8003d3e:	e9cd 8820 	strd	r8, r8, [sp, #128]	@ 0x80
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d42:	f009 fc3c 	bl	800d5be <HAL_QSPI_AutoPolling>
 8003d46:	bb70      	cbnz	r0, 8003da6 <main+0x74a>
 8003d48:	e00a      	b.n	8003d60 <main+0x704>
 8003d4a:	bf00      	nop
 8003d4c:	20011fb8 	.word	0x20011fb8
 8003d50:	40016800 	.word	0x40016800
 8003d54:	20011eec 	.word	0x20011eec
 8003d58:	a0000140 	.word	0xa0000140
 8003d5c:	20011f6c 	.word	0x20011f6c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003d60:	f44f 7380 	mov.w	r3, #256	@ 0x100
  s_command.DummyCycles       = 0;
 8003d64:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6a:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003d6c:	9334      	str	r3, [sp, #208]	@ 0xd0
  reg |= MX25L512_SR_QUADEN;
 8003d6e:	f89d 305c 	ldrb.w	r3, [sp, #92]	@ 0x5c
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8003d72:	942e      	str	r4, [sp, #184]	@ 0xb8
  reg |= MX25L512_SR_QUADEN;
 8003d74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003d78:	9537      	str	r5, [sp, #220]	@ 0xdc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d7a:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003d7e:	e9cd 4038 	strd	r4, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003d82:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d86:	4630      	mov	r0, r6
  reg |= MX25L512_SR_QUADEN;
 8003d88:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d8c:	f009 fb16 	bl	800d3bc <HAL_QSPI_Command>
 8003d90:	b948      	cbnz	r0, 8003da6 <main+0x74a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d96:	a917      	add	r1, sp, #92	@ 0x5c
 8003d98:	4630      	mov	r0, r6
 8003d9a:	f009 fb54 	bl	800d446 <HAL_QSPI_Transmit>
 8003d9e:	b910      	cbnz	r0, 8003da6 <main+0x74a>
  HAL_Delay( 40 );
 8003da0:	2028      	movs	r0, #40	@ 0x28
 8003da2:	f006 f975 	bl	800a090 <HAL_Delay>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003da6:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dae:	a92e      	add	r1, sp, #184	@ 0xb8
 8003db0:	48b6      	ldr	r0, [pc, #728]	@ (800408c <main+0xa30>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003db2:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = ENTER_QUAD_CMD;
 8003db4:	2335      	movs	r3, #53	@ 0x35
 8003db6:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003db8:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003dba:	e9cd 3335 	strd	r3, r3, [sp, #212]	@ 0xd4
  s_command.DataMode          = QSPI_DATA_NONE;
 8003dbe:	9337      	str	r3, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 8003dc0:	9333      	str	r3, [sp, #204]	@ 0xcc
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003dc2:	933b      	str	r3, [sp, #236]	@ 0xec
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003dc4:	e9cd 3339 	strd	r3, r3, [sp, #228]	@ 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003dc8:	f009 faf8 	bl	800d3bc <HAL_QSPI_Command>
 8003dcc:	b9d0      	cbnz	r0, 8003e04 <main+0x7a8>
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 8003dce:	2240      	movs	r2, #64	@ 0x40
 8003dd0:	2341      	movs	r3, #65	@ 0x41
  s_config.Interval        = 0x10;
 8003dd2:	2101      	movs	r1, #1
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003dd4:	9024      	str	r0, [sp, #144]	@ 0x90
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003dd6:	48ad      	ldr	r0, [pc, #692]	@ (800408c <main+0xa30>)
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 8003dd8:	e9cd 2320 	strd	r2, r3, [sp, #128]	@ 0x80
  s_config.Interval        = 0x10;
 8003ddc:	2310      	movs	r3, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003dde:	aa20      	add	r2, sp, #128	@ 0x80
  s_config.Interval        = 0x10;
 8003de0:	e9cd 3122 	strd	r3, r1, [sp, #136]	@ 0x88
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003de4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003de8:	a92e      	add	r1, sp, #184	@ 0xb8
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003dea:	9325      	str	r3, [sp, #148]	@ 0x94
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003dec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003df0:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003df2:	2305      	movs	r3, #5
 8003df4:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003df6:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8003dfa:	9337      	str	r3, [sp, #220]	@ 0xdc
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003dfc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e00:	f009 fbdd 	bl	800d5be <HAL_QSPI_AutoPolling>
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8003e04:	23b7      	movs	r3, #183	@ 0xb7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003e06:	f44f 7440 	mov.w	r4, #768	@ 0x300
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8003e0a:	9320      	str	r3, [sp, #128]	@ 0x80
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003e0c:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003e0e:	9426      	str	r4, [sp, #152]	@ 0x98
  s_command.DataMode          = QSPI_DATA_NONE;
 8003e10:	9329      	str	r3, [sp, #164]	@ 0xa4
  s_command.DummyCycles       = 0;
 8003e12:	9325      	str	r3, [sp, #148]	@ 0x94
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003e14:	932d      	str	r3, [sp, #180]	@ 0xb4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003e16:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003e1a:	e9cd 332b 	strd	r3, r3, [sp, #172]	@ 0xac
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003e1e:	f7ff fb75 	bl	800350c <QSPI_WriteEnable.constprop.0>
 8003e22:	bb18      	cbnz	r0, 8003e6c <main+0x810>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e28:	a920      	add	r1, sp, #128	@ 0x80
 8003e2a:	4898      	ldr	r0, [pc, #608]	@ (800408c <main+0xa30>)
 8003e2c:	f009 fac6 	bl	800d3bc <HAL_QSPI_Command>
 8003e30:	b9e0      	cbnz	r0, 8003e6c <main+0x810>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003e32:	2305      	movs	r3, #5
  s_command.DummyCycles       = 0;
 8003e34:	9033      	str	r0, [sp, #204]	@ 0xcc
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003e36:	903b      	str	r0, [sp, #236]	@ 0xec
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003e38:	aa17      	add	r2, sp, #92	@ 0x5c
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003e3a:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003e3c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
  s_config.Match           = 0;
 8003e40:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003e42:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003e44:	9337      	str	r3, [sp, #220]	@ 0xdc
  s_config.Mask            = MX25L512_SR_WIP;
 8003e46:	2301      	movs	r3, #1
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003e48:	9434      	str	r4, [sp, #208]	@ 0xd0
  s_config.Mask            = MX25L512_SR_WIP;
 8003e4a:	9318      	str	r3, [sp, #96]	@ 0x60
  s_config.StatusBytesSize = 1;
 8003e4c:	e9cd 301a 	strd	r3, r0, [sp, #104]	@ 0x68
  s_config.Interval        = 0x10;
 8003e50:	2310      	movs	r3, #16
 8003e52:	9319      	str	r3, [sp, #100]	@ 0x64
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003e54:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003e58:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003e5c:	e9cd 0039 	strd	r0, r0, [sp, #228]	@ 0xe4
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003e60:	931c      	str	r3, [sp, #112]	@ 0x70
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003e62:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e66:	4889      	ldr	r0, [pc, #548]	@ (800408c <main+0xa30>)
 8003e68:	f009 fba9 	bl	800d5be <HAL_QSPI_AutoPolling>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003e6c:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003e6e:	f44f 7640 	mov.w	r6, #768	@ 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003e72:	f04f 7440 	mov.w	r4, #50331648	@ 0x3000000
  s_command.NbData            = 1;
 8003e76:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003e78:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003e7a:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e80:	a92e      	add	r1, sp, #184	@ 0xb8
 8003e82:	4882      	ldr	r0, [pc, #520]	@ (800408c <main+0xa30>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003e84:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003e86:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 8003e88:	9333      	str	r3, [sp, #204]	@ 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003e8a:	e9cd 3335 	strd	r3, r3, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003e8e:	e9cd 5338 	strd	r5, r3, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003e92:	e9cd 333a 	strd	r3, r3, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e96:	f009 fa91 	bl	800d3bc <HAL_QSPI_Command>
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	d14f      	bne.n	8003f3e <main+0x8e2>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea2:	a920      	add	r1, sp, #128	@ 0x80
 8003ea4:	4879      	ldr	r0, [pc, #484]	@ (800408c <main+0xa30>)
 8003ea6:	f009 fb2a 	bl	800d4fe <HAL_QSPI_Receive>
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	d147      	bne.n	8003f3e <main+0x8e2>
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003eae:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 8003eb0:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb6:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003eb8:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003eba:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003ebc:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003ebe:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003ec2:	e9cd 5038 	strd	r5, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003ec6:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003eca:	4870      	ldr	r0, [pc, #448]	@ (800408c <main+0xa30>)
 8003ecc:	f009 fa76 	bl	800d3bc <HAL_QSPI_Command>
 8003ed0:	bba8      	cbnz	r0, 8003f3e <main+0x8e2>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed6:	f10d 0181 	add.w	r1, sp, #129	@ 0x81
 8003eda:	486c      	ldr	r0, [pc, #432]	@ (800408c <main+0xa30>)
 8003edc:	f009 fb0f 	bl	800d4fe <HAL_QSPI_Receive>
 8003ee0:	bb68      	cbnz	r0, 8003f3e <main+0x8e2>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003ee2:	f7ff fb13 	bl	800350c <QSPI_WriteEnable.constprop.0>
 8003ee6:	bb50      	cbnz	r0, 8003f3e <main+0x8e2>
  s_command.NbData            = 2;
 8003ee8:	2302      	movs	r3, #2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	22c0      	movs	r2, #192	@ 0xc0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003eec:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8003eee:	952e      	str	r5, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003ef0:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 8003ef2:	9033      	str	r0, [sp, #204]	@ 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003ef4:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003ef8:	e9cd 3038 	strd	r3, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003efc:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
 8003f00:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8003f04:	2103      	movs	r1, #3
 8003f06:	f89d 3081 	ldrb.w	r3, [sp, #129]	@ 0x81
 8003f0a:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f0e:	485f      	ldr	r0, [pc, #380]	@ (800408c <main+0xa30>)
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8003f10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f14:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f18:	a92e      	add	r1, sp, #184	@ 0xb8
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8003f1a:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8003f20:	f88d 3081 	strb.w	r3, [sp, #129]	@ 0x81
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f24:	f009 fa4a 	bl	800d3bc <HAL_QSPI_Command>
 8003f28:	b948      	cbnz	r0, 8003f3e <main+0x8e2>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f2e:	a920      	add	r1, sp, #128	@ 0x80
 8003f30:	4856      	ldr	r0, [pc, #344]	@ (800408c <main+0xa30>)
 8003f32:	f009 fa88 	bl	800d446 <HAL_QSPI_Transmit>
 8003f36:	b910      	cbnz	r0, 8003f3e <main+0x8e2>
  HAL_Delay( 40 );
 8003f38:	2028      	movs	r0, #40	@ 0x28
 8003f3a:	f006 f8a9 	bl	800a090 <HAL_Delay>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003f3e:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003f40:	f44f 7640 	mov.w	r6, #768	@ 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003f44:	f04f 7440 	mov.w	r4, #50331648	@ 0x3000000
  s_command.NbData            = 1;
 8003f48:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003f4a:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003f4c:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f52:	a92e      	add	r1, sp, #184	@ 0xb8
 8003f54:	484d      	ldr	r0, [pc, #308]	@ (800408c <main+0xa30>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003f56:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003f58:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 8003f5a:	9333      	str	r3, [sp, #204]	@ 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003f5c:	e9cd 3335 	strd	r3, r3, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003f60:	e9cd 5338 	strd	r5, r3, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003f64:	e9cd 333a 	strd	r3, r3, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f68:	f009 fa28 	bl	800d3bc <HAL_QSPI_Command>
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	d14b      	bne.n	8004008 <main+0x9ac>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f74:	a920      	add	r1, sp, #128	@ 0x80
 8003f76:	4845      	ldr	r0, [pc, #276]	@ (800408c <main+0xa30>)
 8003f78:	f009 fac1 	bl	800d4fe <HAL_QSPI_Receive>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d143      	bne.n	8004008 <main+0x9ac>
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003f80:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 8003f82:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f88:	a92e      	add	r1, sp, #184	@ 0xb8
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003f8a:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003f8c:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003f8e:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003f90:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003f94:	e9cd 5038 	strd	r5, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003f98:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003f9c:	483b      	ldr	r0, [pc, #236]	@ (800408c <main+0xa30>)
 8003f9e:	f009 fa0d 	bl	800d3bc <HAL_QSPI_Command>
 8003fa2:	bb88      	cbnz	r0, 8004008 <main+0x9ac>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa8:	f10d 0181 	add.w	r1, sp, #129	@ 0x81
 8003fac:	4837      	ldr	r0, [pc, #220]	@ (800408c <main+0xa30>)
 8003fae:	f009 faa6 	bl	800d4fe <HAL_QSPI_Receive>
 8003fb2:	bb48      	cbnz	r0, 8004008 <main+0x9ac>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003fb4:	f7ff faaa 	bl	800350c <QSPI_WriteEnable.constprop.0>
 8003fb8:	bb30      	cbnz	r0, 8004008 <main+0x9ac>
  s_command.NbData            = 2;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	2207      	movs	r2, #7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003fbe:	9634      	str	r6, [sp, #208]	@ 0xd0
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8003fc0:	952e      	str	r5, [sp, #184]	@ 0xb8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003fc2:	9437      	str	r4, [sp, #220]	@ 0xdc
  s_command.DummyCycles       = 0;
 8003fc4:	9033      	str	r0, [sp, #204]	@ 0xcc
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003fc6:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003fca:	e9cd 3038 	strd	r3, r0, [sp, #224]	@ 0xe0
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003fce:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
 8003fd2:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003fd6:	2106      	movs	r1, #6
 8003fd8:	f89d 3081 	ldrb.w	r3, [sp, #129]	@ 0x81
 8003fdc:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fe0:	482a      	ldr	r0, [pc, #168]	@ (800408c <main+0xa30>)
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003fe2:	f023 0307 	bic.w	r3, r3, #7
 8003fe6:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fea:	a92e      	add	r1, sp, #184	@ 0xb8
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003fec:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fee:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003ff2:	f88d 3081 	strb.w	r3, [sp, #129]	@ 0x81
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ff6:	f009 f9e1 	bl	800d3bc <HAL_QSPI_Command>
 8003ffa:	b928      	cbnz	r0, 8004008 <main+0x9ac>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004000:	a920      	add	r1, sp, #128	@ 0x80
 8004002:	4822      	ldr	r0, [pc, #136]	@ (800408c <main+0xa30>)
 8004004:	f009 fa1f 	bl	800d446 <HAL_QSPI_Transmit>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004008:	f44f 7340 	mov.w	r3, #768	@ 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800400c:	2400      	movs	r4, #0
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800400e:	aa20      	add	r2, sp, #128	@ 0x80
  hdma2d.Instance = DMA2D;
 8004010:	4d1f      	ldr	r5, [pc, #124]	@ (8004090 <main+0xa34>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004012:	9334      	str	r3, [sp, #208]	@ 0xd0
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8004014:	23ec      	movs	r3, #236	@ 0xec
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004016:	a92e      	add	r1, sp, #184	@ 0xb8
 8004018:	481c      	ldr	r0, [pc, #112]	@ (800408c <main+0xa30>)
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 800401a:	932e      	str	r3, [sp, #184]	@ 0xb8
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800401c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004020:	943b      	str	r4, [sp, #236]	@ 0xec
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004022:	2601      	movs	r6, #1
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004024:	9335      	str	r3, [sp, #212]	@ 0xd4
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004026:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800402a:	4f1a      	ldr	r7, [pc, #104]	@ (8004094 <main+0xa38>)
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800402c:	9331      	str	r3, [sp, #196]	@ 0xc4
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800402e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004032:	e9cd 4336 	strd	r4, r3, [sp, #216]	@ 0xd8
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8004036:	230a      	movs	r3, #10
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004038:	e9cd 4439 	strd	r4, r4, [sp, #228]	@ 0xe4
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 800403c:	9333      	str	r3, [sp, #204]	@ 0xcc
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800403e:	e9cd 4420 	strd	r4, r4, [sp, #128]	@ 0x80
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004042:	f009 fb0d 	bl	800d660 <HAL_QSPI_MemoryMapped>
  hdma2d.Instance = DMA2D;
 8004046:	4b14      	ldr	r3, [pc, #80]	@ (8004098 <main+0xa3c>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8004048:	4628      	mov	r0, r5
  hdma2d.Init.Mode = DMA2D_M2M;
 800404a:	e9c5 3400 	strd	r3, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 800404e:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8004052:	e9c5 440e 	strd	r4, r4, [r5, #56]	@ 0x38
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8004056:	e9c5 4410 	strd	r4, r4, [r5, #64]	@ 0x40
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800405a:	e9c5 4412 	strd	r4, r4, [r5, #72]	@ 0x48
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800405e:	f006 fd43 	bl	800aae8 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8004062:	2101      	movs	r1, #1
 8004064:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8004066:	4d0d      	ldr	r5, [pc, #52]	@ (800409c <main+0xa40>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8004068:	f006 fe00 	bl	800ac6c <HAL_DMA2D_ConfigLayer>
  MX_I2C4_Init();
 800406c:	f7ff fad4 	bl	8003618 <MX_I2C4_Init>
  MX_LIBJPEG_Init();
 8004070:	f7fc fce3 	bl	8000a3a <MX_LIBJPEG_Init>
  hcrc.Instance = CRC;
 8004074:	480a      	ldr	r0, [pc, #40]	@ (80040a0 <main+0xa44>)
 8004076:	4b0b      	ldr	r3, [pc, #44]	@ (80040a4 <main+0xa48>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004078:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 800407a:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800407c:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800407e:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004082:	f006 fb2d 	bl	800a6e0 <HAL_CRC_Init>
  hjpeg.Instance = JPEG;
 8004086:	4b08      	ldr	r3, [pc, #32]	@ (80040a8 <main+0xa4c>)
 8004088:	e010      	b.n	80040ac <main+0xa50>
 800408a:	bf00      	nop
 800408c:	20011f6c 	.word	0x20011f6c
 8004090:	200121e8 	.word	0x200121e8
 8004094:	40012000 	.word	0x40012000
 8004098:	4002b000 	.word	0x4002b000
 800409c:	20012264 	.word	0x20012264
 80040a0:	20012240 	.word	0x20012240
 80040a4:	40023000 	.word	0x40023000
 80040a8:	50051000 	.word	0x50051000
 80040ac:	484a      	ldr	r0, [pc, #296]	@ (80041d8 <main+0xb7c>)
 80040ae:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 80040b0:	f008 f8ac 	bl	800c20c <HAL_JPEG_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80040b4:	2210      	movs	r2, #16
 80040b6:	4621      	mov	r1, r4
 80040b8:	a82e      	add	r0, sp, #184	@ 0xb8
 80040ba:	f026 fc91 	bl	802a9e0 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80040be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80040c2:	4628      	mov	r0, r5
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80040c4:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80040c6:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80040c8:	61ac      	str	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80040ca:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040ce:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 80040d0:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80040d2:	f885 4030 	strb.w	r4, [r5, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040d6:	616e      	str	r6, [r5, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80040d8:	e9c5 7300 	strd	r7, r3, [r5]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80040dc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 80040e0:	e9c5 430a 	strd	r4, r3, [r5, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80040e4:	f005 ffe6 	bl	800a0b4 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_6;
 80040e8:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040ea:	a92e      	add	r1, sp, #184	@ 0xb8
 80040ec:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80040ee:	9430      	str	r4, [sp, #192]	@ 0xc0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80040f0:	e9cd 362e 	strd	r3, r6, [sp, #184]	@ 0xb8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040f4:	f006 f996 	bl	800a424 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start_IT(&hadc1);
 80040f8:	4628      	mov	r0, r5
 80040fa:	f006 f881 	bl	800a200 <HAL_ADC_Start_IT>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040fe:	221c      	movs	r2, #28
 8004100:	4621      	mov	r1, r4
 8004102:	a820      	add	r0, sp, #128	@ 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004104:	9419      	str	r4, [sp, #100]	@ 0x64
  htim1.Instance = TIM1;
 8004106:	4d35      	ldr	r5, [pc, #212]	@ (80041dc <main+0xb80>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004108:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800410c:	f026 fc68 	bl	802a9e0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004110:	222c      	movs	r2, #44	@ 0x2c
 8004112:	4621      	mov	r1, r4
 8004114:	a82e      	add	r0, sp, #184	@ 0xb8
 8004116:	f026 fc63 	bl	802a9e0 <memset>
  htim1.Init.Prescaler = 100-1;
 800411a:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 8004204 <main+0xba8>
 800411e:	2363      	movs	r3, #99	@ 0x63
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004120:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004122:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 100-1;
 8004124:	e9c5 c300 	strd	ip, r3, [r5]
  htim1.Init.Period = 16000-1;
 8004128:	f643 637f 	movw	r3, #15999	@ 0x3e7f
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800412c:	e9c5 4405 	strd	r4, r4, [r5, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004130:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004134:	f00a fb08 	bl	800e748 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004138:	a917      	add	r1, sp, #92	@ 0x5c
 800413a:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800413c:	9419      	str	r4, [sp, #100]	@ 0x64
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800413e:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004142:	f00a fc79 	bl	800ea38 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 16000/2;
 8004146:	f04f 0e60 	mov.w	lr, #96	@ 0x60
 800414a:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800414e:	4622      	mov	r2, r4
 8004150:	a920      	add	r1, sp, #128	@ 0x80
 8004152:	4628      	mov	r0, r5
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004154:	9426      	str	r4, [sp, #152]	@ 0x98
  sConfigOC.Pulse = 16000/2;
 8004156:	e9cd e320 	strd	lr, r3, [sp, #128]	@ 0x80
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800415a:	e9cd 4422 	strd	r4, r4, [sp, #136]	@ 0x88
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800415e:	e9cd 4424 	strd	r4, r4, [sp, #144]	@ 0x90
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004162:	f00a fb59 	bl	800e818 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004166:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800416a:	a92e      	add	r1, sp, #184	@ 0xb8
 800416c:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800416e:	9432      	str	r4, [sp, #200]	@ 0xc8
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004170:	9435      	str	r4, [sp, #212]	@ 0xd4
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004172:	9438      	str	r4, [sp, #224]	@ 0xe0
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004174:	e9cd 3433 	strd	r3, r4, [sp, #204]	@ 0xcc
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004178:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800417c:	e9cd 442e 	strd	r4, r4, [sp, #184]	@ 0xb8
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004180:	e9cd 3436 	strd	r3, r4, [sp, #216]	@ 0xd8
  sBreakDeadTimeConfig.DeadTime = 0;
 8004184:	e9cd 4430 	strd	r4, r4, [sp, #192]	@ 0xc0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004188:	f00a fca0 	bl	800eacc <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800418c:	4621      	mov	r1, r4
 800418e:	4628      	mov	r0, r5
 8004190:	f00a fc50 	bl	800ea34 <HAL_TIM_PWM_Start>
  HAL_TIM_MspPostInit(&htim1);
 8004194:	4628      	mov	r0, r5
 8004196:	f000 fae1 	bl	800475c <HAL_TIM_MspPostInit>
  MX_TouchGFX_Init();
 800419a:	f7fc fc50 	bl	8000a3e <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 800419e:	f7fc fc4d 	bl	8000a3c <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 80041a2:	f00a fd63 	bl	800ec6c <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80041a6:	4a0e      	ldr	r2, [pc, #56]	@ (80041e0 <main+0xb84>)
 80041a8:	4621      	mov	r1, r4
 80041aa:	480e      	ldr	r0, [pc, #56]	@ (80041e4 <main+0xb88>)
 80041ac:	f00a fd98 	bl	800ece0 <osThreadNew>
 80041b0:	4b0d      	ldr	r3, [pc, #52]	@ (80041e8 <main+0xb8c>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80041b2:	4a0e      	ldr	r2, [pc, #56]	@ (80041ec <main+0xb90>)
 80041b4:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80041b6:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80041b8:	480d      	ldr	r0, [pc, #52]	@ (80041f0 <main+0xb94>)
 80041ba:	f00a fd91 	bl	800ece0 <osThreadNew>
 80041be:	4b0d      	ldr	r3, [pc, #52]	@ (80041f4 <main+0xb98>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 80041c0:	4a0d      	ldr	r2, [pc, #52]	@ (80041f8 <main+0xb9c>)
 80041c2:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80041c4:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 80041c6:	480d      	ldr	r0, [pc, #52]	@ (80041fc <main+0xba0>)
 80041c8:	f00a fd8a 	bl	800ece0 <osThreadNew>
 80041cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004200 <main+0xba4>)
 80041ce:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80041d0:	f00a fd66 	bl	800eca0 <osKernelStart>
  while (1)
 80041d4:	e7fe      	b.n	80041d4 <main+0xb78>
 80041d6:	bf00      	nop
 80041d8:	20012120 	.word	0x20012120
 80041dc:	20011f20 	.word	0x20011f20
 80041e0:	0802d470 	.word	0x0802d470
 80041e4:	08003501 	.word	0x08003501
 80041e8:	20011ee8 	.word	0x20011ee8
 80041ec:	0802d44c 	.word	0x0802d44c
 80041f0:	08000a4d 	.word	0x08000a4d
 80041f4:	20011ee4 	.word	0x20011ee4
 80041f8:	0802d428 	.word	0x0802d428
 80041fc:	08002bc5 	.word	0x08002bc5
 8004200:	20011ee0 	.word	0x20011ee0
 8004204:	40010000 	.word	0x40010000

08004208 <HAL_ADC_ConvCpltCallback>:
{
 8004208:	b508      	push	{r3, lr}
	uhADCxConvertedData = HAL_ADC_GetValue(hadc);
 800420a:	f006 f877 	bl	800a2fc <HAL_ADC_GetValue>
 800420e:	4b02      	ldr	r3, [pc, #8]	@ (8004218 <HAL_ADC_ConvCpltCallback+0x10>)
 8004210:	b280      	uxth	r0, r0
 8004212:	8018      	strh	r0, [r3, #0]
}
 8004214:	bd08      	pop	{r3, pc}
 8004216:	bf00      	nop
 8004218:	20011edc 	.word	0x20011edc

0800421c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800421c:	6802      	ldr	r2, [r0, #0]
 800421e:	4b03      	ldr	r3, [pc, #12]	@ (800422c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004220:	429a      	cmp	r2, r3
 8004222:	d101      	bne.n	8004228 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004224:	f005 bf22 	b.w	800a06c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40001000 	.word	0x40001000

08004230 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004230:	4770      	bx	lr
	...

08004234 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004234:	4b0d      	ldr	r3, [pc, #52]	@ (800426c <HAL_MspInit+0x38>)
{
 8004236:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004238:	210f      	movs	r1, #15
 800423a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800423e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004240:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004244:	641a      	str	r2, [r3, #64]	@ 0x40
 8004246:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004248:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800424c:	9200      	str	r2, [sp, #0]
 800424e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004250:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004252:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004256:	645a      	str	r2, [r3, #68]	@ 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004258:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800425a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004264:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004266:	f006 b99f 	b.w	800a5a8 <HAL_NVIC_SetPriority>
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800

08004270 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004270:	b510      	push	{r4, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004276:	2214      	movs	r2, #20
 8004278:	2100      	movs	r1, #0
 800427a:	a803      	add	r0, sp, #12
 800427c:	f026 fbb0 	bl	802a9e0 <memset>
  if(hadc->Instance==ADC1)
 8004280:	6822      	ldr	r2, [r4, #0]
 8004282:	4b14      	ldr	r3, [pc, #80]	@ (80042d4 <HAL_ADC_MspInit+0x64>)
 8004284:	429a      	cmp	r2, r3
 8004286:	d123      	bne.n	80042d0 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004288:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800428c:	a903      	add	r1, sp, #12
 800428e:	4812      	ldr	r0, [pc, #72]	@ (80042d8 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004292:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004296:	645a      	str	r2, [r3, #68]	@ 0x44
 8004298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800429a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800429e:	9201      	str	r2, [sp, #4]
 80042a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042a4:	f042 0201 	orr.w	r2, r2, #1
 80042a8:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042aa:	2240      	movs	r2, #64	@ 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	9302      	str	r3, [sp, #8]
 80042b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042bc:	f007 f8f6 	bl	800b4ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80042c0:	2012      	movs	r0, #18
 80042c2:	2200      	movs	r2, #0
 80042c4:	2105      	movs	r1, #5
 80042c6:	f006 f96f 	bl	800a5a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80042ca:	2012      	movs	r0, #18
 80042cc:	f006 f99e 	bl	800a60c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80042d0:	b008      	add	sp, #32
 80042d2:	bd10      	pop	{r4, pc}
 80042d4:	40012000 	.word	0x40012000
 80042d8:	40020000 	.word	0x40020000

080042dc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80042dc:	6802      	ldr	r2, [r0, #0]
{
 80042de:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80042e0:	4b08      	ldr	r3, [pc, #32]	@ (8004304 <HAL_CRC_MspInit+0x28>)
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d10b      	bne.n	80042fe <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80042e6:	f8d3 2830 	ldr.w	r2, [r3, #2096]	@ 0x830
 80042ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80042fe:	b002      	add	sp, #8
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40023000 	.word	0x40023000

08004308 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8004308:	4b0e      	ldr	r3, [pc, #56]	@ (8004344 <HAL_DMA2D_MspInit+0x3c>)
{
 800430a:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 800430c:	6802      	ldr	r2, [r0, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d115      	bne.n	800433e <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004312:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004316:	2105      	movs	r1, #5
 8004318:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800431a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800431c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004320:	631a      	str	r2, [r3, #48]	@ 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004322:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004326:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800432e:	f006 f93b 	bl	800a5a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004332:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004334:	b003      	add	sp, #12
 8004336:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800433a:	f006 b967 	b.w	800a60c <HAL_NVIC_EnableIRQ>
}
 800433e:	b003      	add	sp, #12
 8004340:	f85d fb04 	ldr.w	pc, [sp], #4
 8004344:	4002b000 	.word	0x4002b000

08004348 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8004348:	b510      	push	{r4, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800434e:	2214      	movs	r2, #20
 8004350:	2100      	movs	r1, #0
 8004352:	a803      	add	r0, sp, #12
 8004354:	f026 fb44 	bl	802a9e0 <memset>
  if(hdsi->Instance==DSI)
 8004358:	6822      	ldr	r2, [r4, #0]
 800435a:	4b15      	ldr	r3, [pc, #84]	@ (80043b0 <HAL_DSI_MspInit+0x68>)
 800435c:	429a      	cmp	r2, r3
 800435e:	d125      	bne.n	80043ac <HAL_DSI_MspInit+0x64>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8004360:	f503 434c 	add.w	r3, r3, #52224	@ 0xcc00
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004364:	a903      	add	r1, sp, #12
 8004366:	4813      	ldr	r0, [pc, #76]	@ (80043b4 <HAL_DSI_MspInit+0x6c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8004368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800436a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800436e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004372:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004376:	9201      	str	r2, [sp, #4]
 8004378:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800437a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800437c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004380:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004382:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004386:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800438a:	9302      	str	r3, [sp, #8]
 800438c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438e:	2302      	movs	r3, #2
 8004390:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8004394:	230d      	movs	r3, #13
 8004396:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004398:	f007 f888 	bl	800b4ac <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 800439c:	2062      	movs	r0, #98	@ 0x62
 800439e:	2200      	movs	r2, #0
 80043a0:	2105      	movs	r1, #5
 80043a2:	f006 f901 	bl	800a5a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80043a6:	2062      	movs	r0, #98	@ 0x62
 80043a8:	f006 f930 	bl	800a60c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80043ac:	b008      	add	sp, #32
 80043ae:	bd10      	pop	{r4, pc}
 80043b0:	40016c00 	.word	0x40016c00
 80043b4:	40022400 	.word	0x40022400

080043b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80043b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ba:	b0ad      	sub	sp, #180	@ 0xb4
 80043bc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043be:	2214      	movs	r2, #20
 80043c0:	2100      	movs	r1, #0
 80043c2:	a803      	add	r0, sp, #12
 80043c4:	f026 fb0c 	bl	802a9e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043c8:	2290      	movs	r2, #144	@ 0x90
 80043ca:	2100      	movs	r1, #0
 80043cc:	a808      	add	r0, sp, #32
 80043ce:	f026 fb07 	bl	802a9e0 <memset>
  if(hi2c->Instance==I2C4)
 80043d2:	6822      	ldr	r2, [r4, #0]
 80043d4:	4b25      	ldr	r3, [pc, #148]	@ (800446c <HAL_I2C_MspInit+0xb4>)
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d146      	bne.n	8004468 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80043da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043de:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80043e0:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043e2:	f009 fc3d 	bl	800dc60 <HAL_RCCEx_PeriphCLKConfig>
 80043e6:	b108      	cbz	r0, 80043ec <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 80043e8:	f7ff ff22 	bl	8004230 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ec:	4c20      	ldr	r4, [pc, #128]	@ (8004470 <HAL_I2C_MspInit+0xb8>)
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043ee:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f0:	2601      	movs	r6, #1
 80043f2:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043f6:	a903      	add	r1, sp, #12
 80043f8:	481e      	ldr	r0, [pc, #120]	@ (8004474 <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043fa:	f043 0302 	orr.w	r3, r3, #2
 80043fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8004400:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800440a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800440c:	f043 0308 	orr.w	r3, r3, #8
 8004410:	6323      	str	r3, [r4, #48]	@ 0x30
 8004412:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	9301      	str	r3, [sp, #4]
 800441a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800441c:	2380      	movs	r3, #128	@ 0x80
 800441e:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8004422:	230b      	movs	r3, #11
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004424:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8004428:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800442a:	f007 f83f 	bl	800b4ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800442e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004432:	a903      	add	r1, sp, #12
 8004434:	4810      	ldr	r0, [pc, #64]	@ (8004478 <HAL_I2C_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004436:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800443a:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800443c:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004440:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004442:	f007 f833 	bl	800b4ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004446:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8004448:	205f      	movs	r0, #95	@ 0x5f
 800444a:	2200      	movs	r2, #0
 800444c:	2105      	movs	r1, #5
    __HAL_RCC_I2C4_CLK_ENABLE();
 800444e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004452:	6423      	str	r3, [r4, #64]	@ 0x40
 8004454:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004456:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800445a:	9302      	str	r3, [sp, #8]
 800445c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 800445e:	f006 f8a3 	bl	800a5a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8004462:	205f      	movs	r0, #95	@ 0x5f
 8004464:	f006 f8d2 	bl	800a60c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8004468:	b02d      	add	sp, #180	@ 0xb4
 800446a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800446c:	40006000 	.word	0x40006000
 8004470:	40023800 	.word	0x40023800
 8004474:	40020400 	.word	0x40020400
 8004478:	40020c00 	.word	0x40020c00

0800447c <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 800447c:	6802      	ldr	r2, [r0, #0]
{
 800447e:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C4)
 8004480:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <HAL_I2C_MspDeInit+0x34>)
 8004482:	429a      	cmp	r2, r3
 8004484:	d112      	bne.n	80044ac <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8004486:	4a0b      	ldr	r2, [pc, #44]	@ (80044b4 <HAL_I2C_MspDeInit+0x38>)

    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004488:	2180      	movs	r1, #128	@ 0x80
 800448a:	480b      	ldr	r0, [pc, #44]	@ (80044b8 <HAL_I2C_MspDeInit+0x3c>)
    __HAL_RCC_I2C4_CLK_DISABLE();
 800448c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800448e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004492:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004494:	f007 f8ee 	bl	800b674 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8004498:	4808      	ldr	r0, [pc, #32]	@ (80044bc <HAL_I2C_MspDeInit+0x40>)
 800449a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800449e:	f007 f8e9 	bl	800b674 <HAL_GPIO_DeInit>

    /* I2C4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 80044a2:	205f      	movs	r0, #95	@ 0x5f
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 80044a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 80044a8:	f006 b8be 	b.w	800a628 <HAL_NVIC_DisableIRQ>
}
 80044ac:	bd08      	pop	{r3, pc}
 80044ae:	bf00      	nop
 80044b0:	40006000 	.word	0x40006000
 80044b4:	40023800 	.word	0x40023800
 80044b8:	40020400 	.word	0x40020400
 80044bc:	40020c00 	.word	0x40020c00

080044c0 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80044c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 80044c2:	4b35      	ldr	r3, [pc, #212]	@ (8004598 <HAL_JPEG_MspInit+0xd8>)
{
 80044c4:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 80044c6:	6802      	ldr	r2, [r0, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d162      	bne.n	8004592 <HAL_JPEG_MspInit+0xd2>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80044cc:	4b33      	ldr	r3, [pc, #204]	@ (800459c <HAL_JPEG_MspInit+0xdc>)
    hdma_jpeg_in.Instance = DMA2_Stream0;
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
    hdma_jpeg_in.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_in.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80044ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_jpeg_in.Instance = DMA2_Stream0;
 80044d2:	4c33      	ldr	r4, [pc, #204]	@ (80045a0 <HAL_JPEG_MspInit+0xe0>)
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_in.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80044d4:	2004      	movs	r0, #4
    __HAL_RCC_JPEG_CLK_ENABLE();
 80044d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    hdma_jpeg_in.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 80044d8:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 80044dc:	f8df e0cc 	ldr.w	lr, [pc, #204]	@ 80045ac <HAL_JPEG_MspInit+0xec>
    __HAL_RCC_JPEG_CLK_ENABLE();
 80044e0:	f042 0202 	orr.w	r2, r2, #2
 80044e4:	635a      	str	r2, [r3, #52]	@ 0x34
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 80044e6:	2240      	movs	r2, #64	@ 0x40
    __HAL_RCC_JPEG_CLK_ENABLE();
 80044e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	9b01      	ldr	r3, [sp, #4]
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 80044f2:	f04f 5390 	mov.w	r3, #301989888	@ 0x12000000
 80044f6:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004500:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
 8004504:	6223      	str	r3, [r4, #32]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004506:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800450a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
 800450e:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004512:	2303      	movs	r3, #3
 8004514:	e9c4 0309 	strd	r0, r3, [r4, #36]	@ 0x24
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8004518:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 800451c:	4620      	mov	r0, r4
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 800451e:	e9c4 c30b 	strd	ip, r3, [r4, #44]	@ 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 8004522:	f006 f953 	bl	800a7cc <HAL_DMA_Init>
 8004526:	b108      	cbz	r0, 800452c <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 8004528:	f7ff fe82 	bl	8004230 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 800452c:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUT Init */
    hdma_jpeg_out.Instance = DMA2_Stream1;
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 800452e:	f04f 5390 	mov.w	r3, #301989888	@ 0x12000000
 8004532:	4a1c      	ldr	r2, [pc, #112]	@ (80045a4 <HAL_JPEG_MspInit+0xe4>)
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_out.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004534:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8004538:	63a5      	str	r5, [r4, #56]	@ 0x38
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_out.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800453a:	2004      	movs	r0, #4
    hdma_jpeg_out.Instance = DMA2_Stream1;
 800453c:	4c1a      	ldr	r4, [pc, #104]	@ (80045a8 <HAL_JPEG_MspInit+0xe8>)
    hdma_jpeg_out.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 800453e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 8004542:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004546:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800454a:	2300      	movs	r3, #0
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800454c:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004550:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
 8004554:	6223      	str	r3, [r4, #32]
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
 8004556:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
 800455a:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800455e:	2303      	movs	r3, #3
 8004560:	e9c4 0309 	strd	r0, r3, [r4, #36]	@ 0x24
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004564:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8004568:	4620      	mov	r0, r4
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 800456a:	e9c4 c30b 	strd	ip, r3, [r4, #44]	@ 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 800456e:	f006 f92d 	bl	800a7cc <HAL_DMA_Init>
 8004572:	b108      	cbz	r0, 8004578 <HAL_JPEG_MspInit+0xb8>
    {
      Error_Handler();
 8004574:	f7ff fe5c 	bl	8004230 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8004578:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800457a:	2200      	movs	r2, #0
 800457c:	2105      	movs	r1, #5
 800457e:	206c      	movs	r0, #108	@ 0x6c
    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8004580:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8004582:	f006 f811 	bl	800a5a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8004586:	206c      	movs	r0, #108	@ 0x6c
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8004588:	b003      	add	sp, #12
 800458a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800458e:	f006 b83d 	b.w	800a60c <HAL_NVIC_EnableIRQ>
}
 8004592:	b003      	add	sp, #12
 8004594:	bd30      	pop	{r4, r5, pc}
 8004596:	bf00      	nop
 8004598:	50051000 	.word	0x50051000
 800459c:	40023800 	.word	0x40023800
 80045a0:	200120c0 	.word	0x200120c0
 80045a4:	40026428 	.word	0x40026428
 80045a8:	20012060 	.word	0x20012060
 80045ac:	40026410 	.word	0x40026410

080045b0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80045b0:	b510      	push	{r4, lr}
 80045b2:	b0a6      	sub	sp, #152	@ 0x98
 80045b4:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045b6:	2290      	movs	r2, #144	@ 0x90
 80045b8:	2100      	movs	r1, #0
 80045ba:	a802      	add	r0, sp, #8
 80045bc:	f026 fa10 	bl	802a9e0 <memset>
  if(hltdc->Instance==LTDC)
 80045c0:	6822      	ldr	r2, [r4, #0]
 80045c2:	4b14      	ldr	r3, [pc, #80]	@ (8004614 <HAL_LTDC_MspInit+0x64>)
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d122      	bne.n	800460e <HAL_LTDC_MspInit+0x5e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80045c8:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80045ca:	2007      	movs	r0, #7
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80045cc:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80045ce:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80045d2:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80045d4:	2302      	movs	r3, #2
 80045d6:	e9cd 3008 	strd	r3, r0, [sp, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80045da:	2301      	movs	r3, #1
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045dc:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80045de:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045e0:	f009 fb3e 	bl	800dc60 <HAL_RCCEx_PeriphCLKConfig>
 80045e4:	b108      	cbz	r0, 80045ea <HAL_LTDC_MspInit+0x3a>
    {
      Error_Handler();
 80045e6:	f7ff fe23 	bl	8004230 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80045ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004618 <HAL_LTDC_MspInit+0x68>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 80045ec:	2058      	movs	r0, #88	@ 0x58
 80045ee:	2103      	movs	r1, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 80045f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045f2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80045f6:	645a      	str	r2, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 80045f8:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80045fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004604:	f005 ffd0 	bl	800a5a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004608:	2058      	movs	r0, #88	@ 0x58
 800460a:	f005 ffff 	bl	800a60c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800460e:	b026      	add	sp, #152	@ 0x98
 8004610:	bd10      	pop	{r4, pc}
 8004612:	bf00      	nop
 8004614:	40016800 	.word	0x40016800
 8004618:	40023800 	.word	0x40023800

0800461c <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800461c:	2214      	movs	r2, #20
 800461e:	2100      	movs	r1, #0
{
 8004620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004624:	b08a      	sub	sp, #40	@ 0x28
 8004626:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004628:	eb0d 0002 	add.w	r0, sp, r2
 800462c:	f026 f9d8 	bl	802a9e0 <memset>
  if(hqspi->Instance==QUADSPI)
 8004630:	6822      	ldr	r2, [r4, #0]
 8004632:	4b3a      	ldr	r3, [pc, #232]	@ (800471c <HAL_QSPI_MspInit+0x100>)
 8004634:	429a      	cmp	r2, r3
 8004636:	d16e      	bne.n	8004716 <HAL_QSPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

    __HAL_RCC_QSPI_FORCE_RESET();
 8004638:	4b39      	ldr	r3, [pc, #228]	@ (8004720 <HAL_QSPI_MspInit+0x104>)
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800463a:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800463c:	2403      	movs	r4, #3
 800463e:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_FORCE_RESET();
 8004640:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004642:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004646:	a905      	add	r1, sp, #20
 8004648:	4836      	ldr	r0, [pc, #216]	@ (8004724 <HAL_QSPI_MspInit+0x108>)
    __HAL_RCC_QSPI_FORCE_RESET();
 800464a:	f042 0202 	orr.w	r2, r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464e:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_FORCE_RESET();
 8004650:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_RELEASE_RESET();
 8004652:	699a      	ldr	r2, [r3, #24]
 8004654:	f022 0202 	bic.w	r2, r2, #2
 8004658:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_CLK_ENABLE();
 800465a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800465c:	f042 0202 	orr.w	r2, r2, #2
 8004660:	639a      	str	r2, [r3, #56]	@ 0x38
 8004662:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004664:	f002 0202 	and.w	r2, r2, #2
 8004668:	9200      	str	r2, [sp, #0]
 800466a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800466c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800466e:	f042 0210 	orr.w	r2, r2, #16
 8004672:	631a      	str	r2, [r3, #48]	@ 0x30
 8004674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004676:	f002 0210 	and.w	r2, r2, #16
 800467a:	9201      	str	r2, [sp, #4]
 800467c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800467e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004680:	f042 0202 	orr.w	r2, r2, #2
 8004684:	631a      	str	r2, [r3, #48]	@ 0x30
 8004686:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004688:	f002 0202 	and.w	r2, r2, #2
 800468c:	9202      	str	r2, [sp, #8]
 800468e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004690:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004692:	f042 0204 	orr.w	r2, r2, #4
 8004696:	631a      	str	r2, [r3, #48]	@ 0x30
 8004698:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800469a:	f002 0204 	and.w	r2, r2, #4
 800469e:	9203      	str	r2, [sp, #12]
 80046a0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046a4:	f042 0208 	orr.w	r2, r2, #8
 80046a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80046aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	9304      	str	r3, [sp, #16]
 80046b2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b4:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80046b8:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046bc:	f006 fef6 	bl	800b4ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80046c0:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046c2:	a905      	add	r1, sp, #20
 80046c4:	4818      	ldr	r0, [pc, #96]	@ (8004728 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c6:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046ca:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046cc:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80046d0:	230a      	movs	r3, #10
 80046d2:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d4:	f006 feea 	bl	800b4ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80046d8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046dc:	a905      	add	r1, sp, #20
 80046de:	4813      	ldr	r0, [pc, #76]	@ (800472c <HAL_QSPI_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80046e0:	9609      	str	r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e2:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e6:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046ea:	f006 fedf 	bl	800b4ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ee:	a905      	add	r1, sp, #20
 80046f0:	480d      	ldr	r0, [pc, #52]	@ (8004728 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80046f2:	9609      	str	r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f4:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046f8:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046fc:	f006 fed6 	bl	800b4ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004700:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004704:	a905      	add	r1, sp, #20
 8004706:	480a      	ldr	r0, [pc, #40]	@ (8004730 <HAL_QSPI_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004708:	9609      	str	r6, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800470a:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800470e:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004712:	f006 fecb 	bl	800b4ac <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8004716:	b00a      	add	sp, #40	@ 0x28
 8004718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800471c:	a0001000 	.word	0xa0001000
 8004720:	40023800 	.word	0x40023800
 8004724:	40021000 	.word	0x40021000
 8004728:	40020400 	.word	0x40020400
 800472c:	40020800 	.word	0x40020800
 8004730:	40020c00 	.word	0x40020c00

08004734 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8004734:	6802      	ldr	r2, [r0, #0]
{
 8004736:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8004738:	4b07      	ldr	r3, [pc, #28]	@ (8004758 <HAL_TIM_PWM_MspInit+0x24>)
 800473a:	429a      	cmp	r2, r3
 800473c:	d10a      	bne.n	8004754 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800473e:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8004742:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	645a      	str	r2, [r3, #68]	@ 0x44
 800474a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	9301      	str	r3, [sp, #4]
 8004752:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004754:	b002      	add	sp, #8
 8004756:	4770      	bx	lr
 8004758:	40010000 	.word	0x40010000

0800475c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800475c:	b510      	push	{r4, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004762:	2214      	movs	r2, #20
 8004764:	2100      	movs	r1, #0
 8004766:	a801      	add	r0, sp, #4
 8004768:	f026 f93a 	bl	802a9e0 <memset>
  if(htim->Instance==TIM1)
 800476c:	6822      	ldr	r2, [r4, #0]
 800476e:	4b0d      	ldr	r3, [pc, #52]	@ (80047a4 <HAL_TIM_MspPostInit+0x48>)
 8004770:	429a      	cmp	r2, r3
 8004772:	d115      	bne.n	80047a0 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004774:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004778:	a901      	add	r1, sp, #4
 800477a:	480b      	ldr	r0, [pc, #44]	@ (80047a8 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800477c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004784:	f44f 7280 	mov.w	r2, #256	@ 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004792:	2302      	movs	r3, #2
 8004794:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004798:	2301      	movs	r3, #1
 800479a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800479c:	f006 fe86 	bl	800b4ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80047a0:	b006      	add	sp, #24
 80047a2:	bd10      	pop	{r4, pc}
 80047a4:	40010000 	.word	0x40010000
 80047a8:	40020000 	.word	0x40020000

080047ac <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80047ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80047ae:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80047b0:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80047b2:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 80047b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004860 <HAL_SDRAM_MspInit+0xb4>)
 80047b6:	681e      	ldr	r6, [r3, #0]
 80047b8:	2e00      	cmp	r6, #0
 80047ba:	d14f      	bne.n	800485c <HAL_SDRAM_MspInit+0xb0>
  FMC_Initialized = 1;
 80047bc:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047be:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80047c0:	2503      	movs	r5, #3
 80047c2:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 80047c4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047c6:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80047c8:	4b26      	ldr	r3, [pc, #152]	@ (8004864 <HAL_SDRAM_MspInit+0xb8>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047ca:	4827      	ldr	r0, [pc, #156]	@ (8004868 <HAL_SDRAM_MspInit+0xbc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80047cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80047d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047de:	f64f 7383 	movw	r3, #65411	@ 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80047e2:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047ea:	f006 fe5f 	bl	800b4ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80047ee:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80047f2:	a901      	add	r1, sp, #4
 80047f4:	481d      	ldr	r0, [pc, #116]	@ (800486c <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80047f6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047fc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004800:	f006 fe54 	bl	800b4ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8004804:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004808:	a901      	add	r1, sp, #4
 800480a:	4819      	ldr	r0, [pc, #100]	@ (8004870 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800480c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004812:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004816:	f006 fe49 	bl	800b4ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 800481a:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800481e:	a901      	add	r1, sp, #4
 8004820:	4814      	ldr	r0, [pc, #80]	@ (8004874 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004822:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004824:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004828:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800482c:	f006 fe3e 	bl	800b4ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004830:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004834:	a901      	add	r1, sp, #4
 8004836:	4810      	ldr	r0, [pc, #64]	@ (8004878 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004838:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800483e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004842:	f006 fe33 	bl	800b4ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 8004846:	f64f 732c 	movw	r3, #65324	@ 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800484a:	a901      	add	r1, sp, #4
 800484c:	480b      	ldr	r0, [pc, #44]	@ (800487c <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800484e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004850:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004854:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004858:	f006 fe28 	bl	800b4ac <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800485c:	b007      	add	sp, #28
 800485e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004860:	200122ac 	.word	0x200122ac
 8004864:	40023800 	.word	0x40023800
 8004868:	40021000 	.word	0x40021000
 800486c:	40021800 	.word	0x40021800
 8004870:	40020c00 	.word	0x40020c00
 8004874:	40022000 	.word	0x40022000
 8004878:	40021400 	.word	0x40021400
 800487c:	40021c00 	.word	0x40021c00

08004880 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004880:	4b21      	ldr	r3, [pc, #132]	@ (8004908 <HAL_InitTick+0x88>)
 8004882:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004884:	f042 0210 	orr.w	r2, r2, #16
{
 8004888:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 800488a:	641a      	str	r2, [r3, #64]	@ 0x40
{
 800488c:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 800488e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
{
 8004890:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004892:	a901      	add	r1, sp, #4
 8004894:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004896:	f003 0310 	and.w	r3, r3, #16
 800489a:	9302      	str	r3, [sp, #8]
 800489c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800489e:	f009 f9c1 	bl	800dc24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80048a2:	9b06      	ldr	r3, [sp, #24]
 80048a4:	bb4b      	cbnz	r3, 80048fa <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80048a6:	f009 f9ad 	bl	800dc04 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80048aa:	4e18      	ldr	r6, [pc, #96]	@ (800490c <HAL_InitTick+0x8c>)
 80048ac:	4b18      	ldr	r3, [pc, #96]	@ (8004910 <HAL_InitTick+0x90>)
 80048ae:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80048b0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80048b4:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80048b6:	4b17      	ldr	r3, [pc, #92]	@ (8004914 <HAL_InitTick+0x94>)
 80048b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80048bc:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 80048be:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 80048c0:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048c6:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048c8:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 80048ca:	f009 ff0d 	bl	800e6e8 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80048ce:	4604      	mov	r4, r0
 80048d0:	b980      	cbnz	r0, 80048f4 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80048d2:	4630      	mov	r0, r6
 80048d4:	f009 fdb0 	bl	800e438 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80048d8:	4604      	mov	r4, r0
 80048da:	b958      	cbnz	r0, 80048f4 <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80048dc:	2036      	movs	r0, #54	@ 0x36
 80048de:	f005 fe95 	bl	800a60c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048e2:	2d0f      	cmp	r5, #15
 80048e4:	d80d      	bhi.n	8004902 <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80048e6:	4622      	mov	r2, r4
 80048e8:	4629      	mov	r1, r5
 80048ea:	2036      	movs	r0, #54	@ 0x36
 80048ec:	f005 fe5c 	bl	800a5a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80048f0:	4b09      	ldr	r3, [pc, #36]	@ (8004918 <HAL_InitTick+0x98>)
 80048f2:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80048f4:	4620      	mov	r0, r4
 80048f6:	b008      	add	sp, #32
 80048f8:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80048fa:	f009 f983 	bl	800dc04 <HAL_RCC_GetPCLK1Freq>
 80048fe:	0040      	lsls	r0, r0, #1
 8004900:	e7d3      	b.n	80048aa <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8004902:	2401      	movs	r4, #1
 8004904:	e7f6      	b.n	80048f4 <HAL_InitTick+0x74>
 8004906:	bf00      	nop
 8004908:	40023800 	.word	0x40023800
 800490c:	200122b0 	.word	0x200122b0
 8004910:	40001000 	.word	0x40001000
 8004914:	000f4240 	.word	0x000f4240
 8004918:	20000068 	.word	0x20000068

0800491c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800491c:	4770      	bx	lr

0800491e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800491e:	e7fe      	b.n	800491e <HardFault_Handler>

08004920 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004920:	e7fe      	b.n	8004920 <MemManage_Handler>

08004922 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004922:	e7fe      	b.n	8004922 <BusFault_Handler>

08004924 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004924:	e7fe      	b.n	8004924 <UsageFault_Handler>

08004926 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8004926:	4770      	bx	lr

08004928 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004928:	4801      	ldr	r0, [pc, #4]	@ (8004930 <ADC_IRQHandler+0x8>)
 800492a:	f005 bcec 	b.w	800a306 <HAL_ADC_IRQHandler>
 800492e:	bf00      	nop
 8004930:	20012264 	.word	0x20012264

08004934 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004934:	4801      	ldr	r0, [pc, #4]	@ (800493c <TIM6_DAC_IRQHandler+0x8>)
 8004936:	f009 bdc1 	b.w	800e4bc <HAL_TIM_IRQHandler>
 800493a:	bf00      	nop
 800493c:	200122b0 	.word	0x200122b0

08004940 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_in);
 8004940:	4801      	ldr	r0, [pc, #4]	@ (8004948 <DMA2_Stream0_IRQHandler+0x8>)
 8004942:	f006 b811 	b.w	800a968 <HAL_DMA_IRQHandler>
 8004946:	bf00      	nop
 8004948:	200120c0 	.word	0x200120c0

0800494c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_out);
 800494c:	4801      	ldr	r0, [pc, #4]	@ (8004954 <DMA2_Stream1_IRQHandler+0x8>)
 800494e:	f006 b80b 	b.w	800a968 <HAL_DMA_IRQHandler>
 8004952:	bf00      	nop
 8004954:	20012060 	.word	0x20012060

08004958 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004958:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */
  int now = HAL_GetTick();
 800495a:	f005 fb93 	bl	800a084 <HAL_GetTick>
  diff = last - now;
 800495e:	4a05      	ldr	r2, [pc, #20]	@ (8004974 <LTDC_IRQHandler+0x1c>)
 8004960:	4905      	ldr	r1, [pc, #20]	@ (8004978 <LTDC_IRQHandler+0x20>)
 8004962:	6813      	ldr	r3, [r2, #0]
 8004964:	1a1b      	subs	r3, r3, r0
 8004966:	600b      	str	r3, [r1, #0]
  last = now;
 8004968:	6010      	str	r0, [r2, #0]
  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800496a:	4804      	ldr	r0, [pc, #16]	@ (800497c <LTDC_IRQHandler+0x24>)
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800496c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_LTDC_IRQHandler(&hltdc);
 8004970:	f008 baf1 	b.w	800cf56 <HAL_LTDC_IRQHandler>
 8004974:	20012300 	.word	0x20012300
 8004978:	200122fc 	.word	0x200122fc
 800497c:	20011fb8 	.word	0x20011fb8

08004980 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004980:	4801      	ldr	r0, [pc, #4]	@ (8004988 <DMA2D_IRQHandler+0x8>)
 8004982:	f006 b8e9 	b.w	800ab58 <HAL_DMA2D_IRQHandler>
 8004986:	bf00      	nop
 8004988:	200121e8 	.word	0x200121e8

0800498c <I2C4_EV_IRQHandler>:
void I2C4_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 800498c:	4801      	ldr	r0, [pc, #4]	@ (8004994 <I2C4_EV_IRQHandler+0x8>)
 800498e:	f007 ba5b 	b.w	800be48 <HAL_I2C_EV_IRQHandler>
 8004992:	bf00      	nop
 8004994:	20012178 	.word	0x20012178

08004998 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8004998:	4801      	ldr	r0, [pc, #4]	@ (80049a0 <DSI_IRQHandler+0x8>)
 800499a:	f006 baf0 	b.w	800af7e <HAL_DSI_IRQHandler>
 800499e:	bf00      	nop
 80049a0:	200121cc 	.word	0x200121cc

080049a4 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 80049a4:	4801      	ldr	r0, [pc, #4]	@ (80049ac <JPEG_IRQHandler+0x8>)
 80049a6:	f008 b983 	b.w	800ccb0 <HAL_JPEG_IRQHandler>
 80049aa:	bf00      	nop
 80049ac:	20012120 	.word	0x20012120

080049b0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80049b0:	2001      	movs	r0, #1
 80049b2:	4770      	bx	lr

080049b4 <_kill>:

int _kill(int pid, int sig)
{
 80049b4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80049b6:	f026 f8c7 	bl	802ab48 <__errno>
 80049ba:	2316      	movs	r3, #22
 80049bc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80049be:	f04f 30ff 	mov.w	r0, #4294967295
 80049c2:	bd08      	pop	{r3, pc}

080049c4 <_exit>:

void _exit (int status)
{
 80049c4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80049c6:	f026 f8bf 	bl	802ab48 <__errno>
 80049ca:	2316      	movs	r3, #22
 80049cc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80049ce:	e7fe      	b.n	80049ce <_exit+0xa>

080049d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	460d      	mov	r5, r1
 80049d4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049d6:	460e      	mov	r6, r1
 80049d8:	1b73      	subs	r3, r6, r5
 80049da:	429c      	cmp	r4, r3
 80049dc:	dc01      	bgt.n	80049e2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80049de:	4620      	mov	r0, r4
 80049e0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80049e2:	f3af 8000 	nop.w
 80049e6:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049ea:	e7f5      	b.n	80049d8 <_read+0x8>

080049ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	460d      	mov	r5, r1
 80049f0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049f2:	460e      	mov	r6, r1
 80049f4:	1b73      	subs	r3, r6, r5
 80049f6:	429c      	cmp	r4, r3
 80049f8:	dc01      	bgt.n	80049fe <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80049fa:	4620      	mov	r0, r4
 80049fc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80049fe:	f816 0b01 	ldrb.w	r0, [r6], #1
 8004a02:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a06:	e7f5      	b.n	80049f4 <_write+0x8>

08004a08 <_close>:

int _close(int file)
{
	return -1;
}
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0c:	4770      	bx	lr

08004a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004a0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8004a12:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8004a14:	604b      	str	r3, [r1, #4]
}
 8004a16:	4770      	bx	lr

08004a18 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004a18:	2001      	movs	r0, #1
 8004a1a:	4770      	bx	lr

08004a1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	4770      	bx	lr

08004a20 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004a20:	4a0a      	ldr	r2, [pc, #40]	@ (8004a4c <_sbrk+0x2c>)
 8004a22:	6811      	ldr	r1, [r2, #0]
{
 8004a24:	b508      	push	{r3, lr}
 8004a26:	4603      	mov	r3, r0
	if (heap_end == 0)
 8004a28:	b909      	cbnz	r1, 8004a2e <_sbrk+0xe>
		heap_end = &end;
 8004a2a:	4909      	ldr	r1, [pc, #36]	@ (8004a50 <_sbrk+0x30>)
 8004a2c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8004a2e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004a30:	4669      	mov	r1, sp
 8004a32:	4403      	add	r3, r0
 8004a34:	428b      	cmp	r3, r1
 8004a36:	d906      	bls.n	8004a46 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8004a38:	f026 f886 	bl	802ab48 <__errno>
 8004a3c:	230c      	movs	r3, #12
 8004a3e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004a40:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8004a44:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8004a46:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8004a48:	e7fc      	b.n	8004a44 <_sbrk+0x24>
 8004a4a:	bf00      	nop
 8004a4c:	20012304 	.word	0x20012304
 8004a50:	20028610 	.word	0x20028610

08004a54 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8004a54:	4770      	bx	lr

08004a56 <_ZN23ApplicationFontProviderD0Ev>:
 8004a56:	b510      	push	{r4, lr}
 8004a58:	4604      	mov	r4, r0
 8004a5a:	2104      	movs	r1, #4
 8004a5c:	f025 f9ad 	bl	8029dba <_ZdlPvj>
 8004a60:	4620      	mov	r0, r4
 8004a62:	bd10      	pop	{r4, pc}

08004a64 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8004a64:	2901      	cmp	r1, #1
{
 8004a66:	b508      	push	{r3, lr}
    switch (typography)
 8004a68:	d006      	beq.n	8004a78 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8004a6a:	2902      	cmp	r1, #2
 8004a6c:	d008      	beq.n	8004a80 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8004a6e:	b959      	cbnz	r1, 8004a88 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8004a70:	f004 ff74 	bl	800995c <_ZN17TypedTextDatabase8getFontsEv>
 8004a74:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8004a76:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8004a78:	f004 ff70 	bl	800995c <_ZN17TypedTextDatabase8getFontsEv>
 8004a7c:	6840      	ldr	r0, [r0, #4]
 8004a7e:	e7fa      	b.n	8004a76 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8004a80:	f004 ff6c 	bl	800995c <_ZN17TypedTextDatabase8getFontsEv>
 8004a84:	6880      	ldr	r0, [r0, #8]
 8004a86:	e7f6      	b.n	8004a76 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8004a88:	2000      	movs	r0, #0
 8004a8a:	e7f4      	b.n	8004a76 <_ZN23ApplicationFontProvider7getFontEt+0x12>

08004a8c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8004a8c:	4800      	ldr	r0, [pc, #0]	@ (8004a90 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8004a8e:	4770      	bx	lr
 8004a90:	0802d4a8 	.word	0x0802d4a8

08004a94 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8004a94:	2001      	movs	r0, #1
 8004a96:	4770      	bx	lr

08004a98 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8004a98:	b513      	push	{r0, r1, r4, lr}
 8004a9a:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8004a9c:	b151      	cbz	r1, 8004ab4 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8004a9e:	6803      	ldr	r3, [r0, #0]
 8004aa0:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8004aa2:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8004aa4:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8004aa8:	689c      	ldr	r4, [r3, #8]
 8004aaa:	f10d 0303 	add.w	r3, sp, #3
 8004aae:	47a0      	blx	r4
        return glyph;
    }
 8004ab0:	b002      	add	sp, #8
 8004ab2:	bd10      	pop	{r4, pc}
            return 0;
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	e7fb      	b.n	8004ab0 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08004ab8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8004ab8:	89c0      	ldrh	r0, [r0, #14]
 8004aba:	4770      	bx	lr

08004abc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8004abc:	8a00      	ldrh	r0, [r0, #16]
 8004abe:	4770      	bx	lr

08004ac0 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8004ac0:	88c0      	ldrh	r0, [r0, #6]
 8004ac2:	4770      	bx	lr

08004ac4 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8004ac4:	8880      	ldrh	r0, [r0, #4]
 8004ac6:	4770      	bx	lr

08004ac8 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8004ac8:	7a80      	ldrb	r0, [r0, #10]
    }
 8004aca:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8004ace:	4770      	bx	lr

08004ad0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8004ad0:	7a80      	ldrb	r0, [r0, #10]
    }
 8004ad2:	09c0      	lsrs	r0, r0, #7
 8004ad4:	4770      	bx	lr

08004ad6 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	4770      	bx	lr
	...

08004adc <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8004adc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004ae4 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	00000000 	.word	0x00000000

08004ae8 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8004ae8:	4770      	bx	lr

08004aea <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8004aea:	b510      	push	{r4, lr}
 8004aec:	4604      	mov	r4, r0
    }
 8004aee:	2108      	movs	r1, #8
 8004af0:	f025 f963 	bl	8029dba <_ZdlPvj>
 8004af4:	4620      	mov	r0, r4
 8004af6:	bd10      	pop	{r4, pc}

08004af8 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8004af8:	4770      	bx	lr

08004afa <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8004afa:	4770      	bx	lr

08004afc <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8004afc:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8004b00:	6808      	ldr	r0, [r1, #0]
 8004b02:	6849      	ldr	r1, [r1, #4]
 8004b04:	c303      	stmia	r3!, {r0, r1}
    }
 8004b06:	4770      	bx	lr

08004b08 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8004b08:	4770      	bx	lr

08004b0a <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8004b0a:	4770      	bx	lr

08004b0c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8004b0c:	6041      	str	r1, [r0, #4]
    }
 8004b0e:	4770      	bx	lr

08004b10 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8004b10:	4770      	bx	lr
	...

08004b14 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004b14:	4b06      	ldr	r3, [pc, #24]	@ (8004b30 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8004b16:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8004b1a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8004b24:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8004b28:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	08004bd5 	.word	0x08004bd5

08004b34 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8004b34:	2301      	movs	r3, #1
 8004b36:	7203      	strb	r3, [r0, #8]
    }
 8004b38:	4770      	bx	lr

08004b3a <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8004b3a:	4770      	bx	lr

08004b3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8004b3c:	4770      	bx	lr

08004b3e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8004b3e:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8004b40:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8004b42:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8004b44:	68c2      	ldr	r2, [r0, #12]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	1054      	asrs	r4, r2, #1
 8004b4a:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8004b4e:	07d2      	lsls	r2, r2, #31
 8004b50:	bf48      	it	mi
 8004b52:	590a      	ldrmi	r2, [r1, r4]
    }
 8004b54:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8004b58:	bf48      	it	mi
 8004b5a:	58d3      	ldrmi	r3, [r2, r3]
 8004b5c:	4718      	bx	r3

08004b5e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8004b5e:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8004b60:	6840      	ldr	r0, [r0, #4]
 8004b62:	b130      	cbz	r0, 8004b72 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	b91a      	cbnz	r2, 8004b70 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8004b68:	68d8      	ldr	r0, [r3, #12]
 8004b6a:	f000 0001 	and.w	r0, r0, #1
 8004b6e:	4770      	bx	lr
 8004b70:	2001      	movs	r0, #1
    }
 8004b72:	4770      	bx	lr

08004b74 <_ZN8touchgfx12NoTransitionD0Ev>:
 8004b74:	b510      	push	{r4, lr}
 8004b76:	4604      	mov	r4, r0
 8004b78:	210c      	movs	r1, #12
 8004b7a:	f025 f91e 	bl	8029dba <_ZdlPvj>
 8004b7e:	4620      	mov	r0, r4
 8004b80:	bd10      	pop	{r4, pc}

08004b82 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004b82:	b510      	push	{r4, lr}
 8004b84:	4604      	mov	r4, r0
 8004b86:	2110      	movs	r1, #16
 8004b88:	f025 f917 	bl	8029dba <_ZdlPvj>
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	bd10      	pop	{r4, pc}

08004b90 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8004b90:	b510      	push	{r4, lr}
 8004b92:	4604      	mov	r4, r0
 8004b94:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8004b98:	f025 f90f 	bl	8029dba <_ZdlPvj>
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	bd10      	pop	{r4, pc}

08004ba0 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8004ba0:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8004ba2:	f013 fb13 	bl	80181cc <_ZN8touchgfx11Application11getInstanceEv>
 8004ba6:	6803      	ldr	r3, [r0, #0]
    }
 8004ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8004bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bae:	4718      	bx	r3

08004bb0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8004bb0:	b510      	push	{r4, lr}
 8004bb2:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8004bb4:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8004bb8:	b158      	cbz	r0, 8004bd2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8004bba:	6803      	ldr	r3, [r0, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	4798      	blx	r3
 8004bc0:	b138      	cbz	r0, 8004bd2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8004bc2:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8004bc6:	6803      	ldr	r3, [r0, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8004bd2:	bd10      	pop	{r4, pc}

08004bd4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8004bd4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004bd8:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8004bdc:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004bde:	68b0      	ldr	r0, [r6, #8]
 8004be0:	6803      	ldr	r3, [r0, #0]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	4798      	blx	r3
 8004be6:	f243 43d7 	movw	r3, #13527	@ 0x34d7
 8004bea:	4298      	cmp	r0, r3
 8004bec:	d805      	bhi.n	8004bfa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 8004bee:	4b44      	ldr	r3, [pc, #272]	@ (8004d00 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8004bf0:	21a3      	movs	r1, #163	@ 0xa3
 8004bf2:	4a44      	ldr	r2, [pc, #272]	@ (8004d04 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004bf4:	4844      	ldr	r0, [pc, #272]	@ (8004d08 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8004bf6:	f025 fc57 	bl	802a4a8 <__assert_func>
 8004bfa:	6870      	ldr	r0, [r6, #4]
 8004bfc:	6803      	ldr	r3, [r0, #0]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	4798      	blx	r3
 8004c02:	280f      	cmp	r0, #15
 8004c04:	d803      	bhi.n	8004c0e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 8004c06:	4b41      	ldr	r3, [pc, #260]	@ (8004d0c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8004c08:	21a4      	movs	r1, #164	@ 0xa4
 8004c0a:	4a3e      	ldr	r2, [pc, #248]	@ (8004d04 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8004c0c:	e7f2      	b.n	8004bf4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004c0e:	68f0      	ldr	r0, [r6, #12]
 8004c10:	6803      	ldr	r3, [r0, #0]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	4798      	blx	r3
 8004c16:	280b      	cmp	r0, #11
 8004c18:	d803      	bhi.n	8004c22 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 8004c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d10 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8004c1c:	21a5      	movs	r1, #165	@ 0xa5
 8004c1e:	4a39      	ldr	r2, [pc, #228]	@ (8004d04 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8004c20:	e7e8      	b.n	8004bf4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 8004c22:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8004d18 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8004c26:	f013 fad1 	bl	80181cc <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8004c2a:	3004      	adds	r0, #4
 8004c2c:	f013 faf3 	bl	8018216 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8004c30:	f8d9 0000 	ldr.w	r0, [r9]
 8004c34:	b110      	cbz	r0, 8004c3c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8004c36:	6803      	ldr	r3, [r0, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	4798      	blx	r3
    if (*currentTrans)
 8004c3c:	f8d9 0000 	ldr.w	r0, [r9]
 8004c40:	b110      	cbz	r0, 8004c48 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8004c42:	6803      	ldr	r3, [r0, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4798      	blx	r3
    if (*currentScreen)
 8004c48:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8004d1c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8004c4c:	f8d8 0000 	ldr.w	r0, [r8]
 8004c50:	b110      	cbz	r0, 8004c58 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8004c52:	6803      	ldr	r3, [r0, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	4798      	blx	r3
    if (*currentPresenter)
 8004c58:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004c5c:	b110      	cbz	r0, 8004c64 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8004c5e:	6803      	ldr	r3, [r0, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	4798      	blx	r3
    if (*currentScreen)
 8004c64:	f8d8 0000 	ldr.w	r0, [r8]
 8004c68:	b110      	cbz	r0, 8004c70 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8004c6a:	6803      	ldr	r3, [r0, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4798      	blx	r3
    if (*currentPresenter)
 8004c70:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004c74:	b110      	cbz	r0, 8004c7c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8004c76:	6803      	ldr	r3, [r0, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004c7c:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8004c7e:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8004c80:	f04f 0b00 	mov.w	fp, #0
 8004c84:	6803      	ldr	r3, [r0, #0]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c88:	4798      	blx	r3
 8004c8a:	4b22      	ldr	r3, [pc, #136]	@ (8004d14 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	f8c0 b004 	str.w	fp, [r0, #4]
 8004c92:	f880 b008 	strb.w	fp, [r0, #8]
 8004c96:	4659      	mov	r1, fp
 8004c98:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004c9a:	68b0      	ldr	r0, [r6, #8]
 8004c9c:	6803      	ldr	r3, [r0, #0]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	4798      	blx	r3
 8004ca2:	4605      	mov	r5, r0
 8004ca4:	f004 fedc 	bl	8009a60 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004ca8:	6870      	ldr	r0, [r6, #4]
 8004caa:	4659      	mov	r1, fp
 8004cac:	6803      	ldr	r3, [r0, #0]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	4798      	blx	r3
 8004cb2:	4606      	mov	r6, r0
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	f004 feb1 	bl	8009a1c <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8004cba:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8004cbc:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8004cc0:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8004cc2:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8004cc6:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8004cca:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004cce:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8004cd0:	f8c6 a008 	str.w	sl, [r6, #8]
 8004cd4:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8004cd6:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8004cd8:	4798      	blx	r3
    newPresenter->activate();
 8004cda:	6833      	ldr	r3, [r6, #0]
 8004cdc:	4630      	mov	r0, r6
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	f015 fb2f 	bl	801a348 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	4620      	mov	r0, r4
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	4798      	blx	r3
    newTransition->invalidate();
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	695b      	ldr	r3, [r3, #20]
}
 8004cf8:	b001      	add	sp, #4
 8004cfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfe:	4718      	bx	r3
 8004d00:	0802d4cc 	.word	0x0802d4cc
 8004d04:	0802d55a 	.word	0x0802d55a
 8004d08:	0802d62c 	.word	0x0802d62c
 8004d0c:	0802d673 	.word	0x0802d673
 8004d10:	0802d716 	.word	0x0802d716
 8004d14:	0802d830 	.word	0x0802d830
 8004d18:	20027a20 	.word	0x20027a20
 8004d1c:	20027a1c 	.word	0x20027a1c

08004d20 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004d20:	4b04      	ldr	r3, [pc, #16]	@ (8004d34 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8004d28:	b10a      	cbz	r2, 8004d2e <_ZN8touchgfx3HAL3lcdEv+0xe>
 8004d2a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004d2c:	b900      	cbnz	r0, 8004d30 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8004d2e:	6898      	ldr	r0, [r3, #8]
    }
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	200279d8 	.word	0x200279d8

08004d38 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	4617      	mov	r7, r2
 8004d3e:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8004d40:	f013 fb0a 	bl	8018358 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8004d44:	4b10      	ldr	r3, [pc, #64]	@ (8004d88 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 8004d46:	2500      	movs	r5, #0
        instance = this;
 8004d48:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004d4a:	4629      	mov	r1, r5
      model(m)
 8004d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004d8c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8004d4e:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8004d50:	4b0f      	ldr	r3, [pc, #60]	@ (8004d90 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8004d52:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 8004d56:	4b0f      	ldr	r3, [pc, #60]	@ (8004d94 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004d5e:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8004d60:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8004d64:	689b      	ldr	r3, [r3, #8]
      model(m)
 8004d66:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004d6a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	f004 fda9 	bl	80098c4 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8004d72:	f7ff ffd5 	bl	8004d20 <_ZN8touchgfx3HAL3lcdEv>
 8004d76:	f01c ff5e 	bl	8021c36 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8004d7a:	f7ff ffd1 	bl	8004d20 <_ZN8touchgfx3HAL3lcdEv>
 8004d7e:	f01c ffd5 	bl	8021d2c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
}
 8004d82:	4620      	mov	r0, r4
 8004d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20027a2c 	.word	0x20027a2c
 8004d8c:	0802d7dc 	.word	0x0802d7dc
 8004d90:	0802d7c4 	.word	0x0802d7c4
 8004d94:	200279d8 	.word	0x200279d8

08004d98 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004d98:	4b06      	ldr	r3, [pc, #24]	@ (8004db4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8004d9a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8004d9e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8004da2:	2300      	movs	r3, #0
 8004da4:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8004da8:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8004dac:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	08004bd5 	.word	0x08004bd5

08004db8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8004db8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8004dba:	4770      	bx	lr

08004dbc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8004dbc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8004dbe:	4770      	bx	lr

08004dc0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8004dc0:	4770      	bx	lr

08004dc2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8004dc2:	888b      	ldrh	r3, [r1, #4]
 8004dc4:	69c0      	ldr	r0, [r0, #28]
 8004dc6:	0adb      	lsrs	r3, r3, #11
 8004dc8:	680a      	ldr	r2, [r1, #0]
 8004dca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8004dce:	4410      	add	r0, r2
 8004dd0:	4770      	bx	lr

08004dd2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004dd2:	b510      	push	{r4, lr}
 8004dd4:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8004dd6:	b1ba      	cbz	r2, 8004e08 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8004dd8:	7b10      	ldrb	r0, [r2, #12]
 8004dda:	b168      	cbz	r0, 8004df8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8004ddc:	7b53      	ldrb	r3, [r2, #13]
 8004dde:	7ad2      	ldrb	r2, [r2, #11]
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004de6:	431a      	orrs	r2, r3
 8004de8:	6a23      	ldr	r3, [r4, #32]
 8004dea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004dee:	881a      	ldrh	r2, [r3, #0]
 8004df0:	428a      	cmp	r2, r1
 8004df2:	d102      	bne.n	8004dfa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8004df4:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8004df8:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8004dfa:	d805      	bhi.n	8004e08 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004dfc:	3801      	subs	r0, #1
 8004dfe:	3304      	adds	r3, #4
 8004e00:	b280      	uxth	r0, r0
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d1f3      	bne.n	8004dee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004e06:	e7f7      	b.n	8004df8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8004e08:	2000      	movs	r0, #0
 8004e0a:	e7f5      	b.n	8004df8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08004e0c <_ZN8touchgfx13GeneratedFontD0Ev>:
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	4604      	mov	r4, r0
 8004e10:	212c      	movs	r1, #44	@ 0x2c
 8004e12:	f024 ffd2 	bl	8029dba <_ZdlPvj>
 8004e16:	4620      	mov	r0, r4
 8004e18:	bd10      	pop	{r4, pc}
	...

08004e1c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004e1c:	b530      	push	{r4, r5, lr}
 8004e1e:	b08b      	sub	sp, #44	@ 0x2c
 8004e20:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8004e22:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8004e26:	9508      	str	r5, [sp, #32]
 8004e28:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8004e2c:	9507      	str	r5, [sp, #28]
 8004e2e:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8004e32:	9506      	str	r5, [sp, #24]
 8004e34:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8004e38:	9505      	str	r5, [sp, #20]
 8004e3a:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8004e3e:	9504      	str	r5, [sp, #16]
 8004e40:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8004e44:	9503      	str	r5, [sp, #12]
 8004e46:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8004e4a:	9502      	str	r5, [sp, #8]
 8004e4c:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8004e50:	9501      	str	r5, [sp, #4]
 8004e52:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8004e56:	9500      	str	r5, [sp, #0]
 8004e58:	f014 fe02 	bl	8019a60 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8004e5c:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8004e5e:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8004e60:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8004e62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004e64:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8004e66:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004e68:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8004e6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004e6c:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8004e6e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8004e70:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8004e72:	b00b      	add	sp, #44	@ 0x2c
 8004e74:	bd30      	pop	{r4, r5, pc}
 8004e76:	bf00      	nop
 8004e78:	0802d854 	.word	0x0802d854

08004e7c <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8004e7c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8004e7e:	4770      	bx	lr

08004e80 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8004e80:	4770      	bx	lr

08004e82 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8004e82:	4770      	bx	lr

08004e84 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8004e84:	4770      	bx	lr

08004e86 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8004e86:	4770      	bx	lr

08004e88 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8004e88:	4770      	bx	lr

08004e8a <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004e8a:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
    }
 8004e8e:	4770      	bx	lr

08004e90 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 8004e90:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8004e92:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 8004e94:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8004e96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e9a:	4362      	muls	r2, r4
 8004e9c:	4361      	muls	r1, r4
    }
 8004e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8004ea2:	4718      	bx	r3

08004ea4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 8004ea4:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8004ea8:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeX(float min, float max)
 8004eae:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8004eb0:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8004eb4:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
        if (fs >= 0)
 8004eb8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec0:	db1a      	blt.n	8004ef8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x54>
        {
            return (int)(fs + 0.5f);
 8004ec2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004ec6:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004eca:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8004ece:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8004ed2:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8004ed6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8004eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ede:	db1e      	blt.n	8004f1e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x7a>
            return (int)(fs + 0.5f);
 8004ee0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004ee4:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8004ee8:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8004eec:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8004ef0:	4623      	mov	r3, r4
    }
 8004ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8004ef6:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004ef8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8004efc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004f00:	ee17 3a10 	vmov	r3, s14
 8004f04:	3b01      	subs	r3, #1
 8004f06:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004f0a:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8004f0e:	ee30 0a26 	vadd.f32	s0, s0, s13
 8004f12:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004f16:	ee10 1a10 	vmov	r1, s0
 8004f1a:	4419      	add	r1, r3
 8004f1c:	e7d9      	b.n	8004ed2 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2e>
 8004f1e:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8004f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f26:	ee17 3a90 	vmov	r3, s15
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8004f30:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8004f34:	ee70 0a87 	vadd.f32	s1, s1, s14
 8004f38:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8004f3c:	ee10 2a90 	vmov	r2, s1
 8004f40:	441a      	add	r2, r3
 8004f42:	e7d5      	b.n	8004ef0 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>

08004f44 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 8004f44:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8004f46:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8004f48:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8004f4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f4e:	4362      	muls	r2, r4
    }
 8004f50:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8004f54:	4718      	bx	r3

08004f56 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 8004f56:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8004f5a:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
 8004f60:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8004f62:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8004f66:	f8d3 40b0 	ldr.w	r4, [r3, #176]	@ 0xb0
        if (fs >= 0)
 8004f6a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f72:	db0b      	blt.n	8004f8c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x36>
            return (int)(fs + 0.5f);
 8004f74:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004f78:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004f7c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004f80:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8004f84:	4623      	mov	r3, r4
    }
 8004f86:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8004f8a:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004f8c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f94:	ee17 3a90 	vmov	r3, s15
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004f9e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8004fa2:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004fa6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004faa:	ee10 2a10 	vmov	r2, s0
 8004fae:	441a      	add	r2, r3
 8004fb0:	e7e8      	b.n	8004f84 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>

08004fb2 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8004fb2:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8004fb4:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 8004fb6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8004fb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004fbc:	4362      	muls	r2, r4
 8004fbe:	4361      	muls	r1, r4
    }
 8004fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8004fc4:	4718      	bx	r3

08004fc6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 8004fc6:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8004fca:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8004fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeY(float min, float max)
 8004fd0:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8004fd2:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8004fd6:	f8d3 40bc 	ldr.w	r4, [r3, #188]	@ 0xbc
        if (fs >= 0)
 8004fda:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe2:	db1a      	blt.n	800501a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x54>
            return (int)(fs + 0.5f);
 8004fe4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004fe8:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004fec:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8004ff0:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8004ff4:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8004ff8:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8004ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005000:	db1e      	blt.n	8005040 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x7a>
            return (int)(fs + 0.5f);
 8005002:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005006:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800500a:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 800500e:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005012:	4623      	mov	r3, r4
    }
 8005014:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8005018:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800501a:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800501e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005022:	ee17 3a10 	vmov	r3, s14
 8005026:	3b01      	subs	r3, #1
 8005028:	ee30 0a66 	vsub.f32	s0, s0, s13
 800502c:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8005030:	ee30 0a26 	vadd.f32	s0, s0, s13
 8005034:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005038:	ee10 1a10 	vmov	r1, s0
 800503c:	4419      	add	r1, r3
 800503e:	e7d9      	b.n	8004ff4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2e>
 8005040:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8005044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005048:	ee17 3a90 	vmov	r3, s15
 800504c:	3b01      	subs	r3, #1
 800504e:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8005052:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8005056:	ee70 0a87 	vadd.f32	s1, s1, s14
 800505a:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 800505e:	ee10 2a90 	vmov	r2, s1
 8005062:	441a      	add	r2, r3
 8005064:	e7d5      	b.n	8005012 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>

08005066 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 8005066:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005068:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 800506a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800506c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005070:	4362      	muls	r2, r4
    }
 8005072:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8005076:	4718      	bx	r3

08005078 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 8005078:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 800507c:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 800507e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
 8005082:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8005084:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8005088:	f8d3 40c0 	ldr.w	r4, [r3, #192]	@ 0xc0
        if (fs >= 0)
 800508c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005094:	db0b      	blt.n	80050ae <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x36>
            return (int)(fs + 0.5f);
 8005096:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800509a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800509e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80050a2:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80050a6:	4623      	mov	r3, r4
    }
 80050a8:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80050ac:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80050ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80050b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050b6:	ee17 3a90 	vmov	r3, s15
 80050ba:	3b01      	subs	r3, #1
 80050bc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80050c0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80050c4:	ee30 0a07 	vadd.f32	s0, s0, s14
 80050c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80050cc:	ee10 2a10 	vmov	r2, s0
 80050d0:	441a      	add	r2, r3
 80050d2:	e7e8      	b.n	80050a6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>

080050d4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 80050d4:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 80050d8:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 80050da:	2b00      	cmp	r3, #0
 80050dc:	db07      	blt.n	80050ee <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 80050de:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 80050e2:	fb90 f0f2 	sdiv	r0, r0, r2
 80050e6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80050ea:	1040      	asrs	r0, r0, #1
 80050ec:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80050ee:	f06f 0101 	mvn.w	r1, #1
 80050f2:	fb01 2003 	mla	r0, r1, r3, r2
 80050f6:	3801      	subs	r0, #1
 80050f8:	fb90 f0f2 	sdiv	r0, r0, r2
 80050fc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005100:	1040      	asrs	r0, r0, #1
 8005102:	4240      	negs	r0, r0
    }
 8005104:	4770      	bx	lr

08005106 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8005106:	edd0 7a4b 	vldr	s15, [r0, #300]	@ 0x12c
 800510a:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 800510e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005112:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8005116:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800511a:	4770      	bx	lr

0800511c <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 800511c:	f8d0 012c 	ldr.w	r0, [r0, #300]	@ 0x12c
 8005120:	4770      	bx	lr

08005122 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 8005122:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
        return scaled2int(i, xScale);
 8005126:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        if (i >= 0)
 8005128:	2b00      	cmp	r3, #0
 800512a:	db07      	blt.n	800513c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 800512c:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8005130:	fb90 f0f2 	sdiv	r0, r0, r2
 8005134:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005138:	1040      	asrs	r0, r0, #1
 800513a:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800513c:	f06f 0101 	mvn.w	r1, #1
 8005140:	fb01 2003 	mla	r0, r1, r3, r2
 8005144:	3801      	subs	r0, #1
 8005146:	fb90 f0f2 	sdiv	r0, r0, r2
 800514a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800514e:	1040      	asrs	r0, r0, #1
 8005150:	4240      	negs	r0, r0
    }
 8005152:	4770      	bx	lr

08005154 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 8005154:	edd0 7a4c 	vldr	s15, [r0, #304]	@ 0x130
 8005158:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 800515c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005160:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8005164:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005168:	4770      	bx	lr

0800516a <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 800516a:	f8d0 0130 	ldr.w	r0, [r0, #304]	@ 0x130
 800516e:	4770      	bx	lr

08005170 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 8005170:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
        return scaled2int(i, yScale);
 8005174:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 8005176:	2b00      	cmp	r3, #0
 8005178:	db07      	blt.n	800518a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 800517a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 800517e:	fb90 f0f2 	sdiv	r0, r0, r2
 8005182:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005186:	1040      	asrs	r0, r0, #1
 8005188:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800518a:	f06f 0101 	mvn.w	r1, #1
 800518e:	fb01 2003 	mla	r0, r1, r3, r2
 8005192:	3801      	subs	r0, #1
 8005194:	fb90 f0f2 	sdiv	r0, r0, r2
 8005198:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800519c:	1040      	asrs	r0, r0, #1
 800519e:	4240      	negs	r0, r0
    }
 80051a0:	4770      	bx	lr

080051a2 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 80051a2:	edd0 7a4d 	vldr	s15, [r0, #308]	@ 0x134
 80051a6:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 80051aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ae:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 80051b2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80051b6:	4770      	bx	lr

080051b8 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 80051b8:	f8d0 0134 	ldr.w	r0, [r0, #308]	@ 0x134
 80051bc:	4770      	bx	lr

080051be <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 80051be:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
        return scaled2int(i, yScale);
 80051c2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        if (i >= 0)
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	db07      	blt.n	80051d8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 80051c8:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 80051cc:	fb90 f0f2 	sdiv	r0, r0, r2
 80051d0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80051d4:	1040      	asrs	r0, r0, #1
 80051d6:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80051d8:	f06f 0101 	mvn.w	r1, #1
 80051dc:	fb01 2003 	mla	r0, r1, r3, r2
 80051e0:	3801      	subs	r0, #1
 80051e2:	fb90 f0f2 	sdiv	r0, r0, r2
 80051e6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80051ea:	1040      	asrs	r0, r0, #1
 80051ec:	4240      	negs	r0, r0
    }
 80051ee:	4770      	bx	lr

080051f0 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 80051f0:	edd0 7a4e 	vldr	s15, [r0, #312]	@ 0x138
 80051f4:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 80051f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051fc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8005200:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005204:	4770      	bx	lr

08005206 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8005206:	f8d0 0138 	ldr.w	r0, [r0, #312]	@ 0x138
 800520a:	4770      	bx	lr

0800520c <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
 800520c:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
 800520e:	b570      	push	{r4, r5, r6, lr}
 8005210:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    virtual void setScale(int scale, bool updateData = false)
 8005216:	460d      	mov	r5, r1
 8005218:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
 800521a:	4798      	blx	r3
        setScaleY(scale, updateData);
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	4632      	mov	r2, r6
 8005220:	4629      	mov	r1, r5
 8005222:	4620      	mov	r0, r4
 8005224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
    }
 8005228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
 800522c:	4718      	bx	r3

0800522e <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @see setScale
     */
    virtual int getScale() const
    {
        return getScaleY();
 800522e:	6803      	ldr	r3, [r0, #0]
 8005230:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005234:	4718      	bx	r3

08005236 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
    {
        return getGraphRangeXMinScaled();
 8005236:	6803      	ldr	r3, [r0, #0]
 8005238:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800523c:	4718      	bx	r3

0800523e <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
    {
        return getGraphRangeXMaxScaled();
 800523e:	6803      	ldr	r3, [r0, #0]
 8005240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005244:	4718      	bx	r3

08005246 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8005246:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8005248:	2a00      	cmp	r2, #0
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 800524a:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800524c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
        return scaled2int(i, xScale);
 8005250:	6b04      	ldr	r4, [r0, #48]	@ 0x30
        if (i >= 0)
 8005252:	db0e      	blt.n	8005272 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x2c>
            return ((i * 2 + scale) / scale) / 2;
 8005254:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8005258:	fb92 f1f4 	sdiv	r1, r2, r4
 800525c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8005260:	1049      	asrs	r1, r1, #1
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8005262:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
    }
 8005266:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 800526a:	3a01      	subs	r2, #1
 800526c:	440a      	add	r2, r1
 800526e:	4249      	negs	r1, r1
 8005270:	4718      	bx	r3
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005272:	f06f 0101 	mvn.w	r1, #1
 8005276:	fb01 4102 	mla	r1, r1, r2, r4
 800527a:	3901      	subs	r1, #1
 800527c:	fb91 f1f4 	sdiv	r1, r1, r4
 8005280:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8005284:	1049      	asrs	r1, r1, #1
 8005286:	4249      	negs	r1, r1
 8005288:	e7eb      	b.n	8005262 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x1c>

0800528a <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
    {
        setXAxisFactor(scale);
 800528a:	6803      	ldr	r3, [r0, #0]
 800528c:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8005290:	4718      	bx	r3

08005292 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        return i * scale;
 8005292:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
    {
        setXAxisFactorScaled(int2scaledX(factor));
 8005294:	6803      	ldr	r3, [r0, #0]
 8005296:	4351      	muls	r1, r2
 8005298:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800529c:	4718      	bx	r3

0800529e <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
    }

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
    {
        setXAxisFactor(scale);
 800529e:	6803      	ldr	r3, [r0, #0]
 80052a0:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80052a4:	4718      	bx	r3

080052a6 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
 80052a6:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
    {
        setXAxisFactorScaled(float2scaledX(factor));
 80052aa:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80052ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
 80052b0:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
        const float fs = f * (float)scale;
 80052b4:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 80052b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80052bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c0:	db08      	blt.n	80052d4 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2e>
            return (int)(fs + 0.5f);
 80052c2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80052c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80052ca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80052ce:	ee17 1a90 	vmov	r1, s15
        setXAxisFactorScaled(float2scaledX(factor));
 80052d2:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80052d4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80052d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052dc:	ee17 3a90 	vmov	r3, s15
 80052e0:	3b01      	subs	r3, #1
 80052e2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80052e6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80052ea:	ee30 0a07 	vadd.f32	s0, s0, s14
 80052ee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80052f2:	ee10 1a10 	vmov	r1, s0
 80052f6:	4419      	add	r1, r3
 80052f8:	e7eb      	b.n	80052d2 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2c>

080052fa <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
 80052fa:	f8c0 113c 	str.w	r1, [r0, #316]	@ 0x13c
    }
 80052fe:	4770      	bx	lr

08005300 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
    {
        return getXAxisFactorAsInt();
 8005300:	6803      	ldr	r3, [r0, #0]
 8005302:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8005306:	4718      	bx	r3

08005308 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
    {
        return scaled2intX(getXAxisFactorScaled());
 8005308:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisFactorAsInt() const
 800530a:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisFactorScaled());
 800530c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
    virtual int getXAxisFactorAsInt() const
 8005310:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
 8005312:	4798      	blx	r3
        if (i >= 0)
 8005314:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8005316:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 8005318:	db07      	blt.n	800532a <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 800531a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800531e:	fb90 f0f3 	sdiv	r0, r0, r3
 8005322:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005326:	1040      	asrs	r0, r0, #1
    }
 8005328:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800532a:	f06f 0201 	mvn.w	r2, #1
 800532e:	fb02 3000 	mla	r0, r2, r0, r3
 8005332:	3801      	subs	r0, #1
 8005334:	fb90 f0f3 	sdiv	r0, r0, r3
 8005338:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800533c:	1040      	asrs	r0, r0, #1
 800533e:	4240      	negs	r0, r0
        return scaled2intX(getXAxisFactorScaled());
 8005340:	e7f2      	b.n	8005328 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x20>

08005342 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
    {
        return getXAxisFactorAsFloat();
 8005342:	6803      	ldr	r3, [r0, #0]
 8005344:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8005348:	4718      	bx	r3

0800534a <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
    {
        return scaled2floatX(getXAxisFactorScaled());
 800534a:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisFactorAsFloat() const
 800534c:	b510      	push	{r4, lr}
 800534e:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
 8005350:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8005354:	4798      	blx	r3
 8005356:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 800535a:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 800535e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005362:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8005366:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800536a:	bd10      	pop	{r4, pc}

0800536c <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
 800536c:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
 8005370:	4770      	bx	lr

08005372 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        return i * scale;
 8005372:	6b02      	ldr	r2, [r0, #48]	@ 0x30
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 8005374:	6803      	ldr	r3, [r0, #0]
 8005376:	4351      	muls	r1, r2
 8005378:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800537c:	4718      	bx	r3

0800537e <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
 800537e:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
    }

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 8005382:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8005384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8005388:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
        const float fs = f * (float)scale;
 800538c:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8005390:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005398:	db08      	blt.n	80053ac <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2e>
            return (int)(fs + 0.5f);
 800539a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800539e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80053a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80053a6:	ee17 1a90 	vmov	r1, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 80053aa:	4710      	bx	r2
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80053ac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80053b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053b4:	ee17 3a90 	vmov	r3, s15
 80053b8:	3b01      	subs	r3, #1
 80053ba:	ee30 0a47 	vsub.f32	s0, s0, s14
 80053be:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80053c2:	ee30 0a07 	vadd.f32	s0, s0, s14
 80053c6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80053ca:	ee10 1a10 	vmov	r1, s0
 80053ce:	4419      	add	r1, r3
 80053d0:	e7eb      	b.n	80053aa <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2c>

080053d2 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
 80053d2:	f8c0 1140 	str.w	r1, [r0, #320]	@ 0x140
    }
 80053d6:	4770      	bx	lr

080053d8 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
    {
        return scaled2intX(getXAxisOffsetScaled());
 80053d8:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisOffsetAsInt() const
 80053da:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisOffsetScaled());
 80053dc:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
    virtual int getXAxisOffsetAsInt() const
 80053e0:	4604      	mov	r4, r0
        return scaled2intX(getXAxisOffsetScaled());
 80053e2:	4798      	blx	r3
        if (i >= 0)
 80053e4:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 80053e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
        if (i >= 0)
 80053e8:	db07      	blt.n	80053fa <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 80053ea:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80053ee:	fb90 f0f3 	sdiv	r0, r0, r3
 80053f2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80053f6:	1040      	asrs	r0, r0, #1
    }
 80053f8:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80053fa:	f06f 0201 	mvn.w	r2, #1
 80053fe:	fb02 3000 	mla	r0, r2, r0, r3
 8005402:	3801      	subs	r0, #1
 8005404:	fb90 f0f3 	sdiv	r0, r0, r3
 8005408:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800540c:	1040      	asrs	r0, r0, #1
 800540e:	4240      	negs	r0, r0
        return scaled2intX(getXAxisOffsetScaled());
 8005410:	e7f2      	b.n	80053f8 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x20>

08005412 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
    {
        return scaled2floatX(getXAxisOffsetScaled());
 8005412:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisOffsetAsFloat() const
 8005414:	b510      	push	{r4, lr}
 8005416:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisOffsetScaled());
 8005418:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 800541c:	4798      	blx	r3
 800541e:	ee07 0a90 	vmov	s15, r0
        return (float)i / (float)scale;
 8005422:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 8005426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800542a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 800542e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005432:	bd10      	pop	{r4, pc}

08005434 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
 8005434:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8005438:	4770      	bx	lr

0800543a <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800543a:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 800543c:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
 800543e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8005440:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 8005444:	b510      	push	{r4, lr}
 8005446:	4604      	mov	r4, r0
        if (i >= 0)
 8005448:	db0e      	blt.n	8005468 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x2e>
            return ((i * 2 + scale) / scale) / 2;
 800544a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800544e:	fb91 f1f2 	sdiv	r1, r1, r2
 8005452:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8005456:	1049      	asrs	r1, r1, #1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8005458:	b209      	sxth	r1, r1
 800545a:	4620      	mov	r0, r4
 800545c:	4798      	blx	r3
 800545e:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 8005462:	fb02 3000 	mla	r0, r2, r0, r3
 8005466:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8005468:	f06f 0001 	mvn.w	r0, #1
 800546c:	fb00 2101 	mla	r1, r0, r1, r2
 8005470:	3901      	subs	r1, #1
 8005472:	fb91 f1f2 	sdiv	r1, r1, r2
 8005476:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800547a:	1049      	asrs	r1, r1, #1
 800547c:	4249      	negs	r1, r1
 800547e:	e7eb      	b.n	8005458 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x1e>

08005480 <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
 8005480:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8005482:	4770      	bx	lr

08005484 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
 8005484:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8005486:	4770      	bx	lr

08005488 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
    {
        setXAxisFactorScaled(scale);
 8005488:	6803      	ldr	r3, [r0, #0]
 800548a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800548e:	4718      	bx	r3

08005490 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
 8005490:	6803      	ldr	r3, [r0, #0]
 8005492:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8005496:	4718      	bx	r3

08005498 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
 8005498:	6b02      	ldr	r2, [r0, #48]	@ 0x30

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(int2scaledX(index));
 800549a:	6803      	ldr	r3, [r0, #0]
 800549c:	4351      	muls	r1, r2
 800549e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80054a2:	4718      	bx	r3

080054a4 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80054a4:	6803      	ldr	r3, [r0, #0]
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80054a6:	b570      	push	{r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80054a8:	f8d3 5118 	ldr.w	r5, [r3, #280]	@ 0x118
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80054ac:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80054ae:	f8d0 6144 	ldr.w	r6, [r0, #324]	@ 0x144
 80054b2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80054b6:	4798      	blx	r3
 80054b8:	462b      	mov	r3, r5
 80054ba:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 80054be:	4620      	mov	r0, r4
    }
 80054c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80054c4:	4718      	bx	r3

080054c6 <_ZNK8touchgfx15GraphScrollData9dataIndexEs>:

    virtual void beforeAddValue();

    virtual int16_t addValue(int value);

    virtual int16_t dataIndex(int16_t screenIndex) const
 80054c6:	4603      	mov	r3, r0
 80054c8:	4608      	mov	r0, r1
    {
        return usedCapacity < maxCapacity ? screenIndex : (screenIndex + current) % maxCapacity;
 80054ca:	f9b3 211c 	ldrsh.w	r2, [r3, #284]	@ 0x11c
 80054ce:	f9b3 111e 	ldrsh.w	r1, [r3, #286]	@ 0x11e
 80054d2:	4291      	cmp	r1, r2
 80054d4:	db07      	blt.n	80054e6 <_ZNK8touchgfx15GraphScrollData9dataIndexEs+0x20>
 80054d6:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	@ 0x14c
 80054da:	1819      	adds	r1, r3, r0
 80054dc:	fb91 f3f2 	sdiv	r3, r1, r2
 80054e0:	fb02 1113 	mls	r1, r2, r3, r1
 80054e4:	b208      	sxth	r0, r1
    }
 80054e6:	4770      	bx	lr

080054e8 <_ZNK8touchgfx15GraphScrollData10indexToXQ5Es>:

private:
    virtual CWRUtil::Q5 indexToXQ5(int16_t index) const
    {
        return CWRUtil::toQ5(index);
    }
 80054e8:	0148      	lsls	r0, r1, #5
 80054ea:	4770      	bx	lr

080054ec <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
    {
        color = newColor;
 80054ec:	62c1      	str	r1, [r0, #44]	@ 0x2c
    }
 80054ee:	4770      	bx	lr

080054f0 <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     * @see setColor
     */
    virtual colortype getColor() const
    {
        return color;
    }
 80054f0:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80054f2:	4770      	bx	lr

080054f4 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
    {
        return true;
    }
 80054f4:	2001      	movs	r0, #1
 80054f6:	4770      	bx	lr

080054f8 <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
    {
    }
 80054f8:	4770      	bx	lr

080054fa <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
    {
    }
 80054fa:	4770      	bx	lr

080054fc <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 80054fc:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80054fe:	b118      	cbz	r0, 8005508 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 8005500:	6803      	ldr	r3, [r0, #0]
 8005502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005506:	4718      	bx	r3
    }
 8005508:	4770      	bx	lr

0800550a <_ZNK8touchgfx17GraphElementGridX13enclosingAreaEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800550a:	f8b2 111a 	ldrh.w	r1, [r2, #282]	@ 0x11a
    {
        return convertToGraphScaleX(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 800550e:	b530      	push	{r4, r5, lr}
        return topPadding;
 8005510:	f9b2 4114 	ldrsh.w	r4, [r2, #276]	@ 0x114
        return rect.width;
 8005514:	f9b2 5040 	ldrsh.w	r5, [r2, #64]	@ 0x40
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8005518:	4421      	add	r1, r4
 800551a:	f8b2 2042 	ldrh.w	r2, [r2, #66]	@ 0x42
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800551e:	8044      	strh	r4, [r0, #2]
 8005520:	1a52      	subs	r2, r2, r1
 8005522:	2100      	movs	r1, #0
 8005524:	8085      	strh	r5, [r0, #4]
 8005526:	8001      	strh	r1, [r0, #0]
 8005528:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(0, graph->getGraphAreaPaddingTop(), graph->getGraphAreaWidthIncludingPadding(), graph->getGraphAreaHeight());
    }
 800552a:	bd30      	pop	{r4, r5, pc}

0800552c <_ZNK8touchgfx17GraphElementGridX8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 800552c:	b510      	push	{r4, lr}
 800552e:	8042      	strh	r2, [r0, #2]
 8005530:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 8005534:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8005538:	8004      	strh	r4, [r0, #0]
 800553a:	8082      	strh	r2, [r0, #4]
 800553c:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(pos, start, width, length);
    }
 800553e:	bd10      	pop	{r4, pc}

08005540 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMinScaled();
 8005540:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8005542:	4608      	mov	r0, r1
        return graph->getGraphRangeXMinScaled();
 8005544:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005548:	4718      	bx	r3

0800554a <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMaxScaled();
 800554a:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800554c:	4608      	mov	r0, r1
        return graph->getGraphRangeXMaxScaled();
 800554e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005552:	4718      	bx	r3

08005554 <_ZNK8touchgfx17GraphElementGridX17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 8005554:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	@ 0x114
 8005558:	4770      	bx	lr

0800555a <_ZNK8touchgfx17GraphElementGridX18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 800555a:	f8b1 3114 	ldrh.w	r3, [r1, #276]	@ 0x114
 800555e:	f8b1 211a 	ldrh.w	r2, [r1, #282]	@ 0x11a
 8005562:	f8b1 0042 	ldrh.w	r0, [r1, #66]	@ 0x42
 8005566:	4413      	add	r3, r2
 8005568:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 800556a:	b200      	sxth	r0, r0
 800556c:	4770      	bx	lr

0800556e <_ZNK8touchgfx17GraphElementGridX20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800556e:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	@ 0x116
 8005572:	4770      	bx	lr

08005574 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8005574:	f8b1 3116 	ldrh.w	r3, [r1, #278]	@ 0x116
 8005578:	f8b1 2118 	ldrh.w	r2, [r1, #280]	@ 0x118
 800557c:	f8b1 0040 	ldrh.w	r0, [r1, #64]	@ 0x40
 8005580:	4413      	add	r3, r2
 8005582:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 8005584:	b200      	sxth	r0, r0
 8005586:	4770      	bx	lr

08005588 <_ZNK8touchgfx17GraphElementGridX15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenXQ5(x);
 8005588:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 800558a:	4608      	mov	r0, r1
        return graph->valueToScreenXQ5(x);
 800558c:	4611      	mov	r1, r2
 800558e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005592:	4718      	bx	r3

08005594 <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 8005594:	b530      	push	{r4, r5, lr}
        return leftPadding;
 8005596:	f9b2 5116 	ldrsh.w	r5, [r2, #278]	@ 0x116
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800559a:	f8b2 4118 	ldrh.w	r4, [r2, #280]	@ 0x118
 800559e:	f8b2 1040 	ldrh.w	r1, [r2, #64]	@ 0x40
 80055a2:	442c      	add	r4, r5
        return rect.height;
 80055a4:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	@ 0x42
 80055a8:	8005      	strh	r5, [r0, #0]
 80055aa:	1b09      	subs	r1, r1, r4
 80055ac:	2400      	movs	r4, #0
 80055ae:	80c2      	strh	r2, [r0, #6]
 80055b0:	8044      	strh	r4, [r0, #2]
 80055b2:	8081      	strh	r1, [r0, #4]
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
    }
 80055b4:	bd30      	pop	{r4, r5, pc}

080055b6 <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:
 80055b6:	8002      	strh	r2, [r0, #0]
 80055b8:	8083      	strh	r3, [r0, #4]
 80055ba:	f9bd 2000 	ldrsh.w	r2, [sp]
 80055be:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80055c2:	8042      	strh	r2, [r0, #2]
 80055c4:	80c3      	strh	r3, [r0, #6]

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
    {
        return Rect(start, pos, length, width);
    }
 80055c6:	4770      	bx	lr

080055c8 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMinScaled();
 80055c8:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 80055ca:	4608      	mov	r0, r1
        return graph->getGraphRangeYMinScaled();
 80055cc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80055d0:	4718      	bx	r3

080055d2 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMaxScaled();
 80055d2:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 80055d4:	4608      	mov	r0, r1
        return graph->getGraphRangeYMaxScaled();
 80055d6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80055da:	4718      	bx	r3

080055dc <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 80055dc:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	@ 0x116
 80055e0:	4770      	bx	lr

080055e2 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 80055e2:	f8b1 3116 	ldrh.w	r3, [r1, #278]	@ 0x116
 80055e6:	f8b1 2118 	ldrh.w	r2, [r1, #280]	@ 0x118
 80055ea:	f8b1 0040 	ldrh.w	r0, [r1, #64]	@ 0x40
 80055ee:	4413      	add	r3, r2
 80055f0:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 80055f2:	b200      	sxth	r0, r0
 80055f4:	4770      	bx	lr

080055f6 <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 80055f6:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	@ 0x114
 80055fa:	4770      	bx	lr

080055fc <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80055fc:	f8b1 3114 	ldrh.w	r3, [r1, #276]	@ 0x114
 8005600:	f8b1 211a 	ldrh.w	r2, [r1, #282]	@ 0x11a
 8005604:	f8b1 0042 	ldrh.w	r0, [r1, #66]	@ 0x42
 8005608:	4413      	add	r3, r2
 800560a:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 800560c:	b200      	sxth	r0, r0
 800560e:	4770      	bx	lr

08005610 <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenYQ5(y);
 8005610:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8005612:	4608      	mov	r0, r1
        return graph->valueToScreenYQ5(y);
 8005614:	4611      	mov	r1, r2
 8005616:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800561a:	4718      	bx	r3

0800561c <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 800561c:	4770      	bx	lr

0800561e <_ZN8touchgfx11GraphScrollILs160EED1Ev>:
 * the new values added to the graph.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphScroll : public GraphScrollData
 800561e:	4770      	bx	lr

08005620 <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 8005620:	4770      	bx	lr

08005622 <_ZN8touchgfx17GraphElementGridXD1Ev>:
class GraphElementGridX : public GraphElementGridBase
 8005622:	4770      	bx	lr

08005624 <_ZN8touchgfx17GraphElementGridXD0Ev>:
 8005624:	b510      	push	{r4, lr}
 8005626:	4604      	mov	r4, r0
 8005628:	2140      	movs	r1, #64	@ 0x40
 800562a:	f024 fbc6 	bl	8029dba <_ZdlPvj>
 800562e:	4620      	mov	r0, r4
 8005630:	bd10      	pop	{r4, pc}

08005632 <_ZN8touchgfx17GraphElementGridYD0Ev>:
class GraphElementGridY : public GraphElementGridBase
 8005632:	b510      	push	{r4, lr}
 8005634:	4604      	mov	r4, r0
 8005636:	2140      	movs	r1, #64	@ 0x40
 8005638:	f024 fbbf 	bl	8029dba <_ZdlPvj>
 800563c:	4620      	mov	r0, r4
 800563e:	bd10      	pop	{r4, pc}

08005640 <_ZN8touchgfx11GraphScrollILs160EED0Ev>:
 8005640:	b510      	push	{r4, lr}
 8005642:	4604      	mov	r4, r0
 8005644:	f44f 7174 	mov.w	r1, #976	@ 0x3d0
 8005648:	f024 fbb7 	bl	8029dba <_ZdlPvj>
 800564c:	4620      	mov	r0, r4
 800564e:	bd10      	pop	{r4, pc}

08005650 <_ZNK8touchgfx17GraphElementGridX30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	4603      	mov	r3, r0
 8005654:	4608      	mov	r0, r1
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 8005656:	e9d3 540c 	ldrd	r5, r4, [r3, #48]	@ 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 800565a:	680b      	ldr	r3, [r1, #0]
 800565c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005660:	4798      	blx	r3
 8005662:	4629      	mov	r1, r5
 8005664:	4602      	mov	r2, r0
 8005666:	4620      	mov	r0, r4
    }
 8005668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 800566c:	f00f baee 	b.w	8014c4c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08005670 <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	4603      	mov	r3, r0
 8005674:	4608      	mov	r0, r1
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 8005676:	e9d3 540c 	ldrd	r5, r4, [r3, #48]	@ 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 800567a:	680b      	ldr	r3, [r1, #0]
 800567c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005680:	4798      	blx	r3
 8005682:	4629      	mov	r1, r5
 8005684:	4602      	mov	r2, r0
 8005686:	4620      	mov	r0, r4
    }
 8005688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 800568c:	f00f bade 	b.w	8014c4c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08005690 <_ZN15Screen1ViewBaseD1Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8005690:	4b03      	ldr	r3, [pc, #12]	@ (80056a0 <_ZN15Screen1ViewBaseD1Ev+0x10>)
 8005692:	b510      	push	{r4, lr}
 8005694:	4604      	mov	r4, r0
 8005696:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8005698:	f011 f916 	bl	80168c8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 800569c:	4620      	mov	r0, r4
 800569e:	bd10      	pop	{r4, pc}
 80056a0:	0802dce8 	.word	0x0802dce8

080056a4 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80056a4:	4b06      	ldr	r3, [pc, #24]	@ (80056c0 <_ZN15Screen1ViewBaseD0Ev+0x1c>)
 80056a6:	b510      	push	{r4, lr}
 80056a8:	4604      	mov	r4, r0
 80056aa:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 80056ac:	f011 f90c 	bl	80168c8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 80056b0:	f243 41d8 	movw	r1, #13528	@ 0x34d8
 80056b4:	4620      	mov	r0, r4
 80056b6:	f024 fb80 	bl	8029dba <_ZdlPvj>
 80056ba:	4620      	mov	r0, r4
 80056bc:	bd10      	pop	{r4, pc}
 80056be:	bf00      	nop
 80056c0:	0802dce8 	.word	0x0802dce8

080056c4 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 80056c4:	b508      	push	{r3, lr}
        if (alpha > 0)
 80056c6:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80056ca:	b10b      	cbz	r3, 80056d0 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 80056cc:	f7fd f823 	bl	8002716 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80056d0:	bd08      	pop	{r3, pc}
	...

080056d4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80056d4:	1e0a      	subs	r2, r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 80056d6:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
 80056d8:	db03      	blt.n	80056e2 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0xe>
 80056da:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	@ 0x11e
 80056de:	4294      	cmp	r4, r2
 80056e0:	dc06      	bgt.n	80056f0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x1c>
 80056e2:	4b08      	ldr	r3, [pc, #32]	@ (8005704 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>)
 80056e4:	f240 6139 	movw	r1, #1593	@ 0x639
 80056e8:	4a07      	ldr	r2, [pc, #28]	@ (8005708 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x34>)
 80056ea:	4808      	ldr	r0, [pc, #32]	@ (800570c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x38>)
 80056ec:	f024 fedc 	bl	802a4a8 <__assert_func>
        return yValues[dataIndex(index)];
 80056f0:	6803      	ldr	r3, [r0, #0]
 80056f2:	f8d0 4144 	ldr.w	r4, [r0, #324]	@ 0x144
 80056f6:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80056fa:	4798      	blx	r3
    }
 80056fc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8005700:	bd10      	pop	{r4, pc}
 8005702:	bf00      	nop
 8005704:	0802d8b4 	.word	0x0802d8b4
 8005708:	0802d8d7 	.word	0x0802d8d7
 800570c:	0802d926 	.word	0x0802d926

08005710 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8005710:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 8005712:	b510      	push	{r4, lr}
 8005714:	4604      	mov	r4, r0
        assert(index >= 0 && index < usedCapacity);
 8005716:	db03      	blt.n	8005720 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x10>
 8005718:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
 800571c:	429a      	cmp	r2, r3
 800571e:	dc06      	bgt.n	800572e <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x1e>
 8005720:	4b07      	ldr	r3, [pc, #28]	@ (8005740 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
 8005722:	f240 6133 	movw	r1, #1587	@ 0x633
 8005726:	4a07      	ldr	r2, [pc, #28]	@ (8005744 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
 8005728:	4807      	ldr	r0, [pc, #28]	@ (8005748 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
 800572a:	f024 febd 	bl	802a4a8 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 800572e:	6803      	ldr	r3, [r0, #0]
 8005730:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8005734:	4798      	blx	r3
 8005736:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	@ 0x13c
    }
 800573a:	fb02 3000 	mla	r0, r2, r0, r3
 800573e:	bd10      	pop	{r4, pc}
 8005740:	0802d8b4 	.word	0x0802d8b4
 8005744:	0802d983 	.word	0x0802d983
 8005748:	0802d926 	.word	0x0802d926

0800574c <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800574c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005750:	461d      	mov	r5, r3
        setX(x);
 8005752:	6803      	ldr	r3, [r0, #0]
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8005754:	4604      	mov	r4, r0
 8005756:	4616      	mov	r6, r2
        setX(x);
 8005758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800575a:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
        setX(x);
 800575e:	4798      	blx	r3
        setY(y);
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	4631      	mov	r1, r6
 8005764:	4620      	mov	r0, r4
 8005766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005768:	4798      	blx	r3
        setWidth(width);
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	4629      	mov	r1, r5
 800576e:	4620      	mov	r0, r4
 8005770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005772:	4798      	blx	r3
        setHeight(height);
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	4639      	mov	r1, r7
 8005778:	4620      	mov	r0, r4
 800577a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 800577c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setHeight(height);
 8005780:	4718      	bx	r3
	...

08005784 <_ZN8touchgfx3BoxC1Ev>:
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8005784:	4a09      	ldr	r2, [pc, #36]	@ (80057ac <_ZN8touchgfx3BoxC1Ev+0x28>)
          touchable(false),
 8005786:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800578a:	6002      	str	r2, [r0, #0]
        : x(0), y(0), width(0), height(0)
 800578c:	2200      	movs	r2, #0
 800578e:	8481      	strh	r1, [r0, #36]	@ 0x24
 8005790:	21ff      	movs	r1, #255	@ 0xff
        : color(col)
 8005792:	6282      	str	r2, [r0, #40]	@ 0x28
 8005794:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
        : x(0), y(0), width(0), height(0)
 8005798:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800579c:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 80057a0:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 80057a4:	e9c0 2207 	strd	r2, r2, [r0, #28]
    {
    }
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	0802ed9c 	.word	0x0802ed9c

080057b0 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 80057b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 80057b2:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 80057b4:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 80057b6:	f014 fa51 	bl	8019c5c <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 80057ba:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80057bc:	462a      	mov	r2, r5
 80057be:	9901      	ldr	r1, [sp, #4]
 80057c0:	ea4f 1440 	mov.w	r4, r0, lsl #5
 80057c4:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 80057c8:	db04      	blt.n	80057d4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80057ca:	f014 fa66 	bl	8019c9a <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 80057ce:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 80057d0:	b003      	add	sp, #12
 80057d2:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80057d4:	f014 fa61 	bl	8019c9a <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 80057d8:	1a20      	subs	r0, r4, r0
        explicit Q5(int i)
 80057da:	e7f9      	b.n	80057d0 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

080057dc <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 80057dc:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80057de:	f8b0 311a 	ldrh.w	r3, [r0, #282]	@ 0x11a
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 80057e2:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80057e4:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	@ 0x114
 80057e8:	f8b0 5042 	ldrh.w	r5, [r0, #66]	@ 0x42
 80057ec:	4423      	add	r3, r4
 80057ee:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 80057f0:	b22d      	sxth	r5, r5
 80057f2:	442c      	add	r4, r5
 80057f4:	1e69      	subs	r1, r5, #1
 80057f6:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	@ 0x134
 80057fa:	3c01      	subs	r4, #1
 80057fc:	1ad2      	subs	r2, r2, r3
 80057fe:	1af0      	subs	r0, r6, r3
 8005800:	f7ff ffd6 	bl	80057b0 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 8005804:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8005808:	bd70      	pop	{r4, r5, r6, pc}

0800580a <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 800580a:	b538      	push	{r3, r4, r5, lr}
 800580c:	4604      	mov	r4, r0
 800580e:	460d      	mov	r5, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8005810:	f8b4 3116 	ldrh.w	r3, [r4, #278]	@ 0x116
 8005814:	f8b4 1118 	ldrh.w	r1, [r4, #280]	@ 0x118
 8005818:	440b      	add	r3, r1
 800581a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800581e:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 8005820:	e9d0 024b 	ldrd	r0, r2, [r0, #300]	@ 0x12c
 8005824:	b209      	sxth	r1, r1
 8005826:	1a12      	subs	r2, r2, r0
 8005828:	1a28      	subs	r0, r5, r0
 800582a:	3901      	subs	r1, #1
 800582c:	f7ff ffc0 	bl	80057b0 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 8005830:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
    }
 8005834:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005838:	bd38      	pop	{r3, r4, r5, pc}
	...

0800583c <_ZN8touchgfx20GraphElementGridBaseC1Ev>:
    GraphElementGridBase()
 800583c:	b510      	push	{r4, lr}
 800583e:	4604      	mov	r4, r0
        : CanvasWidget()
 8005840:	f00e fdec 	bl	801441c <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8005844:	4a06      	ldr	r2, [pc, #24]	@ (8005860 <_ZN8touchgfx20GraphElementGridBaseC1Ev+0x24>)
        : color(col)
 8005846:	2300      	movs	r3, #0
 8005848:	210a      	movs	r1, #10
    }
 800584a:	4620      	mov	r0, r4
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800584c:	6022      	str	r2, [r4, #0]
 800584e:	2201      	movs	r2, #1
 8005850:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005852:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 8005856:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8005858:	e9c4 210c 	strd	r2, r1, [r4, #48]	@ 0x30
    }
 800585c:	bd10      	pop	{r4, pc}
 800585e:	bf00      	nop
 8005860:	0802ec40 	.word	0x0802ec40

08005864 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static uint16_t getNativeColor(colortype color)
    {
        return ((color >> 8) & 0xF800) | ((color >> 5) & 0x07E0) | ((color >> 3) & 0x001F);
 8005864:	094a      	lsrs	r2, r1, #5
 8005866:	4b06      	ldr	r3, [pc, #24]	@ (8005880 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 8005868:	60c1      	str	r1, [r0, #12]
 800586a:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 800586e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8005872:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8005876:	4313      	orrs	r3, r2
 8005878:	430b      	orrs	r3, r1
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        color565 = LCD16bpp::getNativeColor(painterColor);
 800587a:	8203      	strh	r3, [r0, #16]
    }
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	fffff800 	.word	0xfffff800

08005884 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 8005884:	f1a0 0008 	sub.w	r0, r0, #8
 8005888:	e7ec      	b.n	8005864 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 800588a:	bf00      	nop

0800588c <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 800588c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005890:	4604      	mov	r4, r0
 8005892:	b08b      	sub	sp, #44	@ 0x2c
        : presenter(0)
 8005894:	2600      	movs	r6, #0
 8005896:	f014 fbab 	bl	8019ff0 <_ZN8touchgfx6ScreenC1Ev>
 800589a:	46a1      	mov	r9, r4
 800589c:	4be9      	ldr	r3, [pc, #932]	@ (8005c44 <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
 800589e:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 80058a2:	f104 0598 	add.w	r5, r4, #152	@ 0x98
 80058a6:	63e6      	str	r6, [r4, #60]	@ 0x3c
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 80058a8:	2701      	movs	r7, #1
 80058aa:	f849 3b40 	str.w	r3, [r9], #64
 80058ae:	4648      	mov	r0, r9
 80058b0:	f7ff ff68 	bl	8005784 <_ZN8touchgfx3BoxC1Ev>
 80058b4:	4658      	mov	r0, fp
 80058b6:	f7ff ff65 	bl	8005784 <_ZN8touchgfx3BoxC1Ev>
 80058ba:	21a0      	movs	r1, #160	@ 0xa0
 80058bc:	4628      	mov	r0, r5
class GraphElementGridX : public GraphElementGridBase
 80058be:	f8df a3b8 	ldr.w	sl, [pc, #952]	@ 8005c78 <_ZN15Screen1ViewBaseC1Ev+0x3ec>
 80058c2:	f00f f95f 	bl	8014b84 <_ZN8touchgfx17AbstractDataGraphC1Es>
 80058c6:	4be0      	ldr	r3, [pc, #896]	@ (8005c48 <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80058c8:	229f      	movs	r2, #159	@ 0x9f
 80058ca:	4631      	mov	r1, r6
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 80058cc:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
{
public:
    GraphScroll()
        : GraphScrollData(CAPACITY, y)
 80058d0:	f504 73f4 	add.w	r3, r4, #488	@ 0x1e8
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80058d4:	4628      	mov	r0, r5
class GraphElementGridY : public GraphElementGridBase
 80058d6:	f8df 83a4 	ldr.w	r8, [pc, #932]	@ 8005c7c <_ZN15Screen1ViewBaseC1Ev+0x3f0>
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 80058da:	e9c4 3677 	strd	r3, r6, [r4, #476]	@ 0x1dc
 80058de:	e9c4 7675 	strd	r7, r6, [r4, #468]	@ 0x1d4
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80058e2:	f7ff fad5 	bl	8004e90 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 80058e6:	4bd9      	ldr	r3, [pc, #868]	@ (8005c4c <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
        : DynamicDataGraph(capacity, values), current(0)
 80058e8:	f8a4 61e4 	strh.w	r6, [r4, #484]	@ 0x1e4
        : GraphScrollData(CAPACITY, y)
 80058ec:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80058f0:	f504 638d 	add.w	r3, r4, #1128	@ 0x468
class GraphElementGridX : public GraphElementGridBase
 80058f4:	4618      	mov	r0, r3
 80058f6:	9305      	str	r3, [sp, #20]
 80058f8:	f7ff ffa0 	bl	800583c <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 80058fc:	f504 6395 	add.w	r3, r4, #1192	@ 0x4a8
 8005900:	f8c4 a468 	str.w	sl, [r4, #1128]	@ 0x468
class GraphElementGridY : public GraphElementGridBase
 8005904:	4618      	mov	r0, r3
 8005906:	9306      	str	r3, [sp, #24]
 8005908:	f7ff ff98 	bl	800583c <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 800590c:	f504 639d 	add.w	r3, r4, #1256	@ 0x4e8
 8005910:	f8c4 84a8 	str.w	r8, [r4, #1192]	@ 0x4a8
class GraphElementGridX : public GraphElementGridBase
 8005914:	4618      	mov	r0, r3
 8005916:	9302      	str	r3, [sp, #8]
 8005918:	f7ff ff90 	bl	800583c <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 800591c:	f504 63a5 	add.w	r3, r4, #1320	@ 0x528
 8005920:	f8c4 a4e8 	str.w	sl, [r4, #1256]	@ 0x4e8
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 8005924:	f04f 0a02 	mov.w	sl, #2
class GraphElementGridY : public GraphElementGridBase
 8005928:	4618      	mov	r0, r3
 800592a:	9303      	str	r3, [sp, #12]
 800592c:	f7ff ff86 	bl	800583c <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 8005930:	f504 63ad 	add.w	r3, r4, #1384	@ 0x568
 8005934:	f8c4 8528 	str.w	r8, [r4, #1320]	@ 0x528
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8005938:	f04f 487f 	mov.w	r8, #4278190080	@ 0xff000000
        : CanvasWidget()
 800593c:	4618      	mov	r0, r3
 800593e:	9307      	str	r3, [sp, #28]
 8005940:	f00e fd6c 	bl	801441c <_ZN8touchgfx12CanvasWidgetC1Ev>
        : typedTextId(id)
 8005944:	4bc2      	ldr	r3, [pc, #776]	@ (8005c50 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
 8005946:	f8c4 6594 	str.w	r6, [r4, #1428]	@ 0x594
 800594a:	f8c4 35a0 	str.w	r3, [r4, #1440]	@ 0x5a0
 800594e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
class GraphLabelsBase : public AbstractGraphDecoration
{
public:
    GraphLabelsBase()
        : AbstractGraphDecoration(),
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 8005952:	f8c4 7598 	str.w	r7, [r4, #1432]	@ 0x598
 8005956:	f8a4 35a4 	strh.w	r3, [r4, #1444]	@ 0x5a4
 800595a:	232e      	movs	r3, #46	@ 0x2e
 800595c:	f8c4 659c 	str.w	r6, [r4, #1436]	@ 0x59c
 8005960:	f8a4 35ac 	strh.w	r3, [r4, #1452]	@ 0x5ac

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 8005964:	4bbb      	ldr	r3, [pc, #748]	@ (8005c54 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 8005966:	f884 65a8 	strb.w	r6, [r4, #1448]	@ 0x5a8
class GraphLabelsY : public GraphLabelsBase
 800596a:	f8c4 3568 	str.w	r3, [r4, #1384]	@ 0x568
 800596e:	f204 53b4 	addw	r3, r4, #1460	@ 0x5b4
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 8005972:	f8a4 65aa 	strh.w	r6, [r4, #1450]	@ 0x5aa
 8005976:	4618      	mov	r0, r3
 8005978:	f8c4 65b0 	str.w	r6, [r4, #1456]	@ 0x5b0
 800597c:	9308      	str	r3, [sp, #32]
 800597e:	f00e fd4d 	bl	801441c <_ZN8touchgfx12CanvasWidgetC1Ev>
        : lineWidth(2)
 8005982:	4bb5      	ldr	r3, [pc, #724]	@ (8005c58 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
 8005984:	f884 a5e0 	strb.w	sl, [r4, #1504]	@ 0x5e0
 8005988:	f8c4 35b4 	str.w	r3, [r4, #1460]	@ 0x5b4
 800598c:	f204 53e4 	addw	r3, r4, #1508	@ 0x5e4
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 8005990:	4618      	mov	r0, r3
 8005992:	9304      	str	r3, [sp, #16]
 8005994:	f7fd f836 	bl	8002a04 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8005998:	4bb0      	ldr	r3, [pc, #704]	@ (8005c5c <_ZN15Screen1ViewBaseC1Ev+0x3d0>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800599a:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
 800599e:	f504 60bf 	add.w	r0, r4, #1528	@ 0x5f8
 80059a2:	f8c4 35e4 	str.w	r3, [r4, #1508]	@ 0x5e4
 80059a6:	3324      	adds	r3, #36	@ 0x24
 80059a8:	f8c4 65f0 	str.w	r6, [r4, #1520]	@ 0x5f0
 80059ac:	f8c4 35ec 	str.w	r3, [r4, #1516]	@ 0x5ec
 80059b0:	f010 ff80 	bl	80168b4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 80059b4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80059b8:	4632      	mov	r2, r6
 80059ba:	4648      	mov	r0, r9
 80059bc:	4631      	mov	r1, r6
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80059c4:	f7ff fec2 	bl	800574c <_ZN8touchgfx8Drawable11setPositionEssss>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80059c8:	1d23      	adds	r3, r4, #4
 80059ca:	4649      	mov	r1, r9
 80059cc:	f8c4 8068 	str.w	r8, [r4, #104]	@ 0x68
 80059d0:	4618      	mov	r0, r3
 80059d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80059d4:	f00b ff90 	bl	80118f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box1.setPosition(0, 0, 800, 480);
 80059d8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80059dc:	4632      	mov	r2, r6
 80059de:	4631      	mov	r1, r6
 80059e0:	4658      	mov	r0, fp
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	f44f 7348 	mov.w	r3, #800	@ 0x320
        setIntervalScaled(abs(interval) * dataScale);
 80059e8:	f44f 79fa 	mov.w	r9, #500	@ 0x1f4
 80059ec:	f7ff feae 	bl	800574c <_ZN8touchgfx8Drawable11setPositionEssss>
 80059f0:	f04f 33ff 	mov.w	r3, #4294967295
 80059f4:	4659      	mov	r1, fp
 80059f6:	1d20      	adds	r0, r4, #4
 80059f8:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 80059fc:	f00b ff7c 	bl	80118f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dynamicGraph1.setPosition(0, 0, 800, 480);
 8005a00:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8005a04:	4632      	mov	r2, r6
 8005a06:	4631      	mov	r1, r6
 8005a08:	4628      	mov	r0, r5
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8005a10:	f7ff fe9c 	bl	800574c <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1);
 8005a14:	4632      	mov	r2, r6
 8005a16:	4639      	mov	r1, r7
 8005a18:	4628      	mov	r0, r5
 8005a1a:	f7ff fbf7 	bl	800520c <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphRangeX(0, 99);
 8005a1e:	2263      	movs	r2, #99	@ 0x63
 8005a20:	4631      	mov	r1, r6
 8005a22:	4628      	mov	r0, r5
 8005a24:	f7ff fa34 	bl	8004e90 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    dynamicGraph1.setGraphAreaMargin(10, 68, 0, 30);
 8005a28:	231e      	movs	r3, #30
 8005a2a:	2244      	movs	r2, #68	@ 0x44
 8005a2c:	210a      	movs	r1, #10
 8005a2e:	4628      	mov	r0, r5
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	4633      	mov	r3, r6
 8005a34:	f00f f857 	bl	8014ae6 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8005a38:	4633      	mov	r3, r6
 8005a3a:	4632      	mov	r2, r6
 8005a3c:	4631      	mov	r1, r6
 8005a3e:	4628      	mov	r0, r5
 8005a40:	9600      	str	r6, [sp, #0]
 8005a42:	f00e ff65 	bl	8014910 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 3500);
 8005a46:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8005a4a:	4631      	mov	r1, r6
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f7ff fab0 	bl	8004fb2 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 8005a52:	f8d4 1498 	ldr.w	r1, [r4, #1176]	@ 0x498
 8005a56:	200a      	movs	r0, #10
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8005a58:	463a      	mov	r2, r7
        color = newColor;
 8005a5a:	f8c4 8494 	str.w	r8, [r4, #1172]	@ 0x494
        setIntervalScaled(abs(interval) * dataScale);
 8005a5e:	4348      	muls	r0, r1
        lineWidth = width;
 8005a60:	f884 74a0 	strb.w	r7, [r4, #1184]	@ 0x4a0
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    return (d < 0) ? -d : d;
 8005a64:	2800      	cmp	r0, #0
 8005a66:	bfb8      	it	lt
 8005a68:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8005a6a:	f8c4 049c 	str.w	r0, [r4, #1180]	@ 0x49c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8005a6e:	f00f f8ed 	bl	8014c4c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        majorGrid = &major;
 8005a72:	9b02      	ldr	r3, [sp, #8]
    dynamicGraph1.addGraphElement(dynamicGraph1MinorXAxisGrid);
 8005a74:	9905      	ldr	r1, [sp, #20]
 8005a76:	f8c4 34a4 	str.w	r3, [r4, #1188]	@ 0x4a4
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8005a7a:	f8c4 049c 	str.w	r0, [r4, #1180]	@ 0x49c
 8005a7e:	4628      	mov	r0, r5
        dataScale = scale;
 8005a80:	f8c4 7498 	str.w	r7, [r4, #1176]	@ 0x498
 8005a84:	f00e ff4f 	bl	8014926 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(abs(interval) * dataScale);
 8005a88:	f8d4 14d8 	ldr.w	r1, [r4, #1240]	@ 0x4d8
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8005a8c:	463a      	mov	r2, r7
        color = newColor;
 8005a8e:	f8c4 84d4 	str.w	r8, [r4, #1236]	@ 0x4d4
        setIntervalScaled(abs(interval) * dataScale);
 8005a92:	fb09 f001 	mul.w	r0, r9, r1
        lineWidth = width;
 8005a96:	f884 74e0 	strb.w	r7, [r4, #1248]	@ 0x4e0
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	bfb8      	it	lt
 8005a9e:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8005aa0:	f8c4 04dc 	str.w	r0, [r4, #1244]	@ 0x4dc
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8005aa4:	f00f f8d2 	bl	8014c4c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        majorGrid = &major;
 8005aa8:	9b03      	ldr	r3, [sp, #12]
    dynamicGraph1.addGraphElement(dynamicGraph1MinorYAxisGrid);
 8005aaa:	9906      	ldr	r1, [sp, #24]
 8005aac:	f8c4 34e4 	str.w	r3, [r4, #1252]	@ 0x4e4
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8005ab0:	f8c4 04dc 	str.w	r0, [r4, #1244]	@ 0x4dc
 8005ab4:	4628      	mov	r0, r5
        dataScale = scale;
 8005ab6:	f8c4 74d8 	str.w	r7, [r4, #1240]	@ 0x4d8
 8005aba:	f00e ff34 	bl	8014926 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(abs(interval) * dataScale);
 8005abe:	f8d4 1518 	ldr.w	r1, [r4, #1304]	@ 0x518
 8005ac2:	2032      	movs	r0, #50	@ 0x32
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8005ac4:	463a      	mov	r2, r7
        color = newColor;
 8005ac6:	f8c4 8514 	str.w	r8, [r4, #1300]	@ 0x514
        setIntervalScaled(abs(interval) * dataScale);
 8005aca:	4348      	muls	r0, r1
        lineWidth = width;
 8005acc:	f884 a520 	strb.w	sl, [r4, #1312]	@ 0x520
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	bfb8      	it	lt
 8005ad4:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8005ad6:	f8c4 051c 	str.w	r0, [r4, #1308]	@ 0x51c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8005ada:	f00f f8b7 	bl	8014c4c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorXAxisGrid);
 8005ade:	9902      	ldr	r1, [sp, #8]
 8005ae0:	f8c4 051c 	str.w	r0, [r4, #1308]	@ 0x51c
 8005ae4:	4628      	mov	r0, r5
        dataScale = scale;
 8005ae6:	f8c4 7518 	str.w	r7, [r4, #1304]	@ 0x518
 8005aea:	f00e ff1c 	bl	8014926 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(abs(interval) * dataScale);
 8005aee:	f8d4 1558 	ldr.w	r1, [r4, #1368]	@ 0x558
 8005af2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8005af6:	463a      	mov	r2, r7
        color = newColor;
 8005af8:	f8c4 8554 	str.w	r8, [r4, #1364]	@ 0x554
        setIntervalScaled(abs(interval) * dataScale);
 8005afc:	4348      	muls	r0, r1
        lineWidth = width;
 8005afe:	f884 a560 	strb.w	sl, [r4, #1376]	@ 0x560
 8005b02:	2800      	cmp	r0, #0
 8005b04:	bfb8      	it	lt
 8005b06:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8005b08:	f8c4 055c 	str.w	r0, [r4, #1372]	@ 0x55c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8005b0c:	f00f f89e 	bl	8014c4c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 8005b10:	9903      	ldr	r1, [sp, #12]
 8005b12:	f8c4 055c 	str.w	r0, [r4, #1372]	@ 0x55c
 8005b16:	4628      	mov	r0, r5
        dataScale = scale;
 8005b18:	f8c4 7558 	str.w	r7, [r4, #1368]	@ 0x558
 8005b1c:	f00e ff03 	bl	8014926 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 8005b20:	f8d4 1598 	ldr.w	r1, [r4, #1432]	@ 0x598
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8005b24:	463a      	mov	r2, r7
class TypedText
 8005b26:	f8a4 65a4 	strh.w	r6, [r4, #1444]	@ 0x5a4
        return i * scale;
 8005b2a:	fb09 f001 	mul.w	r0, r9, r1
        color = newColor;
 8005b2e:	f8c4 8594 	str.w	r8, [r4, #1428]	@ 0x594
 8005b32:	2800      	cmp	r0, #0
 8005b34:	bfb8      	it	lt
 8005b36:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 8005b38:	f8c4 059c 	str.w	r0, [r4, #1436]	@ 0x59c
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8005b3c:	f00f f886 	bl	8014c4c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addLeftElement(dynamicGraph1MajorYAxisLabel);
 8005b40:	9907      	ldr	r1, [sp, #28]
 8005b42:	f8c4 059c 	str.w	r0, [r4, #1436]	@ 0x59c
 8005b46:	4628      	mov	r0, r5
        dataScale = scale;
 8005b48:	f8c4 7598 	str.w	r7, [r4, #1432]	@ 0x598
 8005b4c:	f00e fefd 	bl	801494a <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
    dynamicGraph1Line1Painter.setColor(touchgfx::Color::getColorFromRGB(209, 4, 4));
 8005b50:	4943      	ldr	r1, [pc, #268]	@ (8005c60 <_ZN15Screen1ViewBaseC1Ev+0x3d4>)
 8005b52:	9804      	ldr	r0, [sp, #16]
 8005b54:	f7ff fe86 	bl	8005864 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
        canvasPainter = &painter;
 8005b58:	9b04      	ldr	r3, [sp, #16]
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8005b5a:	9908      	ldr	r1, [sp, #32]
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f8c4 35dc 	str.w	r3, [r4, #1500]	@ 0x5dc
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8005b62:	f884 a5e0 	strb.w	sl, [r4, #1504]	@ 0x5e0
 8005b66:	f00e fede 	bl	8014926 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        const float fs = f * (float)scale;
 8005b6a:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005b6e:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8005c64 <_ZN15Screen1ViewBaseC1Ev+0x3d8>
 8005b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b76:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005b7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b82:	f2c2 80f3 	blt.w	8007d6c <_ZN15Screen1ViewBaseC1Ev+0x24e0>
            return (int)(fs + 0.5f);
 8005b86:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b92:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005b96:	4628      	mov	r0, r5
 8005b98:	f00f f8b1 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005b9c:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005ba0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005c68 <_ZN15Screen1ViewBaseC1Ev+0x3dc>
 8005ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005bac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb4:	f2c2 80ee 	blt.w	8007d94 <_ZN15Screen1ViewBaseC1Ev+0x2508>
            return (int)(fs + 0.5f);
 8005bb8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005bbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bc4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f00f f898 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005bce:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005bd2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005c6c <_ZN15Screen1ViewBaseC1Ev+0x3e0>
 8005bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bda:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005bde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be6:	f2c2 80e9 	blt.w	8007dbc <_ZN15Screen1ViewBaseC1Ev+0x2530>
            return (int)(fs + 0.5f);
 8005bea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005bee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bf6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	f00f f87f 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005c00:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005c04:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8005c70 <_ZN15Screen1ViewBaseC1Ev+0x3e4>
 8005c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005c10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c18:	f2c2 80e4 	blt.w	8007de4 <_ZN15Screen1ViewBaseC1Ev+0x2558>
            return (int)(fs + 0.5f);
 8005c1c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005c20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c28:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	f00f f866 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005c32:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005c36:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8005c74 <_ZN15Screen1ViewBaseC1Ev+0x3e8>
 8005c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c42:	e043      	b.n	8005ccc <_ZN15Screen1ViewBaseC1Ev+0x440>
 8005c44:	0802dce8 	.word	0x0802dce8
 8005c48:	0802e8fc 	.word	0x0802e8fc
 8005c4c:	0802db4c 	.word	0x0802db4c
 8005c50:	0802d4c4 	.word	0x0802d4c4
 8005c54:	0802ecfc 	.word	0x0802ecfc
 8005c58:	0802ebc4 	.word	0x0802ebc4
 8005c5c:	0802e7ec 	.word	0x0802e7ec
 8005c60:	ffd10404 	.word	0xffd10404
 8005c64:	4503099b 	.word	0x4503099b
 8005c68:	4506dfc4 	.word	0x4506dfc4
 8005c6c:	45060661 	.word	0x45060661
 8005c70:	450111e0 	.word	0x450111e0
 8005c74:	44f206b9 	.word	0x44f206b9
 8005c78:	0802d9dc 	.word	0x0802d9dc
 8005c7c:	0802da94 	.word	0x0802da94
 8005c80:	44de5b40 	.word	0x44de5b40
 8005c84:	44ca244b 	.word	0x44ca244b
 8005c88:	44b8731e 	.word	0x44b8731e
 8005c8c:	44ac16c5 	.word	0x44ac16c5
 8005c90:	44a75215 	.word	0x44a75215
 8005c94:	44ab9f54 	.word	0x44ab9f54
 8005c98:	44b9878d 	.word	0x44b9878d
 8005c9c:	44d09175 	.word	0x44d09175
 8005ca0:	44ef49b5 	.word	0x44ef49b5
 8005ca4:	4509b1de 	.word	0x4509b1de
 8005ca8:	451cf80a 	.word	0x451cf80a
 8005cac:	452fd176 	.word	0x452fd176
 8005cb0:	45409208 	.word	0x45409208
 8005cb4:	454db053 	.word	0x454db053
 8005cb8:	4555eb58 	.word	0x4555eb58
 8005cbc:	45586991 	.word	0x45586991
 8005cc0:	4554ce30 	.word	0x4554ce30
 8005cc4:	454b42a3 	.word	0x454b42a3
 8005cc8:	453c7347 	.word	0x453c7347
        if (fs >= 0)
 8005ccc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd4:	f2c2 809a 	blt.w	8007e0c <_ZN15Screen1ViewBaseC1Ev+0x2580>
            return (int)(fs + 0.5f);
 8005cd8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005cdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ce0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ce4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f00f f808 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005cee:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005cf2:	ed1f 7a1d 	vldr	s14, [pc, #-116]	@ 8005c80 <_ZN15Screen1ViewBaseC1Ev+0x3f4>
 8005cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d06:	f2c2 8095 	blt.w	8007e34 <_ZN15Screen1ViewBaseC1Ev+0x25a8>
            return (int)(fs + 0.5f);
 8005d0a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d16:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f00e ffef 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005d20:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005d24:	ed1f 7a29 	vldr	s14, [pc, #-164]	@ 8005c84 <_ZN15Screen1ViewBaseC1Ev+0x3f8>
 8005d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005d30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d38:	f2c2 8090 	blt.w	8007e5c <_ZN15Screen1ViewBaseC1Ev+0x25d0>
            return (int)(fs + 0.5f);
 8005d3c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d48:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f00e ffd6 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005d52:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005d56:	ed1f 7a34 	vldr	s14, [pc, #-208]	@ 8005c88 <_ZN15Screen1ViewBaseC1Ev+0x3fc>
 8005d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005d62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6a:	f2c2 808b 	blt.w	8007e84 <_ZN15Screen1ViewBaseC1Ev+0x25f8>
            return (int)(fs + 0.5f);
 8005d6e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005d72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d7a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f00e ffbd 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005d84:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005d88:	ed1f 7a40 	vldr	s14, [pc, #-256]	@ 8005c8c <_ZN15Screen1ViewBaseC1Ev+0x400>
 8005d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d90:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005d94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d9c:	f2c2 8086 	blt.w	8007eac <_ZN15Screen1ViewBaseC1Ev+0x2620>
            return (int)(fs + 0.5f);
 8005da0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005da4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dac:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005db0:	4628      	mov	r0, r5
 8005db2:	f00e ffa4 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005db6:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005dba:	ed1f 7a4b 	vldr	s14, [pc, #-300]	@ 8005c90 <_ZN15Screen1ViewBaseC1Ev+0x404>
 8005dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005dc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dce:	f2c2 8081 	blt.w	8007ed4 <_ZN15Screen1ViewBaseC1Ev+0x2648>
            return (int)(fs + 0.5f);
 8005dd2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005dd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dde:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005de2:	4628      	mov	r0, r5
 8005de4:	f00e ff8b 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005de8:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005dec:	ed1f 7a57 	vldr	s14, [pc, #-348]	@ 8005c94 <_ZN15Screen1ViewBaseC1Ev+0x408>
 8005df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005df4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e00:	f2c2 807c 	blt.w	8007efc <_ZN15Screen1ViewBaseC1Ev+0x2670>
            return (int)(fs + 0.5f);
 8005e04:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e10:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005e14:	4628      	mov	r0, r5
 8005e16:	f00e ff72 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e1a:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005e1e:	ed1f 7a62 	vldr	s14, [pc, #-392]	@ 8005c98 <_ZN15Screen1ViewBaseC1Ev+0x40c>
 8005e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e26:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005e2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e32:	f2c2 8077 	blt.w	8007f24 <_ZN15Screen1ViewBaseC1Ev+0x2698>
            return (int)(fs + 0.5f);
 8005e36:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e42:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005e46:	4628      	mov	r0, r5
 8005e48:	f00e ff59 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e4c:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005e50:	ed1f 7a6e 	vldr	s14, [pc, #-440]	@ 8005c9c <_ZN15Screen1ViewBaseC1Ev+0x410>
 8005e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e58:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005e5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e64:	f2c2 8072 	blt.w	8007f4c <_ZN15Screen1ViewBaseC1Ev+0x26c0>
            return (int)(fs + 0.5f);
 8005e68:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e74:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f00e ff40 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005e7e:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005e82:	ed1f 7a79 	vldr	s14, [pc, #-484]	@ 8005ca0 <_ZN15Screen1ViewBaseC1Ev+0x414>
 8005e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005e8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e96:	f2c2 806d 	blt.w	8007f74 <_ZN15Screen1ViewBaseC1Ev+0x26e8>
            return (int)(fs + 0.5f);
 8005e9a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005e9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ea2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ea6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f00e ff27 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005eb0:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005eb4:	ed1f 7a85 	vldr	s14, [pc, #-532]	@ 8005ca4 <_ZN15Screen1ViewBaseC1Ev+0x418>
 8005eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005ec0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec8:	f2c2 8068 	blt.w	8007f9c <_ZN15Screen1ViewBaseC1Ev+0x2710>
            return (int)(fs + 0.5f);
 8005ecc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005ed0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ed8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005edc:	4628      	mov	r0, r5
 8005ede:	f00e ff0e 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005ee2:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005ee6:	ed1f 7a90 	vldr	s14, [pc, #-576]	@ 8005ca8 <_ZN15Screen1ViewBaseC1Ev+0x41c>
 8005eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005eee:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005ef2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efa:	f2c2 8063 	blt.w	8007fc4 <_ZN15Screen1ViewBaseC1Ev+0x2738>
            return (int)(fs + 0.5f);
 8005efe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f0a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f00e fef5 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005f14:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005f18:	ed1f 7a9c 	vldr	s14, [pc, #-624]	@ 8005cac <_ZN15Screen1ViewBaseC1Ev+0x420>
 8005f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f20:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005f24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f2c:	f2c2 805e 	blt.w	8007fec <_ZN15Screen1ViewBaseC1Ev+0x2760>
            return (int)(fs + 0.5f);
 8005f30:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f3c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005f40:	4628      	mov	r0, r5
 8005f42:	f00e fedc 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005f46:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005f4a:	ed1f 7aa7 	vldr	s14, [pc, #-668]	@ 8005cb0 <_ZN15Screen1ViewBaseC1Ev+0x424>
 8005f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f52:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005f56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5e:	f2c2 8059 	blt.w	8008014 <_ZN15Screen1ViewBaseC1Ev+0x2788>
            return (int)(fs + 0.5f);
 8005f62:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f6e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005f72:	4628      	mov	r0, r5
 8005f74:	f00e fec3 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005f78:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005f7c:	ed1f 7ab3 	vldr	s14, [pc, #-716]	@ 8005cb4 <_ZN15Screen1ViewBaseC1Ev+0x428>
 8005f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f84:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005f88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f90:	f2c2 8054 	blt.w	800803c <_ZN15Screen1ViewBaseC1Ev+0x27b0>
            return (int)(fs + 0.5f);
 8005f94:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005f98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fa0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f00e feaa 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005faa:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005fae:	ed1f 7abe 	vldr	s14, [pc, #-760]	@ 8005cb8 <_ZN15Screen1ViewBaseC1Ev+0x42c>
 8005fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005fba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc2:	f2c2 804f 	blt.w	8008064 <_ZN15Screen1ViewBaseC1Ev+0x27d8>
            return (int)(fs + 0.5f);
 8005fc6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005fca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fd2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f00e fe91 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005fdc:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8005fe0:	ed1f 7aca 	vldr	s14, [pc, #-808]	@ 8005cbc <_ZN15Screen1ViewBaseC1Ev+0x430>
 8005fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005fec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff4:	f2c2 804a 	blt.w	800808c <_ZN15Screen1ViewBaseC1Ev+0x2800>
            return (int)(fs + 0.5f);
 8005ff8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005ffc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006004:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006008:	4628      	mov	r0, r5
 800600a:	f00e fe78 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800600e:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006012:	ed1f 7ad5 	vldr	s14, [pc, #-852]	@ 8005cc0 <_ZN15Screen1ViewBaseC1Ev+0x434>
 8006016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800601a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800601e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006026:	f2c2 8045 	blt.w	80080b4 <_ZN15Screen1ViewBaseC1Ev+0x2828>
            return (int)(fs + 0.5f);
 800602a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800602e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006036:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800603a:	4628      	mov	r0, r5
 800603c:	f00e fe5f 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006040:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006044:	ed1f 7ae1 	vldr	s14, [pc, #-900]	@ 8005cc4 <_ZN15Screen1ViewBaseC1Ev+0x438>
 8006048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800604c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006050:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006058:	f2c2 8040 	blt.w	80080dc <_ZN15Screen1ViewBaseC1Ev+0x2850>
            return (int)(fs + 0.5f);
 800605c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006060:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006068:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800606c:	4628      	mov	r0, r5
 800606e:	f00e fe46 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006072:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006076:	ed1f 7aec 	vldr	s14, [pc, #-944]	@ 8005cc8 <_ZN15Screen1ViewBaseC1Ev+0x43c>
 800607a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800607e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006082:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800608a:	f2c2 803b 	blt.w	8008104 <_ZN15Screen1ViewBaseC1Ev+0x2878>
            return (int)(fs + 0.5f);
 800608e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006092:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800609a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800609e:	4628      	mov	r0, r5
 80060a0:	f00e fe2d 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80060a4:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80060a8:	ed9f 7af3 	vldr	s14, [pc, #972]	@ 8006478 <_ZN15Screen1ViewBaseC1Ev+0xbec>
 80060ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060b0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80060b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060bc:	f2c2 8036 	blt.w	800812c <_ZN15Screen1ViewBaseC1Ev+0x28a0>
            return (int)(fs + 0.5f);
 80060c0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80060c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060cc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80060d0:	4628      	mov	r0, r5
 80060d2:	f00e fe14 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80060d6:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80060da:	ed9f 7ae8 	vldr	s14, [pc, #928]	@ 800647c <_ZN15Screen1ViewBaseC1Ev+0xbf0>
 80060de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060e2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80060e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ee:	f2c2 8031 	blt.w	8008154 <_ZN15Screen1ViewBaseC1Ev+0x28c8>
            return (int)(fs + 0.5f);
 80060f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80060f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060fe:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006102:	4628      	mov	r0, r5
 8006104:	f00e fdfb 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006108:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800610c:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 8006480 <_ZN15Screen1ViewBaseC1Ev+0xbf4>
 8006110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006114:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006118:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800611c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006120:	f2c2 802c 	blt.w	800817c <_ZN15Screen1ViewBaseC1Ev+0x28f0>
            return (int)(fs + 0.5f);
 8006124:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006128:	ee77 7a87 	vadd.f32	s15, s15, s14
 800612c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006130:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006134:	4628      	mov	r0, r5
 8006136:	f00e fde2 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800613a:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800613e:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 8006484 <_ZN15Screen1ViewBaseC1Ev+0xbf8>
 8006142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006146:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800614a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800614e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006152:	f2c2 8027 	blt.w	80081a4 <_ZN15Screen1ViewBaseC1Ev+0x2918>
            return (int)(fs + 0.5f);
 8006156:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800615a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800615e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006162:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006166:	4628      	mov	r0, r5
 8006168:	f00e fdc9 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800616c:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006170:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 8006488 <_ZN15Screen1ViewBaseC1Ev+0xbfc>
 8006174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006178:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800617c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006184:	f2c2 8022 	blt.w	80081cc <_ZN15Screen1ViewBaseC1Ev+0x2940>
            return (int)(fs + 0.5f);
 8006188:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800618c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006194:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006198:	4628      	mov	r0, r5
 800619a:	f00e fdb0 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800619e:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80061a2:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 800648c <_ZN15Screen1ViewBaseC1Ev+0xc00>
 80061a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061aa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80061ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b6:	f2c2 801d 	blt.w	80081f4 <_ZN15Screen1ViewBaseC1Ev+0x2968>
            return (int)(fs + 0.5f);
 80061ba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80061be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061c6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80061ca:	4628      	mov	r0, r5
 80061cc:	f00e fd97 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80061d0:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80061d4:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8006490 <_ZN15Screen1ViewBaseC1Ev+0xc04>
 80061d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061dc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80061e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e8:	f2c2 8018 	blt.w	800821c <_ZN15Screen1ViewBaseC1Ev+0x2990>
            return (int)(fs + 0.5f);
 80061ec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80061f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061f8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80061fc:	4628      	mov	r0, r5
 80061fe:	f00e fd7e 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006202:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006206:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8006494 <_ZN15Screen1ViewBaseC1Ev+0xc08>
 800620a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800620e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006212:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800621a:	f2c2 8013 	blt.w	8008244 <_ZN15Screen1ViewBaseC1Ev+0x29b8>
            return (int)(fs + 0.5f);
 800621e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006222:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800622a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800622e:	4628      	mov	r0, r5
 8006230:	f00e fd65 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006234:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006238:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8006498 <_ZN15Screen1ViewBaseC1Ev+0xc0c>
 800623c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006240:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006244:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800624c:	f2c2 800e 	blt.w	800826c <_ZN15Screen1ViewBaseC1Ev+0x29e0>
            return (int)(fs + 0.5f);
 8006250:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006254:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800625c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006260:	4628      	mov	r0, r5
 8006262:	f00e fd4c 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006266:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800626a:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 800649c <_ZN15Screen1ViewBaseC1Ev+0xc10>
 800626e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006272:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006276:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800627a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800627e:	f2c2 8009 	blt.w	8008294 <_ZN15Screen1ViewBaseC1Ev+0x2a08>
            return (int)(fs + 0.5f);
 8006282:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006286:	ee77 7a87 	vadd.f32	s15, s15, s14
 800628a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800628e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006292:	4628      	mov	r0, r5
 8006294:	f00e fd33 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006298:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800629c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80064a0 <_ZN15Screen1ViewBaseC1Ev+0xc14>
 80062a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062a4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80062a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b0:	f2c2 8004 	blt.w	80082bc <_ZN15Screen1ViewBaseC1Ev+0x2a30>
            return (int)(fs + 0.5f);
 80062b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80062b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062c0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80062c4:	4628      	mov	r0, r5
 80062c6:	f00e fd1a 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80062ca:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80062ce:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80064a4 <_ZN15Screen1ViewBaseC1Ev+0xc18>
 80062d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062d6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80062da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e2:	f2c1 87ff 	blt.w	80082e4 <_ZN15Screen1ViewBaseC1Ev+0x2a58>
            return (int)(fs + 0.5f);
 80062e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80062ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062f2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80062f6:	4628      	mov	r0, r5
 80062f8:	f00e fd01 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80062fc:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006300:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80064a8 <_ZN15Screen1ViewBaseC1Ev+0xc1c>
 8006304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006308:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800630c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006314:	f2c1 87fa 	blt.w	800830c <_ZN15Screen1ViewBaseC1Ev+0x2a80>
            return (int)(fs + 0.5f);
 8006318:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800631c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006320:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006324:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006328:	4628      	mov	r0, r5
 800632a:	f00e fce8 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800632e:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006332:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80064ac <_ZN15Screen1ViewBaseC1Ev+0xc20>
 8006336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800633a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800633e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006346:	f2c1 87f5 	blt.w	8008334 <_ZN15Screen1ViewBaseC1Ev+0x2aa8>
            return (int)(fs + 0.5f);
 800634a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800634e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006356:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800635a:	4628      	mov	r0, r5
 800635c:	f00e fccf 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006360:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006364:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80064b0 <_ZN15Screen1ViewBaseC1Ev+0xc24>
 8006368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800636c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006370:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006378:	f2c1 87f0 	blt.w	800835c <_ZN15Screen1ViewBaseC1Ev+0x2ad0>
            return (int)(fs + 0.5f);
 800637c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006380:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006388:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800638c:	4628      	mov	r0, r5
 800638e:	f00e fcb6 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006392:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006396:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80064b4 <_ZN15Screen1ViewBaseC1Ev+0xc28>
 800639a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800639e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80063a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063aa:	f2c1 87eb 	blt.w	8008384 <_ZN15Screen1ViewBaseC1Ev+0x2af8>
            return (int)(fs + 0.5f);
 80063ae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80063b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063ba:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80063be:	4628      	mov	r0, r5
 80063c0:	f00e fc9d 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80063c4:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80063c8:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80064b8 <_ZN15Screen1ViewBaseC1Ev+0xc2c>
 80063cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063d0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80063d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063dc:	f2c1 87e6 	blt.w	80083ac <_ZN15Screen1ViewBaseC1Ev+0x2b20>
            return (int)(fs + 0.5f);
 80063e0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80063e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063ec:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80063f0:	4628      	mov	r0, r5
 80063f2:	f00e fc84 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80063f6:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80063fa:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80064bc <_ZN15Screen1ViewBaseC1Ev+0xc30>
 80063fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006402:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006406:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800640a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800640e:	f2c1 87e1 	blt.w	80083d4 <_ZN15Screen1ViewBaseC1Ev+0x2b48>
            return (int)(fs + 0.5f);
 8006412:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006416:	ee77 7a87 	vadd.f32	s15, s15, s14
 800641a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800641e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006422:	4628      	mov	r0, r5
 8006424:	f00e fc6b 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006428:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800642c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80064c0 <_ZN15Screen1ViewBaseC1Ev+0xc34>
 8006430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006434:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006438:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800643c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006440:	f2c1 87dc 	blt.w	80083fc <_ZN15Screen1ViewBaseC1Ev+0x2b70>
            return (int)(fs + 0.5f);
 8006444:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006448:	ee77 7a87 	vadd.f32	s15, s15, s14
 800644c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006450:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006454:	4628      	mov	r0, r5
 8006456:	f00e fc52 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800645a:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800645e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80064c4 <_ZN15Screen1ViewBaseC1Ev+0xc38>
 8006462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006466:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800646a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800646e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006472:	f2c1 87d7 	blt.w	8008424 <_ZN15Screen1ViewBaseC1Ev+0x2b98>
 8006476:	e04d      	b.n	8006514 <_ZN15Screen1ViewBaseC1Ev+0xc88>
 8006478:	45297fbd 	.word	0x45297fbd
 800647c:	4513e048 	.word	0x4513e048
 8006480:	44fa85ac 	.word	0x44fa85ac
 8006484:	44cec5f6 	.word	0x44cec5f6
 8006488:	44a7c1ab 	.word	0x44a7c1ab
 800648c:	4488356c 	.word	0x4488356c
 8006490:	4464350e 	.word	0x4464350e
 8006494:	444cf4b6 	.word	0x444cf4b6
 8006498:	444ab219 	.word	0x444ab219
 800649c:	445b731c 	.word	0x445b731c
 80064a0:	447b750b 	.word	0x447b750b
 80064a4:	4492c930 	.word	0x4492c930
 80064a8:	44a9e54c 	.word	0x44a9e54c
 80064ac:	44bfef55 	.word	0x44bfef55
 80064b0:	44d1f984 	.word	0x44d1f984
 80064b4:	44dd9397 	.word	0x44dd9397
 80064b8:	44e10a0e 	.word	0x44e10a0e
 80064bc:	44db92aa 	.word	0x44db92aa
 80064c0:	44cd61d0 	.word	0x44cd61d0
 80064c4:	44b7a6c9 	.word	0x44b7a6c9
 80064c8:	449c6f1e 	.word	0x449c6f1e
 80064cc:	447ce7cd 	.word	0x447ce7cd
 80064d0:	4441abd9 	.word	0x4441abd9
 80064d4:	440d9e66 	.word	0x440d9e66
 80064d8:	43cd861e 	.word	0x43cd861e
 80064dc:	43a427fc 	.word	0x43a427fc
 80064e0:	43a60350 	.word	0x43a60350
 80064e4:	43d62f8d 	.word	0x43d62f8d
 80064e8:	4419d07c 	.word	0x4419d07c
 80064ec:	445c9a0f 	.word	0x445c9a0f
 80064f0:	44978768 	.word	0x44978768
 80064f4:	44c5acec 	.word	0x44c5acec
 80064f8:	44f55f89 	.word	0x44f55f89
 80064fc:	45118e57 	.word	0x45118e57
 8006500:	4525c7f5 	.word	0x4525c7f5
 8006504:	4535f085 	.word	0x4535f085
 8006508:	4540fb33 	.word	0x4540fb33
 800650c:	45465266 	.word	0x45465266
 8006510:	4545e455 	.word	0x4545e455
            return (int)(fs + 0.5f);
 8006514:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006518:	ee77 7a87 	vadd.f32	s15, s15, s14
 800651c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006520:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006524:	4628      	mov	r0, r5
 8006526:	f00e fbea 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800652a:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800652e:	ed1f 7a1a 	vldr	s14, [pc, #-104]	@ 80064c8 <_ZN15Screen1ViewBaseC1Ev+0xc3c>
 8006532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006536:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800653a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800653e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006542:	f2c1 8783 	blt.w	800844c <_ZN15Screen1ViewBaseC1Ev+0x2bc0>
            return (int)(fs + 0.5f);
 8006546:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800654a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800654e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006552:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006556:	4628      	mov	r0, r5
 8006558:	f00e fbd1 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800655c:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006560:	ed1f 7a26 	vldr	s14, [pc, #-152]	@ 80064cc <_ZN15Screen1ViewBaseC1Ev+0xc40>
 8006564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006568:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800656c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006574:	f2c1 877e 	blt.w	8008474 <_ZN15Screen1ViewBaseC1Ev+0x2be8>
            return (int)(fs + 0.5f);
 8006578:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800657c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006584:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006588:	4628      	mov	r0, r5
 800658a:	f00e fbb8 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800658e:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006592:	ed1f 7a31 	vldr	s14, [pc, #-196]	@ 80064d0 <_ZN15Screen1ViewBaseC1Ev+0xc44>
 8006596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800659a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800659e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a6:	f2c1 8779 	blt.w	800849c <_ZN15Screen1ViewBaseC1Ev+0x2c10>
            return (int)(fs + 0.5f);
 80065aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80065ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065b6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80065ba:	4628      	mov	r0, r5
 80065bc:	f00e fb9f 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80065c0:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80065c4:	ed1f 7a3d 	vldr	s14, [pc, #-244]	@ 80064d4 <_ZN15Screen1ViewBaseC1Ev+0xc48>
 80065c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065cc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80065d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d8:	f2c1 8774 	blt.w	80084c4 <_ZN15Screen1ViewBaseC1Ev+0x2c38>
            return (int)(fs + 0.5f);
 80065dc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80065e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065e8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80065ec:	4628      	mov	r0, r5
 80065ee:	f00e fb86 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80065f2:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80065f6:	ed1f 7a48 	vldr	s14, [pc, #-288]	@ 80064d8 <_ZN15Screen1ViewBaseC1Ev+0xc4c>
 80065fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065fe:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006602:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800660a:	f2c1 876f 	blt.w	80084ec <_ZN15Screen1ViewBaseC1Ev+0x2c60>
            return (int)(fs + 0.5f);
 800660e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006612:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800661a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800661e:	4628      	mov	r0, r5
 8006620:	f00e fb6d 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006624:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006628:	ed1f 7a54 	vldr	s14, [pc, #-336]	@ 80064dc <_ZN15Screen1ViewBaseC1Ev+0xc50>
 800662c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006630:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006634:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663c:	f2c1 876a 	blt.w	8008514 <_ZN15Screen1ViewBaseC1Ev+0x2c88>
            return (int)(fs + 0.5f);
 8006640:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006644:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800664c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006650:	4628      	mov	r0, r5
 8006652:	f00e fb54 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006656:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800665a:	ed1f 7a5f 	vldr	s14, [pc, #-380]	@ 80064e0 <_ZN15Screen1ViewBaseC1Ev+0xc54>
 800665e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006662:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006666:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800666a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800666e:	f2c1 8765 	blt.w	800853c <_ZN15Screen1ViewBaseC1Ev+0x2cb0>
            return (int)(fs + 0.5f);
 8006672:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006676:	ee77 7a87 	vadd.f32	s15, s15, s14
 800667a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800667e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006682:	4628      	mov	r0, r5
 8006684:	f00e fb3b 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006688:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800668c:	ed1f 7a6b 	vldr	s14, [pc, #-428]	@ 80064e4 <_ZN15Screen1ViewBaseC1Ev+0xc58>
 8006690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006694:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006698:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800669c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066a0:	f2c1 8760 	blt.w	8008564 <_ZN15Screen1ViewBaseC1Ev+0x2cd8>
            return (int)(fs + 0.5f);
 80066a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80066a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066b0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80066b4:	4628      	mov	r0, r5
 80066b6:	f00e fb22 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80066ba:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80066be:	ed1f 7a76 	vldr	s14, [pc, #-472]	@ 80064e8 <_ZN15Screen1ViewBaseC1Ev+0xc5c>
 80066c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066c6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80066ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80066ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d2:	f2c1 875b 	blt.w	800858c <_ZN15Screen1ViewBaseC1Ev+0x2d00>
            return (int)(fs + 0.5f);
 80066d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80066da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066e2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80066e6:	4628      	mov	r0, r5
 80066e8:	f00e fb09 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80066ec:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80066f0:	ed1f 7a82 	vldr	s14, [pc, #-520]	@ 80064ec <_ZN15Screen1ViewBaseC1Ev+0xc60>
 80066f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066f8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80066fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006704:	f2c1 8756 	blt.w	80085b4 <_ZN15Screen1ViewBaseC1Ev+0x2d28>
            return (int)(fs + 0.5f);
 8006708:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800670c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006714:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006718:	4628      	mov	r0, r5
 800671a:	f00e faf0 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800671e:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006722:	ed1f 7a8d 	vldr	s14, [pc, #-564]	@ 80064f0 <_ZN15Screen1ViewBaseC1Ev+0xc64>
 8006726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800672a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800672e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006736:	f2c1 8751 	blt.w	80085dc <_ZN15Screen1ViewBaseC1Ev+0x2d50>
            return (int)(fs + 0.5f);
 800673a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800673e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006746:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800674a:	4628      	mov	r0, r5
 800674c:	f00e fad7 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006750:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006754:	ed1f 7a99 	vldr	s14, [pc, #-612]	@ 80064f4 <_ZN15Screen1ViewBaseC1Ev+0xc68>
 8006758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800675c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006760:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006768:	f2c1 874c 	blt.w	8008604 <_ZN15Screen1ViewBaseC1Ev+0x2d78>
            return (int)(fs + 0.5f);
 800676c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006770:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006778:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800677c:	4628      	mov	r0, r5
 800677e:	f00e fabe 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006782:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006786:	ed1f 7aa4 	vldr	s14, [pc, #-656]	@ 80064f8 <_ZN15Screen1ViewBaseC1Ev+0xc6c>
 800678a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800678e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006792:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800679a:	f2c1 8747 	blt.w	800862c <_ZN15Screen1ViewBaseC1Ev+0x2da0>
            return (int)(fs + 0.5f);
 800679e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80067a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067aa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80067ae:	4628      	mov	r0, r5
 80067b0:	f00e faa5 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80067b4:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80067b8:	ed1f 7ab0 	vldr	s14, [pc, #-704]	@ 80064fc <_ZN15Screen1ViewBaseC1Ev+0xc70>
 80067bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067c0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80067c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067cc:	f2c1 8742 	blt.w	8008654 <_ZN15Screen1ViewBaseC1Ev+0x2dc8>
            return (int)(fs + 0.5f);
 80067d0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80067d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067dc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80067e0:	4628      	mov	r0, r5
 80067e2:	f00e fa8c 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80067e6:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80067ea:	ed1f 7abb 	vldr	s14, [pc, #-748]	@ 8006500 <_ZN15Screen1ViewBaseC1Ev+0xc74>
 80067ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067f2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80067f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067fe:	f2c1 873d 	blt.w	800867c <_ZN15Screen1ViewBaseC1Ev+0x2df0>
            return (int)(fs + 0.5f);
 8006802:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006806:	ee77 7a87 	vadd.f32	s15, s15, s14
 800680a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800680e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006812:	4628      	mov	r0, r5
 8006814:	f00e fa73 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006818:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800681c:	ed1f 7ac7 	vldr	s14, [pc, #-796]	@ 8006504 <_ZN15Screen1ViewBaseC1Ev+0xc78>
 8006820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006824:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006828:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800682c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006830:	f2c1 8738 	blt.w	80086a4 <_ZN15Screen1ViewBaseC1Ev+0x2e18>
            return (int)(fs + 0.5f);
 8006834:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006838:	ee77 7a87 	vadd.f32	s15, s15, s14
 800683c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006840:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006844:	4628      	mov	r0, r5
 8006846:	f00e fa5a 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800684a:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800684e:	ed1f 7ad2 	vldr	s14, [pc, #-840]	@ 8006508 <_ZN15Screen1ViewBaseC1Ev+0xc7c>
 8006852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006856:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800685a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800685e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006862:	f2c1 8733 	blt.w	80086cc <_ZN15Screen1ViewBaseC1Ev+0x2e40>
            return (int)(fs + 0.5f);
 8006866:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800686a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800686e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006872:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006876:	4628      	mov	r0, r5
 8006878:	f00e fa41 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800687c:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006880:	ed1f 7ade 	vldr	s14, [pc, #-888]	@ 800650c <_ZN15Screen1ViewBaseC1Ev+0xc80>
 8006884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006888:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800688c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006894:	f2c1 872e 	blt.w	80086f4 <_ZN15Screen1ViewBaseC1Ev+0x2e68>
            return (int)(fs + 0.5f);
 8006898:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800689c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068a4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80068a8:	4628      	mov	r0, r5
 80068aa:	f00e fa28 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80068ae:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80068b2:	ed1f 7ae9 	vldr	s14, [pc, #-932]	@ 8006510 <_ZN15Screen1ViewBaseC1Ev+0xc84>
 80068b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068ba:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80068be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80068c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c6:	f2c1 8729 	blt.w	800871c <_ZN15Screen1ViewBaseC1Ev+0x2e90>
            return (int)(fs + 0.5f);
 80068ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80068ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068d6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80068da:	4628      	mov	r0, r5
 80068dc:	f00e fa0f 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80068e0:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80068e4:	ed9f 7af3 	vldr	s14, [pc, #972]	@ 8006cb4 <_ZN15Screen1ViewBaseC1Ev+0x1428>
 80068e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068ec:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80068f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80068f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f8:	f2c1 8724 	blt.w	8008744 <_ZN15Screen1ViewBaseC1Ev+0x2eb8>
            return (int)(fs + 0.5f);
 80068fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006900:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006908:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800690c:	4628      	mov	r0, r5
 800690e:	f00e f9f6 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006912:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006916:	ed9f 7ae8 	vldr	s14, [pc, #928]	@ 8006cb8 <_ZN15Screen1ViewBaseC1Ev+0x142c>
 800691a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800691e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006922:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800692a:	f2c1 871f 	blt.w	800876c <_ZN15Screen1ViewBaseC1Ev+0x2ee0>
            return (int)(fs + 0.5f);
 800692e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006932:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800693a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800693e:	4628      	mov	r0, r5
 8006940:	f00e f9dd 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006944:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006948:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 8006cbc <_ZN15Screen1ViewBaseC1Ev+0x1430>
 800694c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006950:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006954:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800695c:	f2c1 871a 	blt.w	8008794 <_ZN15Screen1ViewBaseC1Ev+0x2f08>
            return (int)(fs + 0.5f);
 8006960:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006964:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800696c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006970:	4628      	mov	r0, r5
 8006972:	f00e f9c4 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006976:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800697a:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 8006cc0 <_ZN15Screen1ViewBaseC1Ev+0x1434>
 800697e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006982:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006986:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800698a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800698e:	f2c1 8715 	blt.w	80087bc <_ZN15Screen1ViewBaseC1Ev+0x2f30>
            return (int)(fs + 0.5f);
 8006992:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006996:	ee77 7a87 	vadd.f32	s15, s15, s14
 800699a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800699e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80069a2:	4628      	mov	r0, r5
 80069a4:	f00e f9ab 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80069a8:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80069ac:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 8006cc4 <_ZN15Screen1ViewBaseC1Ev+0x1438>
 80069b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069b4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80069b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c0:	f2c1 8710 	blt.w	80087e4 <_ZN15Screen1ViewBaseC1Ev+0x2f58>
            return (int)(fs + 0.5f);
 80069c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80069c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069d0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80069d4:	4628      	mov	r0, r5
 80069d6:	f00e f992 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80069da:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80069de:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8006cc8 <_ZN15Screen1ViewBaseC1Ev+0x143c>
 80069e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069e6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80069ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f2:	f2c1 870b 	blt.w	800880c <_ZN15Screen1ViewBaseC1Ev+0x2f80>
            return (int)(fs + 0.5f);
 80069f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80069fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a02:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006a06:	4628      	mov	r0, r5
 8006a08:	f00e f979 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006a0c:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006a10:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8006ccc <_ZN15Screen1ViewBaseC1Ev+0x1440>
 8006a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a18:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006a1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a24:	f2c1 8706 	blt.w	8008834 <_ZN15Screen1ViewBaseC1Ev+0x2fa8>
            return (int)(fs + 0.5f);
 8006a28:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006a2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a34:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f00e f960 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006a3e:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006a42:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8006cd0 <_ZN15Screen1ViewBaseC1Ev+0x1444>
 8006a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006a4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a56:	f2c1 8701 	blt.w	800885c <_ZN15Screen1ViewBaseC1Ev+0x2fd0>
            return (int)(fs + 0.5f);
 8006a5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006a5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a66:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f00e f947 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006a70:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006a74:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8006cd4 <_ZN15Screen1ViewBaseC1Ev+0x1448>
 8006a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006a80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a88:	f2c1 86fc 	blt.w	8008884 <_ZN15Screen1ViewBaseC1Ev+0x2ff8>
            return (int)(fs + 0.5f);
 8006a8c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006a90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a98:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	f00e f92e 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006aa2:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006aa6:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8006cd8 <_ZN15Screen1ViewBaseC1Ev+0x144c>
 8006aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aae:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006ab2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aba:	f2c1 86f7 	blt.w	80088ac <_ZN15Screen1ViewBaseC1Ev+0x3020>
            return (int)(fs + 0.5f);
 8006abe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006ac2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aca:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f00e f915 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006ad4:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006ad8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8006cdc <_ZN15Screen1ViewBaseC1Ev+0x1450>
 8006adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006ae4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aec:	f2c1 86f2 	blt.w	80088d4 <_ZN15Screen1ViewBaseC1Ev+0x3048>
            return (int)(fs + 0.5f);
 8006af0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006af4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006afc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006b00:	4628      	mov	r0, r5
 8006b02:	f00e f8fc 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006b06:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006b0a:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8006ce0 <_ZN15Screen1ViewBaseC1Ev+0x1454>
 8006b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b12:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006b16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b1e:	f2c1 86ed 	blt.w	80088fc <_ZN15Screen1ViewBaseC1Ev+0x3070>
            return (int)(fs + 0.5f);
 8006b22:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006b26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b2e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006b32:	4628      	mov	r0, r5
 8006b34:	f00e f8e3 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006b38:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006b3c:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8006ce4 <_ZN15Screen1ViewBaseC1Ev+0x1458>
 8006b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b44:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006b48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b50:	f2c1 86e8 	blt.w	8008924 <_ZN15Screen1ViewBaseC1Ev+0x3098>
            return (int)(fs + 0.5f);
 8006b54:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006b58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b60:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006b64:	4628      	mov	r0, r5
 8006b66:	f00e f8ca 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006b6a:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006b6e:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8006ce8 <_ZN15Screen1ViewBaseC1Ev+0x145c>
 8006b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b76:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006b7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b82:	f2c1 86e3 	blt.w	800894c <_ZN15Screen1ViewBaseC1Ev+0x30c0>
            return (int)(fs + 0.5f);
 8006b86:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006b8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b92:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006b96:	4628      	mov	r0, r5
 8006b98:	f00e f8b1 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006b9c:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006ba0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8006cec <_ZN15Screen1ViewBaseC1Ev+0x1460>
 8006ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006bac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb4:	f2c1 86de 	blt.w	8008974 <_ZN15Screen1ViewBaseC1Ev+0x30e8>
            return (int)(fs + 0.5f);
 8006bb8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006bbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006bc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bc4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f00e f898 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006bce:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006bd2:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8006cf0 <_ZN15Screen1ViewBaseC1Ev+0x1464>
 8006bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bda:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006bde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be6:	f2c1 86d9 	blt.w	800899c <_ZN15Screen1ViewBaseC1Ev+0x3110>
            return (int)(fs + 0.5f);
 8006bea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006bee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bf6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f00e f87f 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006c00:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006c04:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8006cf4 <_ZN15Screen1ViewBaseC1Ev+0x1468>
 8006c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006c10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c18:	f2c1 86d4 	blt.w	80089c4 <_ZN15Screen1ViewBaseC1Ev+0x3138>
            return (int)(fs + 0.5f);
 8006c1c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006c20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c28:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	f00e f866 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006c32:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006c36:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006cf8 <_ZN15Screen1ViewBaseC1Ev+0x146c>
 8006c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006c42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c4a:	f2c1 86cf 	blt.w	80089ec <_ZN15Screen1ViewBaseC1Ev+0x3160>
            return (int)(fs + 0.5f);
 8006c4e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006c52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c5a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f00e f84d 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006c64:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006c68:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8006cfc <_ZN15Screen1ViewBaseC1Ev+0x1470>
 8006c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c70:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006c74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c7c:	f2c1 86ca 	blt.w	8008a14 <_ZN15Screen1ViewBaseC1Ev+0x3188>
            return (int)(fs + 0.5f);
 8006c80:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006c84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c8c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006c90:	4628      	mov	r0, r5
 8006c92:	f00e f834 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006c96:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006c9a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006d00 <_ZN15Screen1ViewBaseC1Ev+0x1474>
 8006c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006ca6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cae:	f2c1 86c5 	blt.w	8008a3c <_ZN15Screen1ViewBaseC1Ev+0x31b0>
 8006cb2:	e04d      	b.n	8006d50 <_ZN15Screen1ViewBaseC1Ev+0x14c4>
 8006cb4:	454022eb 	.word	0x454022eb
 8006cb8:	4535f72e 	.word	0x4535f72e
 8006cbc:	4528a93a 	.word	0x4528a93a
 8006cc0:	4519bf51 	.word	0x4519bf51
 8006cc4:	450ad714 	.word	0x450ad714
 8006cc8:	44faf99e 	.word	0x44faf99e
 8006ccc:	44e6093e 	.word	0x44e6093e
 8006cd0:	44d8d2cc 	.word	0x44d8d2cc
 8006cd4:	44d46935 	.word	0x44d46935
 8006cd8:	44d8e2c6 	.word	0x44d8e2c6
 8006cdc:	44e5585e 	.word	0x44e5585e
 8006ce0:	44f7fdb1 	.word	0x44f7fdb1
 8006ce4:	4507281d 	.word	0x4507281d
 8006ce8:	4512ac25 	.word	0x4512ac25
 8006cec:	451cfae7 	.word	0x451cfae7
 8006cf0:	452498b8 	.word	0x452498b8
 8006cf4:	452844f9 	.word	0x452844f9
 8006cf8:	45271b3a 	.word	0x45271b3a
 8006cfc:	4520ab7d 	.word	0x4520ab7d
 8006d00:	45150744 	.word	0x45150744
 8006d04:	4504c211 	.word	0x4504c211
 8006d08:	44e1caae 	.word	0x44e1caae
 8006d0c:	44b5b1cc 	.word	0x44b5b1cc
 8006d10:	4488844a 	.word	0x4488844a
 8006d14:	443b74d4 	.word	0x443b74d4
 8006d18:	43e29dd4 	.word	0x43e29dd4
 8006d1c:	43615464 	.word	0x43615464
 8006d20:	42a6a54d 	.word	0x42a6a54d
 8006d24:	421441b1 	.word	0x421441b1
 8006d28:	42b04fa8 	.word	0x42b04fa8
 8006d2c:	4365d6ea 	.word	0x4365d6ea
 8006d30:	43dfd738 	.word	0x43dfd738
 8006d34:	44343ea9 	.word	0x44343ea9
 8006d38:	44801861 	.word	0x44801861
 8006d3c:	44a685f2 	.word	0x44a685f2
 8006d40:	44ca22ff 	.word	0x44ca22ff
 8006d44:	44e80fbf 	.word	0x44e80fbf
 8006d48:	44fe16a0 	.word	0x44fe16a0
 8006d4c:	45057028 	.word	0x45057028
            return (int)(fs + 0.5f);
 8006d50:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006d54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d5c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006d60:	4628      	mov	r0, r5
 8006d62:	f00d ffcc 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006d66:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006d6a:	ed1f 7a1a 	vldr	s14, [pc, #-104]	@ 8006d04 <_ZN15Screen1ViewBaseC1Ev+0x1478>
 8006d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d72:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006d76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d7e:	f2c1 8671 	blt.w	8008a64 <_ZN15Screen1ViewBaseC1Ev+0x31d8>
            return (int)(fs + 0.5f);
 8006d82:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006d86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d8e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006d92:	4628      	mov	r0, r5
 8006d94:	f00d ffb3 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006d98:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006d9c:	ed1f 7a26 	vldr	s14, [pc, #-152]	@ 8006d08 <_ZN15Screen1ViewBaseC1Ev+0x147c>
 8006da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006da4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006da8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db0:	f2c1 866c 	blt.w	8008a8c <_ZN15Screen1ViewBaseC1Ev+0x3200>
            return (int)(fs + 0.5f);
 8006db4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006db8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006dbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dc0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f00d ff9a 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006dca:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006dce:	ed1f 7a31 	vldr	s14, [pc, #-196]	@ 8006d0c <_ZN15Screen1ViewBaseC1Ev+0x1480>
 8006dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006dda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de2:	f2c1 8667 	blt.w	8008ab4 <_ZN15Screen1ViewBaseC1Ev+0x3228>
            return (int)(fs + 0.5f);
 8006de6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006dea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006df2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006df6:	4628      	mov	r0, r5
 8006df8:	f00d ff81 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006dfc:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006e00:	ed1f 7a3d 	vldr	s14, [pc, #-244]	@ 8006d10 <_ZN15Screen1ViewBaseC1Ev+0x1484>
 8006e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e08:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006e0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e14:	f2c1 8662 	blt.w	8008adc <_ZN15Screen1ViewBaseC1Ev+0x3250>
            return (int)(fs + 0.5f);
 8006e18:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e24:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f00d ff68 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006e2e:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006e32:	ed1f 7a48 	vldr	s14, [pc, #-288]	@ 8006d14 <_ZN15Screen1ViewBaseC1Ev+0x1488>
 8006e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006e3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e46:	f2c1 865d 	blt.w	8008b04 <_ZN15Screen1ViewBaseC1Ev+0x3278>
            return (int)(fs + 0.5f);
 8006e4a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006e4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e56:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f00d ff4f 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006e60:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006e64:	ed1f 7a54 	vldr	s14, [pc, #-336]	@ 8006d18 <_ZN15Screen1ViewBaseC1Ev+0x148c>
 8006e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006e70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e78:	f2c1 8658 	blt.w	8008b2c <_ZN15Screen1ViewBaseC1Ev+0x32a0>
            return (int)(fs + 0.5f);
 8006e7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006e80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e88:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	f00d ff36 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006e92:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006e96:	ed1f 7a5f 	vldr	s14, [pc, #-380]	@ 8006d1c <_ZN15Screen1ViewBaseC1Ev+0x1490>
 8006e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e9e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006ea2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eaa:	f2c1 8653 	blt.w	8008b54 <_ZN15Screen1ViewBaseC1Ev+0x32c8>
            return (int)(fs + 0.5f);
 8006eae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006eb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006eba:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f00d ff1d 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006ec4:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006ec8:	ed1f 7a6b 	vldr	s14, [pc, #-428]	@ 8006d20 <_ZN15Screen1ViewBaseC1Ev+0x1494>
 8006ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006ed4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006edc:	f2c1 864e 	blt.w	8008b7c <_ZN15Screen1ViewBaseC1Ev+0x32f0>
            return (int)(fs + 0.5f);
 8006ee0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006ee4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006eec:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	f00d ff04 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006ef6:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006efa:	ed1f 7a76 	vldr	s14, [pc, #-472]	@ 8006d24 <_ZN15Screen1ViewBaseC1Ev+0x1498>
 8006efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f02:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006f06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f0e:	f2c1 8649 	blt.w	8008ba4 <_ZN15Screen1ViewBaseC1Ev+0x3318>
            return (int)(fs + 0.5f);
 8006f12:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006f16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f1e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006f22:	4628      	mov	r0, r5
 8006f24:	f00d feeb 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006f28:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006f2c:	ed1f 7a82 	vldr	s14, [pc, #-520]	@ 8006d28 <_ZN15Screen1ViewBaseC1Ev+0x149c>
 8006f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f34:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006f38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f40:	f2c1 8644 	blt.w	8008bcc <_ZN15Screen1ViewBaseC1Ev+0x3340>
            return (int)(fs + 0.5f);
 8006f44:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006f48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f50:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006f54:	4628      	mov	r0, r5
 8006f56:	f00d fed2 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006f5a:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006f5e:	ed1f 7a8d 	vldr	s14, [pc, #-564]	@ 8006d2c <_ZN15Screen1ViewBaseC1Ev+0x14a0>
 8006f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f66:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006f6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f72:	f2c1 863f 	blt.w	8008bf4 <_ZN15Screen1ViewBaseC1Ev+0x3368>
            return (int)(fs + 0.5f);
 8006f76:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006f7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f82:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006f86:	4628      	mov	r0, r5
 8006f88:	f00d feb9 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006f8c:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006f90:	ed1f 7a99 	vldr	s14, [pc, #-612]	@ 8006d30 <_ZN15Screen1ViewBaseC1Ev+0x14a4>
 8006f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f98:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006f9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa4:	f2c1 863a 	blt.w	8008c1c <_ZN15Screen1ViewBaseC1Ev+0x3390>
            return (int)(fs + 0.5f);
 8006fa8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006fac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fb4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006fb8:	4628      	mov	r0, r5
 8006fba:	f00d fea0 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006fbe:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006fc2:	ed1f 7aa4 	vldr	s14, [pc, #-656]	@ 8006d34 <_ZN15Screen1ViewBaseC1Ev+0x14a8>
 8006fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fca:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006fce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd6:	f2c1 8635 	blt.w	8008c44 <_ZN15Screen1ViewBaseC1Ev+0x33b8>
            return (int)(fs + 0.5f);
 8006fda:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006fde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006fe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fe6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006fea:	4628      	mov	r0, r5
 8006fec:	f00d fe87 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006ff0:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8006ff4:	ed1f 7ab0 	vldr	s14, [pc, #-704]	@ 8006d38 <_ZN15Screen1ViewBaseC1Ev+0x14ac>
 8006ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007000:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007008:	f2c1 8630 	blt.w	8008c6c <_ZN15Screen1ViewBaseC1Ev+0x33e0>
            return (int)(fs + 0.5f);
 800700c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007010:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007018:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800701c:	4628      	mov	r0, r5
 800701e:	f00d fe6e 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007022:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007026:	ed1f 7abb 	vldr	s14, [pc, #-748]	@ 8006d3c <_ZN15Screen1ViewBaseC1Ev+0x14b0>
 800702a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800702e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007032:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800703a:	f2c1 862b 	blt.w	8008c94 <_ZN15Screen1ViewBaseC1Ev+0x3408>
            return (int)(fs + 0.5f);
 800703e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007042:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800704a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800704e:	4628      	mov	r0, r5
 8007050:	f00d fe55 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007054:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007058:	ed1f 7ac7 	vldr	s14, [pc, #-796]	@ 8006d40 <_ZN15Screen1ViewBaseC1Ev+0x14b4>
 800705c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007060:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007064:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800706c:	f2c1 8626 	blt.w	8008cbc <_ZN15Screen1ViewBaseC1Ev+0x3430>
            return (int)(fs + 0.5f);
 8007070:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007074:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800707c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007080:	4628      	mov	r0, r5
 8007082:	f00d fe3c 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007086:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800708a:	ed1f 7ad2 	vldr	s14, [pc, #-840]	@ 8006d44 <_ZN15Screen1ViewBaseC1Ev+0x14b8>
 800708e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007092:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007096:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800709a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800709e:	f2c1 8621 	blt.w	8008ce4 <_ZN15Screen1ViewBaseC1Ev+0x3458>
            return (int)(fs + 0.5f);
 80070a2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80070a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070ae:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80070b2:	4628      	mov	r0, r5
 80070b4:	f00d fe23 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80070b8:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80070bc:	ed1f 7ade 	vldr	s14, [pc, #-888]	@ 8006d48 <_ZN15Screen1ViewBaseC1Ev+0x14bc>
 80070c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070c4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80070c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d0:	f2c1 861c 	blt.w	8008d0c <_ZN15Screen1ViewBaseC1Ev+0x3480>
            return (int)(fs + 0.5f);
 80070d4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80070d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070e0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80070e4:	4628      	mov	r0, r5
 80070e6:	f00d fe0a 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80070ea:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80070ee:	ed1f 7ae9 	vldr	s14, [pc, #-932]	@ 8006d4c <_ZN15Screen1ViewBaseC1Ev+0x14c0>
 80070f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070f6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80070fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007102:	f2c1 8617 	blt.w	8008d34 <_ZN15Screen1ViewBaseC1Ev+0x34a8>
            return (int)(fs + 0.5f);
 8007106:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800710a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800710e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007112:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007116:	4628      	mov	r0, r5
 8007118:	f00d fdf1 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800711c:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007120:	ed9f 7af3 	vldr	s14, [pc, #972]	@ 80074f0 <_ZN15Screen1ViewBaseC1Ev+0x1c64>
 8007124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007128:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800712c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007134:	f2c1 8612 	blt.w	8008d5c <_ZN15Screen1ViewBaseC1Ev+0x34d0>
            return (int)(fs + 0.5f);
 8007138:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800713c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007144:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007148:	4628      	mov	r0, r5
 800714a:	f00d fdd8 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800714e:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007152:	ed9f 7ae8 	vldr	s14, [pc, #928]	@ 80074f4 <_ZN15Screen1ViewBaseC1Ev+0x1c68>
 8007156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800715a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800715e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007166:	f2c1 860d 	blt.w	8008d84 <_ZN15Screen1ViewBaseC1Ev+0x34f8>
            return (int)(fs + 0.5f);
 800716a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800716e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007176:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800717a:	4628      	mov	r0, r5
 800717c:	f00d fdbf 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007180:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007184:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 80074f8 <_ZN15Screen1ViewBaseC1Ev+0x1c6c>
 8007188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800718c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007190:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007198:	f2c1 8608 	blt.w	8008dac <_ZN15Screen1ViewBaseC1Ev+0x3520>
            return (int)(fs + 0.5f);
 800719c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80071a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071a8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80071ac:	4628      	mov	r0, r5
 80071ae:	f00d fda6 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80071b2:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80071b6:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 80074fc <_ZN15Screen1ViewBaseC1Ev+0x1c70>
 80071ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071be:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80071c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ca:	f2c1 8603 	blt.w	8008dd4 <_ZN15Screen1ViewBaseC1Ev+0x3548>
            return (int)(fs + 0.5f);
 80071ce:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80071d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071da:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80071de:	4628      	mov	r0, r5
 80071e0:	f00d fd8d 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80071e4:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80071e8:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 8007500 <_ZN15Screen1ViewBaseC1Ev+0x1c74>
 80071ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071f0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80071f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fc:	f2c1 85fe 	blt.w	8008dfc <_ZN15Screen1ViewBaseC1Ev+0x3570>
            return (int)(fs + 0.5f);
 8007200:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007204:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800720c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007210:	4628      	mov	r0, r5
 8007212:	f00d fd74 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007216:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800721a:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8007504 <_ZN15Screen1ViewBaseC1Ev+0x1c78>
 800721e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007222:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007226:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800722a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800722e:	f2c1 85f9 	blt.w	8008e24 <_ZN15Screen1ViewBaseC1Ev+0x3598>
            return (int)(fs + 0.5f);
 8007232:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007236:	ee77 7a87 	vadd.f32	s15, s15, s14
 800723a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800723e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007242:	4628      	mov	r0, r5
 8007244:	f00d fd5b 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007248:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800724c:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8007508 <_ZN15Screen1ViewBaseC1Ev+0x1c7c>
 8007250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007254:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007258:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800725c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007260:	f2c1 85f4 	blt.w	8008e4c <_ZN15Screen1ViewBaseC1Ev+0x35c0>
            return (int)(fs + 0.5f);
 8007264:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007268:	ee77 7a87 	vadd.f32	s15, s15, s14
 800726c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007270:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007274:	4628      	mov	r0, r5
 8007276:	f00d fd42 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800727a:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800727e:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 800750c <_ZN15Screen1ViewBaseC1Ev+0x1c80>
 8007282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007286:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800728a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800728e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007292:	f2c1 85ef 	blt.w	8008e74 <_ZN15Screen1ViewBaseC1Ev+0x35e8>
            return (int)(fs + 0.5f);
 8007296:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800729a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800729e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072a2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80072a6:	4628      	mov	r0, r5
 80072a8:	f00d fd29 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80072ac:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80072b0:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8007510 <_ZN15Screen1ViewBaseC1Ev+0x1c84>
 80072b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072b8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80072bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c4:	f2c1 85ea 	blt.w	8008e9c <_ZN15Screen1ViewBaseC1Ev+0x3610>
            return (int)(fs + 0.5f);
 80072c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80072cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80072d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072d4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80072d8:	4628      	mov	r0, r5
 80072da:	f00d fd10 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80072de:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80072e2:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8007514 <_ZN15Screen1ViewBaseC1Ev+0x1c88>
 80072e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072ea:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80072ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f6:	f2c1 85e5 	blt.w	8008ec4 <_ZN15Screen1ViewBaseC1Ev+0x3638>
            return (int)(fs + 0.5f);
 80072fa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80072fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007306:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800730a:	4628      	mov	r0, r5
 800730c:	f00d fcf7 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007310:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007314:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8007518 <_ZN15Screen1ViewBaseC1Ev+0x1c8c>
 8007318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800731c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007320:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007328:	f2c1 85e0 	blt.w	8008eec <_ZN15Screen1ViewBaseC1Ev+0x3660>
            return (int)(fs + 0.5f);
 800732c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007330:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007338:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800733c:	4628      	mov	r0, r5
 800733e:	f00d fcde 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007342:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007346:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800751c <_ZN15Screen1ViewBaseC1Ev+0x1c90>
 800734a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800734e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007352:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800735a:	f2c1 85db 	blt.w	8008f14 <_ZN15Screen1ViewBaseC1Ev+0x3688>
            return (int)(fs + 0.5f);
 800735e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007362:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800736a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800736e:	4628      	mov	r0, r5
 8007370:	f00d fcc5 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007374:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007378:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8007520 <_ZN15Screen1ViewBaseC1Ev+0x1c94>
 800737c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007380:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007384:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800738c:	f2c1 85d6 	blt.w	8008f3c <_ZN15Screen1ViewBaseC1Ev+0x36b0>
            return (int)(fs + 0.5f);
 8007390:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007394:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800739c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80073a0:	4628      	mov	r0, r5
 80073a2:	f00d fcac 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80073a6:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80073aa:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8007524 <_ZN15Screen1ViewBaseC1Ev+0x1c98>
 80073ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073b2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80073b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073be:	f2c1 85d1 	blt.w	8008f64 <_ZN15Screen1ViewBaseC1Ev+0x36d8>
            return (int)(fs + 0.5f);
 80073c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80073c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80073ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073ce:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80073d2:	4628      	mov	r0, r5
 80073d4:	f00d fc93 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80073d8:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80073dc:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8007528 <_ZN15Screen1ViewBaseC1Ev+0x1c9c>
 80073e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073e4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80073e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f0:	f2c1 85cc 	blt.w	8008f8c <_ZN15Screen1ViewBaseC1Ev+0x3700>
            return (int)(fs + 0.5f);
 80073f4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80073f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80073fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007400:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007404:	4628      	mov	r0, r5
 8007406:	f00d fc7a 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800740a:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800740e:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800752c <_ZN15Screen1ViewBaseC1Ev+0x1ca0>
 8007412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007416:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800741a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800741e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007422:	f2c1 85c7 	blt.w	8008fb4 <_ZN15Screen1ViewBaseC1Ev+0x3728>
            return (int)(fs + 0.5f);
 8007426:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800742a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800742e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007432:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007436:	4628      	mov	r0, r5
 8007438:	f00d fc61 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800743c:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007440:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8007530 <_ZN15Screen1ViewBaseC1Ev+0x1ca4>
 8007444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007448:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800744c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007454:	f2c1 85c2 	blt.w	8008fdc <_ZN15Screen1ViewBaseC1Ev+0x3750>
            return (int)(fs + 0.5f);
 8007458:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800745c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007464:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007468:	4628      	mov	r0, r5
 800746a:	f00d fc48 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800746e:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007472:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8007534 <_ZN15Screen1ViewBaseC1Ev+0x1ca8>
 8007476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800747a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800747e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007486:	f2c1 85bd 	blt.w	8009004 <_ZN15Screen1ViewBaseC1Ev+0x3778>
            return (int)(fs + 0.5f);
 800748a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800748e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007496:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800749a:	4628      	mov	r0, r5
 800749c:	f00d fc2f 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80074a0:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80074a4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8007538 <_ZN15Screen1ViewBaseC1Ev+0x1cac>
 80074a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074ac:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80074b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b8:	f2c1 85b8 	blt.w	800902c <_ZN15Screen1ViewBaseC1Ev+0x37a0>
            return (int)(fs + 0.5f);
 80074bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80074c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074c8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80074cc:	4628      	mov	r0, r5
 80074ce:	f00d fc16 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80074d2:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80074d6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800753c <_ZN15Screen1ViewBaseC1Ev+0x1cb0>
 80074da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074de:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80074e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ea:	f2c1 85b3 	blt.w	8009054 <_ZN15Screen1ViewBaseC1Ev+0x37c8>
 80074ee:	e04d      	b.n	800758c <_ZN15Screen1ViewBaseC1Ev+0x1d00>
 80074f0:	450708e9 	.word	0x450708e9
 80074f4:	450428e3 	.word	0x450428e3
 80074f8:	44fb3477 	.word	0x44fb3477
 80074fc:	44e91090 	.word	0x44e91090
 8007500:	44d4c0e5 	.word	0x44d4c0e5
 8007504:	44c1593f 	.word	0x44c1593f
 8007508:	44b1d5a2 	.word	0x44b1d5a2
 800750c:	44a8cbe0 	.word	0x44a8cbe0
 8007510:	44a8272c 	.word	0x44a8272c
 8007514:	44b0f457 	.word	0x44b0f457
 8007518:	44c343db 	.word	0x44c343db
 800751c:	44de2491 	.word	0x44de2491
 8007520:	44ffb7bf 	.word	0x44ffb7bf
 8007524:	4512ae45 	.word	0x4512ae45
 8007528:	4525f74f 	.word	0x4525f74f
 800752c:	4538090e 	.word	0x4538090e
 8007530:	454742b0 	.word	0x454742b0
 8007534:	45523860 	.word	0x45523860
 8007538:	4557d654 	.word	0x4557d654
 800753c:	45577b8d 	.word	0x45577b8d
 8007540:	455109cb 	.word	0x455109cb
 8007544:	4544e914 	.word	0x4544e914
 8007548:	4533fe81 	.word	0x4533fe81
 800754c:	451f972b 	.word	0x451f972b
 8007550:	45094940 	.word	0x45094940
 8007554:	44e59c70 	.word	0x44e59c70
 8007558:	44bbb3a6 	.word	0x44bbb3a6
 800755c:	4497e38c 	.word	0x4497e38c
 8007560:	44792817 	.word	0x44792817
 8007564:	4456a43b 	.word	0x4456a43b
 8007568:	44495b78 	.word	0x44495b78
 800756c:	445060b3 	.word	0x445060b3
 8007570:	4468d998 	.word	0x4468d998
 8007574:	44872700 	.word	0x44872700
 8007578:	449d8f95 	.word	0x449d8f95
 800757c:	44b48d88 	.word	0x44b48d88
 8007580:	44c90eb7 	.word	0x44c90eb7
 8007584:	44d85762 	.word	0x44d85762
 8007588:	44e048f8 	.word	0x44e048f8
            return (int)(fs + 0.5f);
 800758c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007590:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007598:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800759c:	4628      	mov	r0, r5
 800759e:	f00d fbae 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80075a2:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80075a6:	ed1f 7a1a 	vldr	s14, [pc, #-104]	@ 8007540 <_ZN15Screen1ViewBaseC1Ev+0x1cb4>
 80075aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075ae:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80075b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ba:	f2c1 855f 	blt.w	800907c <_ZN15Screen1ViewBaseC1Ev+0x37f0>
            return (int)(fs + 0.5f);
 80075be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80075c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075ca:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80075ce:	4628      	mov	r0, r5
 80075d0:	f00d fb95 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80075d4:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80075d8:	ed1f 7a26 	vldr	s14, [pc, #-152]	@ 8007544 <_ZN15Screen1ViewBaseC1Ev+0x1cb8>
 80075dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075e0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80075e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ec:	f2c1 855a 	blt.w	80090a4 <_ZN15Screen1ViewBaseC1Ev+0x3818>
            return (int)(fs + 0.5f);
 80075f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80075f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075fc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007600:	4628      	mov	r0, r5
 8007602:	f00d fb7c 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007606:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800760a:	ed1f 7a31 	vldr	s14, [pc, #-196]	@ 8007548 <_ZN15Screen1ViewBaseC1Ev+0x1cbc>
 800760e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007612:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007616:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800761a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800761e:	f2c1 8555 	blt.w	80090cc <_ZN15Screen1ViewBaseC1Ev+0x3840>
            return (int)(fs + 0.5f);
 8007622:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007626:	ee77 7a87 	vadd.f32	s15, s15, s14
 800762a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800762e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007632:	4628      	mov	r0, r5
 8007634:	f00d fb63 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007638:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800763c:	ed1f 7a3d 	vldr	s14, [pc, #-244]	@ 800754c <_ZN15Screen1ViewBaseC1Ev+0x1cc0>
 8007640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007644:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800764c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007650:	f2c1 8550 	blt.w	80090f4 <_ZN15Screen1ViewBaseC1Ev+0x3868>
            return (int)(fs + 0.5f);
 8007654:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007658:	ee77 7a87 	vadd.f32	s15, s15, s14
 800765c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007660:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007664:	4628      	mov	r0, r5
 8007666:	f00d fb4a 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800766a:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800766e:	ed1f 7a48 	vldr	s14, [pc, #-288]	@ 8007550 <_ZN15Screen1ViewBaseC1Ev+0x1cc4>
 8007672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007676:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800767a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800767e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007682:	f2c1 854b 	blt.w	800911c <_ZN15Screen1ViewBaseC1Ev+0x3890>
            return (int)(fs + 0.5f);
 8007686:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800768a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800768e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007692:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007696:	4628      	mov	r0, r5
 8007698:	f00d fb31 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800769c:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80076a0:	ed1f 7a54 	vldr	s14, [pc, #-336]	@ 8007554 <_ZN15Screen1ViewBaseC1Ev+0x1cc8>
 80076a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076a8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80076ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b4:	f2c1 8546 	blt.w	8009144 <_ZN15Screen1ViewBaseC1Ev+0x38b8>
            return (int)(fs + 0.5f);
 80076b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80076bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076c4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80076c8:	4628      	mov	r0, r5
 80076ca:	f00d fb18 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80076ce:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80076d2:	ed1f 7a5f 	vldr	s14, [pc, #-380]	@ 8007558 <_ZN15Screen1ViewBaseC1Ev+0x1ccc>
 80076d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076da:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80076de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e6:	f2c1 8541 	blt.w	800916c <_ZN15Screen1ViewBaseC1Ev+0x38e0>
            return (int)(fs + 0.5f);
 80076ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80076ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076f6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80076fa:	4628      	mov	r0, r5
 80076fc:	f00d faff 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007700:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007704:	ed1f 7a6b 	vldr	s14, [pc, #-428]	@ 800755c <_ZN15Screen1ViewBaseC1Ev+0x1cd0>
 8007708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800770c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007710:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007718:	f2c1 853c 	blt.w	8009194 <_ZN15Screen1ViewBaseC1Ev+0x3908>
            return (int)(fs + 0.5f);
 800771c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007720:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007728:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800772c:	4628      	mov	r0, r5
 800772e:	f00d fae6 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007732:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007736:	ed1f 7a76 	vldr	s14, [pc, #-472]	@ 8007560 <_ZN15Screen1ViewBaseC1Ev+0x1cd4>
 800773a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800773e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007742:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800774a:	f2c1 8537 	blt.w	80091bc <_ZN15Screen1ViewBaseC1Ev+0x3930>
            return (int)(fs + 0.5f);
 800774e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007752:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800775a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800775e:	4628      	mov	r0, r5
 8007760:	f00d facd 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007764:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007768:	ed1f 7a82 	vldr	s14, [pc, #-520]	@ 8007564 <_ZN15Screen1ViewBaseC1Ev+0x1cd8>
 800776c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007770:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007774:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800777c:	f2c1 8532 	blt.w	80091e4 <_ZN15Screen1ViewBaseC1Ev+0x3958>
            return (int)(fs + 0.5f);
 8007780:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007784:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800778c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007790:	4628      	mov	r0, r5
 8007792:	f00d fab4 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007796:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800779a:	ed1f 7a8d 	vldr	s14, [pc, #-564]	@ 8007568 <_ZN15Screen1ViewBaseC1Ev+0x1cdc>
 800779e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077a2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80077a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ae:	f2c1 852d 	blt.w	800920c <_ZN15Screen1ViewBaseC1Ev+0x3980>
            return (int)(fs + 0.5f);
 80077b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80077b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077be:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80077c2:	4628      	mov	r0, r5
 80077c4:	f00d fa9b 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80077c8:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80077cc:	ed1f 7a99 	vldr	s14, [pc, #-612]	@ 800756c <_ZN15Screen1ViewBaseC1Ev+0x1ce0>
 80077d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077d4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80077d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e0:	f2c1 8528 	blt.w	8009234 <_ZN15Screen1ViewBaseC1Ev+0x39a8>
            return (int)(fs + 0.5f);
 80077e4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80077e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077f0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80077f4:	4628      	mov	r0, r5
 80077f6:	f00d fa82 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80077fa:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80077fe:	ed1f 7aa4 	vldr	s14, [pc, #-656]	@ 8007570 <_ZN15Screen1ViewBaseC1Ev+0x1ce4>
 8007802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007806:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800780a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800780e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007812:	f2c1 8523 	blt.w	800925c <_ZN15Screen1ViewBaseC1Ev+0x39d0>
            return (int)(fs + 0.5f);
 8007816:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800781a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800781e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007822:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007826:	4628      	mov	r0, r5
 8007828:	f00d fa69 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800782c:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007830:	ed1f 7ab0 	vldr	s14, [pc, #-704]	@ 8007574 <_ZN15Screen1ViewBaseC1Ev+0x1ce8>
 8007834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007838:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800783c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007844:	f2c1 851e 	blt.w	8009284 <_ZN15Screen1ViewBaseC1Ev+0x39f8>
            return (int)(fs + 0.5f);
 8007848:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800784c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007854:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007858:	4628      	mov	r0, r5
 800785a:	f00d fa50 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800785e:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007862:	ed1f 7abb 	vldr	s14, [pc, #-748]	@ 8007578 <_ZN15Screen1ViewBaseC1Ev+0x1cec>
 8007866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800786a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800786e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007876:	f2c1 8519 	blt.w	80092ac <_ZN15Screen1ViewBaseC1Ev+0x3a20>
            return (int)(fs + 0.5f);
 800787a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800787e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007886:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800788a:	4628      	mov	r0, r5
 800788c:	f00d fa37 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007890:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007894:	ed1f 7ac7 	vldr	s14, [pc, #-796]	@ 800757c <_ZN15Screen1ViewBaseC1Ev+0x1cf0>
 8007898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800789c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80078a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80078a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a8:	f2c1 8514 	blt.w	80092d4 <_ZN15Screen1ViewBaseC1Ev+0x3a48>
            return (int)(fs + 0.5f);
 80078ac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80078b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078b8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80078bc:	4628      	mov	r0, r5
 80078be:	f00d fa1e 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80078c2:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80078c6:	ed1f 7ad2 	vldr	s14, [pc, #-840]	@ 8007580 <_ZN15Screen1ViewBaseC1Ev+0x1cf4>
 80078ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078ce:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80078d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80078d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078da:	f2c1 850f 	blt.w	80092fc <_ZN15Screen1ViewBaseC1Ev+0x3a70>
            return (int)(fs + 0.5f);
 80078de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80078e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078ea:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80078ee:	4628      	mov	r0, r5
 80078f0:	f00d fa05 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80078f4:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80078f8:	ed1f 7ade 	vldr	s14, [pc, #-888]	@ 8007584 <_ZN15Screen1ViewBaseC1Ev+0x1cf8>
 80078fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007900:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007904:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800790c:	f2c1 850a 	blt.w	8009324 <_ZN15Screen1ViewBaseC1Ev+0x3a98>
            return (int)(fs + 0.5f);
 8007910:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007914:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800791c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007920:	4628      	mov	r0, r5
 8007922:	f00d f9ec 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007926:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800792a:	ed1f 7ae9 	vldr	s14, [pc, #-932]	@ 8007588 <_ZN15Screen1ViewBaseC1Ev+0x1cfc>
 800792e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007932:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007936:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800793a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793e:	f2c1 8505 	blt.w	800934c <_ZN15Screen1ViewBaseC1Ev+0x3ac0>
            return (int)(fs + 0.5f);
 8007942:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007946:	ee77 7a87 	vadd.f32	s15, s15, s14
 800794a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800794e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007952:	4628      	mov	r0, r5
 8007954:	f00d f9d3 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007958:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800795c:	ed9f 7af0 	vldr	s14, [pc, #960]	@ 8007d20 <_ZN15Screen1ViewBaseC1Ev+0x2494>
 8007960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007964:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007968:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800796c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007970:	f2c1 8500 	blt.w	8009374 <_ZN15Screen1ViewBaseC1Ev+0x3ae8>
            return (int)(fs + 0.5f);
 8007974:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007978:	ee77 7a87 	vadd.f32	s15, s15, s14
 800797c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007980:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007984:	4628      	mov	r0, r5
 8007986:	f00d f9ba 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800798a:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 800798e:	ed9f 7ae5 	vldr	s14, [pc, #916]	@ 8007d24 <_ZN15Screen1ViewBaseC1Ev+0x2498>
 8007992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007996:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800799a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800799e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a2:	f2c1 84fb 	blt.w	800939c <_ZN15Screen1ViewBaseC1Ev+0x3b10>
            return (int)(fs + 0.5f);
 80079a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80079aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079b2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80079b6:	4628      	mov	r0, r5
 80079b8:	f00d f9a1 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80079bc:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80079c0:	ed9f 7ad9 	vldr	s14, [pc, #868]	@ 8007d28 <_ZN15Screen1ViewBaseC1Ev+0x249c>
 80079c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079c8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80079cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80079d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d4:	f2c1 84f6 	blt.w	80093c4 <_ZN15Screen1ViewBaseC1Ev+0x3b38>
            return (int)(fs + 0.5f);
 80079d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80079dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079e4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80079e8:	4628      	mov	r0, r5
 80079ea:	f00d f988 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80079ee:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 80079f2:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8007d2c <_ZN15Screen1ViewBaseC1Ev+0x24a0>
 80079f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079fa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80079fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a06:	f2c1 84f1 	blt.w	80093ec <_ZN15Screen1ViewBaseC1Ev+0x3b60>
            return (int)(fs + 0.5f);
 8007a0a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007a0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a16:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f00d f96f 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007a20:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007a24:	ed9f 7ac2 	vldr	s14, [pc, #776]	@ 8007d30 <_ZN15Screen1ViewBaseC1Ev+0x24a4>
 8007a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007a30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a38:	f2c1 84ec 	blt.w	8009414 <_ZN15Screen1ViewBaseC1Ev+0x3b88>
            return (int)(fs + 0.5f);
 8007a3c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007a40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a48:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	f00d f956 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007a52:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007a56:	ed9f 7ab7 	vldr	s14, [pc, #732]	@ 8007d34 <_ZN15Screen1ViewBaseC1Ev+0x24a8>
 8007a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007a62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a6a:	f2c1 84e7 	blt.w	800943c <_ZN15Screen1ViewBaseC1Ev+0x3bb0>
            return (int)(fs + 0.5f);
 8007a6e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007a72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a7a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f00d f93d 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007a84:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007a88:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 8007d38 <_ZN15Screen1ViewBaseC1Ev+0x24ac>
 8007a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a90:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007a94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a9c:	f2c1 84e2 	blt.w	8009464 <_ZN15Screen1ViewBaseC1Ev+0x3bd8>
            return (int)(fs + 0.5f);
 8007aa0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007aa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007aac:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	f00d f924 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007ab6:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007aba:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8007d3c <_ZN15Screen1ViewBaseC1Ev+0x24b0>
 8007abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007ac6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ace:	f2c1 84dd 	blt.w	800948c <_ZN15Screen1ViewBaseC1Ev+0x3c00>
            return (int)(fs + 0.5f);
 8007ad2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007ad6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ade:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f00d f90b 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007ae8:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007aec:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8007d40 <_ZN15Screen1ViewBaseC1Ev+0x24b4>
 8007af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007af4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b00:	f2c1 84d8 	blt.w	80094b4 <_ZN15Screen1ViewBaseC1Ev+0x3c28>
            return (int)(fs + 0.5f);
 8007b04:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007b08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b10:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007b14:	4628      	mov	r0, r5
 8007b16:	f00d f8f2 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007b1a:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007b1e:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8007d44 <_ZN15Screen1ViewBaseC1Ev+0x24b8>
 8007b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b26:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007b2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b32:	f2c1 84d3 	blt.w	80094dc <_ZN15Screen1ViewBaseC1Ev+0x3c50>
            return (int)(fs + 0.5f);
 8007b36:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007b3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b42:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007b46:	4628      	mov	r0, r5
 8007b48:	f00d f8d9 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007b4c:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007b50:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8007d48 <_ZN15Screen1ViewBaseC1Ev+0x24bc>
 8007b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b58:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007b5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b64:	f2c1 84ce 	blt.w	8009504 <_ZN15Screen1ViewBaseC1Ev+0x3c78>
            return (int)(fs + 0.5f);
 8007b68:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007b6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b74:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f00d f8c0 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007b7e:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007b82:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8007d4c <_ZN15Screen1ViewBaseC1Ev+0x24c0>
 8007b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007b8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b96:	f2c1 84c9 	blt.w	800952c <_ZN15Screen1ViewBaseC1Ev+0x3ca0>
            return (int)(fs + 0.5f);
 8007b9a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007b9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ba6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007baa:	4628      	mov	r0, r5
 8007bac:	f00d f8a7 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007bb0:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007bb4:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8007d50 <_ZN15Screen1ViewBaseC1Ev+0x24c4>
 8007bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc8:	f2c1 84c4 	blt.w	8009554 <_ZN15Screen1ViewBaseC1Ev+0x3cc8>
            return (int)(fs + 0.5f);
 8007bcc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007bd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bd8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007bdc:	4628      	mov	r0, r5
 8007bde:	f00d f88e 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007be2:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007be6:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8007d54 <_ZN15Screen1ViewBaseC1Ev+0x24c8>
 8007bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bee:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007bf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bfa:	f2c1 84bf 	blt.w	800957c <_ZN15Screen1ViewBaseC1Ev+0x3cf0>
            return (int)(fs + 0.5f);
 8007bfe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007c02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c0a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f00d f875 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007c14:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007c18:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8007d58 <_ZN15Screen1ViewBaseC1Ev+0x24cc>
 8007c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c20:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007c24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c2c:	f2c1 84ba 	blt.w	80095a4 <_ZN15Screen1ViewBaseC1Ev+0x3d18>
            return (int)(fs + 0.5f);
 8007c30:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007c34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c3c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007c40:	4628      	mov	r0, r5
 8007c42:	f00d f85c 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007c46:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007c4a:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8007d5c <_ZN15Screen1ViewBaseC1Ev+0x24d0>
 8007c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c52:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007c56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c5e:	f2c1 84b5 	blt.w	80095cc <_ZN15Screen1ViewBaseC1Ev+0x3d40>
            return (int)(fs + 0.5f);
 8007c62:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007c66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c6e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007c72:	4628      	mov	r0, r5
 8007c74:	f00d f843 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007c78:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007c7c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8007d60 <_ZN15Screen1ViewBaseC1Ev+0x24d4>
 8007c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c84:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007c88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c90:	f2c1 84b0 	blt.w	80095f4 <_ZN15Screen1ViewBaseC1Ev+0x3d68>
            return (int)(fs + 0.5f);
 8007c94:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007c98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ca0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	f00d f82a 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007caa:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007cae:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8007d64 <_ZN15Screen1ViewBaseC1Ev+0x24d8>
 8007cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007cba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc2:	f2c1 84ab 	blt.w	800961c <_ZN15Screen1ViewBaseC1Ev+0x3d90>
            return (int)(fs + 0.5f);
 8007cc6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007cca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007cce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cd2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f00d f811 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007cdc:	edd4 7a33 	vldr	s15, [r4, #204]	@ 0xcc
 8007ce0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8007d68 <_ZN15Screen1ViewBaseC1Ev+0x24dc>
 8007ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007cec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf4:	f2c1 84a6 	blt.w	8009644 <_ZN15Screen1ViewBaseC1Ev+0x3db8>
            return (int)(fs + 0.5f);
 8007cf8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007cfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d04:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f00c fff8 	bl	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8007d0e:	1d20      	adds	r0, r4, #4
 8007d10:	4629      	mov	r1, r5
 8007d12:	f009 fdf1 	bl	80118f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8007d16:	4620      	mov	r0, r4
 8007d18:	b00b      	add	sp, #44	@ 0x2c
 8007d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1e:	bf00      	nop
 8007d20:	44df9928 	.word	0x44df9928
 8007d24:	44d5f3fd 	.word	0x44d5f3fd
 8007d28:	44c40590 	.word	0x44c40590
 8007d2c:	44ab6a65 	.word	0x44ab6a65
 8007d30:	448e87ff 	.word	0x448e87ff
 8007d34:	4460a2b6 	.word	0x4460a2b6
 8007d38:	4427fa76 	.word	0x4427fa76
 8007d3c:	43f2d52b 	.word	0x43f2d52b
 8007d40:	43b5181b 	.word	0x43b5181b
 8007d44:	439f5ca8 	.word	0x439f5ca8
 8007d48:	43b6ce60 	.word	0x43b6ce60
 8007d4c:	43fc9905 	.word	0x43fc9905
 8007d50:	4436dee2 	.word	0x4436dee2
 8007d54:	4480d39b 	.word	0x4480d39b
 8007d58:	44acc250 	.word	0x44acc250
 8007d5c:	44dc1193 	.word	0x44dc1193
 8007d60:	4505a3fd 	.word	0x4505a3fd
 8007d64:	451b7731 	.word	0x451b7731
 8007d68:	452df0ba 	.word	0x452df0ba
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8007d6c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007d70:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007d74:	ee17 3a10 	vmov	r3, s14
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007d7e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d8a:	ee17 1a90 	vmov	r1, s15
 8007d8e:	4419      	add	r1, r3
 8007d90:	f7fd bf01 	b.w	8005b96 <_ZN15Screen1ViewBaseC1Ev+0x30a>
 8007d94:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007d98:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007d9c:	ee17 3a10 	vmov	r3, s14
 8007da0:	3b01      	subs	r3, #1
 8007da2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007da6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007db2:	ee17 1a90 	vmov	r1, s15
 8007db6:	4419      	add	r1, r3
 8007db8:	f7fd bf06 	b.w	8005bc8 <_ZN15Screen1ViewBaseC1Ev+0x33c>
 8007dbc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007dc0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007dc4:	ee17 3a10 	vmov	r3, s14
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007dce:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007dda:	ee17 1a90 	vmov	r1, s15
 8007dde:	4419      	add	r1, r3
 8007de0:	f7fd bf0b 	b.w	8005bfa <_ZN15Screen1ViewBaseC1Ev+0x36e>
 8007de4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007de8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007dec:	ee17 3a10 	vmov	r3, s14
 8007df0:	3b01      	subs	r3, #1
 8007df2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007df6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e02:	ee17 1a90 	vmov	r1, s15
 8007e06:	4419      	add	r1, r3
 8007e08:	f7fd bf10 	b.w	8005c2c <_ZN15Screen1ViewBaseC1Ev+0x3a0>
 8007e0c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007e10:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007e14:	ee17 3a10 	vmov	r3, s14
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e1e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e2a:	ee17 1a90 	vmov	r1, s15
 8007e2e:	4419      	add	r1, r3
 8007e30:	f7fd bf5a 	b.w	8005ce8 <_ZN15Screen1ViewBaseC1Ev+0x45c>
 8007e34:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007e38:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007e3c:	ee17 3a10 	vmov	r3, s14
 8007e40:	3b01      	subs	r3, #1
 8007e42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e46:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e52:	ee17 1a90 	vmov	r1, s15
 8007e56:	4419      	add	r1, r3
 8007e58:	f7fd bf5f 	b.w	8005d1a <_ZN15Screen1ViewBaseC1Ev+0x48e>
 8007e5c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007e60:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007e64:	ee17 3a10 	vmov	r3, s14
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e6e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e7a:	ee17 1a90 	vmov	r1, s15
 8007e7e:	4419      	add	r1, r3
 8007e80:	f7fd bf64 	b.w	8005d4c <_ZN15Screen1ViewBaseC1Ev+0x4c0>
 8007e84:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007e88:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007e8c:	ee17 3a10 	vmov	r3, s14
 8007e90:	3b01      	subs	r3, #1
 8007e92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e96:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ea2:	ee17 1a90 	vmov	r1, s15
 8007ea6:	4419      	add	r1, r3
 8007ea8:	f7fd bf69 	b.w	8005d7e <_ZN15Screen1ViewBaseC1Ev+0x4f2>
 8007eac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007eb0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007eb4:	ee17 3a10 	vmov	r3, s14
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ebe:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007eca:	ee17 1a90 	vmov	r1, s15
 8007ece:	4419      	add	r1, r3
 8007ed0:	f7fd bf6e 	b.w	8005db0 <_ZN15Screen1ViewBaseC1Ev+0x524>
 8007ed4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007ed8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007edc:	ee17 3a10 	vmov	r3, s14
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ee6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ef2:	ee17 1a90 	vmov	r1, s15
 8007ef6:	4419      	add	r1, r3
 8007ef8:	f7fd bf73 	b.w	8005de2 <_ZN15Screen1ViewBaseC1Ev+0x556>
 8007efc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007f00:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007f04:	ee17 3a10 	vmov	r3, s14
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f0e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f1a:	ee17 1a90 	vmov	r1, s15
 8007f1e:	4419      	add	r1, r3
 8007f20:	f7fd bf78 	b.w	8005e14 <_ZN15Screen1ViewBaseC1Ev+0x588>
 8007f24:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007f28:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007f2c:	ee17 3a10 	vmov	r3, s14
 8007f30:	3b01      	subs	r3, #1
 8007f32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f36:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f42:	ee17 1a90 	vmov	r1, s15
 8007f46:	4419      	add	r1, r3
 8007f48:	f7fd bf7d 	b.w	8005e46 <_ZN15Screen1ViewBaseC1Ev+0x5ba>
 8007f4c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007f50:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007f54:	ee17 3a10 	vmov	r3, s14
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f5e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f6a:	ee17 1a90 	vmov	r1, s15
 8007f6e:	4419      	add	r1, r3
 8007f70:	f7fd bf82 	b.w	8005e78 <_ZN15Screen1ViewBaseC1Ev+0x5ec>
 8007f74:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007f78:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007f7c:	ee17 3a10 	vmov	r3, s14
 8007f80:	3b01      	subs	r3, #1
 8007f82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f86:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f92:	ee17 1a90 	vmov	r1, s15
 8007f96:	4419      	add	r1, r3
 8007f98:	f7fd bf87 	b.w	8005eaa <_ZN15Screen1ViewBaseC1Ev+0x61e>
 8007f9c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007fa0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007fa4:	ee17 3a10 	vmov	r3, s14
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007fae:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fba:	ee17 1a90 	vmov	r1, s15
 8007fbe:	4419      	add	r1, r3
 8007fc0:	f7fd bf8c 	b.w	8005edc <_ZN15Screen1ViewBaseC1Ev+0x650>
 8007fc4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007fc8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007fcc:	ee17 3a10 	vmov	r3, s14
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007fd6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8007fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fe2:	ee17 1a90 	vmov	r1, s15
 8007fe6:	4419      	add	r1, r3
 8007fe8:	f7fd bf91 	b.w	8005f0e <_ZN15Screen1ViewBaseC1Ev+0x682>
 8007fec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007ff0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007ff4:	ee17 3a10 	vmov	r3, s14
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ffe:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800800a:	ee17 1a90 	vmov	r1, s15
 800800e:	4419      	add	r1, r3
 8008010:	f7fd bf96 	b.w	8005f40 <_ZN15Screen1ViewBaseC1Ev+0x6b4>
 8008014:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008018:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800801c:	ee17 3a10 	vmov	r3, s14
 8008020:	3b01      	subs	r3, #1
 8008022:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008026:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800802a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800802e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008032:	ee17 1a90 	vmov	r1, s15
 8008036:	4419      	add	r1, r3
 8008038:	f7fd bf9b 	b.w	8005f72 <_ZN15Screen1ViewBaseC1Ev+0x6e6>
 800803c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008040:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008044:	ee17 3a10 	vmov	r3, s14
 8008048:	3b01      	subs	r3, #1
 800804a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800804e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800805a:	ee17 1a90 	vmov	r1, s15
 800805e:	4419      	add	r1, r3
 8008060:	f7fd bfa0 	b.w	8005fa4 <_ZN15Screen1ViewBaseC1Ev+0x718>
 8008064:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008068:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800806c:	ee17 3a10 	vmov	r3, s14
 8008070:	3b01      	subs	r3, #1
 8008072:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008076:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800807a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800807e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008082:	ee17 1a90 	vmov	r1, s15
 8008086:	4419      	add	r1, r3
 8008088:	f7fd bfa5 	b.w	8005fd6 <_ZN15Screen1ViewBaseC1Ev+0x74a>
 800808c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008090:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008094:	ee17 3a10 	vmov	r3, s14
 8008098:	3b01      	subs	r3, #1
 800809a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800809e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80080a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080aa:	ee17 1a90 	vmov	r1, s15
 80080ae:	4419      	add	r1, r3
 80080b0:	f7fd bfaa 	b.w	8006008 <_ZN15Screen1ViewBaseC1Ev+0x77c>
 80080b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080b8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80080bc:	ee17 3a10 	vmov	r3, s14
 80080c0:	3b01      	subs	r3, #1
 80080c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80080c6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80080ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080d2:	ee17 1a90 	vmov	r1, s15
 80080d6:	4419      	add	r1, r3
 80080d8:	f7fd bfaf 	b.w	800603a <_ZN15Screen1ViewBaseC1Ev+0x7ae>
 80080dc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080e0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80080e4:	ee17 3a10 	vmov	r3, s14
 80080e8:	3b01      	subs	r3, #1
 80080ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80080ee:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80080f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080fa:	ee17 1a90 	vmov	r1, s15
 80080fe:	4419      	add	r1, r3
 8008100:	f7fd bfb4 	b.w	800606c <_ZN15Screen1ViewBaseC1Ev+0x7e0>
 8008104:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008108:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800810c:	ee17 3a10 	vmov	r3, s14
 8008110:	3b01      	subs	r3, #1
 8008112:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008116:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800811a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800811e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008122:	ee17 1a90 	vmov	r1, s15
 8008126:	4419      	add	r1, r3
 8008128:	f7fd bfb9 	b.w	800609e <_ZN15Screen1ViewBaseC1Ev+0x812>
 800812c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008130:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008134:	ee17 3a10 	vmov	r3, s14
 8008138:	3b01      	subs	r3, #1
 800813a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800813e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800814a:	ee17 1a90 	vmov	r1, s15
 800814e:	4419      	add	r1, r3
 8008150:	f7fd bfbe 	b.w	80060d0 <_ZN15Screen1ViewBaseC1Ev+0x844>
 8008154:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008158:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800815c:	ee17 3a10 	vmov	r3, s14
 8008160:	3b01      	subs	r3, #1
 8008162:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008166:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800816a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800816e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008172:	ee17 1a90 	vmov	r1, s15
 8008176:	4419      	add	r1, r3
 8008178:	f7fd bfc3 	b.w	8006102 <_ZN15Screen1ViewBaseC1Ev+0x876>
 800817c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008180:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008184:	ee17 3a10 	vmov	r3, s14
 8008188:	3b01      	subs	r3, #1
 800818a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800818e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800819a:	ee17 1a90 	vmov	r1, s15
 800819e:	4419      	add	r1, r3
 80081a0:	f7fd bfc8 	b.w	8006134 <_ZN15Screen1ViewBaseC1Ev+0x8a8>
 80081a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80081a8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80081ac:	ee17 3a10 	vmov	r3, s14
 80081b0:	3b01      	subs	r3, #1
 80081b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80081b6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80081ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081c2:	ee17 1a90 	vmov	r1, s15
 80081c6:	4419      	add	r1, r3
 80081c8:	f7fd bfcd 	b.w	8006166 <_ZN15Screen1ViewBaseC1Ev+0x8da>
 80081cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80081d0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80081d4:	ee17 3a10 	vmov	r3, s14
 80081d8:	3b01      	subs	r3, #1
 80081da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80081de:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80081e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081ea:	ee17 1a90 	vmov	r1, s15
 80081ee:	4419      	add	r1, r3
 80081f0:	f7fd bfd2 	b.w	8006198 <_ZN15Screen1ViewBaseC1Ev+0x90c>
 80081f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80081f8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80081fc:	ee17 3a10 	vmov	r3, s14
 8008200:	3b01      	subs	r3, #1
 8008202:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008206:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800820a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800820e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008212:	ee17 1a90 	vmov	r1, s15
 8008216:	4419      	add	r1, r3
 8008218:	f7fd bfd7 	b.w	80061ca <_ZN15Screen1ViewBaseC1Ev+0x93e>
 800821c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008220:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008224:	ee17 3a10 	vmov	r3, s14
 8008228:	3b01      	subs	r3, #1
 800822a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800822e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800823a:	ee17 1a90 	vmov	r1, s15
 800823e:	4419      	add	r1, r3
 8008240:	f7fd bfdc 	b.w	80061fc <_ZN15Screen1ViewBaseC1Ev+0x970>
 8008244:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008248:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800824c:	ee17 3a10 	vmov	r3, s14
 8008250:	3b01      	subs	r3, #1
 8008252:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008256:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800825a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800825e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008262:	ee17 1a90 	vmov	r1, s15
 8008266:	4419      	add	r1, r3
 8008268:	f7fd bfe1 	b.w	800622e <_ZN15Screen1ViewBaseC1Ev+0x9a2>
 800826c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008270:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008274:	ee17 3a10 	vmov	r3, s14
 8008278:	3b01      	subs	r3, #1
 800827a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800827e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008286:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800828a:	ee17 1a90 	vmov	r1, s15
 800828e:	4419      	add	r1, r3
 8008290:	f7fd bfe6 	b.w	8006260 <_ZN15Screen1ViewBaseC1Ev+0x9d4>
 8008294:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008298:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800829c:	ee17 3a10 	vmov	r3, s14
 80082a0:	3b01      	subs	r3, #1
 80082a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082a6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80082aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082b2:	ee17 1a90 	vmov	r1, s15
 80082b6:	4419      	add	r1, r3
 80082b8:	f7fd bfeb 	b.w	8006292 <_ZN15Screen1ViewBaseC1Ev+0xa06>
 80082bc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80082c0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80082c4:	ee17 3a10 	vmov	r3, s14
 80082c8:	3b01      	subs	r3, #1
 80082ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082ce:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80082d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082da:	ee17 1a90 	vmov	r1, s15
 80082de:	4419      	add	r1, r3
 80082e0:	f7fd bff0 	b.w	80062c4 <_ZN15Screen1ViewBaseC1Ev+0xa38>
 80082e4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80082e8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80082ec:	ee17 3a10 	vmov	r3, s14
 80082f0:	3b01      	subs	r3, #1
 80082f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082f6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80082fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008302:	ee17 1a90 	vmov	r1, s15
 8008306:	4419      	add	r1, r3
 8008308:	f7fd bff5 	b.w	80062f6 <_ZN15Screen1ViewBaseC1Ev+0xa6a>
 800830c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008310:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008314:	ee17 3a10 	vmov	r3, s14
 8008318:	3b01      	subs	r3, #1
 800831a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800831e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008326:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800832a:	ee17 1a90 	vmov	r1, s15
 800832e:	4419      	add	r1, r3
 8008330:	f7fd bffa 	b.w	8006328 <_ZN15Screen1ViewBaseC1Ev+0xa9c>
 8008334:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008338:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800833c:	ee17 3a10 	vmov	r3, s14
 8008340:	3b01      	subs	r3, #1
 8008342:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008346:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800834a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800834e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008352:	ee17 1a90 	vmov	r1, s15
 8008356:	4419      	add	r1, r3
 8008358:	f7fd bfff 	b.w	800635a <_ZN15Screen1ViewBaseC1Ev+0xace>
 800835c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008360:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008364:	ee17 3a10 	vmov	r3, s14
 8008368:	3b01      	subs	r3, #1
 800836a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800836e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008376:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800837a:	ee17 1a90 	vmov	r1, s15
 800837e:	4419      	add	r1, r3
 8008380:	f7fe b804 	b.w	800638c <_ZN15Screen1ViewBaseC1Ev+0xb00>
 8008384:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008388:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800838c:	ee17 3a10 	vmov	r3, s14
 8008390:	3b01      	subs	r3, #1
 8008392:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008396:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800839a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800839e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083a2:	ee17 1a90 	vmov	r1, s15
 80083a6:	4419      	add	r1, r3
 80083a8:	f7fe b809 	b.w	80063be <_ZN15Screen1ViewBaseC1Ev+0xb32>
 80083ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80083b0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80083b4:	ee17 3a10 	vmov	r3, s14
 80083b8:	3b01      	subs	r3, #1
 80083ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80083be:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80083c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083ca:	ee17 1a90 	vmov	r1, s15
 80083ce:	4419      	add	r1, r3
 80083d0:	f7fe b80e 	b.w	80063f0 <_ZN15Screen1ViewBaseC1Ev+0xb64>
 80083d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80083d8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80083dc:	ee17 3a10 	vmov	r3, s14
 80083e0:	3b01      	subs	r3, #1
 80083e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80083e6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80083ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083f2:	ee17 1a90 	vmov	r1, s15
 80083f6:	4419      	add	r1, r3
 80083f8:	f7fe b813 	b.w	8006422 <_ZN15Screen1ViewBaseC1Ev+0xb96>
 80083fc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008400:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008404:	ee17 3a10 	vmov	r3, s14
 8008408:	3b01      	subs	r3, #1
 800840a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800840e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800841a:	ee17 1a90 	vmov	r1, s15
 800841e:	4419      	add	r1, r3
 8008420:	f7fe b818 	b.w	8006454 <_ZN15Screen1ViewBaseC1Ev+0xbc8>
 8008424:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008428:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800842c:	ee17 3a10 	vmov	r3, s14
 8008430:	3b01      	subs	r3, #1
 8008432:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008436:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800843a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800843e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008442:	ee17 1a90 	vmov	r1, s15
 8008446:	4419      	add	r1, r3
 8008448:	f7fe b86c 	b.w	8006524 <_ZN15Screen1ViewBaseC1Ev+0xc98>
 800844c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008450:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008454:	ee17 3a10 	vmov	r3, s14
 8008458:	3b01      	subs	r3, #1
 800845a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800845e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800846a:	ee17 1a90 	vmov	r1, s15
 800846e:	4419      	add	r1, r3
 8008470:	f7fe b871 	b.w	8006556 <_ZN15Screen1ViewBaseC1Ev+0xcca>
 8008474:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008478:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800847c:	ee17 3a10 	vmov	r3, s14
 8008480:	3b01      	subs	r3, #1
 8008482:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008486:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800848a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800848e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008492:	ee17 1a90 	vmov	r1, s15
 8008496:	4419      	add	r1, r3
 8008498:	f7fe b876 	b.w	8006588 <_ZN15Screen1ViewBaseC1Ev+0xcfc>
 800849c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80084a0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80084a4:	ee17 3a10 	vmov	r3, s14
 80084a8:	3b01      	subs	r3, #1
 80084aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80084ae:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80084b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084ba:	ee17 1a90 	vmov	r1, s15
 80084be:	4419      	add	r1, r3
 80084c0:	f7fe b87b 	b.w	80065ba <_ZN15Screen1ViewBaseC1Ev+0xd2e>
 80084c4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80084c8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80084cc:	ee17 3a10 	vmov	r3, s14
 80084d0:	3b01      	subs	r3, #1
 80084d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80084d6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80084da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084e2:	ee17 1a90 	vmov	r1, s15
 80084e6:	4419      	add	r1, r3
 80084e8:	f7fe b880 	b.w	80065ec <_ZN15Screen1ViewBaseC1Ev+0xd60>
 80084ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80084f0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80084f4:	ee17 3a10 	vmov	r3, s14
 80084f8:	3b01      	subs	r3, #1
 80084fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80084fe:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800850a:	ee17 1a90 	vmov	r1, s15
 800850e:	4419      	add	r1, r3
 8008510:	f7fe b885 	b.w	800661e <_ZN15Screen1ViewBaseC1Ev+0xd92>
 8008514:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008518:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800851c:	ee17 3a10 	vmov	r3, s14
 8008520:	3b01      	subs	r3, #1
 8008522:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008526:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800852a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800852e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008532:	ee17 1a90 	vmov	r1, s15
 8008536:	4419      	add	r1, r3
 8008538:	f7fe b88a 	b.w	8006650 <_ZN15Screen1ViewBaseC1Ev+0xdc4>
 800853c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008540:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008544:	ee17 3a10 	vmov	r3, s14
 8008548:	3b01      	subs	r3, #1
 800854a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800854e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800855a:	ee17 1a90 	vmov	r1, s15
 800855e:	4419      	add	r1, r3
 8008560:	f7fe b88f 	b.w	8006682 <_ZN15Screen1ViewBaseC1Ev+0xdf6>
 8008564:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008568:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800856c:	ee17 3a10 	vmov	r3, s14
 8008570:	3b01      	subs	r3, #1
 8008572:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008576:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800857a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800857e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008582:	ee17 1a90 	vmov	r1, s15
 8008586:	4419      	add	r1, r3
 8008588:	f7fe b894 	b.w	80066b4 <_ZN15Screen1ViewBaseC1Ev+0xe28>
 800858c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008590:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008594:	ee17 3a10 	vmov	r3, s14
 8008598:	3b01      	subs	r3, #1
 800859a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800859e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80085a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085aa:	ee17 1a90 	vmov	r1, s15
 80085ae:	4419      	add	r1, r3
 80085b0:	f7fe b899 	b.w	80066e6 <_ZN15Screen1ViewBaseC1Ev+0xe5a>
 80085b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80085b8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80085bc:	ee17 3a10 	vmov	r3, s14
 80085c0:	3b01      	subs	r3, #1
 80085c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80085c6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80085ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085d2:	ee17 1a90 	vmov	r1, s15
 80085d6:	4419      	add	r1, r3
 80085d8:	f7fe b89e 	b.w	8006718 <_ZN15Screen1ViewBaseC1Ev+0xe8c>
 80085dc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80085e0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80085e4:	ee17 3a10 	vmov	r3, s14
 80085e8:	3b01      	subs	r3, #1
 80085ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80085ee:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80085f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085fa:	ee17 1a90 	vmov	r1, s15
 80085fe:	4419      	add	r1, r3
 8008600:	f7fe b8a3 	b.w	800674a <_ZN15Screen1ViewBaseC1Ev+0xebe>
 8008604:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008608:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800860c:	ee17 3a10 	vmov	r3, s14
 8008610:	3b01      	subs	r3, #1
 8008612:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008616:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800861a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800861e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008622:	ee17 1a90 	vmov	r1, s15
 8008626:	4419      	add	r1, r3
 8008628:	f7fe b8a8 	b.w	800677c <_ZN15Screen1ViewBaseC1Ev+0xef0>
 800862c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008630:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008634:	ee17 3a10 	vmov	r3, s14
 8008638:	3b01      	subs	r3, #1
 800863a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800863e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800864a:	ee17 1a90 	vmov	r1, s15
 800864e:	4419      	add	r1, r3
 8008650:	f7fe b8ad 	b.w	80067ae <_ZN15Screen1ViewBaseC1Ev+0xf22>
 8008654:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008658:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800865c:	ee17 3a10 	vmov	r3, s14
 8008660:	3b01      	subs	r3, #1
 8008662:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008666:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800866a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800866e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008672:	ee17 1a90 	vmov	r1, s15
 8008676:	4419      	add	r1, r3
 8008678:	f7fe b8b2 	b.w	80067e0 <_ZN15Screen1ViewBaseC1Ev+0xf54>
 800867c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008680:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008684:	ee17 3a10 	vmov	r3, s14
 8008688:	3b01      	subs	r3, #1
 800868a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800868e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800869a:	ee17 1a90 	vmov	r1, s15
 800869e:	4419      	add	r1, r3
 80086a0:	f7fe b8b7 	b.w	8006812 <_ZN15Screen1ViewBaseC1Ev+0xf86>
 80086a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80086a8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80086ac:	ee17 3a10 	vmov	r3, s14
 80086b0:	3b01      	subs	r3, #1
 80086b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80086b6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80086ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086c2:	ee17 1a90 	vmov	r1, s15
 80086c6:	4419      	add	r1, r3
 80086c8:	f7fe b8bc 	b.w	8006844 <_ZN15Screen1ViewBaseC1Ev+0xfb8>
 80086cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80086d0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80086d4:	ee17 3a10 	vmov	r3, s14
 80086d8:	3b01      	subs	r3, #1
 80086da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80086de:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80086e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086ea:	ee17 1a90 	vmov	r1, s15
 80086ee:	4419      	add	r1, r3
 80086f0:	f7fe b8c1 	b.w	8006876 <_ZN15Screen1ViewBaseC1Ev+0xfea>
 80086f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80086f8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80086fc:	ee17 3a10 	vmov	r3, s14
 8008700:	3b01      	subs	r3, #1
 8008702:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008706:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800870a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800870e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008712:	ee17 1a90 	vmov	r1, s15
 8008716:	4419      	add	r1, r3
 8008718:	f7fe b8c6 	b.w	80068a8 <_ZN15Screen1ViewBaseC1Ev+0x101c>
 800871c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008720:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008724:	ee17 3a10 	vmov	r3, s14
 8008728:	3b01      	subs	r3, #1
 800872a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800872e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800873a:	ee17 1a90 	vmov	r1, s15
 800873e:	4419      	add	r1, r3
 8008740:	f7fe b8cb 	b.w	80068da <_ZN15Screen1ViewBaseC1Ev+0x104e>
 8008744:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008748:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800874c:	ee17 3a10 	vmov	r3, s14
 8008750:	3b01      	subs	r3, #1
 8008752:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008756:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800875a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800875e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008762:	ee17 1a90 	vmov	r1, s15
 8008766:	4419      	add	r1, r3
 8008768:	f7fe b8d0 	b.w	800690c <_ZN15Screen1ViewBaseC1Ev+0x1080>
 800876c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008770:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008774:	ee17 3a10 	vmov	r3, s14
 8008778:	3b01      	subs	r3, #1
 800877a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800877e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008786:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800878a:	ee17 1a90 	vmov	r1, s15
 800878e:	4419      	add	r1, r3
 8008790:	f7fe b8d5 	b.w	800693e <_ZN15Screen1ViewBaseC1Ev+0x10b2>
 8008794:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008798:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800879c:	ee17 3a10 	vmov	r3, s14
 80087a0:	3b01      	subs	r3, #1
 80087a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80087a6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80087aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087b2:	ee17 1a90 	vmov	r1, s15
 80087b6:	4419      	add	r1, r3
 80087b8:	f7fe b8da 	b.w	8006970 <_ZN15Screen1ViewBaseC1Ev+0x10e4>
 80087bc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80087c0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80087c4:	ee17 3a10 	vmov	r3, s14
 80087c8:	3b01      	subs	r3, #1
 80087ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80087ce:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80087d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087da:	ee17 1a90 	vmov	r1, s15
 80087de:	4419      	add	r1, r3
 80087e0:	f7fe b8df 	b.w	80069a2 <_ZN15Screen1ViewBaseC1Ev+0x1116>
 80087e4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80087e8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80087ec:	ee17 3a10 	vmov	r3, s14
 80087f0:	3b01      	subs	r3, #1
 80087f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80087f6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80087fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008802:	ee17 1a90 	vmov	r1, s15
 8008806:	4419      	add	r1, r3
 8008808:	f7fe b8e4 	b.w	80069d4 <_ZN15Screen1ViewBaseC1Ev+0x1148>
 800880c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008810:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008814:	ee17 3a10 	vmov	r3, s14
 8008818:	3b01      	subs	r3, #1
 800881a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800881e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800882a:	ee17 1a90 	vmov	r1, s15
 800882e:	4419      	add	r1, r3
 8008830:	f7fe b8e9 	b.w	8006a06 <_ZN15Screen1ViewBaseC1Ev+0x117a>
 8008834:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008838:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800883c:	ee17 3a10 	vmov	r3, s14
 8008840:	3b01      	subs	r3, #1
 8008842:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008846:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800884a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008852:	ee17 1a90 	vmov	r1, s15
 8008856:	4419      	add	r1, r3
 8008858:	f7fe b8ee 	b.w	8006a38 <_ZN15Screen1ViewBaseC1Ev+0x11ac>
 800885c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008860:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008864:	ee17 3a10 	vmov	r3, s14
 8008868:	3b01      	subs	r3, #1
 800886a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800886e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008876:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800887a:	ee17 1a90 	vmov	r1, s15
 800887e:	4419      	add	r1, r3
 8008880:	f7fe b8f3 	b.w	8006a6a <_ZN15Screen1ViewBaseC1Ev+0x11de>
 8008884:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008888:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800888c:	ee17 3a10 	vmov	r3, s14
 8008890:	3b01      	subs	r3, #1
 8008892:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008896:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800889a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800889e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088a2:	ee17 1a90 	vmov	r1, s15
 80088a6:	4419      	add	r1, r3
 80088a8:	f7fe b8f8 	b.w	8006a9c <_ZN15Screen1ViewBaseC1Ev+0x1210>
 80088ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80088b0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80088b4:	ee17 3a10 	vmov	r3, s14
 80088b8:	3b01      	subs	r3, #1
 80088ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80088be:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80088c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088ca:	ee17 1a90 	vmov	r1, s15
 80088ce:	4419      	add	r1, r3
 80088d0:	f7fe b8fd 	b.w	8006ace <_ZN15Screen1ViewBaseC1Ev+0x1242>
 80088d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80088d8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80088dc:	ee17 3a10 	vmov	r3, s14
 80088e0:	3b01      	subs	r3, #1
 80088e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80088e6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80088ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088f2:	ee17 1a90 	vmov	r1, s15
 80088f6:	4419      	add	r1, r3
 80088f8:	f7fe b902 	b.w	8006b00 <_ZN15Screen1ViewBaseC1Ev+0x1274>
 80088fc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008900:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008904:	ee17 3a10 	vmov	r3, s14
 8008908:	3b01      	subs	r3, #1
 800890a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800890e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800891a:	ee17 1a90 	vmov	r1, s15
 800891e:	4419      	add	r1, r3
 8008920:	f7fe b907 	b.w	8006b32 <_ZN15Screen1ViewBaseC1Ev+0x12a6>
 8008924:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008928:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800892c:	ee17 3a10 	vmov	r3, s14
 8008930:	3b01      	subs	r3, #1
 8008932:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008936:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800893a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008942:	ee17 1a90 	vmov	r1, s15
 8008946:	4419      	add	r1, r3
 8008948:	f7fe b90c 	b.w	8006b64 <_ZN15Screen1ViewBaseC1Ev+0x12d8>
 800894c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008950:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008954:	ee17 3a10 	vmov	r3, s14
 8008958:	3b01      	subs	r3, #1
 800895a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800895e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008966:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800896a:	ee17 1a90 	vmov	r1, s15
 800896e:	4419      	add	r1, r3
 8008970:	f7fe b911 	b.w	8006b96 <_ZN15Screen1ViewBaseC1Ev+0x130a>
 8008974:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008978:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800897c:	ee17 3a10 	vmov	r3, s14
 8008980:	3b01      	subs	r3, #1
 8008982:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008986:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800898a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800898e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008992:	ee17 1a90 	vmov	r1, s15
 8008996:	4419      	add	r1, r3
 8008998:	f7fe b916 	b.w	8006bc8 <_ZN15Screen1ViewBaseC1Ev+0x133c>
 800899c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80089a0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80089a4:	ee17 3a10 	vmov	r3, s14
 80089a8:	3b01      	subs	r3, #1
 80089aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80089ae:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80089b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089ba:	ee17 1a90 	vmov	r1, s15
 80089be:	4419      	add	r1, r3
 80089c0:	f7fe b91b 	b.w	8006bfa <_ZN15Screen1ViewBaseC1Ev+0x136e>
 80089c4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80089c8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80089cc:	ee17 3a10 	vmov	r3, s14
 80089d0:	3b01      	subs	r3, #1
 80089d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80089d6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80089da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089e2:	ee17 1a90 	vmov	r1, s15
 80089e6:	4419      	add	r1, r3
 80089e8:	f7fe b920 	b.w	8006c2c <_ZN15Screen1ViewBaseC1Ev+0x13a0>
 80089ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80089f0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80089f4:	ee17 3a10 	vmov	r3, s14
 80089f8:	3b01      	subs	r3, #1
 80089fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80089fe:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a0a:	ee17 1a90 	vmov	r1, s15
 8008a0e:	4419      	add	r1, r3
 8008a10:	f7fe b925 	b.w	8006c5e <_ZN15Screen1ViewBaseC1Ev+0x13d2>
 8008a14:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008a18:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008a1c:	ee17 3a10 	vmov	r3, s14
 8008a20:	3b01      	subs	r3, #1
 8008a22:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a26:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a32:	ee17 1a90 	vmov	r1, s15
 8008a36:	4419      	add	r1, r3
 8008a38:	f7fe b92a 	b.w	8006c90 <_ZN15Screen1ViewBaseC1Ev+0x1404>
 8008a3c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008a40:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008a44:	ee17 3a10 	vmov	r3, s14
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a4e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a5a:	ee17 1a90 	vmov	r1, s15
 8008a5e:	4419      	add	r1, r3
 8008a60:	f7fe b97e 	b.w	8006d60 <_ZN15Screen1ViewBaseC1Ev+0x14d4>
 8008a64:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008a68:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008a6c:	ee17 3a10 	vmov	r3, s14
 8008a70:	3b01      	subs	r3, #1
 8008a72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a76:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a82:	ee17 1a90 	vmov	r1, s15
 8008a86:	4419      	add	r1, r3
 8008a88:	f7fe b983 	b.w	8006d92 <_ZN15Screen1ViewBaseC1Ev+0x1506>
 8008a8c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008a90:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008a94:	ee17 3a10 	vmov	r3, s14
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a9e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008aaa:	ee17 1a90 	vmov	r1, s15
 8008aae:	4419      	add	r1, r3
 8008ab0:	f7fe b988 	b.w	8006dc4 <_ZN15Screen1ViewBaseC1Ev+0x1538>
 8008ab4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ab8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008abc:	ee17 3a10 	vmov	r3, s14
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008ac6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ad2:	ee17 1a90 	vmov	r1, s15
 8008ad6:	4419      	add	r1, r3
 8008ad8:	f7fe b98d 	b.w	8006df6 <_ZN15Screen1ViewBaseC1Ev+0x156a>
 8008adc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ae0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008ae4:	ee17 3a10 	vmov	r3, s14
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008aee:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008afa:	ee17 1a90 	vmov	r1, s15
 8008afe:	4419      	add	r1, r3
 8008b00:	f7fe b992 	b.w	8006e28 <_ZN15Screen1ViewBaseC1Ev+0x159c>
 8008b04:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008b08:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008b0c:	ee17 3a10 	vmov	r3, s14
 8008b10:	3b01      	subs	r3, #1
 8008b12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b16:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b22:	ee17 1a90 	vmov	r1, s15
 8008b26:	4419      	add	r1, r3
 8008b28:	f7fe b997 	b.w	8006e5a <_ZN15Screen1ViewBaseC1Ev+0x15ce>
 8008b2c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008b30:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008b34:	ee17 3a10 	vmov	r3, s14
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b3e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b4a:	ee17 1a90 	vmov	r1, s15
 8008b4e:	4419      	add	r1, r3
 8008b50:	f7fe b99c 	b.w	8006e8c <_ZN15Screen1ViewBaseC1Ev+0x1600>
 8008b54:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008b58:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008b5c:	ee17 3a10 	vmov	r3, s14
 8008b60:	3b01      	subs	r3, #1
 8008b62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b66:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b72:	ee17 1a90 	vmov	r1, s15
 8008b76:	4419      	add	r1, r3
 8008b78:	f7fe b9a1 	b.w	8006ebe <_ZN15Screen1ViewBaseC1Ev+0x1632>
 8008b7c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008b80:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008b84:	ee17 3a10 	vmov	r3, s14
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b8e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b9a:	ee17 1a90 	vmov	r1, s15
 8008b9e:	4419      	add	r1, r3
 8008ba0:	f7fe b9a6 	b.w	8006ef0 <_ZN15Screen1ViewBaseC1Ev+0x1664>
 8008ba4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ba8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008bac:	ee17 3a10 	vmov	r3, s14
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008bb6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bc2:	ee17 1a90 	vmov	r1, s15
 8008bc6:	4419      	add	r1, r3
 8008bc8:	f7fe b9ab 	b.w	8006f22 <_ZN15Screen1ViewBaseC1Ev+0x1696>
 8008bcc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008bd0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008bd4:	ee17 3a10 	vmov	r3, s14
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008bde:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bea:	ee17 1a90 	vmov	r1, s15
 8008bee:	4419      	add	r1, r3
 8008bf0:	f7fe b9b0 	b.w	8006f54 <_ZN15Screen1ViewBaseC1Ev+0x16c8>
 8008bf4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008bf8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008bfc:	ee17 3a10 	vmov	r3, s14
 8008c00:	3b01      	subs	r3, #1
 8008c02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c06:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c12:	ee17 1a90 	vmov	r1, s15
 8008c16:	4419      	add	r1, r3
 8008c18:	f7fe b9b5 	b.w	8006f86 <_ZN15Screen1ViewBaseC1Ev+0x16fa>
 8008c1c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c20:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008c24:	ee17 3a10 	vmov	r3, s14
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c2e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c3a:	ee17 1a90 	vmov	r1, s15
 8008c3e:	4419      	add	r1, r3
 8008c40:	f7fe b9ba 	b.w	8006fb8 <_ZN15Screen1ViewBaseC1Ev+0x172c>
 8008c44:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c48:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008c4c:	ee17 3a10 	vmov	r3, s14
 8008c50:	3b01      	subs	r3, #1
 8008c52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c56:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c62:	ee17 1a90 	vmov	r1, s15
 8008c66:	4419      	add	r1, r3
 8008c68:	f7fe b9bf 	b.w	8006fea <_ZN15Screen1ViewBaseC1Ev+0x175e>
 8008c6c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c70:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008c74:	ee17 3a10 	vmov	r3, s14
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c7e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c8a:	ee17 1a90 	vmov	r1, s15
 8008c8e:	4419      	add	r1, r3
 8008c90:	f7fe b9c4 	b.w	800701c <_ZN15Screen1ViewBaseC1Ev+0x1790>
 8008c94:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c98:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008c9c:	ee17 3a10 	vmov	r3, s14
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008ca6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cb2:	ee17 1a90 	vmov	r1, s15
 8008cb6:	4419      	add	r1, r3
 8008cb8:	f7fe b9c9 	b.w	800704e <_ZN15Screen1ViewBaseC1Ev+0x17c2>
 8008cbc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008cc0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008cc4:	ee17 3a10 	vmov	r3, s14
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008cce:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cda:	ee17 1a90 	vmov	r1, s15
 8008cde:	4419      	add	r1, r3
 8008ce0:	f7fe b9ce 	b.w	8007080 <_ZN15Screen1ViewBaseC1Ev+0x17f4>
 8008ce4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ce8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008cec:	ee17 3a10 	vmov	r3, s14
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008cf6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d02:	ee17 1a90 	vmov	r1, s15
 8008d06:	4419      	add	r1, r3
 8008d08:	f7fe b9d3 	b.w	80070b2 <_ZN15Screen1ViewBaseC1Ev+0x1826>
 8008d0c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008d10:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008d14:	ee17 3a10 	vmov	r3, s14
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008d1e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d2a:	ee17 1a90 	vmov	r1, s15
 8008d2e:	4419      	add	r1, r3
 8008d30:	f7fe b9d8 	b.w	80070e4 <_ZN15Screen1ViewBaseC1Ev+0x1858>
 8008d34:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008d38:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008d3c:	ee17 3a10 	vmov	r3, s14
 8008d40:	3b01      	subs	r3, #1
 8008d42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008d46:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d52:	ee17 1a90 	vmov	r1, s15
 8008d56:	4419      	add	r1, r3
 8008d58:	f7fe b9dd 	b.w	8007116 <_ZN15Screen1ViewBaseC1Ev+0x188a>
 8008d5c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008d60:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008d64:	ee17 3a10 	vmov	r3, s14
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008d6e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d7a:	ee17 1a90 	vmov	r1, s15
 8008d7e:	4419      	add	r1, r3
 8008d80:	f7fe b9e2 	b.w	8007148 <_ZN15Screen1ViewBaseC1Ev+0x18bc>
 8008d84:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008d88:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008d8c:	ee17 3a10 	vmov	r3, s14
 8008d90:	3b01      	subs	r3, #1
 8008d92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008d96:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008da2:	ee17 1a90 	vmov	r1, s15
 8008da6:	4419      	add	r1, r3
 8008da8:	f7fe b9e7 	b.w	800717a <_ZN15Screen1ViewBaseC1Ev+0x18ee>
 8008dac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008db0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008db4:	ee17 3a10 	vmov	r3, s14
 8008db8:	3b01      	subs	r3, #1
 8008dba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008dbe:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008dca:	ee17 1a90 	vmov	r1, s15
 8008dce:	4419      	add	r1, r3
 8008dd0:	f7fe b9ec 	b.w	80071ac <_ZN15Screen1ViewBaseC1Ev+0x1920>
 8008dd4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008dd8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008ddc:	ee17 3a10 	vmov	r3, s14
 8008de0:	3b01      	subs	r3, #1
 8008de2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008de6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008df2:	ee17 1a90 	vmov	r1, s15
 8008df6:	4419      	add	r1, r3
 8008df8:	f7fe b9f1 	b.w	80071de <_ZN15Screen1ViewBaseC1Ev+0x1952>
 8008dfc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008e00:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008e04:	ee17 3a10 	vmov	r3, s14
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e0e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e1a:	ee17 1a90 	vmov	r1, s15
 8008e1e:	4419      	add	r1, r3
 8008e20:	f7fe b9f6 	b.w	8007210 <_ZN15Screen1ViewBaseC1Ev+0x1984>
 8008e24:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008e28:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008e2c:	ee17 3a10 	vmov	r3, s14
 8008e30:	3b01      	subs	r3, #1
 8008e32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e36:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e42:	ee17 1a90 	vmov	r1, s15
 8008e46:	4419      	add	r1, r3
 8008e48:	f7fe b9fb 	b.w	8007242 <_ZN15Screen1ViewBaseC1Ev+0x19b6>
 8008e4c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008e50:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008e54:	ee17 3a10 	vmov	r3, s14
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e5e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e6a:	ee17 1a90 	vmov	r1, s15
 8008e6e:	4419      	add	r1, r3
 8008e70:	f7fe ba00 	b.w	8007274 <_ZN15Screen1ViewBaseC1Ev+0x19e8>
 8008e74:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008e78:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008e7c:	ee17 3a10 	vmov	r3, s14
 8008e80:	3b01      	subs	r3, #1
 8008e82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e86:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e92:	ee17 1a90 	vmov	r1, s15
 8008e96:	4419      	add	r1, r3
 8008e98:	f7fe ba05 	b.w	80072a6 <_ZN15Screen1ViewBaseC1Ev+0x1a1a>
 8008e9c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ea0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008ea4:	ee17 3a10 	vmov	r3, s14
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008eae:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008eba:	ee17 1a90 	vmov	r1, s15
 8008ebe:	4419      	add	r1, r3
 8008ec0:	f7fe ba0a 	b.w	80072d8 <_ZN15Screen1ViewBaseC1Ev+0x1a4c>
 8008ec4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ec8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008ecc:	ee17 3a10 	vmov	r3, s14
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008ed6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ee2:	ee17 1a90 	vmov	r1, s15
 8008ee6:	4419      	add	r1, r3
 8008ee8:	f7fe ba0f 	b.w	800730a <_ZN15Screen1ViewBaseC1Ev+0x1a7e>
 8008eec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ef0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008ef4:	ee17 3a10 	vmov	r3, s14
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008efe:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f0a:	ee17 1a90 	vmov	r1, s15
 8008f0e:	4419      	add	r1, r3
 8008f10:	f7fe ba14 	b.w	800733c <_ZN15Screen1ViewBaseC1Ev+0x1ab0>
 8008f14:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008f18:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008f1c:	ee17 3a10 	vmov	r3, s14
 8008f20:	3b01      	subs	r3, #1
 8008f22:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f26:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f32:	ee17 1a90 	vmov	r1, s15
 8008f36:	4419      	add	r1, r3
 8008f38:	f7fe ba19 	b.w	800736e <_ZN15Screen1ViewBaseC1Ev+0x1ae2>
 8008f3c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008f40:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008f44:	ee17 3a10 	vmov	r3, s14
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f4e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f5a:	ee17 1a90 	vmov	r1, s15
 8008f5e:	4419      	add	r1, r3
 8008f60:	f7fe ba1e 	b.w	80073a0 <_ZN15Screen1ViewBaseC1Ev+0x1b14>
 8008f64:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008f68:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008f6c:	ee17 3a10 	vmov	r3, s14
 8008f70:	3b01      	subs	r3, #1
 8008f72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f76:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f82:	ee17 1a90 	vmov	r1, s15
 8008f86:	4419      	add	r1, r3
 8008f88:	f7fe ba23 	b.w	80073d2 <_ZN15Screen1ViewBaseC1Ev+0x1b46>
 8008f8c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008f90:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008f94:	ee17 3a10 	vmov	r3, s14
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f9e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008faa:	ee17 1a90 	vmov	r1, s15
 8008fae:	4419      	add	r1, r3
 8008fb0:	f7fe ba28 	b.w	8007404 <_ZN15Screen1ViewBaseC1Ev+0x1b78>
 8008fb4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008fb8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008fbc:	ee17 3a10 	vmov	r3, s14
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008fc6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fd2:	ee17 1a90 	vmov	r1, s15
 8008fd6:	4419      	add	r1, r3
 8008fd8:	f7fe ba2d 	b.w	8007436 <_ZN15Screen1ViewBaseC1Ev+0x1baa>
 8008fdc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008fe0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008fe4:	ee17 3a10 	vmov	r3, s14
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008fee:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8008ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ff6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ffa:	ee17 1a90 	vmov	r1, s15
 8008ffe:	4419      	add	r1, r3
 8009000:	f7fe ba32 	b.w	8007468 <_ZN15Screen1ViewBaseC1Ev+0x1bdc>
 8009004:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009008:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800900c:	ee17 3a10 	vmov	r3, s14
 8009010:	3b01      	subs	r3, #1
 8009012:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009016:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800901a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800901e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009022:	ee17 1a90 	vmov	r1, s15
 8009026:	4419      	add	r1, r3
 8009028:	f7fe ba37 	b.w	800749a <_ZN15Screen1ViewBaseC1Ev+0x1c0e>
 800902c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009030:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009034:	ee17 3a10 	vmov	r3, s14
 8009038:	3b01      	subs	r3, #1
 800903a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800903e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8009042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800904a:	ee17 1a90 	vmov	r1, s15
 800904e:	4419      	add	r1, r3
 8009050:	f7fe ba3c 	b.w	80074cc <_ZN15Screen1ViewBaseC1Ev+0x1c40>
 8009054:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009058:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800905c:	ee17 3a10 	vmov	r3, s14
 8009060:	3b01      	subs	r3, #1
 8009062:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009066:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800906a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800906e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009072:	ee17 1a90 	vmov	r1, s15
 8009076:	4419      	add	r1, r3
 8009078:	f7fe ba90 	b.w	800759c <_ZN15Screen1ViewBaseC1Ev+0x1d10>
 800907c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009080:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009084:	ee17 3a10 	vmov	r3, s14
 8009088:	3b01      	subs	r3, #1
 800908a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800908e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8009092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800909a:	ee17 1a90 	vmov	r1, s15
 800909e:	4419      	add	r1, r3
 80090a0:	f7fe ba95 	b.w	80075ce <_ZN15Screen1ViewBaseC1Ev+0x1d42>
 80090a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80090a8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80090ac:	ee17 3a10 	vmov	r3, s14
 80090b0:	3b01      	subs	r3, #1
 80090b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80090b6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80090ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090c2:	ee17 1a90 	vmov	r1, s15
 80090c6:	4419      	add	r1, r3
 80090c8:	f7fe ba9a 	b.w	8007600 <_ZN15Screen1ViewBaseC1Ev+0x1d74>
 80090cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80090d0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80090d4:	ee17 3a10 	vmov	r3, s14
 80090d8:	3b01      	subs	r3, #1
 80090da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80090de:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80090e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090ea:	ee17 1a90 	vmov	r1, s15
 80090ee:	4419      	add	r1, r3
 80090f0:	f7fe ba9f 	b.w	8007632 <_ZN15Screen1ViewBaseC1Ev+0x1da6>
 80090f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80090f8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80090fc:	ee17 3a10 	vmov	r3, s14
 8009100:	3b01      	subs	r3, #1
 8009102:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009106:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800910a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800910e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009112:	ee17 1a90 	vmov	r1, s15
 8009116:	4419      	add	r1, r3
 8009118:	f7fe baa4 	b.w	8007664 <_ZN15Screen1ViewBaseC1Ev+0x1dd8>
 800911c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009120:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009124:	ee17 3a10 	vmov	r3, s14
 8009128:	3b01      	subs	r3, #1
 800912a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800912e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8009132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800913a:	ee17 1a90 	vmov	r1, s15
 800913e:	4419      	add	r1, r3
 8009140:	f7fe baa9 	b.w	8007696 <_ZN15Screen1ViewBaseC1Ev+0x1e0a>
 8009144:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009148:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800914c:	ee17 3a10 	vmov	r3, s14
 8009150:	3b01      	subs	r3, #1
 8009152:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009156:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800915a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009162:	ee17 1a90 	vmov	r1, s15
 8009166:	4419      	add	r1, r3
 8009168:	f7fe baae 	b.w	80076c8 <_ZN15Screen1ViewBaseC1Ev+0x1e3c>
 800916c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009170:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009174:	ee17 3a10 	vmov	r3, s14
 8009178:	3b01      	subs	r3, #1
 800917a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800917e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8009182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800918a:	ee17 1a90 	vmov	r1, s15
 800918e:	4419      	add	r1, r3
 8009190:	f7fe bab3 	b.w	80076fa <_ZN15Screen1ViewBaseC1Ev+0x1e6e>
 8009194:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009198:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800919c:	ee17 3a10 	vmov	r3, s14
 80091a0:	3b01      	subs	r3, #1
 80091a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80091a6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80091aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091b2:	ee17 1a90 	vmov	r1, s15
 80091b6:	4419      	add	r1, r3
 80091b8:	f7fe bab8 	b.w	800772c <_ZN15Screen1ViewBaseC1Ev+0x1ea0>
 80091bc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80091c0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80091c4:	ee17 3a10 	vmov	r3, s14
 80091c8:	3b01      	subs	r3, #1
 80091ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80091ce:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80091d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091da:	ee17 1a90 	vmov	r1, s15
 80091de:	4419      	add	r1, r3
 80091e0:	f7fe babd 	b.w	800775e <_ZN15Screen1ViewBaseC1Ev+0x1ed2>
 80091e4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80091e8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80091ec:	ee17 3a10 	vmov	r3, s14
 80091f0:	3b01      	subs	r3, #1
 80091f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80091f6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80091fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009202:	ee17 1a90 	vmov	r1, s15
 8009206:	4419      	add	r1, r3
 8009208:	f7fe bac2 	b.w	8007790 <_ZN15Screen1ViewBaseC1Ev+0x1f04>
 800920c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009210:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009214:	ee17 3a10 	vmov	r3, s14
 8009218:	3b01      	subs	r3, #1
 800921a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800921e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8009222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800922a:	ee17 1a90 	vmov	r1, s15
 800922e:	4419      	add	r1, r3
 8009230:	f7fe bac7 	b.w	80077c2 <_ZN15Screen1ViewBaseC1Ev+0x1f36>
 8009234:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009238:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800923c:	ee17 3a10 	vmov	r3, s14
 8009240:	3b01      	subs	r3, #1
 8009242:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009246:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800924a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800924e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009252:	ee17 1a90 	vmov	r1, s15
 8009256:	4419      	add	r1, r3
 8009258:	f7fe bacc 	b.w	80077f4 <_ZN15Screen1ViewBaseC1Ev+0x1f68>
 800925c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009260:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009264:	ee17 3a10 	vmov	r3, s14
 8009268:	3b01      	subs	r3, #1
 800926a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800926e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8009272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009276:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800927a:	ee17 1a90 	vmov	r1, s15
 800927e:	4419      	add	r1, r3
 8009280:	f7fe bad1 	b.w	8007826 <_ZN15Screen1ViewBaseC1Ev+0x1f9a>
 8009284:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009288:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800928c:	ee17 3a10 	vmov	r3, s14
 8009290:	3b01      	subs	r3, #1
 8009292:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009296:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800929a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800929e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092a2:	ee17 1a90 	vmov	r1, s15
 80092a6:	4419      	add	r1, r3
 80092a8:	f7fe bad6 	b.w	8007858 <_ZN15Screen1ViewBaseC1Ev+0x1fcc>
 80092ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80092b0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80092b4:	ee17 3a10 	vmov	r3, s14
 80092b8:	3b01      	subs	r3, #1
 80092ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80092be:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80092c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092ca:	ee17 1a90 	vmov	r1, s15
 80092ce:	4419      	add	r1, r3
 80092d0:	f7fe badb 	b.w	800788a <_ZN15Screen1ViewBaseC1Ev+0x1ffe>
 80092d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80092d8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80092dc:	ee17 3a10 	vmov	r3, s14
 80092e0:	3b01      	subs	r3, #1
 80092e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80092e6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80092ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092f2:	ee17 1a90 	vmov	r1, s15
 80092f6:	4419      	add	r1, r3
 80092f8:	f7fe bae0 	b.w	80078bc <_ZN15Screen1ViewBaseC1Ev+0x2030>
 80092fc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009300:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009304:	ee17 3a10 	vmov	r3, s14
 8009308:	3b01      	subs	r3, #1
 800930a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800930e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8009312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800931a:	ee17 1a90 	vmov	r1, s15
 800931e:	4419      	add	r1, r3
 8009320:	f7fe bae5 	b.w	80078ee <_ZN15Screen1ViewBaseC1Ev+0x2062>
 8009324:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009328:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800932c:	ee17 3a10 	vmov	r3, s14
 8009330:	3b01      	subs	r3, #1
 8009332:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009336:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800933a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800933e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009342:	ee17 1a90 	vmov	r1, s15
 8009346:	4419      	add	r1, r3
 8009348:	f7fe baea 	b.w	8007920 <_ZN15Screen1ViewBaseC1Ev+0x2094>
 800934c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009350:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009354:	ee17 3a10 	vmov	r3, s14
 8009358:	3b01      	subs	r3, #1
 800935a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800935e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8009362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800936a:	ee17 1a90 	vmov	r1, s15
 800936e:	4419      	add	r1, r3
 8009370:	f7fe baef 	b.w	8007952 <_ZN15Screen1ViewBaseC1Ev+0x20c6>
 8009374:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009378:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800937c:	ee17 3a10 	vmov	r3, s14
 8009380:	3b01      	subs	r3, #1
 8009382:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009386:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800938a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800938e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009392:	ee17 1a90 	vmov	r1, s15
 8009396:	4419      	add	r1, r3
 8009398:	f7fe baf4 	b.w	8007984 <_ZN15Screen1ViewBaseC1Ev+0x20f8>
 800939c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80093a0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80093a4:	ee17 3a10 	vmov	r3, s14
 80093a8:	3b01      	subs	r3, #1
 80093aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80093ae:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80093b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093ba:	ee17 1a90 	vmov	r1, s15
 80093be:	4419      	add	r1, r3
 80093c0:	f7fe baf9 	b.w	80079b6 <_ZN15Screen1ViewBaseC1Ev+0x212a>
 80093c4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80093c8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80093cc:	ee17 3a10 	vmov	r3, s14
 80093d0:	3b01      	subs	r3, #1
 80093d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80093d6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80093da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093e2:	ee17 1a90 	vmov	r1, s15
 80093e6:	4419      	add	r1, r3
 80093e8:	f7fe bafe 	b.w	80079e8 <_ZN15Screen1ViewBaseC1Ev+0x215c>
 80093ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80093f0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80093f4:	ee17 3a10 	vmov	r3, s14
 80093f8:	3b01      	subs	r3, #1
 80093fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80093fe:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8009402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800940a:	ee17 1a90 	vmov	r1, s15
 800940e:	4419      	add	r1, r3
 8009410:	f7fe bb03 	b.w	8007a1a <_ZN15Screen1ViewBaseC1Ev+0x218e>
 8009414:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009418:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800941c:	ee17 3a10 	vmov	r3, s14
 8009420:	3b01      	subs	r3, #1
 8009422:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009426:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800942a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800942e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009432:	ee17 1a90 	vmov	r1, s15
 8009436:	4419      	add	r1, r3
 8009438:	f7fe bb08 	b.w	8007a4c <_ZN15Screen1ViewBaseC1Ev+0x21c0>
 800943c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009440:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009444:	ee17 3a10 	vmov	r3, s14
 8009448:	3b01      	subs	r3, #1
 800944a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800944e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8009452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800945a:	ee17 1a90 	vmov	r1, s15
 800945e:	4419      	add	r1, r3
 8009460:	f7fe bb0d 	b.w	8007a7e <_ZN15Screen1ViewBaseC1Ev+0x21f2>
 8009464:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009468:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800946c:	ee17 3a10 	vmov	r3, s14
 8009470:	3b01      	subs	r3, #1
 8009472:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009476:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800947a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800947e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009482:	ee17 1a90 	vmov	r1, s15
 8009486:	4419      	add	r1, r3
 8009488:	f7fe bb12 	b.w	8007ab0 <_ZN15Screen1ViewBaseC1Ev+0x2224>
 800948c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009490:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009494:	ee17 3a10 	vmov	r3, s14
 8009498:	3b01      	subs	r3, #1
 800949a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800949e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80094a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094aa:	ee17 1a90 	vmov	r1, s15
 80094ae:	4419      	add	r1, r3
 80094b0:	f7fe bb17 	b.w	8007ae2 <_ZN15Screen1ViewBaseC1Ev+0x2256>
 80094b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80094b8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80094bc:	ee17 3a10 	vmov	r3, s14
 80094c0:	3b01      	subs	r3, #1
 80094c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80094c6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80094ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094d2:	ee17 1a90 	vmov	r1, s15
 80094d6:	4419      	add	r1, r3
 80094d8:	f7fe bb1c 	b.w	8007b14 <_ZN15Screen1ViewBaseC1Ev+0x2288>
 80094dc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80094e0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80094e4:	ee17 3a10 	vmov	r3, s14
 80094e8:	3b01      	subs	r3, #1
 80094ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80094ee:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80094f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094fa:	ee17 1a90 	vmov	r1, s15
 80094fe:	4419      	add	r1, r3
 8009500:	f7fe bb21 	b.w	8007b46 <_ZN15Screen1ViewBaseC1Ev+0x22ba>
 8009504:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009508:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800950c:	ee17 3a10 	vmov	r3, s14
 8009510:	3b01      	subs	r3, #1
 8009512:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009516:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800951a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800951e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009522:	ee17 1a90 	vmov	r1, s15
 8009526:	4419      	add	r1, r3
 8009528:	f7fe bb26 	b.w	8007b78 <_ZN15Screen1ViewBaseC1Ev+0x22ec>
 800952c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009530:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009534:	ee17 3a10 	vmov	r3, s14
 8009538:	3b01      	subs	r3, #1
 800953a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800953e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8009542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009546:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800954a:	ee17 1a90 	vmov	r1, s15
 800954e:	4419      	add	r1, r3
 8009550:	f7fe bb2b 	b.w	8007baa <_ZN15Screen1ViewBaseC1Ev+0x231e>
 8009554:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009558:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800955c:	ee17 3a10 	vmov	r3, s14
 8009560:	3b01      	subs	r3, #1
 8009562:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009566:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800956a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800956e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009572:	ee17 1a90 	vmov	r1, s15
 8009576:	4419      	add	r1, r3
 8009578:	f7fe bb30 	b.w	8007bdc <_ZN15Screen1ViewBaseC1Ev+0x2350>
 800957c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009580:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009584:	ee17 3a10 	vmov	r3, s14
 8009588:	3b01      	subs	r3, #1
 800958a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800958e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8009592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800959a:	ee17 1a90 	vmov	r1, s15
 800959e:	4419      	add	r1, r3
 80095a0:	f7fe bb35 	b.w	8007c0e <_ZN15Screen1ViewBaseC1Ev+0x2382>
 80095a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80095a8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80095ac:	ee17 3a10 	vmov	r3, s14
 80095b0:	3b01      	subs	r3, #1
 80095b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80095b6:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80095ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095c2:	ee17 1a90 	vmov	r1, s15
 80095c6:	4419      	add	r1, r3
 80095c8:	f7fe bb3a 	b.w	8007c40 <_ZN15Screen1ViewBaseC1Ev+0x23b4>
 80095cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80095d0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80095d4:	ee17 3a10 	vmov	r3, s14
 80095d8:	3b01      	subs	r3, #1
 80095da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80095de:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80095e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095ea:	ee17 1a90 	vmov	r1, s15
 80095ee:	4419      	add	r1, r3
 80095f0:	f7fe bb3f 	b.w	8007c72 <_ZN15Screen1ViewBaseC1Ev+0x23e6>
 80095f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80095f8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80095fc:	ee17 3a10 	vmov	r3, s14
 8009600:	3b01      	subs	r3, #1
 8009602:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009606:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800960a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800960e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009612:	ee17 1a90 	vmov	r1, s15
 8009616:	4419      	add	r1, r3
 8009618:	f7fe bb44 	b.w	8007ca4 <_ZN15Screen1ViewBaseC1Ev+0x2418>
 800961c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009620:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009624:	ee17 3a10 	vmov	r3, s14
 8009628:	3b01      	subs	r3, #1
 800962a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800962e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8009632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800963a:	ee17 1a90 	vmov	r1, s15
 800963e:	4419      	add	r1, r3
 8009640:	f7fe bb49 	b.w	8007cd6 <_ZN15Screen1ViewBaseC1Ev+0x244a>
 8009644:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009648:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800964c:	ee17 3a10 	vmov	r3, s14
 8009650:	3b01      	subs	r3, #1
 8009652:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009656:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 800965a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800965e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009662:	ee17 1a90 	vmov	r1, s15
 8009666:	4419      	add	r1, r3
 8009668:	f7fe bb4e 	b.w	8007d08 <_ZN15Screen1ViewBaseC1Ev+0x247c>

0800966c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800966c:	4770      	bx	lr
	...

08009670 <_Z23getFont_verdana_10_4bppv>:
{
 8009670:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8009672:	4d16      	ldr	r5, [pc, #88]	@ (80096cc <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8009674:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8009676:	682c      	ldr	r4, [r5, #0]
 8009678:	f3bf 8f5b 	dmb	ish
 800967c:	f014 0401 	ands.w	r4, r4, #1
 8009680:	d120      	bne.n	80096c4 <_Z23getFont_verdana_10_4bppv+0x54>
 8009682:	4628      	mov	r0, r5
 8009684:	f020 fb9b 	bl	8029dbe <__cxa_guard_acquire>
 8009688:	b1e0      	cbz	r0, 80096c4 <_Z23getFont_verdana_10_4bppv+0x54>
 800968a:	233f      	movs	r3, #63	@ 0x3f
 800968c:	2201      	movs	r2, #1
 800968e:	4910      	ldr	r1, [pc, #64]	@ (80096d0 <_Z23getFont_verdana_10_4bppv+0x60>)
 8009690:	9309      	str	r3, [sp, #36]	@ 0x24
 8009692:	4b10      	ldr	r3, [pc, #64]	@ (80096d4 <_Z23getFont_verdana_10_4bppv+0x64>)
 8009694:	4810      	ldr	r0, [pc, #64]	@ (80096d8 <_Z23getFont_verdana_10_4bppv+0x68>)
 8009696:	9308      	str	r3, [sp, #32]
 8009698:	4b10      	ldr	r3, [pc, #64]	@ (80096dc <_Z23getFont_verdana_10_4bppv+0x6c>)
 800969a:	940a      	str	r4, [sp, #40]	@ 0x28
 800969c:	9405      	str	r4, [sp, #20]
 800969e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80096a2:	2304      	movs	r3, #4
 80096a4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80096a8:	230a      	movs	r3, #10
 80096aa:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80096b4:	f7fb fbb2 	bl	8004e1c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80096b8:	4809      	ldr	r0, [pc, #36]	@ (80096e0 <_Z23getFont_verdana_10_4bppv+0x70>)
 80096ba:	f020 ff13 	bl	802a4e4 <atexit>
 80096be:	4628      	mov	r0, r5
 80096c0:	f020 fb89 	bl	8029dd6 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80096c4:	4804      	ldr	r0, [pc, #16]	@ (80096d8 <_Z23getFont_verdana_10_4bppv+0x68>)
 80096c6:	b00f      	add	sp, #60	@ 0x3c
 80096c8:	bd30      	pop	{r4, r5, pc}
 80096ca:	bf00      	nop
 80096cc:	20012308 	.word	0x20012308
 80096d0:	900004d4 	.word	0x900004d4
 80096d4:	0802f42c 	.word	0x0802f42c
 80096d8:	2001230c 	.word	0x2001230c
 80096dc:	0802f43c 	.word	0x0802f43c
 80096e0:	0800966d 	.word	0x0800966d

080096e4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 15, 24, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80096e4:	4770      	bx	lr
	...

080096e8 <_Z23getFont_verdana_20_4bppv>:
{
 80096e8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 15, 24, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80096ea:	4d17      	ldr	r5, [pc, #92]	@ (8009748 <_Z23getFont_verdana_20_4bppv+0x60>)
{
 80096ec:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 15, 24, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80096ee:	682c      	ldr	r4, [r5, #0]
 80096f0:	f3bf 8f5b 	dmb	ish
 80096f4:	f014 0401 	ands.w	r4, r4, #1
 80096f8:	d122      	bne.n	8009740 <_Z23getFont_verdana_20_4bppv+0x58>
 80096fa:	4628      	mov	r0, r5
 80096fc:	f020 fb5f 	bl	8029dbe <__cxa_guard_acquire>
 8009700:	b1f0      	cbz	r0, 8009740 <_Z23getFont_verdana_20_4bppv+0x58>
 8009702:	233f      	movs	r3, #63	@ 0x3f
 8009704:	2201      	movs	r2, #1
 8009706:	4911      	ldr	r1, [pc, #68]	@ (800974c <_Z23getFont_verdana_20_4bppv+0x64>)
 8009708:	9309      	str	r3, [sp, #36]	@ 0x24
 800970a:	4b11      	ldr	r3, [pc, #68]	@ (8009750 <_Z23getFont_verdana_20_4bppv+0x68>)
 800970c:	4811      	ldr	r0, [pc, #68]	@ (8009754 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800970e:	9308      	str	r3, [sp, #32]
 8009710:	4b11      	ldr	r3, [pc, #68]	@ (8009758 <_Z23getFont_verdana_20_4bppv+0x70>)
 8009712:	940a      	str	r4, [sp, #40]	@ 0x28
 8009714:	9405      	str	r4, [sp, #20]
 8009716:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800971a:	2304      	movs	r3, #4
 800971c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8009720:	2314      	movs	r3, #20
 8009722:	220f      	movs	r2, #15
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	2318      	movs	r3, #24
 8009728:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800972c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8009730:	f7fb fb74 	bl	8004e1c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009734:	4809      	ldr	r0, [pc, #36]	@ (800975c <_Z23getFont_verdana_20_4bppv+0x74>)
 8009736:	f020 fed5 	bl	802a4e4 <atexit>
 800973a:	4628      	mov	r0, r5
 800973c:	f020 fb4b 	bl	8029dd6 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8009740:	4804      	ldr	r0, [pc, #16]	@ (8009754 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8009742:	b00f      	add	sp, #60	@ 0x3c
 8009744:	bd30      	pop	{r4, r5, pc}
 8009746:	bf00      	nop
 8009748:	20012338 	.word	0x20012338
 800974c:	900004e4 	.word	0x900004e4
 8009750:	0802f430 	.word	0x0802f430
 8009754:	2001233c 	.word	0x2001233c
 8009758:	0802f440 	.word	0x0802f440
 800975c:	080096e5 	.word	0x080096e5

08009760 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009760:	4770      	bx	lr
	...

08009764 <_Z23getFont_verdana_40_4bppv>:
{
 8009764:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009766:	4d16      	ldr	r5, [pc, #88]	@ (80097c0 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8009768:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800976a:	682c      	ldr	r4, [r5, #0]
 800976c:	f3bf 8f5b 	dmb	ish
 8009770:	f014 0401 	ands.w	r4, r4, #1
 8009774:	d120      	bne.n	80097b8 <_Z23getFont_verdana_40_4bppv+0x54>
 8009776:	4628      	mov	r0, r5
 8009778:	f020 fb21 	bl	8029dbe <__cxa_guard_acquire>
 800977c:	b1e0      	cbz	r0, 80097b8 <_Z23getFont_verdana_40_4bppv+0x54>
 800977e:	233f      	movs	r3, #63	@ 0x3f
 8009780:	2201      	movs	r2, #1
 8009782:	4910      	ldr	r1, [pc, #64]	@ (80097c4 <_Z23getFont_verdana_40_4bppv+0x60>)
 8009784:	9309      	str	r3, [sp, #36]	@ 0x24
 8009786:	4b10      	ldr	r3, [pc, #64]	@ (80097c8 <_Z23getFont_verdana_40_4bppv+0x64>)
 8009788:	4810      	ldr	r0, [pc, #64]	@ (80097cc <_Z23getFont_verdana_40_4bppv+0x68>)
 800978a:	9308      	str	r3, [sp, #32]
 800978c:	4b10      	ldr	r3, [pc, #64]	@ (80097d0 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800978e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009790:	9405      	str	r4, [sp, #20]
 8009792:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8009796:	2304      	movs	r3, #4
 8009798:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800979c:	2328      	movs	r3, #40	@ 0x28
 800979e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80097a8:	f7fb fb38 	bl	8004e1c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80097ac:	4809      	ldr	r0, [pc, #36]	@ (80097d4 <_Z23getFont_verdana_40_4bppv+0x70>)
 80097ae:	f020 fe99 	bl	802a4e4 <atexit>
 80097b2:	4628      	mov	r0, r5
 80097b4:	f020 fb0f 	bl	8029dd6 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 80097b8:	4804      	ldr	r0, [pc, #16]	@ (80097cc <_Z23getFont_verdana_40_4bppv+0x68>)
 80097ba:	b00f      	add	sp, #60	@ 0x3c
 80097bc:	bd30      	pop	{r4, r5, pc}
 80097be:	bf00      	nop
 80097c0:	20012368 	.word	0x20012368
 80097c4:	900005b8 	.word	0x900005b8
 80097c8:	0802f438 	.word	0x0802f438
 80097cc:	2001236c 	.word	0x2001236c
 80097d0:	0802f444 	.word	0x0802f444
 80097d4:	08009761 	.word	0x08009761

080097d8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 80097d8:	2000      	movs	r0, #0
 80097da:	4770      	bx	lr

080097dc <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 80097dc:	2000      	movs	r0, #0
 80097de:	4770      	bx	lr

080097e0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80097e0:	b40e      	push	{r1, r2, r3}
 80097e2:	b503      	push	{r0, r1, lr}
 80097e4:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80097e6:	2100      	movs	r1, #0
{
 80097e8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80097ec:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80097ee:	f00f fc3b 	bl	8019068 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80097f2:	b002      	add	sp, #8
 80097f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097f8:	b003      	add	sp, #12
 80097fa:	4770      	bx	lr

080097fc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80097fc:	b40c      	push	{r2, r3}
 80097fe:	b507      	push	{r0, r1, r2, lr}
 8009800:	ab04      	add	r3, sp, #16
 8009802:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8009806:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8009808:	f00f fc2e 	bl	8019068 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800980c:	b003      	add	sp, #12
 800980e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009812:	b002      	add	sp, #8
 8009814:	4770      	bx	lr
	...

08009818 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8009818:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 800981a:	b510      	push	{r4, lr}
 800981c:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800981e:	b373      	cbz	r3, 800987e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8009820:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8009822:	b92b      	cbnz	r3, 8009830 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8009824:	4b18      	ldr	r3, [pc, #96]	@ (8009888 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8009826:	21c5      	movs	r1, #197	@ 0xc5
 8009828:	4a18      	ldr	r2, [pc, #96]	@ (800988c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800982a:	4819      	ldr	r0, [pc, #100]	@ (8009890 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 800982c:	f020 fe3c 	bl	802a4a8 <__assert_func>
            return buffer[pos];
 8009830:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8009832:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009836:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8009838:	b30b      	cbz	r3, 800987e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800983a:	f011 fa9d 	bl	801ad78 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800983e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8009840:	2b01      	cmp	r3, #1
 8009842:	d803      	bhi.n	800984c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8009844:	4b13      	ldr	r3, [pc, #76]	@ (8009894 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8009846:	21cb      	movs	r1, #203	@ 0xcb
 8009848:	4a13      	ldr	r2, [pc, #76]	@ (8009898 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800984a:	e7ee      	b.n	800982a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 800984c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800984e:	f640 103f 	movw	r0, #2367	@ 0x93f
 8009852:	1c53      	adds	r3, r2, #1
 8009854:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8009856:	2b09      	cmp	r3, #9
 8009858:	4619      	mov	r1, r3
 800985a:	bf88      	it	hi
 800985c:	f1a3 010a 	subhi.w	r1, r3, #10
 8009860:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8009864:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8009866:	4281      	cmp	r1, r0
 8009868:	d109      	bne.n	800987e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800986a:	2b0a      	cmp	r3, #10
 800986c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8009870:	bf28      	it	cs
 8009872:	2300      	movcs	r3, #0
            return buffer[pos];
 8009874:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8009876:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800987a:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 800987c:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800987e:	4620      	mov	r0, r4
}
 8009880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8009884:	f011 b97a 	b.w	801ab7c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009888:	0802dd14 	.word	0x0802dd14
 800988c:	0802dd1d 	.word	0x0802dd1d
 8009890:	0802ddc8 	.word	0x0802ddc8
 8009894:	0802de12 	.word	0x0802de12
 8009898:	0802de20 	.word	0x0802de20

0800989c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 800989c:	f011 b937 	b.w	801ab0e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080098a0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80098a0:	b510      	push	{r4, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	ac02      	add	r4, sp, #8
 80098a6:	e884 0006 	stmia.w	r4, {r1, r2}
 80098aa:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80098ac:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80098ae:	4621      	mov	r1, r4
    va_start(pArg, format);
 80098b0:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	9b08      	ldr	r3, [sp, #32]
 80098ba:	f00e f86b 	bl	8017994 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80098be:	b006      	add	sp, #24
 80098c0:	bd10      	pop	{r4, pc}
	...

080098c4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80098c4:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80098c6:	bb18      	cbnz	r0, 8009910 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80098c8:	4b12      	ldr	r3, [pc, #72]	@ (8009914 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80098ca:	4813      	ldr	r0, [pc, #76]	@ (8009918 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80098cc:	681c      	ldr	r4, [r3, #0]
 80098ce:	4913      	ldr	r1, [pc, #76]	@ (800991c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80098d0:	b1b4      	cbz	r4, 8009900 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80098d2:	6822      	ldr	r2, [r4, #0]
 80098d4:	4422      	add	r2, r4
 80098d6:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80098d8:	6862      	ldr	r2, [r4, #4]
 80098da:	4422      	add	r2, r4
 80098dc:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80098de:	68a2      	ldr	r2, [r4, #8]
 80098e0:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80098e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009920 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80098e8:	f000 f838 	bl	800995c <_ZN17TypedTextDatabase8getFontsEv>
 80098ec:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80098ee:	f000 f833 	bl	8009958 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80098f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009924 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80098f4:	601c      	str	r4, [r3, #0]
        fonts = f;
 80098f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009928 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80098f8:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80098fa:	4b0c      	ldr	r3, [pc, #48]	@ (800992c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80098fc:	8018      	strh	r0, [r3, #0]
    }
}
 80098fe:	e007      	b.n	8009910 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8009900:	4b0b      	ldr	r3, [pc, #44]	@ (8009930 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8009902:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8009904:	4b0b      	ldr	r3, [pc, #44]	@ (8009934 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8009906:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8009908:	4b0b      	ldr	r3, [pc, #44]	@ (8009938 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800990a:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 800990c:	2c00      	cmp	r4, #0
 800990e:	d1e8      	bne.n	80098e2 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8009910:	bd38      	pop	{r3, r4, r5, pc}
 8009912:	bf00      	nop
 8009914:	200123a4 	.word	0x200123a4
 8009918:	2001239c 	.word	0x2001239c
 800991c:	20012398 	.word	0x20012398
 8009920:	200123a0 	.word	0x200123a0
 8009924:	20027a30 	.word	0x20027a30
 8009928:	20027a38 	.word	0x20027a38
 800992c:	20027a34 	.word	0x20027a34
 8009930:	900005cc 	.word	0x900005cc
 8009934:	900005c8 	.word	0x900005c8
 8009938:	900005d0 	.word	0x900005d0

0800993c <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800993c:	4b04      	ldr	r3, [pc, #16]	@ (8009950 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8009944:	4b03      	ldr	r3, [pc, #12]	@ (8009954 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8009946:	681b      	ldr	r3, [r3, #0]
}
 8009948:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	20012398 	.word	0x20012398
 8009954:	2001239c 	.word	0x2001239c

08009958 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8009958:	2001      	movs	r0, #1
 800995a:	4770      	bx	lr

0800995c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 800995c:	4800      	ldr	r0, [pc, #0]	@ (8009960 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800995e:	4770      	bx	lr
 8009960:	200123a8 	.word	0x200123a8

08009964 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8009964:	b510      	push	{r4, lr}
};
 8009966:	4c05      	ldr	r4, [pc, #20]	@ (800997c <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8009968:	f7ff febe 	bl	80096e8 <_Z23getFont_verdana_20_4bppv>
};
 800996c:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800996e:	f7ff fef9 	bl	8009764 <_Z23getFont_verdana_40_4bppv>
};
 8009972:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8009974:	f7ff fe7c 	bl	8009670 <_Z23getFont_verdana_10_4bppv>
};
 8009978:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800997a:	bd10      	pop	{r4, pc}
 800997c:	200123a8 	.word	0x200123a8

08009980 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8009980:	b510      	push	{r4, lr}
    pointArray = 0;
 8009982:	2400      	movs	r4, #0
 8009984:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8009986:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8009988:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 800998a:	601c      	str	r4, [r3, #0]
}
 800998c:	bd10      	pop	{r4, pc}

0800998e <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800998e:	4770      	bx	lr

08009990 <_ZN19FrontendApplicationD0Ev>:
 8009990:	b510      	push	{r4, lr}
 8009992:	4604      	mov	r4, r0
 8009994:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8009998:	f020 fa0f 	bl	8029dba <_ZdlPvj>
 800999c:	4620      	mov	r0, r4
 800999e:	bd10      	pop	{r4, pc}

080099a0 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80099a0:	b510      	push	{r4, lr}
 80099a2:	4604      	mov	r4, r0
    {
        model.tick();
 80099a4:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 80099a8:	f000 f814 	bl	80099d4 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80099ac:	4620      	mov	r0, r4
    }
 80099ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80099b2:	f00e bc8d 	b.w	80182d0 <_ZN8touchgfx11Application15handleTickEventEv>
	...

080099b8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80099b8:	b510      	push	{r4, lr}
 80099ba:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80099bc:	f7fb f9bc 	bl	8004d38 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80099c0:	4b01      	ldr	r3, [pc, #4]	@ (80099c8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80099c2:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80099c4:	6023      	str	r3, [r4, #0]
}
 80099c6:	bd10      	pop	{r4, pc}
 80099c8:	0802defc 	.word	0x0802defc

080099cc <_ZN5ModelC1Ev>:
#include "stm32f7xx_hal.h"
#endif

extern __IO uint16_t uhADCxConvertedData;

Model::Model() : modelListener(0)
 80099cc:	2200      	movs	r2, #0
 80099ce:	6002      	str	r2, [r0, #0]
{

}
 80099d0:	4770      	bx	lr
	...

080099d4 <_ZN5Model4tickEv>:

void Model::tick()
{
	modelListener->UpdateGraph(uhADCxConvertedData * 3300/4096);
 80099d4:	4b05      	ldr	r3, [pc, #20]	@ (80099ec <_ZN5Model4tickEv+0x18>)
 80099d6:	6800      	ldr	r0, [r0, #0]
 80099d8:	8819      	ldrh	r1, [r3, #0]
 80099da:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80099de:	b289      	uxth	r1, r1
 80099e0:	4359      	muls	r1, r3
 80099e2:	6803      	ldr	r3, [r0, #0]
 80099e4:	0b09      	lsrs	r1, r1, #12
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	4718      	bx	r3
 80099ea:	bf00      	nop
 80099ec:	20011edc 	.word	0x20011edc

080099f0 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 80099f0:	4770      	bx	lr

080099f2 <_ZThn4_N16Screen1PresenterD1Ev>:
 80099f2:	3804      	subs	r0, #4
 80099f4:	4770      	bx	lr

080099f6 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 80099f6:	4770      	bx	lr

080099f8 <_ZN16Screen1PresenterD0Ev>:
 80099f8:	b510      	push	{r4, lr}
 80099fa:	4604      	mov	r4, r0
 80099fc:	2110      	movs	r1, #16
 80099fe:	f020 f9dc 	bl	8029dba <_ZdlPvj>
 8009a02:	4620      	mov	r0, r4
 8009a04:	bd10      	pop	{r4, pc}

08009a06 <_ZThn4_N16Screen1PresenterD0Ev>:
 8009a06:	f1a0 0004 	sub.w	r0, r0, #4
 8009a0a:	e7f5      	b.n	80099f8 <_ZN16Screen1PresenterD0Ev>

08009a0c <_ZN16Screen1Presenter11UpdateGraphEt>:

}

void Screen1Presenter::UpdateGraph(uint16_t value)
{
	view.UpdateGraph(value);
 8009a0c:	68c0      	ldr	r0, [r0, #12]
 8009a0e:	f000 b831 	b.w	8009a74 <_ZN11Screen1View11UpdateGraphEt>

08009a12 <_ZThn4_N16Screen1Presenter11UpdateGraphEt>:
    void UpdateGraph(uint16_t value);
 8009a12:	f1a0 0004 	sub.w	r0, r0, #4
 8009a16:	f7ff bff9 	b.w	8009a0c <_ZN16Screen1Presenter11UpdateGraphEt>
	...

08009a1c <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8009a1c:	2200      	movs	r2, #0
    : view(v)
 8009a1e:	60c1      	str	r1, [r0, #12]
 8009a20:	6082      	str	r2, [r0, #8]
 8009a22:	4a02      	ldr	r2, [pc, #8]	@ (8009a2c <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8009a24:	6002      	str	r2, [r0, #0]
 8009a26:	321c      	adds	r2, #28
 8009a28:	6042      	str	r2, [r0, #4]
}
 8009a2a:	4770      	bx	lr
 8009a2c:	0802df50 	.word	0x0802df50

08009a30 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8009a30:	4770      	bx	lr
	...

08009a34 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8009a34:	4b03      	ldr	r3, [pc, #12]	@ (8009a44 <_ZN11Screen1ViewD1Ev+0x10>)
 8009a36:	b510      	push	{r4, lr}
 8009a38:	4604      	mov	r4, r0
 8009a3a:	6003      	str	r3, [r0, #0]
 8009a3c:	f7fb fe28 	bl	8005690 <_ZN15Screen1ViewBaseD1Ev>
 8009a40:	4620      	mov	r0, r4
 8009a42:	bd10      	pop	{r4, pc}
 8009a44:	0802df80 	.word	0x0802df80

08009a48 <_ZN11Screen1ViewD0Ev>:
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	f7ff fff2 	bl	8009a34 <_ZN11Screen1ViewD1Ev>
 8009a50:	f243 41d8 	movw	r1, #13528	@ 0x34d8
 8009a54:	4620      	mov	r0, r4
 8009a56:	f020 f9b0 	bl	8029dba <_ZdlPvj>
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	bd10      	pop	{r4, pc}
	...

08009a60 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8009a60:	b510      	push	{r4, lr}
 8009a62:	4604      	mov	r4, r0
 8009a64:	f7fb ff12 	bl	800588c <_ZN15Screen1ViewBaseC1Ev>
 8009a68:	4b01      	ldr	r3, [pc, #4]	@ (8009a70 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8009a6a:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8009a6c:	6023      	str	r3, [r4, #0]
}
 8009a6e:	bd10      	pop	{r4, pc}
 8009a70:	0802df80 	.word	0x0802df80

08009a74 <_ZN11Screen1View11UpdateGraphEt>:
        return i * scale;
 8009a74:	f8d0 30cc 	ldr.w	r3, [r0, #204]	@ 0xcc
        return addDataPointScaled(int2scaledY(y));
 8009a78:	3098      	adds	r0, #152	@ 0x98
 8009a7a:	4359      	muls	r1, r3
 8009a7c:	f00b b93f 	b.w	8014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>

08009a80 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8009a80:	f7fb bdcc 	b.w	800561c <_ZN15Screen1ViewBase11setupScreenEv>

08009a84 <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8009a84:	4770      	bx	lr

08009a86 <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 8009a86:	2000      	movs	r0, #0
 8009a88:	4770      	bx	lr

08009a8a <ft6x06_ReadID>:
{
 8009a8a:	b510      	push	{r4, lr}
 8009a8c:	4604      	mov	r4, r0
  TS_IO_Init();
 8009a8e:	f7f7 f8a0 	bl	8000bd2 <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8009a92:	21a8      	movs	r1, #168	@ 0xa8
 8009a94:	b2e0      	uxtb	r0, r4
 8009a96:	f7f7 f8b9 	bl	8000c0c <TS_IO_Read>
}
 8009a9a:	bd10      	pop	{r4, pc}

08009a9c <ft6x06_TS_DetectTouch>:
{
 8009a9c:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8009a9e:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8009aa0:	2102      	movs	r1, #2
 8009aa2:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8009aa4:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8009aa8:	f7f7 f8b0 	bl	8000c0c <TS_IO_Read>
 8009aac:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 8009ab0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009ab4:	f003 030f 	and.w	r3, r3, #15
 8009ab8:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8009abc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d901      	bls.n	8009ac8 <ft6x06_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8009ac4:	f88d 4007 	strb.w	r4, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8009ac8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009acc:	4b03      	ldr	r3, [pc, #12]	@ (8009adc <ft6x06_TS_DetectTouch+0x40>)
  return(nbTouch);
 8009ace:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8009ad2:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	709a      	strb	r2, [r3, #2]
}
 8009ad8:	b002      	add	sp, #8
 8009ada:	bd10      	pop	{r4, pc}
 8009adc:	200123b4 	.word	0x200123b4

08009ae0 <ft6x06_TS_GetXY>:
{
 8009ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8009ae2:	4c15      	ldr	r4, [pc, #84]	@ (8009b38 <ft6x06_TS_GetXY+0x58>)
{
 8009ae4:	4615      	mov	r5, r2
 8009ae6:	460e      	mov	r6, r1
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8009ae8:	78a3      	ldrb	r3, [r4, #2]
 8009aea:	7862      	ldrb	r2, [r4, #1]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d91f      	bls.n	8009b30 <ft6x06_TS_GetXY+0x50>
    switch(ft6x06_handle.currActiveTouchIdx)
 8009af0:	b303      	cbz	r3, 8009b34 <ft6x06_TS_GetXY+0x54>
  uint8_t regAddress = 0;
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	bf0c      	ite	eq
 8009af6:	2109      	moveq	r1, #9
 8009af8:	2100      	movne	r1, #0
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8009afa:	2304      	movs	r3, #4
 8009afc:	b2c0      	uxtb	r0, r0
 8009afe:	eb0d 0203 	add.w	r2, sp, r3
 8009b02:	f7f7 f8a1 	bl	8000c48 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8009b06:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009b0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009b0e:	021b      	lsls	r3, r3, #8
 8009b10:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009b14:	4313      	orrs	r3, r2
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8009b16:	f89d 2007 	ldrb.w	r2, [sp, #7]
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8009b1a:	8033      	strh	r3, [r6, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8009b1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009b20:	021b      	lsls	r3, r3, #8
 8009b22:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009b26:	4313      	orrs	r3, r2
 8009b28:	802b      	strh	r3, [r5, #0]
    ft6x06_handle.currActiveTouchIdx++;
 8009b2a:	78a3      	ldrb	r3, [r4, #2]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	70a3      	strb	r3, [r4, #2]
}
 8009b30:	b002      	add	sp, #8
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
    switch(ft6x06_handle.currActiveTouchIdx)
 8009b34:	2103      	movs	r1, #3
 8009b36:	e7e0      	b.n	8009afa <ft6x06_TS_GetXY+0x1a>
 8009b38:	200123b4 	.word	0x200123b4

08009b3c <ft6x06_TS_EnableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	21a4      	movs	r1, #164	@ 0xa4
 8009b40:	b2c0      	uxtb	r0, r0
 8009b42:	f7f7 b847 	b.w	8000bd4 <TS_IO_Write>

08009b46 <ft6x06_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8009b46:	2200      	movs	r2, #0
 8009b48:	21a4      	movs	r1, #164	@ 0xa4
 8009b4a:	b2c0      	uxtb	r0, r0
 8009b4c:	f7f7 b842 	b.w	8000bd4 <TS_IO_Write>

08009b50 <ft6x06_TS_Start>:
  ft6x06_TS_DisableIT(DeviceAddr);
 8009b50:	f7ff bff9 	b.w	8009b46 <ft6x06_TS_DisableIT>

08009b54 <ft6x06_TS_ClearIT>:
  *         Should be called Following an EXTI coming to the MCU.
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
 8009b54:	4770      	bx	lr
	...

08009b58 <ft6x06_Init>:
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
  {
    if(ft6x06[idx] == DeviceAddr)
 8009b58:	4a06      	ldr	r2, [pc, #24]	@ (8009b74 <ft6x06_Init+0x1c>)
 8009b5a:	7813      	ldrb	r3, [r2, #0]
 8009b5c:	4298      	cmp	r0, r3
 8009b5e:	d008      	beq.n	8009b72 <ft6x06_Init+0x1a>
 8009b60:	7851      	ldrb	r1, [r2, #1]
 8009b62:	4288      	cmp	r0, r1
 8009b64:	d005      	beq.n	8009b72 <ft6x06_Init+0x1a>
 8009b66:	b10b      	cbz	r3, 8009b6c <ft6x06_Init+0x14>
 8009b68:	b919      	cbnz	r1, 8009b72 <ft6x06_Init+0x1a>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8009b6a:	2301      	movs	r3, #1
      ft6x06[empty] = DeviceAddr;
 8009b6c:	54d0      	strb	r0, [r2, r3]
      TS_IO_Init(); 
 8009b6e:	f7f7 b830 	b.w	8000bd2 <TS_IO_Init>
}
 8009b72:	4770      	bx	lr
 8009b74:	200123b7 	.word	0x200123b7

08009b78 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8009b78:	b538      	push	{r3, r4, r5, lr}
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8009b7e:	2000      	movs	r0, #0
 8009b80:	49c9      	ldr	r1, [pc, #804]	@ (8009ea8 <OTM8009A_Init+0x330>)
 8009b82:	f7f7 fba7 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8009b86:	49c9      	ldr	r1, [pc, #804]	@ (8009eac <OTM8009A_Init+0x334>)
 8009b88:	2003      	movs	r0, #3
 8009b8a:	f7f7 fba3 	bl	80012d4 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8009b8e:	49c8      	ldr	r1, [pc, #800]	@ (8009eb0 <OTM8009A_Init+0x338>)
 8009b90:	2000      	movs	r0, #0
 8009b92:	f7f7 fb9f 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8009b96:	49c7      	ldr	r1, [pc, #796]	@ (8009eb4 <OTM8009A_Init+0x33c>)
 8009b98:	2002      	movs	r0, #2
 8009b9a:	f7f7 fb9b 	bl	80012d4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8009b9e:	49c4      	ldr	r1, [pc, #784]	@ (8009eb0 <OTM8009A_Init+0x338>)
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	f7f7 fb97 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8009ba6:	49c4      	ldr	r1, [pc, #784]	@ (8009eb8 <OTM8009A_Init+0x340>)
 8009ba8:	2000      	movs	r0, #0
 8009baa:	f7f7 fb93 	bl	80012d4 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8009bae:	200a      	movs	r0, #10
 8009bb0:	f7f7 fb8e 	bl	80012d0 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8009bb4:	49c1      	ldr	r1, [pc, #772]	@ (8009ebc <OTM8009A_Init+0x344>)
 8009bb6:	2000      	movs	r0, #0
 8009bb8:	f7f7 fb8c 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8009bbc:	49c0      	ldr	r1, [pc, #768]	@ (8009ec0 <OTM8009A_Init+0x348>)
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	f7f7 fb88 	bl	80012d4 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8009bc4:	200a      	movs	r0, #10
 8009bc6:	f7f7 fb83 	bl	80012d0 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8009bca:	49be      	ldr	r1, [pc, #760]	@ (8009ec4 <OTM8009A_Init+0x34c>)
 8009bcc:	2000      	movs	r0, #0
 8009bce:	f7f7 fb81 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8009bd2:	49bd      	ldr	r1, [pc, #756]	@ (8009ec8 <OTM8009A_Init+0x350>)
 8009bd4:	2000      	movs	r0, #0
 8009bd6:	f7f7 fb7d 	bl	80012d4 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8009bda:	49bc      	ldr	r1, [pc, #752]	@ (8009ecc <OTM8009A_Init+0x354>)
 8009bdc:	2000      	movs	r0, #0
 8009bde:	f7f7 fb79 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8009be2:	49bb      	ldr	r1, [pc, #748]	@ (8009ed0 <OTM8009A_Init+0x358>)
 8009be4:	2000      	movs	r0, #0
 8009be6:	f7f7 fb75 	bl	80012d4 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8009bea:	49ba      	ldr	r1, [pc, #744]	@ (8009ed4 <OTM8009A_Init+0x35c>)
 8009bec:	2000      	movs	r0, #0
 8009bee:	f7f7 fb71 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8009bf2:	49b9      	ldr	r1, [pc, #740]	@ (8009ed8 <OTM8009A_Init+0x360>)
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	f7f7 fb6d 	bl	80012d4 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8009bfa:	49ab      	ldr	r1, [pc, #684]	@ (8009ea8 <OTM8009A_Init+0x330>)
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	f7f7 fb69 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8009c02:	49b6      	ldr	r1, [pc, #728]	@ (8009edc <OTM8009A_Init+0x364>)
 8009c04:	2000      	movs	r0, #0
 8009c06:	f7f7 fb65 	bl	80012d4 <DSI_IO_WriteCmd>
  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  //DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
  //DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8009c0a:	49b5      	ldr	r1, [pc, #724]	@ (8009ee0 <OTM8009A_Init+0x368>)
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	f7f7 fb61 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8009c12:	49b4      	ldr	r1, [pc, #720]	@ (8009ee4 <OTM8009A_Init+0x36c>)
 8009c14:	2000      	movs	r0, #0
 8009c16:	f7f7 fb5d 	bl	80012d4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8009c1a:	49b3      	ldr	r1, [pc, #716]	@ (8009ee8 <OTM8009A_Init+0x370>)
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	f7f7 fb59 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8009c22:	49b2      	ldr	r1, [pc, #712]	@ (8009eec <OTM8009A_Init+0x374>)
 8009c24:	2000      	movs	r0, #0
 8009c26:	f7f7 fb55 	bl	80012d4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8009c2a:	49b1      	ldr	r1, [pc, #708]	@ (8009ef0 <OTM8009A_Init+0x378>)
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	f7f7 fb51 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8009c32:	49a7      	ldr	r1, [pc, #668]	@ (8009ed0 <OTM8009A_Init+0x358>)
 8009c34:	2000      	movs	r0, #0
 8009c36:	f7f7 fb4d 	bl	80012d4 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8009c3a:	499b      	ldr	r1, [pc, #620]	@ (8009ea8 <OTM8009A_Init+0x330>)
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	f7f7 fb49 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8009c42:	49ac      	ldr	r1, [pc, #688]	@ (8009ef4 <OTM8009A_Init+0x37c>)
 8009c44:	2002      	movs	r0, #2
 8009c46:	f7f7 fb45 	bl	80012d4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8009c4a:	49ab      	ldr	r1, [pc, #684]	@ (8009ef8 <OTM8009A_Init+0x380>)
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	f7f7 fb41 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8009c52:	49aa      	ldr	r1, [pc, #680]	@ (8009efc <OTM8009A_Init+0x384>)
 8009c54:	2000      	movs	r0, #0
 8009c56:	f7f7 fb3d 	bl	80012d4 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8009c5a:	49a9      	ldr	r1, [pc, #676]	@ (8009f00 <OTM8009A_Init+0x388>)
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	f7f7 fb39 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8009c62:	49a8      	ldr	r1, [pc, #672]	@ (8009f04 <OTM8009A_Init+0x38c>)
 8009c64:	2000      	movs	r0, #0
 8009c66:	f7f7 fb35 	bl	80012d4 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8009c6a:	49a7      	ldr	r1, [pc, #668]	@ (8009f08 <OTM8009A_Init+0x390>)
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	f7f7 fb31 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8009c72:	49a6      	ldr	r1, [pc, #664]	@ (8009f0c <OTM8009A_Init+0x394>)
 8009c74:	2000      	movs	r0, #0
 8009c76:	f7f7 fb2d 	bl	80012d4 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8009c7a:	49a5      	ldr	r1, [pc, #660]	@ (8009f10 <OTM8009A_Init+0x398>)
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	f7f7 fb29 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8009c82:	49a4      	ldr	r1, [pc, #656]	@ (8009f14 <OTM8009A_Init+0x39c>)
 8009c84:	2000      	movs	r0, #0
 8009c86:	f7f7 fb25 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8009c8a:	4995      	ldr	r1, [pc, #596]	@ (8009ee0 <OTM8009A_Init+0x368>)
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	f7f7 fb21 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8009c92:	49a1      	ldr	r1, [pc, #644]	@ (8009f18 <OTM8009A_Init+0x3a0>)
 8009c94:	2000      	movs	r0, #0
 8009c96:	f7f7 fb1d 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8009c9a:	49a0      	ldr	r1, [pc, #640]	@ (8009f1c <OTM8009A_Init+0x3a4>)
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	f7f7 fb19 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8009ca2:	499f      	ldr	r1, [pc, #636]	@ (8009f20 <OTM8009A_Init+0x3a8>)
 8009ca4:	2002      	movs	r0, #2
 8009ca6:	f7f7 fb15 	bl	80012d4 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8009caa:	4981      	ldr	r1, [pc, #516]	@ (8009eb0 <OTM8009A_Init+0x338>)
 8009cac:	2000      	movs	r0, #0
 8009cae:	f7f7 fb11 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8009cb2:	499c      	ldr	r1, [pc, #624]	@ (8009f24 <OTM8009A_Init+0x3ac>)
 8009cb4:	2006      	movs	r0, #6
 8009cb6:	f7f7 fb0d 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8009cba:	499b      	ldr	r1, [pc, #620]	@ (8009f28 <OTM8009A_Init+0x3b0>)
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	f7f7 fb09 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8009cc2:	499a      	ldr	r1, [pc, #616]	@ (8009f2c <OTM8009A_Init+0x3b4>)
 8009cc4:	200e      	movs	r0, #14
 8009cc6:	f7f7 fb05 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8009cca:	4999      	ldr	r1, [pc, #612]	@ (8009f30 <OTM8009A_Init+0x3b8>)
 8009ccc:	2000      	movs	r0, #0
 8009cce:	f7f7 fb01 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8009cd2:	4998      	ldr	r1, [pc, #608]	@ (8009f34 <OTM8009A_Init+0x3bc>)
 8009cd4:	200e      	movs	r0, #14
 8009cd6:	f7f7 fafd 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8009cda:	4997      	ldr	r1, [pc, #604]	@ (8009f38 <OTM8009A_Init+0x3c0>)
 8009cdc:	2000      	movs	r0, #0
 8009cde:	f7f7 faf9 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8009ce2:	4996      	ldr	r1, [pc, #600]	@ (8009f3c <OTM8009A_Init+0x3c4>)
 8009ce4:	200a      	movs	r0, #10
 8009ce6:	f7f7 faf5 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8009cea:	4995      	ldr	r1, [pc, #596]	@ (8009f40 <OTM8009A_Init+0x3c8>)
 8009cec:	2000      	movs	r0, #0
 8009cee:	f7f7 faf1 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8009cf2:	4994      	ldr	r1, [pc, #592]	@ (8009f44 <OTM8009A_Init+0x3cc>)
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	f7f7 faed 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8009cfa:	496d      	ldr	r1, [pc, #436]	@ (8009eb0 <OTM8009A_Init+0x338>)
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	f7f7 fae9 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8009d02:	4991      	ldr	r1, [pc, #580]	@ (8009f48 <OTM8009A_Init+0x3d0>)
 8009d04:	200a      	movs	r0, #10
 8009d06:	f7f7 fae5 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8009d0a:	4990      	ldr	r1, [pc, #576]	@ (8009f4c <OTM8009A_Init+0x3d4>)
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	f7f7 fae1 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8009d12:	498f      	ldr	r1, [pc, #572]	@ (8009f50 <OTM8009A_Init+0x3d8>)
 8009d14:	200f      	movs	r0, #15
 8009d16:	f7f7 fadd 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8009d1a:	4983      	ldr	r1, [pc, #524]	@ (8009f28 <OTM8009A_Init+0x3b0>)
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	f7f7 fad9 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8009d22:	498c      	ldr	r1, [pc, #560]	@ (8009f54 <OTM8009A_Init+0x3dc>)
 8009d24:	200f      	movs	r0, #15
 8009d26:	f7f7 fad5 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8009d2a:	4981      	ldr	r1, [pc, #516]	@ (8009f30 <OTM8009A_Init+0x3b8>)
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	f7f7 fad1 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8009d32:	4989      	ldr	r1, [pc, #548]	@ (8009f58 <OTM8009A_Init+0x3e0>)
 8009d34:	200a      	movs	r0, #10
 8009d36:	f7f7 facd 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8009d3a:	497f      	ldr	r1, [pc, #508]	@ (8009f38 <OTM8009A_Init+0x3c0>)
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	f7f7 fac9 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8009d42:	4986      	ldr	r1, [pc, #536]	@ (8009f5c <OTM8009A_Init+0x3e4>)
 8009d44:	200f      	movs	r0, #15
 8009d46:	f7f7 fac5 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8009d4a:	497d      	ldr	r1, [pc, #500]	@ (8009f40 <OTM8009A_Init+0x3c8>)
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	f7f7 fac1 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8009d52:	4983      	ldr	r1, [pc, #524]	@ (8009f60 <OTM8009A_Init+0x3e8>)
 8009d54:	200f      	movs	r0, #15
 8009d56:	f7f7 fabd 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8009d5a:	4982      	ldr	r1, [pc, #520]	@ (8009f64 <OTM8009A_Init+0x3ec>)
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	f7f7 fab9 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8009d62:	4981      	ldr	r1, [pc, #516]	@ (8009f68 <OTM8009A_Init+0x3f0>)
 8009d64:	200a      	movs	r0, #10
 8009d66:	f7f7 fab5 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8009d6a:	4980      	ldr	r1, [pc, #512]	@ (8009f6c <OTM8009A_Init+0x3f4>)
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	f7f7 fab1 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8009d72:	497f      	ldr	r1, [pc, #508]	@ (8009f70 <OTM8009A_Init+0x3f8>)
 8009d74:	200a      	movs	r0, #10
 8009d76:	f7f7 faad 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8009d7a:	494d      	ldr	r1, [pc, #308]	@ (8009eb0 <OTM8009A_Init+0x338>)
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	f7f7 faa9 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8009d82:	497c      	ldr	r1, [pc, #496]	@ (8009f74 <OTM8009A_Init+0x3fc>)
 8009d84:	200a      	movs	r0, #10
 8009d86:	f7f7 faa5 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8009d8a:	4970      	ldr	r1, [pc, #448]	@ (8009f4c <OTM8009A_Init+0x3d4>)
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	f7f7 faa1 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8009d92:	4979      	ldr	r1, [pc, #484]	@ (8009f78 <OTM8009A_Init+0x400>)
 8009d94:	200f      	movs	r0, #15
 8009d96:	f7f7 fa9d 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8009d9a:	4963      	ldr	r1, [pc, #396]	@ (8009f28 <OTM8009A_Init+0x3b0>)
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	f7f7 fa99 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8009da2:	4976      	ldr	r1, [pc, #472]	@ (8009f7c <OTM8009A_Init+0x404>)
 8009da4:	200f      	movs	r0, #15
 8009da6:	f7f7 fa95 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8009daa:	4961      	ldr	r1, [pc, #388]	@ (8009f30 <OTM8009A_Init+0x3b8>)
 8009dac:	2000      	movs	r0, #0
 8009dae:	f7f7 fa91 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8009db2:	4973      	ldr	r1, [pc, #460]	@ (8009f80 <OTM8009A_Init+0x408>)
 8009db4:	200a      	movs	r0, #10
 8009db6:	f7f7 fa8d 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8009dba:	495f      	ldr	r1, [pc, #380]	@ (8009f38 <OTM8009A_Init+0x3c0>)
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	f7f7 fa89 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8009dc2:	4970      	ldr	r1, [pc, #448]	@ (8009f84 <OTM8009A_Init+0x40c>)
 8009dc4:	200f      	movs	r0, #15
 8009dc6:	f7f7 fa85 	bl	80012d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8009dca:	495d      	ldr	r1, [pc, #372]	@ (8009f40 <OTM8009A_Init+0x3c8>)
 8009dcc:	2000      	movs	r0, #0
 8009dce:	f7f7 fa81 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8009dd2:	496d      	ldr	r1, [pc, #436]	@ (8009f88 <OTM8009A_Init+0x410>)
 8009dd4:	200f      	movs	r0, #15
 8009dd6:	f7f7 fa7d 	bl	80012d4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8009dda:	494d      	ldr	r1, [pc, #308]	@ (8009f10 <OTM8009A_Init+0x398>)
 8009ddc:	2000      	movs	r0, #0
 8009dde:	f7f7 fa79 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8009de2:	496a      	ldr	r1, [pc, #424]	@ (8009f8c <OTM8009A_Init+0x414>)
 8009de4:	2000      	movs	r0, #0
 8009de6:	f7f7 fa75 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8009dea:	4969      	ldr	r1, [pc, #420]	@ (8009f90 <OTM8009A_Init+0x418>)
 8009dec:	2000      	movs	r0, #0
 8009dee:	f7f7 fa71 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8009df2:	4968      	ldr	r1, [pc, #416]	@ (8009f94 <OTM8009A_Init+0x41c>)
 8009df4:	2000      	movs	r0, #0
 8009df6:	f7f7 fa6d 	bl	80012d4 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8009dfa:	4967      	ldr	r1, [pc, #412]	@ (8009f98 <OTM8009A_Init+0x420>)
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	f7f7 fa69 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8009e02:	4966      	ldr	r1, [pc, #408]	@ (8009f9c <OTM8009A_Init+0x424>)
 8009e04:	2000      	movs	r0, #0
 8009e06:	f7f7 fa65 	bl	80012d4 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8009e0a:	4927      	ldr	r1, [pc, #156]	@ (8009ea8 <OTM8009A_Init+0x330>)
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	f7f7 fa61 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8009e12:	4963      	ldr	r1, [pc, #396]	@ (8009fa0 <OTM8009A_Init+0x428>)
 8009e14:	2003      	movs	r0, #3
 8009e16:	f7f7 fa5d 	bl	80012d4 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8009e1a:	4923      	ldr	r1, [pc, #140]	@ (8009ea8 <OTM8009A_Init+0x330>)
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	f7f7 fa59 	bl	80012d4 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8009e22:	4921      	ldr	r1, [pc, #132]	@ (8009ea8 <OTM8009A_Init+0x330>)
 8009e24:	2000      	movs	r0, #0
 8009e26:	f7f7 fa55 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8009e2a:	495e      	ldr	r1, [pc, #376]	@ (8009fa4 <OTM8009A_Init+0x42c>)
 8009e2c:	2010      	movs	r0, #16
 8009e2e:	f7f7 fa51 	bl	80012d4 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8009e32:	491d      	ldr	r1, [pc, #116]	@ (8009ea8 <OTM8009A_Init+0x330>)
 8009e34:	2000      	movs	r0, #0
 8009e36:	f7f7 fa4d 	bl	80012d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8009e3a:	495b      	ldr	r1, [pc, #364]	@ (8009fa8 <OTM8009A_Init+0x430>)
 8009e3c:	2010      	movs	r0, #16
 8009e3e:	f7f7 fa49 	bl	80012d4 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8009e42:	2000      	movs	r0, #0
 8009e44:	4959      	ldr	r1, [pc, #356]	@ (8009fac <OTM8009A_Init+0x434>)
 8009e46:	f7f7 fa45 	bl	80012d4 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8009e4a:	2078      	movs	r0, #120	@ 0x78
 8009e4c:	f7f7 fa40 	bl	80012d0 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8009e50:	2c00      	cmp	r4, #0
 8009e52:	f000 80c9 	beq.w	8009fe8 <OTM8009A_Init+0x470>
 8009e56:	2c02      	cmp	r4, #2
 8009e58:	d103      	bne.n	8009e62 <OTM8009A_Init+0x2ea>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8009e5a:	4955      	ldr	r1, [pc, #340]	@ (8009fb0 <OTM8009A_Init+0x438>)
 8009e5c:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8009e5e:	f7f7 fa39 	bl	80012d4 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8009e62:	2d01      	cmp	r5, #1
 8009e64:	d10b      	bne.n	8009e7e <OTM8009A_Init+0x306>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8009e66:	4953      	ldr	r1, [pc, #332]	@ (8009fb4 <OTM8009A_Init+0x43c>)
 8009e68:	2000      	movs	r0, #0
 8009e6a:	f7f7 fa33 	bl	80012d4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8009e6e:	4952      	ldr	r1, [pc, #328]	@ (8009fb8 <OTM8009A_Init+0x440>)
 8009e70:	2004      	movs	r0, #4
 8009e72:	f7f7 fa2f 	bl	80012d4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8009e76:	4951      	ldr	r1, [pc, #324]	@ (8009fbc <OTM8009A_Init+0x444>)
 8009e78:	2004      	movs	r0, #4
 8009e7a:	f7f7 fa2b 	bl	80012d4 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8009e7e:	4950      	ldr	r1, [pc, #320]	@ (8009fc0 <OTM8009A_Init+0x448>)
 8009e80:	2000      	movs	r0, #0
 8009e82:	f7f7 fa27 	bl	80012d4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8009e86:	494f      	ldr	r1, [pc, #316]	@ (8009fc4 <OTM8009A_Init+0x44c>)
 8009e88:	2000      	movs	r0, #0
 8009e8a:	f7f7 fa23 	bl	80012d4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8009e8e:	494e      	ldr	r1, [pc, #312]	@ (8009fc8 <OTM8009A_Init+0x450>)
 8009e90:	2000      	movs	r0, #0
 8009e92:	f7f7 fa1f 	bl	80012d4 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8009e96:	494d      	ldr	r1, [pc, #308]	@ (8009fcc <OTM8009A_Init+0x454>)
 8009e98:	2000      	movs	r0, #0
 8009e9a:	f7f7 fa1b 	bl	80012d4 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8009e9e:	494c      	ldr	r1, [pc, #304]	@ (8009fd0 <OTM8009A_Init+0x458>)
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	f7f7 fa17 	bl	80012d4 <DSI_IO_WriteCmd>
 8009ea6:	e095      	b.n	8009fd4 <OTM8009A_Init+0x45c>
 8009ea8:	0802e00e 	.word	0x0802e00e
 8009eac:	0802e13b 	.word	0x0802e13b
 8009eb0:	0802e00c 	.word	0x0802e00c
 8009eb4:	0802e138 	.word	0x0802e138
 8009eb8:	0802e00a 	.word	0x0802e00a
 8009ebc:	0802e008 	.word	0x0802e008
 8009ec0:	0802e006 	.word	0x0802e006
 8009ec4:	0802e004 	.word	0x0802e004
 8009ec8:	0802e002 	.word	0x0802e002
 8009ecc:	0802e000 	.word	0x0802e000
 8009ed0:	0802dffe 	.word	0x0802dffe
 8009ed4:	0802dffc 	.word	0x0802dffc
 8009ed8:	0802dffa 	.word	0x0802dffa
 8009edc:	0802dff8 	.word	0x0802dff8
 8009ee0:	0802dff4 	.word	0x0802dff4
 8009ee4:	0802dff2 	.word	0x0802dff2
 8009ee8:	0802dff0 	.word	0x0802dff0
 8009eec:	0802dfee 	.word	0x0802dfee
 8009ef0:	0802dfec 	.word	0x0802dfec
 8009ef4:	0802e113 	.word	0x0802e113
 8009ef8:	0802dfea 	.word	0x0802dfea
 8009efc:	0802dfe8 	.word	0x0802dfe8
 8009f00:	0802dfe6 	.word	0x0802dfe6
 8009f04:	0802dfe4 	.word	0x0802dfe4
 8009f08:	0802dfe2 	.word	0x0802dfe2
 8009f0c:	0802dfe0 	.word	0x0802dfe0
 8009f10:	0802dff6 	.word	0x0802dff6
 8009f14:	0802dfde 	.word	0x0802dfde
 8009f18:	0802dfdc 	.word	0x0802dfdc
 8009f1c:	0802dfda 	.word	0x0802dfda
 8009f20:	0802e110 	.word	0x0802e110
 8009f24:	0802e109 	.word	0x0802e109
 8009f28:	0802dfd8 	.word	0x0802dfd8
 8009f2c:	0802e0fa 	.word	0x0802e0fa
 8009f30:	0802dfd6 	.word	0x0802dfd6
 8009f34:	0802e0eb 	.word	0x0802e0eb
 8009f38:	0802dfd4 	.word	0x0802dfd4
 8009f3c:	0802e0e0 	.word	0x0802e0e0
 8009f40:	0802dfd2 	.word	0x0802dfd2
 8009f44:	0802dfb6 	.word	0x0802dfb6
 8009f48:	0802e0d5 	.word	0x0802e0d5
 8009f4c:	0802dfd0 	.word	0x0802dfd0
 8009f50:	0802e0c5 	.word	0x0802e0c5
 8009f54:	0802e0b5 	.word	0x0802e0b5
 8009f58:	0802e0aa 	.word	0x0802e0aa
 8009f5c:	0802e09a 	.word	0x0802e09a
 8009f60:	0802e08a 	.word	0x0802e08a
 8009f64:	0802dfce 	.word	0x0802dfce
 8009f68:	0802e07f 	.word	0x0802e07f
 8009f6c:	0802dfcc 	.word	0x0802dfcc
 8009f70:	0802e074 	.word	0x0802e074
 8009f74:	0802e069 	.word	0x0802e069
 8009f78:	0802e059 	.word	0x0802e059
 8009f7c:	0802e049 	.word	0x0802e049
 8009f80:	0802e03e 	.word	0x0802e03e
 8009f84:	0802e02e 	.word	0x0802e02e
 8009f88:	0802e01e 	.word	0x0802e01e
 8009f8c:	0802dfb4 	.word	0x0802dfb4
 8009f90:	0802dfb2 	.word	0x0802dfb2
 8009f94:	0802dfb0 	.word	0x0802dfb0
 8009f98:	0802dfae 	.word	0x0802dfae
 8009f9c:	0802dfac 	.word	0x0802dfac
 8009fa0:	0802e01a 	.word	0x0802e01a
 8009fa4:	0802e127 	.word	0x0802e127
 8009fa8:	0802e116 	.word	0x0802e116
 8009fac:	0802dfca 	.word	0x0802dfca
 8009fb0:	0802dfc8 	.word	0x0802dfc8
 8009fb4:	0802dfc4 	.word	0x0802dfc4
 8009fb8:	0802e015 	.word	0x0802e015
 8009fbc:	0802e010 	.word	0x0802e010
 8009fc0:	0802dfc2 	.word	0x0802dfc2
 8009fc4:	0802dfc0 	.word	0x0802dfc0
 8009fc8:	0802dfbe 	.word	0x0802dfbe
 8009fcc:	0802dfbc 	.word	0x0802dfbc
 8009fd0:	0802dfba 	.word	0x0802dfba

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8009fd4:	4906      	ldr	r1, [pc, #24]	@ (8009ff0 <OTM8009A_Init+0x478>)
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	f7f7 f97c 	bl	80012d4 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8009fdc:	4905      	ldr	r1, [pc, #20]	@ (8009ff4 <OTM8009A_Init+0x47c>)
 8009fde:	2000      	movs	r0, #0
 8009fe0:	f7f7 f978 	bl	80012d4 <DSI_IO_WriteCmd>

  return 0;
}
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8009fe8:	4903      	ldr	r1, [pc, #12]	@ (8009ff8 <OTM8009A_Init+0x480>)
 8009fea:	4620      	mov	r0, r4
 8009fec:	e737      	b.n	8009e5e <OTM8009A_Init+0x2e6>
 8009fee:	bf00      	nop
 8009ff0:	0802e00e 	.word	0x0802e00e
 8009ff4:	0802dfb8 	.word	0x0802dfb8
 8009ff8:	0802dfc6 	.word	0x0802dfc6

08009ffc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009ffc:	490f      	ldr	r1, [pc, #60]	@ (800a03c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009ffe:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a000:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800a004:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800a00c:	4b0c      	ldr	r3, [pc, #48]	@ (800a040 <SystemInit+0x44>)
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	f042 0201 	orr.w	r2, r2, #1
 800a014:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800a016:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 800a01e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a022:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a024:	4a07      	ldr	r2, [pc, #28]	@ (800a044 <SystemInit+0x48>)
 800a026:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a02e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a030:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a032:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a036:	608b      	str	r3, [r1, #8]
#endif
}
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	e000ed00 	.word	0xe000ed00
 800a040:	40023800 	.word	0x40023800
 800a044:	24003010 	.word	0x24003010

0800a048 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a048:	4a07      	ldr	r2, [pc, #28]	@ (800a068 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a04a:	2003      	movs	r0, #3
{
 800a04c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a04e:	6813      	ldr	r3, [r2, #0]
 800a050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a054:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a056:	f000 fa95 	bl	800a584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a05a:	2000      	movs	r0, #0
 800a05c:	f7fa fc10 	bl	8004880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a060:	f7fa f8e8 	bl	8004234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800a064:	2000      	movs	r0, #0
 800a066:	bd08      	pop	{r3, pc}
 800a068:	40023c00 	.word	0x40023c00

0800a06c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800a06c:	4a03      	ldr	r2, [pc, #12]	@ (800a07c <HAL_IncTick+0x10>)
 800a06e:	4b04      	ldr	r3, [pc, #16]	@ (800a080 <HAL_IncTick+0x14>)
 800a070:	6811      	ldr	r1, [r2, #0]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	440b      	add	r3, r1
 800a076:	6013      	str	r3, [r2, #0]
}
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	200123bc 	.word	0x200123bc
 800a080:	20000064 	.word	0x20000064

0800a084 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800a084:	4b01      	ldr	r3, [pc, #4]	@ (800a08c <HAL_GetTick+0x8>)
 800a086:	6818      	ldr	r0, [r3, #0]
}
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	200123bc 	.word	0x200123bc

0800a090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a090:	b538      	push	{r3, r4, r5, lr}
 800a092:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a094:	f7ff fff6 	bl	800a084 <HAL_GetTick>
 800a098:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a09a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800a09c:	bf1e      	ittt	ne
 800a09e:	4b04      	ldrne	r3, [pc, #16]	@ (800a0b0 <HAL_Delay+0x20>)
 800a0a0:	781b      	ldrbne	r3, [r3, #0]
 800a0a2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a0a4:	f7ff ffee 	bl	800a084 <HAL_GetTick>
 800a0a8:	1b43      	subs	r3, r0, r5
 800a0aa:	42a3      	cmp	r3, r4
 800a0ac:	d3fa      	bcc.n	800a0a4 <HAL_Delay+0x14>
  {
  }
}
 800a0ae:	bd38      	pop	{r3, r4, r5, pc}
 800a0b0:	20000064 	.word	0x20000064

0800a0b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a0b4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	f000 809b 	beq.w	800a1f4 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800a0be:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800a0c0:	b925      	cbnz	r5, 800a0cc <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a0c2:	f7fa f8d5 	bl	8004270 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a0c6:	6465      	str	r5, [r4, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a0c8:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a0cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0ce:	06db      	lsls	r3, r3, #27
 800a0d0:	f100 808e 	bmi.w	800a1f0 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a0d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a0da:	f023 0302 	bic.w	r3, r3, #2
 800a0de:	f043 0302 	orr.w	r3, r3, #2
 800a0e2:	6423      	str	r3, [r4, #64]	@ 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800a0e4:	4b44      	ldr	r3, [pc, #272]	@ (800a1f8 <HAL_ADC_Init+0x144>)
 800a0e6:	685a      	ldr	r2, [r3, #4]
 800a0e8:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800a0ec:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800a0ee:	685a      	ldr	r2, [r3, #4]
 800a0f0:	6861      	ldr	r1, [r4, #4]
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a0f6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a0f8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a0fa:	685a      	ldr	r2, [r3, #4]
 800a0fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a100:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a102:	685a      	ldr	r2, [r3, #4]
 800a104:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a108:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a10a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a10c:	685a      	ldr	r2, [r3, #4]
 800a10e:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800a112:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a118:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a11a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a11c:	689a      	ldr	r2, [r3, #8]
 800a11e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a122:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a124:	689a      	ldr	r2, [r3, #8]
 800a126:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a128:	4934      	ldr	r1, [pc, #208]	@ (800a1fc <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a12a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a12c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a12e:	428a      	cmp	r2, r1
 800a130:	d052      	beq.n	800a1d8 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a132:	6899      	ldr	r1, [r3, #8]
 800a134:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
 800a138:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a13a:	6899      	ldr	r1, [r3, #8]
 800a13c:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a13e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a140:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a142:	689a      	ldr	r2, [r3, #8]
 800a144:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a148:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a14a:	689a      	ldr	r2, [r3, #8]
 800a14c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a14e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a150:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a152:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a154:	f022 0202 	bic.w	r2, r2, #2
 800a158:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a15a:	689a      	ldr	r2, [r3, #8]
 800a15c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800a160:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a162:	f894 2020 	ldrb.w	r2, [r4, #32]
 800a166:	2a00      	cmp	r2, #0
 800a168:	d03e      	beq.n	800a1e8 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a16a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a16c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a16e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a172:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a174:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a176:	685a      	ldr	r2, [r3, #4]
 800a178:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800a17c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a17e:	685a      	ldr	r2, [r3, #4]
 800a180:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a184:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 800a186:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a18a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a18c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a190:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a192:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a196:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800a19a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a19c:	689a      	ldr	r2, [r3, #8]
 800a19e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a1a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a1a4:	689a      	ldr	r2, [r3, #8]
 800a1a6:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 800a1aa:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a1ae:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a1b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a1b2:	689a      	ldr	r2, [r3, #8]
 800a1b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a1ba:	689a      	ldr	r2, [r3, #8]
 800a1bc:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800a1c0:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800a1c2:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800a1c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a1c6:	f023 0303 	bic.w	r3, r3, #3
 800a1ca:	f043 0301 	orr.w	r3, r3, #1
 800a1ce:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800a1d6:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a1d8:	689a      	ldr	r2, [r3, #8]
 800a1da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a1de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a1e0:	689a      	ldr	r2, [r3, #8]
 800a1e2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a1e6:	e7b2      	b.n	800a14e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a1e8:	685a      	ldr	r2, [r3, #4]
 800a1ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a1ee:	e7c9      	b.n	800a184 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800a1f0:	2001      	movs	r0, #1
 800a1f2:	e7ed      	b.n	800a1d0 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 800a1f4:	2001      	movs	r0, #1
 800a1f6:	e7ee      	b.n	800a1d6 <HAL_ADC_Init+0x122>
 800a1f8:	40012300 	.word	0x40012300
 800a1fc:	0f000001 	.word	0x0f000001

0800a200 <HAL_ADC_Start_IT>:
  __IO uint32_t counter = 0;
 800a200:	2300      	movs	r3, #0
{
 800a202:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 800a204:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800a206:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d06a      	beq.n	800a2e4 <HAL_ADC_Start_IT+0xe4>
 800a20e:	2301      	movs	r3, #1
 800a210:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a214:	6803      	ldr	r3, [r0, #0]
 800a216:	689a      	ldr	r2, [r3, #8]
 800a218:	07d2      	lsls	r2, r2, #31
 800a21a:	d50b      	bpl.n	800a234 <HAL_ADC_Start_IT+0x34>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a21c:	689a      	ldr	r2, [r3, #8]
 800a21e:	07d1      	lsls	r1, r2, #31
 800a220:	d41a      	bmi.n	800a258 <HAL_ADC_Start_IT+0x58>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a222:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800a224:	f043 0310 	orr.w	r3, r3, #16
 800a228:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a22a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800a22c:	f043 0301 	orr.w	r3, r3, #1
 800a230:	6443      	str	r3, [r0, #68]	@ 0x44
 800a232:	e054      	b.n	800a2de <HAL_ADC_Start_IT+0xde>
    __HAL_ADC_ENABLE(hadc);
 800a234:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800a236:	492c      	ldr	r1, [pc, #176]	@ (800a2e8 <HAL_ADC_Start_IT+0xe8>)
    __HAL_ADC_ENABLE(hadc);
 800a238:	f042 0201 	orr.w	r2, r2, #1
 800a23c:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800a23e:	4a2b      	ldr	r2, [pc, #172]	@ (800a2ec <HAL_ADC_Start_IT+0xec>)
 800a240:	6812      	ldr	r2, [r2, #0]
 800a242:	fbb2 f2f1 	udiv	r2, r2, r1
 800a246:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 800a24a:	9201      	str	r2, [sp, #4]
    while(counter != 0)
 800a24c:	9a01      	ldr	r2, [sp, #4]
 800a24e:	2a00      	cmp	r2, #0
 800a250:	d0e4      	beq.n	800a21c <HAL_ADC_Start_IT+0x1c>
      counter--;
 800a252:	9a01      	ldr	r2, [sp, #4]
 800a254:	3a01      	subs	r2, #1
 800a256:	e7f8      	b.n	800a24a <HAL_ADC_Start_IT+0x4a>
    ADC_STATE_CLR_SET(hadc->State,
 800a258:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800a25a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a25e:	f022 0201 	bic.w	r2, r2, #1
 800a262:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a266:	6402      	str	r2, [r0, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a268:	685a      	ldr	r2, [r3, #4]
 800a26a:	0552      	lsls	r2, r2, #21
 800a26c:	d505      	bpl.n	800a27a <HAL_ADC_Start_IT+0x7a>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a26e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800a270:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800a274:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a278:	6402      	str	r2, [r0, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a27a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800a27c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a280:	d002      	beq.n	800a288 <HAL_ADC_Start_IT+0x88>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a282:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800a284:	f022 0206 	bic.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800a288:	6442      	str	r2, [r0, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 800a28a:	2200      	movs	r2, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800a28c:	4918      	ldr	r1, [pc, #96]	@ (800a2f0 <HAL_ADC_Start_IT+0xf0>)
    __HAL_UNLOCK(hadc);
 800a28e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a292:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800a296:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800a298:	685a      	ldr	r2, [r3, #4]
 800a29a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800a29e:	f042 0220 	orr.w	r2, r2, #32
 800a2a2:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800a2a4:	684a      	ldr	r2, [r1, #4]
 800a2a6:	06d0      	lsls	r0, r2, #27
 800a2a8:	d108      	bne.n	800a2bc <HAL_ADC_Start_IT+0xbc>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a2aa:	689a      	ldr	r2, [r3, #8]
 800a2ac:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800a2b0:	d115      	bne.n	800a2de <HAL_ADC_Start_IT+0xde>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a2b2:	689a      	ldr	r2, [r3, #8]
 800a2b4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a2b8:	609a      	str	r2, [r3, #8]
 800a2ba:	e010      	b.n	800a2de <HAL_ADC_Start_IT+0xde>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a2bc:	4a0d      	ldr	r2, [pc, #52]	@ (800a2f4 <HAL_ADC_Start_IT+0xf4>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d107      	bne.n	800a2d2 <HAL_ADC_Start_IT+0xd2>
 800a2c2:	689a      	ldr	r2, [r3, #8]
 800a2c4:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800a2c8:	d103      	bne.n	800a2d2 <HAL_ADC_Start_IT+0xd2>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a2ca:	689a      	ldr	r2, [r3, #8]
 800a2cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a2d0:	609a      	str	r2, [r3, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800a2d2:	684a      	ldr	r2, [r1, #4]
 800a2d4:	06d2      	lsls	r2, r2, #27
 800a2d6:	d402      	bmi.n	800a2de <HAL_ADC_Start_IT+0xde>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a2d8:	4a07      	ldr	r2, [pc, #28]	@ (800a2f8 <HAL_ADC_Start_IT+0xf8>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d0e5      	beq.n	800a2aa <HAL_ADC_Start_IT+0xaa>
  return HAL_OK;
 800a2de:	2000      	movs	r0, #0
}
 800a2e0:	b002      	add	sp, #8
 800a2e2:	4770      	bx	lr
  __HAL_LOCK(hadc);
 800a2e4:	2002      	movs	r0, #2
 800a2e6:	e7fb      	b.n	800a2e0 <HAL_ADC_Start_IT+0xe0>
 800a2e8:	000f4240 	.word	0x000f4240
 800a2ec:	20000060 	.word	0x20000060
 800a2f0:	40012300 	.word	0x40012300
 800a2f4:	40012000 	.word	0x40012000
 800a2f8:	40012200 	.word	0x40012200

0800a2fc <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800a2fc:	6803      	ldr	r3, [r0, #0]
 800a2fe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 800a300:	4770      	bx	lr

0800a302 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 800a302:	4770      	bx	lr

0800a304 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 800a304:	4770      	bx	lr

0800a306 <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 800a306:	6803      	ldr	r3, [r0, #0]
{
 800a308:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 800a30a:	681e      	ldr	r6, [r3, #0]
{
 800a30c:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800a30e:	685d      	ldr	r5, [r3, #4]
  if(tmp1 && tmp2)
 800a310:	07b2      	lsls	r2, r6, #30
 800a312:	d52b      	bpl.n	800a36c <HAL_ADC_IRQHandler+0x66>
 800a314:	06a8      	lsls	r0, r5, #26
 800a316:	d529      	bpl.n	800a36c <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a318:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a31a:	06d1      	lsls	r1, r2, #27
 800a31c:	d403      	bmi.n	800a326 <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800a31e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a324:	6422      	str	r2, [r4, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a326:	689a      	ldr	r2, [r3, #8]
 800a328:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800a32c:	d117      	bne.n	800a35e <HAL_ADC_IRQHandler+0x58>
 800a32e:	69a2      	ldr	r2, [r4, #24]
 800a330:	b9aa      	cbnz	r2, 800a35e <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a334:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 800a338:	d002      	beq.n	800a340 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a33a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a33c:	0552      	lsls	r2, r2, #21
 800a33e:	d40e      	bmi.n	800a35e <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a340:	685a      	ldr	r2, [r3, #4]
 800a342:	f022 0220 	bic.w	r2, r2, #32
 800a346:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a348:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a34a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a34e:	6423      	str	r3, [r4, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a350:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a352:	04d8      	lsls	r0, r3, #19
 800a354:	d403      	bmi.n	800a35e <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a356:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a358:	f043 0301 	orr.w	r3, r3, #1
 800a35c:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800a35e:	4620      	mov	r0, r4
 800a360:	f7f9 ff52 	bl	8004208 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	f06f 0212 	mvn.w	r2, #18
 800a36a:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 800a36c:	0771      	lsls	r1, r6, #29
 800a36e:	d533      	bpl.n	800a3d8 <HAL_ADC_IRQHandler+0xd2>
 800a370:	062a      	lsls	r2, r5, #24
 800a372:	d531      	bpl.n	800a3d8 <HAL_ADC_IRQHandler+0xd2>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a374:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a376:	06db      	lsls	r3, r3, #27
 800a378:	d403      	bmi.n	800a382 <HAL_ADC_IRQHandler+0x7c>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a37a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a37c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a380:	6423      	str	r3, [r4, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	689a      	ldr	r2, [r3, #8]
 800a386:	f412 1f40 	tst.w	r2, #3145728	@ 0x300000
 800a38a:	d11e      	bne.n	800a3ca <HAL_ADC_IRQHandler+0xc4>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800a38c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800a38e:	f412 1f40 	tst.w	r2, #3145728	@ 0x300000
 800a392:	d002      	beq.n	800a39a <HAL_ADC_IRQHandler+0x94>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800a394:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800a396:	0550      	lsls	r0, r2, #21
 800a398:	d417      	bmi.n	800a3ca <HAL_ADC_IRQHandler+0xc4>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800a39a:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800a39c:	0551      	lsls	r1, r2, #21
 800a39e:	d414      	bmi.n	800a3ca <HAL_ADC_IRQHandler+0xc4>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800a3a0:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800a3a2:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800a3a6:	d110      	bne.n	800a3ca <HAL_ADC_IRQHandler+0xc4>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800a3a8:	69a2      	ldr	r2, [r4, #24]
 800a3aa:	b972      	cbnz	r2, 800a3ca <HAL_ADC_IRQHandler+0xc4>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800a3ac:	685a      	ldr	r2, [r3, #4]
 800a3ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a3b2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800a3b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a3ba:	6423      	str	r3, [r4, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800a3bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3be:	05da      	lsls	r2, r3, #23
 800a3c0:	d403      	bmi.n	800a3ca <HAL_ADC_IRQHandler+0xc4>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a3c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3c4:	f043 0301 	orr.w	r3, r3, #1
 800a3c8:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f000 f8d8 	bl	800a580 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	f06f 020c 	mvn.w	r2, #12
 800a3d6:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 800a3d8:	07f3      	lsls	r3, r6, #31
 800a3da:	d510      	bpl.n	800a3fe <HAL_ADC_IRQHandler+0xf8>
 800a3dc:	0668      	lsls	r0, r5, #25
 800a3de:	d50e      	bpl.n	800a3fe <HAL_ADC_IRQHandler+0xf8>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	07d9      	lsls	r1, r3, #31
 800a3e6:	d50a      	bpl.n	800a3fe <HAL_ADC_IRQHandler+0xf8>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a3e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a3ea:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a3ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3f0:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a3f2:	f7ff ff86 	bl	800a302 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	f06f 0201 	mvn.w	r2, #1
 800a3fc:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 800a3fe:	06b2      	lsls	r2, r6, #26
 800a400:	d50e      	bpl.n	800a420 <HAL_ADC_IRQHandler+0x11a>
 800a402:	016b      	lsls	r3, r5, #5
 800a404:	d50c      	bpl.n	800a420 <HAL_ADC_IRQHandler+0x11a>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a406:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a408:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 800a40c:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a40e:	f043 0302 	orr.w	r3, r3, #2
 800a412:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800a418:	f7ff ff74 	bl	800a304 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a41c:	6823      	ldr	r3, [r4, #0]
 800a41e:	601d      	str	r5, [r3, #0]
}
 800a420:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a424 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 800a424:	2300      	movs	r3, #0
{
 800a426:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 800a428:	9301      	str	r3, [sp, #4]
{
 800a42a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800a42c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800a430:	2b01      	cmp	r3, #1
 800a432:	f000 8098 	beq.w	800a566 <HAL_ADC_ConfigChannel+0x142>
 800a436:	2301      	movs	r3, #1
 800a438:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800a43c:	6808      	ldr	r0, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	b285      	uxth	r5, r0
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800a442:	2809      	cmp	r0, #9
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800a444:	688e      	ldr	r6, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a446:	eb05 0245 	add.w	r2, r5, r5, lsl #1
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800a44a:	d939      	bls.n	800a4c0 <HAL_ADC_ConfigChannel+0x9c>
 800a44c:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800a450:	d036      	beq.n	800a4c0 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a452:	3a1e      	subs	r2, #30
 800a454:	f04f 0c07 	mov.w	ip, #7
 800a458:	68df      	ldr	r7, [r3, #12]
 800a45a:	fa0c fc02 	lsl.w	ip, ip, r2
 800a45e:	ea27 070c 	bic.w	r7, r7, ip
 800a462:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a464:	4f41      	ldr	r7, [pc, #260]	@ (800a56c <HAL_ADC_ConfigChannel+0x148>)
 800a466:	42b8      	cmp	r0, r7
 800a468:	d125      	bne.n	800a4b6 <HAL_ADC_ConfigChannel+0x92>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800a46a:	68da      	ldr	r2, [r3, #12]
 800a46c:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a470:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7)
 800a472:	6849      	ldr	r1, [r1, #4]
 800a474:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a476:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7)
 800a47a:	d82e      	bhi.n	800a4da <HAL_ADC_ConfigChannel+0xb6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a47c:	3a05      	subs	r2, #5
 800a47e:	261f      	movs	r6, #31
 800a480:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a482:	4096      	lsls	r6, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a484:	fa05 f202 	lsl.w	r2, r5, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a488:	ea21 0106 	bic.w	r1, r1, r6
 800a48c:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a48e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a490:	430a      	orrs	r2, r1
 800a492:	635a      	str	r2, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800a494:	4a36      	ldr	r2, [pc, #216]	@ (800a570 <HAL_ADC_ConfigChannel+0x14c>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d108      	bne.n	800a4ac <HAL_ADC_ConfigChannel+0x88>
 800a49a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800a49e:	d137      	bne.n	800a510 <HAL_ADC_ConfigChannel+0xec>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800a4a0:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 800a4a4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a4a8:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  __HAL_UNLOCK(hadc);
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 800a4b2:	b003      	add	sp, #12
 800a4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a4b6:	68df      	ldr	r7, [r3, #12]
 800a4b8:	fa06 f202 	lsl.w	r2, r6, r2
 800a4bc:	433a      	orrs	r2, r7
 800a4be:	e7d7      	b.n	800a470 <HAL_ADC_ConfigChannel+0x4c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a4c0:	f04f 0c07 	mov.w	ip, #7
 800a4c4:	691f      	ldr	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a4c6:	4096      	lsls	r6, r2
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a4c8:	fa0c fc02 	lsl.w	ip, ip, r2
 800a4cc:	ea27 070c 	bic.w	r7, r7, ip
 800a4d0:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a4d2:	691f      	ldr	r7, [r3, #16]
 800a4d4:	433e      	orrs	r6, r7
 800a4d6:	611e      	str	r6, [r3, #16]
 800a4d8:	e7cb      	b.n	800a472 <HAL_ADC_ConfigChannel+0x4e>
  else if (sConfig->Rank < 13)
 800a4da:	290c      	cmp	r1, #12
 800a4dc:	f04f 011f 	mov.w	r1, #31
 800a4e0:	d80b      	bhi.n	800a4fa <HAL_ADC_ConfigChannel+0xd6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a4e2:	3a23      	subs	r2, #35	@ 0x23
 800a4e4:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 800a4e6:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a4e8:	fa05 f202 	lsl.w	r2, r5, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a4ec:	ea26 0101 	bic.w	r1, r6, r1
 800a4f0:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a4f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a4f4:	430a      	orrs	r2, r1
 800a4f6:	631a      	str	r2, [r3, #48]	@ 0x30
 800a4f8:	e7cc      	b.n	800a494 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a4fa:	3a41      	subs	r2, #65	@ 0x41
 800a4fc:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 800a4fe:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a500:	4095      	lsls	r5, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a502:	ea26 0101 	bic.w	r1, r6, r1
 800a506:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a508:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a50a:	430d      	orrs	r5, r1
 800a50c:	62dd      	str	r5, [r3, #44]	@ 0x2c
 800a50e:	e7c1      	b.n	800a494 <HAL_ADC_ConfigChannel+0x70>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a510:	2812      	cmp	r0, #18
 800a512:	d109      	bne.n	800a528 <HAL_ADC_ConfigChannel+0x104>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800a514:	4b17      	ldr	r3, [pc, #92]	@ (800a574 <HAL_ADC_ConfigChannel+0x150>)
 800a516:	685a      	ldr	r2, [r3, #4]
 800a518:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 800a51c:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 800a51e:	685a      	ldr	r2, [r3, #4]
 800a520:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800a524:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a526:	e7c1      	b.n	800a4ac <HAL_ADC_ConfigChannel+0x88>
 800a528:	4b10      	ldr	r3, [pc, #64]	@ (800a56c <HAL_ADC_ConfigChannel+0x148>)
 800a52a:	4298      	cmp	r0, r3
 800a52c:	d001      	beq.n	800a532 <HAL_ADC_ConfigChannel+0x10e>
 800a52e:	2811      	cmp	r0, #17
 800a530:	d1bc      	bne.n	800a4ac <HAL_ADC_ConfigChannel+0x88>
    ADC->CCR &= ~ADC_CCR_VBATE;
 800a532:	4b10      	ldr	r3, [pc, #64]	@ (800a574 <HAL_ADC_ConfigChannel+0x150>)
 800a534:	685a      	ldr	r2, [r3, #4]
 800a536:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 800a53a:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 800a53c:	685a      	ldr	r2, [r3, #4]
 800a53e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a542:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a544:	4b09      	ldr	r3, [pc, #36]	@ (800a56c <HAL_ADC_ConfigChannel+0x148>)
 800a546:	4298      	cmp	r0, r3
 800a548:	d1b0      	bne.n	800a4ac <HAL_ADC_ConfigChannel+0x88>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800a54a:	4b0b      	ldr	r3, [pc, #44]	@ (800a578 <HAL_ADC_ConfigChannel+0x154>)
 800a54c:	4a0b      	ldr	r2, [pc, #44]	@ (800a57c <HAL_ADC_ConfigChannel+0x158>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	fbb3 f3f2 	udiv	r3, r3, r2
 800a554:	220a      	movs	r2, #10
 800a556:	4353      	muls	r3, r2
        counter--;
 800a558:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800a55a:	9b01      	ldr	r3, [sp, #4]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d0a5      	beq.n	800a4ac <HAL_ADC_ConfigChannel+0x88>
        counter--;
 800a560:	9b01      	ldr	r3, [sp, #4]
 800a562:	3b01      	subs	r3, #1
 800a564:	e7f8      	b.n	800a558 <HAL_ADC_ConfigChannel+0x134>
  __HAL_LOCK(hadc);
 800a566:	2002      	movs	r0, #2
 800a568:	e7a3      	b.n	800a4b2 <HAL_ADC_ConfigChannel+0x8e>
 800a56a:	bf00      	nop
 800a56c:	10000012 	.word	0x10000012
 800a570:	40012000 	.word	0x40012000
 800a574:	40012300 	.word	0x40012300
 800a578:	20000060 	.word	0x20000060
 800a57c:	000f4240 	.word	0x000f4240

0800a580 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800a580:	4770      	bx	lr
	...

0800a584 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a584:	4907      	ldr	r1, [pc, #28]	@ (800a5a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a586:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a588:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a58a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a58e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a592:	0412      	lsls	r2, r2, #16
 800a594:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a59c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800a5a0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a5a2:	4770      	bx	lr
 800a5a4:	e000ed00 	.word	0xe000ed00

0800a5a8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a5a8:	4b16      	ldr	r3, [pc, #88]	@ (800a604 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a5aa:	b530      	push	{r4, r5, lr}
 800a5ac:	68dc      	ldr	r4, [r3, #12]
 800a5ae:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a5b2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a5b6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a5b8:	2b04      	cmp	r3, #4
 800a5ba:	bf28      	it	cs
 800a5bc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a5be:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5c0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a5c4:	bf8c      	ite	hi
 800a5c6:	3c03      	subhi	r4, #3
 800a5c8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5ca:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800a5ce:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a5d0:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5d4:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a5d8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5dc:	fa03 f304 	lsl.w	r3, r3, r4
 800a5e0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5e4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800a5e8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800a5ea:	db06      	blt.n	800a5fa <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5ec:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800a5f0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800a5f4:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a5f8:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5fa:	f000 000f 	and.w	r0, r0, #15
 800a5fe:	4a02      	ldr	r2, [pc, #8]	@ (800a608 <HAL_NVIC_SetPriority+0x60>)
 800a600:	5413      	strb	r3, [r2, r0]
 800a602:	e7f9      	b.n	800a5f8 <HAL_NVIC_SetPriority+0x50>
 800a604:	e000ed00 	.word	0xe000ed00
 800a608:	e000ed14 	.word	0xe000ed14

0800a60c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a60c:	2800      	cmp	r0, #0
 800a60e:	db07      	blt.n	800a620 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a610:	0941      	lsrs	r1, r0, #5
 800a612:	2301      	movs	r3, #1
 800a614:	f000 001f 	and.w	r0, r0, #31
 800a618:	4a02      	ldr	r2, [pc, #8]	@ (800a624 <HAL_NVIC_EnableIRQ+0x18>)
 800a61a:	4083      	lsls	r3, r0
 800a61c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	e000e100 	.word	0xe000e100

0800a628 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a628:	2800      	cmp	r0, #0
 800a62a:	db0c      	blt.n	800a646 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a62c:	0943      	lsrs	r3, r0, #5
 800a62e:	2201      	movs	r2, #1
 800a630:	f000 001f 	and.w	r0, r0, #31
 800a634:	4904      	ldr	r1, [pc, #16]	@ (800a648 <HAL_NVIC_DisableIRQ+0x20>)
 800a636:	3320      	adds	r3, #32
 800a638:	4082      	lsls	r2, r0
 800a63a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a63e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a642:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800a646:	4770      	bx	lr
 800a648:	e000e100 	.word	0xe000e100

0800a64c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800a64c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a650:	4b04      	ldr	r3, [pc, #16]	@ (800a664 <HAL_MPU_Disable+0x18>)
 800a652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a654:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a658:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	e000ed00 	.word	0xe000ed00

0800a668 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800a668:	4b06      	ldr	r3, [pc, #24]	@ (800a684 <HAL_MPU_Enable+0x1c>)
 800a66a:	f040 0001 	orr.w	r0, r0, #1
 800a66e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a672:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a674:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a678:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800a67a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a67e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800a682:	4770      	bx	lr
 800a684:	e000ed00 	.word	0xe000ed00

0800a688 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800a688:	7843      	ldrb	r3, [r0, #1]
 800a68a:	4a14      	ldr	r2, [pc, #80]	@ (800a6dc <HAL_MPU_ConfigRegion+0x54>)
{
 800a68c:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800a68e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != RESET)
 800a692:	7801      	ldrb	r1, [r0, #0]
 800a694:	b1e9      	cbz	r1, 800a6d2 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800a696:	6843      	ldr	r3, [r0, #4]
 800a698:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a69c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a69e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a6a0:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a6a2:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a6a6:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a6a8:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a6aa:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a6ae:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a6b0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a6b4:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a6b6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a6ba:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a6bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a6c0:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a6c2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a6c6:	7a01      	ldrb	r1, [r0, #8]
 800a6c8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a6cc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800a6d0:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800a6d2:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 800a6d6:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
}
 800a6da:	e7f9      	b.n	800a6d0 <HAL_MPU_ConfigRegion+0x48>
 800a6dc:	e000ed00 	.word	0xe000ed00

0800a6e0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a6e0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	b908      	cbnz	r0, 800a6ea <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800a6e6:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800a6e8:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a6ea:	7f43      	ldrb	r3, [r0, #29]
 800a6ec:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a6f0:	b913      	cbnz	r3, 800a6f8 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800a6f2:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800a6f4:	f7f9 fdf2 	bl	80042dc <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a6fc:	7923      	ldrb	r3, [r4, #4]
 800a6fe:	b9e3      	cbnz	r3, 800a73a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	4a13      	ldr	r2, [pc, #76]	@ (800a750 <HAL_CRC_Init+0x70>)
 800a704:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a706:	689a      	ldr	r2, [r3, #8]
 800a708:	f022 0218 	bic.w	r2, r2, #24
 800a70c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a70e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a710:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a712:	b9d2      	cbnz	r2, 800a74a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a714:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a718:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800a71a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a71c:	689a      	ldr	r2, [r3, #8]
 800a71e:	6961      	ldr	r1, [r4, #20]
 800a720:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a724:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a726:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a728:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a72a:	689a      	ldr	r2, [r3, #8]
 800a72c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a730:	430a      	orrs	r2, r1
 800a732:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800a734:	2301      	movs	r3, #1
 800a736:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800a738:	e7d6      	b.n	800a6e8 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a73a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a73e:	4620      	mov	r0, r4
 800a740:	f000 f808 	bl	800a754 <HAL_CRCEx_Polynomial_Set>
 800a744:	2800      	cmp	r0, #0
 800a746:	d0e2      	beq.n	800a70e <HAL_CRC_Init+0x2e>
 800a748:	e7cd      	b.n	800a6e6 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a74a:	6922      	ldr	r2, [r4, #16]
 800a74c:	e7e4      	b.n	800a718 <HAL_CRC_Init+0x38>
 800a74e:	bf00      	nop
 800a750:	04c11db7 	.word	0x04c11db7

0800a754 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a754:	231f      	movs	r3, #31
{
 800a756:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a758:	3b01      	subs	r3, #1
 800a75a:	d31d      	bcc.n	800a798 <HAL_CRCEx_Polynomial_Set+0x44>
 800a75c:	fa21 f403 	lsr.w	r4, r1, r3
 800a760:	07e4      	lsls	r4, r4, #31
 800a762:	d5f9      	bpl.n	800a758 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800a764:	2a10      	cmp	r2, #16
 800a766:	d013      	beq.n	800a790 <HAL_CRCEx_Polynomial_Set+0x3c>
 800a768:	2a10      	cmp	r2, #16
 800a76a:	d804      	bhi.n	800a776 <HAL_CRCEx_Polynomial_Set+0x22>
 800a76c:	b13a      	cbz	r2, 800a77e <HAL_CRCEx_Polynomial_Set+0x2a>
 800a76e:	2a08      	cmp	r2, #8
 800a770:	d010      	beq.n	800a794 <HAL_CRCEx_Polynomial_Set+0x40>
 800a772:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800a774:	e00b      	b.n	800a78e <HAL_CRCEx_Polynomial_Set+0x3a>
  switch (PolyLength)
 800a776:	2a18      	cmp	r2, #24
 800a778:	d1fb      	bne.n	800a772 <HAL_CRCEx_Polynomial_Set+0x1e>
      if (msb >= HAL_CRC_LENGTH_7B)
 800a77a:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 800a77c:	d8f9      	bhi.n	800a772 <HAL_CRCEx_Polynomial_Set+0x1e>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a77e:	6800      	ldr	r0, [r0, #0]
 800a780:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a782:	6883      	ldr	r3, [r0, #8]
 800a784:	f023 0318 	bic.w	r3, r3, #24
 800a788:	4313      	orrs	r3, r2
 800a78a:	6083      	str	r3, [r0, #8]
 800a78c:	2000      	movs	r0, #0
}
 800a78e:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800a790:	2b07      	cmp	r3, #7
 800a792:	e7f3      	b.n	800a77c <HAL_CRCEx_Polynomial_Set+0x28>
      if (msb >= HAL_CRC_LENGTH_16B)
 800a794:	2b0f      	cmp	r3, #15
 800a796:	e7f1      	b.n	800a77c <HAL_CRCEx_Polynomial_Set+0x28>
  switch (PolyLength)
 800a798:	2a10      	cmp	r2, #16
 800a79a:	d1e5      	bne.n	800a768 <HAL_CRCEx_Polynomial_Set+0x14>
 800a79c:	e7e9      	b.n	800a772 <HAL_CRCEx_Polynomial_Set+0x1e>
	...

0800a7a0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a7a0:	6803      	ldr	r3, [r0, #0]
{
 800a7a2:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a7a4:	2018      	movs	r0, #24
 800a7a6:	b2d9      	uxtb	r1, r3
 800a7a8:	3910      	subs	r1, #16
 800a7aa:	fbb1 f0f0 	udiv	r0, r1, r0
{
 800a7ae:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a7b0:	4c05      	ldr	r4, [pc, #20]	@ (800a7c8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800a7b2:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a7b4:	5c20      	ldrb	r0, [r4, r0]
 800a7b6:	65d0      	str	r0, [r2, #92]	@ 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a7b8:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 800a7bc:	f020 0003 	bic.w	r0, r0, #3
 800a7c0:	bf88      	it	hi
 800a7c2:	3004      	addhi	r0, #4
 800a7c4:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800a7c6:	bd10      	pop	{r4, pc}
 800a7c8:	0802e157 	.word	0x0802e157

0800a7cc <HAL_DMA_Init>:
{
 800a7cc:	b570      	push	{r4, r5, r6, lr}
 800a7ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a7d0:	f7ff fc58 	bl	800a084 <HAL_GetTick>
 800a7d4:	4605      	mov	r5, r0
  if(hdma == NULL)
 800a7d6:	2c00      	cmp	r4, #0
 800a7d8:	d060      	beq.n	800a89c <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 800a7da:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 800a7dc:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800a7de:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 800a7e8:	6813      	ldr	r3, [r2, #0]
 800a7ea:	f023 0301 	bic.w	r3, r3, #1
 800a7ee:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a7f0:	6822      	ldr	r2, [r4, #0]
 800a7f2:	6813      	ldr	r3, [r2, #0]
 800a7f4:	07d8      	lsls	r0, r3, #31
 800a7f6:	d42e      	bmi.n	800a856 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 800a7f8:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a7fa:	4832      	ldr	r0, [pc, #200]	@ (800a8c4 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a7fc:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a7fe:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a800:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a804:	432b      	orrs	r3, r5
 800a806:	68e5      	ldr	r5, [r4, #12]
 800a808:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a80a:	6925      	ldr	r5, [r4, #16]
 800a80c:	432b      	orrs	r3, r5
 800a80e:	6965      	ldr	r5, [r4, #20]
 800a810:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a812:	69e5      	ldr	r5, [r4, #28]
 800a814:	430b      	orrs	r3, r1
 800a816:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800a818:	6a25      	ldr	r5, [r4, #32]
 800a81a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a81c:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a81e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a820:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a822:	bf02      	ittt	eq
 800a824:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 800a828:	4335      	orreq	r5, r6
 800a82a:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a82c:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 800a82e:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 800a830:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a832:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800a836:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a83a:	d135      	bne.n	800a8a8 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 800a83c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a83e:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800a840:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a842:	b38d      	cbz	r5, 800a8a8 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a844:	b991      	cbnz	r1, 800a86c <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 800a846:	2801      	cmp	r0, #1
 800a848:	d020      	beq.n	800a88c <HAL_DMA_Init+0xc0>
 800a84a:	f030 0102 	bics.w	r1, r0, #2
 800a84e:	d12b      	bne.n	800a8a8 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a850:	01e9      	lsls	r1, r5, #7
 800a852:	d529      	bpl.n	800a8a8 <HAL_DMA_Init+0xdc>
 800a854:	e01d      	b.n	800a892 <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a856:	f7ff fc15 	bl	800a084 <HAL_GetTick>
 800a85a:	1b40      	subs	r0, r0, r5
 800a85c:	2805      	cmp	r0, #5
 800a85e:	d9c7      	bls.n	800a7f0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a860:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a862:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a864:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a866:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800a86a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a86c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800a870:	d116      	bne.n	800a8a0 <HAL_DMA_Init+0xd4>
    switch (tmp)
 800a872:	2803      	cmp	r0, #3
 800a874:	d818      	bhi.n	800a8a8 <HAL_DMA_Init+0xdc>
 800a876:	a101      	add	r1, pc, #4	@ (adr r1, 800a87c <HAL_DMA_Init+0xb0>)
 800a878:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 800a87c:	0800a893 	.word	0x0800a893
 800a880:	0800a851 	.word	0x0800a851
 800a884:	0800a893 	.word	0x0800a893
 800a888:	0800a88d 	.word	0x0800a88d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a88c:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 800a890:	d10a      	bne.n	800a8a8 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a892:	2340      	movs	r3, #64	@ 0x40
 800a894:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800a896:	2301      	movs	r3, #1
 800a898:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 800a89c:	2001      	movs	r0, #1
 800a89e:	e7e4      	b.n	800a86a <HAL_DMA_Init+0x9e>
    switch (tmp)
 800a8a0:	2802      	cmp	r0, #2
 800a8a2:	d9f6      	bls.n	800a892 <HAL_DMA_Init+0xc6>
 800a8a4:	2803      	cmp	r0, #3
 800a8a6:	d0d3      	beq.n	800a850 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 800a8a8:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f7ff ff78 	bl	800a7a0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8b0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800a8b2:	233f      	movs	r3, #63	@ 0x3f
 800a8b4:	4093      	lsls	r3, r2
 800a8b6:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8b8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800a8ba:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8bc:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800a8be:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 800a8c2:	e7d2      	b.n	800a86a <HAL_DMA_Init+0x9e>
 800a8c4:	e010803f 	.word	0xe010803f

0800a8c8 <HAL_DMA_Start_IT>:
{
 800a8c8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800a8ca:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a8ce:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 800a8d0:	2c01      	cmp	r4, #1
 800a8d2:	d034      	beq.n	800a93e <HAL_DMA_Start_IT+0x76>
 800a8d4:	2401      	movs	r4, #1
 800a8d6:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800a8da:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 800a8de:	2c01      	cmp	r4, #1
 800a8e0:	f04f 0400 	mov.w	r4, #0
 800a8e4:	d129      	bne.n	800a93a <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 800a8e6:	2502      	movs	r5, #2
 800a8e8:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8ec:	6544      	str	r4, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a8ee:	6804      	ldr	r4, [r0, #0]
 800a8f0:	6825      	ldr	r5, [r4, #0]
 800a8f2:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 800a8f6:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800a8f8:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a8fa:	6883      	ldr	r3, [r0, #8]
 800a8fc:	2b40      	cmp	r3, #64	@ 0x40
 800a8fe:	d119      	bne.n	800a934 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 800a900:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800a902:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a904:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800a906:	233f      	movs	r3, #63	@ 0x3f
 800a908:	4093      	lsls	r3, r2
 800a90a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	f043 0316 	orr.w	r3, r3, #22
 800a912:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a914:	6963      	ldr	r3, [r4, #20]
 800a916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a91a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800a91c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800a91e:	b11b      	cbz	r3, 800a928 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	f043 0308 	orr.w	r3, r3, #8
 800a926:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800a928:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a92a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800a92c:	f043 0301 	orr.w	r3, r3, #1
 800a930:	6023      	str	r3, [r4, #0]
}
 800a932:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 800a934:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800a936:	60e2      	str	r2, [r4, #12]
 800a938:	e7e4      	b.n	800a904 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800a93a:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 800a93e:	2002      	movs	r0, #2
 800a940:	e7f7      	b.n	800a932 <HAL_DMA_Start_IT+0x6a>

0800a942 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a942:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800a946:	2b02      	cmp	r3, #2
 800a948:	d003      	beq.n	800a952 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a94a:	2380      	movs	r3, #128	@ 0x80
 800a94c:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 800a94e:	2001      	movs	r0, #1
 800a950:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800a952:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800a954:	2305      	movs	r3, #5
 800a956:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
  return HAL_OK;
 800a95a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800a95c:	6813      	ldr	r3, [r2, #0]
 800a95e:	f023 0301 	bic.w	r3, r3, #1
 800a962:	6013      	str	r3, [r2, #0]
}
 800a964:	4770      	bx	lr
	...

0800a968 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 800a968:	2300      	movs	r3, #0
{
 800a96a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 800a96c:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a96e:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 800a970:	4b5b      	ldr	r3, [pc, #364]	@ (800aae0 <HAL_DMA_IRQHandler+0x178>)
{
 800a972:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a974:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 800a976:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a978:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 800a97a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a97c:	409a      	lsls	r2, r3
 800a97e:	4232      	tst	r2, r6
 800a980:	d00c      	beq.n	800a99c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a982:	6801      	ldr	r1, [r0, #0]
 800a984:	6808      	ldr	r0, [r1, #0]
 800a986:	0740      	lsls	r0, r0, #29
 800a988:	d508      	bpl.n	800a99c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a98a:	6808      	ldr	r0, [r1, #0]
 800a98c:	f020 0004 	bic.w	r0, r0, #4
 800a990:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a992:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a994:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a996:	f042 0201 	orr.w	r2, r2, #1
 800a99a:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a99c:	2201      	movs	r2, #1
 800a99e:	409a      	lsls	r2, r3
 800a9a0:	4232      	tst	r2, r6
 800a9a2:	d008      	beq.n	800a9b6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a9a4:	6821      	ldr	r1, [r4, #0]
 800a9a6:	6949      	ldr	r1, [r1, #20]
 800a9a8:	0609      	lsls	r1, r1, #24
 800a9aa:	d504      	bpl.n	800a9b6 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a9ac:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a9ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a9b0:	f042 0202 	orr.w	r2, r2, #2
 800a9b4:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a9b6:	2204      	movs	r2, #4
 800a9b8:	409a      	lsls	r2, r3
 800a9ba:	4232      	tst	r2, r6
 800a9bc:	d008      	beq.n	800a9d0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a9be:	6821      	ldr	r1, [r4, #0]
 800a9c0:	6809      	ldr	r1, [r1, #0]
 800a9c2:	0788      	lsls	r0, r1, #30
 800a9c4:	d504      	bpl.n	800a9d0 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a9c6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a9c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a9ca:	f042 0204 	orr.w	r2, r2, #4
 800a9ce:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a9d0:	2210      	movs	r2, #16
 800a9d2:	409a      	lsls	r2, r3
 800a9d4:	4232      	tst	r2, r6
 800a9d6:	d010      	beq.n	800a9fa <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a9d8:	6823      	ldr	r3, [r4, #0]
 800a9da:	6819      	ldr	r1, [r3, #0]
 800a9dc:	0709      	lsls	r1, r1, #28
 800a9de:	d50c      	bpl.n	800a9fa <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a9e0:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	0350      	lsls	r0, r2, #13
 800a9e6:	d537      	bpl.n	800aa58 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	0319      	lsls	r1, r3, #12
 800a9ec:	d401      	bmi.n	800a9f2 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800a9ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a9f0:	e000      	b.n	800a9f4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a9f2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800a9f4:	b10b      	cbz	r3, 800a9fa <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a9fa:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800a9fc:	2220      	movs	r2, #32
 800a9fe:	408a      	lsls	r2, r1
 800aa00:	4232      	tst	r2, r6
 800aa02:	d03a      	beq.n	800aa7a <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	6818      	ldr	r0, [r3, #0]
 800aa08:	06c6      	lsls	r6, r0, #27
 800aa0a:	d536      	bpl.n	800aa7a <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800aa0c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800aa0e:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 800aa12:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800aa14:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800aa16:	d127      	bne.n	800aa68 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800aa18:	f022 0216 	bic.w	r2, r2, #22
 800aa1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800aa1e:	695a      	ldr	r2, [r3, #20]
 800aa20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aa24:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aa26:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800aa28:	b90a      	cbnz	r2, 800aa2e <HAL_DMA_IRQHandler+0xc6>
 800aa2a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800aa2c:	b11a      	cbz	r2, 800aa36 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	f022 0208 	bic.w	r2, r2, #8
 800aa34:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aa36:	233f      	movs	r3, #63	@ 0x3f
 800aa38:	408b      	lsls	r3, r1
 800aa3a:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 800aa42:	2300      	movs	r3, #0
 800aa44:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800aa48:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    if(hdma->XferErrorCallback != NULL)
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d045      	beq.n	800aada <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800aa4e:	4620      	mov	r0, r4
}
 800aa50:	b003      	add	sp, #12
 800aa52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800aa56:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	05d2      	lsls	r2, r2, #23
 800aa5c:	d4c7      	bmi.n	800a9ee <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	f022 0208 	bic.w	r2, r2, #8
 800aa64:	601a      	str	r2, [r3, #0]
 800aa66:	e7c2      	b.n	800a9ee <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aa68:	0350      	lsls	r0, r2, #13
 800aa6a:	d527      	bpl.n	800aabc <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	0319      	lsls	r1, r3, #12
 800aa70:	d431      	bmi.n	800aad6 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800aa72:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        if(hdma->XferCpltCallback != NULL)
 800aa74:	b10b      	cbz	r3, 800aa7a <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800aa76:	4620      	mov	r0, r4
 800aa78:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800aa7a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800aa7c:	b36b      	cbz	r3, 800aada <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800aa7e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800aa80:	07da      	lsls	r2, r3, #31
 800aa82:	d519      	bpl.n	800aab8 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 800aa84:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
      __HAL_DMA_DISABLE(hdma);
 800aa88:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800aa8a:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 800aa8e:	2305      	movs	r3, #5
 800aa90:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800aa94:	6813      	ldr	r3, [r2, #0]
 800aa96:	f023 0301 	bic.w	r3, r3, #1
 800aa9a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800aa9c:	9b01      	ldr	r3, [sp, #4]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	42bb      	cmp	r3, r7
 800aaa2:	9301      	str	r3, [sp, #4]
 800aaa4:	d802      	bhi.n	800aaac <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800aaa6:	6813      	ldr	r3, [r2, #0]
 800aaa8:	07db      	lsls	r3, r3, #31
 800aaaa:	d4f7      	bmi.n	800aa9c <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 800aaac:	2301      	movs	r3, #1
 800aaae:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800aab2:	2300      	movs	r3, #0
 800aab4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 800aab8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800aaba:	e7c6      	b.n	800aa4a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 800aac2:	d108      	bne.n	800aad6 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800aac4:	6819      	ldr	r1, [r3, #0]
 800aac6:	f021 0110 	bic.w	r1, r1, #16
 800aaca:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800aacc:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800aace:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800aad2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 800aad6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800aad8:	e7cc      	b.n	800aa74 <HAL_DMA_IRQHandler+0x10c>
}
 800aada:	b003      	add	sp, #12
 800aadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aade:	bf00      	nop
 800aae0:	20000060 	.word	0x20000060

0800aae4 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800aae4:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 800aae6:	4770      	bx	lr

0800aae8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800aae8:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800aaea:	4604      	mov	r4, r0
 800aaec:	b380      	cbz	r0, 800ab50 <HAL_DMA2D_Init+0x68>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800aaee:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 800aaf2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800aaf6:	b91b      	cbnz	r3, 800ab00 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800aaf8:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800aafc:	f7f9 fc04 	bl	8004308 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ab00:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800ab02:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ab04:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800ab10:	430a      	orrs	r2, r1

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800ab12:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800ab14:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800ab16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab18:	f022 0207 	bic.w	r2, r2, #7
 800ab1c:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800ab1e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800ab20:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800ab22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab24:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 800ab28:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800ab2c:	430a      	orrs	r2, r1
 800ab2e:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800ab30:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ab32:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800ab36:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800ab3a:	0552      	lsls	r2, r2, #21
 800ab3c:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800ab40:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800ab42:	430a      	orrs	r2, r1
 800ab44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800ab46:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800ab48:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800ab4a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 800ab4e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ab50:	2001      	movs	r0, #1
 800ab52:	e7fc      	b.n	800ab4e <HAL_DMA2D_Init+0x66>

0800ab54 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 800ab54:	4770      	bx	lr

0800ab56 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800ab56:	4770      	bx	lr

0800ab58 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800ab58:	6803      	ldr	r3, [r0, #0]
{
 800ab5a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800ab5c:	685e      	ldr	r6, [r3, #4]
{
 800ab5e:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800ab60:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800ab62:	07f2      	lsls	r2, r6, #31
 800ab64:	d514      	bpl.n	800ab90 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800ab66:	05e9      	lsls	r1, r5, #23
 800ab68:	d512      	bpl.n	800ab90 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ab70:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800ab72:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800ab74:	f042 0201 	orr.w	r2, r2, #1
 800ab78:	6542      	str	r2, [r0, #84]	@ 0x54
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ab7e:	2304      	movs	r3, #4
 800ab80:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
      __HAL_UNLOCK(hdma2d);
 800ab84:	2300      	movs	r3, #0
 800ab86:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
      if (hdma2d->XferErrorCallback != NULL)
 800ab8a:	69c3      	ldr	r3, [r0, #28]
 800ab8c:	b103      	cbz	r3, 800ab90 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 800ab8e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800ab90:	06b2      	lsls	r2, r6, #26
 800ab92:	d516      	bpl.n	800abc2 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800ab94:	04ab      	lsls	r3, r5, #18
 800ab96:	d514      	bpl.n	800abc2 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aba0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800aba2:	2220      	movs	r2, #32
 800aba4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800aba6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800aba8:	f043 0302 	orr.w	r3, r3, #2
 800abac:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800abae:	2304      	movs	r3, #4
 800abb0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      __HAL_UNLOCK(hdma2d);
 800abb4:	2300      	movs	r3, #0
 800abb6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if (hdma2d->XferErrorCallback != NULL)
 800abba:	69e3      	ldr	r3, [r4, #28]
 800abbc:	b10b      	cbz	r3, 800abc2 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 800abbe:	4620      	mov	r0, r4
 800abc0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800abc2:	0730      	lsls	r0, r6, #28
 800abc4:	d516      	bpl.n	800abf4 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800abc6:	0529      	lsls	r1, r5, #20
 800abc8:	d514      	bpl.n	800abf4 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800abca:	6823      	ldr	r3, [r4, #0]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800abd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800abd4:	2208      	movs	r2, #8
 800abd6:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800abd8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800abda:	f043 0304 	orr.w	r3, r3, #4
 800abde:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800abe0:	2304      	movs	r3, #4
 800abe2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      __HAL_UNLOCK(hdma2d);
 800abe6:	2300      	movs	r3, #0
 800abe8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if (hdma2d->XferErrorCallback != NULL)
 800abec:	69e3      	ldr	r3, [r4, #28]
 800abee:	b10b      	cbz	r3, 800abf4 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 800abf0:	4620      	mov	r0, r4
 800abf2:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800abf4:	0772      	lsls	r2, r6, #29
 800abf6:	d50b      	bpl.n	800ac10 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800abf8:	056b      	lsls	r3, r5, #21
 800abfa:	d509      	bpl.n	800ac10 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800abfc:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800abfe:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac06:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800ac08:	2204      	movs	r2, #4
 800ac0a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800ac0c:	f7ff ffa2 	bl	800ab54 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800ac10:	07b0      	lsls	r0, r6, #30
 800ac12:	d514      	bpl.n	800ac3e <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800ac14:	05a9      	lsls	r1, r5, #22
 800ac16:	d512      	bpl.n	800ac3e <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800ac18:	6823      	ldr	r3, [r4, #0]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ac20:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800ac22:	2202      	movs	r2, #2
 800ac24:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800ac26:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ac28:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      __HAL_UNLOCK(hdma2d);
 800ac30:	2300      	movs	r3, #0
 800ac32:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if (hdma2d->XferCpltCallback != NULL)
 800ac36:	69a3      	ldr	r3, [r4, #24]
 800ac38:	b10b      	cbz	r3, 800ac3e <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800ac3e:	06f2      	lsls	r2, r6, #27
 800ac40:	d513      	bpl.n	800ac6a <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800ac42:	04eb      	lsls	r3, r5, #19
 800ac44:	d511      	bpl.n	800ac6a <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800ac46:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800ac48:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ac50:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800ac52:	2210      	movs	r2, #16
 800ac54:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800ac56:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ac58:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      __HAL_UNLOCK(hdma2d);
 800ac60:	2300      	movs	r3, #0
 800ac62:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800ac66:	f7ff ff76 	bl	800ab56 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800ac6a:	bd70      	pop	{r4, r5, r6, pc}

0800ac6c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800ac6c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800ac6e:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 800ac72:	4602      	mov	r2, r0
 800ac74:	2002      	movs	r0, #2
  __HAL_LOCK(hdma2d);
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d031      	beq.n	800acde <HAL_DMA2D_ConfigLayer+0x72>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ac7a:	f882 0051 	strb.w	r0, [r2, #81]	@ 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800ac7e:	2018      	movs	r0, #24
  __HAL_LOCK(hdma2d);
 800ac80:	2301      	movs	r3, #1
 800ac82:	4e21      	ldr	r6, [pc, #132]	@ (800ad08 <HAL_DMA2D_ConfigLayer+0x9c>)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800ac84:	fb00 2001 	mla	r0, r0, r1, r2
  __HAL_LOCK(hdma2d);
 800ac88:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800ac8c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800ac8e:	e9d0 4509 	ldrd	r4, r5, [r0, #36]	@ 0x24
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800ac92:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800ac94:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800ac98:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 800ac9a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800ac9c:	4323      	orrs	r3, r4
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ac9e:	3c09      	subs	r4, #9
 800aca0:	2c01      	cmp	r4, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800aca2:	ea43 5345 	orr.w	r3, r3, r5, lsl #21
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800aca6:	bf96      	itet	ls
 800aca8:	f000 407f 	andls.w	r0, r0, #4278190080	@ 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800acac:	ea43 6300 	orrhi.w	r3, r3, r0, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800acb0:	4303      	orrls	r3, r0

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800acb2:	6810      	ldr	r0, [r2, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800acb4:	b9a1      	cbnz	r1, 800ace0 <HAL_DMA2D_ConfigLayer+0x74>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800acb6:	6a41      	ldr	r1, [r0, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800acb8:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800acba:	ea01 0106 	and.w	r1, r1, r6
 800acbe:	ea43 0301 	orr.w	r3, r3, r1
 800acc2:	6243      	str	r3, [r0, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800acc4:	6a13      	ldr	r3, [r2, #32]
 800acc6:	6183      	str	r3, [r0, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800acc8:	d803      	bhi.n	800acd2 <HAL_DMA2D_ConfigLayer+0x66>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800acca:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800accc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800acd0:	6283      	str	r3, [r0, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800acd2:	2301      	movs	r3, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800acd4:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800acd6:	f882 3051 	strb.w	r3, [r2, #81]	@ 0x51
  __HAL_UNLOCK(hdma2d);
 800acda:	f882 0050 	strb.w	r0, [r2, #80]	@ 0x50

  return HAL_OK;
}
 800acde:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800ace0:	69c5      	ldr	r5, [r0, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ace2:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800ace4:	ea05 0506 	and.w	r5, r5, r6
 800ace8:	ea43 0305 	orr.w	r3, r3, r5
 800acec:	61c3      	str	r3, [r0, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800acee:	f04f 0318 	mov.w	r3, #24
 800acf2:	fb03 2101 	mla	r1, r3, r1, r2
 800acf6:	6a0b      	ldr	r3, [r1, #32]
 800acf8:	6103      	str	r3, [r0, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800acfa:	d8ea      	bhi.n	800acd2 <HAL_DMA2D_ConfigLayer+0x66>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800acfc:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800acfe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ad02:	6203      	str	r3, [r0, #32]
 800ad04:	e7e5      	b.n	800acd2 <HAL_DMA2D_ConfigLayer+0x66>
 800ad06:	bf00      	nop
 800ad08:	00ccfff0 	.word	0x00ccfff0

0800ad0c <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 800ad0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad10:	4607      	mov	r7, r0
 800ad12:	460d      	mov	r5, r1
 800ad14:	4614      	mov	r4, r2
 800ad16:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800ad18:	f7ff f9b4 	bl	800a084 <HAL_GetTick>
 800ad1c:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800ad22:	07d2      	lsls	r2, r2, #31
 800ad24:	d50a      	bpl.n	800ad3c <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800ad26:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800ad2a:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 800ad2c:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800ad2e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ad32:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800ad36:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 800ad38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800ad3c:	f7ff f9a2 	bl	800a084 <HAL_GetTick>
 800ad40:	eba0 0008 	sub.w	r0, r0, r8
 800ad44:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800ad48:	d9e9      	bls.n	800ad1e <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 800ad4a:	2003      	movs	r0, #3
 800ad4c:	e7f4      	b.n	800ad38 <DSI_ShortWrite.constprop.0+0x2c>

0800ad4e <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ad4e:	7c03      	ldrb	r3, [r0, #16]
{
 800ad50:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d05b      	beq.n	800ae0e <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800ad56:	6803      	ldr	r3, [r0, #0]
 800ad58:	2000      	movs	r0, #0
 800ad5a:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800ad5e:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800ad62:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 800ad64:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800ad66:	d507      	bpl.n	800ad78 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800ad68:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ad6c:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 800ad70:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 800ad74:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800ad78:	0788      	lsls	r0, r1, #30
 800ad7a:	d505      	bpl.n	800ad88 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800ad7c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ad80:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 800ad84:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800ad88:	0748      	lsls	r0, r1, #29
 800ad8a:	d505      	bpl.n	800ad98 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800ad8c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800ad90:	f040 0001 	orr.w	r0, r0, #1
 800ad94:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800ad98:	0708      	lsls	r0, r1, #28
 800ad9a:	d505      	bpl.n	800ada8 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800ad9c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800ada0:	f040 0002 	orr.w	r0, r0, #2
 800ada4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800ada8:	06c8      	lsls	r0, r1, #27
 800adaa:	d505      	bpl.n	800adb8 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800adac:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800adb0:	f040 000c 	orr.w	r0, r0, #12
 800adb4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800adb8:	0688      	lsls	r0, r1, #26
 800adba:	d505      	bpl.n	800adc8 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800adbc:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800adc0:	f040 0010 	orr.w	r0, r0, #16
 800adc4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800adc8:	0648      	lsls	r0, r1, #25
 800adca:	d505      	bpl.n	800add8 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800adcc:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800add0:	f040 0020 	orr.w	r0, r0, #32
 800add4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800add8:	0608      	lsls	r0, r1, #24
 800adda:	d505      	bpl.n	800ade8 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800addc:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800ade0:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 800ade4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800ade8:	05c8      	lsls	r0, r1, #23
 800adea:	d505      	bpl.n	800adf8 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800adec:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800adf0:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800adf4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800adf8:	0589      	lsls	r1, r1, #22
 800adfa:	d505      	bpl.n	800ae08 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800adfc:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 800ae00:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 800ae04:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800ae08:	2000      	movs	r0, #0
 800ae0a:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 800ae0c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800ae0e:	2002      	movs	r0, #2
}
 800ae10:	4770      	bx	lr
	...

0800ae14 <HAL_DSI_Init>:
{
 800ae14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae16:	460d      	mov	r5, r1
  if (hdsi == NULL)
 800ae18:	4604      	mov	r4, r0
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	f000 80a9 	beq.w	800af72 <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800ae20:	7c43      	ldrb	r3, [r0, #17]
 800ae22:	b90b      	cbnz	r3, 800ae28 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 800ae24:	f7f9 fa90 	bl	8004348 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800ae28:	2303      	movs	r3, #3
 800ae2a:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	6823      	ldr	r3, [r4, #0]
 800ae32:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800ae36:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800ae3a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800ae3e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800ae42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800ae4a:	f7ff f91b 	bl	800a084 <HAL_GetTick>
 800ae4e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800ae50:	6822      	ldr	r2, [r4, #0]
 800ae52:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 800ae56:	04d9      	lsls	r1, r3, #19
 800ae58:	d57a      	bpl.n	800af50 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800ae5a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800ae5e:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 800ae62:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 800ae66:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800ae6a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800ae6e:	e9d5 0300 	ldrd	r0, r3, [r5]
 800ae72:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800ae74:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800ae78:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800ae7a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 800ae7e:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800ae80:	430b      	orrs	r3, r1
 800ae82:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800ae86:	2300      	movs	r3, #0
 800ae88:	9301      	str	r3, [sp, #4]
 800ae8a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800ae8e:	f043 0301 	orr.w	r3, r3, #1
 800ae92:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 800ae96:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800ae9a:	f003 0301 	and.w	r3, r3, #1
 800ae9e:	9301      	str	r3, [sp, #4]
 800aea0:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 800aea2:	f7ff f8f5 	bl	800a090 <HAL_Delay>
  tickstart = HAL_GetTick();
 800aea6:	f7ff f8ed 	bl	800a084 <HAL_GetTick>
 800aeaa:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800aeb2:	05d2      	lsls	r2, r2, #23
 800aeb4:	d556      	bpl.n	800af64 <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800aeb6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800aeba:	f246 10a8 	movw	r0, #25000	@ 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800aebe:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800aec0:	f042 0206 	orr.w	r2, r2, #6
 800aec4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800aec8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800aecc:	f022 0203 	bic.w	r2, r2, #3
 800aed0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800aed4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800aed8:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800aeda:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800aedc:	f042 0201 	orr.w	r2, r2, #1
 800aee0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800aee4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800aee8:	f022 0203 	bic.w	r2, r2, #3
 800aeec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800aef0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800aef4:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800aef6:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800aef8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800aefc:	689a      	ldr	r2, [r3, #8]
 800aefe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800af02:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800af04:	689a      	ldr	r2, [r3, #8]
 800af06:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800af08:	491b      	ldr	r1, [pc, #108]	@ (800af78 <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800af0a:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800af0c:	686a      	ldr	r2, [r5, #4]
 800af0e:	2a01      	cmp	r2, #1
 800af10:	bf38      	it	cc
 800af12:	2201      	movcc	r2, #1
 800af14:	434a      	muls	r2, r1
 800af16:	68a9      	ldr	r1, [r5, #8]
 800af18:	f001 0103 	and.w	r1, r1, #3
 800af1c:	408a      	lsls	r2, r1
 800af1e:	6829      	ldr	r1, [r5, #0]
 800af20:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 800af22:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800af24:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800af28:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800af2c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800af30:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800af34:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800af38:	430a      	orrs	r2, r1
 800af3a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 800af3e:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800af42:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 800af46:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800af48:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800af4a:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800af4c:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 800af4e:	e007      	b.n	800af60 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800af50:	f7ff f898 	bl	800a084 <HAL_GetTick>
 800af54:	1b80      	subs	r0, r0, r6
 800af56:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800af5a:	f67f af79 	bls.w	800ae50 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800af5e:	2003      	movs	r0, #3
}
 800af60:	b002      	add	sp, #8
 800af62:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800af64:	f7ff f88e 	bl	800a084 <HAL_GetTick>
 800af68:	1b80      	subs	r0, r0, r6
 800af6a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800af6e:	d99d      	bls.n	800aeac <HAL_DSI_Init+0x98>
 800af70:	e7f5      	b.n	800af5e <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 800af72:	2001      	movs	r0, #1
 800af74:	e7f4      	b.n	800af60 <HAL_DSI_Init+0x14c>
 800af76:	bf00      	nop
 800af78:	003d0900 	.word	0x003d0900

0800af7c <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 800af7c:	4770      	bx	lr

0800af7e <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800af7e:	6803      	ldr	r3, [r0, #0]
 800af80:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800af84:	07d1      	lsls	r1, r2, #31
{
 800af86:	b510      	push	{r4, lr}
 800af88:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800af8a:	d508      	bpl.n	800af9e <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800af8c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800af90:	07d2      	lsls	r2, r2, #31
 800af92:	d504      	bpl.n	800af9e <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800af94:	2201      	movs	r2, #1
 800af96:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800af9a:	f7f6 fa0d 	bl	80013b8 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800afa4:	0791      	lsls	r1, r2, #30
 800afa6:	d509      	bpl.n	800afbc <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800afa8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800afac:	0792      	lsls	r2, r2, #30
 800afae:	d505      	bpl.n	800afbc <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800afb0:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800afb2:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800afb4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800afb8:	f7f6 fa32 	bl	8001420 <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 800afbc:	69a3      	ldr	r3, [r4, #24]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d04e      	beq.n	800b060 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800afc2:	6821      	ldr	r1, [r4, #0]
 800afc4:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800afc8:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 800afcc:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800afce:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800afd2:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 800afd6:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800afd8:	b291      	uxth	r1, r2
 800afda:	b119      	cbz	r1, 800afe4 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800afdc:	6961      	ldr	r1, [r4, #20]
 800afde:	f041 0101 	orr.w	r1, r1, #1
 800afe2:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800afe4:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 800afe8:	d003      	beq.n	800aff2 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800afea:	6962      	ldr	r2, [r4, #20]
 800afec:	f042 0202 	orr.w	r2, r2, #2
 800aff0:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800aff2:	07d8      	lsls	r0, r3, #31
 800aff4:	d503      	bpl.n	800affe <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800aff6:	6962      	ldr	r2, [r4, #20]
 800aff8:	f042 0204 	orr.w	r2, r2, #4
 800affc:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800affe:	0799      	lsls	r1, r3, #30
 800b000:	d503      	bpl.n	800b00a <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800b002:	6962      	ldr	r2, [r4, #20]
 800b004:	f042 0208 	orr.w	r2, r2, #8
 800b008:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800b00a:	f013 0f0c 	tst.w	r3, #12
 800b00e:	d003      	beq.n	800b018 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800b010:	6962      	ldr	r2, [r4, #20]
 800b012:	f042 0210 	orr.w	r2, r2, #16
 800b016:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800b018:	06da      	lsls	r2, r3, #27
 800b01a:	d503      	bpl.n	800b024 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800b01c:	6962      	ldr	r2, [r4, #20]
 800b01e:	f042 0220 	orr.w	r2, r2, #32
 800b022:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800b024:	0698      	lsls	r0, r3, #26
 800b026:	d503      	bpl.n	800b030 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800b028:	6962      	ldr	r2, [r4, #20]
 800b02a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b02e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800b030:	0659      	lsls	r1, r3, #25
 800b032:	d503      	bpl.n	800b03c <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800b034:	6962      	ldr	r2, [r4, #20]
 800b036:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b03a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800b03c:	061a      	lsls	r2, r3, #24
 800b03e:	d503      	bpl.n	800b048 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800b040:	6962      	ldr	r2, [r4, #20]
 800b042:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b046:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800b048:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 800b04c:	d003      	beq.n	800b056 <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800b04e:	6963      	ldr	r3, [r4, #20]
 800b050:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b054:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800b056:	6963      	ldr	r3, [r4, #20]
 800b058:	b113      	cbz	r3, 800b060 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 800b05a:	4620      	mov	r0, r4
 800b05c:	f7ff ff8e 	bl	800af7c <HAL_DSI_ErrorCallback>
}
 800b060:	bd10      	pop	{r4, pc}

0800b062 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b062:	7c02      	ldrb	r2, [r0, #16]
{
 800b064:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800b066:	2a01      	cmp	r2, #1
 800b068:	d00a      	beq.n	800b080 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800b06a:	6802      	ldr	r2, [r0, #0]
 800b06c:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800b06e:	f020 0003 	bic.w	r0, r0, #3
 800b072:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800b074:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800b076:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b078:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800b07a:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 800b07c:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800b07e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b080:	2002      	movs	r0, #2
}
 800b082:	4770      	bx	lr

0800b084 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800b084:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b086:	7c03      	ldrb	r3, [r0, #16]
{
 800b088:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d069      	beq.n	800b162 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800b08e:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800b090:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800b092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b094:	f042 0201 	orr.w	r2, r2, #1
 800b098:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800b09a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800b09e:	f022 0201 	bic.w	r2, r2, #1
 800b0a2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800b0a6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800b0aa:	f042 0201 	orr.w	r2, r2, #1
 800b0ae:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800b0b2:	68da      	ldr	r2, [r3, #12]
 800b0b4:	f022 0203 	bic.w	r2, r2, #3
 800b0b8:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800b0ba:	68da      	ldr	r2, [r3, #12]
 800b0bc:	4302      	orrs	r2, r0
 800b0be:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800b0c0:	695a      	ldr	r2, [r3, #20]
 800b0c2:	f022 0207 	bic.w	r2, r2, #7
 800b0c6:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800b0c8:	6958      	ldr	r0, [r3, #20]
 800b0ca:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800b0ce:	432a      	orrs	r2, r5
 800b0d0:	694d      	ldr	r5, [r1, #20]
 800b0d2:	432a      	orrs	r2, r5
 800b0d4:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800b0d6:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800b0d8:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800b0da:	691a      	ldr	r2, [r3, #16]
 800b0dc:	f022 020f 	bic.w	r2, r2, #15
 800b0e0:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800b0e2:	691a      	ldr	r2, [r3, #16]
 800b0e4:	4302      	orrs	r2, r0
 800b0e6:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800b0e8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800b0ec:	f022 020e 	bic.w	r2, r2, #14
 800b0f0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800b0f4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800b0f8:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800b0fc:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800b0fe:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800b102:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b104:	0c12      	lsrs	r2, r2, #16
 800b106:	0412      	lsls	r2, r2, #16
 800b108:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800b10a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b10c:	4302      	orrs	r2, r0
 800b10e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800b110:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800b114:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800b118:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800b11c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 800b120:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 800b124:	432a      	orrs	r2, r5
 800b126:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800b128:	432a      	orrs	r2, r5
 800b12a:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800b12c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800b12e:	432a      	orrs	r2, r5
 800b130:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b132:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800b134:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800b138:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b13a:	f022 0201 	bic.w	r2, r2, #1
 800b13e:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800b140:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b142:	430a      	orrs	r2, r1
 800b144:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800b146:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800b14a:	f042 0201 	orr.w	r2, r2, #1
 800b14e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800b152:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800b156:	f042 0202 	orr.w	r2, r2, #2
 800b15a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 800b15e:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800b160:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b162:	2002      	movs	r0, #2
 800b164:	e7fc      	b.n	800b160 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

0800b168 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800b168:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b16a:	7c03      	ldrb	r3, [r0, #16]
{
 800b16c:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d029      	beq.n	800b1c6 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800b172:	6800      	ldr	r0, [r0, #0]
 800b174:	4b15      	ldr	r3, [pc, #84]	@ (800b1cc <HAL_DSI_ConfigCommand+0x64>)
 800b176:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800b178:	4023      	ands	r3, r4
 800b17a:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800b17c:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800b17e:	e9d1 3500 	ldrd	r3, r5, [r1]
 800b182:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 800b184:	688d      	ldr	r5, [r1, #8]
 800b186:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800b188:	68cd      	ldr	r5, [r1, #12]
 800b18a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800b18c:	690d      	ldr	r5, [r1, #16]
 800b18e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800b190:	694d      	ldr	r5, [r1, #20]
 800b192:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 800b194:	698d      	ldr	r5, [r1, #24]
 800b196:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800b198:	69cd      	ldr	r5, [r1, #28]
 800b19a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800b19c:	6a0d      	ldr	r5, [r1, #32]
 800b19e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800b1a0:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800b1a2:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 800b1a4:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800b1a6:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800b1a8:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800b1aa:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 800b1ac:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800b1ae:	4323      	orrs	r3, r4
 800b1b0:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800b1b2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800b1b4:	f023 0302 	bic.w	r3, r3, #2
 800b1b8:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800b1ba:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800b1bc:	430b      	orrs	r3, r1
 800b1be:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 800b1c4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b1c6:	2002      	movs	r0, #2
 800b1c8:	e7fc      	b.n	800b1c4 <HAL_DSI_ConfigCommand+0x5c>
 800b1ca:	bf00      	nop
 800b1cc:	fef080ff 	.word	0xfef080ff

0800b1d0 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b1d0:	7c02      	ldrb	r2, [r0, #16]
{
 800b1d2:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800b1d4:	2a01      	cmp	r2, #1
 800b1d6:	d00a      	beq.n	800b1ee <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800b1d8:	6802      	ldr	r2, [r0, #0]
 800b1da:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800b1dc:	f020 001f 	bic.w	r0, r0, #31
 800b1e0:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800b1e2:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800b1e4:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b1e6:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 800b1e8:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 800b1ea:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800b1ec:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b1ee:	2002      	movs	r0, #2
}
 800b1f0:	4770      	bx	lr

0800b1f2 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800b1f2:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b1f4:	7c03      	ldrb	r3, [r0, #16]
{
 800b1f6:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d034      	beq.n	800b266 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800b1fc:	e9d1 0300 	ldrd	r0, r3, [r1]
 800b200:	4298      	cmp	r0, r3
 800b202:	bf38      	it	cc
 800b204:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800b206:	6823      	ldr	r3, [r4, #0]
 800b208:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800b20c:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 800b210:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800b214:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800b218:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800b21c:	4302      	orrs	r2, r0
 800b21e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800b222:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800b226:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800b22a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b22e:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800b232:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800b236:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b238:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800b23c:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800b23e:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b240:	432a      	orrs	r2, r5
 800b242:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b244:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b246:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800b24a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800b24e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800b252:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800b256:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800b25a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b25e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 800b262:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800b264:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b266:	2002      	movs	r0, #2
 800b268:	e7fc      	b.n	800b264 <HAL_DSI_ConfigPhyTimer+0x72>
	...

0800b26c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800b26c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b26e:	7c03      	ldrb	r3, [r0, #16]
{
 800b270:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800b272:	2b01      	cmp	r3, #1
 800b274:	d05b      	beq.n	800b32e <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800b276:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800b278:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800b27a:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800b27c:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800b27e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800b282:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800b284:	689a      	ldr	r2, [r3, #8]
 800b286:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800b28a:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800b28c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800b28e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800b290:	b292      	uxth	r2, r2
 800b292:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800b294:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800b296:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800b29a:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800b29c:	4a25      	ldr	r2, [pc, #148]	@ (800b334 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800b29e:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800b2a0:	4010      	ands	r0, r2
 800b2a2:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800b2a4:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800b2a6:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800b2a8:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800b2aa:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800b2ac:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b2ae:	4010      	ands	r0, r2
 800b2b0:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800b2b2:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b2b4:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800b2b6:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800b2b8:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800b2ba:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b2be:	4010      	ands	r0, r2
 800b2c0:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800b2c4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b2c8:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800b2ca:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800b2cc:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800b2d0:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b2d4:	4010      	ands	r0, r2
 800b2d6:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800b2da:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b2de:	4328      	orrs	r0, r5
 800b2e0:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800b2e4:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b2e8:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 800b2ec:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800b2f0:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800b2f4:	698d      	ldr	r5, [r1, #24]
 800b2f6:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800b2f8:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800b2fa:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800b2fc:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800b300:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800b304:	4010      	ands	r0, r2
 800b306:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800b30a:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800b30e:	4328      	orrs	r0, r5
 800b310:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800b314:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 800b318:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b31a:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800b31c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800b320:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800b324:	430a      	orrs	r2, r1
 800b326:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 800b32a:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 800b32c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b32e:	2002      	movs	r0, #2
 800b330:	e7fc      	b.n	800b32c <HAL_DSI_ConfigHostTimeouts+0xc0>
 800b332:	bf00      	nop
 800b334:	ffff0000 	.word	0xffff0000

0800b338 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b338:	7c03      	ldrb	r3, [r0, #16]
{
 800b33a:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d01c      	beq.n	800b37a <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800b340:	6802      	ldr	r2, [r0, #0]
 800b342:	2300      	movs	r3, #0
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	6851      	ldr	r1, [r2, #4]
 800b348:	f041 0101 	orr.w	r1, r1, #1
 800b34c:	6051      	str	r1, [r2, #4]
 800b34e:	6851      	ldr	r1, [r2, #4]
 800b350:	f001 0101 	and.w	r1, r1, #1
 800b354:	9100      	str	r1, [sp, #0]
 800b356:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800b358:	9301      	str	r3, [sp, #4]
 800b35a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 800b35e:	f041 0108 	orr.w	r1, r1, #8
 800b362:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 800b366:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b36a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b36c:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800b36e:	f002 0208 	and.w	r2, r2, #8
 800b372:	9201      	str	r2, [sp, #4]
 800b374:	9a01      	ldr	r2, [sp, #4]
}
 800b376:	b002      	add	sp, #8
 800b378:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b37a:	2002      	movs	r0, #2
 800b37c:	e7fb      	b.n	800b376 <HAL_DSI_Start+0x3e>

0800b37e <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b37e:	7c02      	ldrb	r2, [r0, #16]
{
 800b380:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800b382:	2a01      	cmp	r2, #1
 800b384:	d009      	beq.n	800b39a <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800b386:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b388:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800b38a:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 800b38e:	f042 0204 	orr.w	r2, r2, #4
 800b392:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 800b396:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800b398:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b39a:	2002      	movs	r0, #2
}
 800b39c:	4770      	bx	lr

0800b39e <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800b39e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b3a0:	7c05      	ldrb	r5, [r0, #16]
{
 800b3a2:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800b3a4:	2d01      	cmp	r5, #1
 800b3a6:	d009      	beq.n	800b3bc <HAL_DSI_ShortWrite+0x1e>
 800b3a8:	2501      	movs	r5, #1
 800b3aa:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800b3ac:	9d06      	ldr	r5, [sp, #24]
 800b3ae:	9500      	str	r5, [sp, #0]
 800b3b0:	f7ff fcac 	bl	800ad0c <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	7423      	strb	r3, [r4, #16]

  return status;
}
 800b3b8:	b003      	add	sp, #12
 800b3ba:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b3bc:	2002      	movs	r0, #2
 800b3be:	e7fb      	b.n	800b3b8 <HAL_DSI_ShortWrite+0x1a>

0800b3c0 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800b3c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c4:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b3c6:	7c03      	ldrb	r3, [r0, #16]
{
 800b3c8:	4606      	mov	r6, r0
 800b3ca:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 800b3cc:	2b01      	cmp	r3, #1
{
 800b3ce:	4615      	mov	r5, r2
 800b3d0:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 800b3d4:	d052      	beq.n	800b47c <HAL_DSI_LongWrite+0xbc>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800b3da:	f7fe fe53 	bl	800a084 <HAL_GetTick>
 800b3de:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b3e0:	6832      	ldr	r2, [r6, #0]
 800b3e2:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800b3e4:	f013 0a01 	ands.w	sl, r3, #1
 800b3e8:	d019      	beq.n	800b41e <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800b3ea:	2c03      	cmp	r4, #3
 800b3ec:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800b3ee:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800b3f2:	bf28      	it	cs
 800b3f4:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 800b3f6:	4283      	cmp	r3, r0
 800b3f8:	d11d      	bne.n	800b436 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800b3fa:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 800b3fc:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 800b3fe:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800b402:	bb10      	cbnz	r0, 800b44a <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800b404:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b406:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 800b40a:	0223      	lsls	r3, r4, #8
 800b40c:	0224      	lsls	r4, r4, #8
 800b40e:	b29b      	uxth	r3, r3
 800b410:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 800b414:	431d      	orrs	r5, r3
 800b416:	4325      	orrs	r5, r4
 800b418:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b41a:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 800b41c:	e009      	b.n	800b432 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b41e:	f7fe fe31 	bl	800a084 <HAL_GetTick>
 800b422:	eba0 000b 	sub.w	r0, r0, fp
 800b426:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b42a:	d9d9      	bls.n	800b3e0 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 800b42c:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800b42e:	f886 a010 	strb.w	sl, [r6, #16]
}
 800b432:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800b436:	f818 1003 	ldrb.w	r1, [r8, r3]
 800b43a:	3301      	adds	r3, #1
 800b43c:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 800b440:	fa01 f10c 	lsl.w	r1, r1, ip
 800b444:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 800b448:	e7d5      	b.n	800b3f6 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800b44a:	2804      	cmp	r0, #4
    fifoword = 0U;
 800b44c:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800b450:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 800b452:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800b454:	bf28      	it	cs
 800b456:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b45a:	f813 8001 	ldrb.w	r8, [r3, r1]
 800b45e:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800b462:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b464:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800b468:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800b46a:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800b46e:	d1f4      	bne.n	800b45a <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 800b470:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 800b474:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 800b476:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 800b47a:	e7c2      	b.n	800b402 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 800b47c:	2002      	movs	r0, #2
 800b47e:	e7d8      	b.n	800b432 <HAL_DSI_LongWrite+0x72>

0800b480 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b480:	7c02      	ldrb	r2, [r0, #16]
{
 800b482:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800b484:	2a01      	cmp	r2, #1
 800b486:	d00f      	beq.n	800b4a8 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800b488:	6802      	ldr	r2, [r0, #0]
 800b48a:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 800b48e:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 800b492:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800b496:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 800b49a:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b49e:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800b4a0:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 800b4a4:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800b4a6:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b4a8:	2002      	movs	r0, #2
}
 800b4aa:	4770      	bx	lr

0800b4ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b4ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800b4b0:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b4b2:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 800b670 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b4b6:	4a6c      	ldr	r2, [pc, #432]	@ (800b668 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 800b4b8:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b4ba:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800b4bc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b4be:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 800b4c2:	43ac      	bics	r4, r5
 800b4c4:	f040 80b7 	bne.w	800b636 <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b4c8:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b4ca:	2703      	movs	r7, #3
 800b4cc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b4d0:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b4d4:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b4d8:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b4da:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b4de:	2f01      	cmp	r7, #1
 800b4e0:	d834      	bhi.n	800b54c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800b4e2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b4e4:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 800b4e8:	68cf      	ldr	r7, [r1, #12]
 800b4ea:	fa07 f70e 	lsl.w	r7, r7, lr
 800b4ee:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 800b4f2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800b4f4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b4f6:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b4fa:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800b4fe:	409f      	lsls	r7, r3
 800b500:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800b504:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800b506:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b508:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b50a:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b50e:	688f      	ldr	r7, [r1, #8]
 800b510:	fa07 f70e 	lsl.w	r7, r7, lr
 800b514:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 800b518:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b51a:	d119      	bne.n	800b550 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 800b51c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b520:	f003 0a07 	and.w	sl, r3, #7
 800b524:	f04f 0b0f 	mov.w	fp, #15
 800b528:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800b52c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800b530:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b534:	fa0b fb0a 	lsl.w	fp, fp, sl
 800b538:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b53c:	690f      	ldr	r7, [r1, #16]
 800b53e:	fa07 f70a 	lsl.w	r7, r7, sl
 800b542:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 800b546:	f8c8 7020 	str.w	r7, [r8, #32]
 800b54a:	e001      	b.n	800b550 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b54c:	2c03      	cmp	r4, #3
 800b54e:	d1da      	bne.n	800b506 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800b550:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b552:	fa04 f40e 	lsl.w	r4, r4, lr
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b556:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b55a:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b55e:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 800b562:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b564:	d067      	beq.n	800b636 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b566:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 800b56a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b56e:	f003 0c03 	and.w	ip, r3, #3
 800b572:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b576:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800b57a:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b57e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b582:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 800b586:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 800b58a:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b58e:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b592:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 800b596:	9401      	str	r4, [sp, #4]
 800b598:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800b59a:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b59c:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b5a0:	4c32      	ldr	r4, [pc, #200]	@ (800b66c <HAL_GPIO_Init+0x1c0>)
 800b5a2:	42a0      	cmp	r0, r4
 800b5a4:	d04e      	beq.n	800b644 <HAL_GPIO_Init+0x198>
 800b5a6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800b5aa:	42a0      	cmp	r0, r4
 800b5ac:	d04c      	beq.n	800b648 <HAL_GPIO_Init+0x19c>
 800b5ae:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800b5b2:	42a0      	cmp	r0, r4
 800b5b4:	d04a      	beq.n	800b64c <HAL_GPIO_Init+0x1a0>
 800b5b6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800b5ba:	42a0      	cmp	r0, r4
 800b5bc:	d048      	beq.n	800b650 <HAL_GPIO_Init+0x1a4>
 800b5be:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800b5c2:	42a0      	cmp	r0, r4
 800b5c4:	d046      	beq.n	800b654 <HAL_GPIO_Init+0x1a8>
 800b5c6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800b5ca:	42a0      	cmp	r0, r4
 800b5cc:	d044      	beq.n	800b658 <HAL_GPIO_Init+0x1ac>
 800b5ce:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800b5d2:	42a0      	cmp	r0, r4
 800b5d4:	d042      	beq.n	800b65c <HAL_GPIO_Init+0x1b0>
 800b5d6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800b5da:	42a0      	cmp	r0, r4
 800b5dc:	d040      	beq.n	800b660 <HAL_GPIO_Init+0x1b4>
 800b5de:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800b5e2:	42a0      	cmp	r0, r4
 800b5e4:	d03e      	beq.n	800b664 <HAL_GPIO_Init+0x1b8>
 800b5e6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800b5ea:	42a0      	cmp	r0, r4
 800b5ec:	bf14      	ite	ne
 800b5ee:	240a      	movne	r4, #10
 800b5f0:	2409      	moveq	r4, #9
 800b5f2:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b5f6:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b5fa:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800b5fe:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800b600:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 800b604:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800b606:	bf0c      	ite	eq
 800b608:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800b60a:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b60c:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 800b610:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 800b612:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800b614:	bf0c      	ite	eq
 800b616:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800b618:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b61a:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 800b61e:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800b620:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800b622:	bf0c      	ite	eq
 800b624:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800b626:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b628:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 800b62a:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 800b62c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800b62e:	bf54      	ite	pl
 800b630:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800b632:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 800b634:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b636:	3301      	adds	r3, #1
 800b638:	2b10      	cmp	r3, #16
 800b63a:	f47f af3d 	bne.w	800b4b8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800b63e:	b003      	add	sp, #12
 800b640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b644:	2400      	movs	r4, #0
 800b646:	e7d4      	b.n	800b5f2 <HAL_GPIO_Init+0x146>
 800b648:	2401      	movs	r4, #1
 800b64a:	e7d2      	b.n	800b5f2 <HAL_GPIO_Init+0x146>
 800b64c:	2402      	movs	r4, #2
 800b64e:	e7d0      	b.n	800b5f2 <HAL_GPIO_Init+0x146>
 800b650:	2403      	movs	r4, #3
 800b652:	e7ce      	b.n	800b5f2 <HAL_GPIO_Init+0x146>
 800b654:	2404      	movs	r4, #4
 800b656:	e7cc      	b.n	800b5f2 <HAL_GPIO_Init+0x146>
 800b658:	2405      	movs	r4, #5
 800b65a:	e7ca      	b.n	800b5f2 <HAL_GPIO_Init+0x146>
 800b65c:	2406      	movs	r4, #6
 800b65e:	e7c8      	b.n	800b5f2 <HAL_GPIO_Init+0x146>
 800b660:	2407      	movs	r4, #7
 800b662:	e7c6      	b.n	800b5f2 <HAL_GPIO_Init+0x146>
 800b664:	2408      	movs	r4, #8
 800b666:	e7c4      	b.n	800b5f2 <HAL_GPIO_Init+0x146>
 800b668:	40013c00 	.word	0x40013c00
 800b66c:	40020000 	.word	0x40020000
 800b670:	40023800 	.word	0x40023800

0800b674 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800b678:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800b67a:	f04f 0a01 	mov.w	sl, #1

    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b67e:	f04f 080f 	mov.w	r8, #15
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b682:	f04f 0b03 	mov.w	fp, #3
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b686:	4c46      	ldr	r4, [pc, #280]	@ (800b7a0 <HAL_GPIO_DeInit+0x12c>)
    ioposition = ((uint32_t)0x01) << position;
 800b688:	fa0a fc02 	lsl.w	ip, sl, r2
    if(iocurrent == ioposition)
 800b68c:	ea3c 0301 	bics.w	r3, ip, r1
    iocurrent = (GPIO_Pin) & ioposition;
 800b690:	ea0c 0601 	and.w	r6, ip, r1
    if(iocurrent == ioposition)
 800b694:	d16c      	bne.n	800b770 <HAL_GPIO_DeInit+0xfc>
      tmp = SYSCFG->EXTICR[position >> 2];
 800b696:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b69a:	f002 0703 	and.w	r7, r2, #3
 800b69e:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 800b6a2:	00bf      	lsls	r7, r7, #2
 800b6a4:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 800b6a8:	fa08 f907 	lsl.w	r9, r8, r7
      tmp = SYSCFG->EXTICR[position >> 2];
 800b6ac:	68ab      	ldr	r3, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b6ae:	ea09 0e03 	and.w	lr, r9, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b6b2:	4b3c      	ldr	r3, [pc, #240]	@ (800b7a4 <HAL_GPIO_DeInit+0x130>)
 800b6b4:	4298      	cmp	r0, r3
 800b6b6:	d060      	beq.n	800b77a <HAL_GPIO_DeInit+0x106>
 800b6b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b6bc:	4298      	cmp	r0, r3
 800b6be:	d05e      	beq.n	800b77e <HAL_GPIO_DeInit+0x10a>
 800b6c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b6c4:	4298      	cmp	r0, r3
 800b6c6:	d05c      	beq.n	800b782 <HAL_GPIO_DeInit+0x10e>
 800b6c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b6cc:	4298      	cmp	r0, r3
 800b6ce:	d05a      	beq.n	800b786 <HAL_GPIO_DeInit+0x112>
 800b6d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b6d4:	4298      	cmp	r0, r3
 800b6d6:	d058      	beq.n	800b78a <HAL_GPIO_DeInit+0x116>
 800b6d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b6dc:	4298      	cmp	r0, r3
 800b6de:	d056      	beq.n	800b78e <HAL_GPIO_DeInit+0x11a>
 800b6e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b6e4:	4298      	cmp	r0, r3
 800b6e6:	d054      	beq.n	800b792 <HAL_GPIO_DeInit+0x11e>
 800b6e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b6ec:	4298      	cmp	r0, r3
 800b6ee:	d052      	beq.n	800b796 <HAL_GPIO_DeInit+0x122>
 800b6f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b6f4:	4298      	cmp	r0, r3
 800b6f6:	d050      	beq.n	800b79a <HAL_GPIO_DeInit+0x126>
 800b6f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b6fc:	4298      	cmp	r0, r3
 800b6fe:	bf0c      	ite	eq
 800b700:	2309      	moveq	r3, #9
 800b702:	230a      	movne	r3, #10
 800b704:	40bb      	lsls	r3, r7
 800b706:	4573      	cmp	r3, lr
 800b708:	d113      	bne.n	800b732 <HAL_GPIO_DeInit+0xbe>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b70a:	6823      	ldr	r3, [r4, #0]
 800b70c:	ea23 0306 	bic.w	r3, r3, r6
 800b710:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b712:	6863      	ldr	r3, [r4, #4]
 800b714:	ea23 0306 	bic.w	r3, r3, r6
 800b718:	6063      	str	r3, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b71a:	68e3      	ldr	r3, [r4, #12]
 800b71c:	ea23 0306 	bic.w	r3, r3, r6
 800b720:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b722:	68a3      	ldr	r3, [r4, #8]
 800b724:	ea23 0306 	bic.w	r3, r3, r6
 800b728:	60a3      	str	r3, [r4, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800b72a:	68ab      	ldr	r3, [r5, #8]
 800b72c:	ea23 0309 	bic.w	r3, r3, r9
 800b730:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b732:	0053      	lsls	r3, r2, #1
 800b734:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b736:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b738:	fa0b f303 	lsl.w	r3, fp, r3
 800b73c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800b740:	ea25 0503 	bic.w	r5, r5, r3
 800b744:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b746:	f002 0507 	and.w	r5, r2, #7
 800b74a:	6a37      	ldr	r7, [r6, #32]
 800b74c:	00ad      	lsls	r5, r5, #2
 800b74e:	fa08 f505 	lsl.w	r5, r8, r5
 800b752:	ea27 0705 	bic.w	r7, r7, r5
 800b756:	6237      	str	r7, [r6, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b758:	68c5      	ldr	r5, [r0, #12]
 800b75a:	ea25 0503 	bic.w	r5, r5, r3
 800b75e:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b760:	6845      	ldr	r5, [r0, #4]
 800b762:	ea25 050c 	bic.w	r5, r5, ip
 800b766:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b768:	6885      	ldr	r5, [r0, #8]
 800b76a:	ea25 0303 	bic.w	r3, r5, r3
 800b76e:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b770:	3201      	adds	r2, #1
 800b772:	2a10      	cmp	r2, #16
 800b774:	d188      	bne.n	800b688 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 800b776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b77a:	2300      	movs	r3, #0
 800b77c:	e7c2      	b.n	800b704 <HAL_GPIO_DeInit+0x90>
 800b77e:	2301      	movs	r3, #1
 800b780:	e7c0      	b.n	800b704 <HAL_GPIO_DeInit+0x90>
 800b782:	2302      	movs	r3, #2
 800b784:	e7be      	b.n	800b704 <HAL_GPIO_DeInit+0x90>
 800b786:	2303      	movs	r3, #3
 800b788:	e7bc      	b.n	800b704 <HAL_GPIO_DeInit+0x90>
 800b78a:	2304      	movs	r3, #4
 800b78c:	e7ba      	b.n	800b704 <HAL_GPIO_DeInit+0x90>
 800b78e:	2305      	movs	r3, #5
 800b790:	e7b8      	b.n	800b704 <HAL_GPIO_DeInit+0x90>
 800b792:	2306      	movs	r3, #6
 800b794:	e7b6      	b.n	800b704 <HAL_GPIO_DeInit+0x90>
 800b796:	2307      	movs	r3, #7
 800b798:	e7b4      	b.n	800b704 <HAL_GPIO_DeInit+0x90>
 800b79a:	2308      	movs	r3, #8
 800b79c:	e7b2      	b.n	800b704 <HAL_GPIO_DeInit+0x90>
 800b79e:	bf00      	nop
 800b7a0:	40013c00 	.word	0x40013c00
 800b7a4:	40020000 	.word	0x40020000

0800b7a8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b7a8:	6903      	ldr	r3, [r0, #16]
 800b7aa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800b7ac:	bf14      	ite	ne
 800b7ae:	2001      	movne	r0, #1
 800b7b0:	2000      	moveq	r0, #0
 800b7b2:	4770      	bx	lr

0800b7b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b7b4:	b10a      	cbz	r2, 800b7ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b7b6:	6181      	str	r1, [r0, #24]
  }
}
 800b7b8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b7ba:	0409      	lsls	r1, r1, #16
 800b7bc:	e7fb      	b.n	800b7b6 <HAL_GPIO_WritePin+0x2>

0800b7be <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b7be:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b7c0:	ea01 0203 	and.w	r2, r1, r3
 800b7c4:	ea21 0103 	bic.w	r1, r1, r3
 800b7c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b7cc:	6181      	str	r1, [r0, #24]
}
 800b7ce:	4770      	bx	lr

0800b7d0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b7d0:	6803      	ldr	r3, [r0, #0]
 800b7d2:	699a      	ldr	r2, [r3, #24]
 800b7d4:	0791      	lsls	r1, r2, #30
 800b7d6:	d501      	bpl.n	800b7dc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b7d8:	2200      	movs	r2, #0
 800b7da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b7dc:	699a      	ldr	r2, [r3, #24]
 800b7de:	07d2      	lsls	r2, r2, #31
 800b7e0:	d403      	bmi.n	800b7ea <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b7e2:	699a      	ldr	r2, [r3, #24]
 800b7e4:	f042 0201 	orr.w	r2, r2, #1
 800b7e8:	619a      	str	r2, [r3, #24]
  }
}
 800b7ea:	4770      	bx	lr

0800b7ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b7ec:	b530      	push	{r4, r5, lr}
 800b7ee:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b7f0:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b7f4:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b7f6:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800b7f8:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b7fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800b7fe:	4a05      	ldr	r2, [pc, #20]	@ (800b814 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b800:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800b802:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b806:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800b80a:	ea20 0002 	bic.w	r0, r0, r2
 800b80e:	4303      	orrs	r3, r0
 800b810:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b812:	bd30      	pop	{r4, r5, pc}
 800b814:	03ff63ff 	.word	0x03ff63ff

0800b818 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800b818:	6803      	ldr	r3, [r0, #0]
{
 800b81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800b81e:	699c      	ldr	r4, [r3, #24]
{
 800b820:	4605      	mov	r5, r0
 800b822:	460f      	mov	r7, r1
 800b824:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b826:	f014 0410 	ands.w	r4, r4, #16
 800b82a:	d06f      	beq.n	800b90c <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 800b82c:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b82e:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800b830:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b832:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	699a      	ldr	r2, [r3, #24]
 800b838:	0690      	lsls	r0, r2, #26
 800b83a:	d461      	bmi.n	800b900 <I2C_IsErrorOccurred+0xe8>
 800b83c:	f1b8 0f00 	cmp.w	r8, #0
 800b840:	d035      	beq.n	800b8ae <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800b842:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800b846:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800b848:	682e      	ldr	r6, [r5, #0]
 800b84a:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b84c:	05d9      	lsls	r1, r3, #23
 800b84e:	d505      	bpl.n	800b85c <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b850:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800b854:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800b858:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b85a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b85c:	055a      	lsls	r2, r3, #21
 800b85e:	d505      	bpl.n	800b86c <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b860:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800b864:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800b868:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b86a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b86c:	059b      	lsls	r3, r3, #22
 800b86e:	d54f      	bpl.n	800b910 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b870:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800b874:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b878:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800b87a:	4628      	mov	r0, r5
 800b87c:	f7ff ffa8 	bl	800b7d0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800b880:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800b882:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800b884:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800b888:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800b88c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800b890:	f023 0301 	bic.w	r3, r3, #1
 800b894:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800b896:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800b898:	4323      	orrs	r3, r4
 800b89a:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b89c:	2320      	movs	r3, #32
 800b89e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800b8a8:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800b8ac:	e032      	b.n	800b914 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800b8ae:	1c7a      	adds	r2, r7, #1
 800b8b0:	d0c1      	beq.n	800b836 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b8b2:	f7fe fbe7 	bl	800a084 <HAL_GetTick>
 800b8b6:	1b80      	subs	r0, r0, r6
 800b8b8:	42b8      	cmp	r0, r7
 800b8ba:	d801      	bhi.n	800b8c0 <I2C_IsErrorOccurred+0xa8>
 800b8bc:	2f00      	cmp	r7, #0
 800b8be:	d1b9      	bne.n	800b834 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b8c0:	682b      	ldr	r3, [r5, #0]
 800b8c2:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800b8c4:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b8c8:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800b8ca:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b8cc:	0400      	lsls	r0, r0, #16
 800b8ce:	d50a      	bpl.n	800b8e6 <I2C_IsErrorOccurred+0xce>
 800b8d0:	0449      	lsls	r1, r1, #17
 800b8d2:	d408      	bmi.n	800b8e6 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 800b8d4:	2a20      	cmp	r2, #32
 800b8d6:	d006      	beq.n	800b8e6 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b8d8:	685a      	ldr	r2, [r3, #4]
 800b8da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b8de:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800b8e0:	f7fe fbd0 	bl	800a084 <HAL_GetTick>
 800b8e4:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b8e6:	682b      	ldr	r3, [r5, #0]
 800b8e8:	699b      	ldr	r3, [r3, #24]
 800b8ea:	069b      	lsls	r3, r3, #26
 800b8ec:	d4a2      	bmi.n	800b834 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b8ee:	f7fe fbc9 	bl	800a084 <HAL_GetTick>
 800b8f2:	1b80      	subs	r0, r0, r6
 800b8f4:	2819      	cmp	r0, #25
 800b8f6:	d9f6      	bls.n	800b8e6 <I2C_IsErrorOccurred+0xce>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800b8f8:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800b8fa:	f04f 0801 	mov.w	r8, #1
 800b8fe:	e799      	b.n	800b834 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800b900:	f1b8 0f00 	cmp.w	r8, #0
 800b904:	d19d      	bne.n	800b842 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b906:	2220      	movs	r2, #32
 800b908:	61da      	str	r2, [r3, #28]
 800b90a:	e79a      	b.n	800b842 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800b90c:	4620      	mov	r0, r4
 800b90e:	e79b      	b.n	800b848 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800b910:	2800      	cmp	r0, #0
 800b912:	d1b2      	bne.n	800b87a <I2C_IsErrorOccurred+0x62>
}
 800b914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b918 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800b918:	b570      	push	{r4, r5, r6, lr}
 800b91a:	4604      	mov	r4, r0
 800b91c:	460d      	mov	r5, r1
 800b91e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b920:	6823      	ldr	r3, [r4, #0]
 800b922:	699b      	ldr	r3, [r3, #24]
 800b924:	079b      	lsls	r3, r3, #30
 800b926:	d501      	bpl.n	800b92c <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800b928:	2000      	movs	r0, #0
 800b92a:	e01b      	b.n	800b964 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b92c:	4632      	mov	r2, r6
 800b92e:	4629      	mov	r1, r5
 800b930:	4620      	mov	r0, r4
 800b932:	f7ff ff71 	bl	800b818 <I2C_IsErrorOccurred>
 800b936:	b9a0      	cbnz	r0, 800b962 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800b938:	1c6a      	adds	r2, r5, #1
 800b93a:	d0f1      	beq.n	800b920 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b93c:	f7fe fba2 	bl	800a084 <HAL_GetTick>
 800b940:	1b80      	subs	r0, r0, r6
 800b942:	42a8      	cmp	r0, r5
 800b944:	d801      	bhi.n	800b94a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800b946:	2d00      	cmp	r5, #0
 800b948:	d1ea      	bne.n	800b920 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b94a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b94c:	f043 0320 	orr.w	r3, r3, #32
 800b950:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b952:	2320      	movs	r3, #32
 800b954:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b958:	2300      	movs	r3, #0
 800b95a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800b95e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800b962:	2001      	movs	r0, #1
}
 800b964:	bd70      	pop	{r4, r5, r6, pc}

0800b966 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800b966:	b570      	push	{r4, r5, r6, lr}
 800b968:	4604      	mov	r4, r0
 800b96a:	460d      	mov	r5, r1
 800b96c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b96e:	6823      	ldr	r3, [r4, #0]
 800b970:	699b      	ldr	r3, [r3, #24]
 800b972:	069b      	lsls	r3, r3, #26
 800b974:	d501      	bpl.n	800b97a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800b976:	2000      	movs	r0, #0
 800b978:	e019      	b.n	800b9ae <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b97a:	4632      	mov	r2, r6
 800b97c:	4629      	mov	r1, r5
 800b97e:	4620      	mov	r0, r4
 800b980:	f7ff ff4a 	bl	800b818 <I2C_IsErrorOccurred>
 800b984:	b990      	cbnz	r0, 800b9ac <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b986:	f7fe fb7d 	bl	800a084 <HAL_GetTick>
 800b98a:	1b80      	subs	r0, r0, r6
 800b98c:	42a8      	cmp	r0, r5
 800b98e:	d801      	bhi.n	800b994 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800b990:	2d00      	cmp	r5, #0
 800b992:	d1ec      	bne.n	800b96e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b994:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b996:	f043 0320 	orr.w	r3, r3, #32
 800b99a:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b99c:	2320      	movs	r3, #32
 800b99e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800b9a8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800b9ac:	2001      	movs	r0, #1
}
 800b9ae:	bd70      	pop	{r4, r5, r6, pc}

0800b9b0 <I2C_WaitOnFlagUntilTimeout>:
{
 800b9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b4:	9f06      	ldr	r7, [sp, #24]
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	4688      	mov	r8, r1
 800b9ba:	4616      	mov	r6, r2
 800b9bc:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9be:	6822      	ldr	r2, [r4, #0]
 800b9c0:	6993      	ldr	r3, [r2, #24]
 800b9c2:	ea38 0303 	bics.w	r3, r8, r3
 800b9c6:	bf0c      	ite	eq
 800b9c8:	2301      	moveq	r3, #1
 800b9ca:	2300      	movne	r3, #0
 800b9cc:	42b3      	cmp	r3, r6
 800b9ce:	d001      	beq.n	800b9d4 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	e015      	b.n	800ba00 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800b9d4:	1c6b      	adds	r3, r5, #1
 800b9d6:	d0f3      	beq.n	800b9c0 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9d8:	f7fe fb54 	bl	800a084 <HAL_GetTick>
 800b9dc:	1bc0      	subs	r0, r0, r7
 800b9de:	42a8      	cmp	r0, r5
 800b9e0:	d801      	bhi.n	800b9e6 <I2C_WaitOnFlagUntilTimeout+0x36>
 800b9e2:	2d00      	cmp	r5, #0
 800b9e4:	d1eb      	bne.n	800b9be <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b9e6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b9e8:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b9ea:	f043 0320 	orr.w	r3, r3, #32
 800b9ee:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b9f0:	2320      	movs	r3, #32
 800b9f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800b9fc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ba00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ba04 <HAL_I2C_Init>:
{
 800ba04:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800ba06:	4604      	mov	r4, r0
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d04a      	beq.n	800baa2 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ba0c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800ba10:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800ba14:	b91b      	cbnz	r3, 800ba1e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800ba16:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800ba1a:	f7f8 fccd 	bl	80043b8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800ba1e:	2324      	movs	r3, #36	@ 0x24
 800ba20:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800ba24:	6823      	ldr	r3, [r4, #0]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	f022 0201 	bic.w	r2, r2, #1
 800ba2c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ba2e:	6862      	ldr	r2, [r4, #4]
 800ba30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ba34:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ba36:	689a      	ldr	r2, [r3, #8]
 800ba38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ba3c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ba3e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ba42:	2901      	cmp	r1, #1
 800ba44:	d124      	bne.n	800ba90 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ba46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba4a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ba4c:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba4e:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ba50:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800ba54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba58:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ba5a:	68da      	ldr	r2, [r3, #12]
 800ba5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ba60:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ba62:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800ba66:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ba68:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ba6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ba6e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ba70:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800ba74:	430a      	orrs	r2, r1
 800ba76:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	f042 0201 	orr.w	r2, r2, #1
 800ba7e:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800ba80:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba82:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ba84:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ba88:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba8a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800ba8e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ba90:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ba94:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ba96:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ba98:	d1d8      	bne.n	800ba4c <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ba9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ba9e:	605a      	str	r2, [r3, #4]
 800baa0:	e7d4      	b.n	800ba4c <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800baa2:	2001      	movs	r0, #1
 800baa4:	e7f3      	b.n	800ba8e <HAL_I2C_Init+0x8a>

0800baa6 <HAL_I2C_DeInit>:
{
 800baa6:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800baa8:	4604      	mov	r4, r0
 800baaa:	b198      	cbz	r0, 800bad4 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800baac:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800baae:	2324      	movs	r3, #36	@ 0x24
 800bab0:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800bab4:	6813      	ldr	r3, [r2, #0]
 800bab6:	f023 0301 	bic.w	r3, r3, #1
 800baba:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800babc:	f7f8 fcde 	bl	800447c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bac0:	2000      	movs	r0, #0
 800bac2:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 800bac4:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800bac8:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bacc:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bace:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800bad2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800bad4:	2001      	movs	r0, #1
 800bad6:	e7fc      	b.n	800bad2 <HAL_I2C_DeInit+0x2c>

0800bad8 <HAL_I2C_Mem_Write>:
{
 800bad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800badc:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bade:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800bae2:	4604      	mov	r4, r0
 800bae4:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bae6:	2b20      	cmp	r3, #32
{
 800bae8:	4616      	mov	r6, r2
 800baea:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800baee:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800baf2:	f040 80c6 	bne.w	800bc82 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800baf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800baf8:	b113      	cbz	r3, 800bb00 <HAL_I2C_Mem_Write+0x28>
 800bafa:	f1ba 0f00 	cmp.w	sl, #0
 800bafe:	d106      	bne.n	800bb0e <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bb00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb04:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800bb06:	2001      	movs	r0, #1
}
 800bb08:	b003      	add	sp, #12
 800bb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800bb0e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	f000 80b5 	beq.w	800bc82 <HAL_I2C_Mem_Write+0x1aa>
 800bb18:	f04f 0b01 	mov.w	fp, #1
 800bb1c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800bb20:	f7fe fab0 	bl	800a084 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bb24:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800bb26:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bb28:	9000      	str	r0, [sp, #0]
 800bb2a:	465a      	mov	r2, fp
 800bb2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bb30:	4620      	mov	r0, r4
 800bb32:	f7ff ff3d 	bl	800b9b0 <I2C_WaitOnFlagUntilTimeout>
 800bb36:	2800      	cmp	r0, #0
 800bb38:	d1e5      	bne.n	800bb06 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bb3a:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 800bb3c:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bb3e:	fa5f f289 	uxtb.w	r2, r9
 800bb42:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bb44:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bb48:	2340      	movs	r3, #64	@ 0x40
 800bb4a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800bb4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb50:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bb52:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800bb54:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bb56:	4b4c      	ldr	r3, [pc, #304]	@ (800bc88 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800bb58:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bb62:	f7ff fe43 	bl	800b7ec <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb66:	462a      	mov	r2, r5
 800bb68:	4641      	mov	r1, r8
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f7ff fed4 	bl	800b918 <I2C_WaitOnTXISFlagUntilTimeout>
 800bb70:	bb18      	cbnz	r0, 800bbba <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bb72:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bb76:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bb78:	d115      	bne.n	800bba6 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bb7a:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	2180      	movs	r1, #128	@ 0x80
 800bb80:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bb82:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bb84:	4643      	mov	r3, r8
 800bb86:	9500      	str	r5, [sp, #0]
 800bb88:	f7ff ff12 	bl	800b9b0 <I2C_WaitOnFlagUntilTimeout>
 800bb8c:	b9a8      	cbnz	r0, 800bbba <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb8e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	2bff      	cmp	r3, #255	@ 0xff
 800bb94:	d815      	bhi.n	800bbc2 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800bb96:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bb98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800bb9c:	b292      	uxth	r2, r2
 800bb9e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bba0:	b2d2      	uxtb	r2, r2
 800bba2:	9000      	str	r0, [sp, #0]
 800bba4:	e012      	b.n	800bbcc <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bba6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bba8:	4641      	mov	r1, r8
 800bbaa:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bbac:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbae:	462a      	mov	r2, r5
 800bbb0:	f7ff feb2 	bl	800b918 <I2C_WaitOnTXISFlagUntilTimeout>
 800bbb4:	b908      	cbnz	r0, 800bbba <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bbb6:	6823      	ldr	r3, [r4, #0]
 800bbb8:	e7df      	b.n	800bb7a <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800bbba:	2300      	movs	r3, #0
 800bbbc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800bbc0:	e7a1      	b.n	800bb06 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bbc2:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bbc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bbc8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bbca:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bbcc:	4639      	mov	r1, r7
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f7ff fe0c 	bl	800b7ec <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbd4:	462a      	mov	r2, r5
 800bbd6:	4641      	mov	r1, r8
 800bbd8:	4620      	mov	r0, r4
 800bbda:	f7ff fe9d 	bl	800b918 <I2C_WaitOnTXISFlagUntilTimeout>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d191      	bne.n	800bb06 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bbe2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bbe4:	6822      	ldr	r2, [r4, #0]
 800bbe6:	f813 1b01 	ldrb.w	r1, [r3], #1
 800bbea:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800bbec:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800bbee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800bbf0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800bbf2:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800bbf4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800bbf6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800bbf8:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800bbfa:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bbfc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800bbfe:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	b1b3      	cbz	r3, 800bc32 <HAL_I2C_Mem_Write+0x15a>
 800bc04:	b9aa      	cbnz	r2, 800bc32 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bc06:	4643      	mov	r3, r8
 800bc08:	2180      	movs	r1, #128	@ 0x80
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	9500      	str	r5, [sp, #0]
 800bc0e:	f7ff fecf 	bl	800b9b0 <I2C_WaitOnFlagUntilTimeout>
 800bc12:	2800      	cmp	r0, #0
 800bc14:	f47f af77 	bne.w	800bb06 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc18:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	2bff      	cmp	r3, #255	@ 0xff
 800bc1e:	d928      	bls.n	800bc72 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc20:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bc22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc26:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bc28:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bc2a:	4639      	mov	r1, r7
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f7ff fddd 	bl	800b7ec <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800bc32:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bc34:	b29b      	uxth	r3, r3
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1cc      	bne.n	800bbd4 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc3a:	462a      	mov	r2, r5
 800bc3c:	4641      	mov	r1, r8
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f7ff fe91 	bl	800b966 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	f47f af5e 	bne.w	800bb06 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc4a:	6823      	ldr	r3, [r4, #0]
 800bc4c:	2120      	movs	r1, #32
 800bc4e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800bc56:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800bc5a:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800bc5e:	f022 0201 	bic.w	r2, r2, #1
 800bc62:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800bc64:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800bc68:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bc6c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800bc70:	e74a      	b.n	800bb08 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800bc72:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bc74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800bc78:	b292      	uxth	r2, r2
 800bc7a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bc7c:	b2d2      	uxtb	r2, r2
 800bc7e:	9000      	str	r0, [sp, #0]
 800bc80:	e7d3      	b.n	800bc2a <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 800bc82:	2002      	movs	r0, #2
 800bc84:	e740      	b.n	800bb08 <HAL_I2C_Mem_Write+0x30>
 800bc86:	bf00      	nop
 800bc88:	80002000 	.word	0x80002000

0800bc8c <HAL_I2C_Mem_Read>:
{
 800bc8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc90:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc92:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800bc96:	4604      	mov	r4, r0
 800bc98:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc9a:	2b20      	cmp	r3, #32
{
 800bc9c:	4616      	mov	r6, r2
 800bc9e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800bca2:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bca6:	f040 80c9 	bne.w	800be3c <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800bcaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bcac:	b113      	cbz	r3, 800bcb4 <HAL_I2C_Mem_Read+0x28>
 800bcae:	f1ba 0f00 	cmp.w	sl, #0
 800bcb2:	d106      	bne.n	800bcc2 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bcb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bcb8:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800bcba:	2001      	movs	r0, #1
}
 800bcbc:	b003      	add	sp, #12
 800bcbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800bcc2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	f000 80b8 	beq.w	800be3c <HAL_I2C_Mem_Read+0x1b0>
 800bccc:	f04f 0b01 	mov.w	fp, #1
 800bcd0:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800bcd4:	f7fe f9d6 	bl	800a084 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bcd8:	2319      	movs	r3, #25
 800bcda:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800bcdc:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bcde:	465a      	mov	r2, fp
 800bce0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bce4:	4620      	mov	r0, r4
 800bce6:	f7ff fe63 	bl	800b9b0 <I2C_WaitOnFlagUntilTimeout>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d1e4      	bne.n	800bcba <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bcf0:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 800bcf2:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bcf4:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bcf6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bcfa:	2240      	movs	r2, #64	@ 0x40
 800bcfc:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800bd00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bd02:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bd04:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800bd06:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bd08:	4a4d      	ldr	r2, [pc, #308]	@ (800be40 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800bd0a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bd0e:	9200      	str	r2, [sp, #0]
 800bd10:	fa5f f289 	uxtb.w	r2, r9
 800bd14:	f7ff fd6a 	bl	800b7ec <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd18:	462a      	mov	r2, r5
 800bd1a:	4641      	mov	r1, r8
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f7ff fdfb 	bl	800b918 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd22:	bb20      	cbnz	r0, 800bd6e <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bd24:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd28:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bd2a:	d116      	bne.n	800bd5a <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd2c:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bd2e:	2200      	movs	r2, #0
 800bd30:	2140      	movs	r1, #64	@ 0x40
 800bd32:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd34:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bd36:	4643      	mov	r3, r8
 800bd38:	9500      	str	r5, [sp, #0]
 800bd3a:	f7ff fe39 	bl	800b9b0 <I2C_WaitOnFlagUntilTimeout>
 800bd3e:	b9b0      	cbnz	r0, 800bd6e <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd40:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	2bff      	cmp	r3, #255	@ 0xff
 800bd46:	4b3f      	ldr	r3, [pc, #252]	@ (800be44 <HAL_I2C_Mem_Read+0x1b8>)
 800bd48:	d815      	bhi.n	800bd76 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800bd4a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800bd4c:	b292      	uxth	r2, r2
 800bd4e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd50:	b2d2      	uxtb	r2, r2
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bd58:	e012      	b.n	800bd80 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bd5a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd5c:	4641      	mov	r1, r8
 800bd5e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bd60:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd62:	462a      	mov	r2, r5
 800bd64:	f7ff fdd8 	bl	800b918 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd68:	b908      	cbnz	r0, 800bd6e <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	e7de      	b.n	800bd2c <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800bd6e:	2300      	movs	r3, #0
 800bd70:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800bd74:	e7a1      	b.n	800bcba <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd76:	22ff      	movs	r2, #255	@ 0xff
 800bd78:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd80:	4639      	mov	r1, r7
 800bd82:	4620      	mov	r0, r4
 800bd84:	f7ff fd32 	bl	800b7ec <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bd88:	4643      	mov	r3, r8
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	2104      	movs	r1, #4
 800bd8e:	4620      	mov	r0, r4
 800bd90:	9500      	str	r5, [sp, #0]
 800bd92:	f7ff fe0d 	bl	800b9b0 <I2C_WaitOnFlagUntilTimeout>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d18f      	bne.n	800bcba <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd9e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bda0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800bda2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800bda4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800bda6:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800bda8:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800bdaa:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800bdac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800bdae:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800bdb0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800bdb2:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bdb8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	b1b3      	cbz	r3, 800bdec <HAL_I2C_Mem_Read+0x160>
 800bdbe:	b9aa      	cbnz	r2, 800bdec <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bdc0:	4643      	mov	r3, r8
 800bdc2:	2180      	movs	r1, #128	@ 0x80
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	9500      	str	r5, [sp, #0]
 800bdc8:	f7ff fdf2 	bl	800b9b0 <I2C_WaitOnFlagUntilTimeout>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	f47f af74 	bne.w	800bcba <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bdd2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	2bff      	cmp	r3, #255	@ 0xff
 800bdd8:	d928      	bls.n	800be2c <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bdda:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bddc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bde0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bde2:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bde4:	4639      	mov	r1, r7
 800bde6:	4620      	mov	r0, r4
 800bde8:	f7ff fd00 	bl	800b7ec <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800bdec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1c9      	bne.n	800bd88 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bdf4:	462a      	mov	r2, r5
 800bdf6:	4641      	mov	r1, r8
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f7ff fdb4 	bl	800b966 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bdfe:	2800      	cmp	r0, #0
 800be00:	f47f af5b 	bne.w	800bcba <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be04:	6823      	ldr	r3, [r4, #0]
 800be06:	2120      	movs	r1, #32
 800be08:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800be0a:	685a      	ldr	r2, [r3, #4]
 800be0c:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800be10:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800be14:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800be18:	f022 0201 	bic.w	r2, r2, #1
 800be1c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800be1e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800be22:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800be26:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800be2a:	e747      	b.n	800bcbc <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800be2c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800be2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800be32:	b292      	uxth	r2, r2
 800be34:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800be36:	b2d2      	uxtb	r2, r2
 800be38:	9000      	str	r0, [sp, #0]
 800be3a:	e7d3      	b.n	800bde4 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 800be3c:	2002      	movs	r0, #2
 800be3e:	e73d      	b.n	800bcbc <HAL_I2C_Mem_Read+0x30>
 800be40:	80002000 	.word	0x80002000
 800be44:	80002400 	.word	0x80002400

0800be48 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800be48:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 800be4a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800be4c:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800be4e:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 800be50:	b103      	cbz	r3, 800be54 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 800be52:	4718      	bx	r3
}
 800be54:	4770      	bx	lr

0800be56 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800be56:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be58:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800be5c:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800be5e:	2a20      	cmp	r2, #32
 800be60:	b2d4      	uxtb	r4, r2
 800be62:	d11c      	bne.n	800be9e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be64:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800be68:	2a01      	cmp	r2, #1
 800be6a:	d018      	beq.n	800be9e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800be6c:	2224      	movs	r2, #36	@ 0x24
 800be6e:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800be72:	6802      	ldr	r2, [r0, #0]
 800be74:	6810      	ldr	r0, [r2, #0]
 800be76:	f020 0001 	bic.w	r0, r0, #1
 800be7a:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800be7c:	6810      	ldr	r0, [r2, #0]
 800be7e:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800be82:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800be84:	6810      	ldr	r0, [r2, #0]
 800be86:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be88:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800be8a:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800be8c:	6811      	ldr	r1, [r2, #0]
 800be8e:	f041 0101 	orr.w	r1, r1, #1
 800be92:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800be94:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800be98:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800be9c:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800be9e:	2002      	movs	r0, #2
 800bea0:	e7fc      	b.n	800be9c <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800bea2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bea2:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bea4:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800bea8:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800beaa:	2a20      	cmp	r2, #32
 800beac:	b2d4      	uxtb	r4, r2
 800beae:	d11b      	bne.n	800bee8 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800beb0:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800beb4:	2a01      	cmp	r2, #1
 800beb6:	d017      	beq.n	800bee8 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800beb8:	2224      	movs	r2, #36	@ 0x24
 800beba:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bebe:	6802      	ldr	r2, [r0, #0]
 800bec0:	6810      	ldr	r0, [r2, #0]
 800bec2:	f020 0001 	bic.w	r0, r0, #1
 800bec6:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bec8:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800beca:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bece:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bed2:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 800bed4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800bed6:	6811      	ldr	r1, [r2, #0]
 800bed8:	f041 0101 	orr.w	r1, r1, #1
 800bedc:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800bede:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800bee2:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800bee6:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800bee8:	2002      	movs	r0, #2
 800beea:	e7fc      	b.n	800bee6 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800beec <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800beec:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800beee:	2401      	movs	r4, #1
 800bef0:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 800bef2:	2500      	movs	r5, #0
 800bef4:	194e      	adds	r6, r1, r5
 800bef6:	443d      	add	r5, r7
 800bef8:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800befa:	42be      	cmp	r6, r7
 800befc:	d112      	bne.n	800bf24 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 800befe:	2c10      	cmp	r4, #16
 800bf00:	d108      	bne.n	800bf14 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 800bf02:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800bf04:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 800bf06:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 800bf08:	601d      	str	r5, [r3, #0]
  p = 0;
 800bf0a:	4623      	mov	r3, r4
  si = Huffsize[0];
 800bf0c:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 800bf0e:	5cc8      	ldrb	r0, [r1, r3]
 800bf10:	b9d8      	cbnz	r0, 800bf4a <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800bf12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 800bf14:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 800bf16:	3401      	adds	r4, #1
 800bf18:	19ee      	adds	r6, r5, r7
 800bf1a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800bf1e:	d9e9      	bls.n	800bef4 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 800bf20:	2001      	movs	r0, #1
 800bf22:	e7f6      	b.n	800bf12 <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 800bf24:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 800bf28:	e7e7      	b.n	800befa <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 800bf2a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 800bf2e:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 800bf30:	5cc8      	ldrb	r0, [r1, r3]
 800bf32:	19dc      	adds	r4, r3, r7
 800bf34:	42a8      	cmp	r0, r5
 800bf36:	d0f8      	beq.n	800bf2a <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 800bf38:	2d1f      	cmp	r5, #31
 800bf3a:	d8f1      	bhi.n	800bf20 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800bf3c:	fa06 f005 	lsl.w	r0, r6, r5
 800bf40:	42a0      	cmp	r0, r4
 800bf42:	d9ed      	bls.n	800bf20 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 800bf44:	0064      	lsls	r4, r4, #1
    si++;
 800bf46:	3501      	adds	r5, #1
 800bf48:	e7e1      	b.n	800bf0e <JPEG_Bits_To_SizeCodes+0x22>
 800bf4a:	1ae7      	subs	r7, r4, r3
 800bf4c:	e7f0      	b.n	800bf30 <JPEG_Bits_To_SizeCodes+0x44>

0800bf4e <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800bf4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf50:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 800bf54:	460d      	mov	r5, r1
 800bf56:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800bf58:	ab01      	add	r3, sp, #4
 800bf5a:	aa43      	add	r2, sp, #268	@ 0x10c
 800bf5c:	a902      	add	r1, sp, #8
 800bf5e:	f7ff ffc5 	bl	800beec <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800bf62:	b938      	cbnz	r0, 800bf74 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 800bf64:	9e01      	ldr	r6, [sp, #4]
 800bf66:	460b      	mov	r3, r1
 800bf68:	f104 010f 	add.w	r1, r4, #15
 800bf6c:	360f      	adds	r6, #15
 800bf6e:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800bf70:	42a1      	cmp	r1, r4
 800bf72:	d102      	bne.n	800bf7a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800bf74:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 800bf78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800bf7a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800bf7e:	2e0b      	cmp	r6, #11
 800bf80:	d80a      	bhi.n	800bf98 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800bf82:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800bf86:	f852 cb04 	ldr.w	ip, [r2], #4
 800bf8a:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800bf8e:	f813 7b01 	ldrb.w	r7, [r3], #1
 800bf92:	3f01      	subs	r7, #1
 800bf94:	55af      	strb	r7, [r5, r6]
      k++;
 800bf96:	e7eb      	b.n	800bf70 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800bf98:	2001      	movs	r0, #1
 800bf9a:	e7eb      	b.n	800bf74 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

0800bf9c <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	4608      	mov	r0, r1
 800bfa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800bfa2:	681c      	ldr	r4, [r3, #0]
{
 800bfa4:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800bfa6:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d125      	bne.n	800bffa <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800bfae:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800bfb2:	a901      	add	r1, sp, #4
 800bfb4:	f7ff ffcb 	bl	800bf4e <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800bfb8:	b9e8      	cbnz	r0, 800bff6 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800bfba:	aa01      	add	r2, sp, #4
 800bfbc:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800bfc0:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 800bfc4:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800bfc6:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800bfc8:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bfca:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 800bfcc:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bfce:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 800bfd2:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bfd4:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bfd6:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bfda:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 800bfde:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800bfe0:	7b13      	ldrb	r3, [r2, #12]
 800bfe2:	021b      	lsls	r3, r3, #8
 800bfe4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800bfe8:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800bfea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bfee:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800bff2:	42b4      	cmp	r4, r6
 800bff4:	d1e9      	bne.n	800bfca <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800bff6:	b011      	add	sp, #68	@ 0x44
 800bff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800bffa:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 800bffe:	429a      	cmp	r2, r3
 800c000:	d102      	bne.n	800c008 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800c002:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 800c006:	e7d4      	b.n	800bfb2 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800c008:	2001      	movs	r0, #1
 800c00a:	e7f4      	b.n	800bff6 <JPEG_Set_HuffDC_Mem+0x5a>

0800c00c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800c00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800c010:	6804      	ldr	r4, [r0, #0]
{
 800c012:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 800c016:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800c018:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d149      	bne.n	800c0b4 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800c020:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800c024:	466b      	mov	r3, sp
 800c026:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 800c02a:	a901      	add	r1, sp, #4
 800c02c:	4630      	mov	r0, r6
 800c02e:	f7ff ff5d 	bl	800beec <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800c032:	2800      	cmp	r0, #0
 800c034:	d13a      	bne.n	800c0ac <JPEG_Set_HuffAC_Mem+0xa0>
 800c036:	9b00      	ldr	r3, [sp, #0]
 800c038:	460d      	mov	r5, r1
 800c03a:	f106 0c0f 	add.w	ip, r6, #15
 800c03e:	4617      	mov	r7, r2
 800c040:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800c042:	f04f 0e0a 	mov.w	lr, #10
 800c046:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800c048:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 800c04a:	4561      	cmp	r1, ip
 800c04c:	d139      	bne.n	800c0c2 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800c04e:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800c052:	a942      	add	r1, sp, #264	@ 0x108
 800c054:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 800c058:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800c05a:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800c05c:	6063      	str	r3, [r4, #4]
 800c05e:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800c060:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800c064:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800c068:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800c06a:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800c06e:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800c070:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800c074:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800c076:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800c07a:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c07c:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 800c080:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c082:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 800c086:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c088:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c08a:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c08e:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800c092:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800c094:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 800c098:	021b      	lsls	r3, r3, #8
 800c09a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800c09e:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800c0a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0a4:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800c0a8:	42b4      	cmp	r4, r6
 800c0aa:	d1e7      	bne.n	800c07c <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800c0ac:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 800c0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800c0b4:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d10f      	bne.n	800c0dc <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800c0bc:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 800c0c0:	e7b0      	b.n	800c024 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 800c0c2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 800c0c6:	b15b      	cbz	r3, 800c0e0 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800c0c8:	2bf0      	cmp	r3, #240	@ 0xf0
 800c0ca:	d015      	beq.n	800c0f8 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 800c0cc:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 800c0ce:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800c0d8:	2ba1      	cmp	r3, #161	@ 0xa1
 800c0da:	d902      	bls.n	800c0e2 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 800c0dc:	2001      	movs	r0, #1
 800c0de:	e7e5      	b.n	800c0ac <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 800c0e0:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800c0e2:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800c0e6:	f857 8b04 	ldr.w	r8, [r7], #4
 800c0ea:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800c0ee:	f815 2b01 	ldrb.w	r2, [r5], #1
 800c0f2:	3a01      	subs	r2, #1
 800c0f4:	54f2      	strb	r2, [r6, r3]
      k++;
 800c0f6:	e7a8      	b.n	800c04a <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 800c0f8:	23a1      	movs	r3, #161	@ 0xa1
 800c0fa:	e7f2      	b.n	800c0e2 <JPEG_Set_HuffAC_Mem+0xd6>

0800c0fc <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800c0fc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c0fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800c102:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c104:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800c106:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c108:	f002 0203 	and.w	r2, r2, #3
 800c10c:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800c10e:	685a      	ldr	r2, [r3, #4]
 800c110:	bf0c      	ite	eq
 800c112:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800c116:	f022 0208 	bicne.w	r2, r2, #8
 800c11a:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	f022 0201 	bic.w	r2, r2, #1
 800c122:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c124:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c126:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c12a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800c12c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c12e:	f422 52c0 	bic.w	r2, r2, #6144	@ 0x1800
 800c132:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800c134:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c136:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c13a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800c13c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c13e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c142:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c144:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c146:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c14a:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	f042 0201 	orr.w	r2, r2, #1
 800c152:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c154:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800c156:	f002 020c 	and.w	r2, r2, #12
 800c15a:	2a08      	cmp	r2, #8
 800c15c:	d104      	bne.n	800c168 <JPEG_Init_Process+0x6c>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800c15e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c160:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c164:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800c166:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800c168:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800c16a:	f002 020c 	and.w	r2, r2, #12
 800c16e:	2a0c      	cmp	r2, #12
 800c170:	d1f9      	bne.n	800c166 <JPEG_Init_Process+0x6a>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c174:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c178:	e7f4      	b.n	800c164 <JPEG_Init_Process+0x68>
	...

0800c17c <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800c17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 800c17e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 800c180:	4604      	mov	r4, r0
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 800c182:	2b03      	cmp	r3, #3
 800c184:	d927      	bls.n	800c1d6 <JPEG_DMA_StartProcess+0x5a>
 800c186:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800c188:	2903      	cmp	r1, #3
 800c18a:	d924      	bls.n	800c1d6 <JPEG_DMA_StartProcess+0x5a>
  {
    return HAL_ERROR;
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800c18c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800c18e:	f023 0303 	bic.w	r3, r3, #3
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 800c192:	4d1a      	ldr	r5, [pc, #104]	@ (800c1fc <JPEG_DMA_StartProcess+0x80>)

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 800c194:	f021 0103 	bic.w	r1, r1, #3
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800c198:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 800c19c:	4e18      	ldr	r6, [pc, #96]	@ (800c200 <JPEG_DMA_StartProcess+0x84>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800c19e:	4f19      	ldr	r7, [pc, #100]	@ (800c204 <JPEG_DMA_StartProcess+0x88>)
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800c1a0:	6542      	str	r2, [r0, #84]	@ 0x54
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800c1a2:	6802      	ldr	r2, [r0, #0]
 800c1a4:	6b10      	ldr	r0, [r2, #48]	@ 0x30

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c1a6:	3240      	adds	r2, #64	@ 0x40
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800c1a8:	f420 50c0 	bic.w	r0, r0, #6144	@ 0x1800
 800c1ac:	f842 0c10 	str.w	r0, [r2, #-16]
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 800c1b0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c1b2:	63c5      	str	r5, [r0, #60]	@ 0x3c
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800c1b4:	6b65      	ldr	r5, [r4, #52]	@ 0x34
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 800c1b6:	64c6      	str	r6, [r0, #76]	@ 0x4c
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 800c1b8:	64ee      	str	r6, [r5, #76]	@ 0x4c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 800c1ba:	4e13      	ldr	r6, [pc, #76]	@ (800c208 <JPEG_DMA_StartProcess+0x8c>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800c1bc:	63ef      	str	r7, [r5, #60]	@ 0x3c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 800c1be:	652e      	str	r6, [r5, #80]	@ 0x50
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800c1c0:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c1c2:	089b      	lsrs	r3, r3, #2
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 800c1c4:	62e1      	str	r1, [r4, #44]	@ 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c1c6:	69a1      	ldr	r1, [r4, #24]
 800c1c8:	f7fe fb7e 	bl	800a8c8 <HAL_DMA_Start_IT>
 800c1cc:	b128      	cbz	r0, 800c1da <JPEG_DMA_StartProcess+0x5e>
                       hjpeg->InDataLength >> 2)  != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c1ce:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800c1d0:	f043 0304 	orr.w	r3, r3, #4
 800c1d4:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800c1d6:	2001      	movs	r0, #1

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);

  return HAL_OK;
}
 800c1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c1da:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c1dc:	6821      	ldr	r1, [r4, #0]
 800c1de:	089b      	lsrs	r3, r3, #2
 800c1e0:	69e2      	ldr	r2, [r4, #28]
 800c1e2:	3144      	adds	r1, #68	@ 0x44
 800c1e4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800c1e6:	f7fe fb6f 	bl	800a8c8 <HAL_DMA_Start_IT>
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d1ef      	bne.n	800c1ce <JPEG_DMA_StartProcess+0x52>
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 800c1ee:	6822      	ldr	r2, [r4, #0]
 800c1f0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800c1f2:	f443 53c0 	orr.w	r3, r3, #6144	@ 0x1800
 800c1f6:	6313      	str	r3, [r2, #48]	@ 0x30
  return HAL_OK;
 800c1f8:	e7ee      	b.n	800c1d8 <JPEG_DMA_StartProcess+0x5c>
 800c1fa:	bf00      	nop
 800c1fc:	0800c769 	.word	0x0800c769
 800c200:	0800c64d 	.word	0x0800c64d
 800c204:	0800cc21 	.word	0x0800cc21
 800c208:	0800cc11 	.word	0x0800cc11

0800c20c <HAL_JPEG_Init>:
{
 800c20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800c20e:	4605      	mov	r5, r0
 800c210:	2800      	cmp	r0, #0
 800c212:	f000 80f6 	beq.w	800c402 <HAL_JPEG_Init+0x1f6>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800c216:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800c21a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c21e:	b91b      	cbnz	r3, 800c228 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800c220:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800c224:	f7f8 f94c 	bl	80044c0 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800c228:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800c22a:	2302      	movs	r3, #2
 800c22c:	4a88      	ldr	r2, [pc, #544]	@ (800c450 <HAL_JPEG_Init+0x244>)
 800c22e:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800c232:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800c236:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c238:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 800c23c:	f043 0301 	orr.w	r3, r3, #1
 800c240:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c242:	6823      	ldr	r3, [r4, #0]
 800c244:	f023 0301 	bic.w	r3, r3, #1
 800c248:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c24a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c24c:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800c250:	6323      	str	r3, [r4, #48]	@ 0x30
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800c252:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c254:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800c258:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800c25a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c25c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c260:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800c262:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c268:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c26a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c26c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c270:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800c272:	4b78      	ldr	r3, [pc, #480]	@ (800c454 <HAL_JPEG_Init+0x248>)
 800c274:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800c276:	4b78      	ldr	r3, [pc, #480]	@ (800c458 <HAL_JPEG_Init+0x24c>)
 800c278:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800c27a:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800c27c:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c280:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 800c282:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c284:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c286:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c288:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800c28c:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800c28e:	4333      	orrs	r3, r6
 800c290:	7c56      	ldrb	r6, [r2, #17]
 800c292:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c296:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800c29a:	4281      	cmp	r1, r0
 800c29c:	d1f0      	bne.n	800c280 <HAL_JPEG_Init+0x74>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c29e:	4b6f      	ldr	r3, [pc, #444]	@ (800c45c <HAL_JPEG_Init+0x250>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800c2a0:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 800c2a4:	4a6e      	ldr	r2, [pc, #440]	@ (800c460 <HAL_JPEG_Init+0x254>)
 800c2a6:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c2aa:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 800c2ae:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800c2b2:	4610      	mov	r0, r2
 800c2b4:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c2b6:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 800c2ba:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800c2be:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c2c2:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 800c2c4:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c2c6:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800c2ca:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c2cc:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800c2d0:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800c2d4:	ea43 030c 	orr.w	r3, r3, ip
 800c2d8:	f890 c011 	ldrb.w	ip, [r0, #17]
 800c2dc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800c2e0:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 800c2e4:	42be      	cmp	r6, r7
 800c2e6:	d1ec      	bne.n	800c2c2 <HAL_JPEG_Init+0xb6>
  value = *address & 0xFFFF0000U;
 800c2e8:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800c2ec:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 800c2f0:	0c1b      	lsrs	r3, r3, #16
 800c2f2:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800c2f4:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 800c2f8:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 800c2fc:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800c300:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 800c304:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c306:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800c30a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c30c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800c310:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800c314:	4333      	orrs	r3, r6
 800c316:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 800c31a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800c31e:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800c322:	4281      	cmp	r1, r0
 800c324:	d1ec      	bne.n	800c300 <HAL_JPEG_Init+0xf4>
  value = *address & 0x0000FFFFU;
 800c326:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800c32a:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 800c32e:	4a4d      	ldr	r2, [pc, #308]	@ (800c464 <HAL_JPEG_Init+0x258>)
 800c330:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 800c334:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800c336:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800c33a:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 800c33e:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800c342:	4013      	ands	r3, r2
  *address = value;
 800c344:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800c348:	2301      	movs	r3, #1
 800c34a:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 800c34e:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 800c352:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 800c356:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 800c35a:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800c35e:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800c360:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800c364:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 800c368:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800c36c:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800c36e:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800c372:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800c376:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c37a:	4b3b      	ldr	r3, [pc, #236]	@ (800c468 <HAL_JPEG_Init+0x25c>)
 800c37c:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 800c380:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800c384:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 800c388:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800c38c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800c38e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 800c392:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 800c396:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800c39a:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800c39c:	4a33      	ldr	r2, [pc, #204]	@ (800c46c <HAL_JPEG_Init+0x260>)
 800c39e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800c3a2:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800c3a6:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800c3aa:	4b31      	ldr	r3, [pc, #196]	@ (800c470 <HAL_JPEG_Init+0x264>)
 800c3ac:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 800c3b0:	4b30      	ldr	r3, [pc, #192]	@ (800c474 <HAL_JPEG_Init+0x268>)
 800c3b2:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 800c3b6:	4b30      	ldr	r3, [pc, #192]	@ (800c478 <HAL_JPEG_Init+0x26c>)
 800c3b8:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 800c3bc:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800c3c0:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800c3c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800c3c6:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800c3ca:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 800c3ce:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c3d0:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800c3d4:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800c3d6:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800c3da:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800c3de:	4333      	orrs	r3, r6
 800c3e0:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 800c3e4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800c3e8:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800c3ec:	4281      	cmp	r1, r0
 800c3ee:	d1ec      	bne.n	800c3ca <HAL_JPEG_Init+0x1be>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800c3f0:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 800c3f4:	491a      	ldr	r1, [pc, #104]	@ (800c460 <HAL_JPEG_Init+0x254>)
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	f7ff fe08 	bl	800c00c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800c3fc:	b118      	cbz	r0, 800c406 <HAL_JPEG_Init+0x1fa>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800c3fe:	2301      	movs	r3, #1
 800c400:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 800c402:	2001      	movs	r0, #1
}
 800c404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800c406:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 800c40a:	4918      	ldr	r1, [pc, #96]	@ (800c46c <HAL_JPEG_Init+0x260>)
 800c40c:	4628      	mov	r0, r5
 800c40e:	f7ff fdfd 	bl	800c00c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800c412:	2800      	cmp	r0, #0
 800c414:	d1f3      	bne.n	800c3fe <HAL_JPEG_Init+0x1f2>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800c416:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 800c41a:	490d      	ldr	r1, [pc, #52]	@ (800c450 <HAL_JPEG_Init+0x244>)
 800c41c:	4628      	mov	r0, r5
 800c41e:	f7ff fdbd 	bl	800bf9c <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800c422:	2800      	cmp	r0, #0
 800c424:	d1eb      	bne.n	800c3fe <HAL_JPEG_Init+0x1f2>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800c426:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 800c42a:	4914      	ldr	r1, [pc, #80]	@ (800c47c <HAL_JPEG_Init+0x270>)
 800c42c:	4628      	mov	r0, r5
 800c42e:	f7ff fdb5 	bl	800bf9c <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800c432:	2800      	cmp	r0, #0
 800c434:	d1e3      	bne.n	800c3fe <HAL_JPEG_Init+0x1f2>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800c436:	6863      	ldr	r3, [r4, #4]
 800c438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c43c:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800c43e:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800c440:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 800c442:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800c444:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800c448:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 800c44a:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 800c44c:	e7da      	b.n	800c404 <HAL_JPEG_Init+0x1f8>
 800c44e:	bf00      	nop
 800c450:	0802e39f 	.word	0x0802e39f
 800c454:	0802e19f 	.word	0x0802e19f
 800c458:	0802e15f 	.word	0x0802e15f
 800c45c:	0b0a0908 	.word	0x0b0a0908
 800c460:	0802e2d1 	.word	0x0802e2d1
 800c464:	ffff0000 	.word	0xffff0000
 800c468:	09080706 	.word	0x09080706
 800c46c:	0802e21f 	.word	0x0802e21f
 800c470:	01000404 	.word	0x01000404
 800c474:	05070403 	.word	0x05070403
 800c478:	04040201 	.word	0x04040201
 800c47c:	0802e383 	.word	0x0802e383

0800c480 <HAL_JPEG_GetInfo>:
{
 800c480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800c484:	2800      	cmp	r0, #0
 800c486:	d06f      	beq.n	800c568 <HAL_JPEG_GetInfo+0xe8>
 800c488:	2900      	cmp	r1, #0
 800c48a:	d06d      	beq.n	800c568 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800c48c:	6804      	ldr	r4, [r0, #0]
 800c48e:	6863      	ldr	r3, [r4, #4]
 800c490:	f003 0303 	and.w	r3, r3, #3
 800c494:	2b02      	cmp	r3, #2
 800c496:	d047      	beq.n	800c528 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800c498:	6863      	ldr	r3, [r4, #4]
 800c49a:	f013 0303 	ands.w	r3, r3, #3
 800c49e:	d005      	beq.n	800c4ac <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800c4a0:	6863      	ldr	r3, [r4, #4]
 800c4a2:	f003 0303 	and.w	r3, r3, #3
 800c4a6:	2b03      	cmp	r3, #3
 800c4a8:	d15e      	bne.n	800c568 <HAL_JPEG_GetInfo+0xe8>
 800c4aa:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800c4ac:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800c4ae:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800c4b0:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800c4b4:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800c4b6:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800c4b8:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800c4ba:	68e2      	ldr	r2, [r4, #12]
 800c4bc:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800c4c0:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800c4c2:	d13c      	bne.n	800c53e <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800c4c4:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800c4c6:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800c4c8:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800c4cc:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800c4ce:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c4d0:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800c4d2:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c4d6:	d129      	bne.n	800c52c <HAL_JPEG_GetInfo+0xac>
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	f013 0f0f 	tst.w	r3, #15
 800c4de:	bf0c      	ite	eq
 800c4e0:	2301      	moveq	r3, #1
 800c4e2:	2300      	movne	r3, #0
 800c4e4:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800c4e6:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	3450      	adds	r4, #80	@ 0x50
 800c4ec:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 800c56c <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 800c4f0:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800c4f2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800c4f6:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 800c4fa:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800c4fe:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 800c502:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800c504:	fa29 f206 	lsr.w	r2, r9, r6
 800c508:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800c50a:	2a01      	cmp	r2, #1
 800c50c:	d119      	bne.n	800c542 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800c50e:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 800c510:	3608      	adds	r6, #8
 800c512:	3701      	adds	r7, #1
 800c514:	2e20      	cmp	r6, #32
 800c516:	d1f5      	bne.n	800c504 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 800c518:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800c51a:	2d40      	cmp	r5, #64	@ 0x40
 800c51c:	d1ed      	bne.n	800c4fa <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800c51e:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 800c520:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800c522:	610b      	str	r3, [r1, #16]
}
 800c524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c528:	2310      	movs	r3, #16
 800c52a:	e7bf      	b.n	800c4ac <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c52c:	2d03      	cmp	r5, #3
 800c52e:	d106      	bne.n	800c53e <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800c530:	4313      	orrs	r3, r2
 800c532:	f013 0f0f 	tst.w	r3, #15
 800c536:	bf0c      	ite	eq
 800c538:	2301      	moveq	r3, #1
 800c53a:	2300      	movne	r3, #0
 800c53c:	e7d3      	b.n	800c4e6 <HAL_JPEG_GetInfo+0x66>
 800c53e:	2300      	movs	r3, #0
 800c540:	e7d1      	b.n	800c4e6 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800c542:	fb0e fb02 	mul.w	fp, lr, r2
 800c546:	f897 a000 	ldrb.w	sl, [r7]
 800c54a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c54c:	f812 a00a 	ldrb.w	sl, [r2, sl]
 800c550:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800c554:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 800c556:	bf8b      	itete	hi
 800c558:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800c55c:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 800c560:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800c562:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800c566:	e7d3      	b.n	800c510 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 800c568:	2001      	movs	r0, #1
 800c56a:	e7db      	b.n	800c524 <HAL_JPEG_GetInfo+0xa4>
 800c56c:	0802e1df 	.word	0x0802e1df

0800c570 <HAL_JPEG_Decode_DMA>:
{
 800c570:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800c572:	4604      	mov	r4, r0
 800c574:	b348      	cbz	r0, 800c5ca <HAL_JPEG_Decode_DMA+0x5a>
 800c576:	b341      	cbz	r1, 800c5ca <HAL_JPEG_Decode_DMA+0x5a>
 800c578:	b33b      	cbz	r3, 800c5ca <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800c57a:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 800c57e:	2d01      	cmp	r5, #1
 800c580:	d028      	beq.n	800c5d4 <HAL_JPEG_Decode_DMA+0x64>
 800c582:	2501      	movs	r5, #1
 800c584:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800c588:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 800c58c:	2d01      	cmp	r5, #1
 800c58e:	d11e      	bne.n	800c5ce <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800c590:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800c592:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800c594:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800c598:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800c59a:	f025 050f 	bic.w	r5, r5, #15
 800c59e:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800c5a0:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800c5a2:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800c5a6:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800c5aa:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 800c5ac:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 800c5ae:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 800c5b0:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800c5b2:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 800c5b4:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 800c5b6:	f7ff fda1 	bl	800c0fc <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800c5ba:	f7ff fddf 	bl	800c17c <JPEG_DMA_StartProcess>
 800c5be:	b128      	cbz	r0, 800c5cc <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c5c0:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800c5c2:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c5c6:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800c5ca:	2001      	movs	r0, #1
}
 800c5cc:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 800c5d4:	2002      	movs	r0, #2
 800c5d6:	e7f9      	b.n	800c5cc <HAL_JPEG_Decode_DMA+0x5c>

0800c5d8 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800c5d8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c5da:	f003 030c 	and.w	r3, r3, #12
 800c5de:	2b0c      	cmp	r3, #12
 800c5e0:	d117      	bne.n	800c612 <HAL_JPEG_Pause+0x3a>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800c5e2:	f011 0301 	ands.w	r3, r1, #1
 800c5e6:	d005      	beq.n	800c5f4 <HAL_JPEG_Pause+0x1c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800c5e8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c5ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c5ee:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= JPEG_DMA_IDMA;
 800c5f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800c5f4:	0789      	lsls	r1, r1, #30
 800c5f6:	d505      	bpl.n	800c604 <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800c5f8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= JPEG_DMA_ODMA;
 800c5fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800c5fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c602:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800c604:	6801      	ldr	r1, [r0, #0]
 800c606:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800c608:	ea22 0303 	bic.w	r3, r2, r3
 800c60c:	630b      	str	r3, [r1, #48]	@ 0x30
}
 800c60e:	2000      	movs	r0, #0
 800c610:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c612:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c614:	f003 030c 	and.w	r3, r3, #12
 800c618:	2b08      	cmp	r3, #8
 800c61a:	d1f8      	bne.n	800c60e <HAL_JPEG_Pause+0x36>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800c61c:	f011 0301 	ands.w	r3, r1, #1
 800c620:	d004      	beq.n	800c62c <HAL_JPEG_Pause+0x54>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800c622:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c624:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c628:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800c62a:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800c62c:	078a      	lsls	r2, r1, #30
 800c62e:	d5e9      	bpl.n	800c604 <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800c630:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800c632:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800c636:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c63a:	6542      	str	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800c63c:	e7e2      	b.n	800c604 <HAL_JPEG_Pause+0x2c>

0800c63e <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800c63e:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800c640:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800c642:	4770      	bx	lr

0800c644 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800c644:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800c646:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 800c648:	4770      	bx	lr

0800c64a <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 800c64a:	4770      	bx	lr

0800c64c <JPEG_DMAErrorCallback>:
{
 800c64c:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c64e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c650:	f7fe fa48 	bl	800aae4 <HAL_DMA_GetError>
 800c654:	2802      	cmp	r0, #2
 800c656:	d016      	beq.n	800c686 <JPEG_DMAErrorCallback+0x3a>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c658:	6823      	ldr	r3, [r4, #0]
    HAL_JPEG_ErrorCallback(hjpeg);
 800c65a:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	f022 0201 	bic.w	r2, r2, #1
 800c662:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c664:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c666:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c66a:	631a      	str	r2, [r3, #48]	@ 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800c66c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c66e:	f422 52c0 	bic.w	r2, r2, #6144	@ 0x1800
 800c672:	631a      	str	r2, [r3, #48]	@ 0x30
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c674:	2301      	movs	r3, #1
 800c676:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c67a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800c67c:	f043 0304 	orr.w	r3, r3, #4
 800c680:	6523      	str	r3, [r4, #80]	@ 0x50
    HAL_JPEG_ErrorCallback(hjpeg);
 800c682:	f7f5 fa85 	bl	8001b90 <HAL_JPEG_ErrorCallback>
}
 800c686:	bd10      	pop	{r4, pc}

0800c688 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800c688:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800c68a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68c:	4604      	mov	r4, r0
 800c68e:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800c690:	b922      	cbnz	r2, 800c69c <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800c692:	2101      	movs	r1, #1
 800c694:	f7ff ffa0 	bl	800c5d8 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 800c698:	2200      	movs	r2, #0
 800c69a:	e004      	b.n	800c6a6 <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800c69c:	6a03      	ldr	r3, [r0, #32]
 800c69e:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800c6a0:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800c6a2:	d924      	bls.n	800c6ee <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800c6a4:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800c6a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c6a8:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800c6ac:	d11e      	bne.n	800c6ec <JPEG_ReadInputData+0x64>
 800c6ae:	b1ea      	cbz	r2, 800c6ec <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 800c6b0:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 800c6b4:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 800c6b6:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 800c6ba:	d827      	bhi.n	800c70c <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c6bc:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800c6be:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800c6c0:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c6c2:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c6c4:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 800c6c6:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c6c8:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c6ca:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c6ce:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800c6d2:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c6d4:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800c6d8:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c6dc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c6e0:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800c6e2:	6a22      	ldr	r2, [r4, #32]
 800c6e4:	f102 0204 	add.w	r2, r2, #4
 800c6e8:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800c6ea:	d1e8      	bne.n	800c6be <JPEG_ReadInputData+0x36>
}
 800c6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d1d2      	bne.n	800c698 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c6f2:	6a01      	ldr	r1, [r0, #32]
 800c6f4:	f7f5 f9f0 	bl	8001ad8 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800c6f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c6fa:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800c6fc:	bf84      	itt	hi
 800c6fe:	f023 0303 	bichi.w	r3, r3, #3
 800c702:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800c704:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 800c706:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800c708:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800c70a:	e7cc      	b.n	800c6a6 <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 800c70c:	2a03      	cmp	r2, #3
 800c70e:	d918      	bls.n	800c742 <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c710:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 800c712:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800c714:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c716:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c718:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 800c71a:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c71c:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c71e:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c722:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800c726:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c728:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800c72c:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c730:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c734:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800c736:	6a22      	ldr	r2, [r4, #32]
 800c738:	f102 0204 	add.w	r2, r2, #4
 800c73c:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800c73e:	d1e8      	bne.n	800c712 <JPEG_ReadInputData+0x8a>
 800c740:	e7d4      	b.n	800c6ec <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 800c742:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c744:	6a25      	ldr	r5, [r4, #32]
 800c746:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 800c748:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c74a:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 800c74c:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c74e:	fa05 f506 	lsl.w	r5, r5, r6
 800c752:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 800c756:	6a25      	ldr	r5, [r4, #32]
 800c758:	f105 0501 	add.w	r5, r5, #1
 800c75c:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800c75e:	d1f1      	bne.n	800c744 <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 800c760:	6822      	ldr	r2, [r4, #0]
 800c762:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800c764:	e7c2      	b.n	800c6ec <JPEG_ReadInputData+0x64>
	...

0800c768 <JPEG_DMAInCpltCallback>:
{
 800c768:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c76a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c76c:	6823      	ldr	r3, [r4, #0]
 800c76e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c770:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c774:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800c776:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c778:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800c77c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800c780:	0412      	lsls	r2, r2, #16
 800c782:	0c12      	lsrs	r2, r2, #16
 800c784:	2a0c      	cmp	r2, #12
 800c786:	d12c      	bne.n	800c7e2 <JPEG_DMAInCpltCallback+0x7a>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800c788:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c78a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c78e:	631a      	str	r2, [r3, #48]	@ 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800c790:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c792:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800c794:	4a1b      	ldr	r2, [pc, #108]	@ (800c804 <JPEG_DMAInCpltCallback+0x9c>)
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	ea02 0283 	and.w	r2, r2, r3, lsl #2
 800c79c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c79e:	1a9b      	subs	r3, r3, r2
 800c7a0:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c7a2:	6a21      	ldr	r1, [r4, #32]
 800c7a4:	f7f5 f998 	bl	8001ad8 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= 4UL)
 800c7a8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c7aa:	2b03      	cmp	r3, #3
 800c7ac:	d91a      	bls.n	800c7e4 <JPEG_DMAInCpltCallback+0x7c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800c7ae:	f023 0303 	bic.w	r3, r3, #3
      hjpeg->InDataLength = 4;
 800c7b2:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800c7b4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c7b6:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800c7b8:	04db      	lsls	r3, r3, #19
 800c7ba:	d41c      	bmi.n	800c7f6 <JPEG_DMAInCpltCallback+0x8e>
 800c7bc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c7be:	b1d3      	cbz	r3, 800c7f6 <JPEG_DMAInCpltCallback+0x8e>
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c7c0:	089b      	lsrs	r3, r3, #2
 800c7c2:	3240      	adds	r2, #64	@ 0x40
 800c7c4:	69a1      	ldr	r1, [r4, #24]
 800c7c6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c7c8:	f7fe f87e 	bl	800a8c8 <HAL_DMA_Start_IT>
 800c7cc:	b170      	cbz	r0, 800c7ec <JPEG_DMAInCpltCallback+0x84>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c7ce:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800c7d0:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c7d2:	f043 0304 	orr.w	r3, r3, #4
 800c7d6:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c7d8:	2306      	movs	r3, #6
 800c7da:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800c7de:	f7f5 f9d7 	bl	8001b90 <HAL_JPEG_ErrorCallback>
}
 800c7e2:	bd10      	pop	{r4, pc}
    else if (hjpeg->InDataLength > 0UL)
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d0e5      	beq.n	800c7b4 <JPEG_DMAInCpltCallback+0x4c>
      hjpeg->InDataLength = 4;
 800c7e8:	2304      	movs	r3, #4
 800c7ea:	e7e2      	b.n	800c7b2 <JPEG_DMAInCpltCallback+0x4a>
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800c7ec:	6822      	ldr	r2, [r4, #0]
 800c7ee:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800c7f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c7f4:	6313      	str	r3, [r2, #48]	@ 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c7f6:	6822      	ldr	r2, [r4, #0]
 800c7f8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800c7fa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c7fe:	6313      	str	r3, [r2, #48]	@ 0x30
 800c800:	e7ef      	b.n	800c7e2 <JPEG_DMAInCpltCallback+0x7a>
 800c802:	bf00      	nop
 800c804:	0003fffc 	.word	0x0003fffc

0800c808 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c808:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 800c80a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c80c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c810:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 800c812:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c814:	4293      	cmp	r3, r2
 800c816:	d32a      	bcc.n	800c86e <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800c818:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800c81a:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800c81c:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c81e:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800c820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 800c822:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c824:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c826:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800c828:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c82a:	69e0      	ldr	r0, [r4, #28]
 800c82c:	4428      	add	r0, r5
 800c82e:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800c832:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c834:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c836:	69e0      	ldr	r0, [r4, #28]
 800c838:	4428      	add	r0, r5
 800c83a:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c83e:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c842:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c844:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c846:	69e0      	ldr	r0, [r4, #28]
 800c848:	4428      	add	r0, r5
 800c84a:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800c84c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c84e:	f103 0304 	add.w	r3, r3, #4
 800c852:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800c854:	d1e1      	bne.n	800c81a <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800c856:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c858:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d106      	bne.n	800c86c <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c85e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c860:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c862:	4620      	mov	r0, r4
 800c864:	f7f5 f956 	bl	8001b14 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c868:	2300      	movs	r3, #0
 800c86a:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800c86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800c86e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800c870:	4293      	cmp	r3, r2
 800c872:	d9fb      	bls.n	800c86c <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800c874:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800c876:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800c878:	1a9b      	subs	r3, r3, r2
 800c87a:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800c87c:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c87e:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800c880:	d105      	bne.n	800c88e <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800c882:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c884:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c886:	429f      	cmp	r7, r3
 800c888:	d119      	bne.n	800c8be <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c88a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c88c:	e7e9      	b.n	800c862 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800c88e:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800c890:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800c892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c894:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c896:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800c898:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c89a:	69e1      	ldr	r1, [r4, #28]
 800c89c:	4429      	add	r1, r5
 800c89e:	0a1d      	lsrs	r5, r3, #8
 800c8a0:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c8a2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c8a4:	69e1      	ldr	r1, [r4, #28]
 800c8a6:	4429      	add	r1, r5
 800c8a8:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c8aa:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c8ac:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c8ae:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800c8b0:	69e1      	ldr	r1, [r4, #28]
 800c8b2:	4429      	add	r1, r5
 800c8b4:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800c8b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c8b8:	3304      	adds	r3, #4
 800c8ba:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800c8bc:	e7de      	b.n	800c87c <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800c8be:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800c8c0:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800c8c2:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800c8c4:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 800c8c6:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800c8c8:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800c8ca:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800c8cc:	d114      	bne.n	800c8f8 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c8ce:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	f7f5 f91f 	bl	8001b14 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800c8da:	1d2b      	adds	r3, r5, #4
 800c8dc:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800c8de:	2b03      	cmp	r3, #3
 800c8e0:	d8c4      	bhi.n	800c86c <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800c8e2:	00da      	lsls	r2, r3, #3
 800c8e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c8e6:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800c8e8:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800c8ea:	fa26 f202 	lsr.w	r2, r6, r2
 800c8ee:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800c8f0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c8f2:	3201      	adds	r2, #1
 800c8f4:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800c8f6:	e7f2      	b.n	800c8de <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800c8f8:	f002 0303 	and.w	r3, r2, #3
 800c8fc:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800c900:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800c902:	00db      	lsls	r3, r3, #3
 800c904:	fa26 f303 	lsr.w	r3, r6, r3
 800c908:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 800c90c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c90e:	3301      	adds	r3, #1
 800c910:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800c912:	e7d9      	b.n	800c8c8 <JPEG_StoreOutputData+0xc0>

0800c914 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c914:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c916:	f003 0303 	and.w	r3, r3, #3
 800c91a:	2b02      	cmp	r3, #2
{
 800c91c:	b510      	push	{r4, lr}
 800c91e:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c920:	d114      	bne.n	800c94c <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800c922:	6803      	ldr	r3, [r0, #0]
 800c924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c926:	065b      	lsls	r3, r3, #25
 800c928:	d510      	bpl.n	800c94c <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800c92a:	1d01      	adds	r1, r0, #4
 800c92c:	f7ff fda8 	bl	800c480 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800c930:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800c932:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800c934:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800c936:	f7f5 f881 	bl	8001a3c <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800c93a:	6823      	ldr	r3, [r4, #0]
 800c93c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c93e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c942:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800c944:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c946:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c94a:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800c94c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c94e:	04d9      	lsls	r1, r3, #19
 800c950:	d407      	bmi.n	800c962 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800c952:	6823      	ldr	r3, [r4, #0]
 800c954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c956:	0792      	lsls	r2, r2, #30
 800c958:	d544      	bpl.n	800c9e4 <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800c95a:	2104      	movs	r1, #4
      JPEG_ReadInputData(hjpeg, 1);
 800c95c:	4620      	mov	r0, r4
 800c95e:	f7ff fe93 	bl	800c688 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c962:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c964:	0499      	lsls	r1, r3, #18
 800c966:	d407      	bmi.n	800c978 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800c968:	6823      	ldr	r3, [r4, #0]
 800c96a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c96c:	0712      	lsls	r2, r2, #28
 800c96e:	d53e      	bpl.n	800c9ee <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800c970:	2104      	movs	r1, #4
      JPEG_StoreOutputData(hjpeg, 1);
 800c972:	4620      	mov	r0, r4
 800c974:	f7ff ff48 	bl	800c808 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800c978:	6823      	ldr	r3, [r4, #0]
 800c97a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c97c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800c980:	2a20      	cmp	r2, #32
 800c982:	d13c      	bne.n	800c9fe <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	f022 0201 	bic.w	r2, r2, #1
 800c98a:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c98c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c98e:	f002 020c 	and.w	r2, r2, #12
 800c992:	2a08      	cmp	r2, #8
 800c994:	d103      	bne.n	800c99e <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c996:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c998:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c99c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c99e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9a0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c9a4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800c9a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c9a8:	b133      	cbz	r3, 800c9b8 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c9aa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	69e1      	ldr	r1, [r4, #28]
 800c9b0:	f7f5 f8b0 	bl	8001b14 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800c9b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c9ba:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c9bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c9be:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c9c2:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c9c6:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c9c8:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800c9ca:	f04f 0200 	mov.w	r2, #0
 800c9ce:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c9d2:	f04f 0201 	mov.w	r2, #1
 800c9d6:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c9da:	d10d      	bne.n	800c9f8 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c9dc:	f7f5 f8da 	bl	8001b94 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800c9e0:	2001      	movs	r0, #1
}
 800c9e2:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800c9e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9e6:	0758      	lsls	r0, r3, #29
 800c9e8:	d5bb      	bpl.n	800c962 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800c9ea:	2101      	movs	r1, #1
 800c9ec:	e7b6      	b.n	800c95c <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800c9ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9f0:	06db      	lsls	r3, r3, #27
 800c9f2:	d5c1      	bpl.n	800c978 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800c9f4:	2101      	movs	r1, #1
 800c9f6:	e7bc      	b.n	800c972 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c9f8:	f7ff fe27 	bl	800c64a <HAL_JPEG_EncodeCpltCallback>
 800c9fc:	e7f0      	b.n	800c9e0 <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 800c9fe:	2000      	movs	r0, #0
 800ca00:	e7ef      	b.n	800c9e2 <JPEG_Process+0xce>

0800ca02 <JPEG_DMA_PollResidualData>:
{
 800ca02:	b570      	push	{r4, r5, r6, lr}
 800ca04:	4604      	mov	r4, r0
 800ca06:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ca08:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800ca0a:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ca0c:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800ca10:	d122      	bne.n	800ca58 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800ca12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca14:	06d0      	lsls	r0, r2, #27
 800ca16:	d51f      	bpl.n	800ca58 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800ca18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800ca1a:	69e1      	ldr	r1, [r4, #28]
 800ca1c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ca1e:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800ca20:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ca22:	69e2      	ldr	r2, [r4, #28]
 800ca24:	440a      	add	r2, r1
 800ca26:	0a19      	lsrs	r1, r3, #8
 800ca28:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800ca2a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ca2c:	69e2      	ldr	r2, [r4, #28]
 800ca2e:	440a      	add	r2, r1
 800ca30:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800ca32:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800ca34:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800ca36:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ca38:	69e2      	ldr	r2, [r4, #28]
 800ca3a:	440a      	add	r2, r1
 800ca3c:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800ca3e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ca40:	3304      	adds	r3, #4
 800ca42:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800ca44:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ca46:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d105      	bne.n	800ca58 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ca4c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ca4e:	4620      	mov	r0, r4
 800ca50:	69e1      	ldr	r1, [r4, #28]
 800ca52:	f7f5 f85f 	bl	8001b14 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800ca56:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800ca58:	3e01      	subs	r6, #1
 800ca5a:	d1d5      	bne.n	800ca08 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800ca5c:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800ca5e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800ca60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ca62:	06c9      	lsls	r1, r1, #27
 800ca64:	d501      	bpl.n	800ca6a <JPEG_DMA_PollResidualData+0x68>
 800ca66:	0492      	lsls	r2, r2, #18
 800ca68:	d420      	bmi.n	800caac <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	f022 0201 	bic.w	r2, r2, #1
 800ca70:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800ca72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ca74:	b133      	cbz	r3, 800ca84 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ca76:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ca78:	4620      	mov	r0, r4
 800ca7a:	69e1      	ldr	r1, [r4, #28]
 800ca7c:	f7f5 f84a 	bl	8001b14 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ca80:	2300      	movs	r3, #0
 800ca82:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800ca84:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ca86:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ca88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ca8a:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ca8e:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ca92:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ca94:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800ca96:	f04f 0200 	mov.w	r2, #0
 800ca9a:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ca9e:	f04f 0201 	mov.w	r2, #1
 800caa2:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800caa6:	d102      	bne.n	800caae <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800caa8:	f7f5 f874 	bl	8001b94 <HAL_JPEG_DecodeCpltCallback>
}
 800caac:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800caae:	f7ff fdcc 	bl	800c64a <HAL_JPEG_EncodeCpltCallback>
}
 800cab2:	e7fb      	b.n	800caac <JPEG_DMA_PollResidualData+0xaa>

0800cab4 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800cab4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800cab6:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 800caba:	b570      	push	{r4, r5, r6, lr}
 800cabc:	4604      	mov	r4, r0
 800cabe:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800cac0:	d034      	beq.n	800cb2c <HAL_JPEG_Resume+0x78>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800cac2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800cac4:	f003 030c 	and.w	r3, r3, #12
 800cac8:	2b0c      	cmp	r3, #12
 800caca:	d13e      	bne.n	800cb4a <HAL_JPEG_Resume+0x96>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800cacc:	f011 0601 	ands.w	r6, r1, #1
 800cad0:	d00a      	beq.n	800cae8 <HAL_JPEG_Resume+0x34>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800cad2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800cad4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cad8:	6543      	str	r3, [r0, #84]	@ 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800cada:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800cadc:	f023 0303 	bic.w	r3, r3, #3
 800cae0:	6283      	str	r3, [r0, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 800cae2:	b99b      	cbnz	r3, 800cb0c <HAL_JPEG_Resume+0x58>
      mask |= JPEG_DMA_IDMA;
 800cae4:	f44f 6600 	mov.w	r6, #2048	@ 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800cae8:	07a8      	lsls	r0, r5, #30
 800caea:	d509      	bpl.n	800cb00 <HAL_JPEG_Resume+0x4c>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800caec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800caee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800caf2:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800caf4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800caf6:	0419      	lsls	r1, r3, #16
 800caf8:	d51a      	bpl.n	800cb30 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800cafa:	4620      	mov	r0, r4
 800cafc:	f7ff ff81 	bl	800ca02 <JPEG_DMA_PollResidualData>
    JPEG_ENABLE_DMA(hjpeg, mask);
 800cb00:	6822      	ldr	r2, [r4, #0]
 800cb02:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800cb04:	4333      	orrs	r3, r6
 800cb06:	6313      	str	r3, [r2, #48]	@ 0x30
  return HAL_OK;
 800cb08:	2000      	movs	r0, #0
}
 800cb0a:	bd70      	pop	{r4, r5, r6, pc}
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800cb0c:	6802      	ldr	r2, [r0, #0]
 800cb0e:	089b      	lsrs	r3, r3, #2
 800cb10:	6981      	ldr	r1, [r0, #24]
 800cb12:	3240      	adds	r2, #64	@ 0x40
 800cb14:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800cb16:	f7fd fed7 	bl	800a8c8 <HAL_DMA_Start_IT>
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	d0e2      	beq.n	800cae4 <HAL_JPEG_Resume+0x30>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800cb1e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800cb20:	f043 0304 	orr.w	r3, r3, #4
 800cb24:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800cb26:	2306      	movs	r3, #6
 800cb28:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800cb2c:	2001      	movs	r0, #1
 800cb2e:	e7ec      	b.n	800cb0a <HAL_JPEG_Resume+0x56>
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800cb30:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cb32:	6821      	ldr	r1, [r4, #0]
 800cb34:	089b      	lsrs	r3, r3, #2
 800cb36:	69e2      	ldr	r2, [r4, #28]
 800cb38:	3144      	adds	r1, #68	@ 0x44
 800cb3a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800cb3c:	f7fd fec4 	bl	800a8c8 <HAL_DMA_Start_IT>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d1ec      	bne.n	800cb1e <HAL_JPEG_Resume+0x6a>
        mask |= JPEG_DMA_ODMA;
 800cb44:	f446 5680 	orr.w	r6, r6, #4096	@ 0x1000
 800cb48:	e7da      	b.n	800cb00 <HAL_JPEG_Resume+0x4c>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800cb4a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800cb4c:	f003 030c 	and.w	r3, r3, #12
 800cb50:	2b08      	cmp	r3, #8
 800cb52:	d1d9      	bne.n	800cb08 <HAL_JPEG_Resume+0x54>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800cb54:	f011 0301 	ands.w	r3, r1, #1
 800cb58:	d004      	beq.n	800cb64 <HAL_JPEG_Resume+0xb0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800cb5a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800cb5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cb60:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800cb62:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800cb64:	07aa      	lsls	r2, r5, #30
 800cb66:	d505      	bpl.n	800cb74 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800cb68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800cb6a:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800cb6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cb72:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800cb74:	6821      	ldr	r1, [r4, #0]
 800cb76:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	630b      	str	r3, [r1, #48]	@ 0x30
 800cb7c:	e7c4      	b.n	800cb08 <HAL_JPEG_Resume+0x54>
	...

0800cb80 <JPEG_DMA_EndProcess>:
{
 800cb80:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 800cb82:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 800cb84:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 800cb86:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	6859      	ldr	r1, [r3, #4]
 800cb8c:	4b1f      	ldr	r3, [pc, #124]	@ (800cc0c <JPEG_DMA_EndProcess+0x8c>)
 800cb8e:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 800cb92:	1ad3      	subs	r3, r2, r3
 800cb94:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800cb96:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d105      	bne.n	800cba8 <JPEG_DMA_EndProcess+0x28>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cb9c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800cb9e:	69c1      	ldr	r1, [r0, #28]
 800cba0:	f7f4 ffb8 	bl	8001b14 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800cba8:	6823      	ldr	r3, [r4, #0]
 800cbaa:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800cbac:	f015 0510 	ands.w	r5, r5, #16
 800cbb0:	d124      	bne.n	800cbfc <JPEG_DMA_EndProcess+0x7c>
    if (hjpeg->JpegOutCount > 0UL)
 800cbb2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cbb4:	b12b      	cbz	r3, 800cbc2 <JPEG_DMA_EndProcess+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cbb6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cbb8:	4620      	mov	r0, r4
 800cbba:	69e1      	ldr	r1, [r4, #28]
 800cbbc:	f7f4 ffaa 	bl	8001b14 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800cbc0:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cbc2:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800cbc4:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cbc6:	6813      	ldr	r3, [r2, #0]
 800cbc8:	f023 0301 	bic.w	r3, r3, #1
 800cbcc:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800cbce:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cbd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cbd2:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cbd6:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cbda:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800cbdc:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800cbde:	f04f 0200 	mov.w	r2, #0
 800cbe2:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800cbe6:	f04f 0201 	mov.w	r2, #1
 800cbea:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800cbee:	d102      	bne.n	800cbf6 <JPEG_DMA_EndProcess+0x76>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800cbf0:	f7f4 ffd0 	bl	8001b94 <HAL_JPEG_DecodeCpltCallback>
}
 800cbf4:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800cbf6:	f7ff fd28 	bl	800c64a <HAL_JPEG_EncodeCpltCallback>
 800cbfa:	e7fb      	b.n	800cbf4 <JPEG_DMA_EndProcess+0x74>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800cbfc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cbfe:	049b      	lsls	r3, r3, #18
 800cc00:	d4f8      	bmi.n	800cbf4 <JPEG_DMA_EndProcess+0x74>
    JPEG_DMA_PollResidualData(hjpeg);
 800cc02:	4620      	mov	r0, r4
}
 800cc04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800cc08:	f7ff befb 	b.w	800ca02 <JPEG_DMA_PollResidualData>
 800cc0c:	0003fffc 	.word	0x0003fffc

0800cc10 <JPEG_DMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc10:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800cc12:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800cc14:	041b      	lsls	r3, r3, #16
 800cc16:	d501      	bpl.n	800cc1c <JPEG_DMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800cc18:	f7ff bfb2 	b.w	800cb80 <JPEG_DMA_EndProcess>
}
 800cc1c:	4770      	bx	lr
	...

0800cc20 <JPEG_DMAOutCpltCallback>:
{
 800cc20:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc22:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800cc24:	6823      	ldr	r3, [r4, #0]
 800cc26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc28:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800cc2c:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800cc2e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cc30:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800cc34:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800cc38:	0412      	lsls	r2, r2, #16
 800cc3a:	0c12      	lsrs	r2, r2, #16
 800cc3c:	2a0c      	cmp	r2, #12
 800cc3e:	d129      	bne.n	800cc94 <JPEG_DMAOutCpltCallback+0x74>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800cc40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc42:	0692      	lsls	r2, r2, #26
 800cc44:	d42c      	bmi.n	800cca0 <JPEG_DMAOutCpltCallback+0x80>
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800cc46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cc48:	69e1      	ldr	r1, [r4, #28]
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800cc4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cc4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800cc50:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cc52:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800cc54:	4a15      	ldr	r2, [pc, #84]	@ (800ccac <JPEG_DMAOutCpltCallback+0x8c>)
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	ea02 0283 	and.w	r2, r2, r3, lsl #2
 800cc5c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cc5e:	1a9b      	subs	r3, r3, r2
 800cc60:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800cc62:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cc64:	f7f4 ff56 	bl	8001b14 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800cc68:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cc6a:	049b      	lsls	r3, r3, #18
 800cc6c:	d418      	bmi.n	800cca0 <JPEG_DMAOutCpltCallback+0x80>
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800cc6e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cc70:	6821      	ldr	r1, [r4, #0]
 800cc72:	089b      	lsrs	r3, r3, #2
 800cc74:	69e2      	ldr	r2, [r4, #28]
 800cc76:	3144      	adds	r1, #68	@ 0x44
 800cc78:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800cc7a:	f7fd fe25 	bl	800a8c8 <HAL_DMA_Start_IT>
 800cc7e:	b150      	cbz	r0, 800cc96 <JPEG_DMAOutCpltCallback+0x76>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800cc80:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800cc82:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800cc84:	f043 0304 	orr.w	r3, r3, #4
 800cc88:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800cc8a:	2306      	movs	r3, #6
 800cc8c:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800cc90:	f7f4 ff7e 	bl	8001b90 <HAL_JPEG_ErrorCallback>
}
 800cc94:	bd10      	pop	{r4, pc}
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800cc96:	6822      	ldr	r2, [r4, #0]
 800cc98:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800cc9a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800cc9e:	6313      	str	r3, [r2, #48]	@ 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800cca0:	6822      	ldr	r2, [r4, #0]
 800cca2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800cca4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800cca8:	6313      	str	r3, [r2, #48]	@ 0x30
 800ccaa:	e7f3      	b.n	800cc94 <JPEG_DMAOutCpltCallback+0x74>
 800ccac:	0003fffc 	.word	0x0003fffc

0800ccb0 <HAL_JPEG_IRQHandler>:
{
 800ccb0:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800ccb2:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800ccb6:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800ccb8:	3b03      	subs	r3, #3
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d854      	bhi.n	800cd68 <HAL_JPEG_IRQHandler+0xb8>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ccbe:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ccc0:	f003 030c 	and.w	r3, r3, #12
 800ccc4:	2b08      	cmp	r3, #8
 800ccc6:	d103      	bne.n	800ccd0 <HAL_JPEG_IRQHandler+0x20>
}
 800ccc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800cccc:	f7ff be22 	b.w	800c914 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ccd0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ccd2:	f003 030c 	and.w	r3, r3, #12
 800ccd6:	2b0c      	cmp	r3, #12
 800ccd8:	d146      	bne.n	800cd68 <HAL_JPEG_IRQHandler+0xb8>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ccda:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ccdc:	f003 0303 	and.w	r3, r3, #3
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d114      	bne.n	800cd0e <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800cce4:	6803      	ldr	r3, [r0, #0]
 800cce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cce8:	0659      	lsls	r1, r3, #25
 800ccea:	d510      	bpl.n	800cd0e <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800ccec:	1d01      	adds	r1, r0, #4
 800ccee:	f7ff fbc7 	bl	800c480 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800ccf2:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ccf4:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800ccf6:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ccf8:	f7f4 fea0 	bl	8001a3c <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800ccfc:	6823      	ldr	r3, [r4, #0]
 800ccfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cd04:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800cd06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd0c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd12:	0692      	lsls	r2, r2, #26
 800cd14:	d528      	bpl.n	800cd68 <HAL_JPEG_IRQHandler+0xb8>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800cd16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 800cd18:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800cd1a:	f422 52c0 	bic.w	r2, r2, #6144	@ 0x1800
 800cd1e:	631a      	str	r2, [r3, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800cd20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cd26:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	f022 0201 	bic.w	r2, r2, #1
 800cd2e:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800cd30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd32:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800cd36:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800cd38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd3a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800cd3e:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 800cd40:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800cd44:	2b02      	cmp	r3, #2
 800cd46:	d101      	bne.n	800cd4c <HAL_JPEG_IRQHandler+0x9c>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 800cd48:	f7fd fdfb 	bl	800a942 <HAL_DMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 800cd4c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800cd4e:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d103      	bne.n	800cd5e <HAL_JPEG_IRQHandler+0xae>
}
 800cd56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 800cd5a:	f7fd bdf2 	b.w	800a942 <HAL_DMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800cd5e:	4620      	mov	r0, r4
}
 800cd60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800cd64:	f7ff bf0c 	b.w	800cb80 <JPEG_DMA_EndProcess>
}
 800cd68:	bd10      	pop	{r4, pc}

0800cd6a <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800cd6a:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800cd6c:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800cd6e:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800cd72:	3284      	adds	r2, #132	@ 0x84
 800cd74:	1883      	adds	r3, r0, r2
{
 800cd76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800cd7a:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800cd7c:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800cd80:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800cd82:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800cd86:	684c      	ldr	r4, [r1, #4]
 800cd88:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800cd8c:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800cd90:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800cd94:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800cd96:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800cd98:	68c5      	ldr	r5, [r0, #12]
 800cd9a:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800cd9e:	443d      	add	r5, r7
 800cda0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800cda4:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800cda6:	68c6      	ldr	r6, [r0, #12]
 800cda8:	68cd      	ldr	r5, [r1, #12]
 800cdaa:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800cdae:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800cdb0:	689d      	ldr	r5, [r3, #8]
 800cdb2:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800cdb6:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800cdb8:	688d      	ldr	r5, [r1, #8]
 800cdba:	68c7      	ldr	r7, [r0, #12]
 800cdbc:	3501      	adds	r5, #1
 800cdbe:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800cdc2:	443d      	add	r5, r7
 800cdc4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800cdc8:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800cdca:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800cdcc:	691d      	ldr	r5, [r3, #16]
 800cdce:	f025 0507 	bic.w	r5, r5, #7
 800cdd2:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800cdd4:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800cdd6:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800cdd8:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800cddc:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800cde0:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800cde4:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800cde8:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800cdec:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800cdf0:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800cdf4:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800cdf6:	695d      	ldr	r5, [r3, #20]
 800cdf8:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800cdfc:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800cdfe:	694d      	ldr	r5, [r1, #20]
 800ce00:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ce02:	69dd      	ldr	r5, [r3, #28]
 800ce04:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800ce08:	f025 0507 	bic.w	r5, r5, #7
 800ce0c:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ce0e:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800ce12:	433d      	orrs	r5, r7
 800ce14:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800ce16:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ce18:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800ce1a:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ce1e:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ce20:	b31e      	cbz	r6, 800ce6a <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ce22:	2e01      	cmp	r6, #1
 800ce24:	d023      	beq.n	800ce6e <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ce26:	1eb5      	subs	r5, r6, #2
 800ce28:	2d02      	cmp	r5, #2
 800ce2a:	d922      	bls.n	800ce72 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800ce2c:	2e07      	cmp	r6, #7
 800ce2e:	bf14      	ite	ne
 800ce30:	2501      	movne	r5, #1
 800ce32:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ce34:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800ce36:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ce3a:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800ce3e:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ce40:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800ce42:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800ce44:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ce46:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800ce48:	436e      	muls	r6, r5
 800ce4a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800ce4e:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800ce50:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800ce52:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800ce56:	f024 0407 	bic.w	r4, r4, #7
 800ce5a:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ce5c:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ce5e:	5883      	ldr	r3, [r0, r2]
 800ce60:	f043 0301 	orr.w	r3, r3, #1
 800ce64:	5083      	str	r3, [r0, r2]
}
 800ce66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800ce6a:	2504      	movs	r5, #4
 800ce6c:	e7e2      	b.n	800ce34 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800ce6e:	2503      	movs	r5, #3
 800ce70:	e7e0      	b.n	800ce34 <LTDC_SetConfig+0xca>
    tmp = 2U;
 800ce72:	2502      	movs	r5, #2
 800ce74:	e7de      	b.n	800ce34 <LTDC_SetConfig+0xca>
	...

0800ce78 <HAL_LTDC_Init>:
{
 800ce78:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d063      	beq.n	800cf48 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800ce80:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800ce84:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800ce88:	b91b      	cbnz	r3, 800ce92 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800ce8a:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800ce8e:	f7f7 fb8f 	bl	80045b0 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ce92:	2302      	movs	r3, #2
 800ce94:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800ce98:	6823      	ldr	r3, [r4, #0]
 800ce9a:	699a      	ldr	r2, [r3, #24]
 800ce9c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800cea0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800cea2:	6999      	ldr	r1, [r3, #24]
 800cea4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800cea8:	4302      	orrs	r2, r0
 800ceaa:	68e0      	ldr	r0, [r4, #12]
 800ceac:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ceae:	6920      	ldr	r0, [r4, #16]
 800ceb0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800ceb2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ceb4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800ceb6:	4925      	ldr	r1, [pc, #148]	@ (800cf4c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ceb8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800ceba:	689a      	ldr	r2, [r3, #8]
 800cebc:	400a      	ands	r2, r1
 800cebe:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800cec0:	689a      	ldr	r2, [r3, #8]
 800cec2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800cec6:	69a0      	ldr	r0, [r4, #24]
 800cec8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800ceca:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800cecc:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800cece:	68da      	ldr	r2, [r3, #12]
 800ced0:	400a      	ands	r2, r1
 800ced2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800ced4:	68da      	ldr	r2, [r3, #12]
 800ced6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800ceda:	6a20      	ldr	r0, [r4, #32]
 800cedc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800cede:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800cee0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800cee2:	691a      	ldr	r2, [r3, #16]
 800cee4:	400a      	ands	r2, r1
 800cee6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800cee8:	691a      	ldr	r2, [r3, #16]
 800ceea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800ceee:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800cef0:	4302      	orrs	r2, r0
 800cef2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800cef4:	695a      	ldr	r2, [r3, #20]
 800cef6:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 800cef8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800cefa:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800cefc:	695a      	ldr	r2, [r3, #20]
 800cefe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cf02:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cf04:	430a      	orrs	r2, r1
 800cf06:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800cf08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800cf0a:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800cf0e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800cf12:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800cf16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800cf18:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800cf1a:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800cf1e:	432a      	orrs	r2, r5
 800cf20:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800cf24:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800cf26:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cf2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800cf2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf2e:	f042 0206 	orr.w	r2, r2, #6
 800cf32:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800cf34:	699a      	ldr	r2, [r3, #24]
 800cf36:	f042 0201 	orr.w	r2, r2, #1
 800cf3a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800cf3c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800cf3e:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800cf42:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800cf46:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800cf48:	2001      	movs	r0, #1
 800cf4a:	e7fc      	b.n	800cf46 <HAL_LTDC_Init+0xce>
 800cf4c:	f000f800 	.word	0xf000f800

0800cf50 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800cf50:	4770      	bx	lr

0800cf52 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800cf52:	4770      	bx	lr

0800cf54 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800cf54:	4770      	bx	lr

0800cf56 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800cf56:	6803      	ldr	r3, [r0, #0]
{
 800cf58:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800cf5a:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800cf5c:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800cf5e:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800cf60:	0772      	lsls	r2, r6, #29
 800cf62:	d514      	bpl.n	800cf8e <HAL_LTDC_IRQHandler+0x38>
 800cf64:	0769      	lsls	r1, r5, #29
 800cf66:	d512      	bpl.n	800cf8e <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800cf68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf6a:	f022 0204 	bic.w	r2, r2, #4
 800cf6e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800cf70:	2204      	movs	r2, #4
 800cf72:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800cf74:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800cf78:	f043 0301 	orr.w	r3, r3, #1
 800cf7c:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800cf80:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800cf82:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800cf86:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800cf8a:	f7ff ffe1 	bl	800cf50 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800cf8e:	07b2      	lsls	r2, r6, #30
 800cf90:	d516      	bpl.n	800cfc0 <HAL_LTDC_IRQHandler+0x6a>
 800cf92:	07ab      	lsls	r3, r5, #30
 800cf94:	d514      	bpl.n	800cfc0 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800cf96:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800cf98:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800cf9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf9c:	f022 0202 	bic.w	r2, r2, #2
 800cfa0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800cfa2:	2202      	movs	r2, #2
 800cfa4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800cfa6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800cfb0:	2304      	movs	r3, #4
 800cfb2:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800cfbc:	f7ff ffc8 	bl	800cf50 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800cfc0:	07f0      	lsls	r0, r6, #31
 800cfc2:	d510      	bpl.n	800cfe6 <HAL_LTDC_IRQHandler+0x90>
 800cfc4:	07e9      	lsls	r1, r5, #31
 800cfc6:	d50e      	bpl.n	800cfe6 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800cfc8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800cfca:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800cfcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cfce:	f022 0201 	bic.w	r2, r2, #1
 800cfd2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800cfd8:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800cfda:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800cfde:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800cfe2:	f7ff ffb6 	bl	800cf52 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800cfe6:	0732      	lsls	r2, r6, #28
 800cfe8:	d511      	bpl.n	800d00e <HAL_LTDC_IRQHandler+0xb8>
 800cfea:	072b      	lsls	r3, r5, #28
 800cfec:	d50f      	bpl.n	800d00e <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800cfee:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800cff0:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800cff2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cff4:	f022 0208 	bic.w	r2, r2, #8
 800cff8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800cffa:	2208      	movs	r2, #8
 800cffc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800cffe:	2301      	movs	r3, #1
 800d000:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800d004:	2300      	movs	r3, #0
 800d006:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800d00a:	f7ff ffa3 	bl	800cf54 <HAL_LTDC_ReloadEventCallback>
}
 800d00e:	bd70      	pop	{r4, r5, r6, pc}

0800d010 <HAL_LTDC_ConfigLayer>:
{
 800d010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800d014:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800d018:	4606      	mov	r6, r0
 800d01a:	460f      	mov	r7, r1
 800d01c:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800d01e:	2b01      	cmp	r3, #1
 800d020:	f04f 0002 	mov.w	r0, #2
 800d024:	d01f      	beq.n	800d066 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d026:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800d028:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d02c:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d02e:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d032:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800d036:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d03a:	3438      	adds	r4, #56	@ 0x38
 800d03c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d03e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d048:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d04a:	4630      	mov	r0, r6
 800d04c:	4662      	mov	r2, ip
 800d04e:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d050:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d052:	f7ff fe8a 	bl	800cd6a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d056:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800d058:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d05a:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800d05e:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800d062:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800d066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d06c <HAL_LTDC_SetPitch>:
{
 800d06c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800d06e:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800d072:	2b01      	cmp	r3, #1
 800d074:	f04f 0302 	mov.w	r3, #2
 800d078:	d02c      	beq.n	800d0d4 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800d07a:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d07c:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800d080:	fb04 0402 	mla	r4, r4, r2, r0
 800d084:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800d086:	b33c      	cbz	r4, 800d0d8 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800d088:	2c01      	cmp	r4, #1
 800d08a:	d027      	beq.n	800d0dc <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d08c:	1ea5      	subs	r5, r4, #2
 800d08e:	429d      	cmp	r5, r3
 800d090:	d902      	bls.n	800d098 <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 800d092:	2c07      	cmp	r4, #7
 800d094:	bf18      	it	ne
 800d096:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800d098:	01d2      	lsls	r2, r2, #7
 800d09a:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800d09c:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800d09e:	3284      	adds	r2, #132	@ 0x84
 800d0a0:	4422      	add	r2, r4
 800d0a2:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800d0a4:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800d0a8:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 800d0ac:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800d0ae:	4c0c      	ldr	r4, [pc, #48]	@ (800d0e0 <HAL_LTDC_SetPitch+0x74>)
 800d0b0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800d0b2:	f045 0501 	orr.w	r5, r5, #1
 800d0b6:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800d0b8:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800d0ba:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800d0be:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800d0c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d0c2:	f043 0301 	orr.w	r3, r3, #1
 800d0c6:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800d0d8:	2304      	movs	r3, #4
 800d0da:	e7dd      	b.n	800d098 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800d0dc:	2303      	movs	r3, #3
 800d0de:	e7db      	b.n	800d098 <HAL_LTDC_SetPitch+0x2c>
 800d0e0:	40016800 	.word	0x40016800

0800d0e4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800d0e4:	4b19      	ldr	r3, [pc, #100]	@ (800d14c <HAL_PWREx_EnableOverDrive+0x68>)
{
 800d0e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800d0e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d0ea:	4c19      	ldr	r4, [pc, #100]	@ (800d150 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800d0ec:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800d0f0:	641a      	str	r2, [r3, #64]	@ 0x40
 800d0f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0f8:	9301      	str	r3, [sp, #4]
 800d0fa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d0fc:	6823      	ldr	r3, [r4, #0]
 800d0fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d102:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d104:	f7fc ffbe 	bl	800a084 <HAL_GetTick>
 800d108:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d10a:	6863      	ldr	r3, [r4, #4]
 800d10c:	03da      	lsls	r2, r3, #15
 800d10e:	d50c      	bpl.n	800d12a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d110:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d112:	4d0f      	ldr	r5, [pc, #60]	@ (800d150 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d118:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800d11a:	f7fc ffb3 	bl	800a084 <HAL_GetTick>
 800d11e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d120:	686b      	ldr	r3, [r5, #4]
 800d122:	039b      	lsls	r3, r3, #14
 800d124:	d50a      	bpl.n	800d13c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800d126:	2000      	movs	r0, #0
 800d128:	e006      	b.n	800d138 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d12a:	f7fc ffab 	bl	800a084 <HAL_GetTick>
 800d12e:	1b40      	subs	r0, r0, r5
 800d130:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800d134:	d9e9      	bls.n	800d10a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800d136:	2003      	movs	r0, #3
}
 800d138:	b003      	add	sp, #12
 800d13a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d13c:	f7fc ffa2 	bl	800a084 <HAL_GetTick>
 800d140:	1b00      	subs	r0, r0, r4
 800d142:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800d146:	d9eb      	bls.n	800d120 <HAL_PWREx_EnableOverDrive+0x3c>
 800d148:	e7f5      	b.n	800d136 <HAL_PWREx_EnableOverDrive+0x52>
 800d14a:	bf00      	nop
 800d14c:	40023800 	.word	0x40023800
 800d150:	40007000 	.word	0x40007000

0800d154 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800d154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800d158:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 800d15a:	b136      	cbz	r6, 800d16a <QSPI_Config+0x16>
 800d15c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800d160:	d003      	beq.n	800d16a <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800d162:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800d164:	6804      	ldr	r4, [r0, #0]
 800d166:	3b01      	subs	r3, #1
 800d168:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800d16a:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d16e:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800d172:	f1ba 0f00 	cmp.w	sl, #0
 800d176:	d04c      	beq.n	800d212 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d178:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800d17a:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d17c:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 800d180:	ea4a 0406 	orr.w	r4, sl, r6
 800d184:	680b      	ldr	r3, [r1, #0]
 800d186:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 800d18a:	ea44 0a02 	orr.w	sl, r4, r2
 800d18e:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d192:	f1be 0f00 	cmp.w	lr, #0
 800d196:	d024      	beq.n	800d1e2 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d198:	688e      	ldr	r6, [r1, #8]
 800d19a:	ea4a 040e 	orr.w	r4, sl, lr
 800d19e:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d1a0:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d1a2:	b19f      	cbz	r7, 800d1cc <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d1a4:	433b      	orrs	r3, r7
 800d1a6:	4303      	orrs	r3, r0
 800d1a8:	68c8      	ldr	r0, [r1, #12]
 800d1aa:	ea43 0309 	orr.w	r3, r3, r9
 800d1ae:	ea43 0308 	orr.w	r3, r3, r8
 800d1b2:	4333      	orrs	r3, r6
 800d1b4:	4303      	orrs	r3, r0
 800d1b6:	ea43 030c 	orr.w	r3, r3, ip
 800d1ba:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d1bc:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d1c0:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d1c2:	d001      	beq.n	800d1c8 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d1c4:	684b      	ldr	r3, [r1, #4]
 800d1c6:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800d1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d1cc:	4303      	orrs	r3, r0
 800d1ce:	ea43 0309 	orr.w	r3, r3, r9
 800d1d2:	ea43 0308 	orr.w	r3, r3, r8
 800d1d6:	4333      	orrs	r3, r6
 800d1d8:	ea43 030c 	orr.w	r3, r3, ip
 800d1dc:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d1de:	616b      	str	r3, [r5, #20]
 800d1e0:	e7f2      	b.n	800d1c8 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d1e2:	b167      	cbz	r7, 800d1fe <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d1e4:	433b      	orrs	r3, r7
 800d1e6:	4303      	orrs	r3, r0
 800d1e8:	68c8      	ldr	r0, [r1, #12]
 800d1ea:	ea43 0309 	orr.w	r3, r3, r9
 800d1ee:	ea43 0308 	orr.w	r3, r3, r8
 800d1f2:	4303      	orrs	r3, r0
 800d1f4:	ea43 030c 	orr.w	r3, r3, ip
 800d1f8:	ea43 030a 	orr.w	r3, r3, sl
 800d1fc:	e7de      	b.n	800d1bc <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d1fe:	4303      	orrs	r3, r0
 800d200:	ea43 0309 	orr.w	r3, r3, r9
 800d204:	ea43 0408 	orr.w	r4, r3, r8
 800d208:	ea44 030c 	orr.w	r3, r4, ip
 800d20c:	ea43 030a 	orr.w	r3, r3, sl
 800d210:	e7e5      	b.n	800d1de <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800d212:	f1be 0f00 	cmp.w	lr, #0
 800d216:	d02c      	beq.n	800d272 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d218:	ea46 050e 	orr.w	r5, r6, lr
 800d21c:	688b      	ldr	r3, [r1, #8]
 800d21e:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d220:	694e      	ldr	r6, [r1, #20]
 800d222:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800d224:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d226:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d22a:	04b6      	lsls	r6, r6, #18
 800d22c:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d22e:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d232:	b1a7      	cbz	r7, 800d25e <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d234:	433b      	orrs	r3, r7
 800d236:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d238:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d23c:	ea43 0308 	orr.w	r3, r3, r8
 800d240:	ea43 030e 	orr.w	r3, r3, lr
 800d244:	ea43 030c 	orr.w	r3, r3, ip
 800d248:	ea43 0300 	orr.w	r3, r3, r0
 800d24c:	ea43 0306 	orr.w	r3, r3, r6
 800d250:	ea43 0305 	orr.w	r3, r3, r5
 800d254:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d256:	d0b7      	beq.n	800d1c8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d258:	684b      	ldr	r3, [r1, #4]
 800d25a:	61a3      	str	r3, [r4, #24]
 800d25c:	e7b4      	b.n	800d1c8 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d25e:	ea43 0308 	orr.w	r3, r3, r8
 800d262:	ea43 030e 	orr.w	r3, r3, lr
 800d266:	ea43 030c 	orr.w	r3, r3, ip
 800d26a:	4333      	orrs	r3, r6
 800d26c:	432b      	orrs	r3, r5
 800d26e:	6163      	str	r3, [r4, #20]
 800d270:	e7aa      	b.n	800d1c8 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800d272:	b1d7      	cbz	r7, 800d2aa <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d274:	ea46 0307 	orr.w	r3, r6, r7
 800d278:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800d27a:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d27c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d280:	ea43 0302 	orr.w	r3, r3, r2
 800d284:	ea43 0304 	orr.w	r3, r3, r4
 800d288:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800d28a:	ea43 0304 	orr.w	r3, r3, r4
 800d28e:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800d290:	ea43 0304 	orr.w	r3, r3, r4
 800d294:	68cc      	ldr	r4, [r1, #12]
 800d296:	ea43 0304 	orr.w	r3, r3, r4
 800d29a:	694c      	ldr	r4, [r1, #20]
 800d29c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800d2a0:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800d2a2:	d091      	beq.n	800d1c8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800d2a4:	684b      	ldr	r3, [r1, #4]
 800d2a6:	6183      	str	r3, [r0, #24]
 800d2a8:	e78e      	b.n	800d1c8 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800d2aa:	2e00      	cmp	r6, #0
 800d2ac:	d08c      	beq.n	800d1c8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800d2ae:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800d2b0:	6800      	ldr	r0, [r0, #0]
 800d2b2:	4333      	orrs	r3, r6
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	694a      	ldr	r2, [r1, #20]
 800d2c0:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800d2c4:	6143      	str	r3, [r0, #20]
}
 800d2c6:	e77f      	b.n	800d1c8 <QSPI_Config+0x74>

0800d2c8 <QSPI_WaitFlagStateUntilTimeout>:
{
 800d2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2cc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d2d0:	4604      	mov	r4, r0
 800d2d2:	460e      	mov	r6, r1
 800d2d4:	4615      	mov	r5, r2
 800d2d6:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800d2d8:	6822      	ldr	r2, [r4, #0]
 800d2da:	6893      	ldr	r3, [r2, #8]
 800d2dc:	4233      	tst	r3, r6
 800d2de:	bf14      	ite	ne
 800d2e0:	2301      	movne	r3, #1
 800d2e2:	2300      	moveq	r3, #0
 800d2e4:	42ab      	cmp	r3, r5
 800d2e6:	d101      	bne.n	800d2ec <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	e012      	b.n	800d312 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800d2ec:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d2f0:	d0f3      	beq.n	800d2da <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2f2:	f7fc fec7 	bl	800a084 <HAL_GetTick>
 800d2f6:	1bc0      	subs	r0, r0, r7
 800d2f8:	4540      	cmp	r0, r8
 800d2fa:	d802      	bhi.n	800d302 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800d2fc:	f1b8 0f00 	cmp.w	r8, #0
 800d300:	d1ea      	bne.n	800d2d8 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800d302:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800d304:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800d306:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800d30a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d30c:	f043 0301 	orr.w	r3, r3, #1
 800d310:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800d312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d318 <HAL_QSPI_Init>:
{
 800d318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d31a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800d31c:	f7fc feb2 	bl	800a084 <HAL_GetTick>
 800d320:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800d322:	2c00      	cmp	r4, #0
 800d324:	d046      	beq.n	800d3b4 <HAL_QSPI_Init+0x9c>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800d326:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800d32a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800d32e:	b93b      	cbnz	r3, 800d340 <HAL_QSPI_Init+0x28>
    HAL_QSPI_MspInit(hqspi);
 800d330:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 800d332:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    HAL_QSPI_MspInit(hqspi);
 800d336:	f7f7 f971 	bl	800461c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800d33a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d33e:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800d340:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d342:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800d344:	68a3      	ldr	r3, [r4, #8]
 800d346:	680a      	ldr	r2, [r1, #0]
 800d348:	3b01      	subs	r3, #1
 800d34a:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800d34e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d352:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800d354:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d356:	2200      	movs	r2, #0
 800d358:	9300      	str	r3, [sp, #0]
 800d35a:	2120      	movs	r1, #32
 800d35c:	462b      	mov	r3, r5
 800d35e:	f7ff ffb3 	bl	800d2c8 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800d362:	bb10      	cbnz	r0, 800d3aa <HAL_QSPI_Init+0x92>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800d364:	6822      	ldr	r2, [r4, #0]
 800d366:	69e5      	ldr	r5, [r4, #28]
 800d368:	68e3      	ldr	r3, [r4, #12]
 800d36a:	6811      	ldr	r1, [r2, #0]
 800d36c:	432b      	orrs	r3, r5
 800d36e:	6a25      	ldr	r5, [r4, #32]
 800d370:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800d374:	432b      	orrs	r3, r5
 800d376:	6865      	ldr	r5, [r4, #4]
 800d378:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800d37c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800d380:	430b      	orrs	r3, r1
 800d382:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800d384:	6855      	ldr	r5, [r2, #4]
 800d386:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800d38a:	430b      	orrs	r3, r1
 800d38c:	6921      	ldr	r1, [r4, #16]
 800d38e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d392:	4909      	ldr	r1, [pc, #36]	@ (800d3b8 <HAL_QSPI_Init+0xa0>)
 800d394:	4029      	ands	r1, r5
 800d396:	430b      	orrs	r3, r1
 800d398:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800d39a:	6813      	ldr	r3, [r2, #0]
 800d39c:	f043 0301 	orr.w	r3, r3, #1
 800d3a0:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800d3a2:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d3a4:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800d3a6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d3b0:	b003      	add	sp, #12
 800d3b2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800d3b4:	2001      	movs	r0, #1
 800d3b6:	e7fb      	b.n	800d3b0 <HAL_QSPI_Init+0x98>
 800d3b8:	ffe0f8fe 	.word	0xffe0f8fe

0800d3bc <HAL_QSPI_Command>:
{
 800d3bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3c0:	4604      	mov	r4, r0
 800d3c2:	468a      	mov	sl, r1
 800d3c4:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800d3c6:	f7fc fe5d 	bl	800a084 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800d3ca:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800d3ce:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800d3d0:	2b01      	cmp	r3, #1
 800d3d2:	d036      	beq.n	800d442 <HAL_QSPI_Command+0x86>
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	2602      	movs	r6, #2
 800d3d8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d3dc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	fa5f f983 	uxtb.w	r9, r3
 800d3e6:	d128      	bne.n	800d43a <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d3e8:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2120      	movs	r1, #32
 800d3ee:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d3f0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800d3f2:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d3f6:	f8cd 8000 	str.w	r8, [sp]
 800d3fa:	f7ff ff65 	bl	800d2c8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800d3fe:	4605      	mov	r5, r0
 800d400:	b9a0      	cbnz	r0, 800d42c <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800d402:	4602      	mov	r2, r0
 800d404:	4651      	mov	r1, sl
 800d406:	4620      	mov	r0, r4
 800d408:	f7ff fea4 	bl	800d154 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800d40c:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800d410:	b953      	cbnz	r3, 800d428 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d412:	463b      	mov	r3, r7
 800d414:	464a      	mov	r2, r9
 800d416:	4631      	mov	r1, r6
 800d418:	4620      	mov	r0, r4
 800d41a:	f8cd 8000 	str.w	r8, [sp]
 800d41e:	f7ff ff53 	bl	800d2c8 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800d422:	b960      	cbnz	r0, 800d43e <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d424:	6823      	ldr	r3, [r4, #0]
 800d426:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800d428:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800d42c:	2300      	movs	r3, #0
 800d42e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d432:	4628      	mov	r0, r5
 800d434:	b002      	add	sp, #8
 800d436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800d43a:	4635      	mov	r5, r6
 800d43c:	e7f6      	b.n	800d42c <HAL_QSPI_Command+0x70>
 800d43e:	4605      	mov	r5, r0
 800d440:	e7f4      	b.n	800d42c <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800d442:	2502      	movs	r5, #2
 800d444:	e7f5      	b.n	800d432 <HAL_QSPI_Command+0x76>

0800d446 <HAL_QSPI_Transmit>:
{
 800d446:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d44a:	4604      	mov	r4, r0
 800d44c:	4688      	mov	r8, r1
 800d44e:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800d450:	f7fc fe18 	bl	800a084 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800d454:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800d458:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800d45a:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	d04c      	beq.n	800d4fa <HAL_QSPI_Transmit+0xb4>
 800d460:	2301      	movs	r3, #1
 800d462:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d466:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	b2d8      	uxtb	r0, r3
 800d46e:	d142      	bne.n	800d4f6 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d470:	2300      	movs	r3, #0
 800d472:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800d474:	f1b8 0f00 	cmp.w	r8, #0
 800d478:	d038      	beq.n	800d4ec <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800d47a:	2312      	movs	r3, #18
 800d47c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800d480:	692b      	ldr	r3, [r5, #16]
 800d482:	3301      	adds	r3, #1
 800d484:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d486:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800d488:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d48c:	3301      	adds	r3, #1
 800d48e:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800d490:	696b      	ldr	r3, [r5, #20]
 800d492:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800d496:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800d498:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d49a:	b99b      	cbnz	r3, 800d4c4 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d49c:	4633      	mov	r3, r6
 800d49e:	2201      	movs	r2, #1
 800d4a0:	2102      	movs	r1, #2
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	9700      	str	r7, [sp, #0]
 800d4a6:	f7ff ff0f 	bl	800d2c8 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800d4aa:	b910      	cbnz	r0, 800d4b2 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d4ac:	6823      	ldr	r3, [r4, #0]
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d4be:	b002      	add	sp, #8
 800d4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800d4c4:	4633      	mov	r3, r6
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	2104      	movs	r1, #4
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	9700      	str	r7, [sp, #0]
 800d4ce:	f7ff fefb 	bl	800d2c8 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	d1ed      	bne.n	800d4b2 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800d4d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800d4de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800d4e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d4e6:	3b01      	subs	r3, #1
 800d4e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d4ea:	e7d5      	b.n	800d498 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800d4ec:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d4ee:	f043 0308 	orr.w	r3, r3, #8
 800d4f2:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800d4f4:	e7e0      	b.n	800d4b8 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800d4f6:	2002      	movs	r0, #2
 800d4f8:	e7de      	b.n	800d4b8 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800d4fa:	2002      	movs	r0, #2
 800d4fc:	e7df      	b.n	800d4be <HAL_QSPI_Transmit+0x78>

0800d4fe <HAL_QSPI_Receive>:
{
 800d4fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d502:	4604      	mov	r4, r0
 800d504:	4617      	mov	r7, r2
 800d506:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800d508:	f7fc fdbc 	bl	800a084 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800d50c:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800d50e:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800d510:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800d512:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800d516:	2b01      	cmp	r3, #1
 800d518:	d04f      	beq.n	800d5ba <HAL_QSPI_Receive+0xbc>
 800d51a:	2301      	movs	r3, #1
 800d51c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d520:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800d524:	2b01      	cmp	r3, #1
 800d526:	b2d8      	uxtb	r0, r3
 800d528:	d145      	bne.n	800d5b6 <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d52a:	2300      	movs	r3, #0
 800d52c:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800d52e:	f1b8 0f00 	cmp.w	r8, #0
 800d532:	d03b      	beq.n	800d5ac <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800d534:	2322      	movs	r3, #34	@ 0x22
 800d536:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800d53a:	692b      	ldr	r3, [r5, #16]
 800d53c:	3301      	adds	r3, #1
 800d53e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d540:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800d542:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d546:	3301      	adds	r3, #1
 800d548:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800d54a:	6969      	ldr	r1, [r5, #20]
 800d54c:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800d550:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800d554:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800d556:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800d558:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d55a:	b99b      	cbnz	r3, 800d584 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d55c:	4633      	mov	r3, r6
 800d55e:	2201      	movs	r2, #1
 800d560:	2102      	movs	r1, #2
 800d562:	4620      	mov	r0, r4
 800d564:	9700      	str	r7, [sp, #0]
 800d566:	f7ff feaf 	bl	800d2c8 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800d56a:	b910      	cbnz	r0, 800d572 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d56c:	6823      	ldr	r3, [r4, #0]
 800d56e:	2202      	movs	r2, #2
 800d570:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800d572:	2301      	movs	r3, #1
 800d574:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800d578:	2300      	movs	r3, #0
 800d57a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d57e:	b002      	add	sp, #8
 800d580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800d584:	4633      	mov	r3, r6
 800d586:	2201      	movs	r2, #1
 800d588:	2106      	movs	r1, #6
 800d58a:	4620      	mov	r0, r4
 800d58c:	9700      	str	r7, [sp, #0]
 800d58e:	f7ff fe9b 	bl	800d2c8 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800d592:	2800      	cmp	r0, #0
 800d594:	d1ed      	bne.n	800d572 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800d596:	f895 2020 	ldrb.w	r2, [r5, #32]
 800d59a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d59c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800d59e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800d5a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d5aa:	e7d5      	b.n	800d558 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800d5ac:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d5ae:	f043 0308 	orr.w	r3, r3, #8
 800d5b2:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800d5b4:	e7e0      	b.n	800d578 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800d5b6:	2002      	movs	r0, #2
 800d5b8:	e7de      	b.n	800d578 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800d5ba:	2002      	movs	r0, #2
 800d5bc:	e7df      	b.n	800d57e <HAL_QSPI_Receive+0x80>

0800d5be <HAL_QSPI_AutoPolling>:
{
 800d5be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	461f      	mov	r7, r3
 800d5c6:	4689      	mov	r9, r1
 800d5c8:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800d5ca:	f7fc fd5b 	bl	800a084 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800d5ce:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800d5d2:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d041      	beq.n	800d65c <HAL_QSPI_AutoPolling+0x9e>
 800d5d8:	2301      	movs	r3, #1
 800d5da:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d5de:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	fa5f f883 	uxtb.w	r8, r3
 800d5e8:	d136      	bne.n	800d658 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800d5ea:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d5ec:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d5ee:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d5f0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800d5f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	9700      	str	r7, [sp, #0]
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	f7ff fe64 	bl	800d2c8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800d600:	bb20      	cbnz	r0, 800d64c <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800d602:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d604:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800d606:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800d608:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800d60a:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800d60c:	686b      	ldr	r3, [r5, #4]
 800d60e:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800d610:	68ab      	ldr	r3, [r5, #8]
 800d612:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800d614:	6813      	ldr	r3, [r2, #0]
 800d616:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800d61a:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d61c:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800d61e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d622:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d624:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800d628:	68eb      	ldr	r3, [r5, #12]
 800d62a:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d62e:	f7ff fd91 	bl	800d154 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800d632:	4633      	mov	r3, r6
 800d634:	4642      	mov	r2, r8
 800d636:	2108      	movs	r1, #8
 800d638:	4620      	mov	r0, r4
 800d63a:	9700      	str	r7, [sp, #0]
 800d63c:	f7ff fe44 	bl	800d2c8 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800d640:	b920      	cbnz	r0, 800d64c <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800d642:	6823      	ldr	r3, [r4, #0]
 800d644:	2208      	movs	r2, #8
 800d646:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800d648:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800d64c:	2300      	movs	r3, #0
 800d64e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d652:	b003      	add	sp, #12
 800d654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800d658:	2002      	movs	r0, #2
 800d65a:	e7f7      	b.n	800d64c <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800d65c:	2002      	movs	r0, #2
 800d65e:	e7f8      	b.n	800d652 <HAL_QSPI_AutoPolling+0x94>

0800d660 <HAL_QSPI_MemoryMapped>:
{
 800d660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d662:	4604      	mov	r4, r0
 800d664:	4616      	mov	r6, r2
 800d666:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800d668:	f7fc fd0c 	bl	800a084 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800d66c:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800d670:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800d672:	2a01      	cmp	r2, #1
 800d674:	d033      	beq.n	800d6de <HAL_QSPI_MemoryMapped+0x7e>
 800d676:	2201      	movs	r2, #1
 800d678:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d67c:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800d680:	2a01      	cmp	r2, #1
 800d682:	d12a      	bne.n	800d6da <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d684:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800d686:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d688:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d68a:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800d68c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d690:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d692:	9100      	str	r1, [sp, #0]
 800d694:	2120      	movs	r1, #32
 800d696:	f7ff fe17 	bl	800d2c8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800d69a:	4605      	mov	r5, r0
 800d69c:	b9b8      	cbnz	r0, 800d6ce <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800d69e:	6823      	ldr	r3, [r4, #0]
 800d6a0:	6872      	ldr	r2, [r6, #4]
 800d6a2:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800d6a4:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800d6a6:	f020 0008 	bic.w	r0, r0, #8
 800d6aa:	ea40 0002 	orr.w	r0, r0, r2
 800d6ae:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800d6b0:	d107      	bne.n	800d6c2 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800d6b2:	6832      	ldr	r2, [r6, #0]
 800d6b4:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800d6b6:	2210      	movs	r2, #16
 800d6b8:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800d6c0:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800d6c2:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800d6c6:	4639      	mov	r1, r7
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f7ff fd43 	bl	800d154 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	b003      	add	sp, #12
 800d6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800d6da:	2502      	movs	r5, #2
 800d6dc:	e7f7      	b.n	800d6ce <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800d6de:	2502      	movs	r5, #2
 800d6e0:	e7f8      	b.n	800d6d4 <HAL_QSPI_MemoryMapped+0x74>
	...

0800d6e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d6e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	b918      	cbnz	r0, 800d6f4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800d6ec:	2001      	movs	r0, #1
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 800d6ee:	b002      	add	sp, #8
 800d6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d6f4:	6803      	ldr	r3, [r0, #0]
 800d6f6:	07de      	lsls	r6, r3, #31
 800d6f8:	d410      	bmi.n	800d71c <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d6fa:	6823      	ldr	r3, [r4, #0]
 800d6fc:	079d      	lsls	r5, r3, #30
 800d6fe:	d45e      	bmi.n	800d7be <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d700:	6823      	ldr	r3, [r4, #0]
 800d702:	0719      	lsls	r1, r3, #28
 800d704:	f100 80a3 	bmi.w	800d84e <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d708:	6823      	ldr	r3, [r4, #0]
 800d70a:	075a      	lsls	r2, r3, #29
 800d70c:	f100 80c4 	bmi.w	800d898 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d710:	69a2      	ldr	r2, [r4, #24]
 800d712:	2a00      	cmp	r2, #0
 800d714:	f040 812e 	bne.w	800d974 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 800d718:	2000      	movs	r0, #0
 800d71a:	e7e8      	b.n	800d6ee <HAL_RCC_OscConfig+0xa>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d71c:	4b93      	ldr	r3, [pc, #588]	@ (800d96c <HAL_RCC_OscConfig+0x288>)
 800d71e:	689a      	ldr	r2, [r3, #8]
 800d720:	f002 020c 	and.w	r2, r2, #12
 800d724:	2a04      	cmp	r2, #4
 800d726:	d007      	beq.n	800d738 <HAL_RCC_OscConfig+0x54>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d728:	689a      	ldr	r2, [r3, #8]
 800d72a:	f002 020c 	and.w	r2, r2, #12
 800d72e:	2a08      	cmp	r2, #8
 800d730:	d10a      	bne.n	800d748 <HAL_RCC_OscConfig+0x64>
 800d732:	685b      	ldr	r3, [r3, #4]
 800d734:	0259      	lsls	r1, r3, #9
 800d736:	d507      	bpl.n	800d748 <HAL_RCC_OscConfig+0x64>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d738:	4b8c      	ldr	r3, [pc, #560]	@ (800d96c <HAL_RCC_OscConfig+0x288>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	039a      	lsls	r2, r3, #14
 800d73e:	d5dc      	bpl.n	800d6fa <HAL_RCC_OscConfig+0x16>
 800d740:	6863      	ldr	r3, [r4, #4]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d1d9      	bne.n	800d6fa <HAL_RCC_OscConfig+0x16>
 800d746:	e7d1      	b.n	800d6ec <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d748:	6863      	ldr	r3, [r4, #4]
 800d74a:	4d88      	ldr	r5, [pc, #544]	@ (800d96c <HAL_RCC_OscConfig+0x288>)
 800d74c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d750:	d111      	bne.n	800d776 <HAL_RCC_OscConfig+0x92>
 800d752:	682b      	ldr	r3, [r5, #0]
 800d754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d758:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d75a:	f7fc fc93 	bl	800a084 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d75e:	4e83      	ldr	r6, [pc, #524]	@ (800d96c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 800d760:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d762:	6833      	ldr	r3, [r6, #0]
 800d764:	039b      	lsls	r3, r3, #14
 800d766:	d4c8      	bmi.n	800d6fa <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d768:	f7fc fc8c 	bl	800a084 <HAL_GetTick>
 800d76c:	1b40      	subs	r0, r0, r5
 800d76e:	2864      	cmp	r0, #100	@ 0x64
 800d770:	d9f7      	bls.n	800d762 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800d772:	2003      	movs	r0, #3
 800d774:	e7bb      	b.n	800d6ee <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d776:	b99b      	cbnz	r3, 800d7a0 <HAL_RCC_OscConfig+0xbc>
 800d778:	682b      	ldr	r3, [r5, #0]
 800d77a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d77e:	602b      	str	r3, [r5, #0]
 800d780:	682b      	ldr	r3, [r5, #0]
 800d782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d786:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d788:	f7fc fc7c 	bl	800a084 <HAL_GetTick>
 800d78c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d78e:	682b      	ldr	r3, [r5, #0]
 800d790:	039f      	lsls	r7, r3, #14
 800d792:	d5b2      	bpl.n	800d6fa <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d794:	f7fc fc76 	bl	800a084 <HAL_GetTick>
 800d798:	1b80      	subs	r0, r0, r6
 800d79a:	2864      	cmp	r0, #100	@ 0x64
 800d79c:	d9f7      	bls.n	800d78e <HAL_RCC_OscConfig+0xaa>
 800d79e:	e7e8      	b.n	800d772 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d7a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d7a4:	682b      	ldr	r3, [r5, #0]
 800d7a6:	d103      	bne.n	800d7b0 <HAL_RCC_OscConfig+0xcc>
 800d7a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d7ac:	602b      	str	r3, [r5, #0]
 800d7ae:	e7d0      	b.n	800d752 <HAL_RCC_OscConfig+0x6e>
 800d7b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d7b4:	602b      	str	r3, [r5, #0]
 800d7b6:	682b      	ldr	r3, [r5, #0]
 800d7b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d7bc:	e7cc      	b.n	800d758 <HAL_RCC_OscConfig+0x74>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d7be:	4b6b      	ldr	r3, [pc, #428]	@ (800d96c <HAL_RCC_OscConfig+0x288>)
 800d7c0:	689a      	ldr	r2, [r3, #8]
 800d7c2:	f012 0f0c 	tst.w	r2, #12
 800d7c6:	d007      	beq.n	800d7d8 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d7c8:	689a      	ldr	r2, [r3, #8]
 800d7ca:	f002 020c 	and.w	r2, r2, #12
 800d7ce:	2a08      	cmp	r2, #8
 800d7d0:	d111      	bne.n	800d7f6 <HAL_RCC_OscConfig+0x112>
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	025d      	lsls	r5, r3, #9
 800d7d6:	d40e      	bmi.n	800d7f6 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d7d8:	4a64      	ldr	r2, [pc, #400]	@ (800d96c <HAL_RCC_OscConfig+0x288>)
 800d7da:	6813      	ldr	r3, [r2, #0]
 800d7dc:	0799      	lsls	r1, r3, #30
 800d7de:	d502      	bpl.n	800d7e6 <HAL_RCC_OscConfig+0x102>
 800d7e0:	68e3      	ldr	r3, [r4, #12]
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d182      	bne.n	800d6ec <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7e6:	6813      	ldr	r3, [r2, #0]
 800d7e8:	6921      	ldr	r1, [r4, #16]
 800d7ea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d7ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800d7f2:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d7f4:	e784      	b.n	800d700 <HAL_RCC_OscConfig+0x1c>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d7f6:	68e3      	ldr	r3, [r4, #12]
 800d7f8:	4d5c      	ldr	r5, [pc, #368]	@ (800d96c <HAL_RCC_OscConfig+0x288>)
 800d7fa:	b1bb      	cbz	r3, 800d82c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 800d7fc:	682b      	ldr	r3, [r5, #0]
 800d7fe:	f043 0301 	orr.w	r3, r3, #1
 800d802:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d804:	f7fc fc3e 	bl	800a084 <HAL_GetTick>
 800d808:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d80a:	682b      	ldr	r3, [r5, #0]
 800d80c:	079b      	lsls	r3, r3, #30
 800d80e:	d507      	bpl.n	800d820 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d810:	682b      	ldr	r3, [r5, #0]
 800d812:	6922      	ldr	r2, [r4, #16]
 800d814:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d818:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d81c:	602b      	str	r3, [r5, #0]
 800d81e:	e76f      	b.n	800d700 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d820:	f7fc fc30 	bl	800a084 <HAL_GetTick>
 800d824:	1b80      	subs	r0, r0, r6
 800d826:	2802      	cmp	r0, #2
 800d828:	d9ef      	bls.n	800d80a <HAL_RCC_OscConfig+0x126>
 800d82a:	e7a2      	b.n	800d772 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800d82c:	682b      	ldr	r3, [r5, #0]
 800d82e:	f023 0301 	bic.w	r3, r3, #1
 800d832:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d834:	f7fc fc26 	bl	800a084 <HAL_GetTick>
 800d838:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d83a:	682b      	ldr	r3, [r5, #0]
 800d83c:	079f      	lsls	r7, r3, #30
 800d83e:	f57f af5f 	bpl.w	800d700 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d842:	f7fc fc1f 	bl	800a084 <HAL_GetTick>
 800d846:	1b80      	subs	r0, r0, r6
 800d848:	2802      	cmp	r0, #2
 800d84a:	d9f6      	bls.n	800d83a <HAL_RCC_OscConfig+0x156>
 800d84c:	e791      	b.n	800d772 <HAL_RCC_OscConfig+0x8e>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d84e:	6963      	ldr	r3, [r4, #20]
 800d850:	4d46      	ldr	r5, [pc, #280]	@ (800d96c <HAL_RCC_OscConfig+0x288>)
 800d852:	b183      	cbz	r3, 800d876 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 800d854:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800d856:	f043 0301 	orr.w	r3, r3, #1
 800d85a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800d85c:	f7fc fc12 	bl	800a084 <HAL_GetTick>
 800d860:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d862:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800d864:	079b      	lsls	r3, r3, #30
 800d866:	f53f af4f 	bmi.w	800d708 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d86a:	f7fc fc0b 	bl	800a084 <HAL_GetTick>
 800d86e:	1b80      	subs	r0, r0, r6
 800d870:	2802      	cmp	r0, #2
 800d872:	d9f6      	bls.n	800d862 <HAL_RCC_OscConfig+0x17e>
 800d874:	e77d      	b.n	800d772 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800d876:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800d878:	f023 0301 	bic.w	r3, r3, #1
 800d87c:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800d87e:	f7fc fc01 	bl	800a084 <HAL_GetTick>
 800d882:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d884:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800d886:	079f      	lsls	r7, r3, #30
 800d888:	f57f af3e 	bpl.w	800d708 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d88c:	f7fc fbfa 	bl	800a084 <HAL_GetTick>
 800d890:	1b80      	subs	r0, r0, r6
 800d892:	2802      	cmp	r0, #2
 800d894:	d9f6      	bls.n	800d884 <HAL_RCC_OscConfig+0x1a0>
 800d896:	e76c      	b.n	800d772 <HAL_RCC_OscConfig+0x8e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d898:	4b34      	ldr	r3, [pc, #208]	@ (800d96c <HAL_RCC_OscConfig+0x288>)
 800d89a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d89c:	00d5      	lsls	r5, r2, #3
 800d89e:	d427      	bmi.n	800d8f0 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800d8a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 800d8a2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800d8a4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800d8a8:	641a      	str	r2, [r3, #64]	@ 0x40
 800d8aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d8b0:	9301      	str	r3, [sp, #4]
 800d8b2:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d8b4:	4d2e      	ldr	r5, [pc, #184]	@ (800d970 <HAL_RCC_OscConfig+0x28c>)
 800d8b6:	682b      	ldr	r3, [r5, #0]
 800d8b8:	05d8      	lsls	r0, r3, #23
 800d8ba:	d51b      	bpl.n	800d8f4 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d8bc:	68a3      	ldr	r3, [r4, #8]
 800d8be:	4d2b      	ldr	r5, [pc, #172]	@ (800d96c <HAL_RCC_OscConfig+0x288>)
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d127      	bne.n	800d914 <HAL_RCC_OscConfig+0x230>
 800d8c4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d8c6:	f043 0301 	orr.w	r3, r3, #1
 800d8ca:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d8cc:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800d8d0:	f7fc fbd8 	bl	800a084 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d8d4:	4e25      	ldr	r6, [pc, #148]	@ (800d96c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800d8d6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d8d8:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800d8da:	079a      	lsls	r2, r3, #30
 800d8dc:	d53f      	bpl.n	800d95e <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 800d8de:	2f00      	cmp	r7, #0
 800d8e0:	f43f af16 	beq.w	800d710 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d8e4:	4a21      	ldr	r2, [pc, #132]	@ (800d96c <HAL_RCC_OscConfig+0x288>)
 800d8e6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800d8e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d8ec:	6413      	str	r3, [r2, #64]	@ 0x40
 800d8ee:	e70f      	b.n	800d710 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 800d8f0:	2700      	movs	r7, #0
 800d8f2:	e7df      	b.n	800d8b4 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 800d8f4:	682b      	ldr	r3, [r5, #0]
 800d8f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d8fa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800d8fc:	f7fc fbc2 	bl	800a084 <HAL_GetTick>
 800d900:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d902:	682b      	ldr	r3, [r5, #0]
 800d904:	05d9      	lsls	r1, r3, #23
 800d906:	d4d9      	bmi.n	800d8bc <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d908:	f7fc fbbc 	bl	800a084 <HAL_GetTick>
 800d90c:	1b80      	subs	r0, r0, r6
 800d90e:	2864      	cmp	r0, #100	@ 0x64
 800d910:	d9f7      	bls.n	800d902 <HAL_RCC_OscConfig+0x21e>
 800d912:	e72e      	b.n	800d772 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d914:	b9ab      	cbnz	r3, 800d942 <HAL_RCC_OscConfig+0x25e>
 800d916:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d918:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d91c:	f023 0301 	bic.w	r3, r3, #1
 800d920:	672b      	str	r3, [r5, #112]	@ 0x70
 800d922:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d924:	f023 0304 	bic.w	r3, r3, #4
 800d928:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800d92a:	f7fc fbab 	bl	800a084 <HAL_GetTick>
 800d92e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d930:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d932:	079b      	lsls	r3, r3, #30
 800d934:	d5d3      	bpl.n	800d8de <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d936:	f7fc fba5 	bl	800a084 <HAL_GetTick>
 800d93a:	1b80      	subs	r0, r0, r6
 800d93c:	4540      	cmp	r0, r8
 800d93e:	d9f7      	bls.n	800d930 <HAL_RCC_OscConfig+0x24c>
 800d940:	e717      	b.n	800d772 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d942:	2b05      	cmp	r3, #5
 800d944:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d946:	d103      	bne.n	800d950 <HAL_RCC_OscConfig+0x26c>
 800d948:	f043 0304 	orr.w	r3, r3, #4
 800d94c:	672b      	str	r3, [r5, #112]	@ 0x70
 800d94e:	e7b9      	b.n	800d8c4 <HAL_RCC_OscConfig+0x1e0>
 800d950:	f023 0301 	bic.w	r3, r3, #1
 800d954:	672b      	str	r3, [r5, #112]	@ 0x70
 800d956:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d958:	f023 0304 	bic.w	r3, r3, #4
 800d95c:	e7b5      	b.n	800d8ca <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d95e:	f7fc fb91 	bl	800a084 <HAL_GetTick>
 800d962:	1b40      	subs	r0, r0, r5
 800d964:	4540      	cmp	r0, r8
 800d966:	d9b7      	bls.n	800d8d8 <HAL_RCC_OscConfig+0x1f4>
 800d968:	e703      	b.n	800d772 <HAL_RCC_OscConfig+0x8e>
 800d96a:	bf00      	nop
 800d96c:	40023800 	.word	0x40023800
 800d970:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d974:	4d3c      	ldr	r5, [pc, #240]	@ (800da68 <HAL_RCC_OscConfig+0x384>)
 800d976:	68ab      	ldr	r3, [r5, #8]
 800d978:	f003 030c 	and.w	r3, r3, #12
 800d97c:	2b08      	cmp	r3, #8
 800d97e:	d042      	beq.n	800da06 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 800d980:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d982:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800d984:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d988:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d98a:	d12f      	bne.n	800d9ec <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 800d98c:	f7fc fb7a 	bl	800a084 <HAL_GetTick>
 800d990:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d992:	682b      	ldr	r3, [r5, #0]
 800d994:	0199      	lsls	r1, r3, #6
 800d996:	d423      	bmi.n	800d9e0 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d998:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800d99c:	4313      	orrs	r3, r2
 800d99e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d9a0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800d9a4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d9a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d9aa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800d9ac:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800d9b0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d9b2:	0852      	lsrs	r2, r2, #1
 800d9b4:	3a01      	subs	r2, #1
 800d9b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9ba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800d9bc:	682b      	ldr	r3, [r5, #0]
 800d9be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d9c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d9c4:	f7fc fb5e 	bl	800a084 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d9c8:	4d27      	ldr	r5, [pc, #156]	@ (800da68 <HAL_RCC_OscConfig+0x384>)
        tickstart = HAL_GetTick();
 800d9ca:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d9cc:	682b      	ldr	r3, [r5, #0]
 800d9ce:	019a      	lsls	r2, r3, #6
 800d9d0:	f53f aea2 	bmi.w	800d718 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d9d4:	f7fc fb56 	bl	800a084 <HAL_GetTick>
 800d9d8:	1b00      	subs	r0, r0, r4
 800d9da:	2802      	cmp	r0, #2
 800d9dc:	d9f6      	bls.n	800d9cc <HAL_RCC_OscConfig+0x2e8>
 800d9de:	e6c8      	b.n	800d772 <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d9e0:	f7fc fb50 	bl	800a084 <HAL_GetTick>
 800d9e4:	1b80      	subs	r0, r0, r6
 800d9e6:	2802      	cmp	r0, #2
 800d9e8:	d9d3      	bls.n	800d992 <HAL_RCC_OscConfig+0x2ae>
 800d9ea:	e6c2      	b.n	800d772 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 800d9ec:	f7fc fb4a 	bl	800a084 <HAL_GetTick>
 800d9f0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d9f2:	682b      	ldr	r3, [r5, #0]
 800d9f4:	019b      	lsls	r3, r3, #6
 800d9f6:	f57f ae8f 	bpl.w	800d718 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d9fa:	f7fc fb43 	bl	800a084 <HAL_GetTick>
 800d9fe:	1b00      	subs	r0, r0, r4
 800da00:	2802      	cmp	r0, #2
 800da02:	d9f6      	bls.n	800d9f2 <HAL_RCC_OscConfig+0x30e>
 800da04:	e6b5      	b.n	800d772 <HAL_RCC_OscConfig+0x8e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800da06:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800da08:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800da0a:	f43f ae6f 	beq.w	800d6ec <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800da0e:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800da12:	69e1      	ldr	r1, [r4, #28]
 800da14:	428a      	cmp	r2, r1
 800da16:	f47f ae69 	bne.w	800d6ec <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800da1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800da1e:	6a21      	ldr	r1, [r4, #32]
 800da20:	428a      	cmp	r2, r1
 800da22:	f47f ae63 	bne.w	800d6ec <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800da26:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800da2a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800da2c:	401a      	ands	r2, r3
 800da2e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800da32:	f47f ae5b 	bne.w	800d6ec <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800da36:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800da38:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800da3c:	0852      	lsrs	r2, r2, #1
 800da3e:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800da40:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800da44:	f47f ae52 	bne.w	800d6ec <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800da48:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800da4c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800da4e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800da52:	f47f ae4b 	bne.w	800d6ec <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800da56:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800da58:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800da5c:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800da60:	bf14      	ite	ne
 800da62:	2001      	movne	r0, #1
 800da64:	2000      	moveq	r0, #0
 800da66:	e642      	b.n	800d6ee <HAL_RCC_OscConfig+0xa>
 800da68:	40023800 	.word	0x40023800

0800da6c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800da6c:	4913      	ldr	r1, [pc, #76]	@ (800dabc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800da6e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800da70:	688b      	ldr	r3, [r1, #8]
 800da72:	f003 030c 	and.w	r3, r3, #12
 800da76:	2b04      	cmp	r3, #4
 800da78:	d01b      	beq.n	800dab2 <HAL_RCC_GetSysClockFreq+0x46>
 800da7a:	2b08      	cmp	r3, #8
 800da7c:	d11b      	bne.n	800dab6 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800da7e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800da80:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800da82:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800da84:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800da88:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800da8c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800da90:	bf1a      	itte	ne
 800da92:	480b      	ldrne	r0, [pc, #44]	@ (800dac0 <HAL_RCC_GetSysClockFreq+0x54>)
 800da94:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800da96:	480b      	ldreq	r0, [pc, #44]	@ (800dac4 <HAL_RCC_GetSysClockFreq+0x58>)
 800da98:	fba1 0100 	umull	r0, r1, r1, r0
 800da9c:	f7f2 fe2c 	bl	80006f8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800daa0:	4b06      	ldr	r3, [pc, #24]	@ (800dabc <HAL_RCC_GetSysClockFreq+0x50>)
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800daa8:	3301      	adds	r3, #1
 800daaa:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800daac:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800dab0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dab2:	4803      	ldr	r0, [pc, #12]	@ (800dac0 <HAL_RCC_GetSysClockFreq+0x54>)
 800dab4:	e7fc      	b.n	800dab0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800dab6:	4803      	ldr	r0, [pc, #12]	@ (800dac4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800dab8:	e7fa      	b.n	800dab0 <HAL_RCC_GetSysClockFreq+0x44>
 800daba:	bf00      	nop
 800dabc:	40023800 	.word	0x40023800
 800dac0:	017d7840 	.word	0x017d7840
 800dac4:	00f42400 	.word	0x00f42400

0800dac8 <HAL_RCC_ClockConfig>:
{
 800dac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dacc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800dace:	4604      	mov	r4, r0
 800dad0:	b910      	cbnz	r0, 800dad8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800dad2:	2001      	movs	r0, #1
}
 800dad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dad8:	4a45      	ldr	r2, [pc, #276]	@ (800dbf0 <HAL_RCC_ClockConfig+0x128>)
 800dada:	6813      	ldr	r3, [r2, #0]
 800dadc:	f003 030f 	and.w	r3, r3, #15
 800dae0:	428b      	cmp	r3, r1
 800dae2:	d328      	bcc.n	800db36 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dae4:	6821      	ldr	r1, [r4, #0]
 800dae6:	078f      	lsls	r7, r1, #30
 800dae8:	d430      	bmi.n	800db4c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800daea:	07c8      	lsls	r0, r1, #31
 800daec:	d443      	bmi.n	800db76 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800daee:	4a40      	ldr	r2, [pc, #256]	@ (800dbf0 <HAL_RCC_ClockConfig+0x128>)
 800daf0:	6813      	ldr	r3, [r2, #0]
 800daf2:	f003 030f 	and.w	r3, r3, #15
 800daf6:	42ab      	cmp	r3, r5
 800daf8:	d866      	bhi.n	800dbc8 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dafa:	6822      	ldr	r2, [r4, #0]
 800dafc:	0751      	lsls	r1, r2, #29
 800dafe:	d46f      	bmi.n	800dbe0 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800db00:	0713      	lsls	r3, r2, #28
 800db02:	d507      	bpl.n	800db14 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800db04:	4a3b      	ldr	r2, [pc, #236]	@ (800dbf4 <HAL_RCC_ClockConfig+0x12c>)
 800db06:	6921      	ldr	r1, [r4, #16]
 800db08:	6893      	ldr	r3, [r2, #8]
 800db0a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800db0e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800db12:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800db14:	f7ff ffaa 	bl	800da6c <HAL_RCC_GetSysClockFreq>
 800db18:	4b36      	ldr	r3, [pc, #216]	@ (800dbf4 <HAL_RCC_ClockConfig+0x12c>)
 800db1a:	4a37      	ldr	r2, [pc, #220]	@ (800dbf8 <HAL_RCC_ClockConfig+0x130>)
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800db22:	5cd3      	ldrb	r3, [r2, r3]
 800db24:	40d8      	lsrs	r0, r3
 800db26:	4b35      	ldr	r3, [pc, #212]	@ (800dbfc <HAL_RCC_ClockConfig+0x134>)
 800db28:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800db2a:	4b35      	ldr	r3, [pc, #212]	@ (800dc00 <HAL_RCC_ClockConfig+0x138>)
 800db2c:	6818      	ldr	r0, [r3, #0]
 800db2e:	f7f6 fea7 	bl	8004880 <HAL_InitTick>
  return HAL_OK;
 800db32:	2000      	movs	r0, #0
 800db34:	e7ce      	b.n	800dad4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db36:	6813      	ldr	r3, [r2, #0]
 800db38:	f023 030f 	bic.w	r3, r3, #15
 800db3c:	430b      	orrs	r3, r1
 800db3e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800db40:	6813      	ldr	r3, [r2, #0]
 800db42:	f003 030f 	and.w	r3, r3, #15
 800db46:	428b      	cmp	r3, r1
 800db48:	d1c3      	bne.n	800dad2 <HAL_RCC_ClockConfig+0xa>
 800db4a:	e7cb      	b.n	800dae4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db4c:	f011 0f04 	tst.w	r1, #4
 800db50:	4b28      	ldr	r3, [pc, #160]	@ (800dbf4 <HAL_RCC_ClockConfig+0x12c>)
 800db52:	d003      	beq.n	800db5c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800db54:	689a      	ldr	r2, [r3, #8]
 800db56:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 800db5a:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800db5c:	070e      	lsls	r6, r1, #28
 800db5e:	d503      	bpl.n	800db68 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800db60:	689a      	ldr	r2, [r3, #8]
 800db62:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800db66:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800db68:	689a      	ldr	r2, [r3, #8]
 800db6a:	68a0      	ldr	r0, [r4, #8]
 800db6c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800db70:	4302      	orrs	r2, r0
 800db72:	609a      	str	r2, [r3, #8]
 800db74:	e7b9      	b.n	800daea <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800db76:	6861      	ldr	r1, [r4, #4]
 800db78:	4b1e      	ldr	r3, [pc, #120]	@ (800dbf4 <HAL_RCC_ClockConfig+0x12c>)
 800db7a:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800db7c:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800db7e:	d11b      	bne.n	800dbb8 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800db80:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800db84:	d0a5      	beq.n	800dad2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800db86:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800db88:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db8c:	4f19      	ldr	r7, [pc, #100]	@ (800dbf4 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800db8e:	f022 0203 	bic.w	r2, r2, #3
 800db92:	430a      	orrs	r2, r1
 800db94:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800db96:	f7fc fa75 	bl	800a084 <HAL_GetTick>
 800db9a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	6862      	ldr	r2, [r4, #4]
 800dba0:	f003 030c 	and.w	r3, r3, #12
 800dba4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800dba8:	d0a1      	beq.n	800daee <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dbaa:	f7fc fa6b 	bl	800a084 <HAL_GetTick>
 800dbae:	1b80      	subs	r0, r0, r6
 800dbb0:	4540      	cmp	r0, r8
 800dbb2:	d9f3      	bls.n	800db9c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800dbb4:	2003      	movs	r0, #3
 800dbb6:	e78d      	b.n	800dad4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dbb8:	2902      	cmp	r1, #2
 800dbba:	d102      	bne.n	800dbc2 <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dbbc:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800dbc0:	e7e0      	b.n	800db84 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dbc2:	f012 0f02 	tst.w	r2, #2
 800dbc6:	e7dd      	b.n	800db84 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dbc8:	6813      	ldr	r3, [r2, #0]
 800dbca:	f023 030f 	bic.w	r3, r3, #15
 800dbce:	432b      	orrs	r3, r5
 800dbd0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dbd2:	6813      	ldr	r3, [r2, #0]
 800dbd4:	f003 030f 	and.w	r3, r3, #15
 800dbd8:	42ab      	cmp	r3, r5
 800dbda:	f47f af7a 	bne.w	800dad2 <HAL_RCC_ClockConfig+0xa>
 800dbde:	e78c      	b.n	800dafa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dbe0:	4904      	ldr	r1, [pc, #16]	@ (800dbf4 <HAL_RCC_ClockConfig+0x12c>)
 800dbe2:	68e0      	ldr	r0, [r4, #12]
 800dbe4:	688b      	ldr	r3, [r1, #8]
 800dbe6:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800dbea:	4303      	orrs	r3, r0
 800dbec:	608b      	str	r3, [r1, #8]
 800dbee:	e787      	b.n	800db00 <HAL_RCC_ClockConfig+0x38>
 800dbf0:	40023c00 	.word	0x40023c00
 800dbf4:	40023800 	.word	0x40023800
 800dbf8:	0802e147 	.word	0x0802e147
 800dbfc:	20000060 	.word	0x20000060
 800dc00:	20000068 	.word	0x20000068

0800dc04 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800dc04:	4b04      	ldr	r3, [pc, #16]	@ (800dc18 <HAL_RCC_GetPCLK1Freq+0x14>)
 800dc06:	4a05      	ldr	r2, [pc, #20]	@ (800dc1c <HAL_RCC_GetPCLK1Freq+0x18>)
 800dc08:	689b      	ldr	r3, [r3, #8]
 800dc0a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800dc0e:	5cd3      	ldrb	r3, [r2, r3]
 800dc10:	4a03      	ldr	r2, [pc, #12]	@ (800dc20 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800dc12:	6810      	ldr	r0, [r2, #0]
}
 800dc14:	40d8      	lsrs	r0, r3
 800dc16:	4770      	bx	lr
 800dc18:	40023800 	.word	0x40023800
 800dc1c:	0802e13f 	.word	0x0802e13f
 800dc20:	20000060 	.word	0x20000060

0800dc24 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800dc24:	230f      	movs	r3, #15
 800dc26:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dc28:	4b0b      	ldr	r3, [pc, #44]	@ (800dc58 <HAL_RCC_GetClockConfig+0x34>)
 800dc2a:	689a      	ldr	r2, [r3, #8]
 800dc2c:	f002 0203 	and.w	r2, r2, #3
 800dc30:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800dc32:	689a      	ldr	r2, [r3, #8]
 800dc34:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800dc38:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800dc3a:	689a      	ldr	r2, [r3, #8]
 800dc3c:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 800dc40:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800dc42:	689b      	ldr	r3, [r3, #8]
 800dc44:	08db      	lsrs	r3, r3, #3
 800dc46:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800dc4a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dc4c:	4b03      	ldr	r3, [pc, #12]	@ (800dc5c <HAL_RCC_GetClockConfig+0x38>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f003 030f 	and.w	r3, r3, #15
 800dc54:	600b      	str	r3, [r1, #0]
}
 800dc56:	4770      	bx	lr
 800dc58:	40023800 	.word	0x40023800
 800dc5c:	40023c00 	.word	0x40023c00

0800dc60 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800dc60:	6803      	ldr	r3, [r0, #0]
{
 800dc62:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800dc66:	f013 0601 	ands.w	r6, r3, #1
{
 800dc6a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800dc6c:	d00b      	beq.n	800dc86 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800dc6e:	4ab1      	ldr	r2, [pc, #708]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800dc70:	6891      	ldr	r1, [r2, #8]
 800dc72:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 800dc76:	6091      	str	r1, [r2, #8]
 800dc78:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 800dc7a:	6891      	ldr	r1, [r2, #8]
 800dc7c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800dc7e:	fab6 f686 	clz	r6, r6
 800dc82:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800dc84:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800dc86:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 800dc8a:	d012      	beq.n	800dcb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dc8c:	49a9      	ldr	r1, [pc, #676]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800dc8e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800dc90:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800dc94:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dc98:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1;
 800dc9c:	bf08      	it	eq
 800dc9e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dca0:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800dca4:	bf16      	itet	ne
 800dca6:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800dcaa:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800dcac:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dcae:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800dcb2:	02d9      	lsls	r1, r3, #11
 800dcb4:	d510      	bpl.n	800dcd8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800dcb6:	489f      	ldr	r0, [pc, #636]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800dcb8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800dcba:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800dcbe:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800dcc2:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800dcc6:	ea42 0201 	orr.w	r2, r2, r1
 800dcca:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800dcce:	f000 81aa 	beq.w	800e026 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800dcd2:	2900      	cmp	r1, #0
 800dcd4:	bf08      	it	eq
 800dcd6:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800dcd8:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800dcdc:	bf18      	it	ne
 800dcde:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800dce0:	069a      	lsls	r2, r3, #26
 800dce2:	d532      	bpl.n	800dd4a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800dce4:	4b93      	ldr	r3, [pc, #588]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800dce6:	4f94      	ldr	r7, [pc, #592]	@ (800df38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800dce8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dcea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800dcee:	641a      	str	r2, [r3, #64]	@ 0x40
 800dcf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dcf6:	9301      	str	r3, [sp, #4]
 800dcf8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd00:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd02:	f7fc f9bf 	bl	800a084 <HAL_GetTick>
 800dd06:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	05db      	lsls	r3, r3, #23
 800dd0c:	f140 818d 	bpl.w	800e02a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800dd10:	4f88      	ldr	r7, [pc, #544]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800dd12:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800dd14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800dd16:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800dd1a:	f040 8191 	bne.w	800e040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dd1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dd20:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800dd24:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800dd28:	4a82      	ldr	r2, [pc, #520]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800dd2a:	f040 81ae 	bne.w	800e08a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800dd2e:	6891      	ldr	r1, [r2, #8]
 800dd30:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 800dd34:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 800dd38:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800dd3c:	4301      	orrs	r1, r0
 800dd3e:	6091      	str	r1, [r2, #8]
 800dd40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dd44:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800dd46:	430b      	orrs	r3, r1
 800dd48:	6713      	str	r3, [r2, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800dd4a:	6823      	ldr	r3, [r4, #0]
 800dd4c:	06da      	lsls	r2, r3, #27
 800dd4e:	d50c      	bpl.n	800dd6a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800dd50:	4a78      	ldr	r2, [pc, #480]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800dd52:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 800dd56:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800dd5a:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 800dd5e:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 800dd62:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800dd64:	4301      	orrs	r1, r0
 800dd66:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dd6a:	045f      	lsls	r7, r3, #17
 800dd6c:	d508      	bpl.n	800dd80 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dd6e:	4971      	ldr	r1, [pc, #452]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800dd70:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800dd72:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800dd76:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800dd7a:	4302      	orrs	r2, r0
 800dd7c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dd80:	0418      	lsls	r0, r3, #16
 800dd82:	d508      	bpl.n	800dd96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dd84:	496b      	ldr	r1, [pc, #428]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800dd86:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800dd88:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800dd8c:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800dd90:	4302      	orrs	r2, r0
 800dd92:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dd96:	03d9      	lsls	r1, r3, #15
 800dd98:	d508      	bpl.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800dd9a:	4966      	ldr	r1, [pc, #408]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800dd9c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800dd9e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800dda2:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800dda6:	4302      	orrs	r2, r0
 800dda8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ddac:	039a      	lsls	r2, r3, #14
 800ddae:	d508      	bpl.n	800ddc2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ddb0:	4960      	ldr	r1, [pc, #384]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ddb2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800ddb4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800ddb8:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800ddbc:	4302      	orrs	r2, r0
 800ddbe:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ddc2:	065f      	lsls	r7, r3, #25
 800ddc4:	d508      	bpl.n	800ddd8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ddc6:	495b      	ldr	r1, [pc, #364]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ddc8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800ddca:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800ddce:	f022 0203 	bic.w	r2, r2, #3
 800ddd2:	4302      	orrs	r2, r0
 800ddd4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ddd8:	0618      	lsls	r0, r3, #24
 800ddda:	d508      	bpl.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dddc:	4955      	ldr	r1, [pc, #340]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ddde:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800dde0:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800dde4:	f022 020c 	bic.w	r2, r2, #12
 800dde8:	4302      	orrs	r2, r0
 800ddea:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ddee:	05d9      	lsls	r1, r3, #23
 800ddf0:	d508      	bpl.n	800de04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ddf2:	4950      	ldr	r1, [pc, #320]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ddf4:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800ddf6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800ddfa:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800ddfe:	4302      	orrs	r2, r0
 800de00:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800de04:	059a      	lsls	r2, r3, #22
 800de06:	d508      	bpl.n	800de1a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800de08:	494a      	ldr	r1, [pc, #296]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800de0a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800de0c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800de10:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800de14:	4302      	orrs	r2, r0
 800de16:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800de1a:	055f      	lsls	r7, r3, #21
 800de1c:	d508      	bpl.n	800de30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800de1e:	4945      	ldr	r1, [pc, #276]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800de20:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800de22:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800de26:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800de2a:	4302      	orrs	r2, r0
 800de2c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800de30:	0518      	lsls	r0, r3, #20
 800de32:	d508      	bpl.n	800de46 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800de34:	493f      	ldr	r1, [pc, #252]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800de36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de38:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800de3c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800de40:	4302      	orrs	r2, r0
 800de42:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800de46:	04d9      	lsls	r1, r3, #19
 800de48:	d508      	bpl.n	800de5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800de4a:	493a      	ldr	r1, [pc, #232]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800de4c:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800de4e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800de52:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800de56:	4302      	orrs	r2, r0
 800de58:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800de5c:	049a      	lsls	r2, r3, #18
 800de5e:	d508      	bpl.n	800de72 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800de60:	4934      	ldr	r1, [pc, #208]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800de62:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800de64:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800de68:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800de6c:	4302      	orrs	r2, r0
 800de6e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800de72:	025f      	lsls	r7, r3, #9
 800de74:	d508      	bpl.n	800de88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800de76:	492f      	ldr	r1, [pc, #188]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800de78:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800de7a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800de7e:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800de82:	4302      	orrs	r2, r0
 800de84:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800de88:	0298      	lsls	r0, r3, #10
 800de8a:	d50c      	bpl.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800de8c:	4829      	ldr	r0, [pc, #164]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800de8e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800de90:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800de94:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800de98:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 800de9c:	bf08      	it	eq
 800de9e:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800dea0:	430a      	orrs	r2, r1
 800dea2:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800dea6:	f013 0f08 	tst.w	r3, #8
 800deaa:	bf18      	it	ne
 800deac:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800deae:	0359      	lsls	r1, r3, #13
 800deb0:	d508      	bpl.n	800dec4 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800deb2:	4920      	ldr	r1, [pc, #128]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800deb4:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800deb6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800deba:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800debe:	4302      	orrs	r2, r0
 800dec0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800dec4:	021a      	lsls	r2, r3, #8
 800dec6:	d509      	bpl.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800dec8:	491a      	ldr	r1, [pc, #104]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800deca:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800dece:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800ded2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800ded6:	4302      	orrs	r2, r0
 800ded8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800dedc:	015f      	lsls	r7, r3, #5
 800dede:	d509      	bpl.n	800def4 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800dee0:	4914      	ldr	r1, [pc, #80]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800dee2:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800dee6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800deea:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800deee:	4302      	orrs	r2, r0
 800def0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800def4:	0118      	lsls	r0, r3, #4
 800def6:	d509      	bpl.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800def8:	490e      	ldr	r1, [pc, #56]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800defa:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800defe:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 800df02:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800df06:	4302      	orrs	r2, r0
 800df08:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800df0c:	00d9      	lsls	r1, r3, #3
 800df0e:	d509      	bpl.n	800df24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800df10:	4908      	ldr	r1, [pc, #32]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800df12:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 800df16:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 800df1a:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800df1e:	4302      	orrs	r2, r0
 800df20:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800df24:	2e01      	cmp	r6, #1
 800df26:	f000 80b4 	beq.w	800e092 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800df2a:	019a      	lsls	r2, r3, #6
 800df2c:	f100 80b1 	bmi.w	800e092 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800df30:	e004      	b.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800df32:	bf00      	nop
 800df34:	40023800 	.word	0x40023800
 800df38:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800df3c:	2d01      	cmp	r5, #1
 800df3e:	d170      	bne.n	800e022 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800df40:	4d9d      	ldr	r5, [pc, #628]	@ (800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800df42:	682b      	ldr	r3, [r5, #0]
 800df44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800df48:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df4a:	f7fc f89b 	bl	800a084 <HAL_GetTick>
 800df4e:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800df50:	682b      	ldr	r3, [r5, #0]
 800df52:	009f      	lsls	r7, r3, #2
 800df54:	f100 8121 	bmi.w	800e19a <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800df58:	6821      	ldr	r1, [r4, #0]
 800df5a:	030e      	lsls	r6, r1, #12
 800df5c:	d501      	bpl.n	800df62 <HAL_RCCEx_PeriphCLKConfig+0x302>
 800df5e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800df60:	b11b      	cbz	r3, 800df6a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800df62:	02cd      	lsls	r5, r1, #11
 800df64:	d51d      	bpl.n	800dfa2 <HAL_RCCEx_PeriphCLKConfig+0x342>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800df66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800df68:	b9db      	cbnz	r3, 800dfa2 <HAL_RCCEx_PeriphCLKConfig+0x342>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800df6a:	4a93      	ldr	r2, [pc, #588]	@ (800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800df6c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800df70:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800df74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800df78:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800df7c:	4303      	orrs	r3, r0
 800df7e:	6960      	ldr	r0, [r4, #20]
 800df80:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800df84:	69a0      	ldr	r0, [r4, #24]
 800df86:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800df8a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800df8e:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800df92:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800df94:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800df98:	3801      	subs	r0, #1
 800df9a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800df9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800dfa2:	0288      	lsls	r0, r1, #10
 800dfa4:	d515      	bpl.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800dfa6:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800dfa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dfac:	d111      	bne.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800dfae:	4a82      	ldr	r2, [pc, #520]	@ (800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800dfb0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800dfb4:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800dfb8:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800dfbc:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800dfc0:	4303      	orrs	r3, r0
 800dfc2:	6960      	ldr	r0, [r4, #20]
 800dfc4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800dfc8:	6a20      	ldr	r0, [r4, #32]
 800dfca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dfce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800dfd2:	070a      	lsls	r2, r1, #28
 800dfd4:	d519      	bpl.n	800e00a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800dfd6:	4a78      	ldr	r2, [pc, #480]	@ (800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800dfd8:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800dfdc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800dfe0:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800dfe4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800dfe8:	430b      	orrs	r3, r1
 800dfea:	6961      	ldr	r1, [r4, #20]
 800dfec:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800dff0:	69e1      	ldr	r1, [r4, #28]
 800dff2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800dff6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800dffa:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800dffe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e000:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800e004:	430b      	orrs	r3, r1
 800e006:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e00a:	4c6b      	ldr	r4, [pc, #428]	@ (800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800e00c:	6823      	ldr	r3, [r4, #0]
 800e00e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e012:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e014:	f7fc f836 	bl	800a084 <HAL_GetTick>
 800e018:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e01a:	6823      	ldr	r3, [r4, #0]
 800e01c:	009b      	lsls	r3, r3, #2
 800e01e:	f140 80c3 	bpl.w	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800e022:	2000      	movs	r0, #0
 800e024:	e009      	b.n	800e03a <HAL_RCCEx_PeriphCLKConfig+0x3da>
      plli2sused = 1;
 800e026:	2601      	movs	r6, #1
 800e028:	e656      	b.n	800dcd8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e02a:	f7fc f82b 	bl	800a084 <HAL_GetTick>
 800e02e:	eba0 0008 	sub.w	r0, r0, r8
 800e032:	2864      	cmp	r0, #100	@ 0x64
 800e034:	f67f ae68 	bls.w	800dd08 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800e038:	2003      	movs	r0, #3
}
 800e03a:	b003      	add	sp, #12
 800e03c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e040:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800e044:	4293      	cmp	r3, r2
 800e046:	f43f ae6a 	beq.w	800dd1e <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e04a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800e04c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e04e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800e052:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e056:	673a      	str	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e058:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e05a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800e05e:	673a      	str	r2, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 800e060:	673b      	str	r3, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e062:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e064:	07d8      	lsls	r0, r3, #31
 800e066:	f57f ae5a 	bpl.w	800dd1e <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 800e06a:	f7fc f80b 	bl	800a084 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e06e:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800e072:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e074:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e076:	0799      	lsls	r1, r3, #30
 800e078:	f53f ae51 	bmi.w	800dd1e <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e07c:	f7fc f802 	bl	800a084 <HAL_GetTick>
 800e080:	eba0 0008 	sub.w	r0, r0, r8
 800e084:	4548      	cmp	r0, r9
 800e086:	d9f5      	bls.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800e088:	e7d6      	b.n	800e038 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e08a:	6891      	ldr	r1, [r2, #8]
 800e08c:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 800e090:	e655      	b.n	800dd3e <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 800e092:	4e49      	ldr	r6, [pc, #292]	@ (800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800e094:	6833      	ldr	r3, [r6, #0]
 800e096:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e09a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800e09c:	f7fb fff2 	bl	800a084 <HAL_GetTick>
 800e0a0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e0a2:	6833      	ldr	r3, [r6, #0]
 800e0a4:	011b      	lsls	r3, r3, #4
 800e0a6:	d472      	bmi.n	800e18e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e0a8:	6822      	ldr	r2, [r4, #0]
 800e0aa:	07d7      	lsls	r7, r2, #31
 800e0ac:	d512      	bpl.n	800e0d4 <HAL_RCCEx_PeriphCLKConfig+0x474>
 800e0ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e0b0:	b983      	cbnz	r3, 800e0d4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e0b2:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e0b6:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e0ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e0be:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800e0c2:	430b      	orrs	r3, r1
 800e0c4:	6861      	ldr	r1, [r4, #4]
 800e0c6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800e0ca:	68a1      	ldr	r1, [r4, #8]
 800e0cc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800e0d0:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e0d4:	0316      	lsls	r6, r2, #12
 800e0d6:	d503      	bpl.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800e0d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e0da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e0de:	d005      	beq.n	800e0ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800e0e0:	02d0      	lsls	r0, r2, #11
 800e0e2:	d51e      	bpl.n	800e122 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e0e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e0e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e0ea:	d11a      	bne.n	800e122 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e0ec:	4932      	ldr	r1, [pc, #200]	@ (800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800e0ee:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e0f2:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e0f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e0fa:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800e0fe:	4303      	orrs	r3, r0
 800e100:	6860      	ldr	r0, [r4, #4]
 800e102:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800e106:	68e0      	ldr	r0, [r4, #12]
 800e108:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800e10c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e110:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 800e114:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e116:	f020 001f 	bic.w	r0, r0, #31
 800e11a:	3b01      	subs	r3, #1
 800e11c:	4303      	orrs	r3, r0
 800e11e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e122:	01d1      	lsls	r1, r2, #7
 800e124:	d511      	bpl.n	800e14a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e126:	4924      	ldr	r1, [pc, #144]	@ (800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800e128:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e12c:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e130:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800e134:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800e138:	4303      	orrs	r3, r0
 800e13a:	6860      	ldr	r0, [r4, #4]
 800e13c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800e140:	6920      	ldr	r0, [r4, #16]
 800e142:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e146:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e14a:	0192      	lsls	r2, r2, #6
 800e14c:	d50d      	bpl.n	800e16a <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e14e:	6923      	ldr	r3, [r4, #16]
 800e150:	6862      	ldr	r2, [r4, #4]
 800e152:	041b      	lsls	r3, r3, #16
 800e154:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800e158:	68e2      	ldr	r2, [r4, #12]
 800e15a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e15e:	68a2      	ldr	r2, [r4, #8]
 800e160:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800e164:	4a14      	ldr	r2, [pc, #80]	@ (800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800e166:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800e16a:	4e13      	ldr	r6, [pc, #76]	@ (800e1b8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800e16c:	6833      	ldr	r3, [r6, #0]
 800e16e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e172:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800e174:	f7fb ff86 	bl	800a084 <HAL_GetTick>
 800e178:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e17a:	6833      	ldr	r3, [r6, #0]
 800e17c:	011b      	lsls	r3, r3, #4
 800e17e:	f53f aedd 	bmi.w	800df3c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e182:	f7fb ff7f 	bl	800a084 <HAL_GetTick>
 800e186:	1bc0      	subs	r0, r0, r7
 800e188:	2864      	cmp	r0, #100	@ 0x64
 800e18a:	d9f6      	bls.n	800e17a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800e18c:	e754      	b.n	800e038 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e18e:	f7fb ff79 	bl	800a084 <HAL_GetTick>
 800e192:	1bc0      	subs	r0, r0, r7
 800e194:	2864      	cmp	r0, #100	@ 0x64
 800e196:	d984      	bls.n	800e0a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800e198:	e74e      	b.n	800e038 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e19a:	f7fb ff73 	bl	800a084 <HAL_GetTick>
 800e19e:	1b80      	subs	r0, r0, r6
 800e1a0:	2864      	cmp	r0, #100	@ 0x64
 800e1a2:	f67f aed5 	bls.w	800df50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800e1a6:	e747      	b.n	800e038 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e1a8:	f7fb ff6c 	bl	800a084 <HAL_GetTick>
 800e1ac:	1b40      	subs	r0, r0, r5
 800e1ae:	2864      	cmp	r0, #100	@ 0x64
 800e1b0:	f67f af33 	bls.w	800e01a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800e1b4:	e740      	b.n	800e038 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 800e1b6:	bf00      	nop
 800e1b8:	40023800 	.word	0x40023800

0800e1bc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800e1bc:	b538      	push	{r3, r4, r5, lr}
 800e1be:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800e1c0:	4604      	mov	r4, r0
 800e1c2:	b1c8      	cbz	r0, 800e1f8 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800e1c4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800e1c8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800e1cc:	b91b      	cbnz	r3, 800e1d6 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800e1ce:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800e1d2:	f7f6 faeb 	bl	80047ac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e1d6:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e1d8:	1d21      	adds	r1, r4, #4
 800e1da:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e1dc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e1e0:	f000 fcb9 	bl	800eb56 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800e1e4:	6862      	ldr	r2, [r4, #4]
 800e1e6:	4629      	mov	r1, r5
 800e1e8:	6820      	ldr	r0, [r4, #0]
 800e1ea:	f000 fcec 	bl	800ebc6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e1ee:	2301      	movs	r3, #1

  return HAL_OK;
 800e1f0:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e1f2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800e1f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e1f8:	2001      	movs	r0, #1
 800e1fa:	e7fc      	b.n	800e1f6 <HAL_SDRAM_Init+0x3a>

0800e1fc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800e1fc:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800e1fe:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800e202:	4605      	mov	r5, r0
 800e204:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800e206:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800e208:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800e20a:	d010      	beq.n	800e22e <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800e20c:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800e210:	2c01      	cmp	r4, #1
 800e212:	d110      	bne.n	800e236 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e214:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e216:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e218:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e21c:	f000 fd09 	bl	800ec32 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e220:	6833      	ldr	r3, [r6, #0]
 800e222:	2b02      	cmp	r3, #2
 800e224:	d104      	bne.n	800e230 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800e226:	2305      	movs	r3, #5
 800e228:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800e22c:	2000      	movs	r0, #0
}
 800e22e:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800e230:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800e234:	e7fa      	b.n	800e22c <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800e236:	2001      	movs	r0, #1
 800e238:	e7f9      	b.n	800e22e <HAL_SDRAM_SendCommand+0x32>

0800e23a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800e23a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e23c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800e240:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e242:	2b02      	cmp	r3, #2
 800e244:	b2d8      	uxtb	r0, r3
 800e246:	d00d      	beq.n	800e264 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800e248:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	b2dd      	uxtb	r5, r3
 800e250:	d109      	bne.n	800e266 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e252:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800e254:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e256:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800e25a:	f000 fcfc 	bl	800ec56 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800e25e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800e260:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800e264:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e266:	2001      	movs	r0, #1
 800e268:	e7fc      	b.n	800e264 <HAL_SDRAM_ProgramRefreshRate+0x2a>
	...

0800e26c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e26c:	6a03      	ldr	r3, [r0, #32]
 800e26e:	f023 0301 	bic.w	r3, r3, #1
{
 800e272:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e274:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e276:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e278:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e27a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e27c:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 800e280:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e282:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
 800e286:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800e28a:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e28c:	688d      	ldr	r5, [r1, #8]
 800e28e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e290:	4d0e      	ldr	r5, [pc, #56]	@ (800e2cc <TIM_OC1_SetConfig+0x60>)
 800e292:	42a8      	cmp	r0, r5
 800e294:	d002      	beq.n	800e29c <TIM_OC1_SetConfig+0x30>
 800e296:	4e0e      	ldr	r6, [pc, #56]	@ (800e2d0 <TIM_OC1_SetConfig+0x64>)
 800e298:	42b0      	cmp	r0, r6
 800e29a:	d111      	bne.n	800e2c0 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e29c:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e2a0:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2a2:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 800e2a4:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800e2a8:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2ac:	d002      	beq.n	800e2b4 <TIM_OC1_SetConfig+0x48>
 800e2ae:	4d08      	ldr	r5, [pc, #32]	@ (800e2d0 <TIM_OC1_SetConfig+0x64>)
 800e2b0:	42a8      	cmp	r0, r5
 800e2b2:	d105      	bne.n	800e2c0 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e2b4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e2b8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800e2bc:	4335      	orrs	r5, r6
 800e2be:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2c0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e2c2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800e2c4:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800e2c6:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2c8:	6203      	str	r3, [r0, #32]
}
 800e2ca:	bd70      	pop	{r4, r5, r6, pc}
 800e2cc:	40010000 	.word	0x40010000
 800e2d0:	40010400 	.word	0x40010400

0800e2d4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e2d4:	6a03      	ldr	r3, [r0, #32]
 800e2d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
{
 800e2da:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e2dc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2de:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2e0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e2e2:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e2e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccmrx |= OC_Config->OCMode;
 800e2e8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e2ea:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
 800e2ee:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800e2f2:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e2f4:	688d      	ldr	r5, [r1, #8]
 800e2f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e2fa:	4d11      	ldr	r5, [pc, #68]	@ (800e340 <TIM_OC3_SetConfig+0x6c>)
 800e2fc:	42a8      	cmp	r0, r5
 800e2fe:	d003      	beq.n	800e308 <TIM_OC3_SetConfig+0x34>
 800e300:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800e304:	42a8      	cmp	r0, r5
 800e306:	d114      	bne.n	800e332 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e308:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800e30a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e30e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e312:	4d0b      	ldr	r5, [pc, #44]	@ (800e340 <TIM_OC3_SetConfig+0x6c>)
 800e314:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800e316:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e31a:	d003      	beq.n	800e324 <TIM_OC3_SetConfig+0x50>
 800e31c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800e320:	42a8      	cmp	r0, r5
 800e322:	d106      	bne.n	800e332 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e324:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e328:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800e32c:	4335      	orrs	r5, r6
 800e32e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e332:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e334:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800e336:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800e338:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e33a:	6203      	str	r3, [r0, #32]
}
 800e33c:	bd70      	pop	{r4, r5, r6, pc}
 800e33e:	bf00      	nop
 800e340:	40010000 	.word	0x40010000

0800e344 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e344:	6a03      	ldr	r3, [r0, #32]
 800e346:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
{
 800e34a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e34c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e34e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e350:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e352:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e354:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e358:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e35a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e35e:	f423 43e6 	bic.w	r3, r3, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e362:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e366:	688d      	ldr	r5, [r1, #8]
 800e368:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e36c:	4d08      	ldr	r5, [pc, #32]	@ (800e390 <TIM_OC4_SetConfig+0x4c>)
 800e36e:	42a8      	cmp	r0, r5
 800e370:	d003      	beq.n	800e37a <TIM_OC4_SetConfig+0x36>
 800e372:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800e376:	42a8      	cmp	r0, r5
 800e378:	d104      	bne.n	800e384 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e37a:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e37e:	694d      	ldr	r5, [r1, #20]
 800e380:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e384:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e386:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e388:	684b      	ldr	r3, [r1, #4]
 800e38a:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e38c:	6202      	str	r2, [r0, #32]
}
 800e38e:	bd30      	pop	{r4, r5, pc}
 800e390:	40010000 	.word	0x40010000

0800e394 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e394:	6a03      	ldr	r3, [r0, #32]
 800e396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
{
 800e39a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e39c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e39e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3a0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e3a2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e3a4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccmrx |= OC_Config->OCMode;
 800e3a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e3aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e3ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 800e3b2:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e3b4:	688d      	ldr	r5, [r1, #8]
 800e3b6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3ba:	4d09      	ldr	r5, [pc, #36]	@ (800e3e0 <TIM_OC5_SetConfig+0x4c>)
 800e3bc:	42a8      	cmp	r0, r5
 800e3be:	d003      	beq.n	800e3c8 <TIM_OC5_SetConfig+0x34>
 800e3c0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800e3c4:	42a8      	cmp	r0, r5
 800e3c6:	d104      	bne.n	800e3d2 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e3c8:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e3cc:	694d      	ldr	r5, [r1, #20]
 800e3ce:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3d2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e3d4:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e3d6:	684b      	ldr	r3, [r1, #4]
 800e3d8:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3da:	6202      	str	r2, [r0, #32]
}
 800e3dc:	bd30      	pop	{r4, r5, pc}
 800e3de:	bf00      	nop
 800e3e0:	40010000 	.word	0x40010000

0800e3e4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e3e4:	6a03      	ldr	r3, [r0, #32]
 800e3e6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
{
 800e3ea:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e3ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3ee:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3f0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e3f2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e3f4:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e3f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e3fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e3fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e402:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e406:	688d      	ldr	r5, [r1, #8]
 800e408:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e40c:	4d08      	ldr	r5, [pc, #32]	@ (800e430 <TIM_OC6_SetConfig+0x4c>)
 800e40e:	42a8      	cmp	r0, r5
 800e410:	d003      	beq.n	800e41a <TIM_OC6_SetConfig+0x36>
 800e412:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800e416:	42a8      	cmp	r0, r5
 800e418:	d104      	bne.n	800e424 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e41a:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e41e:	694d      	ldr	r5, [r1, #20]
 800e420:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e424:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e426:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e428:	684b      	ldr	r3, [r1, #4]
 800e42a:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e42c:	6202      	str	r2, [r0, #32]
}
 800e42e:	bd30      	pop	{r4, r5, pc}
 800e430:	40010000 	.word	0x40010000

0800e434 <HAL_TIM_Base_MspInit>:
}
 800e434:	4770      	bx	lr
	...

0800e438 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800e438:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	d133      	bne.n	800e4a8 <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 800e440:	2302      	movs	r3, #2
 800e442:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e446:	6803      	ldr	r3, [r0, #0]
 800e448:	68da      	ldr	r2, [r3, #12]
 800e44a:	f042 0201 	orr.w	r2, r2, #1
 800e44e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e450:	4a16      	ldr	r2, [pc, #88]	@ (800e4ac <HAL_TIM_Base_Start_IT+0x74>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d01a      	beq.n	800e48c <HAL_TIM_Base_Start_IT+0x54>
 800e456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e45a:	d017      	beq.n	800e48c <HAL_TIM_Base_Start_IT+0x54>
 800e45c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800e460:	4293      	cmp	r3, r2
 800e462:	d013      	beq.n	800e48c <HAL_TIM_Base_Start_IT+0x54>
 800e464:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e468:	4293      	cmp	r3, r2
 800e46a:	d00f      	beq.n	800e48c <HAL_TIM_Base_Start_IT+0x54>
 800e46c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e470:	4293      	cmp	r3, r2
 800e472:	d00b      	beq.n	800e48c <HAL_TIM_Base_Start_IT+0x54>
 800e474:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800e478:	4293      	cmp	r3, r2
 800e47a:	d007      	beq.n	800e48c <HAL_TIM_Base_Start_IT+0x54>
 800e47c:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800e480:	4293      	cmp	r3, r2
 800e482:	d003      	beq.n	800e48c <HAL_TIM_Base_Start_IT+0x54>
 800e484:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800e488:	4293      	cmp	r3, r2
 800e48a:	d107      	bne.n	800e49c <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e48c:	6899      	ldr	r1, [r3, #8]
 800e48e:	4a08      	ldr	r2, [pc, #32]	@ (800e4b0 <HAL_TIM_Base_Start_IT+0x78>)
 800e490:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e492:	2a06      	cmp	r2, #6
 800e494:	d006      	beq.n	800e4a4 <HAL_TIM_Base_Start_IT+0x6c>
 800e496:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e49a:	d003      	beq.n	800e4a4 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 800e49c:	681a      	ldr	r2, [r3, #0]
 800e49e:	f042 0201 	orr.w	r2, r2, #1
 800e4a2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800e4a4:	2000      	movs	r0, #0
 800e4a6:	4770      	bx	lr
    return HAL_ERROR;
 800e4a8:	2001      	movs	r0, #1
}
 800e4aa:	4770      	bx	lr
 800e4ac:	40010000 	.word	0x40010000
 800e4b0:	00010007 	.word	0x00010007

0800e4b4 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800e4b4:	4770      	bx	lr

0800e4b6 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800e4b6:	4770      	bx	lr

0800e4b8 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800e4b8:	4770      	bx	lr

0800e4ba <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800e4ba:	4770      	bx	lr

0800e4bc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e4bc:	6803      	ldr	r3, [r0, #0]
 800e4be:	691a      	ldr	r2, [r3, #16]
 800e4c0:	0791      	lsls	r1, r2, #30
{
 800e4c2:	b510      	push	{r4, lr}
 800e4c4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e4c6:	d50f      	bpl.n	800e4e8 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e4c8:	68da      	ldr	r2, [r3, #12]
 800e4ca:	0792      	lsls	r2, r2, #30
 800e4cc:	d50c      	bpl.n	800e4e8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e4ce:	f06f 0202 	mvn.w	r2, #2
 800e4d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e4d8:	699b      	ldr	r3, [r3, #24]
 800e4da:	0799      	lsls	r1, r3, #30
 800e4dc:	f000 8085 	beq.w	800e5ea <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800e4e0:	f7ff ffe9 	bl	800e4b6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e4e8:	6823      	ldr	r3, [r4, #0]
 800e4ea:	691a      	ldr	r2, [r3, #16]
 800e4ec:	0752      	lsls	r2, r2, #29
 800e4ee:	d510      	bpl.n	800e512 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e4f0:	68da      	ldr	r2, [r3, #12]
 800e4f2:	0750      	lsls	r0, r2, #29
 800e4f4:	d50d      	bpl.n	800e512 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e4f6:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800e4fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e4fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e4fe:	2202      	movs	r2, #2
 800e500:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e502:	699b      	ldr	r3, [r3, #24]
 800e504:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800e508:	d075      	beq.n	800e5f6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800e50a:	f7ff ffd4 	bl	800e4b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e50e:	2300      	movs	r3, #0
 800e510:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e512:	6823      	ldr	r3, [r4, #0]
 800e514:	691a      	ldr	r2, [r3, #16]
 800e516:	0711      	lsls	r1, r2, #28
 800e518:	d50f      	bpl.n	800e53a <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e51a:	68da      	ldr	r2, [r3, #12]
 800e51c:	0712      	lsls	r2, r2, #28
 800e51e:	d50c      	bpl.n	800e53a <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e520:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800e524:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e526:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e528:	2204      	movs	r2, #4
 800e52a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e52c:	69db      	ldr	r3, [r3, #28]
 800e52e:	079b      	lsls	r3, r3, #30
 800e530:	d067      	beq.n	800e602 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800e532:	f7ff ffc0 	bl	800e4b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e536:	2300      	movs	r3, #0
 800e538:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e53a:	6823      	ldr	r3, [r4, #0]
 800e53c:	691a      	ldr	r2, [r3, #16]
 800e53e:	06d0      	lsls	r0, r2, #27
 800e540:	d510      	bpl.n	800e564 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e542:	68da      	ldr	r2, [r3, #12]
 800e544:	06d1      	lsls	r1, r2, #27
 800e546:	d50d      	bpl.n	800e564 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e548:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800e54c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e54e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e550:	2208      	movs	r2, #8
 800e552:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e554:	69db      	ldr	r3, [r3, #28]
 800e556:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800e55a:	d058      	beq.n	800e60e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800e55c:	f7ff ffab 	bl	800e4b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e560:	2300      	movs	r3, #0
 800e562:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e564:	6823      	ldr	r3, [r4, #0]
 800e566:	691a      	ldr	r2, [r3, #16]
 800e568:	07d2      	lsls	r2, r2, #31
 800e56a:	d508      	bpl.n	800e57e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e56c:	68da      	ldr	r2, [r3, #12]
 800e56e:	07d0      	lsls	r0, r2, #31
 800e570:	d505      	bpl.n	800e57e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e572:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800e576:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e578:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800e57a:	f7f5 fe4f 	bl	800421c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e57e:	6823      	ldr	r3, [r4, #0]
 800e580:	691a      	ldr	r2, [r3, #16]
 800e582:	0611      	lsls	r1, r2, #24
 800e584:	d508      	bpl.n	800e598 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e586:	68da      	ldr	r2, [r3, #12]
 800e588:	0612      	lsls	r2, r2, #24
 800e58a:	d505      	bpl.n	800e598 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e58c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 800e590:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e592:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800e594:	f000 fadd 	bl	800eb52 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e598:	6823      	ldr	r3, [r4, #0]
 800e59a:	691a      	ldr	r2, [r3, #16]
 800e59c:	05d0      	lsls	r0, r2, #23
 800e59e:	d508      	bpl.n	800e5b2 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e5a0:	68da      	ldr	r2, [r3, #12]
 800e5a2:	0611      	lsls	r1, r2, #24
 800e5a4:	d505      	bpl.n	800e5b2 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e5a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800e5aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e5ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800e5ae:	f000 fad1 	bl	800eb54 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e5b2:	6823      	ldr	r3, [r4, #0]
 800e5b4:	691a      	ldr	r2, [r3, #16]
 800e5b6:	0652      	lsls	r2, r2, #25
 800e5b8:	d508      	bpl.n	800e5cc <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e5ba:	68da      	ldr	r2, [r3, #12]
 800e5bc:	0650      	lsls	r0, r2, #25
 800e5be:	d505      	bpl.n	800e5cc <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e5c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800e5c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e5c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800e5c8:	f7ff ff77 	bl	800e4ba <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e5cc:	6823      	ldr	r3, [r4, #0]
 800e5ce:	691a      	ldr	r2, [r3, #16]
 800e5d0:	0691      	lsls	r1, r2, #26
 800e5d2:	d522      	bpl.n	800e61a <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e5d4:	68da      	ldr	r2, [r3, #12]
 800e5d6:	0692      	lsls	r2, r2, #26
 800e5d8:	d51f      	bpl.n	800e61a <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e5da:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800e5de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e5e0:	611a      	str	r2, [r3, #16]
}
 800e5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800e5e6:	f000 bab3 	b.w	800eb50 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5ea:	f7ff ff63 	bl	800e4b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	f7ff ff62 	bl	800e4b8 <HAL_TIM_PWM_PulseFinishedCallback>
 800e5f4:	e776      	b.n	800e4e4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5f6:	f7ff ff5d 	bl	800e4b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	f7ff ff5c 	bl	800e4b8 <HAL_TIM_PWM_PulseFinishedCallback>
 800e600:	e785      	b.n	800e50e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e602:	f7ff ff57 	bl	800e4b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e606:	4620      	mov	r0, r4
 800e608:	f7ff ff56 	bl	800e4b8 <HAL_TIM_PWM_PulseFinishedCallback>
 800e60c:	e793      	b.n	800e536 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e60e:	f7ff ff51 	bl	800e4b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e612:	4620      	mov	r0, r4
 800e614:	f7ff ff50 	bl	800e4b8 <HAL_TIM_PWM_PulseFinishedCallback>
 800e618:	e7a2      	b.n	800e560 <HAL_TIM_IRQHandler+0xa4>
}
 800e61a:	bd10      	pop	{r4, pc}

0800e61c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e61c:	4a30      	ldr	r2, [pc, #192]	@ (800e6e0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800e61e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e620:	4290      	cmp	r0, r2
 800e622:	d012      	beq.n	800e64a <TIM_Base_SetConfig+0x2e>
 800e624:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800e628:	d00f      	beq.n	800e64a <TIM_Base_SetConfig+0x2e>
 800e62a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800e62e:	4290      	cmp	r0, r2
 800e630:	d00b      	beq.n	800e64a <TIM_Base_SetConfig+0x2e>
 800e632:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e636:	4290      	cmp	r0, r2
 800e638:	d007      	beq.n	800e64a <TIM_Base_SetConfig+0x2e>
 800e63a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e63e:	4290      	cmp	r0, r2
 800e640:	d003      	beq.n	800e64a <TIM_Base_SetConfig+0x2e>
 800e642:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800e646:	4290      	cmp	r0, r2
 800e648:	d119      	bne.n	800e67e <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800e64a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e64c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800e650:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e652:	4a23      	ldr	r2, [pc, #140]	@ (800e6e0 <TIM_Base_SetConfig+0xc4>)
 800e654:	4290      	cmp	r0, r2
 800e656:	d029      	beq.n	800e6ac <TIM_Base_SetConfig+0x90>
 800e658:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800e65c:	d026      	beq.n	800e6ac <TIM_Base_SetConfig+0x90>
 800e65e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800e662:	4290      	cmp	r0, r2
 800e664:	d022      	beq.n	800e6ac <TIM_Base_SetConfig+0x90>
 800e666:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e66a:	4290      	cmp	r0, r2
 800e66c:	d01e      	beq.n	800e6ac <TIM_Base_SetConfig+0x90>
 800e66e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e672:	4290      	cmp	r0, r2
 800e674:	d01a      	beq.n	800e6ac <TIM_Base_SetConfig+0x90>
 800e676:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800e67a:	4290      	cmp	r0, r2
 800e67c:	d016      	beq.n	800e6ac <TIM_Base_SetConfig+0x90>
 800e67e:	4a19      	ldr	r2, [pc, #100]	@ (800e6e4 <TIM_Base_SetConfig+0xc8>)
 800e680:	4290      	cmp	r0, r2
 800e682:	d013      	beq.n	800e6ac <TIM_Base_SetConfig+0x90>
 800e684:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e688:	4290      	cmp	r0, r2
 800e68a:	d00f      	beq.n	800e6ac <TIM_Base_SetConfig+0x90>
 800e68c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e690:	4290      	cmp	r0, r2
 800e692:	d00b      	beq.n	800e6ac <TIM_Base_SetConfig+0x90>
 800e694:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800e698:	4290      	cmp	r0, r2
 800e69a:	d007      	beq.n	800e6ac <TIM_Base_SetConfig+0x90>
 800e69c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e6a0:	4290      	cmp	r0, r2
 800e6a2:	d003      	beq.n	800e6ac <TIM_Base_SetConfig+0x90>
 800e6a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e6a8:	4290      	cmp	r0, r2
 800e6aa:	d103      	bne.n	800e6b4 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800e6ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e6b0:	68ca      	ldr	r2, [r1, #12]
 800e6b2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e6b4:	694a      	ldr	r2, [r1, #20]
 800e6b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e6ba:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800e6bc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e6be:	688b      	ldr	r3, [r1, #8]
 800e6c0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800e6c2:	680b      	ldr	r3, [r1, #0]
 800e6c4:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e6c6:	4b06      	ldr	r3, [pc, #24]	@ (800e6e0 <TIM_Base_SetConfig+0xc4>)
 800e6c8:	4298      	cmp	r0, r3
 800e6ca:	d003      	beq.n	800e6d4 <TIM_Base_SetConfig+0xb8>
 800e6cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e6d0:	4298      	cmp	r0, r3
 800e6d2:	d101      	bne.n	800e6d8 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800e6d4:	690b      	ldr	r3, [r1, #16]
 800e6d6:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	6143      	str	r3, [r0, #20]
}
 800e6dc:	4770      	bx	lr
 800e6de:	bf00      	nop
 800e6e0:	40010000 	.word	0x40010000
 800e6e4:	40014000 	.word	0x40014000

0800e6e8 <HAL_TIM_Base_Init>:
{
 800e6e8:	b510      	push	{r4, lr}
  if (htim == NULL)
 800e6ea:	4604      	mov	r4, r0
 800e6ec:	b350      	cbz	r0, 800e744 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800e6ee:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800e6f2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800e6f6:	b91b      	cbnz	r3, 800e700 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800e6f8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800e6fc:	f7ff fe9a 	bl	800e434 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800e700:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e702:	6820      	ldr	r0, [r4, #0]
 800e704:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800e706:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e70a:	f7ff ff87 	bl	800e61c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e70e:	2301      	movs	r3, #1
  return HAL_OK;
 800e710:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e712:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e716:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800e71a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800e71e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800e722:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800e726:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e72a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e72e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800e732:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800e736:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800e73a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800e73e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800e742:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800e744:	2001      	movs	r0, #1
 800e746:	e7fc      	b.n	800e742 <HAL_TIM_Base_Init+0x5a>

0800e748 <HAL_TIM_PWM_Init>:
{
 800e748:	b510      	push	{r4, lr}
  if (htim == NULL)
 800e74a:	4604      	mov	r4, r0
 800e74c:	b350      	cbz	r0, 800e7a4 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800e74e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800e752:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800e756:	b91b      	cbnz	r3, 800e760 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800e758:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800e75c:	f7f5 ffea 	bl	8004734 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800e760:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e762:	6820      	ldr	r0, [r4, #0]
 800e764:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800e766:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e76a:	f7ff ff57 	bl	800e61c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e76e:	2301      	movs	r3, #1
  return HAL_OK;
 800e770:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e772:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e776:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800e77a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800e77e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800e782:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800e786:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e78a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e78e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800e792:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800e796:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800e79a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800e79e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800e7a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800e7a4:	2001      	movs	r0, #1
 800e7a6:	e7fc      	b.n	800e7a2 <HAL_TIM_PWM_Init+0x5a>

0800e7a8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e7a8:	6a03      	ldr	r3, [r0, #32]
 800e7aa:	f023 0310 	bic.w	r3, r3, #16
{
 800e7ae:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e7b0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800e7b2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800e7b4:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800e7b6:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800e7b8:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e7bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e7be:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 800e7c2:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e7c6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e7ca:	688d      	ldr	r5, [r1, #8]
 800e7cc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e7d0:	4d10      	ldr	r5, [pc, #64]	@ (800e814 <TIM_OC2_SetConfig+0x6c>)
 800e7d2:	42a8      	cmp	r0, r5
 800e7d4:	d003      	beq.n	800e7de <TIM_OC2_SetConfig+0x36>
 800e7d6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800e7da:	42a8      	cmp	r0, r5
 800e7dc:	d114      	bne.n	800e808 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e7de:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800e7e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e7e4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7e8:	4d0a      	ldr	r5, [pc, #40]	@ (800e814 <TIM_OC2_SetConfig+0x6c>)
 800e7ea:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800e7ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7f0:	d003      	beq.n	800e7fa <TIM_OC2_SetConfig+0x52>
 800e7f2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800e7f6:	42a8      	cmp	r0, r5
 800e7f8:	d106      	bne.n	800e808 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e7fa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e7fe:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800e802:	4335      	orrs	r5, r6
 800e804:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800e808:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800e80a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800e80c:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800e80e:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800e810:	6203      	str	r3, [r0, #32]
}
 800e812:	bd70      	pop	{r4, r5, r6, pc}
 800e814:	40010000 	.word	0x40010000

0800e818 <HAL_TIM_PWM_ConfigChannel>:
{
 800e818:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800e81a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800e81e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800e820:	2b01      	cmp	r3, #1
 800e822:	d073      	beq.n	800e90c <HAL_TIM_PWM_ConfigChannel+0xf4>
 800e824:	2001      	movs	r0, #1
  switch (Channel)
 800e826:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 800e828:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 800e82c:	d04e      	beq.n	800e8cc <HAL_TIM_PWM_ConfigChannel+0xb4>
 800e82e:	d808      	bhi.n	800e842 <HAL_TIM_PWM_ConfigChannel+0x2a>
 800e830:	2a04      	cmp	r2, #4
 800e832:	d02b      	beq.n	800e88c <HAL_TIM_PWM_ConfigChannel+0x74>
 800e834:	2a08      	cmp	r2, #8
 800e836:	d039      	beq.n	800e8ac <HAL_TIM_PWM_ConfigChannel+0x94>
 800e838:	b1ba      	cbz	r2, 800e86a <HAL_TIM_PWM_ConfigChannel+0x52>
  __HAL_UNLOCK(htim);
 800e83a:	2300      	movs	r3, #0
 800e83c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800e840:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800e842:	2a10      	cmp	r2, #16
 800e844:	d052      	beq.n	800e8ec <HAL_TIM_PWM_ConfigChannel+0xd4>
 800e846:	2a14      	cmp	r2, #20
 800e848:	d1f7      	bne.n	800e83a <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e84a:	6820      	ldr	r0, [r4, #0]
 800e84c:	f7ff fdca 	bl	800e3e4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e850:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e852:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e854:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e858:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e85a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e85c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e860:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e862:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e864:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e868:	e04e      	b.n	800e908 <HAL_TIM_PWM_ConfigChannel+0xf0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e86a:	6820      	ldr	r0, [r4, #0]
 800e86c:	f7ff fcfe 	bl	800e26c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e870:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e872:	6983      	ldr	r3, [r0, #24]
 800e874:	f043 0308 	orr.w	r3, r3, #8
 800e878:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e87a:	6983      	ldr	r3, [r0, #24]
 800e87c:	f023 0304 	bic.w	r3, r3, #4
 800e880:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e882:	6983      	ldr	r3, [r0, #24]
 800e884:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e886:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800e888:	2000      	movs	r0, #0
 800e88a:	e7d6      	b.n	800e83a <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e88c:	6820      	ldr	r0, [r4, #0]
 800e88e:	f7ff ff8b 	bl	800e7a8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e892:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e894:	6983      	ldr	r3, [r0, #24]
 800e896:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e89a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e89c:	6983      	ldr	r3, [r0, #24]
 800e89e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e8a2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e8a4:	6983      	ldr	r3, [r0, #24]
 800e8a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e8aa:	e7ec      	b.n	800e886 <HAL_TIM_PWM_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e8ac:	6820      	ldr	r0, [r4, #0]
 800e8ae:	f7ff fd11 	bl	800e2d4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e8b2:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e8b4:	69c3      	ldr	r3, [r0, #28]
 800e8b6:	f043 0308 	orr.w	r3, r3, #8
 800e8ba:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e8bc:	69c3      	ldr	r3, [r0, #28]
 800e8be:	f023 0304 	bic.w	r3, r3, #4
 800e8c2:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e8c4:	69c3      	ldr	r3, [r0, #28]
 800e8c6:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e8c8:	61c3      	str	r3, [r0, #28]
      break;
 800e8ca:	e7dd      	b.n	800e888 <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e8cc:	6820      	ldr	r0, [r4, #0]
 800e8ce:	f7ff fd39 	bl	800e344 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e8d2:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e8d4:	69c3      	ldr	r3, [r0, #28]
 800e8d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e8da:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e8dc:	69c3      	ldr	r3, [r0, #28]
 800e8de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e8e2:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e8e4:	69c3      	ldr	r3, [r0, #28]
 800e8e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e8ea:	e7ed      	b.n	800e8c8 <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e8ec:	6820      	ldr	r0, [r4, #0]
 800e8ee:	f7ff fd51 	bl	800e394 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e8f2:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e8f4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e8f6:	f043 0308 	orr.w	r3, r3, #8
 800e8fa:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e8fc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e8fe:	f023 0304 	bic.w	r3, r3, #4
 800e902:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e904:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e906:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e908:	6543      	str	r3, [r0, #84]	@ 0x54
      break;
 800e90a:	e7bd      	b.n	800e888 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_LOCK(htim);
 800e90c:	2002      	movs	r0, #2
 800e90e:	e797      	b.n	800e840 <HAL_TIM_PWM_ConfigChannel+0x28>

0800e910 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e910:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e914:	6a03      	ldr	r3, [r0, #32]
{
 800e916:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e918:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e91a:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e91c:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800e91e:	ea23 0304 	bic.w	r3, r3, r4
 800e922:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e924:	6a03      	ldr	r3, [r0, #32]
 800e926:	431a      	orrs	r2, r3
 800e928:	6202      	str	r2, [r0, #32]
}
 800e92a:	bd10      	pop	{r4, pc}

0800e92c <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e92c:	2908      	cmp	r1, #8
{
 800e92e:	b508      	push	{r3, lr}
 800e930:	d018      	beq.n	800e964 <HAL_TIM_OC_Start+0x38>
 800e932:	d805      	bhi.n	800e940 <HAL_TIM_OC_Start+0x14>
 800e934:	b159      	cbz	r1, 800e94e <HAL_TIM_OC_Start+0x22>
 800e936:	2904      	cmp	r1, #4
 800e938:	d011      	beq.n	800e95e <HAL_TIM_OC_Start+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e93a:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e93e:	e008      	b.n	800e952 <HAL_TIM_OC_Start+0x26>
 800e940:	290c      	cmp	r1, #12
 800e942:	d012      	beq.n	800e96a <HAL_TIM_OC_Start+0x3e>
 800e944:	2910      	cmp	r1, #16
 800e946:	d1f8      	bne.n	800e93a <HAL_TIM_OC_Start+0xe>
 800e948:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e94c:	e001      	b.n	800e952 <HAL_TIM_OC_Start+0x26>
 800e94e:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800e952:	3b01      	subs	r3, #1
 800e954:	bf18      	it	ne
 800e956:	2301      	movne	r3, #1
 800e958:	b153      	cbz	r3, 800e970 <HAL_TIM_OC_Start+0x44>
    return HAL_ERROR;
 800e95a:	2001      	movs	r0, #1
 800e95c:	e030      	b.n	800e9c0 <HAL_TIM_OC_Start+0x94>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e95e:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800e962:	e7f6      	b.n	800e952 <HAL_TIM_OC_Start+0x26>
 800e964:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e968:	e7f3      	b.n	800e952 <HAL_TIM_OC_Start+0x26>
 800e96a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800e96e:	e7f0      	b.n	800e952 <HAL_TIM_OC_Start+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e970:	2908      	cmp	r1, #8
 800e972:	f04f 0302 	mov.w	r3, #2
 800e976:	d027      	beq.n	800e9c8 <HAL_TIM_OC_Start+0x9c>
 800e978:	d806      	bhi.n	800e988 <HAL_TIM_OC_Start+0x5c>
 800e97a:	b161      	cbz	r1, 800e996 <HAL_TIM_OC_Start+0x6a>
 800e97c:	2904      	cmp	r1, #4
 800e97e:	d020      	beq.n	800e9c2 <HAL_TIM_OC_Start+0x96>
 800e980:	2302      	movs	r3, #2
 800e982:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
 800e986:	e008      	b.n	800e99a <HAL_TIM_OC_Start+0x6e>
 800e988:	290c      	cmp	r1, #12
 800e98a:	d020      	beq.n	800e9ce <HAL_TIM_OC_Start+0xa2>
 800e98c:	2910      	cmp	r1, #16
 800e98e:	d1f7      	bne.n	800e980 <HAL_TIM_OC_Start+0x54>
 800e990:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
 800e994:	e001      	b.n	800e99a <HAL_TIM_OC_Start+0x6e>
 800e996:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e99a:	6800      	ldr	r0, [r0, #0]
 800e99c:	2201      	movs	r2, #1
 800e99e:	f7ff ffb7 	bl	800e910 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e9a2:	4a20      	ldr	r2, [pc, #128]	@ (800ea24 <HAL_TIM_OC_Start+0xf8>)
 800e9a4:	4290      	cmp	r0, r2
 800e9a6:	d015      	beq.n	800e9d4 <HAL_TIM_OC_Start+0xa8>
 800e9a8:	4b1f      	ldr	r3, [pc, #124]	@ (800ea28 <HAL_TIM_OC_Start+0xfc>)
 800e9aa:	4298      	cmp	r0, r3
 800e9ac:	d012      	beq.n	800e9d4 <HAL_TIM_OC_Start+0xa8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9ae:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800e9b2:	d116      	bne.n	800e9e2 <HAL_TIM_OC_Start+0xb6>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e9b4:	6882      	ldr	r2, [r0, #8]
 800e9b6:	4b1d      	ldr	r3, [pc, #116]	@ (800ea2c <HAL_TIM_OC_Start+0x100>)
 800e9b8:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9ba:	2b06      	cmp	r3, #6
 800e9bc:	d12d      	bne.n	800ea1a <HAL_TIM_OC_Start+0xee>
  return HAL_OK;
 800e9be:	2000      	movs	r0, #0
}
 800e9c0:	bd08      	pop	{r3, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e9c2:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 800e9c6:	e7e8      	b.n	800e99a <HAL_TIM_OC_Start+0x6e>
 800e9c8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800e9cc:	e7e5      	b.n	800e99a <HAL_TIM_OC_Start+0x6e>
 800e9ce:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 800e9d2:	e7e2      	b.n	800e99a <HAL_TIM_OC_Start+0x6e>
    __HAL_TIM_MOE_ENABLE(htim);
 800e9d4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9d6:	4290      	cmp	r0, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800e9d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e9dc:	6443      	str	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9de:	d0e9      	beq.n	800e9b4 <HAL_TIM_OC_Start+0x88>
 800e9e0:	e7e5      	b.n	800e9ae <HAL_TIM_OC_Start+0x82>
 800e9e2:	4b13      	ldr	r3, [pc, #76]	@ (800ea30 <HAL_TIM_OC_Start+0x104>)
 800e9e4:	4298      	cmp	r0, r3
 800e9e6:	d0e5      	beq.n	800e9b4 <HAL_TIM_OC_Start+0x88>
 800e9e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e9ec:	4298      	cmp	r0, r3
 800e9ee:	d0e1      	beq.n	800e9b4 <HAL_TIM_OC_Start+0x88>
 800e9f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e9f4:	4298      	cmp	r0, r3
 800e9f6:	d0dd      	beq.n	800e9b4 <HAL_TIM_OC_Start+0x88>
 800e9f8:	f503 4378 	add.w	r3, r3, #63488	@ 0xf800
 800e9fc:	4298      	cmp	r0, r3
 800e9fe:	d0d9      	beq.n	800e9b4 <HAL_TIM_OC_Start+0x88>
 800ea00:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 800ea04:	4298      	cmp	r0, r3
 800ea06:	d0d5      	beq.n	800e9b4 <HAL_TIM_OC_Start+0x88>
 800ea08:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 800ea0c:	4298      	cmp	r0, r3
 800ea0e:	d0d1      	beq.n	800e9b4 <HAL_TIM_OC_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 800ea10:	6803      	ldr	r3, [r0, #0]
 800ea12:	f043 0301 	orr.w	r3, r3, #1
 800ea16:	6003      	str	r3, [r0, #0]
 800ea18:	e7d1      	b.n	800e9be <HAL_TIM_OC_Start+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea1e:	d1f7      	bne.n	800ea10 <HAL_TIM_OC_Start+0xe4>
 800ea20:	e7cd      	b.n	800e9be <HAL_TIM_OC_Start+0x92>
 800ea22:	bf00      	nop
 800ea24:	40010000 	.word	0x40010000
 800ea28:	40010400 	.word	0x40010400
 800ea2c:	00010007 	.word	0x00010007
 800ea30:	40000400 	.word	0x40000400

0800ea34 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800ea34:	f7ff bf7a 	b.w	800e92c <HAL_TIM_OC_Start>

0800ea38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ea38:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea3a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800ea3e:	4604      	mov	r4, r0
 800ea40:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d03b      	beq.n	800eabe <HAL_TIMEx_MasterConfigSynchronization+0x86>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea46:	6823      	ldr	r3, [r4, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ea48:	4d1d      	ldr	r5, [pc, #116]	@ (800eac0 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ea4a:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ea4e:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800ea50:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800ea52:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ea54:	d002      	beq.n	800ea5c <HAL_TIMEx_MasterConfigSynchronization+0x24>
 800ea56:	4e1b      	ldr	r6, [pc, #108]	@ (800eac4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 800ea58:	42b3      	cmp	r3, r6
 800ea5a:	d103      	bne.n	800ea64 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ea5c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ea60:	684e      	ldr	r6, [r1, #4]
 800ea62:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ea64:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800ea66:	f022 0270 	bic.w	r2, r2, #112	@ 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea6a:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ea6c:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 800ea70:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea72:	d019      	beq.n	800eaa8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800ea74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea78:	d016      	beq.n	800eaa8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800ea7a:	4a13      	ldr	r2, [pc, #76]	@ (800eac8 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d013      	beq.n	800eaa8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800ea80:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ea84:	4293      	cmp	r3, r2
 800ea86:	d00f      	beq.n	800eaa8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800ea88:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ea8c:	4293      	cmp	r3, r2
 800ea8e:	d00b      	beq.n	800eaa8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800ea90:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d007      	beq.n	800eaa8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800ea98:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d003      	beq.n	800eaa8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800eaa0:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d104      	bne.n	800eab2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eaa8:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eaaa:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eaae:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eab0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eab2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800eab4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800eab6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800eaba:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 800eabe:	bd70      	pop	{r4, r5, r6, pc}
 800eac0:	40010000 	.word	0x40010000
 800eac4:	40010400 	.word	0x40010400
 800eac8:	40000400 	.word	0x40000400

0800eacc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eacc:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800eace:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800ead2:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d037      	beq.n	800eb48 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ead8:	68cb      	ldr	r3, [r1, #12]
 800eada:	6888      	ldr	r0, [r1, #8]
 800eadc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800eae0:	4c1a      	ldr	r4, [pc, #104]	@ (800eb4c <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800eae2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eae4:	6848      	ldr	r0, [r1, #4]
 800eae6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eaea:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800eaec:	6808      	ldr	r0, [r1, #0]
 800eaee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eaf2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800eaf4:	6908      	ldr	r0, [r1, #16]
 800eaf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eafa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800eafc:	6948      	ldr	r0, [r1, #20]
 800eafe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eb02:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eb04:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 800eb06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800eb0a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800eb0c:	6988      	ldr	r0, [r1, #24]
 800eb0e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800eb12:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800eb16:	6810      	ldr	r0, [r2, #0]
 800eb18:	42a0      	cmp	r0, r4
 800eb1a:	d003      	beq.n	800eb24 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
 800eb1c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800eb20:	42a0      	cmp	r0, r4
 800eb22:	d10c      	bne.n	800eb3e <HAL_TIMEx_ConfigBreakDeadTime+0x72>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800eb24:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800eb26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800eb2a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800eb2e:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800eb30:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800eb32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800eb36:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800eb38:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800eb3c:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800eb3e:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800eb40:	2000      	movs	r0, #0
 800eb42:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 800eb46:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800eb48:	2002      	movs	r0, #2
 800eb4a:	e7fc      	b.n	800eb46 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 800eb4c:	40010000 	.word	0x40010000

0800eb50 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800eb50:	4770      	bx	lr

0800eb52 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800eb52:	4770      	bx	lr

0800eb54 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800eb54:	4770      	bx	lr

0800eb56 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800eb56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800eb5a:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800eb5e:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800eb62:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800eb66:	ea43 0308 	orr.w	r3, r3, r8
 800eb6a:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800eb6e:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800eb72:	6809      	ldr	r1, [r1, #0]
 800eb74:	b991      	cbnz	r1, 800eb9c <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800eb76:	ea43 030e 	orr.w	r3, r3, lr
 800eb7a:	6801      	ldr	r1, [r0, #0]
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800eb82:	ea43 030c 	orr.w	r3, r3, ip
 800eb86:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800eb8a:	433b      	orrs	r3, r7
 800eb8c:	4333      	orrs	r3, r6
 800eb8e:	432b      	orrs	r3, r5
 800eb90:	4323      	orrs	r3, r4
 800eb92:	430b      	orrs	r3, r1
 800eb94:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800eb96:	2000      	movs	r0, #0
 800eb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800eb9c:	6801      	ldr	r1, [r0, #0]
 800eb9e:	ea43 030e 	orr.w	r3, r3, lr
 800eba2:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800eba6:	430b      	orrs	r3, r1
 800eba8:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ebaa:	ea42 030c 	orr.w	r3, r2, ip
 800ebae:	6841      	ldr	r1, [r0, #4]
 800ebb0:	433b      	orrs	r3, r7
 800ebb2:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800ebb6:	4333      	orrs	r3, r6
 800ebb8:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800ebbc:	432b      	orrs	r3, r5
 800ebbe:	4323      	orrs	r3, r4
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	6043      	str	r3, [r0, #4]
 800ebc4:	e7e7      	b.n	800eb96 <FMC_SDRAM_Init+0x40>

0800ebc6 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ebc6:	68cb      	ldr	r3, [r1, #12]
 800ebc8:	f103 3cff 	add.w	ip, r3, #4294967295
 800ebcc:	694b      	ldr	r3, [r1, #20]
{
 800ebce:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ebd0:	3b01      	subs	r3, #1
 800ebd2:	680f      	ldr	r7, [r1, #0]
 800ebd4:	684c      	ldr	r4, [r1, #4]
 800ebd6:	688e      	ldr	r6, [r1, #8]
 800ebd8:	051b      	lsls	r3, r3, #20
 800ebda:	690d      	ldr	r5, [r1, #16]
 800ebdc:	3c01      	subs	r4, #1
 800ebde:	6989      	ldr	r1, [r1, #24]
 800ebe0:	3e01      	subs	r6, #1
 800ebe2:	3d01      	subs	r5, #1
 800ebe4:	3f01      	subs	r7, #1
 800ebe6:	3901      	subs	r1, #1
 800ebe8:	0124      	lsls	r4, r4, #4
 800ebea:	0236      	lsls	r6, r6, #8
 800ebec:	042d      	lsls	r5, r5, #16
 800ebee:	0609      	lsls	r1, r1, #24
 800ebf0:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800ebf4:	b95a      	cbnz	r2, 800ec0e <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ebf6:	433b      	orrs	r3, r7
 800ebf8:	6882      	ldr	r2, [r0, #8]
 800ebfa:	4323      	orrs	r3, r4
 800ebfc:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800ec00:	4333      	orrs	r3, r6
 800ec02:	432b      	orrs	r3, r5
 800ec04:	430b      	orrs	r3, r1
 800ec06:	4313      	orrs	r3, r2
 800ec08:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800ec0a:	2000      	movs	r0, #0
 800ec0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ec0e:	6882      	ldr	r2, [r0, #8]
 800ec10:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800ec14:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800ec18:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ec1a:	ea44 0306 	orr.w	r3, r4, r6
 800ec1e:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ec20:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ec22:	68c2      	ldr	r2, [r0, #12]
 800ec24:	432b      	orrs	r3, r5
 800ec26:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800ec2a:	430b      	orrs	r3, r1
 800ec2c:	4313      	orrs	r3, r2
 800ec2e:	60c3      	str	r3, [r0, #12]
 800ec30:	e7eb      	b.n	800ec0a <FMC_SDRAM_Timing_Init+0x44>

0800ec32 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ec32:	6902      	ldr	r2, [r0, #16]
{
 800ec34:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ec36:	e9d1 3400 	ldrd	r3, r4, [r1]
 800ec3a:	0d92      	lsrs	r2, r2, #22
 800ec3c:	4323      	orrs	r3, r4
 800ec3e:	68cc      	ldr	r4, [r1, #12]
 800ec40:	0592      	lsls	r2, r2, #22
 800ec42:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800ec46:	4313      	orrs	r3, r2
 800ec48:	688a      	ldr	r2, [r1, #8]
 800ec4a:	3a01      	subs	r2, #1
 800ec4c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800ec50:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800ec52:	2000      	movs	r0, #0
 800ec54:	bd10      	pop	{r4, pc}

0800ec56 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ec56:	6943      	ldr	r3, [r0, #20]
 800ec58:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800ec5c:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800ec60:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800ec64:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800ec66:	2000      	movs	r0, #0
 800ec68:	4770      	bx	lr
	...

0800ec6c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec6c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800ec70:	b113      	cbz	r3, 800ec78 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800ec72:	f06f 0005 	mvn.w	r0, #5
 800ec76:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec78:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800ec7c:	4b07      	ldr	r3, [pc, #28]	@ (800ec9c <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800ec7e:	b912      	cbnz	r2, 800ec86 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ec80:	f3ef 8211 	mrs	r2, BASEPRI
 800ec84:	b112      	cbz	r2, 800ec8c <osKernelInitialize+0x20>
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	2a02      	cmp	r2, #2
 800ec8a:	d0f2      	beq.n	800ec72 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ec8c:	6818      	ldr	r0, [r3, #0]
 800ec8e:	b910      	cbnz	r0, 800ec96 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ec90:	2201      	movs	r2, #1
 800ec92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ec94:	4770      	bx	lr
    } else {
      stat = osError;
 800ec96:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800ec9a:	4770      	bx	lr
 800ec9c:	20012a80 	.word	0x20012a80

0800eca0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800eca0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eca2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800eca6:	b113      	cbz	r3, 800ecae <osKernelStart+0xe>
    stat = osErrorISR;
 800eca8:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800ecac:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecae:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800ecb2:	4b0a      	ldr	r3, [pc, #40]	@ (800ecdc <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800ecb4:	b912      	cbnz	r2, 800ecbc <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ecb6:	f3ef 8211 	mrs	r2, BASEPRI
 800ecba:	b112      	cbz	r2, 800ecc2 <osKernelStart+0x22>
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	2a02      	cmp	r2, #2
 800ecc0:	d0f2      	beq.n	800eca8 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800ecc2:	681a      	ldr	r2, [r3, #0]
 800ecc4:	2a01      	cmp	r2, #1
 800ecc6:	d105      	bne.n	800ecd4 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800ecc8:	2202      	movs	r2, #2
 800ecca:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800eccc:	f001 fe62 	bl	8010994 <vTaskStartScheduler>
      stat = osOK;
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	e7eb      	b.n	800ecac <osKernelStart+0xc>
      stat = osError;
 800ecd4:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800ecd8:	e7e8      	b.n	800ecac <osKernelStart+0xc>
 800ecda:	bf00      	nop
 800ecdc:	20012a80 	.word	0x20012a80

0800ece0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ece0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ece2:	4614      	mov	r4, r2
 800ece4:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ece6:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ece8:	460b      	mov	r3, r1
  hTask = NULL;
 800ecea:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecec:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800ecf0:	bb1a      	cbnz	r2, 800ed3a <osThreadNew+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecf2:	f3ef 8210 	mrs	r2, PRIMASK
 800ecf6:	b912      	cbnz	r2, 800ecfe <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ecf8:	f3ef 8211 	mrs	r2, BASEPRI
 800ecfc:	b11a      	cbz	r2, 800ed06 <osThreadNew+0x26>
 800ecfe:	4a21      	ldr	r2, [pc, #132]	@ (800ed84 <osThreadNew+0xa4>)
 800ed00:	6812      	ldr	r2, [r2, #0]
 800ed02:	2a02      	cmp	r2, #2
 800ed04:	d019      	beq.n	800ed3a <osThreadNew+0x5a>
 800ed06:	b1c0      	cbz	r0, 800ed3a <osThreadNew+0x5a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800ed08:	b36c      	cbz	r4, 800ed66 <osThreadNew+0x86>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800ed0a:	69a5      	ldr	r5, [r4, #24]
 800ed0c:	2d00      	cmp	r5, #0
 800ed0e:	bf08      	it	eq
 800ed10:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ed12:	1e6a      	subs	r2, r5, #1
 800ed14:	46ac      	mov	ip, r5
 800ed16:	2a37      	cmp	r2, #55	@ 0x37
 800ed18:	d82a      	bhi.n	800ed70 <osThreadNew+0x90>
 800ed1a:	6862      	ldr	r2, [r4, #4]
 800ed1c:	07d2      	lsls	r2, r2, #31
 800ed1e:	d427      	bmi.n	800ed70 <osThreadNew+0x90>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800ed20:	6966      	ldr	r6, [r4, #20]
 800ed22:	b16e      	cbz	r6, 800ed40 <osThreadNew+0x60>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ed24:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800ed26:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ed28:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800ed2c:	b157      	cbz	r7, 800ed44 <osThreadNew+0x64>
 800ed2e:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800ed32:	d902      	bls.n	800ed3a <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ed34:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ed36:	b104      	cbz	r4, 800ed3a <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ed38:	b9e6      	cbnz	r6, 800ed74 <osThreadNew+0x94>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ed3a:	9805      	ldr	r0, [sp, #20]
}
 800ed3c:	b007      	add	sp, #28
 800ed3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800ed40:	2280      	movs	r2, #128	@ 0x80
 800ed42:	e7f0      	b.n	800ed26 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ed44:	f1be 0f00 	cmp.w	lr, #0
 800ed48:	d1f7      	bne.n	800ed3a <osThreadNew+0x5a>
      if (mem == 0) {
 800ed4a:	6924      	ldr	r4, [r4, #16]
 800ed4c:	2c00      	cmp	r4, #0
 800ed4e:	d1f4      	bne.n	800ed3a <osThreadNew+0x5a>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ed50:	ac05      	add	r4, sp, #20
 800ed52:	b292      	uxth	r2, r2
 800ed54:	e9cd c400 	strd	ip, r4, [sp]
 800ed58:	f001 fc8f 	bl	801067a <xTaskCreate>
 800ed5c:	2801      	cmp	r0, #1
          hTask = NULL;
 800ed5e:	bf1c      	itt	ne
 800ed60:	2300      	movne	r3, #0
 800ed62:	9305      	strne	r3, [sp, #20]
 800ed64:	e7e9      	b.n	800ed3a <osThreadNew+0x5a>
    name = NULL;
 800ed66:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800ed68:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800ed6c:	2280      	movs	r2, #128	@ 0x80
 800ed6e:	e7ef      	b.n	800ed50 <osThreadNew+0x70>
        return (NULL);
 800ed70:	2000      	movs	r0, #0
 800ed72:	e7e3      	b.n	800ed3c <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ed74:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800ed78:	9500      	str	r5, [sp, #0]
 800ed7a:	f001 fc40 	bl	80105fe <xTaskCreateStatic>
 800ed7e:	9005      	str	r0, [sp, #20]
 800ed80:	e7db      	b.n	800ed3a <osThreadNew+0x5a>
 800ed82:	bf00      	nop
 800ed84:	20012a80 	.word	0x20012a80

0800ed88 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ed88:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed8a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800ed8e:	b113      	cbz	r3, 800ed96 <osDelay+0xe>
    stat = osErrorISR;
 800ed90:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800ed94:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed96:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800ed9a:	b913      	cbnz	r3, 800eda2 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed9c:	f3ef 8311 	mrs	r3, BASEPRI
 800eda0:	b11b      	cbz	r3, 800edaa <osDelay+0x22>
 800eda2:	4b04      	ldr	r3, [pc, #16]	@ (800edb4 <osDelay+0x2c>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	2b02      	cmp	r3, #2
 800eda8:	d0f2      	beq.n	800ed90 <osDelay+0x8>
    if (ticks != 0U) {
 800edaa:	b108      	cbz	r0, 800edb0 <osDelay+0x28>
      vTaskDelay(ticks);
 800edac:	f001 fdb0 	bl	8010910 <vTaskDelay>
    stat = osOK;
 800edb0:	2000      	movs	r0, #0
  return (stat);
 800edb2:	e7ef      	b.n	800ed94 <osDelay+0xc>
 800edb4:	20012a80 	.word	0x20012a80

0800edb8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800edb8:	b570      	push	{r4, r5, r6, lr}
 800edba:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edbc:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800edc0:	b116      	cbz	r6, 800edc8 <osMutexNew+0x10>
  hMutex = NULL;
 800edc2:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800edc4:	4620      	mov	r0, r4
 800edc6:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edc8:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 800edcc:	b912      	cbnz	r2, 800edd4 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800edce:	f3ef 8211 	mrs	r2, BASEPRI
 800edd2:	b11a      	cbz	r2, 800eddc <osMutexNew+0x24>
 800edd4:	4a18      	ldr	r2, [pc, #96]	@ (800ee38 <osMutexNew+0x80>)
 800edd6:	6812      	ldr	r2, [r2, #0]
 800edd8:	2a02      	cmp	r2, #2
 800edda:	d0f2      	beq.n	800edc2 <osMutexNew+0xa>
    if (attr != NULL) {
 800eddc:	b115      	cbz	r5, 800ede4 <osMutexNew+0x2c>
      type = attr->attr_bits;
 800edde:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800ede0:	0733      	lsls	r3, r6, #28
 800ede2:	d4ee      	bmi.n	800edc2 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ede4:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800ede8:	b17d      	cbz	r5, 800ee0a <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800edea:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800edee:	b151      	cbz	r1, 800ee06 <osMutexNew+0x4e>
 800edf0:	2b4f      	cmp	r3, #79	@ 0x4f
 800edf2:	d9e6      	bls.n	800edc2 <osMutexNew+0xa>
        if (rmtx != 0U) {
 800edf4:	b1de      	cbz	r6, 800ee2e <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800edf6:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800edf8:	f000 ff49 	bl	800fc8e <xQueueCreateMutexStatic>
 800edfc:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800edfe:	2800      	cmp	r0, #0
 800ee00:	d0df      	beq.n	800edc2 <osMutexNew+0xa>
          name = attr->name;
 800ee02:	682d      	ldr	r5, [r5, #0]
 800ee04:	e00a      	b.n	800ee1c <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1db      	bne.n	800edc2 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800ee0a:	b196      	cbz	r6, 800ee32 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800ee0c:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 800ee0e:	f000 ff74 	bl	800fcfa <xQueueCreateMutex>
 800ee12:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800ee14:	2800      	cmp	r0, #0
 800ee16:	d0d4      	beq.n	800edc2 <osMutexNew+0xa>
        if (attr != NULL) {
 800ee18:	2d00      	cmp	r5, #0
 800ee1a:	d1f2      	bne.n	800ee02 <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 800ee1c:	4629      	mov	r1, r5
 800ee1e:	4620      	mov	r0, r4
 800ee20:	f001 fa24 	bl	801026c <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ee24:	2e00      	cmp	r6, #0
 800ee26:	d0cd      	beq.n	800edc4 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ee28:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800ee2c:	e7ca      	b.n	800edc4 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ee2e:	2001      	movs	r0, #1
 800ee30:	e7e2      	b.n	800edf8 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800ee32:	2001      	movs	r0, #1
 800ee34:	e7eb      	b.n	800ee0e <osMutexNew+0x56>
 800ee36:	bf00      	nop
 800ee38:	20012a80 	.word	0x20012a80

0800ee3c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ee3c:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ee3e:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ee42:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800ee44:	f003 0201 	and.w	r2, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ee48:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee4a:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800ee4e:	b111      	cbz	r1, 800ee56 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800ee50:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800ee54:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee56:	f3ef 8110 	mrs	r1, PRIMASK
  if (IS_IRQ()) {
 800ee5a:	b911      	cbnz	r1, 800ee62 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ee5c:	f3ef 8111 	mrs	r1, BASEPRI
 800ee60:	b119      	cbz	r1, 800ee6a <osMutexAcquire+0x2e>
 800ee62:	490d      	ldr	r1, [pc, #52]	@ (800ee98 <osMutexAcquire+0x5c>)
 800ee64:	6809      	ldr	r1, [r1, #0]
 800ee66:	2902      	cmp	r1, #2
 800ee68:	d0f2      	beq.n	800ee50 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d911      	bls.n	800ee92 <osMutexAcquire+0x56>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ee6e:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800ee70:	b162      	cbz	r2, 800ee8c <osMutexAcquire+0x50>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ee72:	f001 f985 	bl	8010180 <xQueueTakeMutexRecursive>
 800ee76:	2801      	cmp	r0, #1
 800ee78:	d101      	bne.n	800ee7e <osMutexAcquire+0x42>
  stat = osOK;
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	e7ea      	b.n	800ee54 <osMutexAcquire+0x18>
          stat = osErrorResource;
 800ee7e:	2c00      	cmp	r4, #0
 800ee80:	bf14      	ite	ne
 800ee82:	f06f 0001 	mvnne.w	r0, #1
 800ee86:	f06f 0002 	mvneq.w	r0, #2
 800ee8a:	e7e3      	b.n	800ee54 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ee8c:	f001 f8b3 	bl	800fff6 <xQueueSemaphoreTake>
 800ee90:	e7f1      	b.n	800ee76 <osMutexAcquire+0x3a>
    stat = osErrorParameter;
 800ee92:	f06f 0003 	mvn.w	r0, #3
 800ee96:	e7dd      	b.n	800ee54 <osMutexAcquire+0x18>
 800ee98:	20012a80 	.word	0x20012a80

0800ee9c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ee9c:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ee9e:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800eea2:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800eea4:	f002 0301 	and.w	r3, r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eea8:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800eeac:	b111      	cbz	r1, 800eeb4 <osMutexRelease+0x18>
    stat = osErrorISR;
 800eeae:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800eeb2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eeb4:	f3ef 8110 	mrs	r1, PRIMASK
  if (IS_IRQ()) {
 800eeb8:	b911      	cbnz	r1, 800eec0 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eeba:	f3ef 8111 	mrs	r1, BASEPRI
 800eebe:	b119      	cbz	r1, 800eec8 <osMutexRelease+0x2c>
 800eec0:	490b      	ldr	r1, [pc, #44]	@ (800eef0 <osMutexRelease+0x54>)
 800eec2:	6809      	ldr	r1, [r1, #0]
 800eec4:	2902      	cmp	r1, #2
 800eec6:	d0f2      	beq.n	800eeae <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 800eec8:	2a01      	cmp	r2, #1
 800eeca:	d90d      	bls.n	800eee8 <osMutexRelease+0x4c>
    if (rmtx != 0U) {
 800eecc:	b13b      	cbz	r3, 800eede <osMutexRelease+0x42>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800eece:	f000 fef3 	bl	800fcb8 <xQueueGiveMutexRecursive>
 800eed2:	2801      	cmp	r0, #1
  stat = osOK;
 800eed4:	bf0c      	ite	eq
 800eed6:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800eed8:	f06f 0002 	mvnne.w	r0, #2
 800eedc:	e7e9      	b.n	800eeb2 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800eede:	461a      	mov	r2, r3
 800eee0:	4619      	mov	r1, r3
 800eee2:	f000 fe1a 	bl	800fb1a <xQueueGenericSend>
 800eee6:	e7f4      	b.n	800eed2 <osMutexRelease+0x36>
    stat = osErrorParameter;
 800eee8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800eeec:	e7e1      	b.n	800eeb2 <osMutexRelease+0x16>
 800eeee:	bf00      	nop
 800eef0:	20012a80 	.word	0x20012a80

0800eef4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800eef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eef6:	460e      	mov	r6, r1
 800eef8:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eefa:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800eefe:	b993      	cbnz	r3, 800ef26 <osSemaphoreNew+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef00:	f3ef 8310 	mrs	r3, PRIMASK
 800ef04:	b913      	cbnz	r3, 800ef0c <osSemaphoreNew+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef06:	f3ef 8311 	mrs	r3, BASEPRI
 800ef0a:	b11b      	cbz	r3, 800ef14 <osSemaphoreNew+0x20>
 800ef0c:	4b24      	ldr	r3, [pc, #144]	@ (800efa0 <osSemaphoreNew+0xac>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	2b02      	cmp	r3, #2
 800ef12:	d008      	beq.n	800ef26 <osSemaphoreNew+0x32>
 800ef14:	b138      	cbz	r0, 800ef26 <osSemaphoreNew+0x32>
 800ef16:	42b0      	cmp	r0, r6
 800ef18:	d305      	bcc.n	800ef26 <osSemaphoreNew+0x32>
    mem = -1;

    if (attr != NULL) {
 800ef1a:	b155      	cbz	r5, 800ef32 <osSemaphoreNew+0x3e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ef1c:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800ef20:	b12b      	cbz	r3, 800ef2e <osSemaphoreNew+0x3a>
 800ef22:	2a4f      	cmp	r2, #79	@ 0x4f
 800ef24:	d823      	bhi.n	800ef6e <osSemaphoreNew+0x7a>
  hSemaphore = NULL;
 800ef26:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800ef28:	4620      	mov	r0, r4
 800ef2a:	b002      	add	sp, #8
 800ef2c:	bd70      	pop	{r4, r5, r6, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ef2e:	2a00      	cmp	r2, #0
 800ef30:	d1f9      	bne.n	800ef26 <osSemaphoreNew+0x32>
      if (max_count == 1U) {
 800ef32:	2801      	cmp	r0, #1
 800ef34:	d10e      	bne.n	800ef54 <osSemaphoreNew+0x60>
          hSemaphore = xSemaphoreCreateBinary();
 800ef36:	2203      	movs	r2, #3
 800ef38:	2100      	movs	r1, #0
 800ef3a:	2001      	movs	r0, #1
 800ef3c:	f000 fd7c 	bl	800fa38 <xQueueGenericCreate>
 800ef40:	e01d      	b.n	800ef7e <osSemaphoreNew+0x8a>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ef42:	461a      	mov	r2, r3
 800ef44:	4631      	mov	r1, r6
 800ef46:	f000 fda0 	bl	800fa8a <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800ef4a:	4604      	mov	r4, r0
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	d0ea      	beq.n	800ef26 <osSemaphoreNew+0x32>
          name = attr->name;
 800ef50:	682d      	ldr	r5, [r5, #0]
 800ef52:	e007      	b.n	800ef64 <osSemaphoreNew+0x70>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ef54:	4631      	mov	r1, r6
 800ef56:	f000 fdbe 	bl	800fad6 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800ef5a:	4604      	mov	r4, r0
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d0e2      	beq.n	800ef26 <osSemaphoreNew+0x32>
        if (attr != NULL) {
 800ef60:	2d00      	cmp	r5, #0
 800ef62:	d1f5      	bne.n	800ef50 <osSemaphoreNew+0x5c>
        vQueueAddToRegistry (hSemaphore, name);
 800ef64:	4629      	mov	r1, r5
 800ef66:	4620      	mov	r0, r4
 800ef68:	f001 f980 	bl	801026c <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800ef6c:	e7dc      	b.n	800ef28 <osSemaphoreNew+0x34>
      if (max_count == 1U) {
 800ef6e:	2801      	cmp	r0, #1
 800ef70:	d1e7      	bne.n	800ef42 <osSemaphoreNew+0x4e>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ef72:	2203      	movs	r2, #3
 800ef74:	9200      	str	r2, [sp, #0]
 800ef76:	2200      	movs	r2, #0
 800ef78:	4611      	mov	r1, r2
 800ef7a:	f000 fd49 	bl	800fa10 <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800ef7e:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ef80:	2800      	cmp	r0, #0
 800ef82:	d0d0      	beq.n	800ef26 <osSemaphoreNew+0x32>
 800ef84:	2e00      	cmp	r6, #0
 800ef86:	d0eb      	beq.n	800ef60 <osSemaphoreNew+0x6c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ef88:	2300      	movs	r3, #0
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	f000 fdc4 	bl	800fb1a <xQueueGenericSend>
 800ef92:	2801      	cmp	r0, #1
 800ef94:	d0e4      	beq.n	800ef60 <osSemaphoreNew+0x6c>
            vSemaphoreDelete (hSemaphore);
 800ef96:	4620      	mov	r0, r4
 800ef98:	f001 f992 	bl	80102c0 <vQueueDelete>
      if (hSemaphore != NULL) {
 800ef9c:	e7c3      	b.n	800ef26 <osSemaphoreNew+0x32>
 800ef9e:	bf00      	nop
 800efa0:	20012a80 	.word	0x20012a80

0800efa4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800efa4:	b513      	push	{r0, r1, r4, lr}
 800efa6:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800efa8:	b918      	cbnz	r0, 800efb2 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800efaa:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800efae:	b002      	add	sp, #8
 800efb0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efb2:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800efb6:	b15b      	cbz	r3, 800efd0 <osSemaphoreAcquire+0x2c>
    if (timeout != 0U) {
 800efb8:	2c00      	cmp	r4, #0
 800efba:	d1f6      	bne.n	800efaa <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800efbc:	aa01      	add	r2, sp, #4
 800efbe:	4621      	mov	r1, r4
      yield = pdFALSE;
 800efc0:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800efc2:	f001 f900 	bl	80101c6 <xQueueReceiveFromISR>
 800efc6:	2801      	cmp	r0, #1
 800efc8:	d016      	beq.n	800eff8 <osSemaphoreAcquire+0x54>
        stat = osErrorResource;
 800efca:	f06f 0002 	mvn.w	r0, #2
 800efce:	e7ee      	b.n	800efae <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efd0:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800efd4:	b913      	cbnz	r3, 800efdc <osSemaphoreAcquire+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800efd6:	f3ef 8311 	mrs	r3, BASEPRI
 800efda:	b11b      	cbz	r3, 800efe4 <osSemaphoreAcquire+0x40>
 800efdc:	4b0e      	ldr	r3, [pc, #56]	@ (800f018 <osSemaphoreAcquire+0x74>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	2b02      	cmp	r3, #2
 800efe2:	d0e9      	beq.n	800efb8 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800efe4:	4621      	mov	r1, r4
 800efe6:	f001 f806 	bl	800fff6 <xQueueSemaphoreTake>
 800efea:	2801      	cmp	r0, #1
 800efec:	d006      	beq.n	800effc <osSemaphoreAcquire+0x58>
      if (timeout != 0U) {
 800efee:	2c00      	cmp	r4, #0
 800eff0:	d0eb      	beq.n	800efca <osSemaphoreAcquire+0x26>
        stat = osErrorTimeout;
 800eff2:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800eff6:	e7da      	b.n	800efae <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800eff8:	9b01      	ldr	r3, [sp, #4]
 800effa:	b90b      	cbnz	r3, 800f000 <osSemaphoreAcquire+0x5c>
  stat = osOK;
 800effc:	2000      	movs	r0, #0
 800effe:	e7d6      	b.n	800efae <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800f000:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f008:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f00c:	f3bf 8f4f 	dsb	sy
 800f010:	f3bf 8f6f 	isb	sy
 800f014:	e7f2      	b.n	800effc <osSemaphoreAcquire+0x58>
 800f016:	bf00      	nop
 800f018:	20012a80 	.word	0x20012a80

0800f01c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f01c:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800f01e:	b370      	cbz	r0, 800f07e <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f020:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800f024:	b15b      	cbz	r3, 800f03e <osSemaphoreRelease+0x22>
    yield = pdFALSE;
 800f026:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f028:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800f02a:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f02c:	f000 fee6 	bl	800fdfc <xQueueGiveFromISR>
 800f030:	2801      	cmp	r0, #1
 800f032:	d016      	beq.n	800f062 <osSemaphoreRelease+0x46>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800f034:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800f038:	b003      	add	sp, #12
 800f03a:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f03e:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800f042:	b913      	cbnz	r3, 800f04a <osSemaphoreRelease+0x2e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f044:	f3ef 8311 	mrs	r3, BASEPRI
 800f048:	b11b      	cbz	r3, 800f052 <osSemaphoreRelease+0x36>
 800f04a:	4b0e      	ldr	r3, [pc, #56]	@ (800f084 <osSemaphoreRelease+0x68>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	2b02      	cmp	r3, #2
 800f050:	d0e9      	beq.n	800f026 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f052:	2300      	movs	r3, #0
 800f054:	461a      	mov	r2, r3
 800f056:	4619      	mov	r1, r3
 800f058:	f000 fd5f 	bl	800fb1a <xQueueGenericSend>
 800f05c:	2801      	cmp	r0, #1
 800f05e:	d00c      	beq.n	800f07a <osSemaphoreRelease+0x5e>
 800f060:	e7e8      	b.n	800f034 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 800f062:	9b01      	ldr	r3, [sp, #4]
 800f064:	b14b      	cbz	r3, 800f07a <osSemaphoreRelease+0x5e>
 800f066:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f06a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f06e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f072:	f3bf 8f4f 	dsb	sy
 800f076:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800f07a:	2000      	movs	r0, #0
 800f07c:	e7dc      	b.n	800f038 <osSemaphoreRelease+0x1c>
    stat = osErrorParameter;
 800f07e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800f082:	e7d9      	b.n	800f038 <osSemaphoreRelease+0x1c>
 800f084:	20012a80 	.word	0x20012a80

0800f088 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f088:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f08a:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f08c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f090:	b11b      	cbz	r3, 800f09a <osMessageQueueNew+0x12>
  hQueue = NULL;
 800f092:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800f094:	4628      	mov	r0, r5
 800f096:	b002      	add	sp, #8
 800f098:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f09a:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f09e:	b913      	cbnz	r3, 800f0a6 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f0a0:	f3ef 8311 	mrs	r3, BASEPRI
 800f0a4:	b11b      	cbz	r3, 800f0ae <osMessageQueueNew+0x26>
 800f0a6:	4b1a      	ldr	r3, [pc, #104]	@ (800f110 <osMessageQueueNew+0x88>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	2b02      	cmp	r3, #2
 800f0ac:	d0f1      	beq.n	800f092 <osMessageQueueNew+0xa>
 800f0ae:	2800      	cmp	r0, #0
 800f0b0:	d0ef      	beq.n	800f092 <osMessageQueueNew+0xa>
 800f0b2:	2900      	cmp	r1, #0
 800f0b4:	d0ed      	beq.n	800f092 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800f0b6:	b1ec      	cbz	r4, 800f0f4 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f0b8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800f0bc:	b193      	cbz	r3, 800f0e4 <osMessageQueueNew+0x5c>
 800f0be:	2a4f      	cmp	r2, #79	@ 0x4f
 800f0c0:	d9e7      	bls.n	800f092 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f0c2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f0c4:	2a00      	cmp	r2, #0
 800f0c6:	d0e4      	beq.n	800f092 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f0c8:	fb01 f500 	mul.w	r5, r1, r0
 800f0cc:	6966      	ldr	r6, [r4, #20]
 800f0ce:	42ae      	cmp	r6, r5
 800f0d0:	d3df      	bcc.n	800f092 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f0d2:	2500      	movs	r5, #0
 800f0d4:	9500      	str	r5, [sp, #0]
 800f0d6:	f000 fc9b 	bl	800fa10 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800f0da:	4605      	mov	r5, r0
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	d0d8      	beq.n	800f092 <osMessageQueueNew+0xa>
        name = attr->name;
 800f0e0:	6824      	ldr	r4, [r4, #0]
 800f0e2:	e00f      	b.n	800f104 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f0e4:	2a00      	cmp	r2, #0
 800f0e6:	d1d4      	bne.n	800f092 <osMessageQueueNew+0xa>
 800f0e8:	6923      	ldr	r3, [r4, #16]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d1d1      	bne.n	800f092 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f0ee:	6963      	ldr	r3, [r4, #20]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d1ce      	bne.n	800f092 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	f000 fc9f 	bl	800fa38 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800f0fa:	4605      	mov	r5, r0
 800f0fc:	2800      	cmp	r0, #0
 800f0fe:	d0c8      	beq.n	800f092 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800f100:	2c00      	cmp	r4, #0
 800f102:	d1ed      	bne.n	800f0e0 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 800f104:	4621      	mov	r1, r4
 800f106:	4628      	mov	r0, r5
 800f108:	f001 f8b0 	bl	801026c <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800f10c:	e7c2      	b.n	800f094 <osMessageQueueNew+0xc>
 800f10e:	bf00      	nop
 800f110:	20012a80 	.word	0x20012a80

0800f114 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f114:	b513      	push	{r0, r1, r4, lr}
 800f116:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f118:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800f11c:	b123      	cbz	r3, 800f128 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f11e:	b9d8      	cbnz	r0, 800f158 <osMessageQueuePut+0x44>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 800f120:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800f124:	b002      	add	sp, #8
 800f126:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f128:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800f12c:	b913      	cbnz	r3, 800f134 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f12e:	f3ef 8311 	mrs	r3, BASEPRI
 800f132:	b11b      	cbz	r3, 800f13c <osMessageQueuePut+0x28>
 800f134:	4b17      	ldr	r3, [pc, #92]	@ (800f194 <osMessageQueuePut+0x80>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	2b02      	cmp	r3, #2
 800f13a:	d0f0      	beq.n	800f11e <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f13c:	2800      	cmp	r0, #0
 800f13e:	d0ef      	beq.n	800f120 <osMessageQueuePut+0xc>
 800f140:	2900      	cmp	r1, #0
 800f142:	d0ed      	beq.n	800f120 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f144:	2300      	movs	r3, #0
 800f146:	4622      	mov	r2, r4
 800f148:	f000 fce7 	bl	800fb1a <xQueueGenericSend>
 800f14c:	2801      	cmp	r0, #1
 800f14e:	d013      	beq.n	800f178 <osMessageQueuePut+0x64>
        if (timeout != 0U) {
 800f150:	b16c      	cbz	r4, 800f16e <osMessageQueuePut+0x5a>
          stat = osErrorTimeout;
 800f152:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800f156:	e7e5      	b.n	800f124 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f158:	2900      	cmp	r1, #0
 800f15a:	d0e1      	beq.n	800f120 <osMessageQueuePut+0xc>
 800f15c:	2c00      	cmp	r4, #0
 800f15e:	d1df      	bne.n	800f120 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f160:	4623      	mov	r3, r4
 800f162:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800f164:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f166:	f000 fde5 	bl	800fd34 <xQueueGenericSendFromISR>
 800f16a:	2801      	cmp	r0, #1
 800f16c:	d002      	beq.n	800f174 <osMessageQueuePut+0x60>
        stat = osErrorResource;
 800f16e:	f06f 0002 	mvn.w	r0, #2
 800f172:	e7d7      	b.n	800f124 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800f174:	9b01      	ldr	r3, [sp, #4]
 800f176:	b90b      	cbnz	r3, 800f17c <osMessageQueuePut+0x68>
  stat = osOK;
 800f178:	2000      	movs	r0, #0
 800f17a:	e7d3      	b.n	800f124 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800f17c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f184:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f188:	f3bf 8f4f 	dsb	sy
 800f18c:	f3bf 8f6f 	isb	sy
 800f190:	e7f2      	b.n	800f178 <osMessageQueuePut+0x64>
 800f192:	bf00      	nop
 800f194:	20012a80 	.word	0x20012a80

0800f198 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f198:	b513      	push	{r0, r1, r4, lr}
 800f19a:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f19c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800f1a0:	b123      	cbz	r3, 800f1ac <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f1a2:	b9d0      	cbnz	r0, 800f1da <osMessageQueueGet+0x42>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 800f1a4:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800f1a8:	b002      	add	sp, #8
 800f1aa:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1ac:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800f1b0:	b913      	cbnz	r3, 800f1b8 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f1b2:	f3ef 8311 	mrs	r3, BASEPRI
 800f1b6:	b11b      	cbz	r3, 800f1c0 <osMessageQueueGet+0x28>
 800f1b8:	4b16      	ldr	r3, [pc, #88]	@ (800f214 <osMessageQueueGet+0x7c>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2b02      	cmp	r3, #2
 800f1be:	d0f0      	beq.n	800f1a2 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	d0ef      	beq.n	800f1a4 <osMessageQueueGet+0xc>
 800f1c4:	2900      	cmp	r1, #0
 800f1c6:	d0ed      	beq.n	800f1a4 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f1c8:	4622      	mov	r2, r4
 800f1ca:	f000 fe70 	bl	800feae <xQueueReceive>
 800f1ce:	2801      	cmp	r0, #1
 800f1d0:	d012      	beq.n	800f1f8 <osMessageQueueGet+0x60>
        if (timeout != 0U) {
 800f1d2:	b164      	cbz	r4, 800f1ee <osMessageQueueGet+0x56>
          stat = osErrorTimeout;
 800f1d4:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800f1d8:	e7e6      	b.n	800f1a8 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f1da:	2900      	cmp	r1, #0
 800f1dc:	d0e2      	beq.n	800f1a4 <osMessageQueueGet+0xc>
 800f1de:	2c00      	cmp	r4, #0
 800f1e0:	d1e0      	bne.n	800f1a4 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f1e2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800f1e4:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f1e6:	f000 ffee 	bl	80101c6 <xQueueReceiveFromISR>
 800f1ea:	2801      	cmp	r0, #1
 800f1ec:	d002      	beq.n	800f1f4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f1ee:	f06f 0002 	mvn.w	r0, #2
 800f1f2:	e7d9      	b.n	800f1a8 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800f1f4:	9b01      	ldr	r3, [sp, #4]
 800f1f6:	b90b      	cbnz	r3, 800f1fc <osMessageQueueGet+0x64>
  stat = osOK;
 800f1f8:	2000      	movs	r0, #0
 800f1fa:	e7d5      	b.n	800f1a8 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800f1fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f200:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f204:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f208:	f3bf 8f4f 	dsb	sy
 800f20c:	f3bf 8f6f 	isb	sy
 800f210:	e7f2      	b.n	800f1f8 <osMessageQueueGet+0x60>
 800f212:	bf00      	nop
 800f214:	20012a80 	.word	0x20012a80

0800f218 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f218:	4b03      	ldr	r3, [pc, #12]	@ (800f228 <vApplicationGetIdleTaskMemory+0x10>)
 800f21a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f21c:	4b03      	ldr	r3, [pc, #12]	@ (800f22c <vApplicationGetIdleTaskMemory+0x14>)
 800f21e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f220:	2380      	movs	r3, #128	@ 0x80
 800f222:	6013      	str	r3, [r2, #0]
}
 800f224:	4770      	bx	lr
 800f226:	bf00      	nop
 800f228:	20012a20 	.word	0x20012a20
 800f22c:	20012820 	.word	0x20012820

0800f230 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f230:	4b03      	ldr	r3, [pc, #12]	@ (800f240 <vApplicationGetTimerTaskMemory+0x10>)
 800f232:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f234:	4b03      	ldr	r3, [pc, #12]	@ (800f244 <vApplicationGetTimerTaskMemory+0x14>)
 800f236:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f238:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f23c:	6013      	str	r3, [r2, #0]
}
 800f23e:	4770      	bx	lr
 800f240:	200127c0 	.word	0x200127c0
 800f244:	200123c0 	.word	0x200123c0

0800f248 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f248:	4b10      	ldr	r3, [pc, #64]	@ (800f28c <prvInsertBlockIntoFreeList+0x44>)
{
 800f24a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f24c:	461a      	mov	r2, r3
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4283      	cmp	r3, r0
 800f252:	d3fb      	bcc.n	800f24c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f254:	6854      	ldr	r4, [r2, #4]
 800f256:	1911      	adds	r1, r2, r4
 800f258:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f25a:	bf01      	itttt	eq
 800f25c:	6841      	ldreq	r1, [r0, #4]
 800f25e:	4610      	moveq	r0, r2
 800f260:	1909      	addeq	r1, r1, r4
 800f262:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f264:	6844      	ldr	r4, [r0, #4]
 800f266:	1901      	adds	r1, r0, r4
 800f268:	428b      	cmp	r3, r1
 800f26a:	d10c      	bne.n	800f286 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f26c:	4908      	ldr	r1, [pc, #32]	@ (800f290 <prvInsertBlockIntoFreeList+0x48>)
 800f26e:	6809      	ldr	r1, [r1, #0]
 800f270:	428b      	cmp	r3, r1
 800f272:	d003      	beq.n	800f27c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f274:	6859      	ldr	r1, [r3, #4]
 800f276:	4421      	add	r1, r4
 800f278:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f27a:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f27c:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f27e:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f280:	bf18      	it	ne
 800f282:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f284:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f286:	4619      	mov	r1, r3
 800f288:	e7f8      	b.n	800f27c <prvInsertBlockIntoFreeList+0x34>
 800f28a:	bf00      	nop
 800f28c:	20012a94 	.word	0x20012a94
 800f290:	20012a90 	.word	0x20012a90

0800f294 <pvPortMalloc>:
{
 800f294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f298:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800f29a:	f001 fa1d 	bl	80106d8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f29e:	4940      	ldr	r1, [pc, #256]	@ (800f3a0 <pvPortMalloc+0x10c>)
 800f2a0:	4d40      	ldr	r5, [pc, #256]	@ (800f3a4 <pvPortMalloc+0x110>)
 800f2a2:	680b      	ldr	r3, [r1, #0]
 800f2a4:	b9f3      	cbnz	r3, 800f2e4 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800f2a6:	4a40      	ldr	r2, [pc, #256]	@ (800f3a8 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800f2a8:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f2aa:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f2ac:	4e3f      	ldr	r6, [pc, #252]	@ (800f3ac <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f2ae:	bf1b      	ittet	ne
 800f2b0:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f2b2:	4b3f      	ldrne	r3, [pc, #252]	@ (800f3b0 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f2b4:	4b3f      	ldreq	r3, [pc, #252]	@ (800f3b4 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f2b6:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800f2ba:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f2bc:	bf18      	it	ne
 800f2be:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f2c0:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f2c2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800f2c4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f2c6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800f2ca:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f2ce:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800f2d0:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f2d2:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f2d6:	4b38      	ldr	r3, [pc, #224]	@ (800f3b8 <pvPortMalloc+0x124>)
 800f2d8:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f2da:	4b38      	ldr	r3, [pc, #224]	@ (800f3bc <pvPortMalloc+0x128>)
 800f2dc:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f2de:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f2e2:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f2e4:	682e      	ldr	r6, [r5, #0]
 800f2e6:	4226      	tst	r6, r4
 800f2e8:	d154      	bne.n	800f394 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 800f2ea:	2c00      	cmp	r4, #0
 800f2ec:	d043      	beq.n	800f376 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800f2ee:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f2f2:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f2f4:	bf1c      	itt	ne
 800f2f6:	f023 0307 	bicne.w	r3, r3, #7
 800f2fa:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d049      	beq.n	800f394 <pvPortMalloc+0x100>
 800f300:	4f2e      	ldr	r7, [pc, #184]	@ (800f3bc <pvPortMalloc+0x128>)
 800f302:	683c      	ldr	r4, [r7, #0]
 800f304:	429c      	cmp	r4, r3
 800f306:	d345      	bcc.n	800f394 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 800f308:	4a28      	ldr	r2, [pc, #160]	@ (800f3ac <pvPortMalloc+0x118>)
 800f30a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f30c:	6868      	ldr	r0, [r5, #4]
 800f30e:	4298      	cmp	r0, r3
 800f310:	d204      	bcs.n	800f31c <pvPortMalloc+0x88>
 800f312:	f8d5 c000 	ldr.w	ip, [r5]
 800f316:	f1bc 0f00 	cmp.w	ip, #0
 800f31a:	d117      	bne.n	800f34c <pvPortMalloc+0xb8>
				if( pxBlock != pxEnd )
 800f31c:	6809      	ldr	r1, [r1, #0]
 800f31e:	42a9      	cmp	r1, r5
 800f320:	d038      	beq.n	800f394 <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f322:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f324:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f328:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f32a:	1ac2      	subs	r2, r0, r3
 800f32c:	2a10      	cmp	r2, #16
 800f32e:	d914      	bls.n	800f35a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f330:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f332:	0741      	lsls	r1, r0, #29
 800f334:	d00d      	beq.n	800f352 <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f33a:	b672      	cpsid	i
 800f33c:	f383 8811 	msr	BASEPRI, r3
 800f340:	f3bf 8f6f 	isb	sy
 800f344:	f3bf 8f4f 	dsb	sy
 800f348:	b662      	cpsie	i
 800f34a:	e7fe      	b.n	800f34a <pvPortMalloc+0xb6>
 800f34c:	462a      	mov	r2, r5
 800f34e:	4665      	mov	r5, ip
 800f350:	e7dc      	b.n	800f30c <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f352:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f354:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f356:	f7ff ff77 	bl	800f248 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f35a:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f35c:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f35e:	4916      	ldr	r1, [pc, #88]	@ (800f3b8 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f360:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f362:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f364:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f366:	603c      	str	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f368:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f36a:	606e      	str	r6, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f36c:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f36e:	bf38      	it	cc
 800f370:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f372:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 800f376:	f001 fa55 	bl	8010824 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f37a:	0763      	lsls	r3, r4, #29
 800f37c:	d00c      	beq.n	800f398 <pvPortMalloc+0x104>
 800f37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f382:	b672      	cpsid	i
 800f384:	f383 8811 	msr	BASEPRI, r3
 800f388:	f3bf 8f6f 	isb	sy
 800f38c:	f3bf 8f4f 	dsb	sy
 800f390:	b662      	cpsie	i
 800f392:	e7fe      	b.n	800f392 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800f394:	2400      	movs	r4, #0
 800f396:	e7ee      	b.n	800f376 <pvPortMalloc+0xe2>
}
 800f398:	4620      	mov	r0, r4
 800f39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f39e:	bf00      	nop
 800f3a0:	20012a90 	.word	0x20012a90
 800f3a4:	20012a84 	.word	0x20012a84
 800f3a8:	20012a9c 	.word	0x20012a9c
 800f3ac:	20012a94 	.word	0x20012a94
 800f3b0:	2002631c 	.word	0x2002631c
 800f3b4:	00013880 	.word	0x00013880
 800f3b8:	20012a88 	.word	0x20012a88
 800f3bc:	20012a8c 	.word	0x20012a8c

0800f3c0 <vPortFree>:
{
 800f3c0:	b510      	push	{r4, lr}
	if( pv != NULL )
 800f3c2:	4604      	mov	r4, r0
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	d032      	beq.n	800f42e <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f3c8:	4a19      	ldr	r2, [pc, #100]	@ (800f430 <vPortFree+0x70>)
 800f3ca:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f3ce:	6812      	ldr	r2, [r2, #0]
 800f3d0:	4213      	tst	r3, r2
 800f3d2:	d10a      	bne.n	800f3ea <vPortFree+0x2a>
 800f3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3d8:	b672      	cpsid	i
 800f3da:	f383 8811 	msr	BASEPRI, r3
 800f3de:	f3bf 8f6f 	isb	sy
 800f3e2:	f3bf 8f4f 	dsb	sy
 800f3e6:	b662      	cpsie	i
 800f3e8:	e7fe      	b.n	800f3e8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f3ea:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800f3ee:	b151      	cbz	r1, 800f406 <vPortFree+0x46>
 800f3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3f4:	b672      	cpsid	i
 800f3f6:	f383 8811 	msr	BASEPRI, r3
 800f3fa:	f3bf 8f6f 	isb	sy
 800f3fe:	f3bf 8f4f 	dsb	sy
 800f402:	b662      	cpsie	i
 800f404:	e7fe      	b.n	800f404 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f406:	ea23 0302 	bic.w	r3, r3, r2
 800f40a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800f40e:	f001 f963 	bl	80106d8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f412:	4a08      	ldr	r2, [pc, #32]	@ (800f434 <vPortFree+0x74>)
 800f414:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f418:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f41c:	6811      	ldr	r1, [r2, #0]
 800f41e:	440b      	add	r3, r1
 800f420:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f422:	f7ff ff11 	bl	800f248 <prvInsertBlockIntoFreeList>
}
 800f426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800f42a:	f001 b9fb 	b.w	8010824 <xTaskResumeAll>
}
 800f42e:	bd10      	pop	{r4, pc}
 800f430:	20012a84 	.word	0x20012a84
 800f434:	20012a8c 	.word	0x20012a8c

0800f438 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f438:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f43c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f440:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f442:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f444:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f448:	2300      	movs	r3, #0
 800f44a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f44c:	4770      	bx	lr

0800f44e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f44e:	2300      	movs	r3, #0
 800f450:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f452:	4770      	bx	lr

0800f454 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800f454:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f456:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800f458:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f45a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f45c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f45e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800f460:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800f462:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800f464:	3301      	adds	r3, #1
 800f466:	6003      	str	r3, [r0, #0]
}
 800f468:	4770      	bx	lr

0800f46a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f46a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f46c:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f46e:	1c63      	adds	r3, r4, #1
 800f470:	d10a      	bne.n	800f488 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f472:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f474:	685a      	ldr	r2, [r3, #4]
 800f476:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f478:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f47a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800f47c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800f47e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800f480:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800f482:	3301      	adds	r3, #1
 800f484:	6003      	str	r3, [r0, #0]
}
 800f486:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f488:	f100 0208 	add.w	r2, r0, #8
 800f48c:	4613      	mov	r3, r2
 800f48e:	6852      	ldr	r2, [r2, #4]
 800f490:	6815      	ldr	r5, [r2, #0]
 800f492:	42a5      	cmp	r5, r4
 800f494:	d9fa      	bls.n	800f48c <vListInsert+0x22>
 800f496:	e7ed      	b.n	800f474 <vListInsert+0xa>

0800f498 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f498:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f49a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800f49e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f4a0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f4a2:	6859      	ldr	r1, [r3, #4]
 800f4a4:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f4a6:	bf08      	it	eq
 800f4a8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	3a01      	subs	r2, #1
 800f4b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f4b4:	6818      	ldr	r0, [r3, #0]
}
 800f4b6:	4770      	bx	lr

0800f4b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f4b8:	4808      	ldr	r0, [pc, #32]	@ (800f4dc <prvPortStartFirstTask+0x24>)
 800f4ba:	6800      	ldr	r0, [r0, #0]
 800f4bc:	6800      	ldr	r0, [r0, #0]
 800f4be:	f380 8808 	msr	MSP, r0
 800f4c2:	f04f 0000 	mov.w	r0, #0
 800f4c6:	f380 8814 	msr	CONTROL, r0
 800f4ca:	b662      	cpsie	i
 800f4cc:	b661      	cpsie	f
 800f4ce:	f3bf 8f4f 	dsb	sy
 800f4d2:	f3bf 8f6f 	isb	sy
 800f4d6:	df00      	svc	0
 800f4d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f4da:	0000      	.short	0x0000
 800f4dc:	e000ed08 	.word	0xe000ed08

0800f4e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f4e0:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f4f0 <vPortEnableVFP+0x10>
 800f4e4:	6801      	ldr	r1, [r0, #0]
 800f4e6:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f4ea:	6001      	str	r1, [r0, #0]
 800f4ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f4ee:	0000      	.short	0x0000
 800f4f0:	e000ed88 	.word	0xe000ed88

0800f4f4 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800f4f4:	2300      	movs	r3, #0
{
 800f4f6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800f4f8:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800f4fa:	4b0f      	ldr	r3, [pc, #60]	@ (800f538 <prvTaskExitError+0x44>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	3301      	adds	r3, #1
 800f500:	d00a      	beq.n	800f518 <prvTaskExitError+0x24>
 800f502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f506:	b672      	cpsid	i
 800f508:	f383 8811 	msr	BASEPRI, r3
 800f50c:	f3bf 8f6f 	isb	sy
 800f510:	f3bf 8f4f 	dsb	sy
 800f514:	b662      	cpsie	i
 800f516:	e7fe      	b.n	800f516 <prvTaskExitError+0x22>
 800f518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f51c:	b672      	cpsid	i
 800f51e:	f383 8811 	msr	BASEPRI, r3
 800f522:	f3bf 8f6f 	isb	sy
 800f526:	f3bf 8f4f 	dsb	sy
 800f52a:	b662      	cpsie	i
	while( ulDummy == 0 )
 800f52c:	9b01      	ldr	r3, [sp, #4]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d0fc      	beq.n	800f52c <prvTaskExitError+0x38>
}
 800f532:	b002      	add	sp, #8
 800f534:	4770      	bx	lr
 800f536:	bf00      	nop
 800f538:	2000006c 	.word	0x2000006c

0800f53c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f53c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f540:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f544:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800f548:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f54a:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f54c:	4b03      	ldr	r3, [pc, #12]	@ (800f55c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f54e:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f550:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f552:	f06f 0302 	mvn.w	r3, #2
 800f556:	6203      	str	r3, [r0, #32]
}
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	0800f4f5 	.word	0x0800f4f5

0800f560 <SVC_Handler>:
	__asm volatile (
 800f560:	4b07      	ldr	r3, [pc, #28]	@ (800f580 <pxCurrentTCBConst2>)
 800f562:	6819      	ldr	r1, [r3, #0]
 800f564:	6808      	ldr	r0, [r1, #0]
 800f566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f56a:	f380 8809 	msr	PSP, r0
 800f56e:	f3bf 8f6f 	isb	sy
 800f572:	f04f 0000 	mov.w	r0, #0
 800f576:	f380 8811 	msr	BASEPRI, r0
 800f57a:	4770      	bx	lr
 800f57c:	f3af 8000 	nop.w

0800f580 <pxCurrentTCBConst2>:
 800f580:	2002685c 	.word	0x2002685c

0800f584 <vPortEnterCritical>:
 800f584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f588:	b672      	cpsid	i
 800f58a:	f383 8811 	msr	BASEPRI, r3
 800f58e:	f3bf 8f6f 	isb	sy
 800f592:	f3bf 8f4f 	dsb	sy
 800f596:	b662      	cpsie	i
	uxCriticalNesting++;
 800f598:	4a0b      	ldr	r2, [pc, #44]	@ (800f5c8 <vPortEnterCritical+0x44>)
 800f59a:	6813      	ldr	r3, [r2, #0]
 800f59c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800f59e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800f5a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800f5a2:	d110      	bne.n	800f5c6 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f5a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f5a8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	b153      	cbz	r3, 800f5c6 <vPortEnterCritical+0x42>
 800f5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5b4:	b672      	cpsid	i
 800f5b6:	f383 8811 	msr	BASEPRI, r3
 800f5ba:	f3bf 8f6f 	isb	sy
 800f5be:	f3bf 8f4f 	dsb	sy
 800f5c2:	b662      	cpsie	i
 800f5c4:	e7fe      	b.n	800f5c4 <vPortEnterCritical+0x40>
}
 800f5c6:	4770      	bx	lr
 800f5c8:	2000006c 	.word	0x2000006c

0800f5cc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800f5cc:	4a09      	ldr	r2, [pc, #36]	@ (800f5f4 <vPortExitCritical+0x28>)
 800f5ce:	6813      	ldr	r3, [r2, #0]
 800f5d0:	b953      	cbnz	r3, 800f5e8 <vPortExitCritical+0x1c>
 800f5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5d6:	b672      	cpsid	i
 800f5d8:	f383 8811 	msr	BASEPRI, r3
 800f5dc:	f3bf 8f6f 	isb	sy
 800f5e0:	f3bf 8f4f 	dsb	sy
 800f5e4:	b662      	cpsie	i
 800f5e6:	e7fe      	b.n	800f5e6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800f5e8:	3b01      	subs	r3, #1
 800f5ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f5ec:	b90b      	cbnz	r3, 800f5f2 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f5ee:	f383 8811 	msr	BASEPRI, r3
}
 800f5f2:	4770      	bx	lr
 800f5f4:	2000006c 	.word	0x2000006c
	...

0800f600 <PendSV_Handler>:
	__asm volatile
 800f600:	f3ef 8009 	mrs	r0, PSP
 800f604:	f3bf 8f6f 	isb	sy
 800f608:	4b15      	ldr	r3, [pc, #84]	@ (800f660 <pxCurrentTCBConst>)
 800f60a:	681a      	ldr	r2, [r3, #0]
 800f60c:	f01e 0f10 	tst.w	lr, #16
 800f610:	bf08      	it	eq
 800f612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f61a:	6010      	str	r0, [r2, #0]
 800f61c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f620:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f624:	b672      	cpsid	i
 800f626:	f380 8811 	msr	BASEPRI, r0
 800f62a:	f3bf 8f4f 	dsb	sy
 800f62e:	f3bf 8f6f 	isb	sy
 800f632:	b662      	cpsie	i
 800f634:	f001 fa00 	bl	8010a38 <vTaskSwitchContext>
 800f638:	f04f 0000 	mov.w	r0, #0
 800f63c:	f380 8811 	msr	BASEPRI, r0
 800f640:	bc09      	pop	{r0, r3}
 800f642:	6819      	ldr	r1, [r3, #0]
 800f644:	6808      	ldr	r0, [r1, #0]
 800f646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f64a:	f01e 0f10 	tst.w	lr, #16
 800f64e:	bf08      	it	eq
 800f650:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f654:	f380 8809 	msr	PSP, r0
 800f658:	f3bf 8f6f 	isb	sy
 800f65c:	4770      	bx	lr
 800f65e:	bf00      	nop

0800f660 <pxCurrentTCBConst>:
 800f660:	2002685c 	.word	0x2002685c

0800f664 <SysTick_Handler>:
{
 800f664:	b508      	push	{r3, lr}
	__asm volatile
 800f666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f66a:	b672      	cpsid	i
 800f66c:	f383 8811 	msr	BASEPRI, r3
 800f670:	f3bf 8f6f 	isb	sy
 800f674:	f3bf 8f4f 	dsb	sy
 800f678:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800f67a:	f001 f83b 	bl	80106f4 <xTaskIncrementTick>
 800f67e:	b128      	cbz	r0, 800f68c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f680:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f688:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800f68c:	2300      	movs	r3, #0
 800f68e:	f383 8811 	msr	BASEPRI, r3
}
 800f692:	bd08      	pop	{r3, pc}

0800f694 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f694:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800f698:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f69a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f69e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f6a0:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f6a2:	4b04      	ldr	r3, [pc, #16]	@ (800f6b4 <vPortSetupTimerInterrupt+0x20>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f6aa:	3b01      	subs	r3, #1
 800f6ac:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f6ae:	2307      	movs	r3, #7
 800f6b0:	6113      	str	r3, [r2, #16]
}
 800f6b2:	4770      	bx	lr
 800f6b4:	20000060 	.word	0x20000060

0800f6b8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f6b8:	4b2c      	ldr	r3, [pc, #176]	@ (800f76c <xPortStartScheduler+0xb4>)
{
 800f6ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f6bc:	781a      	ldrb	r2, [r3, #0]
 800f6be:	b2d2      	uxtb	r2, r2
 800f6c0:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f6c2:	22ff      	movs	r2, #255	@ 0xff
 800f6c4:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f6c6:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f6c8:	4a29      	ldr	r2, [pc, #164]	@ (800f770 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f6ca:	b2db      	uxtb	r3, r3
 800f6cc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f6d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f6d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f6d8:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f6da:	2307      	movs	r3, #7
 800f6dc:	4a25      	ldr	r2, [pc, #148]	@ (800f774 <xPortStartScheduler+0xbc>)
 800f6de:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6e0:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800f6e4:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6e6:	0609      	lsls	r1, r1, #24
 800f6e8:	d40c      	bmi.n	800f704 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f6ea:	2b03      	cmp	r3, #3
 800f6ec:	d013      	beq.n	800f716 <xPortStartScheduler+0x5e>
	__asm volatile
 800f6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6f2:	b672      	cpsid	i
 800f6f4:	f383 8811 	msr	BASEPRI, r3
 800f6f8:	f3bf 8f6f 	isb	sy
 800f6fc:	f3bf 8f4f 	dsb	sy
 800f700:	b662      	cpsie	i
 800f702:	e7fe      	b.n	800f702 <xPortStartScheduler+0x4a>
			ulMaxPRIGROUPValue--;
 800f704:	3b01      	subs	r3, #1
 800f706:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f708:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f70c:	005b      	lsls	r3, r3, #1
 800f70e:	b2db      	uxtb	r3, r3
 800f710:	f88d 3003 	strb.w	r3, [sp, #3]
 800f714:	e7e4      	b.n	800f6e0 <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f716:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f71a:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800f71e:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f720:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f722:	9b01      	ldr	r3, [sp, #4]
 800f724:	4a11      	ldr	r2, [pc, #68]	@ (800f76c <xPortStartScheduler+0xb4>)
 800f726:	b2db      	uxtb	r3, r3
 800f728:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f72a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800f72e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f732:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f736:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800f73a:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f73e:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800f742:	f7ff ffa7 	bl	800f694 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800f746:	4b0c      	ldr	r3, [pc, #48]	@ (800f778 <xPortStartScheduler+0xc0>)
 800f748:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800f74a:	f7ff fec9 	bl	800f4e0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f74e:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800f752:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f756:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800f75a:	f7ff fead 	bl	800f4b8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800f75e:	f001 f96b 	bl	8010a38 <vTaskSwitchContext>
}
 800f762:	4628      	mov	r0, r5
	prvTaskExitError();
 800f764:	f7ff fec6 	bl	800f4f4 <prvTaskExitError>
}
 800f768:	b003      	add	sp, #12
 800f76a:	bd30      	pop	{r4, r5, pc}
 800f76c:	e000e400 	.word	0xe000e400
 800f770:	20026320 	.word	0x20026320
 800f774:	2002631c 	.word	0x2002631c
 800f778:	2000006c 	.word	0x2000006c

0800f77c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f77c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f780:	2b0f      	cmp	r3, #15
 800f782:	d910      	bls.n	800f7a6 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f784:	4a13      	ldr	r2, [pc, #76]	@ (800f7d4 <vPortValidateInterruptPriority+0x58>)
 800f786:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f788:	4a13      	ldr	r2, [pc, #76]	@ (800f7d8 <vPortValidateInterruptPriority+0x5c>)
 800f78a:	7812      	ldrb	r2, [r2, #0]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d90a      	bls.n	800f7a6 <vPortValidateInterruptPriority+0x2a>
 800f790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f794:	b672      	cpsid	i
 800f796:	f383 8811 	msr	BASEPRI, r3
 800f79a:	f3bf 8f6f 	isb	sy
 800f79e:	f3bf 8f4f 	dsb	sy
 800f7a2:	b662      	cpsie	i
 800f7a4:	e7fe      	b.n	800f7a4 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f7a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f7aa:	4a0c      	ldr	r2, [pc, #48]	@ (800f7dc <vPortValidateInterruptPriority+0x60>)
 800f7ac:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800f7b0:	6812      	ldr	r2, [r2, #0]
 800f7b2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d90a      	bls.n	800f7d0 <vPortValidateInterruptPriority+0x54>
 800f7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7be:	b672      	cpsid	i
 800f7c0:	f383 8811 	msr	BASEPRI, r3
 800f7c4:	f3bf 8f6f 	isb	sy
 800f7c8:	f3bf 8f4f 	dsb	sy
 800f7cc:	b662      	cpsie	i
 800f7ce:	e7fe      	b.n	800f7ce <vPortValidateInterruptPriority+0x52>
	}
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop
 800f7d4:	e000e3f0 	.word	0xe000e3f0
 800f7d8:	20026320 	.word	0x20026320
 800f7dc:	2002631c 	.word	0x2002631c

0800f7e0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f7e0:	b510      	push	{r4, lr}
 800f7e2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f7e4:	f7ff fece 	bl	800f584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f7e8:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800f7ea:	f7ff feef 	bl	800f5cc <vPortExitCritical>

	return xReturn;
}
 800f7ee:	fab4 f084 	clz	r0, r4
 800f7f2:	0940      	lsrs	r0, r0, #5
 800f7f4:	bd10      	pop	{r4, pc}

0800f7f6 <prvCopyDataToQueue>:
{
 800f7f6:	b570      	push	{r4, r5, r6, lr}
 800f7f8:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f7fa:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800f7fc:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f7fe:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f800:	b942      	cbnz	r2, 800f814 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f802:	6806      	ldr	r6, [r0, #0]
 800f804:	b99e      	cbnz	r6, 800f82e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f806:	6880      	ldr	r0, [r0, #8]
 800f808:	f001 fa82 	bl	8010d10 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f80c:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f80e:	3501      	adds	r5, #1
 800f810:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800f812:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800f814:	b96e      	cbnz	r6, 800f832 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f816:	6840      	ldr	r0, [r0, #4]
 800f818:	f01b f9c3 	bl	802aba2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f81c:	6863      	ldr	r3, [r4, #4]
 800f81e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800f820:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f822:	68a2      	ldr	r2, [r4, #8]
 800f824:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f826:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f828:	bf24      	itt	cs
 800f82a:	6823      	ldrcs	r3, [r4, #0]
 800f82c:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800f82e:	2000      	movs	r0, #0
 800f830:	e7ed      	b.n	800f80e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f832:	68c0      	ldr	r0, [r0, #12]
 800f834:	f01b f9b5 	bl	802aba2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f838:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800f83a:	68e3      	ldr	r3, [r4, #12]
 800f83c:	4251      	negs	r1, r2
 800f83e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f840:	6822      	ldr	r2, [r4, #0]
 800f842:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f844:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f846:	bf3e      	ittt	cc
 800f848:	68a3      	ldrcc	r3, [r4, #8]
 800f84a:	185b      	addcc	r3, r3, r1
 800f84c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800f84e:	2e02      	cmp	r6, #2
 800f850:	d1ed      	bne.n	800f82e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f852:	b10d      	cbz	r5, 800f858 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800f854:	3d01      	subs	r5, #1
 800f856:	e7ea      	b.n	800f82e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800f858:	4628      	mov	r0, r5
 800f85a:	e7d8      	b.n	800f80e <prvCopyDataToQueue+0x18>

0800f85c <prvCopyDataFromQueue>:
{
 800f85c:	4603      	mov	r3, r0
 800f85e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f860:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800f862:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f864:	b162      	cbz	r2, 800f880 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f866:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f868:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f86a:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f86c:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f86e:	60dc      	str	r4, [r3, #12]
}
 800f870:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f874:	bf24      	itt	cs
 800f876:	6819      	ldrcs	r1, [r3, #0]
 800f878:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f87a:	68d9      	ldr	r1, [r3, #12]
 800f87c:	f01b b991 	b.w	802aba2 <memcpy>
}
 800f880:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f884:	4770      	bx	lr

0800f886 <prvUnlockQueue>:
{
 800f886:	b570      	push	{r4, r5, r6, lr}
 800f888:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800f88a:	f7ff fe7b 	bl	800f584 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800f88e:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f892:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800f896:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f898:	2d00      	cmp	r5, #0
 800f89a:	dc14      	bgt.n	800f8c6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800f89c:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f89e:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800f8a2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800f8a6:	f7ff fe91 	bl	800f5cc <vPortExitCritical>
	taskENTER_CRITICAL();
 800f8aa:	f7ff fe6b 	bl	800f584 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800f8ae:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800f8b2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f8b4:	2d00      	cmp	r5, #0
 800f8b6:	dc12      	bgt.n	800f8de <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800f8b8:	23ff      	movs	r3, #255	@ 0xff
 800f8ba:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800f8be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800f8c2:	f7ff be83 	b.w	800f5cc <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d0e7      	beq.n	800f89c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8cc:	4630      	mov	r0, r6
 800f8ce:	f001 f935 	bl	8010b3c <xTaskRemoveFromEventList>
 800f8d2:	b108      	cbz	r0, 800f8d8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800f8d4:	f001 f9c2 	bl	8010c5c <vTaskMissedYield>
			--cTxLock;
 800f8d8:	3d01      	subs	r5, #1
 800f8da:	b26d      	sxtb	r5, r5
 800f8dc:	e7dc      	b.n	800f898 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8de:	6923      	ldr	r3, [r4, #16]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d0e9      	beq.n	800f8b8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	f001 f929 	bl	8010b3c <xTaskRemoveFromEventList>
 800f8ea:	b108      	cbz	r0, 800f8f0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800f8ec:	f001 f9b6 	bl	8010c5c <vTaskMissedYield>
				--cRxLock;
 800f8f0:	3d01      	subs	r5, #1
 800f8f2:	b26d      	sxtb	r5, r5
 800f8f4:	e7de      	b.n	800f8b4 <prvUnlockQueue+0x2e>

0800f8f6 <xQueueGenericReset>:
{
 800f8f6:	b538      	push	{r3, r4, r5, lr}
 800f8f8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800f8fa:	4604      	mov	r4, r0
 800f8fc:	b950      	cbnz	r0, 800f914 <xQueueGenericReset+0x1e>
 800f8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f902:	b672      	cpsid	i
 800f904:	f383 8811 	msr	BASEPRI, r3
 800f908:	f3bf 8f6f 	isb	sy
 800f90c:	f3bf 8f4f 	dsb	sy
 800f910:	b662      	cpsie	i
 800f912:	e7fe      	b.n	800f912 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800f914:	f7ff fe36 	bl	800f584 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f918:	6822      	ldr	r2, [r4, #0]
 800f91a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f91e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f920:	434b      	muls	r3, r1
 800f922:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f924:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f926:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f928:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f92a:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800f92c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f92e:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f930:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800f932:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f936:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800f93a:	b9a5      	cbnz	r5, 800f966 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f93c:	6923      	ldr	r3, [r4, #16]
 800f93e:	b173      	cbz	r3, 800f95e <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f940:	f104 0010 	add.w	r0, r4, #16
 800f944:	f001 f8fa 	bl	8010b3c <xTaskRemoveFromEventList>
 800f948:	b148      	cbz	r0, 800f95e <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 800f94a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f94e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f952:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f956:	f3bf 8f4f 	dsb	sy
 800f95a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800f95e:	f7ff fe35 	bl	800f5cc <vPortExitCritical>
}
 800f962:	2001      	movs	r0, #1
 800f964:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f966:	f104 0010 	add.w	r0, r4, #16
 800f96a:	f7ff fd65 	bl	800f438 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f96e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f972:	f7ff fd61 	bl	800f438 <vListInitialise>
 800f976:	e7f2      	b.n	800f95e <xQueueGenericReset+0x68>

0800f978 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 800f978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f97a:	460d      	mov	r5, r1
		configASSERT( pxStaticQueue != NULL );
 800f97c:	461c      	mov	r4, r3
 800f97e:	b953      	cbnz	r3, 800f996 <xQueueGenericCreateStatic.part.0+0x1e>
 800f980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f984:	b672      	cpsid	i
 800f986:	f383 8811 	msr	BASEPRI, r3
 800f98a:	f3bf 8f6f 	isb	sy
 800f98e:	f3bf 8f4f 	dsb	sy
 800f992:	b662      	cpsie	i
 800f994:	e7fe      	b.n	800f994 <xQueueGenericCreateStatic.part.0+0x1c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f996:	b15a      	cbz	r2, 800f9b0 <xQueueGenericCreateStatic.part.0+0x38>
 800f998:	b9b1      	cbnz	r1, 800f9c8 <xQueueGenericCreateStatic.part.0+0x50>
 800f99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f99e:	b672      	cpsid	i
 800f9a0:	f383 8811 	msr	BASEPRI, r3
 800f9a4:	f3bf 8f6f 	isb	sy
 800f9a8:	f3bf 8f4f 	dsb	sy
 800f9ac:	b662      	cpsie	i
 800f9ae:	e7fe      	b.n	800f9ae <xQueueGenericCreateStatic.part.0+0x36>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f9b0:	b151      	cbz	r1, 800f9c8 <xQueueGenericCreateStatic.part.0+0x50>
 800f9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9b6:	b672      	cpsid	i
 800f9b8:	f383 8811 	msr	BASEPRI, r3
 800f9bc:	f3bf 8f6f 	isb	sy
 800f9c0:	f3bf 8f4f 	dsb	sy
 800f9c4:	b662      	cpsie	i
 800f9c6:	e7fe      	b.n	800f9c6 <xQueueGenericCreateStatic.part.0+0x4e>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f9c8:	2350      	movs	r3, #80	@ 0x50
 800f9ca:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f9cc:	9b01      	ldr	r3, [sp, #4]
 800f9ce:	2b50      	cmp	r3, #80	@ 0x50
 800f9d0:	d00a      	beq.n	800f9e8 <xQueueGenericCreateStatic.part.0+0x70>
 800f9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9d6:	b672      	cpsid	i
 800f9d8:	f383 8811 	msr	BASEPRI, r3
 800f9dc:	f3bf 8f6f 	isb	sy
 800f9e0:	f3bf 8f4f 	dsb	sy
 800f9e4:	b662      	cpsie	i
 800f9e6:	e7fe      	b.n	800f9e6 <xQueueGenericCreateStatic.part.0+0x6e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f9e8:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f9ea:	2d00      	cmp	r5, #0
 800f9ec:	bf08      	it	eq
 800f9ee:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f9f0:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f9f2:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800f9f6:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800f9f8:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f9fc:	4620      	mov	r0, r4
 800f9fe:	f7ff ff7a 	bl	800f8f6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800fa02:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800fa06:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800fa08:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800fa0c:	b003      	add	sp, #12
 800fa0e:	bd30      	pop	{r4, r5, pc}

0800fa10 <xQueueGenericCreateStatic>:
	{
 800fa10:	b410      	push	{r4}
 800fa12:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fa16:	b950      	cbnz	r0, 800fa2e <xQueueGenericCreateStatic+0x1e>
 800fa18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa1c:	b672      	cpsid	i
 800fa1e:	f383 8811 	msr	BASEPRI, r3
 800fa22:	f3bf 8f6f 	isb	sy
 800fa26:	f3bf 8f4f 	dsb	sy
 800fa2a:	b662      	cpsie	i
 800fa2c:	e7fe      	b.n	800fa2c <xQueueGenericCreateStatic+0x1c>
 800fa2e:	9401      	str	r4, [sp, #4]
	}
 800fa30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa34:	f7ff bfa0 	b.w	800f978 <xQueueGenericCreateStatic.part.0>

0800fa38 <xQueueGenericCreate>:
	{
 800fa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa3a:	460d      	mov	r5, r1
 800fa3c:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fa3e:	4606      	mov	r6, r0
 800fa40:	b950      	cbnz	r0, 800fa58 <xQueueGenericCreate+0x20>
 800fa42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa46:	b672      	cpsid	i
 800fa48:	f383 8811 	msr	BASEPRI, r3
 800fa4c:	f3bf 8f6f 	isb	sy
 800fa50:	f3bf 8f4f 	dsb	sy
 800fa54:	b662      	cpsie	i
 800fa56:	e7fe      	b.n	800fa56 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa58:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fa5a:	3050      	adds	r0, #80	@ 0x50
 800fa5c:	f7ff fc1a 	bl	800f294 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800fa60:	4604      	mov	r4, r0
 800fa62:	b170      	cbz	r0, 800fa82 <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fa64:	2300      	movs	r3, #0
 800fa66:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800fa6a:	b165      	cbz	r5, 800fa86 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fa6c:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fa70:	2101      	movs	r1, #1
 800fa72:	4620      	mov	r0, r4
 800fa74:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800fa76:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fa7a:	f7ff ff3c 	bl	800f8f6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800fa7e:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800fa82:	4620      	mov	r0, r4
 800fa84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fa86:	4603      	mov	r3, r0
 800fa88:	e7f2      	b.n	800fa70 <xQueueGenericCreate+0x38>

0800fa8a <xQueueCreateCountingSemaphoreStatic>:
	{
 800fa8a:	b513      	push	{r0, r1, r4, lr}
 800fa8c:	4613      	mov	r3, r2
 800fa8e:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800fa90:	b950      	cbnz	r0, 800faa8 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800fa92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa96:	b672      	cpsid	i
 800fa98:	f383 8811 	msr	BASEPRI, r3
 800fa9c:	f3bf 8f6f 	isb	sy
 800faa0:	f3bf 8f4f 	dsb	sy
 800faa4:	b662      	cpsie	i
 800faa6:	e7fe      	b.n	800faa6 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 800faa8:	4288      	cmp	r0, r1
 800faaa:	d20a      	bcs.n	800fac2 <xQueueCreateCountingSemaphoreStatic+0x38>
 800faac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fab0:	b672      	cpsid	i
 800fab2:	f383 8811 	msr	BASEPRI, r3
 800fab6:	f3bf 8f6f 	isb	sy
 800faba:	f3bf 8f4f 	dsb	sy
 800fabe:	b662      	cpsie	i
 800fac0:	e7fe      	b.n	800fac0 <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fac2:	2202      	movs	r2, #2
 800fac4:	9200      	str	r2, [sp, #0]
 800fac6:	2200      	movs	r2, #0
 800fac8:	4611      	mov	r1, r2
 800faca:	f7ff ffa1 	bl	800fa10 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800face:	b100      	cbz	r0, 800fad2 <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fad0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800fad2:	b002      	add	sp, #8
 800fad4:	bd10      	pop	{r4, pc}

0800fad6 <xQueueCreateCountingSemaphore>:
	{
 800fad6:	b510      	push	{r4, lr}
 800fad8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800fada:	b950      	cbnz	r0, 800faf2 <xQueueCreateCountingSemaphore+0x1c>
 800fadc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fae0:	b672      	cpsid	i
 800fae2:	f383 8811 	msr	BASEPRI, r3
 800fae6:	f3bf 8f6f 	isb	sy
 800faea:	f3bf 8f4f 	dsb	sy
 800faee:	b662      	cpsie	i
 800faf0:	e7fe      	b.n	800faf0 <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800faf2:	4288      	cmp	r0, r1
 800faf4:	d20a      	bcs.n	800fb0c <xQueueCreateCountingSemaphore+0x36>
 800faf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fafa:	b672      	cpsid	i
 800fafc:	f383 8811 	msr	BASEPRI, r3
 800fb00:	f3bf 8f6f 	isb	sy
 800fb04:	f3bf 8f4f 	dsb	sy
 800fb08:	b662      	cpsie	i
 800fb0a:	e7fe      	b.n	800fb0a <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fb0c:	2202      	movs	r2, #2
 800fb0e:	2100      	movs	r1, #0
 800fb10:	f7ff ff92 	bl	800fa38 <xQueueGenericCreate>
		if( xHandle != NULL )
 800fb14:	b100      	cbz	r0, 800fb18 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fb16:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800fb18:	bd10      	pop	{r4, pc}

0800fb1a <xQueueGenericSend>:
{
 800fb1a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800fb1e:	460f      	mov	r7, r1
 800fb20:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800fb22:	4604      	mov	r4, r0
{
 800fb24:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800fb26:	b950      	cbnz	r0, 800fb3e <xQueueGenericSend+0x24>
 800fb28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb2c:	b672      	cpsid	i
 800fb2e:	f383 8811 	msr	BASEPRI, r3
 800fb32:	f3bf 8f6f 	isb	sy
 800fb36:	f3bf 8f4f 	dsb	sy
 800fb3a:	b662      	cpsie	i
 800fb3c:	e7fe      	b.n	800fb3c <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fb3e:	b961      	cbnz	r1, 800fb5a <xQueueGenericSend+0x40>
 800fb40:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800fb42:	b153      	cbz	r3, 800fb5a <xQueueGenericSend+0x40>
 800fb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb48:	b672      	cpsid	i
 800fb4a:	f383 8811 	msr	BASEPRI, r3
 800fb4e:	f3bf 8f6f 	isb	sy
 800fb52:	f3bf 8f4f 	dsb	sy
 800fb56:	b662      	cpsie	i
 800fb58:	e7fe      	b.n	800fb58 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fb5a:	2e02      	cmp	r6, #2
 800fb5c:	d10d      	bne.n	800fb7a <xQueueGenericSend+0x60>
 800fb5e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fb60:	2b01      	cmp	r3, #1
 800fb62:	d00a      	beq.n	800fb7a <xQueueGenericSend+0x60>
 800fb64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb68:	b672      	cpsid	i
 800fb6a:	f383 8811 	msr	BASEPRI, r3
 800fb6e:	f3bf 8f6f 	isb	sy
 800fb72:	f3bf 8f4f 	dsb	sy
 800fb76:	b662      	cpsie	i
 800fb78:	e7fe      	b.n	800fb78 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fb7a:	f001 f87b 	bl	8010c74 <xTaskGetSchedulerState>
 800fb7e:	4605      	mov	r5, r0
 800fb80:	b330      	cbz	r0, 800fbd0 <xQueueGenericSend+0xb6>
 800fb82:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800fb84:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800fb88:	f7ff fcfc 	bl	800f584 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb8c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800fb8e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d301      	bcc.n	800fb98 <xQueueGenericSend+0x7e>
 800fb94:	2e02      	cmp	r6, #2
 800fb96:	d129      	bne.n	800fbec <xQueueGenericSend+0xd2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb98:	4632      	mov	r2, r6
 800fb9a:	4639      	mov	r1, r7
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	f7ff fe2a 	bl	800f7f6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fba2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800fba4:	b11b      	cbz	r3, 800fbae <xQueueGenericSend+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fba6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800fbaa:	f000 ffc7 	bl	8010b3c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800fbae:	b148      	cbz	r0, 800fbc4 <xQueueGenericSend+0xaa>
						queueYIELD_IF_USING_PREEMPTION();
 800fbb0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fbb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbb8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800fbbc:	f3bf 8f4f 	dsb	sy
 800fbc0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800fbc4:	f7ff fd02 	bl	800f5cc <vPortExitCritical>
				return pdPASS;
 800fbc8:	2001      	movs	r0, #1
}
 800fbca:	b004      	add	sp, #16
 800fbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fbd0:	9b01      	ldr	r3, [sp, #4]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d0d6      	beq.n	800fb84 <xQueueGenericSend+0x6a>
 800fbd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbda:	b672      	cpsid	i
 800fbdc:	f383 8811 	msr	BASEPRI, r3
 800fbe0:	f3bf 8f6f 	isb	sy
 800fbe4:	f3bf 8f4f 	dsb	sy
 800fbe8:	b662      	cpsie	i
 800fbea:	e7fe      	b.n	800fbea <xQueueGenericSend+0xd0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800fbec:	9b01      	ldr	r3, [sp, #4]
 800fbee:	b91b      	cbnz	r3, 800fbf8 <xQueueGenericSend+0xde>
					taskEXIT_CRITICAL();
 800fbf0:	f7ff fcec 	bl	800f5cc <vPortExitCritical>
					return errQUEUE_FULL;
 800fbf4:	2000      	movs	r0, #0
 800fbf6:	e7e8      	b.n	800fbca <xQueueGenericSend+0xb0>
				else if( xEntryTimeSet == pdFALSE )
 800fbf8:	b915      	cbnz	r5, 800fc00 <xQueueGenericSend+0xe6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fbfa:	a802      	add	r0, sp, #8
 800fbfc:	f000 ffe2 	bl	8010bc4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800fc00:	f7ff fce4 	bl	800f5cc <vPortExitCritical>
		vTaskSuspendAll();
 800fc04:	f000 fd68 	bl	80106d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fc08:	f7ff fcbc 	bl	800f584 <vPortEnterCritical>
 800fc0c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800fc10:	2bff      	cmp	r3, #255	@ 0xff
 800fc12:	d101      	bne.n	800fc18 <xQueueGenericSend+0xfe>
 800fc14:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800fc18:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800fc1c:	2bff      	cmp	r3, #255	@ 0xff
 800fc1e:	d101      	bne.n	800fc24 <xQueueGenericSend+0x10a>
 800fc20:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800fc24:	f7ff fcd2 	bl	800f5cc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fc28:	a901      	add	r1, sp, #4
 800fc2a:	a802      	add	r0, sp, #8
 800fc2c:	f000 ffd6 	bl	8010bdc <xTaskCheckForTimeOut>
 800fc30:	bb38      	cbnz	r0, 800fc82 <xQueueGenericSend+0x168>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fc32:	f7ff fca7 	bl	800f584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fc36:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800fc38:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d10e      	bne.n	800fc5c <xQueueGenericSend+0x142>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800fc3e:	f7ff fcc5 	bl	800f5cc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fc42:	9901      	ldr	r1, [sp, #4]
 800fc44:	f104 0010 	add.w	r0, r4, #16
 800fc48:	f000 ff3c 	bl	8010ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	f7ff fe1a 	bl	800f886 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fc52:	f000 fde7 	bl	8010824 <xTaskResumeAll>
 800fc56:	b148      	cbz	r0, 800fc6c <xQueueGenericSend+0x152>
 800fc58:	2501      	movs	r5, #1
 800fc5a:	e795      	b.n	800fb88 <xQueueGenericSend+0x6e>
	taskEXIT_CRITICAL();
 800fc5c:	f7ff fcb6 	bl	800f5cc <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800fc60:	4620      	mov	r0, r4
 800fc62:	f7ff fe10 	bl	800f886 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc66:	f000 fddd 	bl	8010824 <xTaskResumeAll>
 800fc6a:	e7f5      	b.n	800fc58 <xQueueGenericSend+0x13e>
					portYIELD_WITHIN_API();
 800fc6c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fc70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc74:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	f3bf 8f6f 	isb	sy
 800fc80:	e7ea      	b.n	800fc58 <xQueueGenericSend+0x13e>
			prvUnlockQueue( pxQueue );
 800fc82:	4620      	mov	r0, r4
 800fc84:	f7ff fdff 	bl	800f886 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc88:	f000 fdcc 	bl	8010824 <xTaskResumeAll>
			return errQUEUE_FULL;
 800fc8c:	e7b2      	b.n	800fbf4 <xQueueGenericSend+0xda>

0800fc8e <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fc8e:	2200      	movs	r2, #0
	{
 800fc90:	460b      	mov	r3, r1
 800fc92:	b513      	push	{r0, r1, r4, lr}
 800fc94:	4611      	mov	r1, r2
 800fc96:	9000      	str	r0, [sp, #0]
 800fc98:	2001      	movs	r0, #1
 800fc9a:	f7ff fe6d 	bl	800f978 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 800fc9e:	4604      	mov	r4, r0
 800fca0:	b138      	cbz	r0, 800fcb2 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fca2:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fca4:	461a      	mov	r2, r3
 800fca6:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fca8:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fcaa:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fcac:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fcae:	f7ff ff34 	bl	800fb1a <xQueueGenericSend>
	}
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	b002      	add	sp, #8
 800fcb6:	bd10      	pop	{r4, pc}

0800fcb8 <xQueueGiveMutexRecursive>:
	{
 800fcb8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800fcba:	4604      	mov	r4, r0
 800fcbc:	b950      	cbnz	r0, 800fcd4 <xQueueGiveMutexRecursive+0x1c>
 800fcbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcc2:	b672      	cpsid	i
 800fcc4:	f383 8811 	msr	BASEPRI, r3
 800fcc8:	f3bf 8f6f 	isb	sy
 800fccc:	f3bf 8f4f 	dsb	sy
 800fcd0:	b662      	cpsie	i
 800fcd2:	e7fe      	b.n	800fcd2 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fcd4:	6885      	ldr	r5, [r0, #8]
 800fcd6:	f000 ffc7 	bl	8010c68 <xTaskGetCurrentTaskHandle>
 800fcda:	4285      	cmp	r5, r0
 800fcdc:	d10b      	bne.n	800fcf6 <xQueueGiveMutexRecursive+0x3e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800fcde:	68e3      	ldr	r3, [r4, #12]
 800fce0:	3b01      	subs	r3, #1
 800fce2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800fce4:	b10b      	cbz	r3, 800fcea <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 800fce6:	2001      	movs	r0, #1
	}
 800fce8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800fcea:	461a      	mov	r2, r3
 800fcec:	4619      	mov	r1, r3
 800fcee:	4620      	mov	r0, r4
 800fcf0:	f7ff ff13 	bl	800fb1a <xQueueGenericSend>
 800fcf4:	e7f7      	b.n	800fce6 <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdFAIL;
 800fcf6:	2000      	movs	r0, #0
		return xReturn;
 800fcf8:	e7f6      	b.n	800fce8 <xQueueGiveMutexRecursive+0x30>

0800fcfa <xQueueCreateMutex>:
	{
 800fcfa:	b570      	push	{r4, r5, r6, lr}
 800fcfc:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fcfe:	2050      	movs	r0, #80	@ 0x50
 800fd00:	f7ff fac8 	bl	800f294 <pvPortMalloc>
 800fd04:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800fd06:	b198      	cbz	r0, 800fd30 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fd08:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800fd0a:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fd0c:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fd0e:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800fd12:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fd16:	f7ff fdee 	bl	800f8f6 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fd1a:	462b      	mov	r3, r5
 800fd1c:	462a      	mov	r2, r5
 800fd1e:	4629      	mov	r1, r5
 800fd20:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800fd22:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fd26:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fd28:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fd2a:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fd2c:	f7ff fef5 	bl	800fb1a <xQueueGenericSend>
	}
 800fd30:	4620      	mov	r0, r4
 800fd32:	bd70      	pop	{r4, r5, r6, pc}

0800fd34 <xQueueGenericSendFromISR>:
{
 800fd34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd38:	4689      	mov	r9, r1
 800fd3a:	4617      	mov	r7, r2
 800fd3c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800fd3e:	4604      	mov	r4, r0
 800fd40:	b950      	cbnz	r0, 800fd58 <xQueueGenericSendFromISR+0x24>
 800fd42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd46:	b672      	cpsid	i
 800fd48:	f383 8811 	msr	BASEPRI, r3
 800fd4c:	f3bf 8f6f 	isb	sy
 800fd50:	f3bf 8f4f 	dsb	sy
 800fd54:	b662      	cpsie	i
 800fd56:	e7fe      	b.n	800fd56 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd58:	b961      	cbnz	r1, 800fd74 <xQueueGenericSendFromISR+0x40>
 800fd5a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800fd5c:	b153      	cbz	r3, 800fd74 <xQueueGenericSendFromISR+0x40>
 800fd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd62:	b672      	cpsid	i
 800fd64:	f383 8811 	msr	BASEPRI, r3
 800fd68:	f3bf 8f6f 	isb	sy
 800fd6c:	f3bf 8f4f 	dsb	sy
 800fd70:	b662      	cpsie	i
 800fd72:	e7fe      	b.n	800fd72 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fd74:	2e02      	cmp	r6, #2
 800fd76:	d10d      	bne.n	800fd94 <xQueueGenericSendFromISR+0x60>
 800fd78:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fd7a:	2b01      	cmp	r3, #1
 800fd7c:	d00a      	beq.n	800fd94 <xQueueGenericSendFromISR+0x60>
 800fd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd82:	b672      	cpsid	i
 800fd84:	f383 8811 	msr	BASEPRI, r3
 800fd88:	f3bf 8f6f 	isb	sy
 800fd8c:	f3bf 8f4f 	dsb	sy
 800fd90:	b662      	cpsie	i
 800fd92:	e7fe      	b.n	800fd92 <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fd94:	f7ff fcf2 	bl	800f77c <vPortValidateInterruptPriority>
	__asm volatile
 800fd98:	f3ef 8811 	mrs	r8, BASEPRI
 800fd9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fda0:	b672      	cpsid	i
 800fda2:	f383 8811 	msr	BASEPRI, r3
 800fda6:	f3bf 8f6f 	isb	sy
 800fdaa:	f3bf 8f4f 	dsb	sy
 800fdae:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fdb0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800fdb2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d301      	bcc.n	800fdbc <xQueueGenericSendFromISR+0x88>
 800fdb8:	2e02      	cmp	r6, #2
 800fdba:	d11d      	bne.n	800fdf8 <xQueueGenericSendFromISR+0xc4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800fdbc:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fdc0:	4632      	mov	r2, r6
 800fdc2:	4649      	mov	r1, r9
 800fdc4:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800fdc6:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fdc8:	f7ff fd15 	bl	800f7f6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800fdcc:	1c6b      	adds	r3, r5, #1
 800fdce:	d10e      	bne.n	800fdee <xQueueGenericSendFromISR+0xba>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fdd0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800fdd2:	b13b      	cbz	r3, 800fde4 <xQueueGenericSendFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fdd4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800fdd8:	f000 feb0 	bl	8010b3c <xTaskRemoveFromEventList>
 800fddc:	b110      	cbz	r0, 800fde4 <xQueueGenericSendFromISR+0xb0>
							if( pxHigherPriorityTaskWoken != NULL )
 800fdde:	b10f      	cbz	r7, 800fde4 <xQueueGenericSendFromISR+0xb0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fde0:	2301      	movs	r3, #1
 800fde2:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800fde4:	2001      	movs	r0, #1
	__asm volatile
 800fde6:	f388 8811 	msr	BASEPRI, r8
}
 800fdea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fdee:	3501      	adds	r5, #1
 800fdf0:	b26d      	sxtb	r5, r5
 800fdf2:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800fdf6:	e7f5      	b.n	800fde4 <xQueueGenericSendFromISR+0xb0>
			xReturn = errQUEUE_FULL;
 800fdf8:	2000      	movs	r0, #0
 800fdfa:	e7f4      	b.n	800fde6 <xQueueGenericSendFromISR+0xb2>

0800fdfc <xQueueGiveFromISR>:
{
 800fdfc:	b570      	push	{r4, r5, r6, lr}
 800fdfe:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800fe00:	4604      	mov	r4, r0
 800fe02:	b950      	cbnz	r0, 800fe1a <xQueueGiveFromISR+0x1e>
	__asm volatile
 800fe04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe08:	b672      	cpsid	i
 800fe0a:	f383 8811 	msr	BASEPRI, r3
 800fe0e:	f3bf 8f6f 	isb	sy
 800fe12:	f3bf 8f4f 	dsb	sy
 800fe16:	b662      	cpsie	i
 800fe18:	e7fe      	b.n	800fe18 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800fe1a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800fe1c:	b153      	cbz	r3, 800fe34 <xQueueGiveFromISR+0x38>
 800fe1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe22:	b672      	cpsid	i
 800fe24:	f383 8811 	msr	BASEPRI, r3
 800fe28:	f3bf 8f6f 	isb	sy
 800fe2c:	f3bf 8f4f 	dsb	sy
 800fe30:	b662      	cpsie	i
 800fe32:	e7fe      	b.n	800fe32 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fe34:	6803      	ldr	r3, [r0, #0]
 800fe36:	b963      	cbnz	r3, 800fe52 <xQueueGiveFromISR+0x56>
 800fe38:	6883      	ldr	r3, [r0, #8]
 800fe3a:	b153      	cbz	r3, 800fe52 <xQueueGiveFromISR+0x56>
 800fe3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe40:	b672      	cpsid	i
 800fe42:	f383 8811 	msr	BASEPRI, r3
 800fe46:	f3bf 8f6f 	isb	sy
 800fe4a:	f3bf 8f4f 	dsb	sy
 800fe4e:	b662      	cpsie	i
 800fe50:	e7fe      	b.n	800fe50 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fe52:	f7ff fc93 	bl	800f77c <vPortValidateInterruptPriority>
	__asm volatile
 800fe56:	f3ef 8611 	mrs	r6, BASEPRI
 800fe5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe5e:	b672      	cpsid	i
 800fe60:	f383 8811 	msr	BASEPRI, r3
 800fe64:	f3bf 8f6f 	isb	sy
 800fe68:	f3bf 8f4f 	dsb	sy
 800fe6c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe6e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fe70:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fe72:	4293      	cmp	r3, r2
 800fe74:	d919      	bls.n	800feaa <xQueueGiveFromISR+0xae>
			const int8_t cTxLock = pxQueue->cTxLock;
 800fe76:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe7a:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800fe7c:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800fe7e:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe80:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800fe82:	d10d      	bne.n	800fea0 <xQueueGiveFromISR+0xa4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe84:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800fe86:	b13b      	cbz	r3, 800fe98 <xQueueGiveFromISR+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe88:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800fe8c:	f000 fe56 	bl	8010b3c <xTaskRemoveFromEventList>
 800fe90:	b110      	cbz	r0, 800fe98 <xQueueGiveFromISR+0x9c>
							if( pxHigherPriorityTaskWoken != NULL )
 800fe92:	b10d      	cbz	r5, 800fe98 <xQueueGiveFromISR+0x9c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fe94:	2301      	movs	r3, #1
 800fe96:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800fe98:	2001      	movs	r0, #1
	__asm volatile
 800fe9a:	f386 8811 	msr	BASEPRI, r6
}
 800fe9e:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fea0:	3301      	adds	r3, #1
 800fea2:	b25b      	sxtb	r3, r3
 800fea4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800fea8:	e7f6      	b.n	800fe98 <xQueueGiveFromISR+0x9c>
			xReturn = errQUEUE_FULL;
 800feaa:	2000      	movs	r0, #0
 800feac:	e7f5      	b.n	800fe9a <xQueueGiveFromISR+0x9e>

0800feae <xQueueReceive>:
{
 800feae:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800feb2:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800feb4:	4604      	mov	r4, r0
{
 800feb6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800feb8:	b950      	cbnz	r0, 800fed0 <xQueueReceive+0x22>
	__asm volatile
 800feba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800febe:	b672      	cpsid	i
 800fec0:	f383 8811 	msr	BASEPRI, r3
 800fec4:	f3bf 8f6f 	isb	sy
 800fec8:	f3bf 8f4f 	dsb	sy
 800fecc:	b662      	cpsie	i
 800fece:	e7fe      	b.n	800fece <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fed0:	b961      	cbnz	r1, 800feec <xQueueReceive+0x3e>
 800fed2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800fed4:	b153      	cbz	r3, 800feec <xQueueReceive+0x3e>
 800fed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feda:	b672      	cpsid	i
 800fedc:	f383 8811 	msr	BASEPRI, r3
 800fee0:	f3bf 8f6f 	isb	sy
 800fee4:	f3bf 8f4f 	dsb	sy
 800fee8:	b662      	cpsie	i
 800feea:	e7fe      	b.n	800feea <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800feec:	f000 fec2 	bl	8010c74 <xTaskGetSchedulerState>
 800fef0:	4605      	mov	r5, r0
 800fef2:	b318      	cbz	r0, 800ff3c <xQueueReceive+0x8e>
 800fef4:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800fef6:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800fefa:	f7ff fb43 	bl	800f584 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fefe:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff00:	b357      	cbz	r7, 800ff58 <xQueueReceive+0xaa>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff02:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ff04:	4631      	mov	r1, r6
 800ff06:	4620      	mov	r0, r4
 800ff08:	f7ff fca8 	bl	800f85c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff0c:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff0e:	6923      	ldr	r3, [r4, #16]
 800ff10:	b173      	cbz	r3, 800ff30 <xQueueReceive+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff12:	f104 0010 	add.w	r0, r4, #16
 800ff16:	f000 fe11 	bl	8010b3c <xTaskRemoveFromEventList>
 800ff1a:	b148      	cbz	r0, 800ff30 <xQueueReceive+0x82>
						queueYIELD_IF_USING_PREEMPTION();
 800ff1c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ff20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff24:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ff28:	f3bf 8f4f 	dsb	sy
 800ff2c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ff30:	f7ff fb4c 	bl	800f5cc <vPortExitCritical>
				return pdPASS;
 800ff34:	2001      	movs	r0, #1
}
 800ff36:	b004      	add	sp, #16
 800ff38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff3c:	9b01      	ldr	r3, [sp, #4]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d0d9      	beq.n	800fef6 <xQueueReceive+0x48>
 800ff42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff46:	b672      	cpsid	i
 800ff48:	f383 8811 	msr	BASEPRI, r3
 800ff4c:	f3bf 8f6f 	isb	sy
 800ff50:	f3bf 8f4f 	dsb	sy
 800ff54:	b662      	cpsie	i
 800ff56:	e7fe      	b.n	800ff56 <xQueueReceive+0xa8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff58:	9b01      	ldr	r3, [sp, #4]
 800ff5a:	b91b      	cbnz	r3, 800ff64 <xQueueReceive+0xb6>
					taskEXIT_CRITICAL();
 800ff5c:	f7ff fb36 	bl	800f5cc <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ff60:	2000      	movs	r0, #0
 800ff62:	e7e8      	b.n	800ff36 <xQueueReceive+0x88>
				else if( xEntryTimeSet == pdFALSE )
 800ff64:	b915      	cbnz	r5, 800ff6c <xQueueReceive+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff66:	a802      	add	r0, sp, #8
 800ff68:	f000 fe2c 	bl	8010bc4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800ff6c:	f7ff fb2e 	bl	800f5cc <vPortExitCritical>
		vTaskSuspendAll();
 800ff70:	f000 fbb2 	bl	80106d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff74:	f7ff fb06 	bl	800f584 <vPortEnterCritical>
 800ff78:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ff7c:	2bff      	cmp	r3, #255	@ 0xff
 800ff7e:	d101      	bne.n	800ff84 <xQueueReceive+0xd6>
 800ff80:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800ff84:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ff88:	2bff      	cmp	r3, #255	@ 0xff
 800ff8a:	d101      	bne.n	800ff90 <xQueueReceive+0xe2>
 800ff8c:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800ff90:	f7ff fb1c 	bl	800f5cc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ff94:	a901      	add	r1, sp, #4
 800ff96:	a802      	add	r0, sp, #8
 800ff98:	f000 fe20 	bl	8010bdc <xTaskCheckForTimeOut>
 800ff9c:	bb00      	cbnz	r0, 800ffe0 <xQueueReceive+0x132>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	f7ff fc1e 	bl	800f7e0 <prvIsQueueEmpty>
 800ffa4:	b1b0      	cbz	r0, 800ffd4 <xQueueReceive+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ffa6:	9901      	ldr	r1, [sp, #4]
 800ffa8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ffac:	f000 fd8a 	bl	8010ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	f7ff fc68 	bl	800f886 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ffb6:	f000 fc35 	bl	8010824 <xTaskResumeAll>
 800ffba:	b948      	cbnz	r0, 800ffd0 <xQueueReceive+0x122>
					portYIELD_WITHIN_API();
 800ffbc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ffc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffc4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ffc8:	f3bf 8f4f 	dsb	sy
 800ffcc:	f3bf 8f6f 	isb	sy
 800ffd0:	2501      	movs	r5, #1
 800ffd2:	e792      	b.n	800fefa <xQueueReceive+0x4c>
				prvUnlockQueue( pxQueue );
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	f7ff fc56 	bl	800f886 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ffda:	f000 fc23 	bl	8010824 <xTaskResumeAll>
 800ffde:	e7f7      	b.n	800ffd0 <xQueueReceive+0x122>
			prvUnlockQueue( pxQueue );
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	f7ff fc50 	bl	800f886 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ffe6:	f000 fc1d 	bl	8010824 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffea:	4620      	mov	r0, r4
 800ffec:	f7ff fbf8 	bl	800f7e0 <prvIsQueueEmpty>
 800fff0:	2800      	cmp	r0, #0
 800fff2:	d0ed      	beq.n	800ffd0 <xQueueReceive+0x122>
 800fff4:	e7b4      	b.n	800ff60 <xQueueReceive+0xb2>

0800fff6 <xQueueSemaphoreTake>:
{
 800fff6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fff8:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800fffa:	4604      	mov	r4, r0
{
 800fffc:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800fffe:	b950      	cbnz	r0, 8010016 <xQueueSemaphoreTake+0x20>
 8010000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010004:	b672      	cpsid	i
 8010006:	f383 8811 	msr	BASEPRI, r3
 801000a:	f3bf 8f6f 	isb	sy
 801000e:	f3bf 8f4f 	dsb	sy
 8010012:	b662      	cpsie	i
 8010014:	e7fe      	b.n	8010014 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8010016:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8010018:	b155      	cbz	r5, 8010030 <xQueueSemaphoreTake+0x3a>
 801001a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801001e:	b672      	cpsid	i
 8010020:	f383 8811 	msr	BASEPRI, r3
 8010024:	f3bf 8f6f 	isb	sy
 8010028:	f3bf 8f4f 	dsb	sy
 801002c:	b662      	cpsie	i
 801002e:	e7fe      	b.n	801002e <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010030:	f000 fe20 	bl	8010c74 <xTaskGetSchedulerState>
 8010034:	4606      	mov	r6, r0
 8010036:	b320      	cbz	r0, 8010082 <xQueueSemaphoreTake+0x8c>
 8010038:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 801003a:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 801003c:	f7ff faa2 	bl	800f584 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010040:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010042:	b363      	cbz	r3, 801009e <xQueueSemaphoreTake+0xa8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010044:	3b01      	subs	r3, #1
 8010046:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010048:	6823      	ldr	r3, [r4, #0]
 801004a:	b913      	cbnz	r3, 8010052 <xQueueSemaphoreTake+0x5c>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801004c:	f000 fef8 	bl	8010e40 <pvTaskIncrementMutexHeldCount>
 8010050:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010052:	6923      	ldr	r3, [r4, #16]
 8010054:	b173      	cbz	r3, 8010074 <xQueueSemaphoreTake+0x7e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010056:	f104 0010 	add.w	r0, r4, #16
 801005a:	f000 fd6f 	bl	8010b3c <xTaskRemoveFromEventList>
 801005e:	b148      	cbz	r0, 8010074 <xQueueSemaphoreTake+0x7e>
						queueYIELD_IF_USING_PREEMPTION();
 8010060:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010064:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010068:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801006c:	f3bf 8f4f 	dsb	sy
 8010070:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010074:	f7ff faaa 	bl	800f5cc <vPortExitCritical>
				return pdPASS;
 8010078:	2001      	movs	r0, #1
}
 801007a:	b005      	add	sp, #20
 801007c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801007e:	4635      	mov	r5, r6
 8010080:	e7db      	b.n	801003a <xQueueSemaphoreTake+0x44>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010082:	9b01      	ldr	r3, [sp, #4]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d0fa      	beq.n	801007e <xQueueSemaphoreTake+0x88>
 8010088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801008c:	b672      	cpsid	i
 801008e:	f383 8811 	msr	BASEPRI, r3
 8010092:	f3bf 8f6f 	isb	sy
 8010096:	f3bf 8f4f 	dsb	sy
 801009a:	b662      	cpsie	i
 801009c:	e7fe      	b.n	801009c <xQueueSemaphoreTake+0xa6>
				if( xTicksToWait == ( TickType_t ) 0 )
 801009e:	9b01      	ldr	r3, [sp, #4]
 80100a0:	b963      	cbnz	r3, 80100bc <xQueueSemaphoreTake+0xc6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80100a2:	2d00      	cmp	r5, #0
 80100a4:	d068      	beq.n	8010178 <xQueueSemaphoreTake+0x182>
 80100a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100aa:	b672      	cpsid	i
 80100ac:	f383 8811 	msr	BASEPRI, r3
 80100b0:	f3bf 8f6f 	isb	sy
 80100b4:	f3bf 8f4f 	dsb	sy
 80100b8:	b662      	cpsie	i
 80100ba:	e7fe      	b.n	80100ba <xQueueSemaphoreTake+0xc4>
				else if( xEntryTimeSet == pdFALSE )
 80100bc:	b916      	cbnz	r6, 80100c4 <xQueueSemaphoreTake+0xce>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80100be:	a802      	add	r0, sp, #8
 80100c0:	f000 fd80 	bl	8010bc4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80100c4:	f7ff fa82 	bl	800f5cc <vPortExitCritical>
		vTaskSuspendAll();
 80100c8:	f000 fb06 	bl	80106d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80100cc:	f7ff fa5a 	bl	800f584 <vPortEnterCritical>
 80100d0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80100d4:	2bff      	cmp	r3, #255	@ 0xff
 80100d6:	d101      	bne.n	80100dc <xQueueSemaphoreTake+0xe6>
 80100d8:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 80100dc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80100e0:	2bff      	cmp	r3, #255	@ 0xff
 80100e2:	d101      	bne.n	80100e8 <xQueueSemaphoreTake+0xf2>
 80100e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80100e8:	f7ff fa70 	bl	800f5cc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80100ec:	a901      	add	r1, sp, #4
 80100ee:	a802      	add	r0, sp, #8
 80100f0:	f000 fd74 	bl	8010bdc <xTaskCheckForTimeOut>
 80100f4:	bb50      	cbnz	r0, 801014c <xQueueSemaphoreTake+0x156>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80100f6:	4620      	mov	r0, r4
 80100f8:	f7ff fb72 	bl	800f7e0 <prvIsQueueEmpty>
 80100fc:	b300      	cbz	r0, 8010140 <xQueueSemaphoreTake+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80100fe:	6823      	ldr	r3, [r4, #0]
 8010100:	b93b      	cbnz	r3, 8010112 <xQueueSemaphoreTake+0x11c>
						taskENTER_CRITICAL();
 8010102:	f7ff fa3f 	bl	800f584 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010106:	68a0      	ldr	r0, [r4, #8]
 8010108:	f000 fdc4 	bl	8010c94 <xTaskPriorityInherit>
 801010c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 801010e:	f7ff fa5d 	bl	800f5cc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010112:	9901      	ldr	r1, [sp, #4]
 8010114:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010118:	f000 fcd4 	bl	8010ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801011c:	4620      	mov	r0, r4
 801011e:	f7ff fbb2 	bl	800f886 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010122:	f000 fb7f 	bl	8010824 <xTaskResumeAll>
 8010126:	b948      	cbnz	r0, 801013c <xQueueSemaphoreTake+0x146>
					portYIELD_WITHIN_API();
 8010128:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801012c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010130:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010134:	f3bf 8f4f 	dsb	sy
 8010138:	f3bf 8f6f 	isb	sy
 801013c:	2601      	movs	r6, #1
 801013e:	e77d      	b.n	801003c <xQueueSemaphoreTake+0x46>
				prvUnlockQueue( pxQueue );
 8010140:	4620      	mov	r0, r4
 8010142:	f7ff fba0 	bl	800f886 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010146:	f000 fb6d 	bl	8010824 <xTaskResumeAll>
 801014a:	e7f7      	b.n	801013c <xQueueSemaphoreTake+0x146>
			prvUnlockQueue( pxQueue );
 801014c:	4620      	mov	r0, r4
 801014e:	f7ff fb9a 	bl	800f886 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010152:	f000 fb67 	bl	8010824 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010156:	4620      	mov	r0, r4
 8010158:	f7ff fb42 	bl	800f7e0 <prvIsQueueEmpty>
 801015c:	2800      	cmp	r0, #0
 801015e:	d0ed      	beq.n	801013c <xQueueSemaphoreTake+0x146>
					if( xInheritanceOccurred != pdFALSE )
 8010160:	b165      	cbz	r5, 801017c <xQueueSemaphoreTake+0x186>
						taskENTER_CRITICAL();
 8010162:	f7ff fa0f 	bl	800f584 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010166:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8010168:	b119      	cbz	r1, 8010172 <xQueueSemaphoreTake+0x17c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801016a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801016c:	6819      	ldr	r1, [r3, #0]
 801016e:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010172:	68a0      	ldr	r0, [r4, #8]
 8010174:	f000 fe12 	bl	8010d9c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8010178:	f7ff fa28 	bl	800f5cc <vPortExitCritical>
					return errQUEUE_EMPTY;
 801017c:	2000      	movs	r0, #0
 801017e:	e77c      	b.n	801007a <xQueueSemaphoreTake+0x84>

08010180 <xQueueTakeMutexRecursive>:
	{
 8010180:	b570      	push	{r4, r5, r6, lr}
 8010182:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 8010184:	4604      	mov	r4, r0
 8010186:	b950      	cbnz	r0, 801019e <xQueueTakeMutexRecursive+0x1e>
 8010188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801018c:	b672      	cpsid	i
 801018e:	f383 8811 	msr	BASEPRI, r3
 8010192:	f3bf 8f6f 	isb	sy
 8010196:	f3bf 8f4f 	dsb	sy
 801019a:	b662      	cpsie	i
 801019c:	e7fe      	b.n	801019c <xQueueTakeMutexRecursive+0x1c>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801019e:	6886      	ldr	r6, [r0, #8]
 80101a0:	f000 fd62 	bl	8010c68 <xTaskGetCurrentTaskHandle>
 80101a4:	4286      	cmp	r6, r0
 80101a6:	d104      	bne.n	80101b2 <xQueueTakeMutexRecursive+0x32>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80101a8:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 80101aa:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80101ac:	3301      	adds	r3, #1
 80101ae:	60e3      	str	r3, [r4, #12]
	}
 80101b0:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80101b2:	4629      	mov	r1, r5
 80101b4:	4620      	mov	r0, r4
 80101b6:	f7ff ff1e 	bl	800fff6 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80101ba:	2800      	cmp	r0, #0
 80101bc:	d0f8      	beq.n	80101b0 <xQueueTakeMutexRecursive+0x30>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80101be:	68e3      	ldr	r3, [r4, #12]
 80101c0:	3301      	adds	r3, #1
 80101c2:	60e3      	str	r3, [r4, #12]
 80101c4:	e7f4      	b.n	80101b0 <xQueueTakeMutexRecursive+0x30>

080101c6 <xQueueReceiveFromISR>:
{
 80101c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101ca:	4689      	mov	r9, r1
 80101cc:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80101ce:	4604      	mov	r4, r0
 80101d0:	b950      	cbnz	r0, 80101e8 <xQueueReceiveFromISR+0x22>
 80101d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101d6:	b672      	cpsid	i
 80101d8:	f383 8811 	msr	BASEPRI, r3
 80101dc:	f3bf 8f6f 	isb	sy
 80101e0:	f3bf 8f4f 	dsb	sy
 80101e4:	b662      	cpsie	i
 80101e6:	e7fe      	b.n	80101e6 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80101e8:	b961      	cbnz	r1, 8010204 <xQueueReceiveFromISR+0x3e>
 80101ea:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80101ec:	b153      	cbz	r3, 8010204 <xQueueReceiveFromISR+0x3e>
 80101ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101f2:	b672      	cpsid	i
 80101f4:	f383 8811 	msr	BASEPRI, r3
 80101f8:	f3bf 8f6f 	isb	sy
 80101fc:	f3bf 8f4f 	dsb	sy
 8010200:	b662      	cpsie	i
 8010202:	e7fe      	b.n	8010202 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010204:	f7ff faba 	bl	800f77c <vPortValidateInterruptPriority>
	__asm volatile
 8010208:	f3ef 8711 	mrs	r7, BASEPRI
 801020c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010210:	b672      	cpsid	i
 8010212:	f383 8811 	msr	BASEPRI, r3
 8010216:	f3bf 8f6f 	isb	sy
 801021a:	f3bf 8f4f 	dsb	sy
 801021e:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010220:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010222:	b30d      	cbz	r5, 8010268 <xQueueReceiveFromISR+0xa2>
			const int8_t cRxLock = pxQueue->cRxLock;
 8010224:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010228:	4649      	mov	r1, r9
 801022a:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801022c:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 801022e:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010230:	f7ff fb14 	bl	800f85c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010234:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8010236:	1c73      	adds	r3, r6, #1
 8010238:	d111      	bne.n	801025e <xQueueReceiveFromISR+0x98>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801023a:	6923      	ldr	r3, [r4, #16]
 801023c:	b153      	cbz	r3, 8010254 <xQueueReceiveFromISR+0x8e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801023e:	f104 0010 	add.w	r0, r4, #16
 8010242:	f000 fc7b 	bl	8010b3c <xTaskRemoveFromEventList>
 8010246:	b128      	cbz	r0, 8010254 <xQueueReceiveFromISR+0x8e>
						if( pxHigherPriorityTaskWoken != NULL )
 8010248:	f1b8 0f00 	cmp.w	r8, #0
 801024c:	d002      	beq.n	8010254 <xQueueReceiveFromISR+0x8e>
							*pxHigherPriorityTaskWoken = pdTRUE;
 801024e:	2301      	movs	r3, #1
 8010250:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8010254:	2001      	movs	r0, #1
	__asm volatile
 8010256:	f387 8811 	msr	BASEPRI, r7
}
 801025a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801025e:	3601      	adds	r6, #1
 8010260:	b276      	sxtb	r6, r6
 8010262:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8010266:	e7f5      	b.n	8010254 <xQueueReceiveFromISR+0x8e>
			xReturn = pdFAIL;
 8010268:	4628      	mov	r0, r5
 801026a:	e7f4      	b.n	8010256 <xQueueReceiveFromISR+0x90>

0801026c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801026c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801026e:	4a07      	ldr	r2, [pc, #28]	@ (801028c <vQueueAddToRegistry+0x20>)
	{
 8010270:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010272:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8010276:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 801027a:	b91d      	cbnz	r5, 8010284 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801027c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010280:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010282:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010284:	3301      	adds	r3, #1
 8010286:	2b08      	cmp	r3, #8
 8010288:	d1f3      	bne.n	8010272 <vQueueAddToRegistry+0x6>
 801028a:	e7fa      	b.n	8010282 <vQueueAddToRegistry+0x16>
 801028c:	20026324 	.word	0x20026324

08010290 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010290:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010292:	4a09      	ldr	r2, [pc, #36]	@ (80102b8 <vQueueUnregisterQueue+0x28>)
	{
 8010294:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010296:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801029a:	00dc      	lsls	r4, r3, #3
 801029c:	4281      	cmp	r1, r0
 801029e:	d106      	bne.n	80102ae <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80102a0:	4a06      	ldr	r2, [pc, #24]	@ (80102bc <vQueueUnregisterQueue+0x2c>)
 80102a2:	2100      	movs	r1, #0
 80102a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80102a8:	4422      	add	r2, r4
 80102aa:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80102ac:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80102ae:	3301      	adds	r3, #1
 80102b0:	2b08      	cmp	r3, #8
 80102b2:	d1f0      	bne.n	8010296 <vQueueUnregisterQueue+0x6>
 80102b4:	e7fa      	b.n	80102ac <vQueueUnregisterQueue+0x1c>
 80102b6:	bf00      	nop
 80102b8:	20026328 	.word	0x20026328
 80102bc:	20026324 	.word	0x20026324

080102c0 <vQueueDelete>:
{
 80102c0:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80102c2:	b950      	cbnz	r0, 80102da <vQueueDelete+0x1a>
	__asm volatile
 80102c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102c8:	b672      	cpsid	i
 80102ca:	f383 8811 	msr	BASEPRI, r3
 80102ce:	f3bf 8f6f 	isb	sy
 80102d2:	f3bf 8f4f 	dsb	sy
 80102d6:	b662      	cpsie	i
 80102d8:	e7fe      	b.n	80102d8 <vQueueDelete+0x18>
		vQueueUnregisterQueue( pxQueue );
 80102da:	f7ff ffd9 	bl	8010290 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80102de:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 80102e2:	b91b      	cbnz	r3, 80102ec <vQueueDelete+0x2c>
}
 80102e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 80102e8:	f7ff b86a 	b.w	800f3c0 <vPortFree>
}
 80102ec:	bd10      	pop	{r4, pc}

080102ee <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80102ee:	b570      	push	{r4, r5, r6, lr}
 80102f0:	4604      	mov	r4, r0
 80102f2:	460d      	mov	r5, r1
 80102f4:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80102f6:	f7ff f945 	bl	800f584 <vPortEnterCritical>
 80102fa:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80102fe:	2bff      	cmp	r3, #255	@ 0xff
 8010300:	d102      	bne.n	8010308 <vQueueWaitForMessageRestricted+0x1a>
 8010302:	2300      	movs	r3, #0
 8010304:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8010308:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801030c:	2bff      	cmp	r3, #255	@ 0xff
 801030e:	d102      	bne.n	8010316 <vQueueWaitForMessageRestricted+0x28>
 8010310:	2300      	movs	r3, #0
 8010312:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8010316:	f7ff f959 	bl	800f5cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801031a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801031c:	b92b      	cbnz	r3, 801032a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801031e:	4632      	mov	r2, r6
 8010320:	4629      	mov	r1, r5
 8010322:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010326:	f000 fbe9 	bl	8010afc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801032a:	4620      	mov	r0, r4
	}
 801032c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8010330:	f7ff baa9 	b.w	800f886 <prvUnlockQueue>

08010334 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010338:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801033a:	f7ff f923 	bl	800f584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801033e:	4b2f      	ldr	r3, [pc, #188]	@ (80103fc <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8010340:	4e2f      	ldr	r6, [pc, #188]	@ (8010400 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	4f2f      	ldr	r7, [pc, #188]	@ (8010404 <prvAddNewTaskToReadyList+0xd0>)
 8010346:	3201      	adds	r2, #1
 8010348:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 801034a:	6835      	ldr	r5, [r6, #0]
 801034c:	2d00      	cmp	r5, #0
 801034e:	d14a      	bne.n	80103e6 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010350:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	2b01      	cmp	r3, #1
 8010356:	d11f      	bne.n	8010398 <prvAddNewTaskToReadyList+0x64>
 8010358:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801035a:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801035c:	4640      	mov	r0, r8
 801035e:	f7ff f86b 	bl	800f438 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010362:	f108 0814 	add.w	r8, r8, #20
 8010366:	2d38      	cmp	r5, #56	@ 0x38
 8010368:	d1f7      	bne.n	801035a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 801036a:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 801042c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 801036e:	4d26      	ldr	r5, [pc, #152]	@ (8010408 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8010370:	4640      	mov	r0, r8
 8010372:	f7ff f861 	bl	800f438 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010376:	4628      	mov	r0, r5
 8010378:	f7ff f85e 	bl	800f438 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801037c:	4823      	ldr	r0, [pc, #140]	@ (801040c <prvAddNewTaskToReadyList+0xd8>)
 801037e:	f7ff f85b 	bl	800f438 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010382:	4823      	ldr	r0, [pc, #140]	@ (8010410 <prvAddNewTaskToReadyList+0xdc>)
 8010384:	f7ff f858 	bl	800f438 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010388:	4822      	ldr	r0, [pc, #136]	@ (8010414 <prvAddNewTaskToReadyList+0xe0>)
 801038a:	f7ff f855 	bl	800f438 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801038e:	4b22      	ldr	r3, [pc, #136]	@ (8010418 <prvAddNewTaskToReadyList+0xe4>)
 8010390:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010394:	4b21      	ldr	r3, [pc, #132]	@ (801041c <prvAddNewTaskToReadyList+0xe8>)
 8010396:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8010398:	4a21      	ldr	r2, [pc, #132]	@ (8010420 <prvAddNewTaskToReadyList+0xec>)
 801039a:	6813      	ldr	r3, [r2, #0]
 801039c:	3301      	adds	r3, #1
 801039e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80103a0:	4a20      	ldr	r2, [pc, #128]	@ (8010424 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80103a2:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80103a4:	6811      	ldr	r1, [r2, #0]
 80103a6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80103a8:	428b      	cmp	r3, r1
 80103aa:	d900      	bls.n	80103ae <prvAddNewTaskToReadyList+0x7a>
 80103ac:	6013      	str	r3, [r2, #0]
 80103ae:	2014      	movs	r0, #20
 80103b0:	1d21      	adds	r1, r4, #4
 80103b2:	fb00 7003 	mla	r0, r0, r3, r7
 80103b6:	f7ff f84d 	bl	800f454 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80103ba:	f7ff f907 	bl	800f5cc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80103be:	4b1a      	ldr	r3, [pc, #104]	@ (8010428 <prvAddNewTaskToReadyList+0xf4>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	b173      	cbz	r3, 80103e2 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80103c4:	6833      	ldr	r3, [r6, #0]
 80103c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103c8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d209      	bcs.n	80103e2 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 80103ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80103d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80103da:	f3bf 8f4f 	dsb	sy
 80103de:	f3bf 8f6f 	isb	sy
}
 80103e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80103e6:	4b10      	ldr	r3, [pc, #64]	@ (8010428 <prvAddNewTaskToReadyList+0xf4>)
 80103e8:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80103ea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80103ec:	2a00      	cmp	r2, #0
 80103ee:	d1d3      	bne.n	8010398 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80103f0:	6832      	ldr	r2, [r6, #0]
 80103f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80103f4:	429a      	cmp	r2, r3
 80103f6:	d8cf      	bhi.n	8010398 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 80103f8:	6034      	str	r4, [r6, #0]
 80103fa:	e7cd      	b.n	8010398 <prvAddNewTaskToReadyList+0x64>
 80103fc:	20026388 	.word	0x20026388
 8010400:	2002685c 	.word	0x2002685c
 8010404:	200263fc 	.word	0x200263fc
 8010408:	200263d4 	.word	0x200263d4
 801040c:	200263b8 	.word	0x200263b8
 8010410:	200263a4 	.word	0x200263a4
 8010414:	2002638c 	.word	0x2002638c
 8010418:	200263d0 	.word	0x200263d0
 801041c:	200263cc 	.word	0x200263cc
 8010420:	2002636c 	.word	0x2002636c
 8010424:	20026380 	.word	0x20026380
 8010428:	2002637c 	.word	0x2002637c
 801042c:	200263e8 	.word	0x200263e8

08010430 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010432:	4b15      	ldr	r3, [pc, #84]	@ (8010488 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8010434:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010436:	4d15      	ldr	r5, [pc, #84]	@ (801048c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8010438:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 801043a:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801043c:	6828      	ldr	r0, [r5, #0]
 801043e:	3004      	adds	r0, #4
 8010440:	f7ff f82a 	bl	800f498 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010444:	1c73      	adds	r3, r6, #1
 8010446:	d107      	bne.n	8010458 <prvAddCurrentTaskToDelayedList+0x28>
 8010448:	b137      	cbz	r7, 8010458 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801044a:	6829      	ldr	r1, [r5, #0]
 801044c:	4810      	ldr	r0, [pc, #64]	@ (8010490 <prvAddCurrentTaskToDelayedList+0x60>)
 801044e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010450:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010454:	f7fe bffe 	b.w	800f454 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010458:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801045a:	682b      	ldr	r3, [r5, #0]
 801045c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801045e:	d307      	bcc.n	8010470 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010460:	4b0c      	ldr	r3, [pc, #48]	@ (8010494 <prvAddCurrentTaskToDelayedList+0x64>)
 8010462:	6818      	ldr	r0, [r3, #0]
 8010464:	6829      	ldr	r1, [r5, #0]
}
 8010466:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801046a:	3104      	adds	r1, #4
 801046c:	f7fe bffd 	b.w	800f46a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010470:	4b09      	ldr	r3, [pc, #36]	@ (8010498 <prvAddCurrentTaskToDelayedList+0x68>)
 8010472:	6818      	ldr	r0, [r3, #0]
 8010474:	6829      	ldr	r1, [r5, #0]
 8010476:	3104      	adds	r1, #4
 8010478:	f7fe fff7 	bl	800f46a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801047c:	4b07      	ldr	r3, [pc, #28]	@ (801049c <prvAddCurrentTaskToDelayedList+0x6c>)
 801047e:	681a      	ldr	r2, [r3, #0]
 8010480:	42a2      	cmp	r2, r4
 8010482:	d900      	bls.n	8010486 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8010484:	601c      	str	r4, [r3, #0]
}
 8010486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010488:	20026384 	.word	0x20026384
 801048c:	2002685c 	.word	0x2002685c
 8010490:	2002638c 	.word	0x2002638c
 8010494:	200263cc 	.word	0x200263cc
 8010498:	200263d0 	.word	0x200263d0
 801049c:	20026368 	.word	0x20026368

080104a0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80104a0:	4a06      	ldr	r2, [pc, #24]	@ (80104bc <prvResetNextTaskUnblockTime+0x1c>)
 80104a2:	6813      	ldr	r3, [r2, #0]
 80104a4:	6819      	ldr	r1, [r3, #0]
 80104a6:	4b06      	ldr	r3, [pc, #24]	@ (80104c0 <prvResetNextTaskUnblockTime+0x20>)
 80104a8:	b919      	cbnz	r1, 80104b2 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80104aa:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80104ae:	601a      	str	r2, [r3, #0]
}
 80104b0:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104b2:	6812      	ldr	r2, [r2, #0]
 80104b4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80104b6:	68d2      	ldr	r2, [r2, #12]
 80104b8:	6852      	ldr	r2, [r2, #4]
 80104ba:	e7f8      	b.n	80104ae <prvResetNextTaskUnblockTime+0xe>
 80104bc:	200263d0 	.word	0x200263d0
 80104c0:	20026368 	.word	0x20026368

080104c4 <prvDeleteTCB>:
	{
 80104c4:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80104c6:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 80104ca:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80104cc:	b93b      	cbnz	r3, 80104de <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80104ce:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80104d0:	f7fe ff76 	bl	800f3c0 <vPortFree>
				vPortFree( pxTCB );
 80104d4:	4620      	mov	r0, r4
	}
 80104d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80104da:	f7fe bf71 	b.w	800f3c0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80104de:	2b01      	cmp	r3, #1
 80104e0:	d0f9      	beq.n	80104d6 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80104e2:	2b02      	cmp	r3, #2
 80104e4:	d00a      	beq.n	80104fc <prvDeleteTCB+0x38>
 80104e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104ea:	b672      	cpsid	i
 80104ec:	f383 8811 	msr	BASEPRI, r3
 80104f0:	f3bf 8f6f 	isb	sy
 80104f4:	f3bf 8f4f 	dsb	sy
 80104f8:	b662      	cpsie	i
 80104fa:	e7fe      	b.n	80104fa <prvDeleteTCB+0x36>
	}
 80104fc:	bd10      	pop	{r4, pc}
	...

08010500 <prvIdleTask>:
{
 8010500:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010502:	4c14      	ldr	r4, [pc, #80]	@ (8010554 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010504:	4f14      	ldr	r7, [pc, #80]	@ (8010558 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8010506:	4d15      	ldr	r5, [pc, #84]	@ (801055c <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010508:	6823      	ldr	r3, [r4, #0]
 801050a:	b983      	cbnz	r3, 801052e <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801050c:	4b14      	ldr	r3, [pc, #80]	@ (8010560 <prvIdleTask+0x60>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	2b01      	cmp	r3, #1
 8010512:	d909      	bls.n	8010528 <prvIdleTask+0x28>
				taskYIELD();
 8010514:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801051c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010520:	f3bf 8f4f 	dsb	sy
 8010524:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8010528:	f7f2 ffe4 	bl	80034f4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801052c:	e7eb      	b.n	8010506 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 801052e:	f7ff f829 	bl	800f584 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010536:	1d30      	adds	r0, r6, #4
 8010538:	f7fe ffae 	bl	800f498 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801053c:	682b      	ldr	r3, [r5, #0]
 801053e:	3b01      	subs	r3, #1
 8010540:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010542:	6823      	ldr	r3, [r4, #0]
 8010544:	3b01      	subs	r3, #1
 8010546:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8010548:	f7ff f840 	bl	800f5cc <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 801054c:	4630      	mov	r0, r6
 801054e:	f7ff ffb9 	bl	80104c4 <prvDeleteTCB>
 8010552:	e7d9      	b.n	8010508 <prvIdleTask+0x8>
 8010554:	200263a0 	.word	0x200263a0
 8010558:	200263a4 	.word	0x200263a4
 801055c:	20026388 	.word	0x20026388
 8010560:	200263fc 	.word	0x200263fc

08010564 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010568:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801056a:	4607      	mov	r7, r0
 801056c:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801056e:	21a5      	movs	r1, #165	@ 0xa5
 8010570:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010572:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010574:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010576:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801057a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801057c:	f01a fa30 	bl	802a9e0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010580:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010582:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010584:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8010588:	b3b5      	cbz	r5, 80105f8 <prvInitialiseNewTask.constprop.0+0x94>
 801058a:	1e6b      	subs	r3, r5, #1
 801058c:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8010590:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010592:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010596:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 801059a:	b109      	cbz	r1, 80105a0 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801059c:	42ab      	cmp	r3, r5
 801059e:	d1f8      	bne.n	8010592 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80105a0:	2300      	movs	r3, #0
 80105a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80105a6:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80105a8:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80105ac:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80105ae:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80105b0:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80105b4:	bf28      	it	cs
 80105b6:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 80105b8:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80105ba:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105bc:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80105c0:	f7fe ff45 	bl	800f44e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80105c4:	f104 0018 	add.w	r0, r4, #24
 80105c8:	f7fe ff41 	bl	800f44e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80105cc:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80105d0:	4642      	mov	r2, r8
 80105d2:	4639      	mov	r1, r7
 80105d4:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80105d6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105d8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80105da:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 80105dc:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80105e0:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80105e4:	f7fe ffaa 	bl	800f53c <pxPortInitialiseStack>
 80105e8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80105ea:	f1b9 0f00 	cmp.w	r9, #0
 80105ee:	d001      	beq.n	80105f4 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80105f0:	f8c9 4000 	str.w	r4, [r9]
}
 80105f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80105f8:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 80105fc:	e7d3      	b.n	80105a6 <prvInitialiseNewTask.constprop.0+0x42>

080105fe <xTaskCreateStatic>:
	{
 80105fe:	b570      	push	{r4, r5, r6, lr}
 8010600:	b086      	sub	sp, #24
 8010602:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8010606:	b955      	cbnz	r5, 801061e <xTaskCreateStatic+0x20>
 8010608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801060c:	b672      	cpsid	i
 801060e:	f383 8811 	msr	BASEPRI, r3
 8010612:	f3bf 8f6f 	isb	sy
 8010616:	f3bf 8f4f 	dsb	sy
 801061a:	b662      	cpsie	i
 801061c:	e7fe      	b.n	801061c <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 801061e:	b954      	cbnz	r4, 8010636 <xTaskCreateStatic+0x38>
 8010620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010624:	b672      	cpsid	i
 8010626:	f383 8811 	msr	BASEPRI, r3
 801062a:	f3bf 8f6f 	isb	sy
 801062e:	f3bf 8f4f 	dsb	sy
 8010632:	b662      	cpsie	i
 8010634:	e7fe      	b.n	8010634 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8010636:	2660      	movs	r6, #96	@ 0x60
 8010638:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801063a:	9e05      	ldr	r6, [sp, #20]
 801063c:	2e60      	cmp	r6, #96	@ 0x60
 801063e:	d00a      	beq.n	8010656 <xTaskCreateStatic+0x58>
 8010640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010644:	b672      	cpsid	i
 8010646:	f383 8811 	msr	BASEPRI, r3
 801064a:	f3bf 8f6f 	isb	sy
 801064e:	f3bf 8f4f 	dsb	sy
 8010652:	b662      	cpsie	i
 8010654:	e7fe      	b.n	8010654 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010656:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010658:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801065a:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801065c:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010660:	ad04      	add	r5, sp, #16
 8010662:	9402      	str	r4, [sp, #8]
 8010664:	9501      	str	r5, [sp, #4]
 8010666:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010668:	9500      	str	r5, [sp, #0]
 801066a:	f7ff ff7b 	bl	8010564 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 801066e:	4620      	mov	r0, r4
 8010670:	f7ff fe60 	bl	8010334 <prvAddNewTaskToReadyList>
	}
 8010674:	9804      	ldr	r0, [sp, #16]
 8010676:	b006      	add	sp, #24
 8010678:	bd70      	pop	{r4, r5, r6, pc}

0801067a <xTaskCreate>:
	{
 801067a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801067e:	4607      	mov	r7, r0
 8010680:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010682:	0090      	lsls	r0, r2, #2
	{
 8010684:	4688      	mov	r8, r1
 8010686:	4616      	mov	r6, r2
 8010688:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801068a:	f7fe fe03 	bl	800f294 <pvPortMalloc>
			if( pxStack != NULL )
 801068e:	4605      	mov	r5, r0
 8010690:	b920      	cbnz	r0, 801069c <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010692:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8010696:	b005      	add	sp, #20
 8010698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801069c:	2060      	movs	r0, #96	@ 0x60
 801069e:	f7fe fdf9 	bl	800f294 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80106a2:	4604      	mov	r4, r0
 80106a4:	b198      	cbz	r0, 80106ce <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80106a6:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 80106a8:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80106aa:	4632      	mov	r2, r6
 80106ac:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80106ae:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80106b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80106b4:	9002      	str	r0, [sp, #8]
 80106b6:	4638      	mov	r0, r7
 80106b8:	9301      	str	r3, [sp, #4]
 80106ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80106bc:	9300      	str	r3, [sp, #0]
 80106be:	464b      	mov	r3, r9
 80106c0:	f7ff ff50 	bl	8010564 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80106c4:	4620      	mov	r0, r4
 80106c6:	f7ff fe35 	bl	8010334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80106ca:	2001      	movs	r0, #1
 80106cc:	e7e3      	b.n	8010696 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80106ce:	4628      	mov	r0, r5
 80106d0:	f7fe fe76 	bl	800f3c0 <vPortFree>
		if( pxNewTCB != NULL )
 80106d4:	e7dd      	b.n	8010692 <xTaskCreate+0x18>
	...

080106d8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80106d8:	4a02      	ldr	r2, [pc, #8]	@ (80106e4 <vTaskSuspendAll+0xc>)
 80106da:	6813      	ldr	r3, [r2, #0]
 80106dc:	3301      	adds	r3, #1
 80106de:	6013      	str	r3, [r2, #0]
}
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop
 80106e4:	20026364 	.word	0x20026364

080106e8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80106e8:	4b01      	ldr	r3, [pc, #4]	@ (80106f0 <xTaskGetTickCount+0x8>)
 80106ea:	6818      	ldr	r0, [r3, #0]
}
 80106ec:	4770      	bx	lr
 80106ee:	bf00      	nop
 80106f0:	20026384 	.word	0x20026384

080106f4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80106f4:	4b40      	ldr	r3, [pc, #256]	@ (80107f8 <xTaskIncrementTick+0x104>)
 80106f6:	681b      	ldr	r3, [r3, #0]
{
 80106f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d173      	bne.n	80107e8 <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010700:	4b3e      	ldr	r3, [pc, #248]	@ (80107fc <xTaskIncrementTick+0x108>)
 8010702:	681c      	ldr	r4, [r3, #0]
 8010704:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8010706:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010708:	b9cc      	cbnz	r4, 801073e <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 801070a:	4b3d      	ldr	r3, [pc, #244]	@ (8010800 <xTaskIncrementTick+0x10c>)
 801070c:	681a      	ldr	r2, [r3, #0]
 801070e:	6812      	ldr	r2, [r2, #0]
 8010710:	b152      	cbz	r2, 8010728 <xTaskIncrementTick+0x34>
 8010712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010716:	b672      	cpsid	i
 8010718:	f383 8811 	msr	BASEPRI, r3
 801071c:	f3bf 8f6f 	isb	sy
 8010720:	f3bf 8f4f 	dsb	sy
 8010724:	b662      	cpsie	i
 8010726:	e7fe      	b.n	8010726 <xTaskIncrementTick+0x32>
 8010728:	4a36      	ldr	r2, [pc, #216]	@ (8010804 <xTaskIncrementTick+0x110>)
 801072a:	6819      	ldr	r1, [r3, #0]
 801072c:	6810      	ldr	r0, [r2, #0]
 801072e:	6018      	str	r0, [r3, #0]
 8010730:	6011      	str	r1, [r2, #0]
 8010732:	4a35      	ldr	r2, [pc, #212]	@ (8010808 <xTaskIncrementTick+0x114>)
 8010734:	6813      	ldr	r3, [r2, #0]
 8010736:	3301      	adds	r3, #1
 8010738:	6013      	str	r3, [r2, #0]
 801073a:	f7ff feb1 	bl	80104a0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 801073e:	4d33      	ldr	r5, [pc, #204]	@ (801080c <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8010740:	f04f 0b00 	mov.w	fp, #0
 8010744:	4e32      	ldr	r6, [pc, #200]	@ (8010810 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010746:	682b      	ldr	r3, [r5, #0]
 8010748:	4f32      	ldr	r7, [pc, #200]	@ (8010814 <xTaskIncrementTick+0x120>)
 801074a:	42a3      	cmp	r3, r4
 801074c:	d911      	bls.n	8010772 <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801074e:	683a      	ldr	r2, [r7, #0]
 8010750:	2114      	movs	r1, #20
 8010752:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010754:	434a      	muls	r2, r1
 8010756:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8010758:	2a02      	cmp	r2, #2
 801075a:	bf28      	it	cs
 801075c:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8010760:	4a2d      	ldr	r2, [pc, #180]	@ (8010818 <xTaskIncrementTick+0x124>)
 8010762:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8010764:	2a00      	cmp	r2, #0
}
 8010766:	bf0c      	ite	eq
 8010768:	4658      	moveq	r0, fp
 801076a:	2001      	movne	r0, #1
 801076c:	b003      	add	sp, #12
 801076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010772:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8010800 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8010776:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 8010820 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801077a:	f8d9 2000 	ldr.w	r2, [r9]
 801077e:	6812      	ldr	r2, [r2, #0]
 8010780:	b91a      	cbnz	r2, 801078a <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010782:	f04f 32ff 	mov.w	r2, #4294967295
 8010786:	602a      	str	r2, [r5, #0]
					break;
 8010788:	e7e1      	b.n	801074e <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801078a:	f8d9 2000 	ldr.w	r2, [r9]
 801078e:	68d2      	ldr	r2, [r2, #12]
 8010790:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010794:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8010798:	428c      	cmp	r4, r1
 801079a:	d201      	bcs.n	80107a0 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 801079c:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801079e:	e7d6      	b.n	801074e <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107a0:	f108 0304 	add.w	r3, r8, #4
 80107a4:	4618      	mov	r0, r3
 80107a6:	9301      	str	r3, [sp, #4]
 80107a8:	f7fe fe76 	bl	800f498 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80107ac:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 80107b0:	b119      	cbz	r1, 80107ba <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80107b2:	f108 0018 	add.w	r0, r8, #24
 80107b6:	f7fe fe6f 	bl	800f498 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80107ba:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 80107be:	f8da 1000 	ldr.w	r1, [sl]
 80107c2:	4288      	cmp	r0, r1
 80107c4:	d901      	bls.n	80107ca <xTaskIncrementTick+0xd6>
 80107c6:	f8ca 0000 	str.w	r0, [sl]
 80107ca:	2314      	movs	r3, #20
 80107cc:	9901      	ldr	r1, [sp, #4]
 80107ce:	fb03 6000 	mla	r0, r3, r0, r6
 80107d2:	f7fe fe3f 	bl	800f454 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80107d6:	6838      	ldr	r0, [r7, #0]
 80107d8:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 80107dc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 80107de:	4291      	cmp	r1, r2
 80107e0:	bf28      	it	cs
 80107e2:	f04f 0b01 	movcs.w	fp, #1
 80107e6:	e7c8      	b.n	801077a <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 80107e8:	4a0c      	ldr	r2, [pc, #48]	@ (801081c <xTaskIncrementTick+0x128>)
BaseType_t xSwitchRequired = pdFALSE;
 80107ea:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80107ee:	6813      	ldr	r3, [r2, #0]
 80107f0:	3301      	adds	r3, #1
 80107f2:	6013      	str	r3, [r2, #0]
 80107f4:	e7b4      	b.n	8010760 <xTaskIncrementTick+0x6c>
 80107f6:	bf00      	nop
 80107f8:	20026364 	.word	0x20026364
 80107fc:	20026384 	.word	0x20026384
 8010800:	200263d0 	.word	0x200263d0
 8010804:	200263cc 	.word	0x200263cc
 8010808:	20026370 	.word	0x20026370
 801080c:	20026368 	.word	0x20026368
 8010810:	200263fc 	.word	0x200263fc
 8010814:	2002685c 	.word	0x2002685c
 8010818:	20026374 	.word	0x20026374
 801081c:	20026378 	.word	0x20026378
 8010820:	20026380 	.word	0x20026380

08010824 <xTaskResumeAll>:
{
 8010824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8010828:	4c31      	ldr	r4, [pc, #196]	@ (80108f0 <xTaskResumeAll+0xcc>)
 801082a:	6823      	ldr	r3, [r4, #0]
 801082c:	b953      	cbnz	r3, 8010844 <xTaskResumeAll+0x20>
 801082e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010832:	b672      	cpsid	i
 8010834:	f383 8811 	msr	BASEPRI, r3
 8010838:	f3bf 8f6f 	isb	sy
 801083c:	f3bf 8f4f 	dsb	sy
 8010840:	b662      	cpsie	i
 8010842:	e7fe      	b.n	8010842 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8010844:	f7fe fe9e 	bl	800f584 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8010848:	6823      	ldr	r3, [r4, #0]
 801084a:	3b01      	subs	r3, #1
 801084c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801084e:	6824      	ldr	r4, [r4, #0]
 8010850:	b12c      	cbz	r4, 801085e <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8010852:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010854:	f7fe feba 	bl	800f5cc <vPortExitCritical>
}
 8010858:	4620      	mov	r0, r4
 801085a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801085e:	4b25      	ldr	r3, [pc, #148]	@ (80108f4 <xTaskResumeAll+0xd0>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d0f5      	beq.n	8010852 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010866:	4d24      	ldr	r5, [pc, #144]	@ (80108f8 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8010868:	4e24      	ldr	r6, [pc, #144]	@ (80108fc <xTaskResumeAll+0xd8>)
 801086a:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 801090c <xTaskResumeAll+0xe8>
 801086e:	e01d      	b.n	80108ac <xTaskResumeAll+0x88>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010870:	68eb      	ldr	r3, [r5, #12]
 8010872:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010874:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010876:	f104 0018 	add.w	r0, r4, #24
 801087a:	f7fe fe0d 	bl	800f498 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801087e:	4638      	mov	r0, r7
 8010880:	f7fe fe0a 	bl	800f498 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010884:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010886:	6832      	ldr	r2, [r6, #0]
 8010888:	4293      	cmp	r3, r2
 801088a:	d900      	bls.n	801088e <xTaskResumeAll+0x6a>
 801088c:	6033      	str	r3, [r6, #0]
 801088e:	2014      	movs	r0, #20
 8010890:	4639      	mov	r1, r7
 8010892:	fb00 8003 	mla	r0, r0, r3, r8
 8010896:	f7fe fddd 	bl	800f454 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801089a:	4b19      	ldr	r3, [pc, #100]	@ (8010900 <xTaskResumeAll+0xdc>)
 801089c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108a2:	429a      	cmp	r2, r3
 80108a4:	d302      	bcc.n	80108ac <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 80108a6:	4b17      	ldr	r3, [pc, #92]	@ (8010904 <xTaskResumeAll+0xe0>)
 80108a8:	2201      	movs	r2, #1
 80108aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80108ac:	682b      	ldr	r3, [r5, #0]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d1de      	bne.n	8010870 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
 80108b2:	b10c      	cbz	r4, 80108b8 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 80108b4:	f7ff fdf4 	bl	80104a0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80108b8:	4d13      	ldr	r5, [pc, #76]	@ (8010908 <xTaskResumeAll+0xe4>)
 80108ba:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80108bc:	b144      	cbz	r4, 80108d0 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 80108be:	4e11      	ldr	r6, [pc, #68]	@ (8010904 <xTaskResumeAll+0xe0>)
 80108c0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80108c2:	f7ff ff17 	bl	80106f4 <xTaskIncrementTick>
 80108c6:	b100      	cbz	r0, 80108ca <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 80108c8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80108ca:	3c01      	subs	r4, #1
 80108cc:	d1f9      	bne.n	80108c2 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 80108ce:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80108d0:	4b0c      	ldr	r3, [pc, #48]	@ (8010904 <xTaskResumeAll+0xe0>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d0bc      	beq.n	8010852 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 80108d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80108dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80108e4:	f3bf 8f4f 	dsb	sy
 80108e8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80108ec:	2401      	movs	r4, #1
 80108ee:	e7b1      	b.n	8010854 <xTaskResumeAll+0x30>
 80108f0:	20026364 	.word	0x20026364
 80108f4:	20026388 	.word	0x20026388
 80108f8:	200263b8 	.word	0x200263b8
 80108fc:	20026380 	.word	0x20026380
 8010900:	2002685c 	.word	0x2002685c
 8010904:	20026374 	.word	0x20026374
 8010908:	20026378 	.word	0x20026378
 801090c:	200263fc 	.word	0x200263fc

08010910 <vTaskDelay>:
	{
 8010910:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010912:	b950      	cbnz	r0, 801092a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8010914:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801091c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010920:	f3bf 8f4f 	dsb	sy
 8010924:	f3bf 8f6f 	isb	sy
	}
 8010928:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 801092a:	4b0b      	ldr	r3, [pc, #44]	@ (8010958 <vTaskDelay+0x48>)
 801092c:	6819      	ldr	r1, [r3, #0]
 801092e:	b151      	cbz	r1, 8010946 <vTaskDelay+0x36>
 8010930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010934:	b672      	cpsid	i
 8010936:	f383 8811 	msr	BASEPRI, r3
 801093a:	f3bf 8f6f 	isb	sy
 801093e:	f3bf 8f4f 	dsb	sy
 8010942:	b662      	cpsie	i
 8010944:	e7fe      	b.n	8010944 <vTaskDelay+0x34>
			vTaskSuspendAll();
 8010946:	f7ff fec7 	bl	80106d8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801094a:	f7ff fd71 	bl	8010430 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 801094e:	f7ff ff69 	bl	8010824 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8010952:	2800      	cmp	r0, #0
 8010954:	d0de      	beq.n	8010914 <vTaskDelay+0x4>
 8010956:	e7e7      	b.n	8010928 <vTaskDelay+0x18>
 8010958:	20026364 	.word	0x20026364

0801095c <vTaskSetApplicationTaskTag>:
	{
 801095c:	b538      	push	{r3, r4, r5, lr}
 801095e:	460d      	mov	r5, r1
		if( xTask == NULL )
 8010960:	4604      	mov	r4, r0
 8010962:	b908      	cbnz	r0, 8010968 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8010964:	4b04      	ldr	r3, [pc, #16]	@ (8010978 <vTaskSetApplicationTaskTag+0x1c>)
 8010966:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8010968:	f7fe fe0c 	bl	800f584 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 801096c:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 801096e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 8010972:	f7fe be2b 	b.w	800f5cc <vPortExitCritical>
 8010976:	bf00      	nop
 8010978:	2002685c 	.word	0x2002685c

0801097c <xTaskCallApplicationTaskHook>:
	{
 801097c:	4603      	mov	r3, r0
 801097e:	4608      	mov	r0, r1
		if( xTask == NULL )
 8010980:	b90b      	cbnz	r3, 8010986 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 8010982:	4b03      	ldr	r3, [pc, #12]	@ (8010990 <xTaskCallApplicationTaskHook+0x14>)
 8010984:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8010986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010988:	b103      	cbz	r3, 801098c <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 801098a:	4718      	bx	r3
	}
 801098c:	4618      	mov	r0, r3
 801098e:	4770      	bx	lr
 8010990:	2002685c 	.word	0x2002685c

08010994 <vTaskStartScheduler>:
{
 8010994:	b510      	push	{r4, lr}
 8010996:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010998:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801099a:	aa07      	add	r2, sp, #28
 801099c:	a906      	add	r1, sp, #24
 801099e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80109a0:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80109a4:	f7fe fc38 	bl	800f218 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80109a8:	9b05      	ldr	r3, [sp, #20]
 80109aa:	9a07      	ldr	r2, [sp, #28]
 80109ac:	9302      	str	r3, [sp, #8]
 80109ae:	9b06      	ldr	r3, [sp, #24]
 80109b0:	491b      	ldr	r1, [pc, #108]	@ (8010a20 <vTaskStartScheduler+0x8c>)
 80109b2:	481c      	ldr	r0, [pc, #112]	@ (8010a24 <vTaskStartScheduler+0x90>)
 80109b4:	e9cd 4300 	strd	r4, r3, [sp]
 80109b8:	4623      	mov	r3, r4
 80109ba:	f7ff fe20 	bl	80105fe <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80109be:	b360      	cbz	r0, 8010a1a <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 80109c0:	f000 fa9c 	bl	8010efc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80109c4:	2801      	cmp	r0, #1
 80109c6:	d11b      	bne.n	8010a00 <vTaskStartScheduler+0x6c>
 80109c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109cc:	b672      	cpsid	i
 80109ce:	f383 8811 	msr	BASEPRI, r3
 80109d2:	f3bf 8f6f 	isb	sy
 80109d6:	f3bf 8f4f 	dsb	sy
 80109da:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80109dc:	f04f 32ff 	mov.w	r2, #4294967295
 80109e0:	4b11      	ldr	r3, [pc, #68]	@ (8010a28 <vTaskStartScheduler+0x94>)
		traceTASK_SWITCHED_IN();
 80109e2:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 80109e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80109e6:	4b11      	ldr	r3, [pc, #68]	@ (8010a2c <vTaskStartScheduler+0x98>)
 80109e8:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80109ea:	4b11      	ldr	r3, [pc, #68]	@ (8010a30 <vTaskStartScheduler+0x9c>)
 80109ec:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 80109ee:	4b11      	ldr	r3, [pc, #68]	@ (8010a34 <vTaskStartScheduler+0xa0>)
 80109f0:	6818      	ldr	r0, [r3, #0]
 80109f2:	f7ff ffc3 	bl	801097c <xTaskCallApplicationTaskHook>
}
 80109f6:	b008      	add	sp, #32
 80109f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80109fc:	f7fe be5c 	b.w	800f6b8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010a00:	3001      	adds	r0, #1
 8010a02:	d10a      	bne.n	8010a1a <vTaskStartScheduler+0x86>
 8010a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a08:	b672      	cpsid	i
 8010a0a:	f383 8811 	msr	BASEPRI, r3
 8010a0e:	f3bf 8f6f 	isb	sy
 8010a12:	f3bf 8f4f 	dsb	sy
 8010a16:	b662      	cpsie	i
 8010a18:	e7fe      	b.n	8010a18 <vTaskStartScheduler+0x84>
}
 8010a1a:	b008      	add	sp, #32
 8010a1c:	bd10      	pop	{r4, pc}
 8010a1e:	bf00      	nop
 8010a20:	0802e3bb 	.word	0x0802e3bb
 8010a24:	08010501 	.word	0x08010501
 8010a28:	20026368 	.word	0x20026368
 8010a2c:	2002637c 	.word	0x2002637c
 8010a30:	20026384 	.word	0x20026384
 8010a34:	2002685c 	.word	0x2002685c

08010a38 <vTaskSwitchContext>:
{
 8010a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8010ab0 <vTaskSwitchContext+0x78>)
 8010a3c:	681a      	ldr	r2, [r3, #0]
 8010a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8010ab4 <vTaskSwitchContext+0x7c>)
 8010a40:	b112      	cbz	r2, 8010a48 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8010a42:	2201      	movs	r2, #1
 8010a44:	601a      	str	r2, [r3, #0]
}
 8010a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 8010a48:	4c1b      	ldr	r4, [pc, #108]	@ (8010ab8 <vTaskSwitchContext+0x80>)
 8010a4a:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a4c:	4e1b      	ldr	r6, [pc, #108]	@ (8010abc <vTaskSwitchContext+0x84>)
 8010a4e:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 8010a50:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8010a52:	6820      	ldr	r0, [r4, #0]
 8010a54:	f7ff ff92 	bl	801097c <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a58:	6832      	ldr	r2, [r6, #0]
 8010a5a:	4919      	ldr	r1, [pc, #100]	@ (8010ac0 <vTaskSwitchContext+0x88>)
 8010a5c:	fb07 f302 	mul.w	r3, r7, r2
 8010a60:	58cd      	ldr	r5, [r1, r3]
 8010a62:	18c8      	adds	r0, r1, r3
 8010a64:	b1ad      	cbz	r5, 8010a92 <vTaskSwitchContext+0x5a>
 8010a66:	6845      	ldr	r5, [r0, #4]
 8010a68:	3308      	adds	r3, #8
 8010a6a:	686d      	ldr	r5, [r5, #4]
 8010a6c:	440b      	add	r3, r1
 8010a6e:	429d      	cmp	r5, r3
 8010a70:	6045      	str	r5, [r0, #4]
 8010a72:	bf04      	itt	eq
 8010a74:	686b      	ldreq	r3, [r5, #4]
 8010a76:	6043      	streq	r3, [r0, #4]
 8010a78:	2314      	movs	r3, #20
 8010a7a:	fb03 1102 	mla	r1, r3, r2, r1
 8010a7e:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 8010a80:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	6023      	str	r3, [r4, #0]
 8010a86:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 8010a88:	6820      	ldr	r0, [r4, #0]
}
 8010a8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 8010a8e:	f7ff bf75 	b.w	801097c <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a92:	b952      	cbnz	r2, 8010aaa <vTaskSwitchContext+0x72>
 8010a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a98:	b672      	cpsid	i
 8010a9a:	f383 8811 	msr	BASEPRI, r3
 8010a9e:	f3bf 8f6f 	isb	sy
 8010aa2:	f3bf 8f4f 	dsb	sy
 8010aa6:	b662      	cpsie	i
 8010aa8:	e7fe      	b.n	8010aa8 <vTaskSwitchContext+0x70>
 8010aaa:	3a01      	subs	r2, #1
 8010aac:	e7d6      	b.n	8010a5c <vTaskSwitchContext+0x24>
 8010aae:	bf00      	nop
 8010ab0:	20026364 	.word	0x20026364
 8010ab4:	20026374 	.word	0x20026374
 8010ab8:	2002685c 	.word	0x2002685c
 8010abc:	20026380 	.word	0x20026380
 8010ac0:	200263fc 	.word	0x200263fc

08010ac4 <vTaskPlaceOnEventList>:
{
 8010ac4:	b510      	push	{r4, lr}
 8010ac6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8010ac8:	b950      	cbnz	r0, 8010ae0 <vTaskPlaceOnEventList+0x1c>
 8010aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ace:	b672      	cpsid	i
 8010ad0:	f383 8811 	msr	BASEPRI, r3
 8010ad4:	f3bf 8f6f 	isb	sy
 8010ad8:	f3bf 8f4f 	dsb	sy
 8010adc:	b662      	cpsie	i
 8010ade:	e7fe      	b.n	8010ade <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010ae0:	4b05      	ldr	r3, [pc, #20]	@ (8010af8 <vTaskPlaceOnEventList+0x34>)
 8010ae2:	6819      	ldr	r1, [r3, #0]
 8010ae4:	3118      	adds	r1, #24
 8010ae6:	f7fe fcc0 	bl	800f46a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010aea:	4620      	mov	r0, r4
 8010aec:	2101      	movs	r1, #1
}
 8010aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010af2:	f7ff bc9d 	b.w	8010430 <prvAddCurrentTaskToDelayedList>
 8010af6:	bf00      	nop
 8010af8:	2002685c 	.word	0x2002685c

08010afc <vTaskPlaceOnEventListRestricted>:
	{
 8010afc:	b538      	push	{r3, r4, r5, lr}
 8010afe:	460d      	mov	r5, r1
 8010b00:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8010b02:	b950      	cbnz	r0, 8010b1a <vTaskPlaceOnEventListRestricted+0x1e>
 8010b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b08:	b672      	cpsid	i
 8010b0a:	f383 8811 	msr	BASEPRI, r3
 8010b0e:	f3bf 8f6f 	isb	sy
 8010b12:	f3bf 8f4f 	dsb	sy
 8010b16:	b662      	cpsie	i
 8010b18:	e7fe      	b.n	8010b18 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010b1a:	4b07      	ldr	r3, [pc, #28]	@ (8010b38 <vTaskPlaceOnEventListRestricted+0x3c>)
 8010b1c:	6819      	ldr	r1, [r3, #0]
 8010b1e:	3118      	adds	r1, #24
 8010b20:	f7fe fc98 	bl	800f454 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8010b24:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010b26:	4621      	mov	r1, r4
 8010b28:	bf0c      	ite	eq
 8010b2a:	4628      	moveq	r0, r5
 8010b2c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8010b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010b34:	f7ff bc7c 	b.w	8010430 <prvAddCurrentTaskToDelayedList>
 8010b38:	2002685c 	.word	0x2002685c

08010b3c <xTaskRemoveFromEventList>:
{
 8010b3c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b3e:	68c3      	ldr	r3, [r0, #12]
 8010b40:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8010b42:	b954      	cbnz	r4, 8010b5a <xTaskRemoveFromEventList+0x1e>
 8010b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b48:	b672      	cpsid	i
 8010b4a:	f383 8811 	msr	BASEPRI, r3
 8010b4e:	f3bf 8f6f 	isb	sy
 8010b52:	f3bf 8f4f 	dsb	sy
 8010b56:	b662      	cpsie	i
 8010b58:	e7fe      	b.n	8010b58 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010b5a:	f104 0518 	add.w	r5, r4, #24
 8010b5e:	4628      	mov	r0, r5
 8010b60:	f7fe fc9a 	bl	800f498 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b64:	4b11      	ldr	r3, [pc, #68]	@ (8010bac <xTaskRemoveFromEventList+0x70>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	b9d3      	cbnz	r3, 8010ba0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010b6a:	1d25      	adds	r5, r4, #4
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	f7fe fc93 	bl	800f498 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010b72:	4a0f      	ldr	r2, [pc, #60]	@ (8010bb0 <xTaskRemoveFromEventList+0x74>)
 8010b74:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010b76:	6811      	ldr	r1, [r2, #0]
 8010b78:	428b      	cmp	r3, r1
 8010b7a:	d900      	bls.n	8010b7e <xTaskRemoveFromEventList+0x42>
 8010b7c:	6013      	str	r3, [r2, #0]
 8010b7e:	2014      	movs	r0, #20
 8010b80:	4a0c      	ldr	r2, [pc, #48]	@ (8010bb4 <xTaskRemoveFromEventList+0x78>)
 8010b82:	4629      	mov	r1, r5
 8010b84:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010b88:	f7fe fc64 	bl	800f454 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8010bb8 <xTaskRemoveFromEventList+0x7c>)
 8010b8e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d906      	bls.n	8010ba6 <xTaskRemoveFromEventList+0x6a>
		xYieldPending = pdTRUE;
 8010b98:	2001      	movs	r0, #1
 8010b9a:	4b08      	ldr	r3, [pc, #32]	@ (8010bbc <xTaskRemoveFromEventList+0x80>)
 8010b9c:	6018      	str	r0, [r3, #0]
}
 8010b9e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010ba0:	4629      	mov	r1, r5
 8010ba2:	4807      	ldr	r0, [pc, #28]	@ (8010bc0 <xTaskRemoveFromEventList+0x84>)
 8010ba4:	e7f0      	b.n	8010b88 <xTaskRemoveFromEventList+0x4c>
		xReturn = pdFALSE;
 8010ba6:	2000      	movs	r0, #0
	return xReturn;
 8010ba8:	e7f9      	b.n	8010b9e <xTaskRemoveFromEventList+0x62>
 8010baa:	bf00      	nop
 8010bac:	20026364 	.word	0x20026364
 8010bb0:	20026380 	.word	0x20026380
 8010bb4:	200263fc 	.word	0x200263fc
 8010bb8:	2002685c 	.word	0x2002685c
 8010bbc:	20026374 	.word	0x20026374
 8010bc0:	200263b8 	.word	0x200263b8

08010bc4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010bc4:	4b03      	ldr	r3, [pc, #12]	@ (8010bd4 <vTaskInternalSetTimeOutState+0x10>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010bca:	4b03      	ldr	r3, [pc, #12]	@ (8010bd8 <vTaskInternalSetTimeOutState+0x14>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	6043      	str	r3, [r0, #4]
}
 8010bd0:	4770      	bx	lr
 8010bd2:	bf00      	nop
 8010bd4:	20026370 	.word	0x20026370
 8010bd8:	20026384 	.word	0x20026384

08010bdc <xTaskCheckForTimeOut>:
{
 8010bdc:	b570      	push	{r4, r5, r6, lr}
 8010bde:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8010be0:	4605      	mov	r5, r0
 8010be2:	b950      	cbnz	r0, 8010bfa <xTaskCheckForTimeOut+0x1e>
 8010be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010be8:	b672      	cpsid	i
 8010bea:	f383 8811 	msr	BASEPRI, r3
 8010bee:	f3bf 8f6f 	isb	sy
 8010bf2:	f3bf 8f4f 	dsb	sy
 8010bf6:	b662      	cpsie	i
 8010bf8:	e7fe      	b.n	8010bf8 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8010bfa:	b951      	cbnz	r1, 8010c12 <xTaskCheckForTimeOut+0x36>
 8010bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c00:	b672      	cpsid	i
 8010c02:	f383 8811 	msr	BASEPRI, r3
 8010c06:	f3bf 8f6f 	isb	sy
 8010c0a:	f3bf 8f4f 	dsb	sy
 8010c0e:	b662      	cpsie	i
 8010c10:	e7fe      	b.n	8010c10 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8010c12:	f7fe fcb7 	bl	800f584 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8010c16:	4b0f      	ldr	r3, [pc, #60]	@ (8010c54 <xTaskCheckForTimeOut+0x78>)
 8010c18:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8010c1a:	6823      	ldr	r3, [r4, #0]
 8010c1c:	1c5a      	adds	r2, r3, #1
 8010c1e:	d010      	beq.n	8010c42 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010c20:	480d      	ldr	r0, [pc, #52]	@ (8010c58 <xTaskCheckForTimeOut+0x7c>)
 8010c22:	682e      	ldr	r6, [r5, #0]
 8010c24:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010c26:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010c28:	4286      	cmp	r6, r0
 8010c2a:	d001      	beq.n	8010c30 <xTaskCheckForTimeOut+0x54>
 8010c2c:	428a      	cmp	r2, r1
 8010c2e:	d90f      	bls.n	8010c50 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010c30:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010c32:	4283      	cmp	r3, r0
 8010c34:	d90a      	bls.n	8010c4c <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 8010c36:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010c38:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8010c3a:	4413      	add	r3, r2
 8010c3c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010c3e:	f7ff ffc1 	bl	8010bc4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8010c42:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010c44:	f7fe fcc2 	bl	800f5cc <vPortExitCritical>
}
 8010c48:	4620      	mov	r0, r4
 8010c4a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8010c50:	2401      	movs	r4, #1
 8010c52:	e7f7      	b.n	8010c44 <xTaskCheckForTimeOut+0x68>
 8010c54:	20026384 	.word	0x20026384
 8010c58:	20026370 	.word	0x20026370

08010c5c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8010c5c:	4b01      	ldr	r3, [pc, #4]	@ (8010c64 <vTaskMissedYield+0x8>)
 8010c5e:	2201      	movs	r2, #1
 8010c60:	601a      	str	r2, [r3, #0]
}
 8010c62:	4770      	bx	lr
 8010c64:	20026374 	.word	0x20026374

08010c68 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8010c68:	4b01      	ldr	r3, [pc, #4]	@ (8010c70 <xTaskGetCurrentTaskHandle+0x8>)
 8010c6a:	6818      	ldr	r0, [r3, #0]
	}
 8010c6c:	4770      	bx	lr
 8010c6e:	bf00      	nop
 8010c70:	2002685c 	.word	0x2002685c

08010c74 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8010c74:	4b05      	ldr	r3, [pc, #20]	@ (8010c8c <xTaskGetSchedulerState+0x18>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	b133      	cbz	r3, 8010c88 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c7a:	4b05      	ldr	r3, [pc, #20]	@ (8010c90 <xTaskGetSchedulerState+0x1c>)
 8010c7c:	6818      	ldr	r0, [r3, #0]
 8010c7e:	fab0 f080 	clz	r0, r0
 8010c82:	0940      	lsrs	r0, r0, #5
 8010c84:	0040      	lsls	r0, r0, #1
 8010c86:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010c88:	2001      	movs	r0, #1
	}
 8010c8a:	4770      	bx	lr
 8010c8c:	2002637c 	.word	0x2002637c
 8010c90:	20026364 	.word	0x20026364

08010c94 <xTaskPriorityInherit>:
	{
 8010c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8010c96:	4604      	mov	r4, r0
 8010c98:	b338      	cbz	r0, 8010cea <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010c9a:	4d1a      	ldr	r5, [pc, #104]	@ (8010d04 <xTaskPriorityInherit+0x70>)
 8010c9c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010c9e:	682a      	ldr	r2, [r5, #0]
 8010ca0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d226      	bcs.n	8010cf4 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010ca6:	6982      	ldr	r2, [r0, #24]
 8010ca8:	2a00      	cmp	r2, #0
 8010caa:	db04      	blt.n	8010cb6 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cac:	682a      	ldr	r2, [r5, #0]
 8010cae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010cb0:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8010cb4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010cb6:	2214      	movs	r2, #20
 8010cb8:	4e13      	ldr	r6, [pc, #76]	@ (8010d08 <xTaskPriorityInherit+0x74>)
 8010cba:	fb02 6303 	mla	r3, r2, r3, r6
 8010cbe:	6962      	ldr	r2, [r4, #20]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d113      	bne.n	8010cec <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010cc4:	1d27      	adds	r7, r4, #4
 8010cc6:	4638      	mov	r0, r7
 8010cc8:	f7fe fbe6 	bl	800f498 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010ccc:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010cce:	4a0f      	ldr	r2, [pc, #60]	@ (8010d0c <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010cd2:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010cd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010cd6:	428b      	cmp	r3, r1
 8010cd8:	d900      	bls.n	8010cdc <xTaskPriorityInherit+0x48>
 8010cda:	6013      	str	r3, [r2, #0]
 8010cdc:	2014      	movs	r0, #20
 8010cde:	4639      	mov	r1, r7
 8010ce0:	fb00 6003 	mla	r0, r0, r3, r6
 8010ce4:	f7fe fbb6 	bl	800f454 <vListInsertEnd>
				xReturn = pdTRUE;
 8010ce8:	2001      	movs	r0, #1
	}
 8010cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010cec:	682b      	ldr	r3, [r5, #0]
 8010cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cf0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010cf2:	e7f9      	b.n	8010ce8 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010cf4:	682b      	ldr	r3, [r5, #0]
 8010cf6:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8010cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cfa:	4298      	cmp	r0, r3
 8010cfc:	bf2c      	ite	cs
 8010cfe:	2000      	movcs	r0, #0
 8010d00:	2001      	movcc	r0, #1
 8010d02:	e7f2      	b.n	8010cea <xTaskPriorityInherit+0x56>
 8010d04:	2002685c 	.word	0x2002685c
 8010d08:	200263fc 	.word	0x200263fc
 8010d0c:	20026380 	.word	0x20026380

08010d10 <xTaskPriorityDisinherit>:
	{
 8010d10:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8010d12:	b908      	cbnz	r0, 8010d18 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8010d14:	2000      	movs	r0, #0
	}
 8010d16:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8010d18:	4b1d      	ldr	r3, [pc, #116]	@ (8010d90 <xTaskPriorityDisinherit+0x80>)
 8010d1a:	681c      	ldr	r4, [r3, #0]
 8010d1c:	4284      	cmp	r4, r0
 8010d1e:	d00a      	beq.n	8010d36 <xTaskPriorityDisinherit+0x26>
 8010d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d24:	b672      	cpsid	i
 8010d26:	f383 8811 	msr	BASEPRI, r3
 8010d2a:	f3bf 8f6f 	isb	sy
 8010d2e:	f3bf 8f4f 	dsb	sy
 8010d32:	b662      	cpsie	i
 8010d34:	e7fe      	b.n	8010d34 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8010d36:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8010d38:	b953      	cbnz	r3, 8010d50 <xTaskPriorityDisinherit+0x40>
 8010d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d3e:	b672      	cpsid	i
 8010d40:	f383 8811 	msr	BASEPRI, r3
 8010d44:	f3bf 8f6f 	isb	sy
 8010d48:	f3bf 8f4f 	dsb	sy
 8010d4c:	b662      	cpsie	i
 8010d4e:	e7fe      	b.n	8010d4e <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010d50:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 8010d52:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010d54:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8010d56:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010d58:	4291      	cmp	r1, r2
 8010d5a:	d0db      	beq.n	8010d14 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d1d9      	bne.n	8010d14 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d60:	1d25      	adds	r5, r4, #4
 8010d62:	4628      	mov	r0, r5
 8010d64:	f7fe fb98 	bl	800f498 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010d68:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d6a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010d6e:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d70:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8010d72:	4a08      	ldr	r2, [pc, #32]	@ (8010d94 <xTaskPriorityDisinherit+0x84>)
 8010d74:	6811      	ldr	r1, [r2, #0]
 8010d76:	428b      	cmp	r3, r1
 8010d78:	d900      	bls.n	8010d7c <xTaskPriorityDisinherit+0x6c>
 8010d7a:	6013      	str	r3, [r2, #0]
 8010d7c:	4a06      	ldr	r2, [pc, #24]	@ (8010d98 <xTaskPriorityDisinherit+0x88>)
 8010d7e:	2014      	movs	r0, #20
 8010d80:	4629      	mov	r1, r5
 8010d82:	fb00 2003 	mla	r0, r0, r3, r2
 8010d86:	f7fe fb65 	bl	800f454 <vListInsertEnd>
					xReturn = pdTRUE;
 8010d8a:	2001      	movs	r0, #1
		return xReturn;
 8010d8c:	e7c3      	b.n	8010d16 <xTaskPriorityDisinherit+0x6>
 8010d8e:	bf00      	nop
 8010d90:	2002685c 	.word	0x2002685c
 8010d94:	20026380 	.word	0x20026380
 8010d98:	200263fc 	.word	0x200263fc

08010d9c <vTaskPriorityDisinheritAfterTimeout>:
	{
 8010d9c:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8010d9e:	4604      	mov	r4, r0
 8010da0:	2800      	cmp	r0, #0
 8010da2:	d046      	beq.n	8010e32 <vTaskPriorityDisinheritAfterTimeout+0x96>
			configASSERT( pxTCB->uxMutexesHeld );
 8010da4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8010da6:	b952      	cbnz	r2, 8010dbe <vTaskPriorityDisinheritAfterTimeout+0x22>
 8010da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dac:	b672      	cpsid	i
 8010dae:	f383 8811 	msr	BASEPRI, r3
 8010db2:	f3bf 8f6f 	isb	sy
 8010db6:	f3bf 8f4f 	dsb	sy
 8010dba:	b662      	cpsie	i
 8010dbc:	e7fe      	b.n	8010dbc <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010dbe:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8010dc0:	4299      	cmp	r1, r3
 8010dc2:	bf38      	it	cc
 8010dc4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010dc6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010dc8:	428b      	cmp	r3, r1
 8010dca:	d032      	beq.n	8010e32 <vTaskPriorityDisinheritAfterTimeout+0x96>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010dcc:	2a01      	cmp	r2, #1
 8010dce:	d130      	bne.n	8010e32 <vTaskPriorityDisinheritAfterTimeout+0x96>
					configASSERT( pxTCB != pxCurrentTCB );
 8010dd0:	4a18      	ldr	r2, [pc, #96]	@ (8010e34 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8010dd2:	6812      	ldr	r2, [r2, #0]
 8010dd4:	4282      	cmp	r2, r0
 8010dd6:	d10a      	bne.n	8010dee <vTaskPriorityDisinheritAfterTimeout+0x52>
 8010dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ddc:	b672      	cpsid	i
 8010dde:	f383 8811 	msr	BASEPRI, r3
 8010de2:	f3bf 8f6f 	isb	sy
 8010de6:	f3bf 8f4f 	dsb	sy
 8010dea:	b662      	cpsie	i
 8010dec:	e7fe      	b.n	8010dec <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010dee:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010df0:	4d11      	ldr	r5, [pc, #68]	@ (8010e38 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010df2:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010df4:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8010df8:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010dfa:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dfe:	bfa8      	it	ge
 8010e00:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010e04:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e06:	bfa8      	it	ge
 8010e08:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d111      	bne.n	8010e32 <vTaskPriorityDisinheritAfterTimeout+0x96>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e0e:	1d06      	adds	r6, r0, #4
 8010e10:	4630      	mov	r0, r6
 8010e12:	f7fe fb41 	bl	800f498 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8010e16:	4a09      	ldr	r2, [pc, #36]	@ (8010e3c <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8010e18:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8010e1a:	6811      	ldr	r1, [r2, #0]
 8010e1c:	428b      	cmp	r3, r1
 8010e1e:	d900      	bls.n	8010e22 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8010e20:	6013      	str	r3, [r2, #0]
 8010e22:	2014      	movs	r0, #20
 8010e24:	4631      	mov	r1, r6
 8010e26:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8010e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8010e2e:	f7fe bb11 	b.w	800f454 <vListInsertEnd>
	}
 8010e32:	bd70      	pop	{r4, r5, r6, pc}
 8010e34:	2002685c 	.word	0x2002685c
 8010e38:	200263fc 	.word	0x200263fc
 8010e3c:	20026380 	.word	0x20026380

08010e40 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8010e40:	4b04      	ldr	r3, [pc, #16]	@ (8010e54 <pvTaskIncrementMutexHeldCount+0x14>)
 8010e42:	681a      	ldr	r2, [r3, #0]
 8010e44:	b11a      	cbz	r2, 8010e4e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8010e46:	6819      	ldr	r1, [r3, #0]
 8010e48:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8010e4a:	3201      	adds	r2, #1
 8010e4c:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8010e4e:	6818      	ldr	r0, [r3, #0]
	}
 8010e50:	4770      	bx	lr
 8010e52:	bf00      	nop
 8010e54:	2002685c 	.word	0x2002685c

08010e58 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8010e58:	4291      	cmp	r1, r2
{
 8010e5a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010e5c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010e5e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8010e60:	d80a      	bhi.n	8010e78 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e62:	1ad2      	subs	r2, r2, r3
 8010e64:	6983      	ldr	r3, [r0, #24]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d20d      	bcs.n	8010e86 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010e6a:	1d01      	adds	r1, r0, #4
 8010e6c:	4b07      	ldr	r3, [pc, #28]	@ (8010e8c <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010e6e:	6818      	ldr	r0, [r3, #0]
 8010e70:	f7fe fafb 	bl	800f46a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010e74:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8010e76:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d201      	bcs.n	8010e80 <prvInsertTimerInActiveList+0x28>
 8010e7c:	4299      	cmp	r1, r3
 8010e7e:	d202      	bcs.n	8010e86 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010e80:	1d01      	adds	r1, r0, #4
 8010e82:	4b03      	ldr	r3, [pc, #12]	@ (8010e90 <prvInsertTimerInActiveList+0x38>)
 8010e84:	e7f3      	b.n	8010e6e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8010e86:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8010e88:	e7f5      	b.n	8010e76 <prvInsertTimerInActiveList+0x1e>
 8010e8a:	bf00      	nop
 8010e8c:	2002695c 	.word	0x2002695c
 8010e90:	20026960 	.word	0x20026960

08010e94 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8010e96:	4c11      	ldr	r4, [pc, #68]	@ (8010edc <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8010e98:	f7fe fb74 	bl	800f584 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8010e9c:	6825      	ldr	r5, [r4, #0]
 8010e9e:	b9bd      	cbnz	r5, 8010ed0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8010ea0:	4f0f      	ldr	r7, [pc, #60]	@ (8010ee0 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8010ea2:	4e10      	ldr	r6, [pc, #64]	@ (8010ee4 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8010ea4:	4638      	mov	r0, r7
 8010ea6:	f7fe fac7 	bl	800f438 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010eaa:	4630      	mov	r0, r6
 8010eac:	f7fe fac4 	bl	800f438 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8010ee8 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8010eec <prvCheckForValidListAndQueue+0x58>)
 8010eb4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8010eb6:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010eb8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8010eba:	4b0d      	ldr	r3, [pc, #52]	@ (8010ef0 <prvCheckForValidListAndQueue+0x5c>)
 8010ebc:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8010ef4 <prvCheckForValidListAndQueue+0x60>)
 8010ec0:	9500      	str	r5, [sp, #0]
 8010ec2:	f7fe fda5 	bl	800fa10 <xQueueGenericCreateStatic>
 8010ec6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010ec8:	b110      	cbz	r0, 8010ed0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010eca:	490b      	ldr	r1, [pc, #44]	@ (8010ef8 <prvCheckForValidListAndQueue+0x64>)
 8010ecc:	f7ff f9ce 	bl	801026c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8010ed0:	b003      	add	sp, #12
 8010ed2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8010ed6:	f7fe bb79 	b.w	800f5cc <vPortExitCritical>
 8010eda:	bf00      	nop
 8010edc:	20026958 	.word	0x20026958
 8010ee0:	20026978 	.word	0x20026978
 8010ee4:	20026964 	.word	0x20026964
 8010ee8:	20026960 	.word	0x20026960
 8010eec:	200268b0 	.word	0x200268b0
 8010ef0:	2002695c 	.word	0x2002695c
 8010ef4:	20026860 	.word	0x20026860
 8010ef8:	0802e3c0 	.word	0x0802e3c0

08010efc <xTimerCreateTimerTask>:
{
 8010efc:	b510      	push	{r4, lr}
 8010efe:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8010f00:	f7ff ffc8 	bl	8010e94 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8010f04:	4b13      	ldr	r3, [pc, #76]	@ (8010f54 <xTimerCreateTimerTask+0x58>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	b1b3      	cbz	r3, 8010f38 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010f0a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010f0c:	aa07      	add	r2, sp, #28
 8010f0e:	a906      	add	r1, sp, #24
 8010f10:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010f12:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010f16:	f7fe f98b 	bl	800f230 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010f1a:	9b05      	ldr	r3, [sp, #20]
 8010f1c:	9a07      	ldr	r2, [sp, #28]
 8010f1e:	9302      	str	r3, [sp, #8]
 8010f20:	9b06      	ldr	r3, [sp, #24]
 8010f22:	490d      	ldr	r1, [pc, #52]	@ (8010f58 <xTimerCreateTimerTask+0x5c>)
 8010f24:	9301      	str	r3, [sp, #4]
 8010f26:	2302      	movs	r3, #2
 8010f28:	480c      	ldr	r0, [pc, #48]	@ (8010f5c <xTimerCreateTimerTask+0x60>)
 8010f2a:	9300      	str	r3, [sp, #0]
 8010f2c:	4623      	mov	r3, r4
 8010f2e:	f7ff fb66 	bl	80105fe <xTaskCreateStatic>
 8010f32:	4b0b      	ldr	r3, [pc, #44]	@ (8010f60 <xTimerCreateTimerTask+0x64>)
 8010f34:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8010f36:	b950      	cbnz	r0, 8010f4e <xTimerCreateTimerTask+0x52>
 8010f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f3c:	b672      	cpsid	i
 8010f3e:	f383 8811 	msr	BASEPRI, r3
 8010f42:	f3bf 8f6f 	isb	sy
 8010f46:	f3bf 8f4f 	dsb	sy
 8010f4a:	b662      	cpsie	i
	configASSERT( xReturn );
 8010f4c:	e7fe      	b.n	8010f4c <xTimerCreateTimerTask+0x50>
}
 8010f4e:	2001      	movs	r0, #1
 8010f50:	b008      	add	sp, #32
 8010f52:	bd10      	pop	{r4, pc}
 8010f54:	20026958 	.word	0x20026958
 8010f58:	0802e3c5 	.word	0x0802e3c5
 8010f5c:	08011065 	.word	0x08011065
 8010f60:	20026954 	.word	0x20026954

08010f64 <xTimerGenericCommand>:
{
 8010f64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010f66:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8010f68:	4604      	mov	r4, r0
{
 8010f6a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8010f6c:	b950      	cbnz	r0, 8010f84 <xTimerGenericCommand+0x20>
 8010f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f72:	b672      	cpsid	i
 8010f74:	f383 8811 	msr	BASEPRI, r3
 8010f78:	f3bf 8f6f 	isb	sy
 8010f7c:	f3bf 8f4f 	dsb	sy
 8010f80:	b662      	cpsie	i
 8010f82:	e7fe      	b.n	8010f82 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 8010f84:	4d0c      	ldr	r5, [pc, #48]	@ (8010fb8 <xTimerGenericCommand+0x54>)
 8010f86:	6828      	ldr	r0, [r5, #0]
 8010f88:	b178      	cbz	r0, 8010faa <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010f8a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010f8c:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010f8e:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010f92:	dc0c      	bgt.n	8010fae <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010f94:	f7ff fe6e 	bl	8010c74 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010f98:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010f9a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010f9c:	4669      	mov	r1, sp
 8010f9e:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010fa0:	bf0c      	ite	eq
 8010fa2:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010fa4:	461a      	movne	r2, r3
 8010fa6:	f7fe fdb8 	bl	800fb1a <xQueueGenericSend>
}
 8010faa:	b004      	add	sp, #16
 8010fac:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010fae:	2300      	movs	r3, #0
 8010fb0:	4669      	mov	r1, sp
 8010fb2:	f7fe febf 	bl	800fd34 <xQueueGenericSendFromISR>
 8010fb6:	e7f8      	b.n	8010faa <xTimerGenericCommand+0x46>
 8010fb8:	20026958 	.word	0x20026958

08010fbc <prvSampleTimeNow>:
{
 8010fbc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8010fc0:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8011060 <prvSampleTimeNow+0xa4>
{
 8010fc4:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8010fc6:	f7ff fb8f 	bl	80106e8 <xTaskGetTickCount>
 8010fca:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8010fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8010fd0:	4283      	cmp	r3, r0
 8010fd2:	d909      	bls.n	8010fe8 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010fd4:	4f20      	ldr	r7, [pc, #128]	@ (8011058 <prvSampleTimeNow+0x9c>)
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	681a      	ldr	r2, [r3, #0]
 8010fda:	b96a      	cbnz	r2, 8010ff8 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8010fdc:	4a1f      	ldr	r2, [pc, #124]	@ (801105c <prvSampleTimeNow+0xa0>)
 8010fde:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010fe0:	6013      	str	r3, [r2, #0]
 8010fe2:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8010fe4:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8010fe6:	e000      	b.n	8010fea <prvSampleTimeNow+0x2e>
 8010fe8:	2300      	movs	r3, #0
}
 8010fea:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8010fec:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8010fee:	f8c8 5000 	str.w	r5, [r8]
}
 8010ff2:	b002      	add	sp, #8
 8010ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ff8:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ffa:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ffc:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011000:	f104 0a04 	add.w	sl, r4, #4
 8011004:	4650      	mov	r0, sl
 8011006:	f7fe fa47 	bl	800f498 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801100a:	6a23      	ldr	r3, [r4, #32]
 801100c:	4620      	mov	r0, r4
 801100e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011010:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011014:	075b      	lsls	r3, r3, #29
 8011016:	d5de      	bpl.n	8010fd6 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011018:	69a3      	ldr	r3, [r4, #24]
 801101a:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 801101c:	4599      	cmp	r9, r3
 801101e:	d206      	bcs.n	801102e <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011020:	4651      	mov	r1, sl
 8011022:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011024:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011026:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011028:	f7fe fa1f 	bl	800f46a <vListInsert>
 801102c:	e7d3      	b.n	8010fd6 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801102e:	2300      	movs	r3, #0
 8011030:	464a      	mov	r2, r9
 8011032:	4620      	mov	r0, r4
 8011034:	4619      	mov	r1, r3
 8011036:	9300      	str	r3, [sp, #0]
 8011038:	f7ff ff94 	bl	8010f64 <xTimerGenericCommand>
				configASSERT( xResult );
 801103c:	2800      	cmp	r0, #0
 801103e:	d1ca      	bne.n	8010fd6 <prvSampleTimeNow+0x1a>
 8011040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011044:	b672      	cpsid	i
 8011046:	f383 8811 	msr	BASEPRI, r3
 801104a:	f3bf 8f6f 	isb	sy
 801104e:	f3bf 8f4f 	dsb	sy
 8011052:	b662      	cpsie	i
 8011054:	e7fe      	b.n	8011054 <prvSampleTimeNow+0x98>
 8011056:	bf00      	nop
 8011058:	20026960 	.word	0x20026960
 801105c:	2002695c 	.word	0x2002695c
 8011060:	20026950 	.word	0x20026950

08011064 <prvTimerTask>:
{
 8011064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011068:	4d71      	ldr	r5, [pc, #452]	@ (8011230 <prvTimerTask+0x1cc>)
{
 801106a:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801106c:	4e71      	ldr	r6, [pc, #452]	@ (8011234 <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801106e:	682b      	ldr	r3, [r5, #0]
 8011070:	f8d3 8000 	ldr.w	r8, [r3]
 8011074:	f1b8 0f00 	cmp.w	r8, #0
 8011078:	d037      	beq.n	80110ea <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801107a:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801107c:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801107e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8011082:	f7ff fb29 	bl	80106d8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011086:	a804      	add	r0, sp, #16
 8011088:	f7ff ff98 	bl	8010fbc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 801108c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801108e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8011090:	2b00      	cmp	r3, #0
 8011092:	d16b      	bne.n	801116c <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011094:	2c00      	cmp	r4, #0
 8011096:	d14e      	bne.n	8011136 <prvTimerTask+0xd2>
 8011098:	4540      	cmp	r0, r8
 801109a:	d352      	bcc.n	8011142 <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 801109c:	f7ff fbc2 	bl	8010824 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110a0:	682b      	ldr	r3, [r5, #0]
 80110a2:	68db      	ldr	r3, [r3, #12]
 80110a4:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80110a6:	1d38      	adds	r0, r7, #4
 80110a8:	f7fe f9f6 	bl	800f498 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80110ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80110b0:	0758      	lsls	r0, r3, #29
 80110b2:	d51c      	bpl.n	80110ee <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80110b4:	69b9      	ldr	r1, [r7, #24]
 80110b6:	4643      	mov	r3, r8
 80110b8:	464a      	mov	r2, r9
 80110ba:	4638      	mov	r0, r7
 80110bc:	4441      	add	r1, r8
 80110be:	f7ff fecb 	bl	8010e58 <prvInsertTimerInActiveList>
 80110c2:	b1c0      	cbz	r0, 80110f6 <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80110c4:	4623      	mov	r3, r4
 80110c6:	4642      	mov	r2, r8
 80110c8:	4621      	mov	r1, r4
 80110ca:	4638      	mov	r0, r7
 80110cc:	9400      	str	r4, [sp, #0]
 80110ce:	f7ff ff49 	bl	8010f64 <xTimerGenericCommand>
			configASSERT( xResult );
 80110d2:	b980      	cbnz	r0, 80110f6 <prvTimerTask+0x92>
 80110d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110d8:	b672      	cpsid	i
 80110da:	f383 8811 	msr	BASEPRI, r3
 80110de:	f3bf 8f6f 	isb	sy
 80110e2:	f3bf 8f4f 	dsb	sy
 80110e6:	b662      	cpsie	i
 80110e8:	e7fe      	b.n	80110e8 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80110ea:	2401      	movs	r4, #1
 80110ec:	e7c9      	b.n	8011082 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80110ee:	f023 0301 	bic.w	r3, r3, #1
 80110f2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80110f6:	6a3b      	ldr	r3, [r7, #32]
 80110f8:	4638      	mov	r0, r7
 80110fa:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80110fc:	2200      	movs	r2, #0
 80110fe:	a904      	add	r1, sp, #16
 8011100:	6830      	ldr	r0, [r6, #0]
 8011102:	f7fe fed4 	bl	800feae <xQueueReceive>
 8011106:	2800      	cmp	r0, #0
 8011108:	d0b1      	beq.n	801106e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801110a:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801110c:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801110e:	2b00      	cmp	r3, #0
 8011110:	db2f      	blt.n	8011172 <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011112:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011114:	6963      	ldr	r3, [r4, #20]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d132      	bne.n	8011180 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801111a:	a803      	add	r0, sp, #12
 801111c:	f7ff ff4e 	bl	8010fbc <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8011120:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011122:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8011124:	2b09      	cmp	r3, #9
 8011126:	d8e9      	bhi.n	80110fc <prvTimerTask+0x98>
 8011128:	e8df f003 	tbb	[pc, r3]
 801112c:	592e2e2e 	.word	0x592e2e2e
 8011130:	2e2e7a60 	.word	0x2e2e7a60
 8011134:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011136:	4b40      	ldr	r3, [pc, #256]	@ (8011238 <prvTimerTask+0x1d4>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	681c      	ldr	r4, [r3, #0]
 801113c:	fab4 f484 	clz	r4, r4
 8011140:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011142:	4622      	mov	r2, r4
 8011144:	eba8 0109 	sub.w	r1, r8, r9
 8011148:	6830      	ldr	r0, [r6, #0]
 801114a:	f7ff f8d0 	bl	80102ee <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801114e:	f7ff fb69 	bl	8010824 <xTaskResumeAll>
 8011152:	2800      	cmp	r0, #0
 8011154:	d1d2      	bne.n	80110fc <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 8011156:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801115a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801115e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011162:	f3bf 8f4f 	dsb	sy
 8011166:	f3bf 8f6f 	isb	sy
 801116a:	e7c7      	b.n	80110fc <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 801116c:	f7ff fb5a 	bl	8010824 <xTaskResumeAll>
}
 8011170:	e7c4      	b.n	80110fc <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011172:	9b05      	ldr	r3, [sp, #20]
 8011174:	9907      	ldr	r1, [sp, #28]
 8011176:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011178:	9b04      	ldr	r3, [sp, #16]
 801117a:	2b00      	cmp	r3, #0
 801117c:	dbbe      	blt.n	80110fc <prvTimerTask+0x98>
 801117e:	e7c8      	b.n	8011112 <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011180:	1d20      	adds	r0, r4, #4
 8011182:	f7fe f989 	bl	800f498 <uxListRemove>
 8011186:	e7c8      	b.n	801111a <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011188:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801118c:	4620      	mov	r0, r4
 801118e:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011190:	f043 0301 	orr.w	r3, r3, #1
 8011194:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011198:	9b05      	ldr	r3, [sp, #20]
 801119a:	4419      	add	r1, r3
 801119c:	f7ff fe5c 	bl	8010e58 <prvInsertTimerInActiveList>
 80111a0:	2800      	cmp	r0, #0
 80111a2:	d0ab      	beq.n	80110fc <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80111a4:	6a23      	ldr	r3, [r4, #32]
 80111a6:	4620      	mov	r0, r4
 80111a8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80111aa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80111ae:	0759      	lsls	r1, r3, #29
 80111b0:	d5a4      	bpl.n	80110fc <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80111b2:	69a2      	ldr	r2, [r4, #24]
 80111b4:	2300      	movs	r3, #0
 80111b6:	9905      	ldr	r1, [sp, #20]
 80111b8:	4620      	mov	r0, r4
 80111ba:	9300      	str	r3, [sp, #0]
 80111bc:	440a      	add	r2, r1
 80111be:	4619      	mov	r1, r3
 80111c0:	f7ff fed0 	bl	8010f64 <xTimerGenericCommand>
							configASSERT( xResult );
 80111c4:	2800      	cmp	r0, #0
 80111c6:	d199      	bne.n	80110fc <prvTimerTask+0x98>
 80111c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111cc:	b672      	cpsid	i
 80111ce:	f383 8811 	msr	BASEPRI, r3
 80111d2:	f3bf 8f6f 	isb	sy
 80111d6:	f3bf 8f4f 	dsb	sy
 80111da:	b662      	cpsie	i
 80111dc:	e7fe      	b.n	80111dc <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80111de:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80111e2:	f023 0301 	bic.w	r3, r3, #1
 80111e6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80111ea:	e787      	b.n	80110fc <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80111ec:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80111f0:	f043 0301 	orr.w	r3, r3, #1
 80111f4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80111f8:	9905      	ldr	r1, [sp, #20]
 80111fa:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80111fc:	b951      	cbnz	r1, 8011214 <prvTimerTask+0x1b0>
 80111fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011202:	b672      	cpsid	i
 8011204:	f383 8811 	msr	BASEPRI, r3
 8011208:	f3bf 8f6f 	isb	sy
 801120c:	f3bf 8f4f 	dsb	sy
 8011210:	b662      	cpsie	i
 8011212:	e7fe      	b.n	8011212 <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011214:	4603      	mov	r3, r0
 8011216:	4401      	add	r1, r0
 8011218:	4620      	mov	r0, r4
 801121a:	f7ff fe1d 	bl	8010e58 <prvInsertTimerInActiveList>
					break;
 801121e:	e76d      	b.n	80110fc <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011220:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011224:	079a      	lsls	r2, r3, #30
 8011226:	d4dc      	bmi.n	80111e2 <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 8011228:	4620      	mov	r0, r4
 801122a:	f7fe f8c9 	bl	800f3c0 <vPortFree>
 801122e:	e765      	b.n	80110fc <prvTimerTask+0x98>
 8011230:	20026960 	.word	0x20026960
 8011234:	20026958 	.word	0x20026958
 8011238:	2002695c 	.word	0x2002695c

0801123c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 801123c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011240:	b093      	sub	sp, #76	@ 0x4c
 8011242:	9209      	str	r2, [sp, #36]	@ 0x24
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8011244:	f44f 72c0 	mov.w	r2, #384	@ 0x180
  currentMCU = BlockIndex;
 8011248:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
{  
 801124c:	9111      	str	r1, [sp, #68]	@ 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 801124e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011252:	9308      	str	r3, [sp, #32]
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8011254:	4b72      	ldr	r3, [pc, #456]	@ (8011420 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e4>)
 8011256:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011258:	9206      	str	r2, [sp, #24]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801125a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801125c:	691b      	ldr	r3, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801125e:	9201      	str	r2, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8011260:	930c      	str	r3, [sp, #48]	@ 0x30
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 8011262:	0053      	lsls	r3, r2, #1
 8011264:	930d      	str	r3, [sp, #52]	@ 0x34
  while(currentMCU < (numberMCU + BlockIndex))
 8011266:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 801126a:	4413      	add	r3, r2
 801126c:	455b      	cmp	r3, fp
 801126e:	d803      	bhi.n	8011278 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3c>
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 8011270:	9808      	ldr	r0, [sp, #32]
 8011272:	b013      	add	sp, #76	@ 0x4c
 8011274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8011278:	ea4f 130b 	mov.w	r3, fp, lsl #4
 801127c:	9a06      	ldr	r2, [sp, #24]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 801127e:	9c06      	ldr	r4, [sp, #24]
    currentMCU++;
 8011280:	f10b 0b01 	add.w	fp, fp, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8011284:	9901      	ldr	r1, [sp, #4]
    pLum = pInBuffer;
 8011286:	4680      	mov	r8, r0
    for(i= 0; i <  16; i+=2)
 8011288:	f04f 0e00 	mov.w	lr, #0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 801128c:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8011290:	fb04 3312 	mls	r3, r4, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8011294:	4351      	muls	r1, r2
 8011296:	005b      	lsls	r3, r3, #1
 8011298:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801129c:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 801129e:	f500 7380 	add.w	r3, r0, #256	@ 0x100
 80112a2:	9302      	str	r3, [sp, #8]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80112a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80112a6:	9a00      	ldr	r2, [sp, #0]
 80112a8:	4293      	cmp	r3, r2
 80112aa:	f240 80b0 	bls.w	801140e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d2>
        pOutAddr = pOutBuffer + refline;
 80112ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80112b0:	f04f 0900 	mov.w	r9, #0
 80112b4:	f8cd 800c 	str.w	r8, [sp, #12]
        pOutAddr = pOutBuffer + refline;
 80112b8:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80112ba:	9a01      	ldr	r2, [sp, #4]
        pOutAddr = pOutBuffer + refline;
 80112bc:	9307      	str	r3, [sp, #28]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80112be:	4413      	add	r3, r2
 80112c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80112c2:	9b02      	ldr	r3, [sp, #8]
 80112c4:	9304      	str	r3, [sp, #16]
          for(j=0; j < 8; j+=2)
 80112c6:	9b04      	ldr	r3, [sp, #16]
    for(i= 0; i <  16; i+=2)
 80112c8:	2400      	movs	r4, #0
 80112ca:	9f03      	ldr	r7, [sp, #12]
 80112cc:	3b01      	subs	r3, #1
 80112ce:	9305      	str	r3, [sp, #20]
 80112d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112d2:	444b      	add	r3, r9
 80112d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80112d6:	9b07      	ldr	r3, [sp, #28]
 80112d8:	444b      	add	r3, r9
 80112da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80112dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
          for(j=0; j < 8; j+=2)
 80112de:	3702      	adds	r7, #2
            ycomp = (int32_t)(*(pLum +j));
 80112e0:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 80112e4:	4423      	add	r3, r4
 80112e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80112e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80112ea:	4423      	add	r3, r4
 80112ec:	9310      	str	r3, [sp, #64]	@ 0x40
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80112ee:	9b05      	ldr	r3, [sp, #20]
 80112f0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80112f4:	9305      	str	r3, [sp, #20]
 80112f6:	4b4b      	ldr	r3, [pc, #300]	@ (8011424 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e8>)
 80112f8:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 80112fc:	9b05      	ldr	r3, [sp, #20]
 80112fe:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8011302:	4b49      	ldr	r3, [pc, #292]	@ (8011428 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ec>)
 8011304:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8011308:	4b48      	ldr	r3, [pc, #288]	@ (801142c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f0>)
 801130a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801130e:	4b48      	ldr	r3, [pc, #288]	@ (8011430 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>)
 8011310:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8011314:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011316:	4947      	ldr	r1, [pc, #284]	@ (8011434 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f8>)
 8011318:	460b      	mov	r3, r1
 801131a:	440e      	add	r6, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801131c:	eb03 4222 	add.w	r2, r3, r2, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011320:	eb06 010c 	add.w	r1, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8011324:	441d      	add	r5, r3
            *(__IO uint16_t *)pOutAddr = 
 8011326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011328:	f891 a100 	ldrb.w	sl, [r1, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801132c:	eb02 010c 	add.w	r1, r2, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8011330:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011332:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011336:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801133a:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
 801133e:	0889      	lsrs	r1, r1, #2
 8011340:	0149      	lsls	r1, r1, #5
 8011342:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 8011346:	ea41 01dc 	orr.w	r1, r1, ip, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 801134a:	5319      	strh	r1, [r3, r4]
            ycomp = (int32_t)(*(pLum +j +1));
 801134c:	f817 cc01 	ldrb.w	ip, [r7, #-1]
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 8011350:	9b10      	ldr	r3, [sp, #64]	@ 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011352:	eb06 010c 	add.w	r1, r6, ip
 8011356:	f891 a100 	ldrb.w	sl, [r1, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801135a:	eb02 010c 	add.w	r1, r2, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 801135e:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011360:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011364:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011368:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
 801136c:	0889      	lsrs	r1, r1, #2
 801136e:	0149      	lsls	r1, r1, #5
 8011370:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 8011374:	ea41 01dc 	orr.w	r1, r1, ip, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 8011378:	8059      	strh	r1, [r3, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 801137a:	f897 c006 	ldrb.w	ip, [r7, #6]
            *(__IO uint16_t *)pOutAddr2 = 
 801137e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011380:	eb06 010c 	add.w	r1, r6, ip
 8011384:	f891 a100 	ldrb.w	sl, [r1, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011388:	eb02 010c 	add.w	r1, r2, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 801138c:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801138e:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011392:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011396:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
 801139a:	0889      	lsrs	r1, r1, #2
 801139c:	0149      	lsls	r1, r1, #5
 801139e:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 80113a2:	ea41 01dc 	orr.w	r1, r1, ip, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
 80113a6:	5319      	strh	r1, [r3, r4]
          for(j=0; j < 8; j+=2)
 80113a8:	3404      	adds	r4, #4
            ycomp = (int32_t)(*(pLum +j +8 +1));
 80113aa:	79f9      	ldrb	r1, [r7, #7]
          for(j=0; j < 8; j+=2)
 80113ac:	2c10      	cmp	r4, #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80113ae:	440e      	add	r6, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80113b0:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 80113b2:	440d      	add	r5, r1
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80113b4:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80113b8:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80113bc:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80113c0:	f895 1100 	ldrb.w	r1, [r5, #256]	@ 0x100
 80113c4:	ea4f 0292 	mov.w	r2, r2, lsr #2
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 80113c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80113ca:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80113ce:	ea42 22c6 	orr.w	r2, r2, r6, lsl #11
 80113d2:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 80113d6:	805a      	strh	r2, [r3, #2]
          for(j=0; j < 8; j+=2)
 80113d8:	d180      	bne.n	80112dc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa0>
            pChrom++;
 80113da:	9b04      	ldr	r3, [sp, #16]
 80113dc:	3304      	adds	r3, #4
 80113de:	9304      	str	r3, [sp, #16]
          pLum += 64;                      
 80113e0:	9b03      	ldr	r3, [sp, #12]
 80113e2:	3340      	adds	r3, #64	@ 0x40
 80113e4:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
 80113e6:	f1b9 0f00 	cmp.w	r9, #0
 80113ea:	d107      	bne.n	80113fc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1c0>
 80113ec:	46a1      	mov	r9, r4
 80113ee:	e76a      	b.n	80112c6 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x8a>
      if(i == 8)
 80113f0:	f1be 0f08 	cmp.w	lr, #8
        pLum = pInBuffer + 128;
 80113f4:	bf08      	it	eq
 80113f6:	f100 0880 	addeq.w	r8, r0, #128	@ 0x80
 80113fa:	e753      	b.n	80112a4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x68>
            pChrom++;
 80113fc:	9b02      	ldr	r3, [sp, #8]
        pLum = pLum - 128 + 16;
 80113fe:	f108 0810 	add.w	r8, r8, #16
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 8011402:	9a00      	ldr	r2, [sp, #0]
            pChrom++;
 8011404:	3308      	adds	r3, #8
 8011406:	9302      	str	r3, [sp, #8]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 8011408:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801140a:	441a      	add	r2, r3
 801140c:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  16; i+=2)
 801140e:	f10e 0e02 	add.w	lr, lr, #2
 8011412:	f1be 0f10 	cmp.w	lr, #16
 8011416:	d1eb      	bne.n	80113f0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1b4>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8011418:	f500 70c0 	add.w	r0, r0, #384	@ 0x180
 801141c:	e723      	b.n	8011266 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a>
 801141e:	bf00      	nop
 8011420:	2002798c 	.word	0x2002798c
 8011424:	2002718c 	.word	0x2002718c
 8011428:	2002758c 	.word	0x2002758c
 801142c:	20026d8c 	.word	0x20026d8c
 8011430:	2002698c 	.word	0x2002698c
 8011434:	0802e3cd 	.word	0x0802e3cd

08011438 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8011438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 801143c:	0a1b      	lsrs	r3, r3, #8
{  
 801143e:	b08d      	sub	sp, #52	@ 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8011440:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8011442:	4b4f      	ldr	r3, [pc, #316]	@ (8011580 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{  
 8011444:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8011446:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
  currentMCU = BlockIndex;
 8011448:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 801144c:	9202      	str	r2, [sp, #8]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801144e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8011450:	691b      	ldr	r3, [r3, #16]
{  
 8011452:	910a      	str	r1, [sp, #40]	@ 0x28
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8011454:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8011456:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 8011458:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801145c:	4413      	add	r3, r2
 801145e:	4573      	cmp	r3, lr
 8011460:	d803      	bhi.n	801146a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 8011462:	9805      	ldr	r0, [sp, #20]
 8011464:	b00d      	add	sp, #52	@ 0x34
 8011466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 801146a:	ea4f 130e 	mov.w	r3, lr, lsl #4
 801146e:	9a02      	ldr	r2, [sp, #8]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8011470:	9c02      	ldr	r4, [sp, #8]
    currentMCU++;
 8011472:	f10e 0e01 	add.w	lr, lr, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8011476:	9903      	ldr	r1, [sp, #12]
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8011478:	f100 0780 	add.w	r7, r0, #128	@ 0x80
    pLum = pInBuffer;
 801147c:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 801147e:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8011482:	fb04 3312 	mls	r3, r4, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8011486:	4351      	muls	r1, r2
 8011488:	005b      	lsls	r3, r3, #1
 801148a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801148e:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 8011490:	2308      	movs	r3, #8
 8011492:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8011494:	9b07      	ldr	r3, [sp, #28]
 8011496:	9a00      	ldr	r2, [sp, #0]
 8011498:	4293      	cmp	r3, r2
 801149a:	d969      	bls.n	8011570 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x138>
        pOutAddr = pOutBuffer + refline;
 801149c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801149e:	46d0      	mov	r8, sl
 80114a0:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 80114a4:	f107 0308 	add.w	r3, r7, #8
 80114a8:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 80114aa:	1e7b      	subs	r3, r7, #1
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 80114ac:	2400      	movs	r4, #0
 80114ae:	9301      	str	r3, [sp, #4]
            ycomp = (int32_t)(*(pLum +j +1));
 80114b0:	f108 0301 	add.w	r3, r8, #1
 80114b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80114b6:	eb09 0384 	add.w	r3, r9, r4, lsl #2
            ycomp = (int32_t)(*(pLum +j));
 80114ba:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 80114be:	9309      	str	r3, [sp, #36]	@ 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80114c0:	9b01      	ldr	r3, [sp, #4]
 80114c2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80114c6:	9301      	str	r3, [sp, #4]
 80114c8:	4b2e      	ldr	r3, [pc, #184]	@ (8011584 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 80114ca:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 80114ce:	9b01      	ldr	r3, [sp, #4]
 80114d0:	f893 1040 	ldrb.w	r1, [r3, #64]	@ 0x40
 80114d4:	4b2c      	ldr	r3, [pc, #176]	@ (8011588 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 80114d6:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 80114da:	4b2c      	ldr	r3, [pc, #176]	@ (801158c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 80114dc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80114e0:	4b2b      	ldr	r3, [pc, #172]	@ (8011590 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 80114e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80114e6:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80114e8:	4a2a      	ldr	r2, [pc, #168]	@ (8011594 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 80114ea:	4613      	mov	r3, r2
 80114ec:	4416      	add	r6, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80114ee:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80114f2:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80114f6:	441d      	add	r5, r3
            ycomp = (int32_t)(*(pLum +j +1));
 80114f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80114fa:	f892 b100 	ldrb.w	fp, [r2, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80114fe:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8011502:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011504:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011508:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801150c:	f89c c100 	ldrb.w	ip, [ip, #256]	@ 0x100
 8011510:	0892      	lsrs	r2, r2, #2
 8011512:	0152      	lsls	r2, r2, #5
 8011514:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 8011518:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 801151c:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 8011520:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
          for(j=0; j < 8; j+=2)
 8011524:	3401      	adds	r4, #1
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 8011526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011528:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801152a:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 801152c:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 801152e:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011530:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011534:	f896 6100 	ldrb.w	r6, [r6, #256]	@ 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011538:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801153c:	f895 2100 	ldrb.w	r2, [r5, #256]	@ 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011540:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011544:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8011548:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 801154c:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 8011550:	8059      	strh	r1, [r3, #2]
          for(j=0; j < 8; j+=2)
 8011552:	d1b0      	bne.n	80114b6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x7e>
            pChrom++;
 8011554:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 8011556:	9b08      	ldr	r3, [sp, #32]
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8011558:	f109 0910 	add.w	r9, r9, #16
          pLum += 64;                      
 801155c:	f108 0840 	add.w	r8, r8, #64	@ 0x40
        for(k= 0; k<2; k++)
 8011560:	42bb      	cmp	r3, r7
 8011562:	d1a2      	bne.n	80114aa <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x72>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 8011564:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 8011566:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 801156a:	9b03      	ldr	r3, [sp, #12]
 801156c:	441a      	add	r2, r3
 801156e:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 8011570:	9b04      	ldr	r3, [sp, #16]
 8011572:	3b01      	subs	r3, #1
 8011574:	9304      	str	r3, [sp, #16]
 8011576:	d18d      	bne.n	8011494 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5c>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8011578:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 801157c:	e76c      	b.n	8011458 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 801157e:	bf00      	nop
 8011580:	2002798c 	.word	0x2002798c
 8011584:	2002718c 	.word	0x2002718c
 8011588:	2002758c 	.word	0x2002758c
 801158c:	20026d8c 	.word	0x20026d8c
 8011590:	2002698c 	.word	0x2002698c
 8011594:	0802e3cd 	.word	0x0802e3cd

08011598 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8011598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801159c:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 801159e:	22c0      	movs	r2, #192	@ 0xc0
{  
 80115a0:	b089      	sub	sp, #36	@ 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 80115a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80115a6:	9304      	str	r3, [sp, #16]
  

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80115a8:	4b34      	ldr	r3, [pc, #208]	@ (801167c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe4>)
{  
 80115aa:	9107      	str	r1, [sp, #28]
  currentMCU = BlockIndex;
 80115ac:	4651      	mov	r1, sl
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80115ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80115b0:	9200      	str	r2, [sp, #0]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80115b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80115b4:	691b      	ldr	r3, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80115b6:	9201      	str	r2, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80115b8:	9305      	str	r3, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 80115ba:	9b04      	ldr	r3, [sp, #16]
 80115bc:	4453      	add	r3, sl
 80115be:	428b      	cmp	r3, r1
 80115c0:	d803      	bhi.n	80115ca <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x32>
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 80115c2:	9804      	ldr	r0, [sp, #16]
 80115c4:	b009      	add	sp, #36	@ 0x24
 80115c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80115ca:	00cb      	lsls	r3, r1, #3
 80115cc:	9a00      	ldr	r2, [sp, #0]
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80115ce:	9d00      	ldr	r5, [sp, #0]
    currentMCU++;   
 80115d0:	3101      	adds	r1, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80115d2:	9c01      	ldr	r4, [sp, #4]
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 80115d4:	f100 0640 	add.w	r6, r0, #64	@ 0x40
    pLum = pInBuffer;
 80115d8:	4684      	mov	ip, r0
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80115da:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80115de:	fb05 3312 	mls	r3, r5, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80115e2:	4354      	muls	r4, r2
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 80115e4:	2208      	movs	r2, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80115e6:	005b      	lsls	r3, r3, #1
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 80115e8:	9203      	str	r2, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80115ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80115ee:	9a05      	ldr	r2, [sp, #20]
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d93c      	bls.n	801166e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xd6>
        pOutAddr = pOutBuffer+ refline;
 80115f4:	9a07      	ldr	r2, [sp, #28]
 80115f6:	f106 3eff 	add.w	lr, r6, #4294967295
 80115fa:	18d4      	adds	r4, r2, r3
          for(j=0; j < 8; j++)
 80115fc:	f10c 32ff 	add.w	r2, ip, #4294967295
 8011600:	9202      	str	r2, [sp, #8]
 8011602:	f104 0210 	add.w	r2, r4, #16
 8011606:	9206      	str	r2, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 8011608:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 801160a:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 801160e:	f817 2f01 	ldrb.w	r2, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8011612:	f89e 9040 	ldrb.w	r9, [lr, #64]	@ 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011616:	4d1a      	ldr	r5, [pc, #104]	@ (8011680 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
            ycomp = (int32_t)(*(pLum +j));
 8011618:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801161a:	4f1a      	ldr	r7, [pc, #104]	@ (8011684 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
 801161c:	442a      	add	r2, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 801161e:	4d1a      	ldr	r5, [pc, #104]	@ (8011688 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011620:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 8011624:	4417      	add	r7, r2
 8011626:	f897 b100 	ldrb.w	fp, [r7, #256]	@ 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 801162a:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 801162e:	4d17      	ldr	r5, [pc, #92]	@ (801168c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011630:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 8011634:	4417      	add	r7, r2
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8011636:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 801163a:	4d15      	ldr	r5, [pc, #84]	@ (8011690 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801163c:	f897 7100 	ldrb.w	r7, [r7, #256]	@ 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8011640:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011644:	08ff      	lsrs	r7, r7, #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8011646:	44c1      	add	r9, r8
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011648:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 801164c:	eb02 4229 	add.w	r2, r2, r9, asr #16
 8011650:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
 8011654:	0892      	lsrs	r2, r2, #2
 8011656:	ea47 1742 	orr.w	r7, r7, r2, lsl #5
          for(j=0; j < 8; j++)
 801165a:	9a06      	ldr	r2, [sp, #24]
            *(__IO uint16_t *)pOutAddr = 
 801165c:	f824 7b02 	strh.w	r7, [r4], #2
          for(j=0; j < 8; j++)
 8011660:	4294      	cmp	r4, r2
 8011662:	d1d1      	bne.n	8011608 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x70>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 8011664:	9a01      	ldr	r2, [sp, #4]
            pChrom++;
 8011666:	3608      	adds	r6, #8
          pLum += 8;
 8011668:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 801166c:	4413      	add	r3, r2
    for(i= 0; i <  8; i++)
 801166e:	9a03      	ldr	r2, [sp, #12]
 8011670:	3a01      	subs	r2, #1
 8011672:	9203      	str	r2, [sp, #12]
 8011674:	d1bb      	bne.n	80115ee <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x56>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8011676:	30c0      	adds	r0, #192	@ 0xc0
 8011678:	e79f      	b.n	80115ba <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 801167a:	bf00      	nop
 801167c:	2002798c 	.word	0x2002798c
 8011680:	0802e3cd 	.word	0x0802e3cd
 8011684:	2002758c 	.word	0x2002758c
 8011688:	2002718c 	.word	0x2002718c
 801168c:	20026d8c 	.word	0x20026d8c
 8011690:	2002698c 	.word	0x2002698c

08011694 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8011694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011698:	b085      	sub	sp, #20
 801169a:	4604      	mov	r4, r0

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 801169c:	0998      	lsrs	r0, r3, #6
{
 801169e:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
 80116a0:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80116a4:	491a      	ldr	r1, [pc, #104]	@ (8011710 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 80116a6:	9303      	str	r3, [sp, #12]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80116a8:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	@ 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80116ac:	6909      	ldr	r1, [r1, #16]
 80116ae:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 80116b0:	9b03      	ldr	r3, [sp, #12]
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d802      	bhi.n	80116bc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
  }
  return numberMCU;
}
 80116b6:	b005      	add	sp, #20
 80116b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80116bc:	00d3      	lsls	r3, r2, #3
    pLum = pInBuffer;
 80116be:	46a4      	mov	ip, r4
    currentMCU++;
 80116c0:	3201      	adds	r2, #1
 80116c2:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80116c4:	fbb3 f1f8 	udiv	r1, r3, r8
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80116c8:	fb08 3311 	mls	r3, r8, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80116cc:	fb09 f501 	mul.w	r5, r9, r1
 80116d0:	005b      	lsls	r3, r3, #1
 80116d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80116d6:	9901      	ldr	r1, [sp, #4]
 80116d8:	4299      	cmp	r1, r3
 80116da:	d915      	bls.n	8011708 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x74>
      pOutAddr = pOutBuffer + refline;
 80116dc:	9902      	ldr	r1, [sp, #8]
 80116de:	46e2      	mov	sl, ip
 80116e0:	4419      	add	r1, r3
        for(j=0; j < 8; j++)
 80116e2:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 80116e6:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
 80116ea:	08f5      	lsrs	r5, r6, #3
 80116ec:	08b6      	lsrs	r6, r6, #2
 80116ee:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 80116f2:	ea4e 1e46 	orr.w	lr, lr, r6, lsl #5
 80116f6:	ea45 050e 	orr.w	r5, r5, lr
 80116fa:	f821 5b02 	strh.w	r5, [r1], #2
        for(j=0; j < 8; j++)
 80116fe:	4559      	cmp	r1, fp
 8011700:	d1f1      	bne.n	80116e6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
          pLum++;
 8011702:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;        
 8011706:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 8011708:	3f01      	subs	r7, #1
 801170a:	d1e4      	bne.n	80116d6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 801170c:	3440      	adds	r4, #64	@ 0x40
 801170e:	e7cf      	b.n	80116b0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 8011710:	2002798c 	.word	0x2002798c

08011714 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8011714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011718:	b085      	sub	sp, #20
 801171a:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 801171c:	27ff      	movs	r7, #255	@ 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 801171e:	0a18      	lsrs	r0, r3, #8
{  
 8011720:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 8011722:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8011726:	4927      	ldr	r1, [pc, #156]	@ (80117c4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb0>)
  while(currentMCU < (numberMCU + BlockIndex))
 8011728:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801172a:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	@ 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801172e:	6909      	ldr	r1, [r1, #16]
 8011730:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 8011732:	9b03      	ldr	r3, [sp, #12]
 8011734:	4293      	cmp	r3, r2
 8011736:	d802      	bhi.n	801173e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8011738:	b005      	add	sp, #20
 801173a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 801173e:	00d1      	lsls	r1, r2, #3
    pChrom = pInBuffer;
 8011740:	46ae      	mov	lr, r5
    currentMCU++;
 8011742:	3201      	adds	r2, #1
 8011744:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8011748:	fbb1 f3f9 	udiv	r3, r1, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 801174c:	fb09 1113 	mls	r1, r9, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8011750:	fb0a f403 	mul.w	r4, sl, r3
 8011754:	0049      	lsls	r1, r1, #1
 8011756:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801175a:	9b00      	ldr	r3, [sp, #0]
 801175c:	428b      	cmp	r3, r1
 801175e:	d92b      	bls.n	80117b8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa4>
        pOutAddr = pOutBuffer+ refline;        
 8011760:	9b02      	ldr	r3, [sp, #8]
 8011762:	4674      	mov	r4, lr
 8011764:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 8011766:	f106 0310 	add.w	r3, r6, #16
 801176a:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 801176c:	f894 80c0 	ldrb.w	r8, [r4, #192]	@ 0xc0
            pChrom++;
 8011770:	3401      	adds	r4, #1
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8011772:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8011776:	f814 bc01 	ldrb.w	fp, [r4, #-1]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 801177a:	fb13 f308 	smulbb	r3, r3, r8
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 801177e:	fb1b fb08 	smulbb	fp, fp, r8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8011782:	fbb3 f3f7 	udiv	r3, r3, r7
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8011786:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 801178a:	109b      	asrs	r3, r3, #2
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 801178c:	ea4f 0beb 	mov.w	fp, fp, asr #3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8011790:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8011792:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8011796:	f894 b07f 	ldrb.w	fp, [r4, #127]	@ 0x7f
 801179a:	fb1b fb08 	smulbb	fp, fp, r8
 801179e:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 80117a2:	ea43 03db 	orr.w	r3, r3, fp, lsr #3
 80117a6:	b29b      	uxth	r3, r3
          *(__IO uint16_t *)pOutAddr = 
 80117a8:	f826 3b02 	strh.w	r3, [r6], #2
          for(j=0; j < 8; j++)
 80117ac:	9b01      	ldr	r3, [sp, #4]
 80117ae:	429e      	cmp	r6, r3
 80117b0:	d1dc      	bne.n	801176c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
            pChrom++;
 80117b2:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 80117b6:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 80117b8:	f1bc 0c01 	subs.w	ip, ip, #1
 80117bc:	d1cd      	bne.n	801175a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 80117be:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 80117c2:	e7b6      	b.n	8011732 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 80117c4:	2002798c 	.word	0x2002798c

080117c8 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 80117c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 80117ca:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 80117cc:	6886      	ldr	r6, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 80117ce:	6805      	ldr	r5, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 80117d0:	fb06 f703 	mul.w	r7, r6, r3
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 80117d4:	4c27      	ldr	r4, [pc, #156]	@ (8011874 <JPEG_GetDecodeColorConvertFunc+0xac>)
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 80117d6:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 80117d8:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 80117da:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 80117de:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 80117e0:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 80117e2:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 80117e4:	6127      	str	r7, [r4, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 80117e6:	6060      	str	r0, [r4, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 80117e8:	d13a      	bne.n	8011860 <JPEG_GetDecodeColorConvertFunc+0x98>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80117ea:	2801      	cmp	r0, #1
 80117ec:	d120      	bne.n	8011830 <JPEG_GetDecodeColorConvertFunc+0x68>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 80117ee:	f013 000f 	ands.w	r0, r3, #15
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 80117f2:	4f21      	ldr	r7, [pc, #132]	@ (8011878 <JPEG_GetDecodeColorConvertFunc+0xb0>)
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 80117f4:	bf18      	it	ne
 80117f6:	f1c0 0010 	rsbne	r0, r0, #16
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 80117fa:	600f      	str	r7, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 80117fc:	6160      	str	r0, [r4, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
      JPEG_ConvertorParams.V_factor  = 16;
 80117fe:	2010      	movs	r0, #16
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8011800:	6961      	ldr	r1, [r4, #20]
 8011802:	4419      	add	r1, r3
 8011804:	6261      	str	r1, [r4, #36]	@ 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 8011806:	0059      	lsls	r1, r3, #1
 8011808:	62a1      	str	r1, [r4, #40]	@ 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 801180a:	fbb3 f1f5 	udiv	r1, r3, r5
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 801180e:	fb05 3311 	mls	r3, r5, r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
 8011812:	e9c4 5007 	strd	r5, r0, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8011816:	b103      	cbz	r3, 801181a <JPEG_GetDecodeColorConvertFunc+0x52>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 8011818:	3101      	adds	r1, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 801181a:	fbb6 f3f0 	udiv	r3, r6, r0
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 801181e:	fb00 6613 	mls	r6, r0, r3, r6
 8011822:	b106      	cbz	r6, 8011826 <JPEG_GetDecodeColorConvertFunc+0x5e>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 8011824:	3301      	adds	r3, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8011826:	4359      	muls	r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 8011828:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 801182a:	62e1      	str	r1, [r4, #44]	@ 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 801182c:	6011      	str	r1, [r2, #0]
}
 801182e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8011830:	2802      	cmp	r0, #2
 8011832:	d109      	bne.n	8011848 <JPEG_GetDecodeColorConvertFunc+0x80>
      if(JPEG_ConvertorParams.LineOffset != 0)
 8011834:	f013 000f 	ands.w	r0, r3, #15
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8011838:	4f10      	ldr	r7, [pc, #64]	@ (801187c <JPEG_GetDecodeColorConvertFunc+0xb4>)
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 801183a:	bf18      	it	ne
 801183c:	f1c0 0010 	rsbne	r0, r0, #16
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8011840:	600f      	str	r7, [r1, #0]
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8011842:	6160      	str	r0, [r4, #20]
      JPEG_ConvertorParams.V_factor  = 8;
 8011844:	2008      	movs	r0, #8
 8011846:	e7db      	b.n	8011800 <JPEG_GetDecodeColorConvertFunc+0x38>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8011848:	480d      	ldr	r0, [pc, #52]	@ (8011880 <JPEG_GetDecodeColorConvertFunc+0xb8>)
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 801184a:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 801184c:	f013 0107 	ands.w	r1, r3, #7
 8011850:	d002      	beq.n	8011858 <JPEG_GetDecodeColorConvertFunc+0x90>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8011852:	f1c1 0108 	rsb	r1, r1, #8
 8011856:	e000      	b.n	801185a <JPEG_GetDecodeColorConvertFunc+0x92>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8011858:	2100      	movs	r1, #0
 801185a:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 801185c:	6161      	str	r1, [r4, #20]
      JPEG_ConvertorParams.V_factor  = 8;
 801185e:	e7f1      	b.n	8011844 <JPEG_GetDecodeColorConvertFunc+0x7c>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8011860:	b90d      	cbnz	r5, 8011866 <JPEG_GetDecodeColorConvertFunc+0x9e>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8011862:	4808      	ldr	r0, [pc, #32]	@ (8011884 <JPEG_GetDecodeColorConvertFunc+0xbc>)
 8011864:	e7f1      	b.n	801184a <JPEG_GetDecodeColorConvertFunc+0x82>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8011866:	2d30      	cmp	r5, #48	@ 0x30
 8011868:	d101      	bne.n	801186e <JPEG_GetDecodeColorConvertFunc+0xa6>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 801186a:	4807      	ldr	r0, [pc, #28]	@ (8011888 <JPEG_GetDecodeColorConvertFunc+0xc0>)
 801186c:	e7ed      	b.n	801184a <JPEG_GetDecodeColorConvertFunc+0x82>
    return HAL_ERROR; /* Color space Not supported*/
 801186e:	2001      	movs	r0, #1
 8011870:	e7dd      	b.n	801182e <JPEG_GetDecodeColorConvertFunc+0x66>
 8011872:	bf00      	nop
 8011874:	2002798c 	.word	0x2002798c
 8011878:	0801123d 	.word	0x0801123d
 801187c:	08011439 	.word	0x08011439
 8011880:	08011599 	.word	0x08011599
 8011884:	08011695 	.word	0x08011695
 8011888:	08011715 	.word	0x08011715

0801188c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801188c:	8880      	ldrh	r0, [r0, #4]
 801188e:	4770      	bx	lr

08011890 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8011890:	b570      	push	{r4, r5, r6, lr}
 8011892:	6803      	ldr	r3, [r0, #0]
 8011894:	460c      	mov	r4, r1
 8011896:	2100      	movs	r1, #0
 8011898:	4605      	mov	r5, r0
 801189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801189c:	4798      	blx	r3
 801189e:	4606      	mov	r6, r0
 80118a0:	682b      	ldr	r3, [r5, #0]
 80118a2:	4628      	mov	r0, r5
 80118a4:	1ba4      	subs	r4, r4, r6
 80118a6:	6a1b      	ldr	r3, [r3, #32]
 80118a8:	b2a4      	uxth	r4, r4
 80118aa:	4798      	blx	r3
 80118ac:	fbb4 f0f0 	udiv	r0, r4, r0
 80118b0:	bd70      	pop	{r4, r5, r6, pc}

080118b2 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80118b2:	2300      	movs	r3, #0
 80118b4:	8083      	strh	r3, [r0, #4]
 80118b6:	4770      	bx	lr

080118b8 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80118b8:	b510      	push	{r4, lr}
 80118ba:	6803      	ldr	r3, [r0, #0]
 80118bc:	4604      	mov	r4, r0
 80118be:	8881      	ldrh	r1, [r0, #4]
 80118c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118c2:	4798      	blx	r3
 80118c4:	88a3      	ldrh	r3, [r4, #4]
 80118c6:	3301      	adds	r3, #1
 80118c8:	80a3      	strh	r3, [r4, #4]
 80118ca:	bd10      	pop	{r4, pc}

080118cc <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80118cc:	6803      	ldr	r3, [r0, #0]
 80118ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118d0:	4718      	bx	r3

080118d2 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80118d2:	4770      	bx	lr

080118d4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80118d4:	4a02      	ldr	r2, [pc, #8]	@ (80118e0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80118d6:	6002      	str	r2, [r0, #0]
 80118d8:	2200      	movs	r2, #0
 80118da:	8082      	strh	r2, [r0, #4]
 80118dc:	4770      	bx	lr
 80118de:	bf00      	nop
 80118e0:	0802e6d8 	.word	0x0802e6d8

080118e4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80118e4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80118e6:	2000      	movs	r0, #0
 80118e8:	b12b      	cbz	r3, 80118f6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80118ea:	b920      	cbnz	r0, 80118f6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80118ec:	1a5a      	subs	r2, r3, r1
 80118ee:	699b      	ldr	r3, [r3, #24]
 80118f0:	4250      	negs	r0, r2
 80118f2:	4150      	adcs	r0, r2
 80118f4:	e7f8      	b.n	80118e8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80118f6:	4770      	bx	lr

080118f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80118f8:	2300      	movs	r3, #0
 80118fa:	6148      	str	r0, [r1, #20]
 80118fc:	618b      	str	r3, [r1, #24]
 80118fe:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011900:	b913      	cbnz	r3, 8011908 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8011902:	6281      	str	r1, [r0, #40]	@ 0x28
 8011904:	4770      	bx	lr
 8011906:	4613      	mov	r3, r2
 8011908:	699a      	ldr	r2, [r3, #24]
 801190a:	2a00      	cmp	r2, #0
 801190c:	d1fb      	bne.n	8011906 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 801190e:	6199      	str	r1, [r3, #24]
 8011910:	4770      	bx	lr

08011912 <_ZN8touchgfx9Container9removeAllEv>:
 8011912:	2200      	movs	r2, #0
 8011914:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011916:	b123      	cbz	r3, 8011922 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8011918:	6999      	ldr	r1, [r3, #24]
 801191a:	6281      	str	r1, [r0, #40]	@ 0x28
 801191c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8011920:	e7f8      	b.n	8011914 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8011922:	4770      	bx	lr

08011924 <_ZN8touchgfx9Container6unlinkEv>:
 8011924:	2300      	movs	r3, #0
 8011926:	6283      	str	r3, [r0, #40]	@ 0x28
 8011928:	4770      	bx	lr

0801192a <_ZNK8touchgfx9Container12getSolidRectEv>:
 801192a:	2200      	movs	r2, #0
 801192c:	8002      	strh	r2, [r0, #0]
 801192e:	8042      	strh	r2, [r0, #2]
 8011930:	8082      	strh	r2, [r0, #4]
 8011932:	80c2      	strh	r2, [r0, #6]
 8011934:	4770      	bx	lr

08011936 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8011936:	b570      	push	{r4, r5, r6, lr}
 8011938:	460d      	mov	r5, r1
 801193a:	4616      	mov	r6, r2
 801193c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801193e:	b13c      	cbz	r4, 8011950 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8011940:	6823      	ldr	r3, [r4, #0]
 8011942:	4620      	mov	r0, r4
 8011944:	4632      	mov	r2, r6
 8011946:	4629      	mov	r1, r5
 8011948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801194a:	4798      	blx	r3
 801194c:	69a4      	ldr	r4, [r4, #24]
 801194e:	e7f6      	b.n	801193e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8011950:	bd70      	pop	{r4, r5, r6, pc}

08011952 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8011952:	b538      	push	{r3, r4, r5, lr}
 8011954:	460d      	mov	r5, r1
 8011956:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8011958:	b134      	cbz	r4, 8011968 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801195a:	682b      	ldr	r3, [r5, #0]
 801195c:	4621      	mov	r1, r4
 801195e:	4628      	mov	r0, r5
 8011960:	689b      	ldr	r3, [r3, #8]
 8011962:	4798      	blx	r3
 8011964:	69a4      	ldr	r4, [r4, #24]
 8011966:	e7f7      	b.n	8011958 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8011968:	bd38      	pop	{r3, r4, r5, pc}

0801196a <_ZN8touchgfx9ContainerD1Ev>:
 801196a:	4770      	bx	lr

0801196c <_ZN8touchgfx9ContainerD0Ev>:
 801196c:	b510      	push	{r4, lr}
 801196e:	4604      	mov	r4, r0
 8011970:	212c      	movs	r1, #44	@ 0x2c
 8011972:	f018 fa22 	bl	8029dba <_ZdlPvj>
 8011976:	4620      	mov	r0, r4
 8011978:	bd10      	pop	{r4, pc}

0801197a <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801197a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801197c:	b19b      	cbz	r3, 80119a6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801197e:	428b      	cmp	r3, r1
 8011980:	d109      	bne.n	8011996 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8011982:	699a      	ldr	r2, [r3, #24]
 8011984:	2100      	movs	r1, #0
 8011986:	6159      	str	r1, [r3, #20]
 8011988:	6282      	str	r2, [r0, #40]	@ 0x28
 801198a:	b902      	cbnz	r2, 801198e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801198c:	4770      	bx	lr
 801198e:	6199      	str	r1, [r3, #24]
 8011990:	4770      	bx	lr
 8011992:	4613      	mov	r3, r2
 8011994:	b13a      	cbz	r2, 80119a6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011996:	699a      	ldr	r2, [r3, #24]
 8011998:	428a      	cmp	r2, r1
 801199a:	d1fa      	bne.n	8011992 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801199c:	698a      	ldr	r2, [r1, #24]
 801199e:	619a      	str	r2, [r3, #24]
 80119a0:	2300      	movs	r3, #0
 80119a2:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80119a6:	4770      	bx	lr

080119a8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80119a8:	b410      	push	{r4}
 80119aa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80119ac:	4604      	mov	r4, r0
 80119ae:	b92b      	cbnz	r3, 80119bc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80119b0:	6803      	ldr	r3, [r0, #0]
 80119b2:	4611      	mov	r1, r2
 80119b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80119ba:	4718      	bx	r3
 80119bc:	b941      	cbnz	r1, 80119d0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80119be:	6193      	str	r3, [r2, #24]
 80119c0:	6282      	str	r2, [r0, #40]	@ 0x28
 80119c2:	6154      	str	r4, [r2, #20]
 80119c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119c8:	4770      	bx	lr
 80119ca:	4603      	mov	r3, r0
 80119cc:	2800      	cmp	r0, #0
 80119ce:	d0f9      	beq.n	80119c4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80119d0:	4299      	cmp	r1, r3
 80119d2:	6998      	ldr	r0, [r3, #24]
 80119d4:	d1f9      	bne.n	80119ca <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80119d6:	6190      	str	r0, [r2, #24]
 80119d8:	618a      	str	r2, [r1, #24]
 80119da:	e7f2      	b.n	80119c2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080119dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80119dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119e0:	461f      	mov	r7, r3
 80119e2:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80119e6:	460d      	mov	r5, r1
 80119e8:	4616      	mov	r6, r2
 80119ea:	b103      	cbz	r3, 80119ee <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80119ec:	6038      	str	r0, [r7, #0]
 80119ee:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80119f0:	b314      	cbz	r4, 8011a38 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80119f2:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80119f6:	b1eb      	cbz	r3, 8011a34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80119f8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80119fc:	428d      	cmp	r5, r1
 80119fe:	db19      	blt.n	8011a34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011a00:	b289      	uxth	r1, r1
 8011a02:	8923      	ldrh	r3, [r4, #8]
 8011a04:	440b      	add	r3, r1
 8011a06:	b21b      	sxth	r3, r3
 8011a08:	429d      	cmp	r5, r3
 8011a0a:	da13      	bge.n	8011a34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011a0c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011a10:	4296      	cmp	r6, r2
 8011a12:	db0f      	blt.n	8011a34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011a14:	b292      	uxth	r2, r2
 8011a16:	8963      	ldrh	r3, [r4, #10]
 8011a18:	4413      	add	r3, r2
 8011a1a:	b21b      	sxth	r3, r3
 8011a1c:	429e      	cmp	r6, r3
 8011a1e:	da09      	bge.n	8011a34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011a20:	6823      	ldr	r3, [r4, #0]
 8011a22:	1ab2      	subs	r2, r6, r2
 8011a24:	1a69      	subs	r1, r5, r1
 8011a26:	4620      	mov	r0, r4
 8011a28:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8011a2c:	b212      	sxth	r2, r2
 8011a2e:	463b      	mov	r3, r7
 8011a30:	b209      	sxth	r1, r1
 8011a32:	47c0      	blx	r8
 8011a34:	69a4      	ldr	r4, [r4, #24]
 8011a36:	e7db      	b.n	80119f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8011a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011a3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8011a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a40:	4c6d      	ldr	r4, [pc, #436]	@ (8011bf8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8011a42:	b0a1      	sub	sp, #132	@ 0x84
 8011a44:	4606      	mov	r6, r0
 8011a46:	6824      	ldr	r4, [r4, #0]
 8011a48:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8011a4a:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8011a4e:	2400      	movs	r4, #0
 8011a50:	9303      	str	r3, [sp, #12]
 8011a52:	802c      	strh	r4, [r5, #0]
 8011a54:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8011a56:	802c      	strh	r4, [r5, #0]
 8011a58:	601c      	str	r4, [r3, #0]
 8011a5a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8011a5e:	f7ff ffbd 	bl	80119dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011a62:	f1b9 0f03 	cmp.w	r9, #3
 8011a66:	f340 80c1 	ble.w	8011bec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8011a6a:	4631      	mov	r1, r6
 8011a6c:	a80c      	add	r0, sp, #48	@ 0x30
 8011a6e:	f007 fcc1 	bl	80193f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011a72:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8011a76:	9306      	str	r3, [sp, #24]
 8011a78:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8011a7c:	9307      	str	r3, [sp, #28]
 8011a7e:	9b03      	ldr	r3, [sp, #12]
 8011a80:	f8d3 a000 	ldr.w	sl, [r3]
 8011a84:	f1ba 0f00 	cmp.w	sl, #0
 8011a88:	f000 80b3 	beq.w	8011bf2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8011a8c:	4651      	mov	r1, sl
 8011a8e:	a810      	add	r0, sp, #64	@ 0x40
 8011a90:	f007 fcb0 	bl	80193f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011a94:	2002      	movs	r0, #2
 8011a96:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8011a9a:	9b01      	ldr	r3, [sp, #4]
 8011a9c:	9a06      	ldr	r2, [sp, #24]
 8011a9e:	fb91 f1f0 	sdiv	r1, r1, r0
 8011aa2:	189d      	adds	r5, r3, r2
 8011aa4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8011aa8:	9a07      	ldr	r2, [sp, #28]
 8011aaa:	4419      	add	r1, r3
 8011aac:	9b02      	ldr	r3, [sp, #8]
 8011aae:	4413      	add	r3, r2
 8011ab0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8011ab4:	1a6d      	subs	r5, r5, r1
 8011ab6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8011aba:	fb92 f2f0 	sdiv	r2, r2, r0
 8011abe:	440a      	add	r2, r1
 8011ac0:	1a9b      	subs	r3, r3, r2
 8011ac2:	435b      	muls	r3, r3
 8011ac4:	fb05 3505 	mla	r5, r5, r5, r3
 8011ac8:	4f4c      	ldr	r7, [pc, #304]	@ (8011bfc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8011aca:	ac10      	add	r4, sp, #64	@ 0x40
 8011acc:	f1b9 0f0c 	cmp.w	r9, #12
 8011ad0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ad4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ad8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011adc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8011ae0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011ae4:	f04f 0303 	mov.w	r3, #3
 8011ae8:	bfd8      	it	le
 8011aea:	f109 32ff 	addle.w	r2, r9, #4294967295
 8011aee:	f04f 0400 	mov.w	r4, #0
 8011af2:	f8cd 9000 	str.w	r9, [sp]
 8011af6:	bfcc      	ite	gt
 8011af8:	4698      	movgt	r8, r3
 8011afa:	fb92 f8f3 	sdivle	r8, r2, r3
 8011afe:	1c63      	adds	r3, r4, #1
 8011b00:	aa10      	add	r2, sp, #64	@ 0x40
 8011b02:	f004 0401 	and.w	r4, r4, #1
 8011b06:	f04f 0b00 	mov.w	fp, #0
 8011b0a:	9308      	str	r3, [sp, #32]
 8011b0c:	9b00      	ldr	r3, [sp, #0]
 8011b0e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8011b12:	fb93 f3f8 	sdiv	r3, r3, r8
 8011b16:	3404      	adds	r4, #4
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	9304      	str	r3, [sp, #16]
 8011b1c:	9a04      	ldr	r2, [sp, #16]
 8011b1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011b22:	fb13 f302 	smulbb	r3, r3, r2
 8011b26:	9a01      	ldr	r2, [sp, #4]
 8011b28:	b29b      	uxth	r3, r3
 8011b2a:	1899      	adds	r1, r3, r2
 8011b2c:	9305      	str	r3, [sp, #20]
 8011b2e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011b32:	b209      	sxth	r1, r1
 8011b34:	4299      	cmp	r1, r3
 8011b36:	db4d      	blt.n	8011bd4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011b38:	8932      	ldrh	r2, [r6, #8]
 8011b3a:	4413      	add	r3, r2
 8011b3c:	b21b      	sxth	r3, r3
 8011b3e:	4299      	cmp	r1, r3
 8011b40:	da48      	bge.n	8011bd4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011b42:	9b04      	ldr	r3, [sp, #16]
 8011b44:	6827      	ldr	r7, [r4, #0]
 8011b46:	fb17 f703 	smulbb	r7, r7, r3
 8011b4a:	9b02      	ldr	r3, [sp, #8]
 8011b4c:	b2bf      	uxth	r7, r7
 8011b4e:	18fa      	adds	r2, r7, r3
 8011b50:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011b54:	b212      	sxth	r2, r2
 8011b56:	429a      	cmp	r2, r3
 8011b58:	db3c      	blt.n	8011bd4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011b5a:	8970      	ldrh	r0, [r6, #10]
 8011b5c:	4403      	add	r3, r0
 8011b5e:	b21b      	sxth	r3, r3
 8011b60:	429a      	cmp	r2, r3
 8011b62:	da37      	bge.n	8011bd4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011b64:	2300      	movs	r3, #0
 8011b66:	4630      	mov	r0, r6
 8011b68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b6a:	ab0b      	add	r3, sp, #44	@ 0x2c
 8011b6c:	f7ff ff36 	bl	80119dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011b70:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011b72:	b37a      	cbz	r2, 8011bd4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011b74:	4552      	cmp	r2, sl
 8011b76:	d02d      	beq.n	8011bd4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011b78:	4611      	mov	r1, r2
 8011b7a:	a80e      	add	r0, sp, #56	@ 0x38
 8011b7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b7e:	f007 fc39 	bl	80193f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011b82:	f04f 0e02 	mov.w	lr, #2
 8011b86:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8011b8a:	9a06      	ldr	r2, [sp, #24]
 8011b8c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8011b90:	9b01      	ldr	r3, [sp, #4]
 8011b92:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8011b96:	4413      	add	r3, r2
 8011b98:	9a07      	ldr	r2, [sp, #28]
 8011b9a:	fb91 f1fe 	sdiv	r1, r1, lr
 8011b9e:	fb9c fcfe 	sdiv	ip, ip, lr
 8011ba2:	4401      	add	r1, r0
 8011ba4:	1a58      	subs	r0, r3, r1
 8011ba6:	9b02      	ldr	r3, [sp, #8]
 8011ba8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8011bac:	4413      	add	r3, r2
 8011bae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011bb0:	448c      	add	ip, r1
 8011bb2:	eba3 030c 	sub.w	r3, r3, ip
 8011bb6:	435b      	muls	r3, r3
 8011bb8:	fb00 3300 	mla	r3, r0, r0, r3
 8011bbc:	42ab      	cmp	r3, r5
 8011bbe:	d208      	bcs.n	8011bd2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8011bc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011bc2:	461d      	mov	r5, r3
 8011bc4:	9803      	ldr	r0, [sp, #12]
 8011bc6:	6001      	str	r1, [r0, #0]
 8011bc8:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8011bca:	9805      	ldr	r0, [sp, #20]
 8011bcc:	8008      	strh	r0, [r1, #0]
 8011bce:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8011bd0:	800f      	strh	r7, [r1, #0]
 8011bd2:	4692      	mov	sl, r2
 8011bd4:	f10b 0b01 	add.w	fp, fp, #1
 8011bd8:	3408      	adds	r4, #8
 8011bda:	f1bb 0f04 	cmp.w	fp, #4
 8011bde:	d19d      	bne.n	8011b1c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8011be0:	9b00      	ldr	r3, [sp, #0]
 8011be2:	9c08      	ldr	r4, [sp, #32]
 8011be4:	444b      	add	r3, r9
 8011be6:	4544      	cmp	r4, r8
 8011be8:	9300      	str	r3, [sp, #0]
 8011bea:	d188      	bne.n	8011afe <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8011bec:	b021      	add	sp, #132	@ 0x84
 8011bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bf2:	f04f 35ff 	mov.w	r5, #4294967295
 8011bf6:	e767      	b.n	8011ac8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8011bf8:	200279d8 	.word	0x200279d8
 8011bfc:	0802b528 	.word	0x0802b528

08011c00 <_ZN8touchgfx4RectaNERKS0_>:
 8011c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c04:	f9b1 7000 	ldrsh.w	r7, [r1]
 8011c08:	888c      	ldrh	r4, [r1, #4]
 8011c0a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011c0e:	443c      	add	r4, r7
 8011c10:	b2a4      	uxth	r4, r4
 8011c12:	fa0f f884 	sxth.w	r8, r4
 8011c16:	45c1      	cmp	r9, r8
 8011c18:	da2f      	bge.n	8011c7a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011c1a:	8882      	ldrh	r2, [r0, #4]
 8011c1c:	444a      	add	r2, r9
 8011c1e:	b292      	uxth	r2, r2
 8011c20:	fa0f fe82 	sxth.w	lr, r2
 8011c24:	4577      	cmp	r7, lr
 8011c26:	da28      	bge.n	8011c7a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011c28:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8011c2c:	88cb      	ldrh	r3, [r1, #6]
 8011c2e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8011c32:	442b      	add	r3, r5
 8011c34:	b21b      	sxth	r3, r3
 8011c36:	429e      	cmp	r6, r3
 8011c38:	da1f      	bge.n	8011c7a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011c3a:	88c3      	ldrh	r3, [r0, #6]
 8011c3c:	4433      	add	r3, r6
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	fa0f fc83 	sxth.w	ip, r3
 8011c44:	4565      	cmp	r5, ip
 8011c46:	da18      	bge.n	8011c7a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011c48:	454f      	cmp	r7, r9
 8011c4a:	bfb8      	it	lt
 8011c4c:	464f      	movlt	r7, r9
 8011c4e:	42b5      	cmp	r5, r6
 8011c50:	bfb8      	it	lt
 8011c52:	4635      	movlt	r5, r6
 8011c54:	45f0      	cmp	r8, lr
 8011c56:	bfd8      	it	le
 8011c58:	4622      	movle	r2, r4
 8011c5a:	1bd2      	subs	r2, r2, r7
 8011c5c:	8082      	strh	r2, [r0, #4]
 8011c5e:	884a      	ldrh	r2, [r1, #2]
 8011c60:	88c9      	ldrh	r1, [r1, #6]
 8011c62:	8007      	strh	r7, [r0, #0]
 8011c64:	440a      	add	r2, r1
 8011c66:	8045      	strh	r5, [r0, #2]
 8011c68:	b292      	uxth	r2, r2
 8011c6a:	b211      	sxth	r1, r2
 8011c6c:	458c      	cmp	ip, r1
 8011c6e:	bfa8      	it	ge
 8011c70:	4613      	movge	r3, r2
 8011c72:	1b5b      	subs	r3, r3, r5
 8011c74:	80c3      	strh	r3, [r0, #6]
 8011c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	8003      	strh	r3, [r0, #0]
 8011c7e:	8043      	strh	r3, [r0, #2]
 8011c80:	8083      	strh	r3, [r0, #4]
 8011c82:	80c3      	strh	r3, [r0, #6]
 8011c84:	e7f7      	b.n	8011c76 <_ZN8touchgfx4RectaNERKS0_+0x76>

08011c86 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8011c86:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	dd06      	ble.n	8011c9c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8011c8e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8011c92:	2800      	cmp	r0, #0
 8011c94:	bfcc      	ite	gt
 8011c96:	2000      	movgt	r0, #0
 8011c98:	2001      	movle	r0, #1
 8011c9a:	4770      	bx	lr
 8011c9c:	2001      	movs	r0, #1
 8011c9e:	4770      	bx	lr

08011ca0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8011ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	4604      	mov	r4, r0
 8011ca8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8011caa:	8003      	strh	r3, [r0, #0]
 8011cac:	8043      	strh	r3, [r0, #2]
 8011cae:	8083      	strh	r3, [r0, #4]
 8011cb0:	80c3      	strh	r3, [r0, #6]
 8011cb2:	2d00      	cmp	r5, #0
 8011cb4:	d040      	beq.n	8011d38 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8011cb6:	1d28      	adds	r0, r5, #4
 8011cb8:	f7ff ffe5 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011cbc:	b988      	cbnz	r0, 8011ce2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011cbe:	4620      	mov	r0, r4
 8011cc0:	f7ff ffe1 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011cc4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8011cc8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011ccc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8011cd0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8011cd4:	b138      	cbz	r0, 8011ce6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8011cd6:	8022      	strh	r2, [r4, #0]
 8011cd8:	8063      	strh	r3, [r4, #2]
 8011cda:	f8a4 e004 	strh.w	lr, [r4, #4]
 8011cde:	f8a4 c006 	strh.w	ip, [r4, #6]
 8011ce2:	69ad      	ldr	r5, [r5, #24]
 8011ce4:	e7e5      	b.n	8011cb2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8011ce6:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011cea:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011cee:	4290      	cmp	r0, r2
 8011cf0:	4607      	mov	r7, r0
 8011cf2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8011cf6:	460e      	mov	r6, r1
 8011cf8:	bfa8      	it	ge
 8011cfa:	4617      	movge	r7, r2
 8011cfc:	4299      	cmp	r1, r3
 8011cfe:	4472      	add	r2, lr
 8011d00:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8011d04:	bfa8      	it	ge
 8011d06:	461e      	movge	r6, r3
 8011d08:	4440      	add	r0, r8
 8011d0a:	4471      	add	r1, lr
 8011d0c:	4463      	add	r3, ip
 8011d0e:	b200      	sxth	r0, r0
 8011d10:	8027      	strh	r7, [r4, #0]
 8011d12:	b212      	sxth	r2, r2
 8011d14:	8066      	strh	r6, [r4, #2]
 8011d16:	b209      	sxth	r1, r1
 8011d18:	b21b      	sxth	r3, r3
 8011d1a:	4290      	cmp	r0, r2
 8011d1c:	bfac      	ite	ge
 8011d1e:	ebc7 0200 	rsbge	r2, r7, r0
 8011d22:	ebc7 0202 	rsblt	r2, r7, r2
 8011d26:	4299      	cmp	r1, r3
 8011d28:	bfac      	ite	ge
 8011d2a:	ebc6 0301 	rsbge	r3, r6, r1
 8011d2e:	ebc6 0303 	rsblt	r3, r6, r3
 8011d32:	80a2      	strh	r2, [r4, #4]
 8011d34:	80e3      	strh	r3, [r4, #6]
 8011d36:	e7d4      	b.n	8011ce2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011d38:	4620      	mov	r0, r4
 8011d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d3e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8011d3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011d42:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8011d46:	b383      	cbz	r3, 8011daa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8011d48:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8011d4a:	b374      	cbz	r4, 8011daa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8011d4c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8011d50:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8011d54:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8011d58:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8011d5c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8011d60:	b303      	cbz	r3, 8011da4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8011d62:	4668      	mov	r0, sp
 8011d64:	1d21      	adds	r1, r4, #4
 8011d66:	f8ad 5000 	strh.w	r5, [sp]
 8011d6a:	f8ad 6002 	strh.w	r6, [sp, #2]
 8011d6e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8011d72:	f8ad 8006 	strh.w	r8, [sp, #6]
 8011d76:	f7ff ff43 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 8011d7a:	4668      	mov	r0, sp
 8011d7c:	f7ff ff83 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011d80:	b980      	cbnz	r0, 8011da4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8011d82:	f8bd 3000 	ldrh.w	r3, [sp]
 8011d86:	4669      	mov	r1, sp
 8011d88:	88a2      	ldrh	r2, [r4, #4]
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	1a9b      	subs	r3, r3, r2
 8011d8e:	88e2      	ldrh	r2, [r4, #6]
 8011d90:	f8ad 3000 	strh.w	r3, [sp]
 8011d94:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011d98:	1a9b      	subs	r3, r3, r2
 8011d9a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011d9e:	6823      	ldr	r3, [r4, #0]
 8011da0:	689b      	ldr	r3, [r3, #8]
 8011da2:	4798      	blx	r3
 8011da4:	69a4      	ldr	r4, [r4, #24]
 8011da6:	2c00      	cmp	r4, #0
 8011da8:	d1d8      	bne.n	8011d5c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8011daa:	b002      	add	sp, #8
 8011dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011db0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8011db0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011db2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8011db6:	460d      	mov	r5, r1
 8011db8:	4616      	mov	r6, r2
 8011dba:	b323      	cbz	r3, 8011e06 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8011dbc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8011dbe:	b314      	cbz	r4, 8011e06 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8011dc0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8011dc4:	b1eb      	cbz	r3, 8011e02 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8011dc6:	6828      	ldr	r0, [r5, #0]
 8011dc8:	466b      	mov	r3, sp
 8011dca:	6869      	ldr	r1, [r5, #4]
 8011dcc:	c303      	stmia	r3!, {r0, r1}
 8011dce:	4668      	mov	r0, sp
 8011dd0:	1d21      	adds	r1, r4, #4
 8011dd2:	f7ff ff15 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 8011dd6:	4668      	mov	r0, sp
 8011dd8:	f7ff ff55 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011ddc:	b988      	cbnz	r0, 8011e02 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8011dde:	f8bd 3000 	ldrh.w	r3, [sp]
 8011de2:	4669      	mov	r1, sp
 8011de4:	88a2      	ldrh	r2, [r4, #4]
 8011de6:	4620      	mov	r0, r4
 8011de8:	1a9b      	subs	r3, r3, r2
 8011dea:	88e2      	ldrh	r2, [r4, #6]
 8011dec:	f8ad 3000 	strh.w	r3, [sp]
 8011df0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011df4:	1a9b      	subs	r3, r3, r2
 8011df6:	4632      	mov	r2, r6
 8011df8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011dfc:	6823      	ldr	r3, [r4, #0]
 8011dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011e00:	4798      	blx	r3
 8011e02:	69a4      	ldr	r4, [r4, #24]
 8011e04:	e7db      	b.n	8011dbe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8011e06:	b002      	add	sp, #8
 8011e08:	bd70      	pop	{r4, r5, r6, pc}

08011e0a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8011e0a:	6803      	ldr	r3, [r0, #0]
 8011e0c:	b513      	push	{r0, r1, r4, lr}
 8011e0e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8011e12:	2300      	movs	r3, #0
 8011e14:	e9cd 3300 	strd	r3, r3, [sp]
 8011e18:	466b      	mov	r3, sp
 8011e1a:	47a0      	blx	r4
 8011e1c:	b002      	add	sp, #8
 8011e1e:	bd10      	pop	{r4, pc}

08011e20 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8011e20:	2301      	movs	r3, #1
 8011e22:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8011e26:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8011e2a:	4770      	bx	lr

08011e2c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8011e32:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8011e36:	4770      	bx	lr

08011e38 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8011e38:	6843      	ldr	r3, [r0, #4]
 8011e3a:	2201      	movs	r2, #1
 8011e3c:	725a      	strb	r2, [r3, #9]
 8011e3e:	6840      	ldr	r0, [r0, #4]
 8011e40:	6803      	ldr	r3, [r0, #0]
 8011e42:	691b      	ldr	r3, [r3, #16]
 8011e44:	4718      	bx	r3

08011e46 <_ZN8touchgfx3HAL8flushDMAEv>:
 8011e46:	6840      	ldr	r0, [r0, #4]
 8011e48:	6803      	ldr	r3, [r0, #0]
 8011e4a:	689b      	ldr	r3, [r3, #8]
 8011e4c:	4718      	bx	r3

08011e4e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8011e4e:	b530      	push	{r4, r5, lr}
 8011e50:	b08b      	sub	sp, #44	@ 0x2c
 8011e52:	6804      	ldr	r4, [r0, #0]
 8011e54:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8011e58:	9509      	str	r5, [sp, #36]	@ 0x24
 8011e5a:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8011e5e:	9508      	str	r5, [sp, #32]
 8011e60:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8011e64:	9507      	str	r5, [sp, #28]
 8011e66:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8011e6a:	9506      	str	r5, [sp, #24]
 8011e6c:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8011e70:	9505      	str	r5, [sp, #20]
 8011e72:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8011e76:	9504      	str	r5, [sp, #16]
 8011e78:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8011e7c:	9503      	str	r5, [sp, #12]
 8011e7e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8011e82:	9502      	str	r5, [sp, #8]
 8011e84:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8011e88:	e9cd 3500 	strd	r3, r5, [sp]
 8011e8c:	4613      	mov	r3, r2
 8011e8e:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8011e90:	2200      	movs	r2, #0
 8011e92:	47a0      	blx	r4
 8011e94:	b00b      	add	sp, #44	@ 0x2c
 8011e96:	bd30      	pop	{r4, r5, pc}

08011e98 <_ZN8touchgfx3HAL10beginFrameEv>:
 8011e98:	4b04      	ldr	r3, [pc, #16]	@ (8011eac <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8011e9a:	781b      	ldrb	r3, [r3, #0]
 8011e9c:	b123      	cbz	r3, 8011ea8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8011e9e:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8011ea2:	f080 0001 	eor.w	r0, r0, #1
 8011ea6:	4770      	bx	lr
 8011ea8:	2001      	movs	r0, #1
 8011eaa:	4770      	bx	lr
 8011eac:	200279d6 	.word	0x200279d6

08011eb0 <_ZN8touchgfx3HAL8endFrameEv>:
 8011eb0:	b510      	push	{r4, lr}
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	6840      	ldr	r0, [r0, #4]
 8011eb6:	6803      	ldr	r3, [r0, #0]
 8011eb8:	689b      	ldr	r3, [r3, #8]
 8011eba:	4798      	blx	r3
 8011ebc:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8011ec0:	b113      	cbz	r3, 8011ec8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8011ec8:	bd10      	pop	{r4, pc}

08011eca <_ZN8touchgfx3HAL10initializeEv>:
 8011eca:	b510      	push	{r4, lr}
 8011ecc:	4604      	mov	r4, r0
 8011ece:	f7ef ffbb 	bl	8001e48 <_ZN8touchgfx10OSWrappers10initializeEv>
 8011ed2:	f7ef f847 	bl	8000f64 <_ZN8touchgfx4GPIO4initEv>
 8011ed6:	6860      	ldr	r0, [r4, #4]
 8011ed8:	6803      	ldr	r3, [r0, #0]
 8011eda:	68db      	ldr	r3, [r3, #12]
 8011edc:	4798      	blx	r3
 8011ede:	68e0      	ldr	r0, [r4, #12]
 8011ee0:	6803      	ldr	r3, [r0, #0]
 8011ee2:	689b      	ldr	r3, [r3, #8]
 8011ee4:	4798      	blx	r3
 8011ee6:	6823      	ldr	r3, [r4, #0]
 8011ee8:	4620      	mov	r0, r4
 8011eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ef0:	4718      	bx	r3
	...

08011ef4 <_ZN8touchgfx3HAL4tickEv>:
 8011ef4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011ef6:	6803      	ldr	r3, [r0, #0]
 8011ef8:	4604      	mov	r4, r0
 8011efa:	4d5b      	ldr	r5, [pc, #364]	@ (8012068 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8011efc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011f00:	4798      	blx	r3
 8011f02:	2800      	cmp	r0, #0
 8011f04:	f000 8095 	beq.w	8012032 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8011f08:	2001      	movs	r0, #1
 8011f0a:	2600      	movs	r6, #0
 8011f0c:	f7ee ff90 	bl	8000e30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8011f10:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8011f14:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8011f18:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8011f1c:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8011f20:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8011f24:	b133      	cbz	r3, 8011f34 <_ZN8touchgfx3HAL4tickEv+0x40>
 8011f26:	6823      	ldr	r3, [r4, #0]
 8011f28:	4620      	mov	r0, r4
 8011f2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8011f2e:	4798      	blx	r3
 8011f30:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8011f34:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8011f38:	2601      	movs	r6, #1
 8011f3a:	6862      	ldr	r2, [r4, #4]
 8011f3c:	f083 0301 	eor.w	r3, r3, #1
 8011f40:	702e      	strb	r6, [r5, #0]
 8011f42:	7253      	strb	r3, [r2, #9]
 8011f44:	f006 f942 	bl	80181cc <_ZN8touchgfx11Application11getInstanceEv>
 8011f48:	6803      	ldr	r3, [r0, #0]
 8011f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011f4c:	4798      	blx	r3
 8011f4e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8011f52:	b90b      	cbnz	r3, 8011f58 <_ZN8touchgfx3HAL4tickEv+0x64>
 8011f54:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8011f58:	f006 f938 	bl	80181cc <_ZN8touchgfx11Application11getInstanceEv>
 8011f5c:	6803      	ldr	r3, [r0, #0]
 8011f5e:	695b      	ldr	r3, [r3, #20]
 8011f60:	4798      	blx	r3
 8011f62:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8011f64:	6803      	ldr	r3, [r0, #0]
 8011f66:	691b      	ldr	r3, [r3, #16]
 8011f68:	4798      	blx	r3
 8011f6a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8011f6e:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8011f72:	3b01      	subs	r3, #1
 8011f74:	b2db      	uxtb	r3, r3
 8011f76:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8011f7a:	b10a      	cbz	r2, 8011f80 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d1eb      	bne.n	8011f58 <_ZN8touchgfx3HAL4tickEv+0x64>
 8011f80:	4a3a      	ldr	r2, [pc, #232]	@ (801206c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8011f82:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8011f86:	7813      	ldrb	r3, [r2, #0]
 8011f88:	3301      	adds	r3, #1
 8011f8a:	b25b      	sxtb	r3, r3
 8011f8c:	4299      	cmp	r1, r3
 8011f8e:	7013      	strb	r3, [r2, #0]
 8011f90:	dc10      	bgt.n	8011fb4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8011f92:	2300      	movs	r3, #0
 8011f94:	68e0      	ldr	r0, [r4, #12]
 8011f96:	a902      	add	r1, sp, #8
 8011f98:	7013      	strb	r3, [r2, #0]
 8011f9a:	aa03      	add	r2, sp, #12
 8011f9c:	6803      	ldr	r3, [r0, #0]
 8011f9e:	68db      	ldr	r3, [r3, #12]
 8011fa0:	4798      	blx	r3
 8011fa2:	6823      	ldr	r3, [r4, #0]
 8011fa4:	2800      	cmp	r0, #0
 8011fa6:	d050      	beq.n	801204a <_ZN8touchgfx3HAL4tickEv+0x156>
 8011fa8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8011fac:	4620      	mov	r0, r4
 8011fae:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011fb2:	4798      	blx	r3
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	6960      	ldr	r0, [r4, #20]
 8011fb8:	f88d 3007 	strb.w	r3, [sp, #7]
 8011fbc:	b158      	cbz	r0, 8011fd6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8011fbe:	6803      	ldr	r3, [r0, #0]
 8011fc0:	f10d 0107 	add.w	r1, sp, #7
 8011fc4:	68db      	ldr	r3, [r3, #12]
 8011fc6:	4798      	blx	r3
 8011fc8:	b128      	cbz	r0, 8011fd6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8011fca:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8011fcc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011fd0:	6803      	ldr	r3, [r0, #0]
 8011fd2:	68db      	ldr	r3, [r3, #12]
 8011fd4:	4798      	blx	r3
 8011fd6:	f104 001c 	add.w	r0, r4, #28
 8011fda:	f017 f8f1 	bl	80291c0 <_ZN8touchgfx8Gestures4tickEv>
 8011fde:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8011fe2:	b30b      	cbz	r3, 8012028 <_ZN8touchgfx3HAL4tickEv+0x134>
 8011fe4:	6920      	ldr	r0, [r4, #16]
 8011fe6:	6803      	ldr	r3, [r0, #0]
 8011fe8:	691b      	ldr	r3, [r3, #16]
 8011fea:	4798      	blx	r3
 8011fec:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8011fee:	4606      	mov	r6, r0
 8011ff0:	b903      	cbnz	r3, 8011ff4 <_ZN8touchgfx3HAL4tickEv+0x100>
 8011ff2:	6760      	str	r0, [r4, #116]	@ 0x74
 8011ff4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8011ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8012070 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8011ff8:	1af3      	subs	r3, r6, r3
 8011ffa:	4293      	cmp	r3, r2
 8011ffc:	d914      	bls.n	8012028 <_ZN8touchgfx3HAL4tickEv+0x134>
 8011ffe:	6920      	ldr	r0, [r4, #16]
 8012000:	6803      	ldr	r3, [r0, #0]
 8012002:	699b      	ldr	r3, [r3, #24]
 8012004:	4798      	blx	r3
 8012006:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8012008:	2264      	movs	r2, #100	@ 0x64
 801200a:	1af3      	subs	r3, r6, r3
 801200c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012010:	fbb0 f0f3 	udiv	r0, r0, r3
 8012014:	2800      	cmp	r0, #0
 8012016:	dc1d      	bgt.n	8012054 <_ZN8touchgfx3HAL4tickEv+0x160>
 8012018:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 801201c:	6920      	ldr	r0, [r4, #16]
 801201e:	2100      	movs	r1, #0
 8012020:	6803      	ldr	r3, [r0, #0]
 8012022:	69db      	ldr	r3, [r3, #28]
 8012024:	4798      	blx	r3
 8012026:	6766      	str	r6, [r4, #116]	@ 0x74
 8012028:	f006 f8d0 	bl	80181cc <_ZN8touchgfx11Application11getInstanceEv>
 801202c:	6803      	ldr	r3, [r0, #0]
 801202e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012030:	4798      	blx	r3
 8012032:	6823      	ldr	r3, [r4, #0]
 8012034:	4620      	mov	r0, r4
 8012036:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801203a:	4798      	blx	r3
 801203c:	2001      	movs	r0, #1
 801203e:	f7ee ff27 	bl	8000e90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8012042:	2300      	movs	r3, #0
 8012044:	702b      	strb	r3, [r5, #0]
 8012046:	b004      	add	sp, #16
 8012048:	bd70      	pop	{r4, r5, r6, pc}
 801204a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801204e:	4620      	mov	r0, r4
 8012050:	4798      	blx	r3
 8012052:	e7af      	b.n	8011fb4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012054:	2863      	cmp	r0, #99	@ 0x63
 8012056:	bfcb      	itete	gt
 8012058:	2300      	movgt	r3, #0
 801205a:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 801205e:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8012062:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8012066:	e7d9      	b.n	801201c <_ZN8touchgfx3HAL4tickEv+0x128>
 8012068:	200279dc 	.word	0x200279dc
 801206c:	200279dd 	.word	0x200279dd
 8012070:	05f5e100 	.word	0x05f5e100

08012074 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8012074:	b510      	push	{r4, lr}
 8012076:	4604      	mov	r4, r0
 8012078:	f7ef ff16 	bl	8001ea8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 801207c:	2200      	movs	r2, #0
 801207e:	6863      	ldr	r3, [r4, #4]
 8012080:	729a      	strb	r2, [r3, #10]
 8012082:	bd10      	pop	{r4, pc}

08012084 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8012084:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8012086:	301c      	adds	r0, #28
 8012088:	f017 b898 	b.w	80291bc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801208c <_ZN8touchgfx3HAL5touchEll>:
 801208c:	b530      	push	{r4, r5, lr}
 801208e:	b087      	sub	sp, #28
 8012090:	4604      	mov	r4, r0
 8012092:	a804      	add	r0, sp, #16
 8012094:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8012098:	f005 fec6 	bl	8017e28 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801209c:	9b04      	ldr	r3, [sp, #16]
 801209e:	a906      	add	r1, sp, #24
 80120a0:	a803      	add	r0, sp, #12
 80120a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80120a6:	9b05      	ldr	r3, [sp, #20]
 80120a8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80120ac:	f005 ff0e 	bl	8017ecc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80120b0:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 80120b4:	f104 001c 	add.w	r0, r4, #28
 80120b8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80120bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80120c0:	b189      	cbz	r1, 80120e6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80120c2:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 80120c6:	9300      	str	r3, [sp, #0]
 80120c8:	4613      	mov	r3, r2
 80120ca:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80120ce:	462a      	mov	r2, r5
 80120d0:	f017 f884 	bl	80291dc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80120d4:	b128      	cbz	r0, 80120e2 <_ZN8touchgfx3HAL5touchEll+0x56>
 80120d6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80120da:	6623      	str	r3, [r4, #96]	@ 0x60
 80120dc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80120e0:	6663      	str	r3, [r4, #100]	@ 0x64
 80120e2:	b007      	add	sp, #28
 80120e4:	bd30      	pop	{r4, r5, pc}
 80120e6:	f017 f8b9 	bl	802925c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80120ea:	2301      	movs	r3, #1
 80120ec:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80120f0:	e7f1      	b.n	80120d6 <_ZN8touchgfx3HAL5touchEll+0x4a>

080120f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80120f2:	b510      	push	{r4, lr}
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d046      	beq.n	8012186 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80120f8:	ea81 0002 	eor.w	r0, r1, r2
 80120fc:	07c4      	lsls	r4, r0, #31
 80120fe:	d508      	bpl.n	8012112 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8012100:	440b      	add	r3, r1
 8012102:	3a01      	subs	r2, #1
 8012104:	428b      	cmp	r3, r1
 8012106:	d93e      	bls.n	8012186 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012108:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801210c:	f801 0b01 	strb.w	r0, [r1], #1
 8012110:	e7f8      	b.n	8012104 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8012112:	07d0      	lsls	r0, r2, #31
 8012114:	bf42      	ittt	mi
 8012116:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801211a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801211e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8012122:	2b01      	cmp	r3, #1
 8012124:	d911      	bls.n	801214a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012126:	ea81 0402 	eor.w	r4, r1, r2
 801212a:	4610      	mov	r0, r2
 801212c:	07a4      	lsls	r4, r4, #30
 801212e:	d022      	beq.n	8012176 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8012130:	f023 0401 	bic.w	r4, r3, #1
 8012134:	440c      	add	r4, r1
 8012136:	428c      	cmp	r4, r1
 8012138:	4602      	mov	r2, r0
 801213a:	d904      	bls.n	8012146 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801213c:	8812      	ldrh	r2, [r2, #0]
 801213e:	3002      	adds	r0, #2
 8012140:	f821 2b02 	strh.w	r2, [r1], #2
 8012144:	e7f7      	b.n	8012136 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8012146:	f003 0301 	and.w	r3, r3, #1
 801214a:	f023 0003 	bic.w	r0, r3, #3
 801214e:	4408      	add	r0, r1
 8012150:	4288      	cmp	r0, r1
 8012152:	4614      	mov	r4, r2
 8012154:	d904      	bls.n	8012160 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8012156:	6824      	ldr	r4, [r4, #0]
 8012158:	3204      	adds	r2, #4
 801215a:	f841 4b04 	str.w	r4, [r1], #4
 801215e:	e7f7      	b.n	8012150 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8012160:	f003 0303 	and.w	r3, r3, #3
 8012164:	3a01      	subs	r2, #1
 8012166:	440b      	add	r3, r1
 8012168:	428b      	cmp	r3, r1
 801216a:	d90c      	bls.n	8012186 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801216c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012170:	f801 0b01 	strb.w	r0, [r1], #1
 8012174:	e7f8      	b.n	8012168 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8012176:	0790      	lsls	r0, r2, #30
 8012178:	d0e7      	beq.n	801214a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801217a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801217e:	3b02      	subs	r3, #2
 8012180:	f821 0b02 	strh.w	r0, [r1], #2
 8012184:	e7e1      	b.n	801214a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012186:	2001      	movs	r0, #1
 8012188:	bd10      	pop	{r4, pc}

0801218a <_ZN8touchgfx3HAL7noTouchEv>:
 801218a:	b510      	push	{r4, lr}
 801218c:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8012190:	4604      	mov	r4, r0
 8012192:	b153      	cbz	r3, 80121aa <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8012194:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8012198:	2101      	movs	r1, #1
 801219a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 801219e:	301c      	adds	r0, #28
 80121a0:	f017 f85c 	bl	802925c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80121a4:	2300      	movs	r3, #0
 80121a6:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80121aa:	bd10      	pop	{r4, pc}

080121ac <_ZN8touchgfx8Drawable5setXYEss>:
 80121ac:	b570      	push	{r4, r5, r6, lr}
 80121ae:	6803      	ldr	r3, [r0, #0]
 80121b0:	4604      	mov	r4, r0
 80121b2:	4615      	mov	r5, r2
 80121b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121b6:	4798      	blx	r3
 80121b8:	6823      	ldr	r3, [r4, #0]
 80121ba:	4629      	mov	r1, r5
 80121bc:	4620      	mov	r0, r4
 80121be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80121c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121c4:	4718      	bx	r3
	...

080121c8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80121c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121cc:	b085      	sub	sp, #20
 80121ce:	4604      	mov	r4, r0
 80121d0:	2000      	movs	r0, #0
 80121d2:	4699      	mov	r9, r3
 80121d4:	ad04      	add	r5, sp, #16
 80121d6:	460f      	mov	r7, r1
 80121d8:	4690      	mov	r8, r2
 80121da:	f845 0d04 	str.w	r0, [r5, #-4]!
 80121de:	69a0      	ldr	r0, [r4, #24]
 80121e0:	6806      	ldr	r6, [r0, #0]
 80121e2:	9501      	str	r5, [sp, #4]
 80121e4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 80121e8:	9500      	str	r5, [sp, #0]
 80121ea:	6835      	ldr	r5, [r6, #0]
 80121ec:	47a8      	blx	r5
 80121ee:	4d10      	ldr	r5, [pc, #64]	@ (8012230 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80121f0:	4606      	mov	r6, r0
 80121f2:	f8a5 9000 	strh.w	r9, [r5]
 80121f6:	f7f2 fd93 	bl	8004d20 <_ZN8touchgfx3HAL3lcdEv>
 80121fa:	6803      	ldr	r3, [r0, #0]
 80121fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121fe:	4798      	blx	r3
 8012200:	b128      	cbz	r0, 801220e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8012202:	2801      	cmp	r0, #1
 8012204:	d00b      	beq.n	801221e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8012206:	4630      	mov	r0, r6
 8012208:	b005      	add	sp, #20
 801220a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801220e:	882b      	ldrh	r3, [r5, #0]
 8012210:	fb08 7203 	mla	r2, r8, r3, r7
 8012214:	9b03      	ldr	r3, [sp, #12]
 8012216:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801221a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801221c:	e7f3      	b.n	8012206 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801221e:	882a      	ldrh	r2, [r5, #0]
 8012220:	9b03      	ldr	r3, [sp, #12]
 8012222:	fb08 7202 	mla	r2, r8, r2, r7
 8012226:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801222a:	1a9a      	subs	r2, r3, r2
 801222c:	63e2      	str	r2, [r4, #60]	@ 0x3c
 801222e:	e7ea      	b.n	8012206 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8012230:	200279d2 	.word	0x200279d2

08012234 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8012234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012236:	b08b      	sub	sp, #44	@ 0x2c
 8012238:	4617      	mov	r7, r2
 801223a:	4604      	mov	r4, r0
 801223c:	460e      	mov	r6, r1
 801223e:	461d      	mov	r5, r3
 8012240:	f7f2 fd6e 	bl	8004d20 <_ZN8touchgfx3HAL3lcdEv>
 8012244:	6803      	ldr	r3, [r0, #0]
 8012246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012248:	4798      	blx	r3
 801224a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801224e:	9007      	str	r0, [sp, #28]
 8012250:	4631      	mov	r1, r6
 8012252:	6822      	ldr	r2, [r4, #0]
 8012254:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012258:	4b0c      	ldr	r3, [pc, #48]	@ (801228c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801225a:	4620      	mov	r0, r4
 801225c:	881b      	ldrh	r3, [r3, #0]
 801225e:	9306      	str	r3, [sp, #24]
 8012260:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8012264:	9305      	str	r3, [sp, #20]
 8012266:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 801226a:	9304      	str	r3, [sp, #16]
 801226c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8012270:	9303      	str	r3, [sp, #12]
 8012272:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8012276:	9302      	str	r3, [sp, #8]
 8012278:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801227c:	e9cd 5300 	strd	r5, r3, [sp]
 8012280:	463b      	mov	r3, r7
 8012282:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8012284:	2200      	movs	r2, #0
 8012286:	47a8      	blx	r5
 8012288:	b00b      	add	sp, #44	@ 0x2c
 801228a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801228c:	200279d2 	.word	0x200279d2

08012290 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8012290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012294:	4698      	mov	r8, r3
 8012296:	6803      	ldr	r3, [r0, #0]
 8012298:	b08b      	sub	sp, #44	@ 0x2c
 801229a:	4617      	mov	r7, r2
 801229c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 801229e:	460e      	mov	r6, r1
 80122a0:	4b13      	ldr	r3, [pc, #76]	@ (80122f0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80122a2:	4604      	mov	r4, r0
 80122a4:	f8b3 9000 	ldrh.w	r9, [r3]
 80122a8:	f7f2 fd3a 	bl	8004d20 <_ZN8touchgfx3HAL3lcdEv>
 80122ac:	6803      	ldr	r3, [r0, #0]
 80122ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122b0:	4798      	blx	r3
 80122b2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80122b6:	2200      	movs	r2, #0
 80122b8:	4631      	mov	r1, r6
 80122ba:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80122be:	2302      	movs	r3, #2
 80122c0:	4620      	mov	r0, r4
 80122c2:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80122c6:	2301      	movs	r3, #1
 80122c8:	9305      	str	r3, [sp, #20]
 80122ca:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80122ce:	9304      	str	r3, [sp, #16]
 80122d0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80122d4:	9303      	str	r3, [sp, #12]
 80122d6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80122da:	9302      	str	r3, [sp, #8]
 80122dc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80122e0:	e9cd 8300 	strd	r8, r3, [sp]
 80122e4:	463b      	mov	r3, r7
 80122e6:	47a8      	blx	r5
 80122e8:	b00b      	add	sp, #44	@ 0x2c
 80122ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122ee:	bf00      	nop
 80122f0:	200279d2 	.word	0x200279d2

080122f4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80122f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80122f8:	4698      	mov	r8, r3
 80122fa:	6803      	ldr	r3, [r0, #0]
 80122fc:	b087      	sub	sp, #28
 80122fe:	460e      	mov	r6, r1
 8012300:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8012302:	4617      	mov	r7, r2
 8012304:	4b0f      	ldr	r3, [pc, #60]	@ (8012344 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8012306:	4604      	mov	r4, r0
 8012308:	f8b3 9000 	ldrh.w	r9, [r3]
 801230c:	f7f2 fd08 	bl	8004d20 <_ZN8touchgfx3HAL3lcdEv>
 8012310:	6803      	ldr	r3, [r0, #0]
 8012312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012314:	4798      	blx	r3
 8012316:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 801231a:	463a      	mov	r2, r7
 801231c:	4631      	mov	r1, r6
 801231e:	f8cd 900c 	str.w	r9, [sp, #12]
 8012322:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8012326:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 801232a:	4620      	mov	r0, r4
 801232c:	9302      	str	r3, [sp, #8]
 801232e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8012332:	9301      	str	r3, [sp, #4]
 8012334:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8012338:	9300      	str	r3, [sp, #0]
 801233a:	4643      	mov	r3, r8
 801233c:	47a8      	blx	r5
 801233e:	b007      	add	sp, #28
 8012340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012344:	200279d2 	.word	0x200279d2

08012348 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8012348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801234c:	4604      	mov	r4, r0
 801234e:	b08f      	sub	sp, #60	@ 0x3c
 8012350:	4610      	mov	r0, r2
 8012352:	460d      	mov	r5, r1
 8012354:	4691      	mov	r9, r2
 8012356:	461e      	mov	r6, r3
 8012358:	f009 fadc 	bl	801b914 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801235c:	2800      	cmp	r0, #0
 801235e:	f000 809d 	beq.w	801249c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8012362:	6823      	ldr	r3, [r4, #0]
 8012364:	4620      	mov	r0, r4
 8012366:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8012500 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801236a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 801236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012370:	4798      	blx	r3
 8012372:	6823      	ldr	r3, [r4, #0]
 8012374:	4620      	mov	r0, r4
 8012376:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8012504 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801237a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801237c:	4798      	blx	r3
 801237e:	f8bb 3000 	ldrh.w	r3, [fp]
 8012382:	4f5c      	ldr	r7, [pc, #368]	@ (80124f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012384:	9301      	str	r3, [sp, #4]
 8012386:	f8ba 3000 	ldrh.w	r3, [sl]
 801238a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801238e:	4640      	mov	r0, r8
 8012390:	9302      	str	r3, [sp, #8]
 8012392:	883b      	ldrh	r3, [r7, #0]
 8012394:	9303      	str	r3, [sp, #12]
 8012396:	4b58      	ldr	r3, [pc, #352]	@ (80124f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012398:	881a      	ldrh	r2, [r3, #0]
 801239a:	9305      	str	r3, [sp, #20]
 801239c:	9204      	str	r2, [sp, #16]
 801239e:	f009 fb4d 	bl	801ba3c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80123a2:	8038      	strh	r0, [r7, #0]
 80123a4:	4640      	mov	r0, r8
 80123a6:	f009 fb7d 	bl	801baa4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80123aa:	9b05      	ldr	r3, [sp, #20]
 80123ac:	b280      	uxth	r0, r0
 80123ae:	8018      	strh	r0, [r3, #0]
 80123b0:	4b52      	ldr	r3, [pc, #328]	@ (80124fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80123b2:	781b      	ldrb	r3, [r3, #0]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d174      	bne.n	80124a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80123b8:	883b      	ldrh	r3, [r7, #0]
 80123ba:	f8aa 0000 	strh.w	r0, [sl]
 80123be:	f8ab 3000 	strh.w	r3, [fp]
 80123c2:	4648      	mov	r0, r9
 80123c4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80123c8:	f009 faa4 	bl	801b914 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80123cc:	2200      	movs	r2, #0
 80123ce:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80123d2:	4611      	mov	r1, r2
 80123d4:	4628      	mov	r0, r5
 80123d6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80123da:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80123de:	f7ff fee5 	bl	80121ac <_ZN8touchgfx8Drawable5setXYEss>
 80123e2:	2301      	movs	r3, #1
 80123e4:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 80123e8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80123ec:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	dd5c      	ble.n	80124ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80123f4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	dd58      	ble.n	80124ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80123fc:	462a      	mov	r2, r5
 80123fe:	ab0a      	add	r3, sp, #40	@ 0x28
 8012400:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012404:	6851      	ldr	r1, [r2, #4]
 8012406:	c303      	stmia	r3!, {r0, r1}
 8012408:	4631      	mov	r1, r6
 801240a:	a80a      	add	r0, sp, #40	@ 0x28
 801240c:	f7ff fbf8 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 8012410:	4b38      	ldr	r3, [pc, #224]	@ (80124f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012412:	2100      	movs	r1, #0
 8012414:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012418:	4b37      	ldr	r3, [pc, #220]	@ (80124f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801241a:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801241e:	aa0a      	add	r2, sp, #40	@ 0x28
 8012420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012424:	910c      	str	r1, [sp, #48]	@ 0x30
 8012426:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801242a:	ab08      	add	r3, sp, #32
 801242c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012430:	e883 0003 	stmia.w	r3, {r0, r1}
 8012434:	4618      	mov	r0, r3
 8012436:	a90c      	add	r1, sp, #48	@ 0x30
 8012438:	f7ff fbe2 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 801243c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801243e:	2b00      	cmp	r3, #0
 8012440:	d13c      	bne.n	80124bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8012442:	2000      	movs	r0, #0
 8012444:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8012448:	2600      	movs	r6, #0
 801244a:	696b      	ldr	r3, [r5, #20]
 801244c:	a908      	add	r1, sp, #32
 801244e:	682a      	ldr	r2, [r5, #0]
 8012450:	4628      	mov	r0, r5
 8012452:	9305      	str	r3, [sp, #20]
 8012454:	616e      	str	r6, [r5, #20]
 8012456:	6892      	ldr	r2, [r2, #8]
 8012458:	4790      	blx	r2
 801245a:	9b05      	ldr	r3, [sp, #20]
 801245c:	4652      	mov	r2, sl
 801245e:	4649      	mov	r1, r9
 8012460:	616b      	str	r3, [r5, #20]
 8012462:	4628      	mov	r0, r5
 8012464:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8012468:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 801246c:	f7ff fe9e 	bl	80121ac <_ZN8touchgfx8Drawable5setXYEss>
 8012470:	9a01      	ldr	r2, [sp, #4]
 8012472:	4b23      	ldr	r3, [pc, #140]	@ (8012500 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8012474:	4620      	mov	r0, r4
 8012476:	801a      	strh	r2, [r3, #0]
 8012478:	9a02      	ldr	r2, [sp, #8]
 801247a:	4b22      	ldr	r3, [pc, #136]	@ (8012504 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801247c:	801a      	strh	r2, [r3, #0]
 801247e:	9a03      	ldr	r2, [sp, #12]
 8012480:	4b1c      	ldr	r3, [pc, #112]	@ (80124f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012482:	801a      	strh	r2, [r3, #0]
 8012484:	4b1c      	ldr	r3, [pc, #112]	@ (80124f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012486:	9a04      	ldr	r2, [sp, #16]
 8012488:	801a      	strh	r2, [r3, #0]
 801248a:	6823      	ldr	r3, [r4, #0]
 801248c:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8012490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012492:	4798      	blx	r3
 8012494:	6823      	ldr	r3, [r4, #0]
 8012496:	4620      	mov	r0, r4
 8012498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801249a:	4798      	blx	r3
 801249c:	b00f      	add	sp, #60	@ 0x3c
 801249e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124a2:	883b      	ldrh	r3, [r7, #0]
 80124a4:	f8ab 0000 	strh.w	r0, [fp]
 80124a8:	f8aa 3000 	strh.w	r3, [sl]
 80124ac:	e789      	b.n	80123c2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80124ae:	462a      	mov	r2, r5
 80124b0:	ab0a      	add	r3, sp, #40	@ 0x28
 80124b2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80124b6:	6851      	ldr	r1, [r2, #4]
 80124b8:	c303      	stmia	r3!, {r0, r1}
 80124ba:	e7a9      	b.n	8012410 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80124bc:	a807      	add	r0, sp, #28
 80124be:	f009 fc33 	bl	801bd28 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80124c2:	4606      	mov	r6, r0
 80124c4:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80124c6:	6803      	ldr	r3, [r0, #0]
 80124c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124ca:	4798      	blx	r3
 80124cc:	4286      	cmp	r6, r0
 80124ce:	d1b8      	bne.n	8012442 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80124d0:	f7f2 fc26 	bl	8004d20 <_ZN8touchgfx3HAL3lcdEv>
 80124d4:	6803      	ldr	r3, [r0, #0]
 80124d6:	4606      	mov	r6, r0
 80124d8:	a807      	add	r0, sp, #28
 80124da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80124dc:	9305      	str	r3, [sp, #20]
 80124de:	f009 fc23 	bl	801bd28 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80124e2:	9b05      	ldr	r3, [sp, #20]
 80124e4:	4601      	mov	r1, r0
 80124e6:	4630      	mov	r0, r6
 80124e8:	4798      	blx	r3
 80124ea:	f080 0001 	eor.w	r0, r0, #1
 80124ee:	b2c0      	uxtb	r0, r0
 80124f0:	e7a8      	b.n	8012444 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80124f2:	bf00      	nop
 80124f4:	200279cc 	.word	0x200279cc
 80124f8:	200279ce 	.word	0x200279ce
 80124fc:	200279d0 	.word	0x200279d0
 8012500:	200279d2 	.word	0x200279d2
 8012504:	200279d4 	.word	0x200279d4

08012508 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8012508:	4b07      	ldr	r3, [pc, #28]	@ (8012528 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801250a:	b510      	push	{r4, lr}
 801250c:	781b      	ldrb	r3, [r3, #0]
 801250e:	4604      	mov	r4, r0
 8012510:	b13b      	cbz	r3, 8012522 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012512:	6803      	ldr	r3, [r0, #0]
 8012514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012516:	4798      	blx	r3
 8012518:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801251a:	4283      	cmp	r3, r0
 801251c:	d101      	bne.n	8012522 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801251e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8012520:	bd10      	pop	{r4, pc}
 8012522:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8012524:	e7fc      	b.n	8012520 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8012526:	bf00      	nop
 8012528:	200279d6 	.word	0x200279d6

0801252c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801252c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012530:	461d      	mov	r5, r3
 8012532:	b08a      	sub	sp, #40	@ 0x28
 8012534:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012538:	4690      	mov	r8, r2
 801253a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 801253e:	2400      	movs	r4, #0
 8012540:	4607      	mov	r7, r0
 8012542:	fb06 8505 	mla	r5, r6, r5, r8
 8012546:	9404      	str	r4, [sp, #16]
 8012548:	f88d 4020 	strb.w	r4, [sp, #32]
 801254c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012550:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8012554:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012558:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801255c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012560:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8012564:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012568:	f7ff ffce 	bl	8012508 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801256c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f8ad 601e 	strh.w	r6, [sp, #30]
 8012576:	a901      	add	r1, sp, #4
 8012578:	9505      	str	r5, [sp, #20]
 801257a:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801257e:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8012582:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8012586:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801258a:	6803      	ldr	r3, [r0, #0]
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	4798      	blx	r3
 8012590:	b00a      	add	sp, #40	@ 0x28
 8012592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012596 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8012596:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801259a:	b08b      	sub	sp, #44	@ 0x2c
 801259c:	2400      	movs	r4, #0
 801259e:	4691      	mov	r9, r2
 80125a0:	461d      	mov	r5, r3
 80125a2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 80125a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80125aa:	4688      	mov	r8, r1
 80125ac:	4607      	mov	r7, r0
 80125ae:	9404      	str	r4, [sp, #16]
 80125b0:	fb06 9505 	mla	r5, r6, r5, r9
 80125b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80125b8:	f7ff ffa6 	bl	8012508 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80125bc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80125c0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80125ca:	a901      	add	r1, sp, #4
 80125cc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80125d0:	9505      	str	r5, [sp, #20]
 80125d2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80125d6:	f8ad 401c 	strh.w	r4, [sp, #28]
 80125da:	f8ad 601e 	strh.w	r6, [sp, #30]
 80125de:	f8cd 8010 	str.w	r8, [sp, #16]
 80125e2:	f8ad 4020 	strh.w	r4, [sp, #32]
 80125e6:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80125ea:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80125ee:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80125f2:	6803      	ldr	r3, [r0, #0]
 80125f4:	685b      	ldr	r3, [r3, #4]
 80125f6:	4798      	blx	r3
 80125f8:	b00b      	add	sp, #44	@ 0x2c
 80125fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08012600 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8012600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012604:	b08a      	sub	sp, #40	@ 0x28
 8012606:	4698      	mov	r8, r3
 8012608:	2300      	movs	r3, #0
 801260a:	4606      	mov	r6, r0
 801260c:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8012610:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8012614:	2d0b      	cmp	r5, #11
 8012616:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801261a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 801261e:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8012622:	9304      	str	r3, [sp, #16]
 8012624:	d137      	bne.n	8012696 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8012626:	2380      	movs	r3, #128	@ 0x80
 8012628:	f88d 0020 	strb.w	r0, [sp, #32]
 801262c:	4630      	mov	r0, r6
 801262e:	9203      	str	r2, [sp, #12]
 8012630:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012634:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8012638:	f8ad 3018 	strh.w	r3, [sp, #24]
 801263c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8012640:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012644:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8012648:	f8ad 301c 	strh.w	r3, [sp, #28]
 801264c:	f7ff ff5c 	bl	8012508 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012650:	2c0b      	cmp	r4, #11
 8012652:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8012656:	f8ad 701e 	strh.w	r7, [sp, #30]
 801265a:	bf94      	ite	ls
 801265c:	4b19      	ldrls	r3, [pc, #100]	@ (80126c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801265e:	2100      	movhi	r1, #0
 8012660:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8012664:	bf98      	it	ls
 8012666:	5d19      	ldrbls	r1, [r3, r4]
 8012668:	fb02 8307 	mla	r3, r2, r7, r8
 801266c:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8012670:	10c9      	asrs	r1, r1, #3
 8012672:	fb01 0003 	mla	r0, r1, r3, r0
 8012676:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801267a:	a901      	add	r1, sp, #4
 801267c:	9005      	str	r0, [sp, #20]
 801267e:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8012682:	2300      	movs	r3, #0
 8012684:	6870      	ldr	r0, [r6, #4]
 8012686:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801268a:	6803      	ldr	r3, [r0, #0]
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	4798      	blx	r3
 8012690:	b00a      	add	sp, #40	@ 0x28
 8012692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012696:	2d02      	cmp	r5, #2
 8012698:	d109      	bne.n	80126ae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801269a:	28ff      	cmp	r0, #255	@ 0xff
 801269c:	d105      	bne.n	80126aa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801269e:	f1bc 0f00 	cmp.w	ip, #0
 80126a2:	bf14      	ite	ne
 80126a4:	2340      	movne	r3, #64	@ 0x40
 80126a6:	2320      	moveq	r3, #32
 80126a8:	e7be      	b.n	8012628 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80126aa:	2340      	movs	r3, #64	@ 0x40
 80126ac:	e7bc      	b.n	8012628 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80126ae:	28ff      	cmp	r0, #255	@ 0xff
 80126b0:	d105      	bne.n	80126be <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80126b2:	f1bc 0f00 	cmp.w	ip, #0
 80126b6:	bf14      	ite	ne
 80126b8:	2304      	movne	r3, #4
 80126ba:	2301      	moveq	r3, #1
 80126bc:	e7b4      	b.n	8012628 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80126be:	2304      	movs	r3, #4
 80126c0:	e7b2      	b.n	8012628 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80126c2:	bf00      	nop
 80126c4:	0802e794 	.word	0x0802e794

080126c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80126c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126cc:	b08b      	sub	sp, #44	@ 0x2c
 80126ce:	461d      	mov	r5, r3
 80126d0:	2400      	movs	r4, #0
 80126d2:	4688      	mov	r8, r1
 80126d4:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 80126d8:	4693      	mov	fp, r2
 80126da:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80126de:	4607      	mov	r7, r0
 80126e0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80126e4:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 80126e8:	9404      	str	r4, [sp, #16]
 80126ea:	bf14      	ite	ne
 80126ec:	2308      	movne	r3, #8
 80126ee:	2302      	moveq	r3, #2
 80126f0:	fb05 b50a 	mla	r5, r5, sl, fp
 80126f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80126f8:	f7ff ff06 	bl	8012508 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80126fc:	2e0b      	cmp	r6, #11
 80126fe:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8012702:	a901      	add	r1, sp, #4
 8012704:	bf98      	it	ls
 8012706:	4b13      	ldrls	r3, [pc, #76]	@ (8012754 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8012708:	f8ad a01e 	strh.w	sl, [sp, #30]
 801270c:	bf98      	it	ls
 801270e:	5d9c      	ldrbls	r4, [r3, r6]
 8012710:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8012714:	10e4      	asrs	r4, r4, #3
 8012716:	f8cd 8010 	str.w	r8, [sp, #16]
 801271a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801271e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8012722:	fb04 0405 	mla	r4, r4, r5, r0
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f8ad 301a 	strh.w	r3, [sp, #26]
 801272c:	2300      	movs	r3, #0
 801272e:	9405      	str	r4, [sp, #20]
 8012730:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012734:	f88d 9020 	strb.w	r9, [sp, #32]
 8012738:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 801273c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8012740:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8012744:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8012748:	6803      	ldr	r3, [r0, #0]
 801274a:	685b      	ldr	r3, [r3, #4]
 801274c:	4798      	blx	r3
 801274e:	b00b      	add	sp, #44	@ 0x2c
 8012750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012754:	0802e794 	.word	0x0802e794

08012758 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8012758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801275c:	461e      	mov	r6, r3
 801275e:	4b0a      	ldr	r3, [pc, #40]	@ (8012788 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8012760:	460f      	mov	r7, r1
 8012762:	4690      	mov	r8, r2
 8012764:	881d      	ldrh	r5, [r3, #0]
 8012766:	f7f2 fadb 	bl	8004d20 <_ZN8touchgfx3HAL3lcdEv>
 801276a:	6803      	ldr	r3, [r0, #0]
 801276c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801276e:	4798      	blx	r3
 8012770:	280b      	cmp	r0, #11
 8012772:	bf96      	itet	ls
 8012774:	4b05      	ldrls	r3, [pc, #20]	@ (801278c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8012776:	2400      	movhi	r4, #0
 8012778:	5c1c      	ldrbls	r4, [r3, r0]
 801277a:	fb08 7005 	mla	r0, r8, r5, r7
 801277e:	10e4      	asrs	r4, r4, #3
 8012780:	fb04 6000 	mla	r0, r4, r0, r6
 8012784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012788:	200279d2 	.word	0x200279d2
 801278c:	0802e794 	.word	0x0802e794

08012790 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8012790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012792:	b08b      	sub	sp, #44	@ 0x2c
 8012794:	461f      	mov	r7, r3
 8012796:	4604      	mov	r4, r0
 8012798:	4616      	mov	r6, r2
 801279a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801279e:	2500      	movs	r5, #0
 80127a0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80127a4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80127a8:	9504      	str	r5, [sp, #16]
 80127aa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80127ae:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80127b2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80127b6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80127ba:	f8ad 301c 	strh.w	r3, [sp, #28]
 80127be:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80127c2:	f88d 3020 	strb.w	r3, [sp, #32]
 80127c6:	f7ff fe9f 	bl	8012508 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80127ca:	463a      	mov	r2, r7
 80127cc:	4631      	mov	r1, r6
 80127ce:	4603      	mov	r3, r0
 80127d0:	4620      	mov	r0, r4
 80127d2:	f7ff ffc1 	bl	8012758 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80127d6:	4b0e      	ldr	r3, [pc, #56]	@ (8012810 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80127d8:	9005      	str	r0, [sp, #20]
 80127da:	881b      	ldrh	r3, [r3, #0]
 80127dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80127e0:	f7f2 fa9e 	bl	8004d20 <_ZN8touchgfx3HAL3lcdEv>
 80127e4:	6803      	ldr	r3, [r0, #0]
 80127e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127e8:	4798      	blx	r3
 80127ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80127ec:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80127f0:	a901      	add	r1, sp, #4
 80127f2:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80127f6:	9304      	str	r3, [sp, #16]
 80127f8:	6860      	ldr	r0, [r4, #4]
 80127fa:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80127fe:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8012802:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8012806:	6803      	ldr	r3, [r0, #0]
 8012808:	685b      	ldr	r3, [r3, #4]
 801280a:	4798      	blx	r3
 801280c:	b00b      	add	sp, #44	@ 0x2c
 801280e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012810:	200279d2 	.word	0x200279d2

08012814 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8012814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012816:	b08d      	sub	sp, #52	@ 0x34
 8012818:	2501      	movs	r5, #1
 801281a:	4604      	mov	r4, r0
 801281c:	466b      	mov	r3, sp
 801281e:	9503      	str	r5, [sp, #12]
 8012820:	e883 0006 	stmia.w	r3, {r1, r2}
 8012824:	2300      	movs	r3, #0
 8012826:	f8bd 6000 	ldrh.w	r6, [sp]
 801282a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801282e:	9306      	str	r3, [sp, #24]
 8012830:	6803      	ldr	r3, [r0, #0]
 8012832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012834:	4798      	blx	r3
 8012836:	463a      	mov	r2, r7
 8012838:	4631      	mov	r1, r6
 801283a:	4603      	mov	r3, r0
 801283c:	4620      	mov	r0, r4
 801283e:	f7ff ff8b 	bl	8012758 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012842:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8012844:	9004      	str	r0, [sp, #16]
 8012846:	9307      	str	r3, [sp, #28]
 8012848:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801284c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012850:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012854:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8012858:	4b0e      	ldr	r3, [pc, #56]	@ (8012894 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801285a:	881b      	ldrh	r3, [r3, #0]
 801285c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8012860:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8012864:	f7f2 fa5c 	bl	8004d20 <_ZN8touchgfx3HAL3lcdEv>
 8012868:	6803      	ldr	r3, [r0, #0]
 801286a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801286c:	4798      	blx	r3
 801286e:	23ff      	movs	r3, #255	@ 0xff
 8012870:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8012874:	a903      	add	r1, sp, #12
 8012876:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801287a:	6860      	ldr	r0, [r4, #4]
 801287c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8012880:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8012884:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8012888:	6803      	ldr	r3, [r0, #0]
 801288a:	685b      	ldr	r3, [r3, #4]
 801288c:	4798      	blx	r3
 801288e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8012890:	b00d      	add	sp, #52	@ 0x34
 8012892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012894:	200279d2 	.word	0x200279d2

08012898 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8012898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801289c:	b08c      	sub	sp, #48	@ 0x30
 801289e:	461e      	mov	r6, r3
 80128a0:	2300      	movs	r3, #0
 80128a2:	4604      	mov	r4, r0
 80128a4:	466d      	mov	r5, sp
 80128a6:	9306      	str	r3, [sp, #24]
 80128a8:	6803      	ldr	r3, [r0, #0]
 80128aa:	e885 0006 	stmia.w	r5, {r1, r2}
 80128ae:	2501      	movs	r5, #1
 80128b0:	f8bd 7000 	ldrh.w	r7, [sp]
 80128b4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80128b8:	9503      	str	r5, [sp, #12]
 80128ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128bc:	4798      	blx	r3
 80128be:	4642      	mov	r2, r8
 80128c0:	4639      	mov	r1, r7
 80128c2:	4603      	mov	r3, r0
 80128c4:	4620      	mov	r0, r4
 80128c6:	f7ff ff47 	bl	8012758 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80128ca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80128ce:	9004      	str	r0, [sp, #16]
 80128d0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80128d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80128d8:	9607      	str	r6, [sp, #28]
 80128da:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80128de:	4b10      	ldr	r3, [pc, #64]	@ (8012920 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80128e0:	881b      	ldrh	r3, [r3, #0]
 80128e2:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80128e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80128e8:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80128ec:	f7f2 fa18 	bl	8004d20 <_ZN8touchgfx3HAL3lcdEv>
 80128f0:	6803      	ldr	r3, [r0, #0]
 80128f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128f4:	4798      	blx	r3
 80128f6:	23ff      	movs	r3, #255	@ 0xff
 80128f8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80128fc:	a903      	add	r1, sp, #12
 80128fe:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8012902:	6860      	ldr	r0, [r4, #4]
 8012904:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8012908:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 801290c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8012910:	6803      	ldr	r3, [r0, #0]
 8012912:	685b      	ldr	r3, [r3, #4]
 8012914:	4798      	blx	r3
 8012916:	4630      	mov	r0, r6
 8012918:	b00c      	add	sp, #48	@ 0x30
 801291a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801291e:	bf00      	nop
 8012920:	200279d2 	.word	0x200279d2

08012924 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8012924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012926:	b085      	sub	sp, #20
 8012928:	4605      	mov	r5, r0
 801292a:	ac02      	add	r4, sp, #8
 801292c:	e884 0006 	stmia.w	r4, {r1, r2}
 8012930:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8012934:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8012938:	f7ff fde6 	bl	8012508 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801293c:	4631      	mov	r1, r6
 801293e:	4603      	mov	r3, r0
 8012940:	463a      	mov	r2, r7
 8012942:	4628      	mov	r0, r5
 8012944:	f7ff ff08 	bl	8012758 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012948:	4a05      	ldr	r2, [pc, #20]	@ (8012960 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801294a:	682b      	ldr	r3, [r5, #0]
 801294c:	8812      	ldrh	r2, [r2, #0]
 801294e:	9200      	str	r2, [sp, #0]
 8012950:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8012952:	4603      	mov	r3, r0
 8012954:	4628      	mov	r0, r5
 8012956:	e894 0006 	ldmia.w	r4, {r1, r2}
 801295a:	47b0      	blx	r6
 801295c:	b005      	add	sp, #20
 801295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012960:	200279d2 	.word	0x200279d2

08012964 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8012964:	b570      	push	{r4, r5, r6, lr}
 8012966:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 801296a:	4604      	mov	r4, r0
 801296c:	b19b      	cbz	r3, 8012996 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801296e:	2002      	movs	r0, #2
 8012970:	f7ee fabe 	bl	8000ef0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8012974:	2300      	movs	r3, #0
 8012976:	4620      	mov	r0, r4
 8012978:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 801297c:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8012980:	6823      	ldr	r3, [r4, #0]
 8012982:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8012986:	f7ff fdbf 	bl	8012508 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801298a:	4601      	mov	r1, r0
 801298c:	4620      	mov	r0, r4
 801298e:	462b      	mov	r3, r5
 8012990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012994:	4718      	bx	r3
 8012996:	bd70      	pop	{r4, r5, r6, pc}

08012998 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8012998:	b570      	push	{r4, r5, r6, lr}
 801299a:	4605      	mov	r5, r0
 801299c:	460c      	mov	r4, r1
 801299e:	2003      	movs	r0, #3
 80129a0:	b149      	cbz	r1, 80129b6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 80129a2:	f7ee fa45 	bl	8000e30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80129a6:	6928      	ldr	r0, [r5, #16]
 80129a8:	b168      	cbz	r0, 80129c6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80129aa:	6803      	ldr	r3, [r0, #0]
 80129ac:	2101      	movs	r1, #1
 80129ae:	695b      	ldr	r3, [r3, #20]
 80129b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129b4:	4718      	bx	r3
 80129b6:	f7ee fa6b 	bl	8000e90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80129ba:	6928      	ldr	r0, [r5, #16]
 80129bc:	b118      	cbz	r0, 80129c6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80129be:	6803      	ldr	r3, [r0, #0]
 80129c0:	4621      	mov	r1, r4
 80129c2:	695b      	ldr	r3, [r3, #20]
 80129c4:	e7f4      	b.n	80129b0 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 80129c6:	bd70      	pop	{r4, r5, r6, pc}

080129c8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80129c8:	b538      	push	{r3, r4, r5, lr}
 80129ca:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 80129ce:	4604      	mov	r4, r0
 80129d0:	460d      	mov	r5, r1
 80129d2:	428b      	cmp	r3, r1
 80129d4:	d006      	beq.n	80129e4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80129d6:	6803      	ldr	r3, [r0, #0]
 80129d8:	b929      	cbnz	r1, 80129e6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 80129da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80129de:	4798      	blx	r3
 80129e0:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 80129e4:	bd38      	pop	{r3, r4, r5, pc}
 80129e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80129ea:	e7f8      	b.n	80129de <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080129ec <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80129ec:	4b0d      	ldr	r3, [pc, #52]	@ (8012a24 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80129ee:	b510      	push	{r4, lr}
 80129f0:	781b      	ldrb	r3, [r3, #0]
 80129f2:	4604      	mov	r4, r0
 80129f4:	b95b      	cbnz	r3, 8012a0e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80129f6:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 80129fa:	2b02      	cmp	r3, #2
 80129fc:	d007      	beq.n	8012a0e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80129fe:	6840      	ldr	r0, [r0, #4]
 8012a00:	f000 f92c 	bl	8012c5c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8012a04:	b118      	cbz	r0, 8012a0e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012a06:	6862      	ldr	r2, [r4, #4]
 8012a08:	7a53      	ldrb	r3, [r2, #9]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d0fc      	beq.n	8012a08 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8012a0e:	f7ef fa43 	bl	8001e98 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012a12:	4620      	mov	r0, r4
 8012a14:	2100      	movs	r1, #0
 8012a16:	f7ff ffd7 	bl	80129c8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	f7ff fd74 	bl	8012508 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012a20:	bd10      	pop	{r4, pc}
 8012a22:	bf00      	nop
 8012a24:	200279d6 	.word	0x200279d6

08012a28 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8012a28:	b570      	push	{r4, r5, r6, lr}
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	6803      	ldr	r3, [r0, #0]
 8012a2e:	b919      	cbnz	r1, 8012a38 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8012a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a36:	4718      	bx	r3
 8012a38:	2200      	movs	r2, #0
 8012a3a:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8012a3e:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8012a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a44:	4798      	blx	r3
 8012a46:	6863      	ldr	r3, [r4, #4]
 8012a48:	2101      	movs	r1, #1
 8012a4a:	4605      	mov	r5, r0
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	7299      	strb	r1, [r3, #10]
 8012a50:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8012a54:	f7ff ffb8 	bl	80129c8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8012a58:	4628      	mov	r0, r5
 8012a5a:	bd70      	pop	{r4, r5, r6, pc}

08012a5c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8012a5c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8012a60:	1a13      	subs	r3, r2, r0
 8012a62:	4258      	negs	r0, r3
 8012a64:	4158      	adcs	r0, r3
 8012a66:	4770      	bx	lr

08012a68 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8012a68:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8012a6c:	1a9b      	subs	r3, r3, r2
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	bfdc      	itt	le
 8012a72:	6882      	ldrle	r2, [r0, #8]
 8012a74:	189b      	addle	r3, r3, r2
 8012a76:	2b01      	cmp	r3, #1
 8012a78:	bfcc      	ite	gt
 8012a7a:	2000      	movgt	r0, #0
 8012a7c:	2001      	movle	r0, #1
 8012a7e:	4770      	bx	lr

08012a80 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8012a80:	6902      	ldr	r2, [r0, #16]
 8012a82:	6843      	ldr	r3, [r0, #4]
 8012a84:	2024      	movs	r0, #36	@ 0x24
 8012a86:	fb00 3002 	mla	r0, r0, r2, r3
 8012a8a:	4770      	bx	lr

08012a8c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8012a8c:	6803      	ldr	r3, [r0, #0]
 8012a8e:	691b      	ldr	r3, [r3, #16]
 8012a90:	4718      	bx	r3

08012a92 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8012a92:	2301      	movs	r3, #1
 8012a94:	b570      	push	{r4, r5, r6, lr}
 8012a96:	7203      	strb	r3, [r0, #8]
 8012a98:	4604      	mov	r4, r0
 8012a9a:	6840      	ldr	r0, [r0, #4]
 8012a9c:	6803      	ldr	r3, [r0, #0]
 8012a9e:	699b      	ldr	r3, [r3, #24]
 8012aa0:	4798      	blx	r3
 8012aa2:	6803      	ldr	r3, [r0, #0]
 8012aa4:	4605      	mov	r5, r0
 8012aa6:	2b40      	cmp	r3, #64	@ 0x40
 8012aa8:	d00c      	beq.n	8012ac4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012aaa:	d810      	bhi.n	8012ace <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8012aac:	2b04      	cmp	r3, #4
 8012aae:	d01d      	beq.n	8012aec <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8012ab0:	d804      	bhi.n	8012abc <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8012ab2:	2b01      	cmp	r3, #1
 8012ab4:	d006      	beq.n	8012ac4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012ab6:	2b02      	cmp	r3, #2
 8012ab8:	d02c      	beq.n	8012b14 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8012aba:	bd70      	pop	{r4, r5, r6, pc}
 8012abc:	2b08      	cmp	r3, #8
 8012abe:	d01d      	beq.n	8012afc <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8012ac0:	2b20      	cmp	r3, #32
 8012ac2:	d1fa      	bne.n	8012aba <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8012ac4:	6823      	ldr	r3, [r4, #0]
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012aca:	4798      	blx	r3
 8012acc:	e013      	b.n	8012af6 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8012ace:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ad2:	d0f7      	beq.n	8012ac4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012ad4:	d804      	bhi.n	8012ae0 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8012ad6:	2b80      	cmp	r3, #128	@ 0x80
 8012ad8:	d0f4      	beq.n	8012ac4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012ade:	e7f0      	b.n	8012ac2 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8012ae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012ae4:	d0ee      	beq.n	8012ac4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012ae6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012aea:	e7e5      	b.n	8012ab8 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8012aec:	6823      	ldr	r3, [r4, #0]
 8012aee:	7f01      	ldrb	r1, [r0, #28]
 8012af0:	4620      	mov	r0, r4
 8012af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012af4:	4798      	blx	r3
 8012af6:	6823      	ldr	r3, [r4, #0]
 8012af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012afa:	e006      	b.n	8012b0a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8012afc:	6823      	ldr	r3, [r4, #0]
 8012afe:	7f01      	ldrb	r1, [r0, #28]
 8012b00:	4620      	mov	r0, r4
 8012b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b04:	4798      	blx	r3
 8012b06:	6823      	ldr	r3, [r4, #0]
 8012b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b0a:	4629      	mov	r1, r5
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b12:	4718      	bx	r3
 8012b14:	6823      	ldr	r3, [r4, #0]
 8012b16:	4620      	mov	r0, r4
 8012b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b1a:	4798      	blx	r3
 8012b1c:	e7f3      	b.n	8012b06 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08012b1e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8012b1e:	4770      	bx	lr

08012b20 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8012b20:	4770      	bx	lr

08012b22 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8012b22:	4770      	bx	lr

08012b24 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8012b24:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8012b28:	b510      	push	{r4, lr}
 8012b2a:	1ad2      	subs	r2, r2, r3
 8012b2c:	2a00      	cmp	r2, #0
 8012b2e:	bfdc      	itt	le
 8012b30:	6884      	ldrle	r4, [r0, #8]
 8012b32:	1912      	addle	r2, r2, r4
 8012b34:	2a01      	cmp	r2, #1
 8012b36:	dd16      	ble.n	8012b66 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8012b38:	6842      	ldr	r2, [r0, #4]
 8012b3a:	2424      	movs	r4, #36	@ 0x24
 8012b3c:	fb04 2303 	mla	r3, r4, r3, r2
 8012b40:	f101 0220 	add.w	r2, r1, #32
 8012b44:	f851 4b04 	ldr.w	r4, [r1], #4
 8012b48:	4291      	cmp	r1, r2
 8012b4a:	f843 4b04 	str.w	r4, [r3], #4
 8012b4e:	d1f9      	bne.n	8012b44 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8012b50:	780a      	ldrb	r2, [r1, #0]
 8012b52:	701a      	strb	r2, [r3, #0]
 8012b54:	68c3      	ldr	r3, [r0, #12]
 8012b56:	6882      	ldr	r2, [r0, #8]
 8012b58:	f3bf 8f5b 	dmb	ish
 8012b5c:	3301      	adds	r3, #1
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	bfd8      	it	le
 8012b62:	1a9b      	suble	r3, r3, r2
 8012b64:	60c3      	str	r3, [r0, #12]
 8012b66:	bd10      	pop	{r4, pc}

08012b68 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8012b68:	6903      	ldr	r3, [r0, #16]
 8012b6a:	6882      	ldr	r2, [r0, #8]
 8012b6c:	f3bf 8f5b 	dmb	ish
 8012b70:	3301      	adds	r3, #1
 8012b72:	429a      	cmp	r2, r3
 8012b74:	bfd8      	it	le
 8012b76:	1a9b      	suble	r3, r3, r2
 8012b78:	6103      	str	r3, [r0, #16]
 8012b7a:	4770      	bx	lr

08012b7c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8012b7c:	b570      	push	{r4, r5, r6, lr}
 8012b7e:	4604      	mov	r4, r0
 8012b80:	460e      	mov	r6, r1
 8012b82:	6860      	ldr	r0, [r4, #4]
 8012b84:	6803      	ldr	r3, [r0, #0]
 8012b86:	685b      	ldr	r3, [r3, #4]
 8012b88:	4798      	blx	r3
 8012b8a:	2800      	cmp	r0, #0
 8012b8c:	d1f9      	bne.n	8012b82 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8012b8e:	4d0d      	ldr	r5, [pc, #52]	@ (8012bc4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8012b90:	6828      	ldr	r0, [r5, #0]
 8012b92:	6803      	ldr	r3, [r0, #0]
 8012b94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012b96:	4798      	blx	r3
 8012b98:	f7ef f98c 	bl	8001eb4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8012b9c:	6828      	ldr	r0, [r5, #0]
 8012b9e:	2101      	movs	r1, #1
 8012ba0:	f7ff ff12 	bl	80129c8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8012ba4:	6860      	ldr	r0, [r4, #4]
 8012ba6:	4631      	mov	r1, r6
 8012ba8:	6803      	ldr	r3, [r0, #0]
 8012baa:	689b      	ldr	r3, [r3, #8]
 8012bac:	4798      	blx	r3
 8012bae:	6823      	ldr	r3, [r4, #0]
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bb4:	4798      	blx	r3
 8012bb6:	6828      	ldr	r0, [r5, #0]
 8012bb8:	6803      	ldr	r3, [r0, #0]
 8012bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012bc0:	4718      	bx	r3
 8012bc2:	bf00      	nop
 8012bc4:	200279d8 	.word	0x200279d8

08012bc8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8012bc8:	b508      	push	{r3, lr}
 8012bca:	f7ef f965 	bl	8001e98 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012bce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012bd2:	f7ef b969 	b.w	8001ea8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08012bd6 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8012bd6:	b510      	push	{r4, lr}
 8012bd8:	4604      	mov	r4, r0
 8012bda:	2114      	movs	r1, #20
 8012bdc:	f017 f8ed 	bl	8029dba <_ZdlPvj>
 8012be0:	4620      	mov	r0, r4
 8012be2:	bd10      	pop	{r4, pc}

08012be4 <_ZN8touchgfx13DMA_Interface5startEv>:
 8012be4:	b510      	push	{r4, lr}
 8012be6:	4604      	mov	r4, r0
 8012be8:	6840      	ldr	r0, [r0, #4]
 8012bea:	6803      	ldr	r3, [r0, #0]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	4798      	blx	r3
 8012bf0:	b948      	cbnz	r0, 8012c06 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012bf2:	7a63      	ldrb	r3, [r4, #9]
 8012bf4:	b13b      	cbz	r3, 8012c06 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012bf6:	7a23      	ldrb	r3, [r4, #8]
 8012bf8:	b92b      	cbnz	r3, 8012c06 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012bfa:	6823      	ldr	r3, [r4, #0]
 8012bfc:	4620      	mov	r0, r4
 8012bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c04:	4718      	bx	r3
 8012c06:	bd10      	pop	{r4, pc}

08012c08 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8012c08:	b570      	push	{r4, r5, r6, lr}
 8012c0a:	4604      	mov	r4, r0
 8012c0c:	6840      	ldr	r0, [r0, #4]
 8012c0e:	6803      	ldr	r3, [r0, #0]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	4798      	blx	r3
 8012c14:	4605      	mov	r5, r0
 8012c16:	b930      	cbnz	r0, 8012c26 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012c18:	7a23      	ldrb	r3, [r4, #8]
 8012c1a:	b123      	cbz	r3, 8012c26 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012c1c:	6860      	ldr	r0, [r4, #4]
 8012c1e:	6803      	ldr	r3, [r0, #0]
 8012c20:	695b      	ldr	r3, [r3, #20]
 8012c22:	4798      	blx	r3
 8012c24:	7225      	strb	r5, [r4, #8]
 8012c26:	6860      	ldr	r0, [r4, #4]
 8012c28:	6803      	ldr	r3, [r0, #0]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	4798      	blx	r3
 8012c2e:	b928      	cbnz	r0, 8012c3c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8012c30:	6823      	ldr	r3, [r4, #0]
 8012c32:	4620      	mov	r0, r4
 8012c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c3a:	4718      	bx	r3
 8012c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c40:	f7ef b940 	b.w	8001ec4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08012c44 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8012c44:	b510      	push	{r4, lr}
 8012c46:	6082      	str	r2, [r0, #8]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	4c03      	ldr	r4, [pc, #12]	@ (8012c58 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8012c4c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8012c50:	e9c0 4100 	strd	r4, r1, [r0]
 8012c54:	bd10      	pop	{r4, pc}
 8012c56:	bf00      	nop
 8012c58:	0802e7a8 	.word	0x0802e7a8

08012c5c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8012c5c:	6840      	ldr	r0, [r0, #4]
 8012c5e:	6803      	ldr	r3, [r0, #0]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	4718      	bx	r3
 8012c64:	0000      	movs	r0, r0
	...

08012c68 <_ZN8touchgfxL10applyNoiseEiihhh>:
 8012c68:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8012c6c:	fb80 0101 	smull	r0, r1, r0, r1
 8012c70:	4f21      	ldr	r7, [pc, #132]	@ (8012cf8 <_ZN8touchgfxL10applyNoiseEiihhh+0x90>)
 8012c72:	461c      	mov	r4, r3
 8012c74:	4616      	mov	r6, r2
 8012c76:	fba0 bc07 	umull	fp, ip, r0, r7
 8012c7a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8012c7e:	fb07 cc01 	mla	ip, r7, r1, ip
 8012c82:	fbab 010b 	umull	r0, r1, fp, fp
 8012c86:	fb0b f70c 	mul.w	r7, fp, ip
 8012c8a:	fb00 f30c 	mul.w	r3, r0, ip
 8012c8e:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8012c92:	fb0b 3301 	mla	r3, fp, r1, r3
 8012c96:	fba0 010b 	umull	r0, r1, r0, fp
 8012c9a:	4419      	add	r1, r3
 8012c9c:	a314      	add	r3, pc, #80	@ (adr r3, 8012cf0 <_ZN8touchgfxL10applyNoiseEiihhh+0x88>)
 8012c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca2:	f7ed fcd9 	bl	8000658 <__aeabi_ldivmod>
 8012ca6:	2ef7      	cmp	r6, #247	@ 0xf7
 8012ca8:	b290      	uxth	r0, r2
 8012caa:	bf9e      	ittt	ls
 8012cac:	f002 0207 	andls.w	r2, r2, #7
 8012cb0:	18b6      	addls	r6, r6, r2
 8012cb2:	b2f6      	uxtbls	r6, r6
 8012cb4:	2cfb      	cmp	r4, #251	@ 0xfb
 8012cb6:	bf9e      	ittt	ls
 8012cb8:	f3c0 03c1 	ubfxls	r3, r0, #3, #2
 8012cbc:	18e4      	addls	r4, r4, r3
 8012cbe:	b2e4      	uxtbls	r4, r4
 8012cc0:	2df7      	cmp	r5, #247	@ 0xf7
 8012cc2:	bf98      	it	ls
 8012cc4:	f3c0 1042 	ubfxls	r0, r0, #5, #3
 8012cc8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8012ccc:	bf98      	it	ls
 8012cce:	182d      	addls	r5, r5, r0
 8012cd0:	480a      	ldr	r0, [pc, #40]	@ (8012cfc <_ZN8touchgfxL10applyNoiseEiihhh+0x94>)
 8012cd2:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8012cd6:	ea00 2006 	and.w	r0, r0, r6, lsl #8
 8012cda:	bf98      	it	ls
 8012cdc:	b2ed      	uxtbls	r5, r5
 8012cde:	4304      	orrs	r4, r0
 8012ce0:	ea44 00d5 	orr.w	r0, r4, r5, lsr #3
 8012ce4:	b280      	uxth	r0, r0
 8012ce6:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8012cea:	bf00      	nop
 8012cec:	f3af 8000 	nop.w
 8012cf0:	797a8d77 	.word	0x797a8d77
 8012cf4:	00000000 	.word	0x00000000
 8012cf8:	00ec4ba7 	.word	0x00ec4ba7
 8012cfc:	fffff800 	.word	0xfffff800

08012d00 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh>:
 8012d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d04:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8012d08:	4605      	mov	r5, r0
 8012d0a:	ed2d 8b02 	vpush	{d8}
 8012d0e:	b087      	sub	sp, #28
 8012d10:	7c41      	ldrb	r1, [r0, #17]
 8012d12:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	@ 0x48
 8012d16:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	@ 0x4c
 8012d1a:	f89d a050 	ldrb.w	sl, [sp, #80]	@ 0x50
 8012d1e:	2900      	cmp	r1, #0
 8012d20:	f000 809a 	beq.w	8012e58 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x158>
 8012d24:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012d28:	ed90 7a08 	vldr	s14, [r0, #32]
 8012d2c:	454a      	cmp	r2, r9
 8012d2e:	68c0      	ldr	r0, [r0, #12]
 8012d30:	db25      	blt.n	8012d7e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x7e>
 8012d32:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012d36:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d3e:	bfc8      	it	gt
 8012d40:	2200      	movgt	r2, #0
 8012d42:	5882      	ldr	r2, [r0, r2]
 8012d44:	2100      	movs	r1, #0
 8012d46:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8012d4a:	7c2d      	ldrb	r5, [r5, #16]
 8012d4c:	0950      	lsrs	r0, r2, #5
 8012d4e:	f3c2 0cc4 	ubfx	ip, r2, #3, #5
 8012d52:	f408 4e78 	and.w	lr, r8, #63488	@ 0xf800
 8012d56:	eb04 0746 	add.w	r7, r4, r6, lsl #1
 8012d5a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8012d5e:	2d00      	cmp	r5, #0
 8012d60:	d044      	beq.n	8012dec <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xec>
 8012d62:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8012d66:	d141      	bne.n	8012dec <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xec>
 8012d68:	bb61      	cbnz	r1, 8012dc4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xc4>
 8012d6a:	ea4e 0000 	orr.w	r0, lr, r0
 8012d6e:	ea4c 0500 	orr.w	r5, ip, r0
 8012d72:	42bc      	cmp	r4, r7
 8012d74:	f080 8214 	bcs.w	80131a0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a0>
 8012d78:	f824 5b02 	strh.w	r5, [r4], #2
 8012d7c:	e7f9      	b.n	8012d72 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x72>
 8012d7e:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 8012d82:	454f      	cmp	r7, r9
 8012d84:	dc08      	bgt.n	8012d98 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x98>
 8012d86:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012d8a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d92:	bfd8      	it	le
 8012d94:	2200      	movle	r2, #0
 8012d96:	e7d4      	b.n	8012d42 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x42>
 8012d98:	eba9 0202 	sub.w	r2, r9, r2
 8012d9c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012da0:	ee07 2a90 	vmov	s15, r2
 8012da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012db4:	ee17 2a90 	vmov	r2, s15
 8012db8:	bfd8      	it	le
 8012dba:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8012dbe:	0092      	lsls	r2, r2, #2
 8012dc0:	5882      	ldr	r2, [r0, r2]
 8012dc2:	e7c0      	b.n	8012d46 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x46>
 8012dc4:	b2d5      	uxtb	r5, r2
 8012dc6:	f3c2 4a07 	ubfx	sl, r2, #16, #8
 8012dca:	fa5f f888 	uxtb.w	r8, r8
 8012dce:	461e      	mov	r6, r3
 8012dd0:	42bc      	cmp	r4, r7
 8012dd2:	f080 81e5 	bcs.w	80131a0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a0>
 8012dd6:	4630      	mov	r0, r6
 8012dd8:	9500      	str	r5, [sp, #0]
 8012dda:	4643      	mov	r3, r8
 8012ddc:	4652      	mov	r2, sl
 8012dde:	4649      	mov	r1, r9
 8012de0:	3601      	adds	r6, #1
 8012de2:	f7ff ff41 	bl	8012c68 <_ZN8touchgfxL10applyNoiseEiihhh>
 8012de6:	f824 0b02 	strh.w	r0, [r4], #2
 8012dea:	e7f1      	b.n	8012dd0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0xd0>
 8012dec:	0e12      	lsrs	r2, r2, #24
 8012dee:	26ff      	movs	r6, #255	@ 0xff
 8012df0:	fb02 f20a 	mul.w	r2, r2, sl
 8012df4:	1c53      	adds	r3, r2, #1
 8012df6:	eb03 2222 	add.w	r2, r3, r2, asr #8
 8012dfa:	1212      	asrs	r2, r2, #8
 8012dfc:	fb02 f50c 	mul.w	r5, r2, ip
 8012e00:	f8df c3b0 	ldr.w	ip, [pc, #944]	@ 80131b4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b4>
 8012e04:	fb02 f10e 	mul.w	r1, r2, lr
 8012e08:	4350      	muls	r0, r2
 8012e0a:	43d2      	mvns	r2, r2
 8012e0c:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8012e10:	42bc      	cmp	r4, r7
 8012e12:	f080 81c5 	bcs.w	80131a0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a0>
 8012e16:	f8b4 e000 	ldrh.w	lr, [r4]
 8012e1a:	ea0e 030c 	and.w	r3, lr, ip
 8012e1e:	f40e 68fc 	and.w	r8, lr, #2016	@ 0x7e0
 8012e22:	f00e 0e1f 	and.w	lr, lr, #31
 8012e26:	fb02 1303 	mla	r3, r2, r3, r1
 8012e2a:	fb02 0808 	mla	r8, r2, r8, r0
 8012e2e:	fb02 5e0e 	mla	lr, r2, lr, r5
 8012e32:	fb93 f3f6 	sdiv	r3, r3, r6
 8012e36:	fb98 f8f6 	sdiv	r8, r8, r6
 8012e3a:	fb9e fef6 	sdiv	lr, lr, r6
 8012e3e:	ea03 030c 	and.w	r3, r3, ip
 8012e42:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8012e46:	f00e 0e1f 	and.w	lr, lr, #31
 8012e4a:	ea43 0308 	orr.w	r3, r3, r8
 8012e4e:	ea43 030e 	orr.w	r3, r3, lr
 8012e52:	f824 3b02 	strh.w	r3, [r4], #2
 8012e56:	e7db      	b.n	8012e10 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x110>
 8012e58:	7c82      	ldrb	r2, [r0, #18]
 8012e5a:	2a00      	cmp	r2, #0
 8012e5c:	d04f      	beq.n	8012efe <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x1fe>
 8012e5e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012e62:	ee07 2a90 	vmov	s15, r2
 8012e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e6a:	ee07 3a10 	vmov	s14, r3
 8012e6e:	461f      	mov	r7, r3
 8012e70:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8012e74:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e7c:	f200 8095 	bhi.w	8012faa <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2aa>
 8012e80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012e84:	f640 71fc 	movw	r1, #4092	@ 0xffc
 8012e88:	68ea      	ldr	r2, [r5, #12]
 8012e8a:	f895 c010 	ldrb.w	ip, [r5, #16]
 8012e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012e92:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012e96:	ee06 6a90 	vmov	s13, r6
 8012e9a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012e9e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea6:	bf4a      	itet	mi
 8012ea8:	eebd 7ac7 	vcvtmi.s32.f32	s14, s14
 8012eac:	9602      	strpl	r6, [sp, #8]
 8012eae:	ed8d 7a02 	vstrmi	s14, [sp, #8]
 8012eb2:	ed95 7a08 	vldr	s14, [r5, #32]
 8012eb6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ebe:	bfc8      	it	gt
 8012ec0:	2100      	movgt	r1, #0
 8012ec2:	5852      	ldr	r2, [r2, r1]
 8012ec4:	9902      	ldr	r1, [sp, #8]
 8012ec6:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8012eca:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8012ece:	0950      	lsrs	r0, r2, #5
 8012ed0:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 8012ed4:	9103      	str	r1, [sp, #12]
 8012ed6:	f3c2 01c4 	ubfx	r1, r2, #3, #5
 8012eda:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8012ede:	f1bc 0f00 	cmp.w	ip, #0
 8012ee2:	d024      	beq.n	8012f2e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x22e>
 8012ee4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8012ee8:	d121      	bne.n	8012f2e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x22e>
 8012eea:	ea4b 0b00 	orr.w	fp, fp, r0
 8012eee:	ea41 010b 	orr.w	r1, r1, fp
 8012ef2:	9a03      	ldr	r2, [sp, #12]
 8012ef4:	4294      	cmp	r4, r2
 8012ef6:	d255      	bcs.n	8012fa4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2a4>
 8012ef8:	f824 1b02 	strh.w	r1, [r4], #2
 8012efc:	e7f9      	b.n	8012ef2 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x1f2>
 8012efe:	ee07 9a10 	vmov	s14, r9
 8012f02:	edd0 7a06 	vldr	s15, [r0, #24]
 8012f06:	edd0 6a05 	vldr	s13, [r0, #20]
 8012f0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012f0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012f12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012f16:	ed90 7a08 	vldr	s14, [r0, #32]
 8012f1a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f22:	bf44      	itt	mi
 8012f24:	ed90 7a07 	vldrmi	s14, [r0, #28]
 8012f28:	ee77 7ac7 	vsubmi.f32	s15, s15, s14
 8012f2c:	e79d      	b.n	8012e6a <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x16a>
 8012f2e:	0e12      	lsrs	r2, r2, #24
 8012f30:	f8df 8280 	ldr.w	r8, [pc, #640]	@ 80131b4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b4>
 8012f34:	f04f 0eff 	mov.w	lr, #255	@ 0xff
 8012f38:	fb02 f20a 	mul.w	r2, r2, sl
 8012f3c:	f102 0c01 	add.w	ip, r2, #1
 8012f40:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8012f44:	1212      	asrs	r2, r2, #8
 8012f46:	4350      	muls	r0, r2
 8012f48:	4351      	muls	r1, r2
 8012f4a:	fb02 fb0b 	mul.w	fp, r2, fp
 8012f4e:	43d2      	mvns	r2, r2
 8012f50:	9004      	str	r0, [sp, #16]
 8012f52:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8012f56:	9105      	str	r1, [sp, #20]
 8012f58:	9903      	ldr	r1, [sp, #12]
 8012f5a:	428c      	cmp	r4, r1
 8012f5c:	d222      	bcs.n	8012fa4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x2a4>
 8012f5e:	8820      	ldrh	r0, [r4, #0]
 8012f60:	f400 61fc 	and.w	r1, r0, #2016	@ 0x7e0
 8012f64:	ea00 0c08 	and.w	ip, r0, r8
 8012f68:	460f      	mov	r7, r1
 8012f6a:	9904      	ldr	r1, [sp, #16]
 8012f6c:	fb02 bc0c 	mla	ip, r2, ip, fp
 8012f70:	fb02 1107 	mla	r1, r2, r7, r1
 8012f74:	fb9c fcfe 	sdiv	ip, ip, lr
 8012f78:	fb91 f1fe 	sdiv	r1, r1, lr
 8012f7c:	ea0c 0c08 	and.w	ip, ip, r8
 8012f80:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8012f84:	ea4c 0101 	orr.w	r1, ip, r1
 8012f88:	f000 0c1f 	and.w	ip, r0, #31
 8012f8c:	9805      	ldr	r0, [sp, #20]
 8012f8e:	fb02 0c0c 	mla	ip, r2, ip, r0
 8012f92:	fb9c fcfe 	sdiv	ip, ip, lr
 8012f96:	f00c 0c1f 	and.w	ip, ip, #31
 8012f9a:	ea41 010c 	orr.w	r1, r1, ip
 8012f9e:	f824 1b02 	strh.w	r1, [r4], #2
 8012fa2:	e7d9      	b.n	8012f58 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x258>
 8012fa4:	9a02      	ldr	r2, [sp, #8]
 8012fa6:	441a      	add	r2, r3
 8012fa8:	4617      	mov	r7, r2
 8012faa:	441e      	add	r6, r3
 8012fac:	b236      	sxth	r6, r6
 8012fae:	42be      	cmp	r6, r7
 8012fb0:	f340 80f6 	ble.w	80131a0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a0>
 8012fb4:	ed95 7a07 	vldr	s14, [r5, #28]
 8012fb8:	ee06 7a90 	vmov	s13, r7
 8012fbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012fc0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012fc4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fcc:	f340 80b2 	ble.w	8013134 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x434>
 8012fd0:	ee06 6a10 	vmov	s12, r6
 8012fd4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012fd8:	ed9f 8a74 	vldr	s16, [pc, #464]	@ 80131ac <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4ac>
 8012fdc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012fe0:	7c2b      	ldrb	r3, [r5, #16]
 8012fe2:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8012fe6:	ed9f 6a72 	vldr	s12, [pc, #456]	@ 80131b0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b0>
 8012fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fee:	bfd6      	itet	le
 8012ff0:	eebd 7ac7 	vcvtle.s32.f32	s14, s14
 8012ff4:	46b0      	movgt	r8, r6
 8012ff6:	ee17 8a10 	vmovle	r8, s14
 8012ffa:	ed95 7a08 	vldr	s14, [r5, #32]
 8012ffe:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013002:	eba8 0707 	sub.w	r7, r8, r7
 8013006:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 801300a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801300e:	fe38 8a06 	vselgt.f32	s16, s16, s12
 8013012:	eea7 8a27 	vfma.f32	s16, s14, s15
 8013016:	b1db      	cbz	r3, 8013050 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x350>
 8013018:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801301c:	d118      	bne.n	8013050 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x350>
 801301e:	42bc      	cmp	r4, r7
 8013020:	d262      	bcs.n	80130e8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3e8>
 8013022:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013026:	68eb      	ldr	r3, [r5, #12]
 8013028:	4649      	mov	r1, r9
 801302a:	ee17 0a90 	vmov	r0, s15
 801302e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8013032:	b2d3      	uxtb	r3, r2
 8013034:	9300      	str	r3, [sp, #0]
 8013036:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801303a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 801303e:	f7ff fe13 	bl	8012c68 <_ZN8touchgfxL10applyNoiseEiihhh>
 8013042:	f824 0b02 	strh.w	r0, [r4], #2
 8013046:	edd5 7a08 	vldr	s15, [r5, #32]
 801304a:	ee38 8a27 	vadd.f32	s16, s16, s15
 801304e:	e7e6      	b.n	801301e <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x31e>
 8013050:	f8df b160 	ldr.w	fp, [pc, #352]	@ 80131b4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b4>
 8013054:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 8013058:	42bc      	cmp	r4, r7
 801305a:	d245      	bcs.n	80130e8 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3e8>
 801305c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013060:	68eb      	ldr	r3, [r5, #12]
 8013062:	f8b4 e000 	ldrh.w	lr, [r4]
 8013066:	ee17 2a90 	vmov	r2, s15
 801306a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801306e:	0e13      	lsrs	r3, r2, #24
 8013070:	ea0b 2112 	and.w	r1, fp, r2, lsr #8
 8013074:	fb03 f30a 	mul.w	r3, r3, sl
 8013078:	b289      	uxth	r1, r1
 801307a:	1c58      	adds	r0, r3, #1
 801307c:	eb00 2023 	add.w	r0, r0, r3, asr #8
 8013080:	ea0e 030b 	and.w	r3, lr, fp
 8013084:	1200      	asrs	r0, r0, #8
 8013086:	ea6f 0c00 	mvn.w	ip, r0
 801308a:	fa5f fc8c 	uxtb.w	ip, ip
 801308e:	fb0c f303 	mul.w	r3, ip, r3
 8013092:	fb00 3101 	mla	r1, r0, r1, r3
 8013096:	fb91 f1f9 	sdiv	r1, r1, r9
 801309a:	ea01 030b 	and.w	r3, r1, fp
 801309e:	9302      	str	r3, [sp, #8]
 80130a0:	0953      	lsrs	r3, r2, #5
 80130a2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80130a6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80130aa:	4619      	mov	r1, r3
 80130ac:	f40e 63fc 	and.w	r3, lr, #2016	@ 0x7e0
 80130b0:	f00e 0e1f 	and.w	lr, lr, #31
 80130b4:	fb0c f303 	mul.w	r3, ip, r3
 80130b8:	fb0c fc0e 	mul.w	ip, ip, lr
 80130bc:	fb00 3301 	mla	r3, r0, r1, r3
 80130c0:	9902      	ldr	r1, [sp, #8]
 80130c2:	fb00 c002 	mla	r0, r0, r2, ip
 80130c6:	fb93 f3f9 	sdiv	r3, r3, r9
 80130ca:	fb90 f0f9 	sdiv	r0, r0, r9
 80130ce:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80130d2:	f000 001f 	and.w	r0, r0, #31
 80130d6:	4319      	orrs	r1, r3
 80130d8:	4301      	orrs	r1, r0
 80130da:	f824 1b02 	strh.w	r1, [r4], #2
 80130de:	edd5 7a08 	vldr	s15, [r5, #32]
 80130e2:	ee38 8a27 	vadd.f32	s16, s16, s15
 80130e6:	e7b7      	b.n	8013058 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x358>
 80130e8:	4546      	cmp	r6, r8
 80130ea:	dd59      	ble.n	80131a0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a0>
 80130ec:	edd5 7a08 	vldr	s15, [r5, #32]
 80130f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80130f4:	68ea      	ldr	r2, [r5, #12]
 80130f6:	eba6 0608 	sub.w	r6, r6, r8
 80130fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80130fe:	7c29      	ldrb	r1, [r5, #16]
 8013100:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 8013104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013108:	bfd8      	it	le
 801310a:	2300      	movle	r3, #0
 801310c:	58d2      	ldr	r2, [r2, r3]
 801310e:	0a10      	lsrs	r0, r2, #8
 8013110:	f3c2 07c4 	ubfx	r7, r2, #3, #5
 8013114:	0953      	lsrs	r3, r2, #5
 8013116:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 801311a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801311e:	b159      	cbz	r1, 8013138 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x438>
 8013120:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8013124:	d108      	bne.n	8013138 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x438>
 8013126:	4318      	orrs	r0, r3
 8013128:	4338      	orrs	r0, r7
 801312a:	42b4      	cmp	r4, r6
 801312c:	d238      	bcs.n	80131a0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a0>
 801312e:	f824 0b02 	strh.w	r0, [r4], #2
 8013132:	e7fa      	b.n	801312a <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x42a>
 8013134:	46b8      	mov	r8, r7
 8013136:	e7d9      	b.n	80130ec <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x3ec>
 8013138:	0e12      	lsrs	r2, r2, #24
 801313a:	f8df c078 	ldr.w	ip, [pc, #120]	@ 80131b4 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4b4>
 801313e:	fb02 f10a 	mul.w	r1, r2, sl
 8013142:	1c4a      	adds	r2, r1, #1
 8013144:	eb02 2221 	add.w	r2, r2, r1, asr #8
 8013148:	1212      	asrs	r2, r2, #8
 801314a:	fb02 f507 	mul.w	r5, r2, r7
 801314e:	27ff      	movs	r7, #255	@ 0xff
 8013150:	4350      	muls	r0, r2
 8013152:	4353      	muls	r3, r2
 8013154:	43d2      	mvns	r2, r2
 8013156:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801315a:	42b4      	cmp	r4, r6
 801315c:	d220      	bcs.n	80131a0 <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x4a0>
 801315e:	f8b4 e000 	ldrh.w	lr, [r4]
 8013162:	ea0e 010c 	and.w	r1, lr, ip
 8013166:	f40e 68fc 	and.w	r8, lr, #2016	@ 0x7e0
 801316a:	f00e 0e1f 	and.w	lr, lr, #31
 801316e:	fb02 0101 	mla	r1, r2, r1, r0
 8013172:	fb02 3808 	mla	r8, r2, r8, r3
 8013176:	fb02 5e0e 	mla	lr, r2, lr, r5
 801317a:	fb91 f1f7 	sdiv	r1, r1, r7
 801317e:	fb98 f8f7 	sdiv	r8, r8, r7
 8013182:	fb9e fef7 	sdiv	lr, lr, r7
 8013186:	ea01 010c 	and.w	r1, r1, ip
 801318a:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801318e:	f00e 0e1f 	and.w	lr, lr, #31
 8013192:	ea41 0108 	orr.w	r1, r1, r8
 8013196:	ea41 010e 	orr.w	r1, r1, lr
 801319a:	f824 1b02 	strh.w	r1, [r4], #2
 801319e:	e7dc      	b.n	801315a <_ZNK8touchgfx27PainterRGB565LinearGradient5paintEPhssssh+0x45a>
 80131a0:	b007      	add	sp, #28
 80131a2:	ecbd 8b02 	vpop	{d8}
 80131a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131aa:	bf00      	nop
 80131ac:	00000000 	.word	0x00000000
 80131b0:	447ffffe 	.word	0x447ffffe
 80131b4:	fffff800 	.word	0xfffff800

080131b8 <_ZNK8touchgfx27PainterRGB565LinearGradient8tearDownEv>:
 80131b8:	4770      	bx	lr

080131ba <_ZN8touchgfx27PainterRGB565LinearGradientD1Ev>:
 80131ba:	4770      	bx	lr

080131bc <_ZN8touchgfx27PainterRGB565LinearGradientD0Ev>:
 80131bc:	b510      	push	{r4, lr}
 80131be:	4604      	mov	r4, r0
 80131c0:	2124      	movs	r1, #36	@ 0x24
 80131c2:	f016 fdfa 	bl	8029dba <_ZdlPvj>
 80131c6:	4620      	mov	r0, r4
 80131c8:	bd10      	pop	{r4, pc}
	...

080131cc <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 80131cc:	b508      	push	{r3, lr}
 80131ce:	4b05      	ldr	r3, [pc, #20]	@ (80131e4 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 80131d0:	6818      	ldr	r0, [r3, #0]
 80131d2:	6803      	ldr	r3, [r0, #0]
 80131d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80131d8:	4798      	blx	r3
 80131da:	1e43      	subs	r3, r0, #1
 80131dc:	4258      	negs	r0, r3
 80131de:	4158      	adcs	r0, r3
 80131e0:	bd08      	pop	{r3, pc}
 80131e2:	bf00      	nop
 80131e4:	200279d8 	.word	0x200279d8

080131e8 <_ZN8touchgfx13PainterRGB565D1Ev>:
 80131e8:	4770      	bx	lr

080131ea <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 80131ea:	3808      	subs	r0, #8
 80131ec:	4770      	bx	lr

080131ee <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 80131ee:	b430      	push	{r4, r5}
 80131f0:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 80131f4:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80131f8:	8a02      	ldrh	r2, [r0, #16]
 80131fa:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80131fe:	4629      	mov	r1, r5
 8013200:	9202      	str	r2, [sp, #8]
 8013202:	68c2      	ldr	r2, [r0, #12]
 8013204:	4620      	mov	r0, r4
 8013206:	bc30      	pop	{r4, r5}
 8013208:	f7ef b81a 	b.w	8002240 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

0801320c <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 801320c:	f7ef b80e 	b.w	800222c <_ZN8touchgfx5paint8tearDownEv>

08013210 <_ZN8touchgfx13PainterRGB565D0Ev>:
 8013210:	b510      	push	{r4, lr}
 8013212:	4604      	mov	r4, r0
 8013214:	2114      	movs	r1, #20
 8013216:	f016 fdd0 	bl	8029dba <_ZdlPvj>
 801321a:	4620      	mov	r0, r4
 801321c:	bd10      	pop	{r4, pc}

0801321e <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 801321e:	f1a0 0008 	sub.w	r0, r0, #8
 8013222:	e7f5      	b.n	8013210 <_ZN8touchgfx13PainterRGB565D0Ev>

08013224 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8013224:	2300      	movs	r3, #0
 8013226:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8013228:	8503      	strh	r3, [r0, #40]	@ 0x28
 801322a:	8543      	strh	r3, [r0, #42]	@ 0x2a
 801322c:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801322e:	6980      	ldr	r0, [r0, #24]
 8013230:	b110      	cbz	r0, 8013238 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8013232:	6803      	ldr	r3, [r0, #0]
 8013234:	691b      	ldr	r3, [r3, #16]
 8013236:	4718      	bx	r3
 8013238:	4770      	bx	lr

0801323a <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 801323a:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 801323e:	4770      	bx	lr

08013240 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8013240:	b538      	push	{r3, r4, r5, lr}
 8013242:	0e0b      	lsrs	r3, r1, #24
 8013244:	4604      	mov	r4, r0
 8013246:	460d      	mov	r5, r1
 8013248:	7783      	strb	r3, [r0, #30]
 801324a:	6803      	ldr	r3, [r0, #0]
 801324c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801324e:	4798      	blx	r3
 8013250:	6803      	ldr	r3, [r0, #0]
 8013252:	4629      	mov	r1, r5
 8013254:	689b      	ldr	r3, [r3, #8]
 8013256:	4798      	blx	r3
 8013258:	6823      	ldr	r3, [r4, #0]
 801325a:	4620      	mov	r0, r4
 801325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801325e:	4798      	blx	r3
 8013260:	61a0      	str	r0, [r4, #24]
 8013262:	bd38      	pop	{r3, r4, r5, pc}

08013264 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8013264:	7741      	strb	r1, [r0, #29]
 8013266:	4770      	bx	lr

08013268 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8013268:	b530      	push	{r4, r5, lr}
 801326a:	460d      	mov	r5, r1
 801326c:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8013270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013278:	682b      	ldr	r3, [r5, #0]
 801327a:	6023      	str	r3, [r4, #0]
 801327c:	bd30      	pop	{r4, r5, pc}

0801327e <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 801327e:	b538      	push	{r3, r4, r5, lr}
 8013280:	4604      	mov	r4, r0
 8013282:	1d03      	adds	r3, r0, #4
 8013284:	6808      	ldr	r0, [r1, #0]
 8013286:	2500      	movs	r5, #0
 8013288:	6849      	ldr	r1, [r1, #4]
 801328a:	c303      	stmia	r3!, {r0, r1}
 801328c:	6813      	ldr	r3, [r2, #0]
 801328e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8013292:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8013296:	6853      	ldr	r3, [r2, #4]
 8013298:	61a5      	str	r5, [r4, #24]
 801329a:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 801329e:	f006 fb15 	bl	80198cc <_ZN8touchgfx9Matrix3x35resetEv>
 80132a2:	23ff      	movs	r3, #255	@ 0xff
 80132a4:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 80132a8:	7763      	strb	r3, [r4, #29]
 80132aa:	77a3      	strb	r3, [r4, #30]
 80132ac:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80132b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80132b2:	2301      	movs	r3, #1
 80132b4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80132b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080132bc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 80132bc:	ee70 7a41 	vsub.f32	s15, s0, s2
 80132c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80132c8:	4605      	mov	r5, r0
 80132ca:	ed2d 8b0a 	vpush	{d8-d12}
 80132ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d2:	b086      	sub	sp, #24
 80132d4:	eeb0 ba40 	vmov.f32	s22, s0
 80132d8:	6802      	ldr	r2, [r0, #0]
 80132da:	eef0 ba60 	vmov.f32	s23, s1
 80132de:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 80132e2:	eef0 aa41 	vmov.f32	s21, s2
 80132e6:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80132e8:	eeb0 aa61 	vmov.f32	s20, s3
 80132ec:	eeb0 ca42 	vmov.f32	s24, s4
 80132f0:	eef0 ca62 	vmov.f32	s25, s5
 80132f4:	d112      	bne.n	801331c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80132f6:	ee70 7ae1 	vsub.f32	s15, s1, s3
 80132fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80132fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013302:	d10b      	bne.n	801331c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8013304:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8013308:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 801330a:	3901      	subs	r1, #1
 801330c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8013310:	b006      	add	sp, #24
 8013312:	ecbd 8b0a 	vpop	{d8-d12}
 8013316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801331a:	4710      	bx	r2
 801331c:	23ff      	movs	r3, #255	@ 0xff
 801331e:	4628      	mov	r0, r5
 8013320:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8013324:	77ab      	strb	r3, [r5, #30]
 8013326:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8013328:	4798      	blx	r3
 801332a:	eeb0 0a4b 	vmov.f32	s0, s22
 801332e:	eef0 0a6b 	vmov.f32	s1, s23
 8013332:	4604      	mov	r4, r0
 8013334:	4640      	mov	r0, r8
 8013336:	f006 fb78 	bl	8019a2a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801333a:	eef0 8a40 	vmov.f32	s17, s0
 801333e:	ed8d 0a00 	vstr	s0, [sp]
 8013342:	eeb0 0a6a 	vmov.f32	s0, s21
 8013346:	eef0 9a60 	vmov.f32	s19, s1
 801334a:	edcd 0a01 	vstr	s1, [sp, #4]
 801334e:	4640      	mov	r0, r8
 8013350:	eef0 0a4a 	vmov.f32	s1, s20
 8013354:	f006 fb69 	bl	8019a2a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8013358:	eef4 8a40 	vcmp.f32	s17, s0
 801335c:	eeb0 8a40 	vmov.f32	s16, s0
 8013360:	ed8d 0a02 	vstr	s0, [sp, #8]
 8013364:	eeb0 9a60 	vmov.f32	s18, s1
 8013368:	edcd 0a03 	vstr	s1, [sp, #12]
 801336c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013370:	eef4 9a60 	vcmp.f32	s19, s1
 8013374:	bf0c      	ite	eq
 8013376:	2301      	moveq	r3, #1
 8013378:	2300      	movne	r3, #0
 801337a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801337e:	eef4 8a40 	vcmp.f32	s17, s0
 8013382:	7463      	strb	r3, [r4, #17]
 8013384:	bf0c      	ite	eq
 8013386:	2301      	moveq	r3, #1
 8013388:	2300      	movne	r3, #0
 801338a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801338e:	74a3      	strb	r3, [r4, #18]
 8013390:	d024      	beq.n	80133dc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8013392:	eef4 9a60 	vcmp.f32	s19, s1
 8013396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801339a:	d01f      	beq.n	80133dc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 801339c:	ee3a aa6b 	vsub.f32	s20, s20, s23
 80133a0:	4640      	mov	r0, r8
 80133a2:	ee7a aacb 	vsub.f32	s21, s21, s22
 80133a6:	eeb0 0a4b 	vmov.f32	s0, s22
 80133aa:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 80133ae:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 80133b2:	eef0 0a6b 	vmov.f32	s1, s23
 80133b6:	eea7 0acc 	vfms.f32	s0, s15, s24
 80133ba:	eeec 0a87 	vfma.f32	s1, s25, s14
 80133be:	f006 fb34 	bl	8019a2a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80133c2:	ed8d 0a04 	vstr	s0, [sp, #16]
 80133c6:	ee30 0a68 	vsub.f32	s0, s0, s17
 80133ca:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80133ce:	edcd 0a05 	vstr	s1, [sp, #20]
 80133d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133d6:	d121      	bne.n	801341c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 80133d8:	2301      	movs	r3, #1
 80133da:	74a3      	strb	r3, [r4, #18]
 80133dc:	7c63      	ldrb	r3, [r4, #17]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d051      	beq.n	8013486 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 80133e2:	ee39 7a69 	vsub.f32	s14, s18, s19
 80133e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80134dc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 80133ea:	eef4 9ac9 	vcmpe.f32	s19, s18
 80133ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80133f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133f6:	edc4 7a08 	vstr	s15, [r4, #32]
 80133fa:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 80133fe:	ee17 3a90 	vmov	r3, s15
 8013402:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 8013406:	b21a      	sxth	r2, r3
 8013408:	ee17 3a90 	vmov	r3, s15
 801340c:	bf48      	it	mi
 801340e:	8122      	strhmi	r2, [r4, #8]
 8013410:	b21b      	sxth	r3, r3
 8013412:	bf56      	itet	pl
 8013414:	80e2      	strhpl	r2, [r4, #6]
 8013416:	80e3      	strhmi	r3, [r4, #6]
 8013418:	8123      	strhpl	r3, [r4, #8]
 801341a:	e02c      	b.n	8013476 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801341c:	ee70 0ae9 	vsub.f32	s1, s1, s19
 8013420:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8013424:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013428:	edc4 7a05 	vstr	s15, [r4, #20]
 801342c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013430:	d102      	bne.n	8013438 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 8013432:	2301      	movs	r3, #1
 8013434:	7463      	strb	r3, [r4, #17]
 8013436:	e7d1      	b.n	80133dc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8013438:	eeb0 7a69 	vmov.f32	s14, s19
 801343c:	ee39 9a69 	vsub.f32	s18, s18, s19
 8013440:	ee38 8a68 	vsub.f32	s16, s16, s17
 8013444:	eea8 7ae7 	vfms.f32	s14, s17, s15
 8013448:	ed84 7a06 	vstr	s14, [r4, #24]
 801344c:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8013450:	ee38 8a47 	vsub.f32	s16, s16, s14
 8013454:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80134e0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 8013458:	eec7 7a08 	vdiv.f32	s15, s14, s16
 801345c:	ed84 8a07 	vstr	s16, [r4, #28]
 8013460:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013468:	edc4 7a08 	vstr	s15, [r4, #32]
 801346c:	d503      	bpl.n	8013476 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801346e:	eeb1 8a48 	vneg.f32	s16, s16
 8013472:	ed84 8a07 	vstr	s16, [r4, #28]
 8013476:	60e7      	str	r7, [r4, #12]
 8013478:	7426      	strb	r6, [r4, #16]
 801347a:	61ac      	str	r4, [r5, #24]
 801347c:	b006      	add	sp, #24
 801347e:	ecbd 8b0a 	vpop	{d8-d12}
 8013482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013486:	7ca3      	ldrb	r3, [r4, #18]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d0f4      	beq.n	8013476 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801348c:	ee38 7a68 	vsub.f32	s14, s16, s17
 8013490:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80134dc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8013494:	eef4 8ac8 	vcmpe.f32	s17, s16
 8013498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801349c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134a0:	edc4 7a08 	vstr	s15, [r4, #32]
 80134a4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80134a8:	ee17 3a90 	vmov	r3, s15
 80134ac:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 80134b0:	b21a      	sxth	r2, r3
 80134b2:	ee17 3a90 	vmov	r3, s15
 80134b6:	bf48      	it	mi
 80134b8:	8122      	strhmi	r2, [r4, #8]
 80134ba:	b21b      	sxth	r3, r3
 80134bc:	bf56      	itet	pl
 80134be:	80e2      	strhpl	r2, [r4, #6]
 80134c0:	80e3      	strhmi	r3, [r4, #6]
 80134c2:	8123      	strhpl	r3, [r4, #8]
 80134c4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80134c8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80134cc:	1a9b      	subs	r3, r3, r2
 80134ce:	ee07 3a90 	vmov	s15, r3
 80134d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134d6:	edc4 7a07 	vstr	s15, [r4, #28]
 80134da:	e7cc      	b.n	8013476 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 80134dc:	447ffffe 	.word	0x447ffffe
 80134e0:	44800000 	.word	0x44800000

080134e4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 80134e4:	b510      	push	{r4, lr}
 80134e6:	ed2d 8b02 	vpush	{d8}
 80134ea:	eef0 8a62 	vmov.f32	s17, s5
 80134ee:	2100      	movs	r1, #0
 80134f0:	4604      	mov	r4, r0
 80134f2:	eeb0 8a42 	vmov.f32	s16, s4
 80134f6:	f016 f9f1 	bl	80298dc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 80134fa:	eef0 7a68 	vmov.f32	s15, s17
 80134fe:	6823      	ldr	r3, [r4, #0]
 8013500:	4620      	mov	r0, r4
 8013502:	689b      	ldr	r3, [r3, #8]
 8013504:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8013508:	ee17 2a90 	vmov	r2, s15
 801350c:	eef0 7a48 	vmov.f32	s15, s16
 8013510:	ecbd 8b02 	vpop	{d8}
 8013514:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8013518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801351c:	ee17 1a90 	vmov	r1, s15
 8013520:	4718      	bx	r3

08013522 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8013522:	b510      	push	{r4, lr}
 8013524:	ed2d 8b02 	vpush	{d8}
 8013528:	eef0 8a63 	vmov.f32	s17, s7
 801352c:	2100      	movs	r1, #0
 801352e:	4604      	mov	r4, r0
 8013530:	eeb0 8a43 	vmov.f32	s16, s6
 8013534:	f016 fa94 	bl	8029a60 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8013538:	eef0 7a68 	vmov.f32	s15, s17
 801353c:	6823      	ldr	r3, [r4, #0]
 801353e:	4620      	mov	r0, r4
 8013540:	689b      	ldr	r3, [r3, #8]
 8013542:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8013546:	ee17 2a90 	vmov	r2, s15
 801354a:	eef0 7a48 	vmov.f32	s15, s16
 801354e:	ecbd 8b02 	vpop	{d8}
 8013552:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8013556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801355a:	ee17 1a90 	vmov	r1, s15
 801355e:	4718      	bx	r3

08013560 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8013560:	b513      	push	{r0, r1, r4, lr}
 8013562:	4604      	mov	r4, r0
 8013564:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8013566:	f006 fa60 	bl	8019a2a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801356a:	eef0 7a60 	vmov.f32	s15, s1
 801356e:	4620      	mov	r0, r4
 8013570:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8013574:	ee17 2a90 	vmov	r2, s15
 8013578:	eef0 7a40 	vmov.f32	s15, s0
 801357c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8013580:	ee17 1a90 	vmov	r1, s15
 8013584:	b002      	add	sp, #8
 8013586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801358a:	f016 b901 	b.w	8029790 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 801358e:	b513      	push	{r0, r1, r4, lr}
 8013590:	4604      	mov	r4, r0
 8013592:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8013594:	f006 fa49 	bl	8019a2a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8013598:	eef0 7a60 	vmov.f32	s15, s1
 801359c:	4620      	mov	r0, r4
 801359e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80135a2:	ee17 2a90 	vmov	r2, s15
 80135a6:	eef0 7a40 	vmov.f32	s15, s0
 80135aa:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80135ae:	ee17 1a90 	vmov	r1, s15
 80135b2:	b002      	add	sp, #8
 80135b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135b8:	f016 b937 	b.w	802982a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

080135bc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 80135bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135be:	2400      	movs	r4, #0
 80135c0:	9f07      	ldr	r7, [sp, #28]
 80135c2:	f04f 0e01 	mov.w	lr, #1
 80135c6:	4626      	mov	r6, r4
 80135c8:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 80135cc:	4463      	add	r3, ip
 80135ce:	4563      	cmp	r3, ip
 80135d0:	d02d      	beq.n	801362e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 80135d2:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 80135d6:	2d06      	cmp	r5, #6
 80135d8:	d8f9      	bhi.n	80135ce <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80135da:	fa0e f505 	lsl.w	r5, lr, r5
 80135de:	f015 0f66 	tst.w	r5, #102	@ 0x66
 80135e2:	d10d      	bne.n	8013600 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 80135e4:	f015 0f10 	tst.w	r5, #16
 80135e8:	d117      	bne.n	801361a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 80135ea:	072d      	lsls	r5, r5, #28
 80135ec:	d5ef      	bpl.n	80135ce <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80135ee:	3801      	subs	r0, #1
 80135f0:	b91e      	cbnz	r6, 80135fa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 80135f2:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 80135f6:	682d      	ldr	r5, [r5, #0]
 80135f8:	600d      	str	r5, [r1, #0]
 80135fa:	b96c      	cbnz	r4, 8013618 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80135fc:	2601      	movs	r6, #1
 80135fe:	e7e6      	b.n	80135ce <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8013600:	b926      	cbnz	r6, 801360c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 8013602:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8013606:	f853 3c08 	ldr.w	r3, [r3, #-8]
 801360a:	600b      	str	r3, [r1, #0]
 801360c:	b924      	cbnz	r4, 8013618 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801360e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8013612:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013616:	6013      	str	r3, [r2, #0]
 8013618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801361a:	3801      	subs	r0, #1
 801361c:	b91c      	cbnz	r4, 8013626 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 801361e:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8013622:	6824      	ldr	r4, [r4, #0]
 8013624:	6014      	str	r4, [r2, #0]
 8013626:	2e00      	cmp	r6, #0
 8013628:	d1f6      	bne.n	8013618 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801362a:	2401      	movs	r4, #1
 801362c:	e7cf      	b.n	80135ce <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801362e:	b90e      	cbnz	r6, 8013634 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8013630:	2300      	movs	r3, #0
 8013632:	600b      	str	r3, [r1, #0]
 8013634:	2c00      	cmp	r4, #0
 8013636:	d1ef      	bne.n	8013618 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8013638:	2300      	movs	r3, #0
 801363a:	e7ec      	b.n	8013616 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0801363c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 801363c:	b538      	push	{r3, r4, r5, lr}
 801363e:	ed2d 8b0a 	vpush	{d8-d12}
 8013642:	eef0 ba40 	vmov.f32	s23, s0
 8013646:	4604      	mov	r4, r0
 8013648:	eeb0 ca60 	vmov.f32	s24, s1
 801364c:	460d      	mov	r5, r1
 801364e:	eef0 aa41 	vmov.f32	s21, s2
 8013652:	eeb0 ba61 	vmov.f32	s22, s3
 8013656:	eeb0 9a42 	vmov.f32	s18, s4
 801365a:	eef0 9a62 	vmov.f32	s19, s5
 801365e:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8013662:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8013666:	ee3a 8a89 	vadd.f32	s16, s21, s18
 801366a:	ee68 8a8a 	vmul.f32	s17, s17, s20
 801366e:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8013672:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8013676:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 801367a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801367e:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8013682:	f016 fbc5 	bl	8029e10 <sqrtf>
 8013686:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801368a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801368e:	d12e      	bne.n	80136ee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8013690:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8013694:	ee39 7acb 	vsub.f32	s14, s19, s22
 8013698:	eeb0 8a6a 	vmov.f32	s16, s21
 801369c:	eef0 8a4b 	vmov.f32	s17, s22
 80136a0:	eea7 8a8a 	vfma.f32	s16, s15, s20
 80136a4:	eee7 8a0a 	vfma.f32	s17, s14, s20
 80136a8:	eea7 8a0a 	vfma.f32	s16, s14, s20
 80136ac:	eee7 8aca 	vfms.f32	s17, s15, s20
 80136b0:	2d02      	cmp	r5, #2
 80136b2:	dc2f      	bgt.n	8013714 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 80136b4:	3501      	adds	r5, #1
 80136b6:	eef0 1a4b 	vmov.f32	s3, s22
 80136ba:	eeb0 1a6a 	vmov.f32	s2, s21
 80136be:	4620      	mov	r0, r4
 80136c0:	4629      	mov	r1, r5
 80136c2:	eef0 2a68 	vmov.f32	s5, s17
 80136c6:	eeb0 2a48 	vmov.f32	s4, s16
 80136ca:	eef0 0a4c 	vmov.f32	s1, s24
 80136ce:	eeb0 0a6b 	vmov.f32	s0, s23
 80136d2:	f7ff ffb3 	bl	801363c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80136d6:	eef0 0a68 	vmov.f32	s1, s17
 80136da:	eeb0 0a48 	vmov.f32	s0, s16
 80136de:	4620      	mov	r0, r4
 80136e0:	f7ff ff55 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80136e4:	eeb0 ba68 	vmov.f32	s22, s17
 80136e8:	eef0 aa48 	vmov.f32	s21, s16
 80136ec:	e7b9      	b.n	8013662 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 80136ee:	ee38 8a6b 	vsub.f32	s16, s16, s23
 80136f2:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80136f6:	ee78 8acc 	vsub.f32	s17, s17, s24
 80136fa:	ee28 7a27 	vmul.f32	s14, s16, s15
 80136fe:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8013702:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8013706:	eec7 8a80 	vdiv.f32	s17, s15, s0
 801370a:	ee3b 8a88 	vadd.f32	s16, s23, s16
 801370e:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8013712:	e7cd      	b.n	80136b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8013714:	eef0 0a68 	vmov.f32	s1, s17
 8013718:	4620      	mov	r0, r4
 801371a:	eeb0 0a48 	vmov.f32	s0, s16
 801371e:	f7ff ff36 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8013722:	ecbd 8b0a 	vpop	{d8-d12}
 8013726:	bd38      	pop	{r3, r4, r5, pc}

08013728 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8013728:	b510      	push	{r4, lr}
 801372a:	ed2d 8b0a 	vpush	{d8-d12}
 801372e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8013732:	4604      	mov	r4, r0
 8013734:	eeb0 ca40 	vmov.f32	s24, s0
 8013738:	2b02      	cmp	r3, #2
 801373a:	eeb0 9a60 	vmov.f32	s18, s1
 801373e:	eef0 9a41 	vmov.f32	s19, s2
 8013742:	eef0 8a61 	vmov.f32	s17, s3
 8013746:	eeb0 ba42 	vmov.f32	s22, s4
 801374a:	eef0 ba62 	vmov.f32	s23, s5
 801374e:	eeb0 aa43 	vmov.f32	s20, s6
 8013752:	eef0 aa63 	vmov.f32	s21, s7
 8013756:	eeb0 8a44 	vmov.f32	s16, s8
 801375a:	eef0 ca64 	vmov.f32	s25, s9
 801375e:	d12c      	bne.n	80137ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8013760:	eef0 0a62 	vmov.f32	s1, s5
 8013764:	eeb0 0a42 	vmov.f32	s0, s4
 8013768:	f7ff ff11 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801376c:	ee79 9acb 	vsub.f32	s19, s19, s22
 8013770:	ee7a caec 	vsub.f32	s25, s21, s25
 8013774:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8013778:	ee3a 8a48 	vsub.f32	s16, s20, s16
 801377c:	ee69 9aac 	vmul.f32	s19, s19, s25
 8013780:	ee28 8a88 	vmul.f32	s16, s17, s16
 8013784:	eef4 9ac8 	vcmpe.f32	s19, s16
 8013788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801378c:	db0f      	blt.n	80137ae <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 801378e:	2101      	movs	r1, #1
 8013790:	eef0 2a6a 	vmov.f32	s5, s21
 8013794:	eeb0 2a4a 	vmov.f32	s4, s20
 8013798:	4620      	mov	r0, r4
 801379a:	eef0 1a6b 	vmov.f32	s3, s23
 801379e:	eeb0 1a4b 	vmov.f32	s2, s22
 80137a2:	eef0 0a49 	vmov.f32	s1, s18
 80137a6:	eeb0 0a4c 	vmov.f32	s0, s24
 80137aa:	f7ff ff47 	bl	801363c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80137ae:	eef0 0a6a 	vmov.f32	s1, s21
 80137b2:	4620      	mov	r0, r4
 80137b4:	eeb0 0a4a 	vmov.f32	s0, s20
 80137b8:	e035      	b.n	8013826 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 80137ba:	2b01      	cmp	r3, #1
 80137bc:	d138      	bne.n	8013830 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80137be:	ee31 4ae2 	vsub.f32	s8, s3, s5
 80137c2:	ee33 6a48 	vsub.f32	s12, s6, s16
 80137c6:	ee71 7a42 	vsub.f32	s15, s2, s4
 80137ca:	ee73 6ae4 	vsub.f32	s13, s7, s9
 80137ce:	ee26 7a44 	vnmul.f32	s14, s12, s8
 80137d2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80137d6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80137da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137de:	d027      	beq.n	8013830 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80137e0:	ee28 8a63 	vnmul.f32	s16, s16, s7
 80137e4:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 80137e8:	eea4 8a83 	vfma.f32	s16, s9, s6
 80137ec:	eee1 8a22 	vfma.f32	s17, s2, s5
 80137f0:	ee68 7a67 	vnmul.f32	s15, s16, s15
 80137f4:	ee28 8a44 	vnmul.f32	s16, s16, s8
 80137f8:	eee6 7a28 	vfma.f32	s15, s12, s17
 80137fc:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8013800:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8013804:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8013808:	eec8 0a07 	vdiv.f32	s1, s16, s14
 801380c:	ee3c ca40 	vsub.f32	s24, s24, s0
 8013810:	ee39 9a60 	vsub.f32	s18, s18, s1
 8013814:	ee29 9a09 	vmul.f32	s18, s18, s18
 8013818:	eeac 9a0c 	vfma.f32	s18, s24, s24
 801381c:	eef4 7ac9 	vcmpe.f32	s15, s18
 8013820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013824:	db04      	blt.n	8013830 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8013826:	f7ff feb2 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801382a:	ecbd 8b0a 	vpop	{d8-d12}
 801382e:	bd10      	pop	{r4, pc}
 8013830:	eef0 0a6b 	vmov.f32	s1, s23
 8013834:	4620      	mov	r0, r4
 8013836:	eeb0 0a4b 	vmov.f32	s0, s22
 801383a:	f7ff fea8 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801383e:	e7b6      	b.n	80137ae <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08013840 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8013840:	b510      	push	{r4, lr}
 8013842:	ed2d 8b0c 	vpush	{d8-d13}
 8013846:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 801384a:	4604      	mov	r4, r0
 801384c:	eeb0 9a40 	vmov.f32	s18, s0
 8013850:	eef0 9a60 	vmov.f32	s19, s1
 8013854:	eef0 aa41 	vmov.f32	s21, s2
 8013858:	eeb0 ba61 	vmov.f32	s22, s3
 801385c:	b933      	cbnz	r3, 801386c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 801385e:	f7ff fe96 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8013862:	eef0 0a4b 	vmov.f32	s1, s22
 8013866:	eeb0 0a6a 	vmov.f32	s0, s21
 801386a:	e015      	b.n	8013898 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 801386c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013870:	2b02      	cmp	r3, #2
 8013872:	ee71 8a40 	vsub.f32	s17, s2, s0
 8013876:	ee31 8ae0 	vsub.f32	s16, s3, s1
 801387a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801387e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013882:	d10f      	bne.n	80138a4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8013884:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8013888:	ee30 0a08 	vadd.f32	s0, s0, s16
 801388c:	f7ff fe7f 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8013890:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8013894:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8013898:	4620      	mov	r0, r4
 801389a:	f7ff fe78 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801389e:	ecbd 8b0c 	vpop	{d8-d13}
 80138a2:	bd10      	pop	{r4, pc}
 80138a4:	f7ff fe73 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80138a8:	eef0 0a69 	vmov.f32	s1, s19
 80138ac:	eeb0 0a49 	vmov.f32	s0, s18
 80138b0:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 80139e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 80138b4:	eeb1 aa68 	vneg.f32	s20, s17
 80138b8:	eddf ba4a 	vldr	s23, [pc, #296]	@ 80139e4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 80138bc:	eee8 0a27 	vfma.f32	s1, s16, s15
 80138c0:	4620      	mov	r0, r4
 80138c2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80138c6:	ed9f ca48 	vldr	s24, [pc, #288]	@ 80139e8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 80138ca:	eddf ca48 	vldr	s25, [pc, #288]	@ 80139ec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 80138ce:	ed9f da48 	vldr	s26, [pc, #288]	@ 80139f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 80138d2:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80138d6:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80138da:	f7ff fe58 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80138de:	eef0 0a69 	vmov.f32	s1, s19
 80138e2:	eeb0 0a49 	vmov.f32	s0, s18
 80138e6:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80139f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 80138ea:	4620      	mov	r0, r4
 80138ec:	eee8 0a27 	vfma.f32	s1, s16, s15
 80138f0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80138f4:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80138f8:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80138fc:	f7ff fe47 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8013900:	eef0 0a69 	vmov.f32	s1, s19
 8013904:	eeb0 0a49 	vmov.f32	s0, s18
 8013908:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80139f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 801390c:	4620      	mov	r0, r4
 801390e:	eee8 0a27 	vfma.f32	s1, s16, s15
 8013912:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8013916:	eeea 0a2c 	vfma.f32	s1, s20, s25
 801391a:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801391e:	f7ff fe36 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8013922:	eef0 0a69 	vmov.f32	s1, s19
 8013926:	eeb0 0a49 	vmov.f32	s0, s18
 801392a:	eddf 7a34 	vldr	s15, [pc, #208]	@ 80139fc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 801392e:	4620      	mov	r0, r4
 8013930:	eee8 0a27 	vfma.f32	s1, s16, s15
 8013934:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8013938:	eeea 0a0d 	vfma.f32	s1, s20, s26
 801393c:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8013940:	f7ff fe25 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8013944:	ee79 0a88 	vadd.f32	s1, s19, s16
 8013948:	ee39 0a28 	vadd.f32	s0, s18, s17
 801394c:	4620      	mov	r0, r4
 801394e:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8013952:	ee30 0a08 	vadd.f32	s0, s0, s16
 8013956:	f7ff fe1a 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801395a:	eef0 0a69 	vmov.f32	s1, s19
 801395e:	eeb0 0a49 	vmov.f32	s0, s18
 8013962:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8013a00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8013966:	4620      	mov	r0, r4
 8013968:	eee8 0a27 	vfma.f32	s1, s16, s15
 801396c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8013970:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8013974:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8013978:	f7ff fe09 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801397c:	eef0 0a69 	vmov.f32	s1, s19
 8013980:	eeb0 0a49 	vmov.f32	s0, s18
 8013984:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8013a04 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8013988:	4620      	mov	r0, r4
 801398a:	eee8 0a27 	vfma.f32	s1, s16, s15
 801398e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8013992:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8013996:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801399a:	f7ff fdf8 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801399e:	eef0 0a69 	vmov.f32	s1, s19
 80139a2:	eeb0 0a49 	vmov.f32	s0, s18
 80139a6:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8013a08 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 80139aa:	4620      	mov	r0, r4
 80139ac:	eee8 0a27 	vfma.f32	s1, s16, s15
 80139b0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80139b4:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80139b8:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80139bc:	f7ff fde7 	bl	801358e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80139c0:	eef0 0a69 	vmov.f32	s1, s19
 80139c4:	eeb0 0a49 	vmov.f32	s0, s18
 80139c8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8013a0c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 80139cc:	4620      	mov	r0, r4
 80139ce:	eee8 0a27 	vfma.f32	s1, s16, s15
 80139d2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80139d6:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80139da:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80139de:	e73e      	b.n	801385e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 80139e0:	3d23d70a 	.word	0x3d23d70a
 80139e4:	3e8f5c29 	.word	0x3e8f5c29
 80139e8:	3f19999a 	.word	0x3f19999a
 80139ec:	3f4ccccd 	.word	0x3f4ccccd
 80139f0:	3f75c28f 	.word	0x3f75c28f
 80139f4:	3e4ccccd 	.word	0x3e4ccccd
 80139f8:	3ecccccd 	.word	0x3ecccccd
 80139fc:	3f3851ec 	.word	0x3f3851ec
 8013a00:	3fa3d70a 	.word	0x3fa3d70a
 8013a04:	3fcccccd 	.word	0x3fcccccd
 8013a08:	3fe66666 	.word	0x3fe66666
 8013a0c:	3ffae148 	.word	0x3ffae148

08013a10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8013a10:	b570      	push	{r4, r5, r6, lr}
 8013a12:	ed2d 8b06 	vpush	{d8-d10}
 8013a16:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8013a1a:	eef0 aa40 	vmov.f32	s21, s0
 8013a1e:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8013a22:	4604      	mov	r4, r0
 8013a24:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8013a28:	ee30 9a49 	vsub.f32	s18, s0, s18
 8013a2c:	eeb0 aa60 	vmov.f32	s20, s1
 8013a30:	ee28 0a08 	vmul.f32	s0, s16, s16
 8013a34:	eea9 0a09 	vfma.f32	s0, s18, s18
 8013a38:	f016 f9ea 	bl	8029e10 <sqrtf>
 8013a3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a44:	dd36      	ble.n	8013ab4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8013a46:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8013a4a:	2600      	movs	r6, #0
 8013a4c:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8013a50:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8013a54:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8013a58:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8013a5c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8013a60:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8013a64:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8013a68:	ee70 9a28 	vadd.f32	s19, s0, s17
 8013a6c:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8013a70:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8013a74:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8013a78:	b1fd      	cbz	r5, 8013aba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 8013a7a:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 8013a7e:	eef0 0a49 	vmov.f32	s1, s18
 8013a82:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8013a86:	eeb0 0a69 	vmov.f32	s0, s19
 8013a8a:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 8013a8e:	4620      	mov	r0, r4
 8013a90:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 8013a94:	f7ff fd64 	bl	8013560 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8013a98:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8013a9c:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8013aa0:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8013aa4:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8013aa8:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 8013aac:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8013ab0:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8013ab4:	ecbd 8b06 	vpop	{d8-d10}
 8013ab8:	bd70      	pop	{r4, r5, r6, pc}
 8013aba:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8013abe:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8013ac2:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8013ac6:	b16b      	cbz	r3, 8013ae4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8013ac8:	eef0 1a49 	vmov.f32	s3, s18
 8013acc:	4620      	mov	r0, r4
 8013ace:	eeb0 1a69 	vmov.f32	s2, s19
 8013ad2:	eef0 0a62 	vmov.f32	s1, s5
 8013ad6:	eeb0 0a42 	vmov.f32	s0, s4
 8013ada:	f7ff feb1 	bl	8013840 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8013ade:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8013ae2:	e7db      	b.n	8013a9c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8013ae4:	eef0 4a48 	vmov.f32	s9, s16
 8013ae8:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8013aec:	eeb0 4a68 	vmov.f32	s8, s17
 8013af0:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8013af4:	eef0 3a49 	vmov.f32	s7, s18
 8013af8:	4620      	mov	r0, r4
 8013afa:	eeb0 3a69 	vmov.f32	s6, s19
 8013afe:	f7ff fe13 	bl	8013728 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8013b02:	e7cb      	b.n	8013a9c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08013b04 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8013b04:	ee07 2a90 	vmov	s15, r2
 8013b08:	ee07 1a10 	vmov	s14, r1
 8013b0c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8013b10:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8013b24 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8013b14:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8013b18:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8013b1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013b20:	f7ff bf76 	b.w	8013a10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8013b24:	3d000000 	.word	0x3d000000

08013b28 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8013b28:	b538      	push	{r3, r4, r5, lr}
 8013b2a:	ed2d 8b02 	vpush	{d8}
 8013b2e:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8013b32:	4604      	mov	r4, r0
 8013b34:	b31d      	cbz	r5, 8013b7e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8013b36:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 8013b3a:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8013b3e:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8013b42:	ee78 8a67 	vsub.f32	s17, s16, s15
 8013b46:	ee38 8a27 	vadd.f32	s16, s16, s15
 8013b4a:	eef0 0a68 	vmov.f32	s1, s17
 8013b4e:	f7ff fd07 	bl	8013560 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8013b52:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8013b56:	eef0 1a48 	vmov.f32	s3, s16
 8013b5a:	4620      	mov	r0, r4
 8013b5c:	eeb0 0a41 	vmov.f32	s0, s2
 8013b60:	eef0 0a68 	vmov.f32	s1, s17
 8013b64:	f7ff fe6c 	bl	8013840 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8013b68:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8013b6c:	eef0 1a68 	vmov.f32	s3, s17
 8013b70:	4620      	mov	r0, r4
 8013b72:	eef0 0a48 	vmov.f32	s1, s16
 8013b76:	eeb0 0a41 	vmov.f32	s0, s2
 8013b7a:	f7ff fe61 	bl	8013840 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8013b7e:	4628      	mov	r0, r5
 8013b80:	ecbd 8b02 	vpop	{d8}
 8013b84:	bd38      	pop	{r3, r4, r5, pc}

08013b86 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8013b86:	b510      	push	{r4, lr}
 8013b88:	ed2d 8b02 	vpush	{d8}
 8013b8c:	4604      	mov	r4, r0
 8013b8e:	eeb0 8a40 	vmov.f32	s16, s0
 8013b92:	eef0 8a60 	vmov.f32	s17, s1
 8013b96:	f7ff ffc7 	bl	8013b28 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8013b9a:	b9d0      	cbnz	r0, 8013bd2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8013b9c:	4620      	mov	r0, r4
 8013b9e:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8013ba2:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 8013ba6:	eef0 0a68 	vmov.f32	s1, s17
 8013baa:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 8013bae:	eeb0 0a48 	vmov.f32	s0, s16
 8013bb2:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 8013bb6:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8013bba:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8013bbe:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8013bc2:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8013bc6:	f7ff fdaf 	bl	8013728 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8013bca:	2001      	movs	r0, #1
 8013bcc:	ecbd 8b02 	vpop	{d8}
 8013bd0:	bd10      	pop	{r4, pc}
 8013bd2:	2000      	movs	r0, #0
 8013bd4:	e7fa      	b.n	8013bcc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

08013bd6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 8013bd6:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 8013bda:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 8013bde:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 8013be2:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 8013be6:	f7ff be2b 	b.w	8013840 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08013bec <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8013bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bf0:	b089      	sub	sp, #36	@ 0x24
 8013bf2:	461c      	mov	r4, r3
 8013bf4:	4682      	mov	sl, r0
 8013bf6:	4615      	mov	r5, r2
 8013bf8:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8013bfc:	f10d 0820 	add.w	r8, sp, #32
 8013c00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013c02:	9304      	str	r3, [sp, #16]
 8013c04:	2300      	movs	r3, #0
 8013c06:	9105      	str	r1, [sp, #20]
 8013c08:	9306      	str	r3, [sp, #24]
 8013c0a:	f848 3d04 	str.w	r3, [r8, #-4]!
 8013c0e:	9b04      	ldr	r3, [sp, #16]
 8013c10:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8013c14:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8013c18:	9b05      	ldr	r3, [sp, #20]
 8013c1a:	429d      	cmp	r5, r3
 8013c1c:	d96d      	bls.n	8013cfa <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 8013c1e:	3d01      	subs	r5, #1
 8013c20:	f819 3005 	ldrb.w	r3, [r9, r5]
 8013c24:	2b06      	cmp	r3, #6
 8013c26:	d8f7      	bhi.n	8013c18 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8013c28:	a201      	add	r2, pc, #4	@ (adr r2, 8013c30 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8013c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c2e:	bf00      	nop
 8013c30:	08013c4f 	.word	0x08013c4f
 8013c34:	08013c19 	.word	0x08013c19
 8013c38:	08013c4d 	.word	0x08013c4d
 8013c3c:	08013c71 	.word	0x08013c71
 8013c40:	08013c71 	.word	0x08013c71
 8013c44:	08013c75 	.word	0x08013c75
 8013c48:	08013cb5 	.word	0x08013cb5
 8013c4c:	3c02      	subs	r4, #2
 8013c4e:	4650      	mov	r0, sl
 8013c50:	9400      	str	r4, [sp, #0]
 8013c52:	462b      	mov	r3, r5
 8013c54:	4642      	mov	r2, r8
 8013c56:	a906      	add	r1, sp, #24
 8013c58:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8013c5c:	f7ff fcae 	bl	80135bc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8013c60:	eddd 0a07 	vldr	s1, [sp, #28]
 8013c64:	ed9d 0a06 	vldr	s0, [sp, #24]
 8013c68:	4630      	mov	r0, r6
 8013c6a:	f7ff fed1 	bl	8013a10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8013c6e:	e7d3      	b.n	8013c18 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8013c70:	3c01      	subs	r4, #1
 8013c72:	e7ec      	b.n	8013c4e <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8013c74:	f1a4 0b04 	sub.w	fp, r4, #4
 8013c78:	3c02      	subs	r4, #2
 8013c7a:	4650      	mov	r0, sl
 8013c7c:	462b      	mov	r3, r5
 8013c7e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8013c82:	f8cd b000 	str.w	fp, [sp]
 8013c86:	4642      	mov	r2, r8
 8013c88:	a906      	add	r1, sp, #24
 8013c8a:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8013c8e:	f7ff fc95 	bl	80135bc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8013c92:	eddd 2a07 	vldr	s5, [sp, #28]
 8013c96:	ed9d 2a06 	vldr	s4, [sp, #24]
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	ed54 1a01 	vldr	s3, [r4, #-4]
 8013ca0:	ed14 1a02 	vldr	s2, [r4, #-8]
 8013ca4:	edd4 0a01 	vldr	s1, [r4, #4]
 8013ca8:	ed94 0a00 	vldr	s0, [r4]
 8013cac:	f7ff fc1a 	bl	80134e4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8013cb0:	465c      	mov	r4, fp
 8013cb2:	e7b1      	b.n	8013c18 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8013cb4:	f1a4 0b06 	sub.w	fp, r4, #6
 8013cb8:	3c02      	subs	r4, #2
 8013cba:	4650      	mov	r0, sl
 8013cbc:	462b      	mov	r3, r5
 8013cbe:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8013cc2:	f8cd b000 	str.w	fp, [sp]
 8013cc6:	4642      	mov	r2, r8
 8013cc8:	a906      	add	r1, sp, #24
 8013cca:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8013cce:	f7ff fc75 	bl	80135bc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8013cd2:	eddd 3a07 	vldr	s7, [sp, #28]
 8013cd6:	ed9d 3a06 	vldr	s6, [sp, #24]
 8013cda:	4630      	mov	r0, r6
 8013cdc:	ed54 2a03 	vldr	s5, [r4, #-12]
 8013ce0:	ed14 2a04 	vldr	s4, [r4, #-16]
 8013ce4:	ed54 1a01 	vldr	s3, [r4, #-4]
 8013ce8:	ed14 1a02 	vldr	s2, [r4, #-8]
 8013cec:	edd4 0a01 	vldr	s1, [r4, #4]
 8013cf0:	ed94 0a00 	vldr	s0, [r4]
 8013cf4:	f7ff fc15 	bl	8013522 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8013cf8:	e7da      	b.n	8013cb0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8013cfa:	9b04      	ldr	r3, [sp, #16]
 8013cfc:	b113      	cbz	r3, 8013d04 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 8013cfe:	4630      	mov	r0, r6
 8013d00:	f7ff ff69 	bl	8013bd6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8013d04:	b009      	add	sp, #36	@ 0x24
 8013d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d0a:	bf00      	nop

08013d0c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8013d0c:	eef0 7a60 	vmov.f32	s15, s1
 8013d10:	6803      	ldr	r3, [r0, #0]
 8013d12:	689b      	ldr	r3, [r3, #8]
 8013d14:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8013d18:	ee17 2a90 	vmov	r2, s15
 8013d1c:	eef0 7a40 	vmov.f32	s15, s0
 8013d20:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8013d24:	ee17 1a90 	vmov	r1, s15
 8013d28:	4718      	bx	r3
	...

08013d2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8013d2c:	4b04      	ldr	r3, [pc, #16]	@ (8013d40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 8013d2e:	b510      	push	{r4, lr}
 8013d30:	4604      	mov	r4, r0
 8013d32:	f840 3b14 	str.w	r3, [r0], #20
 8013d36:	f001 ff3f 	bl	8015bb8 <_ZN8touchgfx7OutlineD1Ev>
 8013d3a:	4620      	mov	r0, r4
 8013d3c:	bd10      	pop	{r4, pc}
 8013d3e:	bf00      	nop
 8013d40:	0802f230 	.word	0x0802f230

08013d44 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8013d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d48:	ed2d 8b04 	vpush	{d8-d9}
 8013d4c:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8013d50:	b0b5      	sub	sp, #212	@ 0xd4
 8013d52:	4605      	mov	r5, r0
 8013d54:	468b      	mov	fp, r1
 8013d56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013d5a:	9206      	str	r2, [sp, #24]
 8013d5c:	461e      	mov	r6, r3
 8013d5e:	2400      	movs	r4, #0
 8013d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d64:	f240 814f 	bls.w	8014006 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8013d68:	23ff      	movs	r3, #255	@ 0xff
 8013d6a:	1d02      	adds	r2, r0, #4
 8013d6c:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 801400c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8013d70:	f04f 0800 	mov.w	r8, #0
 8013d74:	9300      	str	r3, [sp, #0]
 8013d76:	af08      	add	r7, sp, #32
 8013d78:	6981      	ldr	r1, [r0, #24]
 8013d7a:	a808      	add	r0, sp, #32
 8013d7c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8013d7e:	eef0 9a49 	vmov.f32	s19, s18
 8013d82:	f015 fbb9 	bl	80294f8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8013d86:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 8013d8a:	4ba1      	ldr	r3, [pc, #644]	@ (8014010 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8013d8c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013d90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013d94:	2201      	movs	r2, #1
 8013d96:	9308      	str	r3, [sp, #32]
 8013d98:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8013d9c:	edd5 6a08 	vldr	s13, [r5, #32]
 8013da0:	eeb0 8a49 	vmov.f32	s16, s18
 8013da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013da8:	9325      	str	r3, [sp, #148]	@ 0x94
 8013daa:	f04f 0300 	mov.w	r3, #0
 8013dae:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8013db2:	7f6a      	ldrb	r2, [r5, #29]
 8013db4:	eef0 8a49 	vmov.f32	s17, s18
 8013db8:	bf48      	it	mi
 8013dba:	eef1 7a67 	vnegmi.f32	s15, s15
 8013dbe:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8013dc2:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 8013dc6:	46c1      	mov	r9, r8
 8013dc8:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8013dcc:	f04f 0a01 	mov.w	sl, #1
 8013dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013dd4:	7fab      	ldrb	r3, [r5, #30]
 8013dd6:	942a      	str	r4, [sp, #168]	@ 0xa8
 8013dd8:	435a      	muls	r2, r3
 8013dda:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8013dde:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8013de2:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 8013de6:	1c53      	adds	r3, r2, #1
 8013de8:	942b      	str	r4, [sp, #172]	@ 0xac
 8013dea:	942c      	str	r4, [sp, #176]	@ 0xb0
 8013dec:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013df0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8013df4:	942d      	str	r4, [sp, #180]	@ 0xb4
 8013df6:	942e      	str	r4, [sp, #184]	@ 0xb8
 8013df8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8013dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e00:	942f      	str	r4, [sp, #188]	@ 0xbc
 8013e02:	9430      	str	r4, [sp, #192]	@ 0xc0
 8013e04:	9431      	str	r4, [sp, #196]	@ 0xc4
 8013e06:	9432      	str	r4, [sp, #200]	@ 0xc8
 8013e08:	9433      	str	r4, [sp, #204]	@ 0xcc
 8013e0a:	4644      	mov	r4, r8
 8013e0c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8013e10:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8013e14:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8013e18:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8013e1c:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8013e20:	9b06      	ldr	r3, [sp, #24]
 8013e22:	454b      	cmp	r3, r9
 8013e24:	f000 80cc 	beq.w	8013fc0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8013e28:	f109 0301 	add.w	r3, r9, #1
 8013e2c:	9305      	str	r3, [sp, #20]
 8013e2e:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8013e32:	2b06      	cmp	r3, #6
 8013e34:	d839      	bhi.n	8013eaa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8013e36:	e8df f003 	tbb	[pc, r3]
 8013e3a:	3b04      	.short	0x3b04
 8013e3c:	817c6f60 	.word	0x817c6f60
 8013e40:	a0          	.byte	0xa0
 8013e41:	00          	.byte	0x00
 8013e42:	45c1      	cmp	r9, r8
 8013e44:	d92b      	bls.n	8013e9e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8013e46:	eef0 0a49 	vmov.f32	s1, s18
 8013e4a:	4638      	mov	r0, r7
 8013e4c:	eeb0 0a69 	vmov.f32	s0, s19
 8013e50:	f7ff fdde 	bl	8013a10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8013e54:	4638      	mov	r0, r7
 8013e56:	f7ff fe67 	bl	8013b28 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8013e5a:	4681      	mov	r9, r0
 8013e5c:	b9f8      	cbnz	r0, 8013e9e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8013e5e:	eef0 0a49 	vmov.f32	s1, s18
 8013e62:	4638      	mov	r0, r7
 8013e64:	eeb0 0a69 	vmov.f32	s0, s19
 8013e68:	f7ff fe8d 	bl	8013b86 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8013e6c:	4628      	mov	r0, r5
 8013e6e:	4623      	mov	r3, r4
 8013e70:	9a05      	ldr	r2, [sp, #20]
 8013e72:	4641      	mov	r1, r8
 8013e74:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8013e78:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8013e7c:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8013e80:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8013e84:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8013e88:	e9cd b600 	strd	fp, r6, [sp]
 8013e8c:	f7ff feae 	bl	8013bec <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8013e90:	eef0 0a49 	vmov.f32	s1, s18
 8013e94:	eeb0 0a69 	vmov.f32	s0, s19
 8013e98:	4638      	mov	r0, r7
 8013e9a:	f7ff fe74 	bl	8013b86 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8013e9e:	eeb0 8a49 	vmov.f32	s16, s18
 8013ea2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013ea6:	eef0 8a69 	vmov.f32	s17, s19
 8013eaa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8013eae:	e7b7      	b.n	8013e20 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8013eb0:	45c1      	cmp	r9, r8
 8013eb2:	d90d      	bls.n	8013ed0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8013eb4:	4638      	mov	r0, r7
 8013eb6:	f7ff fe37 	bl	8013b28 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8013eba:	b948      	cbnz	r0, 8013ed0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8013ebc:	4623      	mov	r3, r4
 8013ebe:	464a      	mov	r2, r9
 8013ec0:	4641      	mov	r1, r8
 8013ec2:	4628      	mov	r0, r5
 8013ec4:	e9cd a702 	strd	sl, r7, [sp, #8]
 8013ec8:	e9cd b600 	strd	fp, r6, [sp]
 8013ecc:	f7ff fe8e 	bl	8013bec <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8013ed0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013ed4:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8013ed8:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8013edc:	3402      	adds	r4, #2
 8013ede:	edd3 8a00 	vldr	s17, [r3]
 8013ee2:	46c8      	mov	r8, r9
 8013ee4:	ed93 8a01 	vldr	s16, [r3, #4]
 8013ee8:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8013eec:	eef0 9a68 	vmov.f32	s19, s17
 8013ef0:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8013ef4:	eeb0 9a48 	vmov.f32	s18, s16
 8013ef8:	e7d7      	b.n	8013eaa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8013efa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013efe:	4638      	mov	r0, r7
 8013f00:	3402      	adds	r4, #2
 8013f02:	edd3 8a00 	vldr	s17, [r3]
 8013f06:	ed93 8a01 	vldr	s16, [r3, #4]
 8013f0a:	eeb0 0a68 	vmov.f32	s0, s17
 8013f0e:	eef0 0a48 	vmov.f32	s1, s16
 8013f12:	f7ff fd7d 	bl	8013a10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8013f16:	e7c8      	b.n	8013eaa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8013f18:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013f1c:	edd3 8a00 	vldr	s17, [r3]
 8013f20:	eef0 0a48 	vmov.f32	s1, s16
 8013f24:	4638      	mov	r0, r7
 8013f26:	eeb0 0a68 	vmov.f32	s0, s17
 8013f2a:	3401      	adds	r4, #1
 8013f2c:	f7ff fd70 	bl	8013a10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8013f30:	e7bb      	b.n	8013eaa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8013f32:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013f36:	ed93 8a00 	vldr	s16, [r3]
 8013f3a:	e7f1      	b.n	8013f20 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8013f3c:	00a3      	lsls	r3, r4, #2
 8013f3e:	eef0 0a48 	vmov.f32	s1, s16
 8013f42:	eeb0 0a68 	vmov.f32	s0, s17
 8013f46:	4638      	mov	r0, r7
 8013f48:	f103 0208 	add.w	r2, r3, #8
 8013f4c:	f103 090c 	add.w	r9, r3, #12
 8013f50:	4433      	add	r3, r6
 8013f52:	3404      	adds	r4, #4
 8013f54:	4432      	add	r2, r6
 8013f56:	44b1      	add	r9, r6
 8013f58:	edd3 1a01 	vldr	s3, [r3, #4]
 8013f5c:	ed92 2a00 	vldr	s4, [r2]
 8013f60:	edd9 2a00 	vldr	s5, [r9]
 8013f64:	ed93 1a00 	vldr	s2, [r3]
 8013f68:	9207      	str	r2, [sp, #28]
 8013f6a:	f7ff fabb 	bl	80134e4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8013f6e:	9a07      	ldr	r2, [sp, #28]
 8013f70:	ed99 8a00 	vldr	s16, [r9]
 8013f74:	edd2 8a00 	vldr	s17, [r2]
 8013f78:	e797      	b.n	8013eaa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8013f7a:	00a3      	lsls	r3, r4, #2
 8013f7c:	eef0 0a48 	vmov.f32	s1, s16
 8013f80:	eeb0 0a68 	vmov.f32	s0, s17
 8013f84:	4638      	mov	r0, r7
 8013f86:	f103 0210 	add.w	r2, r3, #16
 8013f8a:	f103 0914 	add.w	r9, r3, #20
 8013f8e:	4433      	add	r3, r6
 8013f90:	3406      	adds	r4, #6
 8013f92:	4432      	add	r2, r6
 8013f94:	44b1      	add	r9, r6
 8013f96:	edd3 2a03 	vldr	s5, [r3, #12]
 8013f9a:	ed92 3a00 	vldr	s6, [r2]
 8013f9e:	edd9 3a00 	vldr	s7, [r9]
 8013fa2:	ed93 2a02 	vldr	s4, [r3, #8]
 8013fa6:	edd3 1a01 	vldr	s3, [r3, #4]
 8013faa:	ed93 1a00 	vldr	s2, [r3]
 8013fae:	9207      	str	r2, [sp, #28]
 8013fb0:	f7ff fab7 	bl	8013522 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8013fb4:	9a07      	ldr	r2, [sp, #28]
 8013fb6:	ed99 8a00 	vldr	s16, [r9]
 8013fba:	edd2 8a00 	vldr	s17, [r2]
 8013fbe:	e774      	b.n	8013eaa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8013fc0:	9b06      	ldr	r3, [sp, #24]
 8013fc2:	af08      	add	r7, sp, #32
 8013fc4:	4543      	cmp	r3, r8
 8013fc6:	d90f      	bls.n	8013fe8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8013fc8:	4638      	mov	r0, r7
 8013fca:	f7ff fdad 	bl	8013b28 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8013fce:	b958      	cbnz	r0, 8013fe8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8013fd0:	2301      	movs	r3, #1
 8013fd2:	9703      	str	r7, [sp, #12]
 8013fd4:	f8cd b000 	str.w	fp, [sp]
 8013fd8:	4641      	mov	r1, r8
 8013fda:	9a06      	ldr	r2, [sp, #24]
 8013fdc:	4628      	mov	r0, r5
 8013fde:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8013fe2:	4623      	mov	r3, r4
 8013fe4:	f7ff fe02 	bl	8013bec <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8013fe8:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8013fec:	4638      	mov	r0, r7
 8013fee:	f015 fb17 	bl	8029620 <_ZN8touchgfx6Canvas6renderEh>
 8013ff2:	4604      	mov	r4, r0
 8013ff4:	4638      	mov	r0, r7
 8013ff6:	f7ff fe99 	bl	8013d2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8013ffa:	4620      	mov	r0, r4
 8013ffc:	b035      	add	sp, #212	@ 0xd4
 8013ffe:	ecbd 8b04 	vpop	{d8-d9}
 8014002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014006:	2401      	movs	r4, #1
 8014008:	e7f7      	b.n	8013ffa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 801400a:	bf00      	nop
 801400c:	00000000 	.word	0x00000000
 8014010:	0802e824 	.word	0x0802e824

08014014 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8014014:	b510      	push	{r4, lr}
 8014016:	4604      	mov	r4, r0
 8014018:	f7ff fe88 	bl	8013d2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 801401c:	21b0      	movs	r1, #176	@ 0xb0
 801401e:	4620      	mov	r0, r4
 8014020:	f015 fecb 	bl	8029dba <_ZdlPvj>
 8014024:	4620      	mov	r0, r4
 8014026:	bd10      	pop	{r4, pc}

08014028 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8014028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801402c:	4698      	mov	r8, r3
 801402e:	23ff      	movs	r3, #255	@ 0xff
 8014030:	4607      	mov	r7, r0
 8014032:	4689      	mov	r9, r1
 8014034:	4692      	mov	sl, r2
 8014036:	1d02      	adds	r2, r0, #4
 8014038:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 801403c:	2400      	movs	r4, #0
 801403e:	44ca      	add	sl, r9
 8014040:	ed2d 8b06 	vpush	{d8-d10}
 8014044:	b0aa      	sub	sp, #168	@ 0xa8
 8014046:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 801424c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 801404a:	9300      	str	r3, [sp, #0]
 801404c:	eef0 8a48 	vmov.f32	s17, s16
 8014050:	6981      	ldr	r1, [r0, #24]
 8014052:	a80d      	add	r0, sp, #52	@ 0x34
 8014054:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8014056:	f015 fa4f 	bl	80294f8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801405a:	7f3b      	ldrb	r3, [r7, #28]
 801405c:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 801424c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8014060:	4628      	mov	r0, r5
 8014062:	1e5a      	subs	r2, r3, #1
 8014064:	eeb0 0a60 	vmov.f32	s0, s1
 8014068:	4253      	negs	r3, r2
 801406a:	4153      	adcs	r3, r2
 801406c:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8014070:	f005 fcdb 	bl	8019a2a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014074:	eeb0 9a40 	vmov.f32	s18, s0
 8014078:	eef0 9a60 	vmov.f32	s19, s1
 801407c:	45ca      	cmp	sl, r9
 801407e:	f000 80cd 	beq.w	801421c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8014082:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014086:	2b06      	cmp	r3, #6
 8014088:	d8f8      	bhi.n	801407c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801408a:	e8df f003 	tbb	[pc, r3]
 801408e:	0804      	.short	0x0804
 8014090:	58533f2a 	.word	0x58533f2a
 8014094:	8a          	.byte	0x8a
 8014095:	00          	.byte	0x00
 8014096:	a80d      	add	r0, sp, #52	@ 0x34
 8014098:	f015 faa0 	bl	80295dc <_ZN8touchgfx6Canvas5closeEv>
 801409c:	e7ee      	b.n	801407c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801409e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80140a2:	4628      	mov	r0, r5
 80140a4:	ed93 8a01 	vldr	s16, [r3, #4]
 80140a8:	edd3 8a00 	vldr	s17, [r3]
 80140ac:	eef0 0a48 	vmov.f32	s1, s16
 80140b0:	eeb0 0a68 	vmov.f32	s0, s17
 80140b4:	f005 fcb9 	bl	8019a2a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80140b8:	a80d      	add	r0, sp, #52	@ 0x34
 80140ba:	eef0 7a60 	vmov.f32	s15, s1
 80140be:	eeb0 9a40 	vmov.f32	s18, s0
 80140c2:	eef0 9a60 	vmov.f32	s19, s1
 80140c6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80140ca:	ee17 2a90 	vmov	r2, s15
 80140ce:	eef0 7a40 	vmov.f32	s15, s0
 80140d2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80140d6:	ee17 1a90 	vmov	r1, s15
 80140da:	f015 fb59 	bl	8029790 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80140de:	3402      	adds	r4, #2
 80140e0:	e7cc      	b.n	801407c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80140e2:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80140e6:	4628      	mov	r0, r5
 80140e8:	edd3 8a00 	vldr	s17, [r3]
 80140ec:	ed93 8a01 	vldr	s16, [r3, #4]
 80140f0:	eeb0 0a68 	vmov.f32	s0, s17
 80140f4:	eef0 0a48 	vmov.f32	s1, s16
 80140f8:	f005 fc97 	bl	8019a2a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80140fc:	a80d      	add	r0, sp, #52	@ 0x34
 80140fe:	eeb0 9a40 	vmov.f32	s18, s0
 8014102:	eef0 9a60 	vmov.f32	s19, s1
 8014106:	f7ff fe01 	bl	8013d0c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801410a:	e7e8      	b.n	80140de <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 801410c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8014110:	edd3 8a00 	vldr	s17, [r3]
 8014114:	eef0 0a48 	vmov.f32	s1, s16
 8014118:	4628      	mov	r0, r5
 801411a:	eeb0 0a68 	vmov.f32	s0, s17
 801411e:	3401      	adds	r4, #1
 8014120:	f005 fc83 	bl	8019a2a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014124:	a80d      	add	r0, sp, #52	@ 0x34
 8014126:	eef0 9a60 	vmov.f32	s19, s1
 801412a:	eeb0 9a40 	vmov.f32	s18, s0
 801412e:	f7ff fded 	bl	8013d0c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8014132:	e7a3      	b.n	801407c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8014134:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8014138:	ed93 8a00 	vldr	s16, [r3]
 801413c:	e7ea      	b.n	8014114 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 801413e:	1ca3      	adds	r3, r4, #2
 8014140:	4628      	mov	r0, r5
 8014142:	3404      	adds	r4, #4
 8014144:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8014148:	ed53 0a01 	vldr	s1, [r3, #-4]
 801414c:	ed13 0a02 	vldr	s0, [r3, #-8]
 8014150:	edd3 8a00 	vldr	s17, [r3]
 8014154:	ed93 8a01 	vldr	s16, [r3, #4]
 8014158:	f005 fc67 	bl	8019a2a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801415c:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8014160:	eeb0 0a68 	vmov.f32	s0, s17
 8014164:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8014168:	eef0 0a48 	vmov.f32	s1, s16
 801416c:	4628      	mov	r0, r5
 801416e:	f005 fc5c 	bl	8019a2a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8014172:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8014176:	eef0 2a60 	vmov.f32	s5, s1
 801417a:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 801417e:	eeb0 2a40 	vmov.f32	s4, s0
 8014182:	a80d      	add	r0, sp, #52	@ 0x34
 8014184:	eeb0 aa40 	vmov.f32	s20, s0
 8014188:	eef0 aa60 	vmov.f32	s21, s1
 801418c:	eeb0 0a49 	vmov.f32	s0, s18
 8014190:	eef0 0a69 	vmov.f32	s1, s19
 8014194:	f7ff f9a6 	bl	80134e4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8014198:	eef0 9a6a 	vmov.f32	s19, s21
 801419c:	eeb0 9a4a 	vmov.f32	s18, s20
 80141a0:	e76c      	b.n	801407c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80141a2:	1d26      	adds	r6, r4, #4
 80141a4:	4628      	mov	r0, r5
 80141a6:	3406      	adds	r4, #6
 80141a8:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80141ac:	ed56 0a03 	vldr	s1, [r6, #-12]
 80141b0:	ed16 0a04 	vldr	s0, [r6, #-16]
 80141b4:	edd6 8a00 	vldr	s17, [r6]
 80141b8:	ed96 8a01 	vldr	s16, [r6, #4]
 80141bc:	f005 fc35 	bl	8019a2a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80141c0:	ed8d 0a07 	vstr	s0, [sp, #28]
 80141c4:	4628      	mov	r0, r5
 80141c6:	ed16 0a02 	vldr	s0, [r6, #-8]
 80141ca:	edcd 0a08 	vstr	s1, [sp, #32]
 80141ce:	ed56 0a01 	vldr	s1, [r6, #-4]
 80141d2:	f005 fc2a 	bl	8019a2a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80141d6:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 80141da:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 80141de:	eeb0 0a68 	vmov.f32	s0, s17
 80141e2:	eef0 0a48 	vmov.f32	s1, s16
 80141e6:	4628      	mov	r0, r5
 80141e8:	f005 fc1f 	bl	8019a2a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80141ec:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 80141f0:	eeb0 3a40 	vmov.f32	s6, s0
 80141f4:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 80141f8:	eef0 3a60 	vmov.f32	s7, s1
 80141fc:	eddd 1a08 	vldr	s3, [sp, #32]
 8014200:	eeb0 aa40 	vmov.f32	s20, s0
 8014204:	ed9d 1a07 	vldr	s2, [sp, #28]
 8014208:	eef0 aa60 	vmov.f32	s21, s1
 801420c:	a80d      	add	r0, sp, #52	@ 0x34
 801420e:	eef0 0a69 	vmov.f32	s1, s19
 8014212:	eeb0 0a49 	vmov.f32	s0, s18
 8014216:	f7ff f984 	bl	8013522 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 801421a:	e7bd      	b.n	8014198 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 801421c:	7f7b      	ldrb	r3, [r7, #29]
 801421e:	a80d      	add	r0, sp, #52	@ 0x34
 8014220:	7fb9      	ldrb	r1, [r7, #30]
 8014222:	4359      	muls	r1, r3
 8014224:	1c4b      	adds	r3, r1, #1
 8014226:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801422a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801422e:	f015 f9f7 	bl	8029620 <_ZN8touchgfx6Canvas6renderEh>
 8014232:	4b07      	ldr	r3, [pc, #28]	@ (8014250 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8014234:	4604      	mov	r4, r0
 8014236:	a812      	add	r0, sp, #72	@ 0x48
 8014238:	930d      	str	r3, [sp, #52]	@ 0x34
 801423a:	f001 fcbd 	bl	8015bb8 <_ZN8touchgfx7OutlineD1Ev>
 801423e:	4620      	mov	r0, r4
 8014240:	b02a      	add	sp, #168	@ 0xa8
 8014242:	ecbd 8b06 	vpop	{d8-d10}
 8014246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801424a:	bf00      	nop
 801424c:	00000000 	.word	0x00000000
 8014250:	0802f230 	.word	0x0802f230

08014254 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8014254:	b410      	push	{r4}
 8014256:	7f04      	ldrb	r4, [r0, #28]
 8014258:	b11c      	cbz	r4, 8014262 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 801425a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801425e:	f7ff bee3 	b.w	8014028 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8014262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014266:	f7ff bd6d 	b.w	8013d44 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

0801426a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 801426a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801426e:	4691      	mov	r9, r2
 8014270:	4602      	mov	r2, r0
 8014272:	4606      	mov	r6, r0
 8014274:	4688      	mov	r8, r1
 8014276:	f852 0f26 	ldr.w	r0, [r2, #38]!
 801427a:	469a      	mov	sl, r3
 801427c:	ab02      	add	r3, sp, #8
 801427e:	af02      	add	r7, sp, #8
 8014280:	6851      	ldr	r1, [r2, #4]
 8014282:	c303      	stmia	r3!, {r0, r1}
 8014284:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014288:	2b00      	cmp	r3, #0
 801428a:	dd2f      	ble.n	80142ec <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801428c:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8014290:	2c00      	cmp	r4, #0
 8014292:	dd2b      	ble.n	80142ec <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8014294:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014298:	441c      	add	r4, r3
 801429a:	b2a4      	uxth	r4, r4
 801429c:	b225      	sxth	r5, r4
 801429e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80142a2:	42ab      	cmp	r3, r5
 80142a4:	da22      	bge.n	80142ec <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 80142a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80142a8:	464a      	mov	r2, r9
 80142aa:	9701      	str	r7, [sp, #4]
 80142ac:	4641      	mov	r1, r8
 80142ae:	9300      	str	r3, [sp, #0]
 80142b0:	4630      	mov	r0, r6
 80142b2:	4653      	mov	r3, sl
 80142b4:	f7ff ffce 	bl	8014254 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 80142b8:	b940      	cbnz	r0, 80142cc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 80142ba:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80142be:	2b01      	cmp	r3, #1
 80142c0:	d004      	beq.n	80142cc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 80142c2:	3301      	adds	r3, #1
 80142c4:	105b      	asrs	r3, r3, #1
 80142c6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80142ca:	e7ec      	b.n	80142a6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 80142cc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80142d0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80142d4:	4413      	add	r3, r2
 80142d6:	b29b      	uxth	r3, r3
 80142d8:	441a      	add	r2, r3
 80142da:	f8ad 300a 	strh.w	r3, [sp, #10]
 80142de:	b212      	sxth	r2, r2
 80142e0:	4295      	cmp	r5, r2
 80142e2:	dadc      	bge.n	801429e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80142e4:	1ae3      	subs	r3, r4, r3
 80142e6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80142ea:	e7d8      	b.n	801429e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80142ec:	b004      	add	sp, #16
 80142ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080142f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80142f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80142f6:	6803      	ldr	r3, [r0, #0]
 80142f8:	460d      	mov	r5, r1
 80142fa:	4604      	mov	r4, r0
 80142fc:	4601      	mov	r1, r0
 80142fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014300:	a802      	add	r0, sp, #8
 8014302:	4798      	blx	r3
 8014304:	6828      	ldr	r0, [r5, #0]
 8014306:	6869      	ldr	r1, [r5, #4]
 8014308:	466b      	mov	r3, sp
 801430a:	c303      	stmia	r3!, {r0, r1}
 801430c:	4668      	mov	r0, sp
 801430e:	4619      	mov	r1, r3
 8014310:	f7fd fc76 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 8014314:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014316:	b188      	cbz	r0, 801433c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8014318:	6803      	ldr	r3, [r0, #0]
 801431a:	1d21      	adds	r1, r4, #4
 801431c:	68db      	ldr	r3, [r3, #12]
 801431e:	4798      	blx	r3
 8014320:	b160      	cbz	r0, 801433c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8014322:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8014326:	2b00      	cmp	r3, #0
 8014328:	dd08      	ble.n	801433c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801432a:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801432e:	2d00      	cmp	r5, #0
 8014330:	dd04      	ble.n	801433c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8014332:	4a2b      	ldr	r2, [pc, #172]	@ (80143e0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8014334:	7812      	ldrb	r2, [r2, #0]
 8014336:	b11a      	cbz	r2, 8014340 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8014338:	2a01      	cmp	r2, #1
 801433a:	d029      	beq.n	8014390 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 801433c:	b004      	add	sp, #16
 801433e:	bd70      	pop	{r4, r5, r6, pc}
 8014340:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014344:	441d      	add	r5, r3
 8014346:	b2ad      	uxth	r5, r5
 8014348:	b22e      	sxth	r6, r5
 801434a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801434e:	42b3      	cmp	r3, r6
 8014350:	daf4      	bge.n	801433c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8014352:	6823      	ldr	r3, [r4, #0]
 8014354:	4669      	mov	r1, sp
 8014356:	4620      	mov	r0, r4
 8014358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801435a:	4798      	blx	r3
 801435c:	b940      	cbnz	r0, 8014370 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801435e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8014362:	2b01      	cmp	r3, #1
 8014364:	d004      	beq.n	8014370 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8014366:	3301      	adds	r3, #1
 8014368:	105b      	asrs	r3, r3, #1
 801436a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801436e:	e7f0      	b.n	8014352 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8014370:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014374:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014378:	4413      	add	r3, r2
 801437a:	b29b      	uxth	r3, r3
 801437c:	441a      	add	r2, r3
 801437e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014382:	b212      	sxth	r2, r2
 8014384:	4296      	cmp	r6, r2
 8014386:	dae0      	bge.n	801434a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8014388:	1aeb      	subs	r3, r5, r3
 801438a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801438e:	e7dc      	b.n	801434a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8014390:	f8bd 5000 	ldrh.w	r5, [sp]
 8014394:	441d      	add	r5, r3
 8014396:	b2ad      	uxth	r5, r5
 8014398:	b22e      	sxth	r6, r5
 801439a:	f9bd 3000 	ldrsh.w	r3, [sp]
 801439e:	42b3      	cmp	r3, r6
 80143a0:	dacc      	bge.n	801433c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80143a2:	6823      	ldr	r3, [r4, #0]
 80143a4:	4669      	mov	r1, sp
 80143a6:	4620      	mov	r0, r4
 80143a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80143aa:	4798      	blx	r3
 80143ac:	b940      	cbnz	r0, 80143c0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80143ae:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80143b2:	2b01      	cmp	r3, #1
 80143b4:	d004      	beq.n	80143c0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80143b6:	3301      	adds	r3, #1
 80143b8:	105b      	asrs	r3, r3, #1
 80143ba:	f8ad 3004 	strh.w	r3, [sp, #4]
 80143be:	e7f0      	b.n	80143a2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80143c0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80143c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80143c8:	4413      	add	r3, r2
 80143ca:	b29b      	uxth	r3, r3
 80143cc:	441a      	add	r2, r3
 80143ce:	f8ad 3000 	strh.w	r3, [sp]
 80143d2:	b212      	sxth	r2, r2
 80143d4:	4296      	cmp	r6, r2
 80143d6:	dae0      	bge.n	801439a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80143d8:	1aeb      	subs	r3, r5, r3
 80143da:	f8ad 3004 	strh.w	r3, [sp, #4]
 80143de:	e7dc      	b.n	801439a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80143e0:	200279d0 	.word	0x200279d0

080143e4 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80143e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80143e6:	6803      	ldr	r3, [r0, #0]
 80143e8:	4604      	mov	r4, r0
 80143ea:	4601      	mov	r1, r0
 80143ec:	4668      	mov	r0, sp
 80143ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80143f0:	4798      	blx	r3
 80143f2:	2100      	movs	r1, #0
 80143f4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80143f8:	4668      	mov	r0, sp
 80143fa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80143fe:	9102      	str	r1, [sp, #8]
 8014400:	a902      	add	r1, sp, #8
 8014402:	f8ad 200c 	strh.w	r2, [sp, #12]
 8014406:	f8ad 300e 	strh.w	r3, [sp, #14]
 801440a:	f7fd fbf9 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 801440e:	6823      	ldr	r3, [r4, #0]
 8014410:	4669      	mov	r1, sp
 8014412:	4620      	mov	r0, r4
 8014414:	691b      	ldr	r3, [r3, #16]
 8014416:	4798      	blx	r3
 8014418:	b004      	add	sp, #16
 801441a:	bd10      	pop	{r4, pc}

0801441c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801441c:	2101      	movs	r1, #1
 801441e:	2200      	movs	r2, #0
 8014420:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8014424:	490a      	ldr	r1, [pc, #40]	@ (8014450 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8014426:	8082      	strh	r2, [r0, #4]
 8014428:	6001      	str	r1, [r0, #0]
 801442a:	21ff      	movs	r1, #255	@ 0xff
 801442c:	80c2      	strh	r2, [r0, #6]
 801442e:	8102      	strh	r2, [r0, #8]
 8014430:	8142      	strh	r2, [r0, #10]
 8014432:	8182      	strh	r2, [r0, #12]
 8014434:	81c2      	strh	r2, [r0, #14]
 8014436:	8202      	strh	r2, [r0, #16]
 8014438:	8242      	strh	r2, [r0, #18]
 801443a:	61c2      	str	r2, [r0, #28]
 801443c:	8402      	strh	r2, [r0, #32]
 801443e:	8442      	strh	r2, [r0, #34]	@ 0x22
 8014440:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8014444:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8014448:	6282      	str	r2, [r0, #40]	@ 0x28
 801444a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801444e:	4770      	bx	lr
 8014450:	0802e884 	.word	0x0802e884

08014454 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 8014454:	6301      	str	r1, [r0, #48]	@ 0x30
 8014456:	4770      	bx	lr

08014458 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
 8014458:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801445a:	4770      	bx	lr

0801445c <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 801445c:	6341      	str	r1, [r0, #52]	@ 0x34
 801445e:	4770      	bx	lr

08014460 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
 8014460:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8014462:	4770      	bx	lr

08014464 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 8014464:	4770      	bx	lr

08014466 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
 8014466:	4608      	mov	r0, r1
 8014468:	4770      	bx	lr

0801446a <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 801446a:	4608      	mov	r0, r1
 801446c:	4770      	bx	lr

0801446e <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 801446e:	b530      	push	{r4, r5, lr}
 8014470:	460d      	mov	r5, r1
 8014472:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8014474:	8949      	ldrh	r1, [r1, #10]
 8014476:	b085      	sub	sp, #20
 8014478:	4604      	mov	r4, r0
 801447a:	1ac9      	subs	r1, r1, r3
 801447c:	6803      	ldr	r3, [r0, #0]
 801447e:	f10d 0206 	add.w	r2, sp, #6
 8014482:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8014486:	b209      	sxth	r1, r1
 8014488:	4798      	blx	r3
 801448a:	b1a0      	cbz	r0, 80144b6 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801448c:	792b      	ldrb	r3, [r5, #4]
 801448e:	b993      	cbnz	r3, 80144b6 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8014490:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8014494:	b178      	cbz	r0, 80144b6 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8014496:	6803      	ldr	r3, [r0, #0]
 8014498:	68db      	ldr	r3, [r3, #12]
 801449a:	4798      	blx	r3
 801449c:	b158      	cbz	r0, 80144b6 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801449e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80144a2:	aa02      	add	r2, sp, #8
 80144a4:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 80144a8:	4621      	mov	r1, r4
 80144aa:	f8ad 3008 	strh.w	r3, [sp, #8]
 80144ae:	9503      	str	r5, [sp, #12]
 80144b0:	6803      	ldr	r3, [r0, #0]
 80144b2:	689b      	ldr	r3, [r3, #8]
 80144b4:	4798      	blx	r3
 80144b6:	b005      	add	sp, #20
 80144b8:	bd30      	pop	{r4, r5, pc}

080144ba <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 80144ba:	428a      	cmp	r2, r1
 80144bc:	bfbc      	itt	lt
 80144be:	460b      	movlt	r3, r1
 80144c0:	4611      	movlt	r1, r2
 80144c2:	b510      	push	{r4, lr}
 80144c4:	bfb8      	it	lt
 80144c6:	461a      	movlt	r2, r3
 80144c8:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 80144cc:	4604      	mov	r4, r0
 80144ce:	428b      	cmp	r3, r1
 80144d0:	d103      	bne.n	80144da <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 80144d2:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 80144d6:	4293      	cmp	r3, r2
 80144d8:	d011      	beq.n	80144fe <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 80144da:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
 80144de:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 80144e2:	f8c4 2130 	str.w	r2, [r4, #304]	@ 0x130
 80144e6:	f004 feea 	bl	80192be <_ZNK8touchgfx8Drawable10invalidateEv>
 80144ea:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80144ee:	f004 fee6 	bl	80192be <_ZNK8touchgfx8Drawable10invalidateEv>
 80144f2:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 80144f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144fa:	f004 bee0 	b.w	80192be <_ZNK8touchgfx8Drawable10invalidateEv>
 80144fe:	bd10      	pop	{r4, pc}

08014500 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 8014500:	428a      	cmp	r2, r1
 8014502:	bfbc      	itt	lt
 8014504:	460b      	movlt	r3, r1
 8014506:	4611      	movlt	r1, r2
 8014508:	b510      	push	{r4, lr}
 801450a:	bfb8      	it	lt
 801450c:	461a      	movlt	r2, r3
 801450e:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
 8014512:	4604      	mov	r4, r0
 8014514:	428b      	cmp	r3, r1
 8014516:	d103      	bne.n	8014520 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 8014518:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
 801451c:	4293      	cmp	r3, r2
 801451e:	d011      	beq.n	8014544 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 8014520:	f8c4 1134 	str.w	r1, [r4, #308]	@ 0x134
 8014524:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8014528:	f8c4 2138 	str.w	r2, [r4, #312]	@ 0x138
 801452c:	f004 fec7 	bl	80192be <_ZNK8touchgfx8Drawable10invalidateEv>
 8014530:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8014534:	f004 fec3 	bl	80192be <_ZNK8touchgfx8Drawable10invalidateEv>
 8014538:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 801453c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014540:	f004 bebd 	b.w	80192be <_ZNK8touchgfx8Drawable10invalidateEv>
 8014544:	bd10      	pop	{r4, pc}

08014546 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 8014546:	2300      	movs	r3, #0
 8014548:	3038      	adds	r0, #56	@ 0x38
 801454a:	f8a0 30e6 	strh.w	r3, [r0, #230]	@ 0xe6
 801454e:	f004 beb6 	b.w	80192be <_ZNK8touchgfx8Drawable10invalidateEv>

08014552 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 8014552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014556:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 801455a:	4605      	mov	r5, r0
 801455c:	460f      	mov	r7, r1
 801455e:	4616      	mov	r6, r2
 8014560:	2b00      	cmp	r3, #0
 8014562:	d03d      	beq.n	80145e0 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8014564:	6803      	ldr	r3, [r0, #0]
 8014566:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 801456a:	4798      	blx	r3
 801456c:	682b      	ldr	r3, [r5, #0]
 801456e:	b204      	sxth	r4, r0
 8014570:	4628      	mov	r0, r5
 8014572:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8014576:	4798      	blx	r3
 8014578:	b203      	sxth	r3, r0
 801457a:	f9b5 011e 	ldrsh.w	r0, [r5, #286]	@ 0x11e
 801457e:	429c      	cmp	r4, r3
 8014580:	bfc4      	itt	gt
 8014582:	4622      	movgt	r2, r4
 8014584:	461c      	movgt	r4, r3
 8014586:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801458a:	bfc8      	it	gt
 801458c:	4613      	movgt	r3, r2
 801458e:	4284      	cmp	r4, r0
 8014590:	da26      	bge.n	80145e0 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8014592:	4298      	cmp	r0, r3
 8014594:	bfa8      	it	ge
 8014596:	4618      	movge	r0, r3
 8014598:	2800      	cmp	r0, #0
 801459a:	db21      	blt.n	80145e0 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 801459c:	b9ef      	cbnz	r7, 80145da <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x88>
 801459e:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
 80145a2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80145a6:	4619      	mov	r1, r3
 80145a8:	42a0      	cmp	r0, r4
 80145aa:	dd0b      	ble.n	80145c4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x72>
 80145ac:	f8d5 2144 	ldr.w	r2, [r5, #324]	@ 0x144
 80145b0:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80145b4:	3401      	adds	r4, #1
 80145b6:	4291      	cmp	r1, r2
 80145b8:	bfa8      	it	ge
 80145ba:	4611      	movge	r1, r2
 80145bc:	4293      	cmp	r3, r2
 80145be:	bfb8      	it	lt
 80145c0:	4613      	movlt	r3, r2
 80145c2:	e7f1      	b.n	80145a8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 80145c4:	1b89      	subs	r1, r1, r6
 80145c6:	18f2      	adds	r2, r6, r3
 80145c8:	4291      	cmp	r1, r2
 80145ca:	d009      	beq.n	80145e0 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80145cc:	682b      	ldr	r3, [r5, #0]
 80145ce:	4628      	mov	r0, r5
 80145d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80145d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80145d8:	4718      	bx	r3
 80145da:	4273      	negs	r3, r6
 80145dc:	4631      	mov	r1, r6
 80145de:	e7e3      	b.n	80145a8 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 80145e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080145e4 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 80145e4:	b530      	push	{r4, r5, lr}
 80145e6:	790b      	ldrb	r3, [r1, #4]
 80145e8:	b085      	sub	sp, #20
 80145ea:	4604      	mov	r4, r0
 80145ec:	460d      	mov	r5, r1
 80145ee:	2b02      	cmp	r3, #2
 80145f0:	d020      	beq.n	8014634 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 80145f2:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 80145f4:	f10d 0206 	add.w	r2, sp, #6
 80145f8:	88c9      	ldrh	r1, [r1, #6]
 80145fa:	1ac9      	subs	r1, r1, r3
 80145fc:	6803      	ldr	r3, [r0, #0]
 80145fe:	b209      	sxth	r1, r1
 8014600:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8014604:	4798      	blx	r3
 8014606:	b1a8      	cbz	r0, 8014634 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8014608:	792b      	ldrb	r3, [r5, #4]
 801460a:	2b01      	cmp	r3, #1
 801460c:	d812      	bhi.n	8014634 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801460e:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8014612:	b178      	cbz	r0, 8014634 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8014614:	6803      	ldr	r3, [r0, #0]
 8014616:	68db      	ldr	r3, [r3, #12]
 8014618:	4798      	blx	r3
 801461a:	b158      	cbz	r0, 8014634 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801461c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8014620:	aa02      	add	r2, sp, #8
 8014622:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8014626:	4621      	mov	r1, r4
 8014628:	f8ad 3008 	strh.w	r3, [sp, #8]
 801462c:	9503      	str	r5, [sp, #12]
 801462e:	6803      	ldr	r3, [r0, #0]
 8014630:	689b      	ldr	r3, [r3, #8]
 8014632:	4798      	blx	r3
 8014634:	b005      	add	sp, #20
 8014636:	bd30      	pop	{r4, r5, pc}

08014638 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 8014638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801463c:	4604      	mov	r4, r0
 801463e:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8014642:	4690      	mov	r8, r2
 8014644:	461f      	mov	r7, r3
 8014646:	9e06      	ldr	r6, [sp, #24]
 8014648:	b928      	cbnz	r0, 8014656 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 801464a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801464e:	8033      	strh	r3, [r6, #0]
 8014650:	803b      	strh	r3, [r7, #0]
 8014652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014656:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 801465a:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	@ 0x116
 801465e:	1883      	adds	r3, r0, r2
 8014660:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8014664:	1ad2      	subs	r2, r2, r3
 8014666:	b212      	sxth	r2, r2
 8014668:	2a01      	cmp	r2, #1
 801466a:	dc07      	bgt.n	801467c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 801466c:	2300      	movs	r3, #0
 801466e:	803b      	strh	r3, [r7, #0]
 8014670:	f8b4 311e 	ldrh.w	r3, [r4, #286]	@ 0x11e
 8014674:	3b01      	subs	r3, #1
 8014676:	8033      	strh	r3, [r6, #0]
 8014678:	2001      	movs	r0, #1
 801467a:	e7ea      	b.n	8014652 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 801467c:	1a08      	subs	r0, r1, r0
 801467e:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 8014682:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 8014686:	0140      	lsls	r0, r0, #5
 8014688:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801468a:	1a5b      	subs	r3, r3, r1
 801468c:	d459      	bmi.n	8014742 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 801468e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8014692:	fb93 f1f5 	sdiv	r1, r3, r5
 8014696:	2302      	movs	r3, #2
 8014698:	fb91 f1f3 	sdiv	r1, r1, r3
 801469c:	3a01      	subs	r2, #1
 801469e:	f005 fafc 	bl	8019c9a <_ZN8touchgfx6muldivElll>
 80146a2:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 80146a6:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 80146aa:	2900      	cmp	r1, #0
 80146ac:	db55      	blt.n	801475a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 80146ae:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 80146b2:	2502      	movs	r5, #2
 80146b4:	fb93 f3fc 	sdiv	r3, r3, ip
 80146b8:	fb93 f3f5 	sdiv	r3, r3, r5
 80146bc:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 80146c0:	f8d4 2130 	ldr.w	r2, [r4, #304]	@ 0x130
 80146c4:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
 80146c8:	1a52      	subs	r2, r2, r1
 80146ca:	eba8 0003 	sub.w	r0, r8, r3
 80146ce:	ea4f 1040 	mov.w	r0, r0, lsl #5
 80146d2:	d44e      	bmi.n	8014772 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 80146d4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80146d8:	fb92 f1fc 	sdiv	r1, r2, ip
 80146dc:	2202      	movs	r2, #2
 80146de:	fb91 f1f2 	sdiv	r1, r1, r2
 80146e2:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 80146e6:	4413      	add	r3, r2
 80146e8:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 80146ec:	1ad2      	subs	r2, r2, r3
 80146ee:	b212      	sxth	r2, r2
 80146f0:	3a01      	subs	r2, #1
 80146f2:	f005 fad2 	bl	8019c9a <_ZN8touchgfx6muldivElll>
 80146f6:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 80146fa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	db44      	blt.n	801478a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 8014700:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8014704:	fb93 f3f2 	sdiv	r3, r3, r2
 8014708:	2202      	movs	r2, #2
 801470a:	fb93 f3f2 	sdiv	r3, r3, r2
 801470e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8014712:	2020      	movs	r0, #32
 8014714:	429d      	cmp	r5, r3
 8014716:	bfde      	ittt	le
 8014718:	461a      	movle	r2, r3
 801471a:	462b      	movle	r3, r5
 801471c:	4615      	movle	r5, r2
 801471e:	b21b      	sxth	r3, r3
 8014720:	2d00      	cmp	r5, #0
 8014722:	bfaa      	itet	ge
 8014724:	351f      	addge	r5, #31
 8014726:	fb95 f5f0 	sdivlt	r5, r5, r0
 801472a:	116d      	asrge	r5, r5, #5
 801472c:	fb93 f3f0 	sdiv	r3, r3, r0
 8014730:	b22d      	sxth	r5, r5
 8014732:	803b      	strh	r3, [r7, #0]
 8014734:	2d00      	cmp	r5, #0
 8014736:	8035      	strh	r5, [r6, #0]
 8014738:	da33      	bge.n	80147a2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 801473a:	2000      	movs	r0, #0
 801473c:	8030      	strh	r0, [r6, #0]
 801473e:	8038      	strh	r0, [r7, #0]
 8014740:	e787      	b.n	8014652 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8014742:	f06f 0101 	mvn.w	r1, #1
 8014746:	fb01 5303 	mla	r3, r1, r3, r5
 801474a:	1e59      	subs	r1, r3, #1
 801474c:	2302      	movs	r3, #2
 801474e:	fb91 f1f5 	sdiv	r1, r1, r5
 8014752:	fb91 f1f3 	sdiv	r1, r1, r3
 8014756:	4249      	negs	r1, r1
 8014758:	e7a0      	b.n	801469c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 801475a:	f06f 0301 	mvn.w	r3, #1
 801475e:	2502      	movs	r5, #2
 8014760:	fb03 c301 	mla	r3, r3, r1, ip
 8014764:	3b01      	subs	r3, #1
 8014766:	fb93 f3fc 	sdiv	r3, r3, ip
 801476a:	fb93 f3f5 	sdiv	r3, r3, r5
 801476e:	425b      	negs	r3, r3
 8014770:	e7a4      	b.n	80146bc <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 8014772:	f06f 0101 	mvn.w	r1, #1
 8014776:	fb01 c202 	mla	r2, r1, r2, ip
 801477a:	1e51      	subs	r1, r2, #1
 801477c:	2202      	movs	r2, #2
 801477e:	fb91 f1fc 	sdiv	r1, r1, ip
 8014782:	fb91 f1f2 	sdiv	r1, r1, r2
 8014786:	4249      	negs	r1, r1
 8014788:	e7ab      	b.n	80146e2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 801478a:	f06f 0101 	mvn.w	r1, #1
 801478e:	fb01 2303 	mla	r3, r1, r3, r2
 8014792:	3b01      	subs	r3, #1
 8014794:	fb93 f3f2 	sdiv	r3, r3, r2
 8014798:	2202      	movs	r2, #2
 801479a:	fb93 f3f2 	sdiv	r3, r3, r2
 801479e:	425b      	negs	r3, r3
 80147a0:	e7b5      	b.n	801470e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 80147a2:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80147a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80147aa:	4293      	cmp	r3, r2
 80147ac:	dc05      	bgt.n	80147ba <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 80147ae:	3b01      	subs	r3, #1
 80147b0:	2000      	movs	r0, #0
 80147b2:	b21b      	sxth	r3, r3
 80147b4:	8033      	strh	r3, [r6, #0]
 80147b6:	803b      	strh	r3, [r7, #0]
 80147b8:	e74b      	b.n	8014652 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80147ba:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80147be:	803a      	strh	r2, [r7, #0]
 80147c0:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80147c4:	f9b6 2000 	ldrsh.w	r2, [r6]
 80147c8:	4293      	cmp	r3, r2
 80147ca:	bfdc      	itt	le
 80147cc:	f103 33ff 	addle.w	r3, r3, #4294967295
 80147d0:	b21a      	sxthle	r2, r3
 80147d2:	8032      	strh	r2, [r6, #0]
 80147d4:	e750      	b.n	8014678 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
	...

080147d8 <_ZN8touchgfx9ContainerC1Ev>:
 80147d8:	2101      	movs	r1, #1
 80147da:	2200      	movs	r2, #0
 80147dc:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80147e0:	4909      	ldr	r1, [pc, #36]	@ (8014808 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 80147e2:	8082      	strh	r2, [r0, #4]
 80147e4:	80c2      	strh	r2, [r0, #6]
 80147e6:	8102      	strh	r2, [r0, #8]
 80147e8:	8142      	strh	r2, [r0, #10]
 80147ea:	8182      	strh	r2, [r0, #12]
 80147ec:	81c2      	strh	r2, [r0, #14]
 80147ee:	8202      	strh	r2, [r0, #16]
 80147f0:	8242      	strh	r2, [r0, #18]
 80147f2:	61c2      	str	r2, [r0, #28]
 80147f4:	8402      	strh	r2, [r0, #32]
 80147f6:	8442      	strh	r2, [r0, #34]	@ 0x22
 80147f8:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80147fc:	6001      	str	r1, [r0, #0]
 80147fe:	6282      	str	r2, [r0, #40]	@ 0x28
 8014800:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8014804:	4770      	bx	lr
 8014806:	bf00      	nop
 8014808:	0802e70c 	.word	0x0802e70c

0801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 801480c:	6800      	ldr	r0, [r0, #0]
 801480e:	2800      	cmp	r0, #0
 8014810:	bfbd      	ittte	lt
 8014812:	380f      	sublt	r0, #15
 8014814:	2320      	movlt	r3, #32
 8014816:	fb90 f0f3 	sdivlt	r0, r0, r3
 801481a:	3010      	addge	r0, #16
 801481c:	bfa8      	it	ge
 801481e:	1140      	asrge	r0, r0, #5
 8014820:	4770      	bx	lr

08014822 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 8014822:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014826:	4605      	mov	r5, r0
 8014828:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 801482c:	4688      	mov	r8, r1
 801482e:	4691      	mov	r9, r2
 8014830:	469a      	mov	sl, r3
 8014832:	b360      	cbz	r0, 801488e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8014834:	2700      	movs	r7, #0
 8014836:	f04f 3bff 	mov.w	fp, #4294967295
 801483a:	b23e      	sxth	r6, r7
 801483c:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 8014840:	42b3      	cmp	r3, r6
 8014842:	dd23      	ble.n	801488c <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 8014844:	682b      	ldr	r3, [r5, #0]
 8014846:	4631      	mov	r1, r6
 8014848:	4628      	mov	r0, r5
 801484a:	3701      	adds	r7, #1
 801484c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8014850:	4798      	blx	r3
 8014852:	9001      	str	r0, [sp, #4]
 8014854:	a801      	add	r0, sp, #4
 8014856:	f7ff ffd9 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801485a:	682b      	ldr	r3, [r5, #0]
 801485c:	eba0 0008 	sub.w	r0, r0, r8
 8014860:	4631      	mov	r1, r6
 8014862:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014866:	b204      	sxth	r4, r0
 8014868:	4628      	mov	r0, r5
 801486a:	4798      	blx	r3
 801486c:	9001      	str	r0, [sp, #4]
 801486e:	a801      	add	r0, sp, #4
 8014870:	f7ff ffcc 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014874:	eba0 0009 	sub.w	r0, r0, r9
 8014878:	fb10 f000 	smulbb	r0, r0, r0
 801487c:	fb04 0404 	mla	r4, r4, r4, r0
 8014880:	455c      	cmp	r4, fp
 8014882:	bf3c      	itt	cc
 8014884:	f8aa 6000 	strhcc.w	r6, [sl]
 8014888:	46a3      	movcc	fp, r4
 801488a:	e7d6      	b.n	801483a <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 801488c:	2001      	movs	r0, #1
 801488e:	b003      	add	sp, #12
 8014890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014894 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 8014894:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014898:	460e      	mov	r6, r1
 801489a:	2100      	movs	r1, #0
 801489c:	4605      	mov	r5, r0
 801489e:	4617      	mov	r7, r2
 80148a0:	8011      	strh	r1, [r2, #0]
 80148a2:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 80148a6:	b36b      	cbz	r3, 8014904 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x70>
 80148a8:	6803      	ldr	r3, [r0, #0]
 80148aa:	f10d 0808 	add.w	r8, sp, #8
 80148ae:	2401      	movs	r4, #1
 80148b0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80148b4:	4798      	blx	r3
 80148b6:	f848 0d04 	str.w	r0, [r8, #-4]!
 80148ba:	4640      	mov	r0, r8
 80148bc:	f7ff ffa6 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80148c0:	b200      	sxth	r0, r0
 80148c2:	1b80      	subs	r0, r0, r6
 80148c4:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 80148c8:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 80148cc:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 80148d0:	42a3      	cmp	r3, r4
 80148d2:	dd1b      	ble.n	801490c <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x78>
 80148d4:	682b      	ldr	r3, [r5, #0]
 80148d6:	4621      	mov	r1, r4
 80148d8:	4628      	mov	r0, r5
 80148da:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80148de:	4798      	blx	r3
 80148e0:	9001      	str	r0, [sp, #4]
 80148e2:	4640      	mov	r0, r8
 80148e4:	f7ff ff92 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80148e8:	b200      	sxth	r0, r0
 80148ea:	1b80      	subs	r0, r0, r6
 80148ec:	2800      	cmp	r0, #0
 80148ee:	bfb8      	it	lt
 80148f0:	4240      	neglt	r0, r0
 80148f2:	4548      	cmp	r0, r9
 80148f4:	bf38      	it	cc
 80148f6:	803c      	strhcc	r4, [r7, #0]
 80148f8:	f104 0401 	add.w	r4, r4, #1
 80148fc:	bf38      	it	cc
 80148fe:	4681      	movcc	r9, r0
 8014900:	b224      	sxth	r4, r4
 8014902:	e7e3      	b.n	80148cc <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x38>
 8014904:	4618      	mov	r0, r3
 8014906:	b003      	add	sp, #12
 8014908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801490c:	2001      	movs	r0, #1
 801490e:	e7fa      	b.n	8014906 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x72>

08014910 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 8014910:	f8a0 3118 	strh.w	r3, [r0, #280]	@ 0x118
 8014914:	f9bd 3000 	ldrsh.w	r3, [sp]
 8014918:	f8a0 1114 	strh.w	r1, [r0, #276]	@ 0x114
 801491c:	f8a0 2116 	strh.w	r2, [r0, #278]	@ 0x116
 8014920:	f8a0 311a 	strh.w	r3, [r0, #282]	@ 0x11a
 8014924:	4770      	bx	lr

08014926 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 8014926:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014928:	4604      	mov	r4, r0
 801492a:	3038      	adds	r0, #56	@ 0x38
 801492c:	460d      	mov	r5, r1
 801492e:	f7fc ffe3 	bl	80118f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014932:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 8014936:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 801493a:	4628      	mov	r0, r5
 801493c:	9200      	str	r2, [sp, #0]
 801493e:	2200      	movs	r2, #0
 8014940:	4611      	mov	r1, r2
 8014942:	f7f0 ff03 	bl	800574c <_ZN8touchgfx8Drawable11setPositionEssss>
 8014946:	b003      	add	sp, #12
 8014948:	bd30      	pop	{r4, r5, pc}

0801494a <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 801494a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801494c:	4604      	mov	r4, r0
 801494e:	3064      	adds	r0, #100	@ 0x64
 8014950:	460d      	mov	r5, r1
 8014952:	f7fc ffd1 	bl	80118f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014956:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 801495a:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 801495e:	4628      	mov	r0, r5
 8014960:	9200      	str	r2, [sp, #0]
 8014962:	2200      	movs	r2, #0
 8014964:	4611      	mov	r1, r2
 8014966:	f7f0 fef1 	bl	800574c <_ZN8touchgfx8Drawable11setPositionEssss>
 801496a:	b003      	add	sp, #12
 801496c:	bd30      	pop	{r4, r5, pc}

0801496e <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 801496e:	b538      	push	{r3, r4, r5, lr}
 8014970:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8014974:	460d      	mov	r5, r1
 8014976:	428b      	cmp	r3, r1
 8014978:	dd08      	ble.n	801498c <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 801497a:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 801497c:	b134      	cbz	r4, 801498c <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 801497e:	6823      	ldr	r3, [r4, #0]
 8014980:	4620      	mov	r0, r4
 8014982:	4629      	mov	r1, r5
 8014984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014986:	4798      	blx	r3
 8014988:	69a4      	ldr	r4, [r4, #24]
 801498a:	e7f7      	b.n	801497c <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 801498c:	bd38      	pop	{r3, r4, r5, pc}

0801498e <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 801498e:	b570      	push	{r4, r5, r6, lr}
 8014990:	4606      	mov	r6, r0
 8014992:	460d      	mov	r5, r1
 8014994:	f8d0 40e4 	ldr.w	r4, [r0, #228]	@ 0xe4
 8014998:	b134      	cbz	r4, 80149a8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 801499a:	6823      	ldr	r3, [r4, #0]
 801499c:	4620      	mov	r0, r4
 801499e:	4629      	mov	r1, r5
 80149a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80149a2:	4798      	blx	r3
 80149a4:	69a4      	ldr	r4, [r4, #24]
 80149a6:	e7f7      	b.n	8014998 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 80149a8:	f8d6 4110 	ldr.w	r4, [r6, #272]	@ 0x110
 80149ac:	b134      	cbz	r4, 80149bc <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 80149ae:	6823      	ldr	r3, [r4, #0]
 80149b0:	4620      	mov	r0, r4
 80149b2:	4629      	mov	r1, r5
 80149b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80149b6:	4798      	blx	r3
 80149b8:	69a4      	ldr	r4, [r4, #24]
 80149ba:	e7f7      	b.n	80149ac <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 80149bc:	bd70      	pop	{r4, r5, r6, pc}

080149be <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 80149be:	b538      	push	{r3, r4, r5, lr}
 80149c0:	4604      	mov	r4, r0
 80149c2:	2500      	movs	r5, #0
 80149c4:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80149c8:	42ab      	cmp	r3, r5
 80149ca:	db05      	blt.n	80149d8 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 80149cc:	b229      	sxth	r1, r5
 80149ce:	4620      	mov	r0, r4
 80149d0:	f7ff ffdd 	bl	801498e <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 80149d4:	3501      	adds	r5, #1
 80149d6:	e7f5      	b.n	80149c4 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 80149d8:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 80149dc:	f004 fc6f 	bl	80192be <_ZNK8touchgfx8Drawable10invalidateEv>
 80149e0:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 80149e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80149e8:	f004 bc69 	b.w	80192be <_ZNK8touchgfx8Drawable10invalidateEv>

080149ec <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 80149ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80149ee:	4604      	mov	r4, r0
 80149f0:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 80149f2:	b15d      	cbz	r5, 8014a0c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 80149f4:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 80149f8:	4628      	mov	r0, r5
 80149fa:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80149fe:	9200      	str	r2, [sp, #0]
 8014a00:	2200      	movs	r2, #0
 8014a02:	4611      	mov	r1, r2
 8014a04:	f7f0 fea2 	bl	800574c <_ZN8touchgfx8Drawable11setPositionEssss>
 8014a08:	69ad      	ldr	r5, [r5, #24]
 8014a0a:	e7f2      	b.n	80149f2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 8014a0c:	f8d4 50e4 	ldr.w	r5, [r4, #228]	@ 0xe4
 8014a10:	b15d      	cbz	r5, 8014a2a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 8014a12:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	@ 0xc6
 8014a16:	4628      	mov	r0, r5
 8014a18:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	@ 0xc4
 8014a1c:	9200      	str	r2, [sp, #0]
 8014a1e:	2200      	movs	r2, #0
 8014a20:	4611      	mov	r1, r2
 8014a22:	f7f0 fe93 	bl	800574c <_ZN8touchgfx8Drawable11setPositionEssss>
 8014a26:	69ad      	ldr	r5, [r5, #24]
 8014a28:	e7f2      	b.n	8014a10 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 8014a2a:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
 8014a2e:	b15d      	cbz	r5, 8014a48 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8014a30:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 8014a34:	4628      	mov	r0, r5
 8014a36:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 8014a3a:	9200      	str	r2, [sp, #0]
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	4611      	mov	r1, r2
 8014a40:	f7f0 fe84 	bl	800574c <_ZN8touchgfx8Drawable11setPositionEssss>
 8014a44:	69ad      	ldr	r5, [r5, #24]
 8014a46:	e7f2      	b.n	8014a2e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 8014a48:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 8014a4c:	b15d      	cbz	r5, 8014a66 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8014a4e:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 8014a52:	4628      	mov	r0, r5
 8014a54:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	@ 0x98
 8014a58:	9200      	str	r2, [sp, #0]
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	4611      	mov	r1, r2
 8014a5e:	f7f0 fe75 	bl	800574c <_ZN8touchgfx8Drawable11setPositionEssss>
 8014a62:	69ad      	ldr	r5, [r5, #24]
 8014a64:	e7f2      	b.n	8014a4c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 8014a66:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 8014a6a:	b15d      	cbz	r5, 8014a84 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8014a6c:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	@ 0xf2
 8014a70:	4628      	mov	r0, r5
 8014a72:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	@ 0xf0
 8014a76:	9200      	str	r2, [sp, #0]
 8014a78:	2200      	movs	r2, #0
 8014a7a:	4611      	mov	r1, r2
 8014a7c:	f7f0 fe66 	bl	800574c <_ZN8touchgfx8Drawable11setPositionEssss>
 8014a80:	69ad      	ldr	r5, [r5, #24]
 8014a82:	e7f2      	b.n	8014a6a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8014a84:	6823      	ldr	r3, [r4, #0]
 8014a86:	4620      	mov	r0, r4
 8014a88:	695b      	ldr	r3, [r3, #20]
 8014a8a:	b003      	add	sp, #12
 8014a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014a90:	4718      	bx	r3

08014a92 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8014a92:	b430      	push	{r4, r5}
 8014a94:	b28a      	uxth	r2, r1
 8014a96:	f8b0 4098 	ldrh.w	r4, [r0, #152]	@ 0x98
 8014a9a:	f8a0 10c4 	strh.w	r1, [r0, #196]	@ 0xc4
 8014a9e:	1b15      	subs	r5, r2, r4
 8014aa0:	f8a0 10f0 	strh.w	r1, [r0, #240]	@ 0xf0
 8014aa4:	8101      	strh	r1, [r0, #8]
 8014aa6:	f8a0 5094 	strh.w	r5, [r0, #148]	@ 0x94
 8014aaa:	f8b0 506c 	ldrh.w	r5, [r0, #108]	@ 0x6c
 8014aae:	442c      	add	r4, r5
 8014ab0:	1b12      	subs	r2, r2, r4
 8014ab2:	bc30      	pop	{r4, r5}
 8014ab4:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8014ab8:	f7ff bf98 	b.w	80149ec <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08014abc <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8014abc:	b430      	push	{r4, r5}
 8014abe:	b28a      	uxth	r2, r1
 8014ac0:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	@ 0xf2
 8014ac4:	f8a0 106e 	strh.w	r1, [r0, #110]	@ 0x6e
 8014ac8:	1b15      	subs	r5, r2, r4
 8014aca:	f8a0 109a 	strh.w	r1, [r0, #154]	@ 0x9a
 8014ace:	8141      	strh	r1, [r0, #10]
 8014ad0:	f8a0 50ee 	strh.w	r5, [r0, #238]	@ 0xee
 8014ad4:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	@ 0xc6
 8014ad8:	442c      	add	r4, r5
 8014ada:	1b12      	subs	r2, r2, r4
 8014adc:	bc30      	pop	{r4, r5}
 8014ade:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 8014ae2:	f7ff bf83 	b.w	80149ec <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08014ae6 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8014ae6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8014aea:	fa1f fa83 	uxth.w	sl, r3
 8014aee:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 8014af2:	4615      	mov	r5, r2
 8014af4:	4699      	mov	r9, r3
 8014af6:	fa1f f887 	uxth.w	r8, r7
 8014afa:	8903      	ldrh	r3, [r0, #8]
 8014afc:	4452      	add	r2, sl
 8014afe:	4604      	mov	r4, r0
 8014b00:	8940      	ldrh	r0, [r0, #10]
 8014b02:	460e      	mov	r6, r1
 8014b04:	1a9b      	subs	r3, r3, r2
 8014b06:	eb08 0201 	add.w	r2, r8, r1
 8014b0a:	1a80      	subs	r0, r0, r2
 8014b0c:	b21b      	sxth	r3, r3
 8014b0e:	460a      	mov	r2, r1
 8014b10:	4629      	mov	r1, r5
 8014b12:	b200      	sxth	r0, r0
 8014b14:	9000      	str	r0, [sp, #0]
 8014b16:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8014b1a:	f7f0 fe17 	bl	800574c <_ZN8touchgfx8Drawable11setPositionEssss>
 8014b1e:	2200      	movs	r2, #0
 8014b20:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8014b24:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8014b28:	4611      	mov	r1, r2
 8014b2a:	9600      	str	r6, [sp, #0]
 8014b2c:	f7f0 fe0e 	bl	800574c <_ZN8touchgfx8Drawable11setPositionEssss>
 8014b30:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014b34:	2200      	movs	r2, #0
 8014b36:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8014b3a:	9300      	str	r3, [sp, #0]
 8014b3c:	462b      	mov	r3, r5
 8014b3e:	4611      	mov	r1, r2
 8014b40:	f7f0 fe04 	bl	800574c <_ZN8touchgfx8Drawable11setPositionEssss>
 8014b44:	8921      	ldrh	r1, [r4, #8]
 8014b46:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014b4a:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8014b4e:	eba1 010a 	sub.w	r1, r1, sl
 8014b52:	2200      	movs	r2, #0
 8014b54:	9300      	str	r3, [sp, #0]
 8014b56:	464b      	mov	r3, r9
 8014b58:	b209      	sxth	r1, r1
 8014b5a:	f7f0 fdf7 	bl	800574c <_ZN8touchgfx8Drawable11setPositionEssss>
 8014b5e:	8962      	ldrh	r2, [r4, #10]
 8014b60:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8014b64:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8014b68:	eba2 0208 	sub.w	r2, r2, r8
 8014b6c:	9700      	str	r7, [sp, #0]
 8014b6e:	2100      	movs	r1, #0
 8014b70:	b212      	sxth	r2, r2
 8014b72:	f7f0 fdeb 	bl	800574c <_ZN8touchgfx8Drawable11setPositionEssss>
 8014b76:	4620      	mov	r0, r4
 8014b78:	b002      	add	sp, #8
 8014b7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b7e:	f7ff bf35 	b.w	80149ec <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

08014b84 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8014b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b88:	b085      	sub	sp, #20
 8014b8a:	4604      	mov	r4, r0
 8014b8c:	2601      	movs	r6, #1
 8014b8e:	2500      	movs	r5, #0
 8014b90:	9103      	str	r1, [sp, #12]
 8014b92:	f7ff fe21 	bl	80147d8 <_ZN8touchgfx9ContainerC1Ev>
 8014b96:	4b2c      	ldr	r3, [pc, #176]	@ (8014c48 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 8014b98:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 8014b9c:	f104 0964 	add.w	r9, r4, #100	@ 0x64
 8014ba0:	f104 0890 	add.w	r8, r4, #144	@ 0x90
 8014ba4:	6023      	str	r3, [r4, #0]
 8014ba6:	23ff      	movs	r3, #255	@ 0xff
 8014ba8:	4658      	mov	r0, fp
 8014baa:	f104 0abc 	add.w	sl, r4, #188	@ 0xbc
 8014bae:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8014bb2:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 8014bb6:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8014bba:	f7ff fe0d 	bl	80147d8 <_ZN8touchgfx9ContainerC1Ev>
 8014bbe:	4648      	mov	r0, r9
 8014bc0:	f7ff fe0a 	bl	80147d8 <_ZN8touchgfx9ContainerC1Ev>
 8014bc4:	4640      	mov	r0, r8
 8014bc6:	f7ff fe07 	bl	80147d8 <_ZN8touchgfx9ContainerC1Ev>
 8014bca:	4650      	mov	r0, sl
 8014bcc:	f7ff fe04 	bl	80147d8 <_ZN8touchgfx9ContainerC1Ev>
 8014bd0:	4638      	mov	r0, r7
 8014bd2:	f7ff fe01 	bl	80147d8 <_ZN8touchgfx9ContainerC1Ev>
 8014bd6:	9903      	ldr	r1, [sp, #12]
 8014bd8:	4620      	mov	r0, r4
 8014bda:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
 8014bde:	f8a4 111c 	strh.w	r1, [r4, #284]	@ 0x11c
 8014be2:	4659      	mov	r1, fp
 8014be4:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 8014be8:	f8a4 511e 	strh.w	r5, [r4, #286]	@ 0x11e
 8014bec:	f8a4 5120 	strh.w	r5, [r4, #288]	@ 0x120
 8014bf0:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
 8014bf4:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 8014bf8:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 8014bfc:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8014c00:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8014c04:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
 8014c08:	f7fc fe76 	bl	80118f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014c0c:	4651      	mov	r1, sl
 8014c0e:	4620      	mov	r0, r4
 8014c10:	f7fc fe72 	bl	80118f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014c14:	4649      	mov	r1, r9
 8014c16:	4620      	mov	r0, r4
 8014c18:	f7fc fe6e 	bl	80118f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014c1c:	4641      	mov	r1, r8
 8014c1e:	4620      	mov	r0, r4
 8014c20:	f7fc fe6a 	bl	80118f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014c24:	4639      	mov	r1, r7
 8014c26:	4620      	mov	r0, r4
 8014c28:	f7fc fe66 	bl	80118f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014c2c:	4620      	mov	r0, r4
 8014c2e:	9500      	str	r5, [sp, #0]
 8014c30:	462b      	mov	r3, r5
 8014c32:	462a      	mov	r2, r5
 8014c34:	4629      	mov	r1, r5
 8014c36:	f7ff ff56 	bl	8014ae6 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 8014c3a:	4620      	mov	r0, r4
 8014c3c:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 8014c40:	b005      	add	sp, #20
 8014c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c46:	bf00      	nop
 8014c48:	0802ea94 	.word	0x0802ea94

08014c4c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8014c4c:	4291      	cmp	r1, r2
 8014c4e:	4613      	mov	r3, r2
 8014c50:	d003      	beq.n	8014c5a <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 8014c52:	460a      	mov	r2, r1
 8014c54:	4619      	mov	r1, r3
 8014c56:	f005 b820 	b.w	8019c9a <_ZN8touchgfx6muldivElll>
 8014c5a:	4770      	bx	lr

08014c5c <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8014c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c60:	6803      	ldr	r3, [r0, #0]
 8014c62:	460d      	mov	r5, r1
 8014c64:	4604      	mov	r4, r0
 8014c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014c6a:	4798      	blx	r3
 8014c6c:	42a8      	cmp	r0, r5
 8014c6e:	4606      	mov	r6, r0
 8014c70:	d024      	beq.n	8014cbc <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 8014c72:	6823      	ldr	r3, [r4, #0]
 8014c74:	4601      	mov	r1, r0
 8014c76:	462a      	mov	r2, r5
 8014c78:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
 8014c7c:	f8d3 70a4 	ldr.w	r7, [r3, #164]	@ 0xa4
 8014c80:	f7ff ffe4 	bl	8014c4c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8014c84:	4680      	mov	r8, r0
 8014c86:	462a      	mov	r2, r5
 8014c88:	4631      	mov	r1, r6
 8014c8a:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
 8014c8e:	f7ff ffdd 	bl	8014c4c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8014c92:	4641      	mov	r1, r8
 8014c94:	4602      	mov	r2, r0
 8014c96:	4620      	mov	r0, r4
 8014c98:	47b8      	blx	r7
 8014c9a:	462a      	mov	r2, r5
 8014c9c:	4631      	mov	r1, r6
 8014c9e:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 8014ca2:	f7ff ffd3 	bl	8014c4c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8014ca6:	462a      	mov	r2, r5
 8014ca8:	f8c4 013c 	str.w	r0, [r4, #316]	@ 0x13c
 8014cac:	4631      	mov	r1, r6
 8014cae:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8014cb2:	f7ff ffcb 	bl	8014c4c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8014cb6:	6325      	str	r5, [r4, #48]	@ 0x30
 8014cb8:	f8c4 0140 	str.w	r0, [r4, #320]	@ 0x140
 8014cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014cc0 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 8014cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cc4:	4604      	mov	r4, r0
 8014cc6:	460f      	mov	r7, r1
 8014cc8:	b1b2      	cbz	r2, 8014cf8 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8014cca:	6803      	ldr	r3, [r0, #0]
 8014ccc:	2600      	movs	r6, #0
 8014cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014cd2:	4798      	blx	r3
 8014cd4:	4681      	mov	r9, r0
 8014cd6:	b235      	sxth	r5, r6
 8014cd8:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8014cdc:	3601      	adds	r6, #1
 8014cde:	42ab      	cmp	r3, r5
 8014ce0:	dd0a      	ble.n	8014cf8 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8014ce2:	f8d4 8144 	ldr.w	r8, [r4, #324]	@ 0x144
 8014ce6:	463a      	mov	r2, r7
 8014ce8:	4649      	mov	r1, r9
 8014cea:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8014cee:	f7ff ffad 	bl	8014c4c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8014cf2:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8014cf6:	e7ee      	b.n	8014cd6 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 8014cf8:	6367      	str	r7, [r4, #52]	@ 0x34
 8014cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014cfe <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 8014cfe:	b570      	push	{r4, r5, r6, lr}
 8014d00:	6803      	ldr	r3, [r0, #0]
 8014d02:	4604      	mov	r4, r0
 8014d04:	460d      	mov	r5, r1
 8014d06:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8014d0a:	4798      	blx	r3
 8014d0c:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8014d10:	4629      	mov	r1, r5
 8014d12:	4620      	mov	r0, r4
 8014d14:	3301      	adds	r3, #1
 8014d16:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 8014d1a:	6823      	ldr	r3, [r4, #0]
 8014d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d20:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8014d24:	4718      	bx	r3

08014d26 <_ZN8touchgfx16GraphElementLineD1Ev>:
 8014d26:	4770      	bx	lr

08014d28 <_ZN8touchgfx16GraphElementLineD0Ev>:
 8014d28:	b510      	push	{r4, lr}
 8014d2a:	4604      	mov	r4, r0
 8014d2c:	2130      	movs	r1, #48	@ 0x30
 8014d2e:	f015 f844 	bl	8029dba <_ZdlPvj>
 8014d32:	4620      	mov	r0, r4
 8014d34:	bd10      	pop	{r4, pc}

08014d36 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8014d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d38:	4604      	mov	r4, r0
 8014d3a:	4608      	mov	r0, r1
 8014d3c:	460d      	mov	r5, r1
 8014d3e:	f7fc ffa2 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014d42:	b978      	cbnz	r0, 8014d64 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8014d44:	4620      	mov	r0, r4
 8014d46:	f7fc ff9e 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014d4a:	f9b5 6000 	ldrsh.w	r6, [r5]
 8014d4e:	b150      	cbz	r0, 8014d66 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8014d50:	8026      	strh	r6, [r4, #0]
 8014d52:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8014d56:	8063      	strh	r3, [r4, #2]
 8014d58:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8014d5c:	80a3      	strh	r3, [r4, #4]
 8014d5e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014d62:	80e3      	strh	r3, [r4, #6]
 8014d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d66:	f9b4 1000 	ldrsh.w	r1, [r4]
 8014d6a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014d6e:	42b1      	cmp	r1, r6
 8014d70:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8014d74:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8014d78:	460f      	mov	r7, r1
 8014d7a:	88ed      	ldrh	r5, [r5, #6]
 8014d7c:	bfa8      	it	ge
 8014d7e:	4637      	movge	r7, r6
 8014d80:	4293      	cmp	r3, r2
 8014d82:	4618      	mov	r0, r3
 8014d84:	4466      	add	r6, ip
 8014d86:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8014d8a:	bfa8      	it	ge
 8014d8c:	4610      	movge	r0, r2
 8014d8e:	442a      	add	r2, r5
 8014d90:	88e5      	ldrh	r5, [r4, #6]
 8014d92:	4461      	add	r1, ip
 8014d94:	b236      	sxth	r6, r6
 8014d96:	8027      	strh	r7, [r4, #0]
 8014d98:	442b      	add	r3, r5
 8014d9a:	b209      	sxth	r1, r1
 8014d9c:	b212      	sxth	r2, r2
 8014d9e:	8060      	strh	r0, [r4, #2]
 8014da0:	b21b      	sxth	r3, r3
 8014da2:	428e      	cmp	r6, r1
 8014da4:	bfac      	ite	ge
 8014da6:	ebc7 0106 	rsbge	r1, r7, r6
 8014daa:	ebc7 0101 	rsblt	r1, r7, r1
 8014dae:	429a      	cmp	r2, r3
 8014db0:	bfac      	ite	ge
 8014db2:	ebc0 0202 	rsbge	r2, r0, r2
 8014db6:	ebc0 0203 	rsblt	r2, r0, r3
 8014dba:	80a1      	strh	r1, [r4, #4]
 8014dbc:	80e2      	strh	r2, [r4, #6]
 8014dbe:	e7d1      	b.n	8014d64 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08014dc0 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8014dc0:	6800      	ldr	r0, [r0, #0]
 8014dc2:	2800      	cmp	r0, #0
 8014dc4:	bfb9      	ittee	lt
 8014dc6:	2320      	movlt	r3, #32
 8014dc8:	fb90 f0f3 	sdivlt	r0, r0, r3
 8014dcc:	301f      	addge	r0, #31
 8014dce:	1140      	asrge	r0, r0, #5
 8014dd0:	4770      	bx	lr

08014dd2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 8014dd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dd6:	6803      	ldr	r3, [r0, #0]
 8014dd8:	b093      	sub	sp, #76	@ 0x4c
 8014dda:	6945      	ldr	r5, [r0, #20]
 8014ddc:	4604      	mov	r4, r0
 8014dde:	460f      	mov	r7, r1
 8014de0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014de2:	2d00      	cmp	r5, #0
 8014de4:	f000 81ad 	beq.w	8015142 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 8014de8:	696d      	ldr	r5, [r5, #20]
 8014dea:	4798      	blx	r3
 8014dec:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d077      	beq.n	8014ee4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8014df4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8014df8:	fb13 f000 	smulbb	r0, r3, r0
 8014dfc:	b283      	uxth	r3, r0
 8014dfe:	1c58      	adds	r0, r3, #1
 8014e00:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8014e04:	1200      	asrs	r0, r0, #8
 8014e06:	d06d      	beq.n	8014ee4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8014e08:	b2c3      	uxtb	r3, r0
 8014e0a:	f10d 0840 	add.w	r8, sp, #64	@ 0x40
 8014e0e:	462a      	mov	r2, r5
 8014e10:	4621      	mov	r1, r4
 8014e12:	9308      	str	r3, [sp, #32]
 8014e14:	4640      	mov	r0, r8
 8014e16:	6823      	ldr	r3, [r4, #0]
 8014e18:	ae0e      	add	r6, sp, #56	@ 0x38
 8014e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014e1e:	4798      	blx	r3
 8014e20:	e898 0003 	ldmia.w	r8, {r0, r1}
 8014e24:	e886 0003 	stmia.w	r6, {r0, r1}
 8014e28:	4639      	mov	r1, r7
 8014e2a:	4630      	mov	r0, r6
 8014e2c:	f7fc fee8 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 8014e30:	6823      	ldr	r3, [r4, #0]
 8014e32:	4629      	mov	r1, r5
 8014e34:	4620      	mov	r0, r4
 8014e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014e3a:	4798      	blx	r3
 8014e3c:	6823      	ldr	r3, [r4, #0]
 8014e3e:	4607      	mov	r7, r0
 8014e40:	4629      	mov	r1, r5
 8014e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e46:	4620      	mov	r0, r4
 8014e48:	4798      	blx	r3
 8014e4a:	4681      	mov	r9, r0
 8014e4c:	f894 0038 	ldrb.w	r0, [r4, #56]	@ 0x38
 8014e50:	4629      	mov	r1, r5
 8014e52:	0103      	lsls	r3, r0, #4
 8014e54:	4620      	mov	r0, r4
 8014e56:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e58:	6823      	ldr	r3, [r4, #0]
 8014e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8014e5e:	4798      	blx	r3
 8014e60:	4629      	mov	r1, r5
 8014e62:	b203      	sxth	r3, r0
 8014e64:	4620      	mov	r0, r4
 8014e66:	9306      	str	r3, [sp, #24]
 8014e68:	6823      	ldr	r3, [r4, #0]
 8014e6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014e6e:	4798      	blx	r3
 8014e70:	2f00      	cmp	r7, #0
 8014e72:	b203      	sxth	r3, r0
 8014e74:	9307      	str	r3, [sp, #28]
 8014e76:	d138      	bne.n	8014eea <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 8014e78:	f1b9 0f00 	cmp.w	r9, #0
 8014e7c:	d132      	bne.n	8014ee4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8014e7e:	6823      	ldr	r3, [r4, #0]
 8014e80:	464a      	mov	r2, r9
 8014e82:	4629      	mov	r1, r5
 8014e84:	4620      	mov	r0, r4
 8014e86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8014e8a:	4798      	blx	r3
 8014e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e8e:	1ac0      	subs	r0, r0, r3
 8014e90:	9010      	str	r0, [sp, #64]	@ 0x40
 8014e92:	4640      	mov	r0, r8
 8014e94:	f7ff fcba 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014e98:	6823      	ldr	r3, [r4, #0]
 8014e9a:	4607      	mov	r7, r0
 8014e9c:	4629      	mov	r1, r5
 8014e9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014ea2:	4620      	mov	r0, r4
 8014ea4:	4798      	blx	r3
 8014ea6:	1a38      	subs	r0, r7, r0
 8014ea8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014eac:	fa0f f880 	sxth.w	r8, r0
 8014eb0:	eb13 0f08 	cmn.w	r3, r8
 8014eb4:	d416      	bmi.n	8014ee4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8014eb6:	6823      	ldr	r3, [r4, #0]
 8014eb8:	4629      	mov	r1, r5
 8014eba:	4620      	mov	r0, r4
 8014ebc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014ec0:	4798      	blx	r3
 8014ec2:	4580      	cmp	r8, r0
 8014ec4:	da0e      	bge.n	8014ee4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8014ec6:	9a08      	ldr	r2, [sp, #32]
 8014ec8:	b23f      	sxth	r7, r7
 8014eca:	6823      	ldr	r3, [r4, #0]
 8014ecc:	4631      	mov	r1, r6
 8014ece:	9202      	str	r2, [sp, #8]
 8014ed0:	4620      	mov	r0, r4
 8014ed2:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8014ed6:	9700      	str	r7, [sp, #0]
 8014ed8:	9201      	str	r2, [sp, #4]
 8014eda:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8014ede:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014ee2:	47a8      	blx	r5
 8014ee4:	b013      	add	sp, #76	@ 0x4c
 8014ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eea:	ddfb      	ble.n	8014ee4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8014eec:	6823      	ldr	r3, [r4, #0]
 8014eee:	4629      	mov	r1, r5
 8014ef0:	4620      	mov	r0, r4
 8014ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014ef6:	4798      	blx	r3
 8014ef8:	6823      	ldr	r3, [r4, #0]
 8014efa:	4683      	mov	fp, r0
 8014efc:	4629      	mov	r1, r5
 8014efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014f02:	4620      	mov	r0, r4
 8014f04:	4798      	blx	r3
 8014f06:	eba0 030b 	sub.w	r3, r0, fp
 8014f0a:	4680      	mov	r8, r0
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	bfb8      	it	lt
 8014f10:	425b      	neglt	r3, r3
 8014f12:	fb93 f3f7 	sdiv	r3, r3, r7
 8014f16:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8014f1a:	dce3      	bgt.n	8014ee4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8014f1c:	6823      	ldr	r3, [r4, #0]
 8014f1e:	465a      	mov	r2, fp
 8014f20:	4629      	mov	r1, r5
 8014f22:	4620      	mov	r0, r4
 8014f24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8014f28:	4798      	blx	r3
 8014f2a:	6823      	ldr	r3, [r4, #0]
 8014f2c:	4606      	mov	r6, r0
 8014f2e:	4642      	mov	r2, r8
 8014f30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8014f34:	4629      	mov	r1, r5
 8014f36:	4620      	mov	r0, r4
 8014f38:	4798      	blx	r3
 8014f3a:	42b0      	cmp	r0, r6
 8014f3c:	bfa2      	ittt	ge
 8014f3e:	4643      	movge	r3, r8
 8014f40:	46d8      	movge	r8, fp
 8014f42:	469b      	movge	fp, r3
 8014f44:	fb98 f6f7 	sdiv	r6, r8, r7
 8014f48:	fb9b f2f7 	sdiv	r2, fp, r7
 8014f4c:	45d8      	cmp	r8, fp
 8014f4e:	bfac      	ite	ge
 8014f50:	f04f 33ff 	movge.w	r3, #4294967295
 8014f54:	2301      	movlt	r3, #1
 8014f56:	1af6      	subs	r6, r6, r3
 8014f58:	441a      	add	r2, r3
 8014f5a:	4296      	cmp	r6, r2
 8014f5c:	bfac      	ite	ge
 8014f5e:	f04f 3aff 	movge.w	sl, #4294967295
 8014f62:	f04f 0a01 	movlt.w	sl, #1
 8014f66:	f1b9 0f00 	cmp.w	r9, #0
 8014f6a:	d13e      	bne.n	8014fea <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 8014f6c:	fb07 fb0a 	mul.w	fp, r7, sl
 8014f70:	eb0a 0802 	add.w	r8, sl, r2
 8014f74:	4377      	muls	r7, r6
 8014f76:	45b0      	cmp	r8, r6
 8014f78:	d0b4      	beq.n	8014ee4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8014f7a:	6823      	ldr	r3, [r4, #0]
 8014f7c:	463a      	mov	r2, r7
 8014f7e:	4629      	mov	r1, r5
 8014f80:	4620      	mov	r0, r4
 8014f82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8014f86:	4798      	blx	r3
 8014f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f8a:	1ac0      	subs	r0, r0, r3
 8014f8c:	9010      	str	r0, [sp, #64]	@ 0x40
 8014f8e:	a810      	add	r0, sp, #64	@ 0x40
 8014f90:	f7ff fc3c 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014f94:	6823      	ldr	r3, [r4, #0]
 8014f96:	4681      	mov	r9, r0
 8014f98:	4629      	mov	r1, r5
 8014f9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014f9e:	4620      	mov	r0, r4
 8014fa0:	4798      	blx	r3
 8014fa2:	eba9 0000 	sub.w	r0, r9, r0
 8014fa6:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8014faa:	b203      	sxth	r3, r0
 8014fac:	42da      	cmn	r2, r3
 8014fae:	9304      	str	r3, [sp, #16]
 8014fb0:	d418      	bmi.n	8014fe4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 8014fb2:	6822      	ldr	r2, [r4, #0]
 8014fb4:	4629      	mov	r1, r5
 8014fb6:	4620      	mov	r0, r4
 8014fb8:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 8014fbc:	4790      	blx	r2
 8014fbe:	9b04      	ldr	r3, [sp, #16]
 8014fc0:	4283      	cmp	r3, r0
 8014fc2:	da0f      	bge.n	8014fe4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 8014fc4:	9b08      	ldr	r3, [sp, #32]
 8014fc6:	a90e      	add	r1, sp, #56	@ 0x38
 8014fc8:	6822      	ldr	r2, [r4, #0]
 8014fca:	4620      	mov	r0, r4
 8014fcc:	9302      	str	r3, [sp, #8]
 8014fce:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014fd2:	9301      	str	r3, [sp, #4]
 8014fd4:	fa0f f389 	sxth.w	r3, r9
 8014fd8:	9300      	str	r3, [sp, #0]
 8014fda:	f8d2 9088 	ldr.w	r9, [r2, #136]	@ 0x88
 8014fde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014fe2:	47c8      	blx	r9
 8014fe4:	4456      	add	r6, sl
 8014fe6:	445f      	add	r7, fp
 8014fe8:	e7c5      	b.n	8014f76 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 8014fea:	fb98 f8f9 	sdiv	r8, r8, r9
 8014fee:	eba8 0203 	sub.w	r2, r8, r3
 8014ff2:	4629      	mov	r1, r5
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	9204      	str	r2, [sp, #16]
 8014ff8:	fb9b f8f9 	sdiv	r8, fp, r9
 8014ffc:	4498      	add	r8, r3
 8014ffe:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8015002:	4542      	cmp	r2, r8
 8015004:	bfac      	ite	ge
 8015006:	f04f 33ff 	movge.w	r3, #4294967295
 801500a:	2301      	movlt	r3, #1
 801500c:	fb02 f209 	mul.w	r2, r2, r9
 8015010:	930a      	str	r3, [sp, #40]	@ 0x28
 8015012:	6823      	ldr	r3, [r4, #0]
 8015014:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8015018:	4798      	blx	r3
 801501a:	f84b 0d08 	str.w	r0, [fp, #-8]!
 801501e:	4658      	mov	r0, fp
 8015020:	f7ff fbf4 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015024:	fb06 f207 	mul.w	r2, r6, r7
 8015028:	b203      	sxth	r3, r0
 801502a:	4629      	mov	r1, r5
 801502c:	4620      	mov	r0, r4
 801502e:	9305      	str	r3, [sp, #20]
 8015030:	6823      	ldr	r3, [r4, #0]
 8015032:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8015036:	4798      	blx	r3
 8015038:	9010      	str	r0, [sp, #64]	@ 0x40
 801503a:	4658      	mov	r0, fp
 801503c:	f7ff fbe6 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015040:	fb07 f20a 	mul.w	r2, r7, sl
 8015044:	b203      	sxth	r3, r0
 8015046:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015048:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801504a:	4442      	add	r2, r8
 801504c:	920c      	str	r2, [sp, #48]	@ 0x30
 801504e:	9a05      	ldr	r2, [sp, #20]
 8015050:	429a      	cmp	r2, r3
 8015052:	dc16      	bgt.n	8015082 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 8015054:	eb06 080a 	add.w	r8, r6, sl
 8015058:	fb07 f808 	mul.w	r8, r7, r8
 801505c:	9a05      	ldr	r2, [sp, #20]
 801505e:	429a      	cmp	r2, r3
 8015060:	db54      	blt.n	801510c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 8015062:	6823      	ldr	r3, [r4, #0]
 8015064:	4642      	mov	r2, r8
 8015066:	4629      	mov	r1, r5
 8015068:	4620      	mov	r0, r4
 801506a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801506e:	4456      	add	r6, sl
 8015070:	4798      	blx	r3
 8015072:	9010      	str	r0, [sp, #64]	@ 0x40
 8015074:	4658      	mov	r0, fp
 8015076:	f7ff fbc9 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801507a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801507c:	b203      	sxth	r3, r0
 801507e:	4490      	add	r8, r2
 8015080:	e7ec      	b.n	801505c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 8015082:	6823      	ldr	r3, [r4, #0]
 8015084:	fb07 f206 	mul.w	r2, r7, r6
 8015088:	4629      	mov	r1, r5
 801508a:	4620      	mov	r0, r4
 801508c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8015090:	4798      	blx	r3
 8015092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015094:	1ac0      	subs	r0, r0, r3
 8015096:	9010      	str	r0, [sp, #64]	@ 0x40
 8015098:	4658      	mov	r0, fp
 801509a:	f7ff fbb7 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801509e:	6823      	ldr	r3, [r4, #0]
 80150a0:	4680      	mov	r8, r0
 80150a2:	4629      	mov	r1, r5
 80150a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80150a8:	4620      	mov	r0, r4
 80150aa:	4798      	blx	r3
 80150ac:	eba8 0000 	sub.w	r0, r8, r0
 80150b0:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80150b4:	b203      	sxth	r3, r0
 80150b6:	42da      	cmn	r2, r3
 80150b8:	930d      	str	r3, [sp, #52]	@ 0x34
 80150ba:	d418      	bmi.n	80150ee <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 80150bc:	6822      	ldr	r2, [r4, #0]
 80150be:	4629      	mov	r1, r5
 80150c0:	4620      	mov	r0, r4
 80150c2:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 80150c6:	4790      	blx	r2
 80150c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80150ca:	4283      	cmp	r3, r0
 80150cc:	da0f      	bge.n	80150ee <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 80150ce:	9b08      	ldr	r3, [sp, #32]
 80150d0:	a90e      	add	r1, sp, #56	@ 0x38
 80150d2:	6822      	ldr	r2, [r4, #0]
 80150d4:	4620      	mov	r0, r4
 80150d6:	9302      	str	r3, [sp, #8]
 80150d8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80150dc:	9301      	str	r3, [sp, #4]
 80150de:	fa0f f388 	sxth.w	r3, r8
 80150e2:	9300      	str	r3, [sp, #0]
 80150e4:	f8d2 8088 	ldr.w	r8, [r2, #136]	@ 0x88
 80150e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80150ec:	47c0      	blx	r8
 80150ee:	6823      	ldr	r3, [r4, #0]
 80150f0:	4456      	add	r6, sl
 80150f2:	4629      	mov	r1, r5
 80150f4:	4620      	mov	r0, r4
 80150f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80150fa:	fb06 f207 	mul.w	r2, r6, r7
 80150fe:	4798      	blx	r3
 8015100:	9010      	str	r0, [sp, #64]	@ 0x40
 8015102:	4658      	mov	r0, fp
 8015104:	f7ff fb82 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015108:	b203      	sxth	r3, r0
 801510a:	e7a0      	b.n	801504e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 801510c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801510e:	930d      	str	r3, [sp, #52]	@ 0x34
 8015110:	9b04      	ldr	r3, [sp, #16]
 8015112:	4413      	add	r3, r2
 8015114:	9304      	str	r3, [sp, #16]
 8015116:	9a04      	ldr	r2, [sp, #16]
 8015118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801511a:	4293      	cmp	r3, r2
 801511c:	f43f aee2 	beq.w	8014ee4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8015120:	9b04      	ldr	r3, [sp, #16]
 8015122:	4629      	mov	r1, r5
 8015124:	6822      	ldr	r2, [r4, #0]
 8015126:	4620      	mov	r0, r4
 8015128:	f8d2 80ac 	ldr.w	r8, [r2, #172]	@ 0xac
 801512c:	fb03 f209 	mul.w	r2, r3, r9
 8015130:	47c0      	blx	r8
 8015132:	9010      	str	r0, [sp, #64]	@ 0x40
 8015134:	4658      	mov	r0, fp
 8015136:	f7ff fb69 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801513a:	b203      	sxth	r3, r0
 801513c:	9305      	str	r3, [sp, #20]
 801513e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015140:	e785      	b.n	801504e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8015142:	4798      	blx	r3
 8015144:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8015148:	deff      	udf	#255	@ 0xff

0801514a <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 801514a:	b510      	push	{r4, lr}
 801514c:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8015150:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8015154:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8015158:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 801515c:	139b      	asrs	r3, r3, #14
 801515e:	13a4      	asrs	r4, r4, #14
 8015160:	429c      	cmp	r4, r3
 8015162:	bfb8      	it	lt
 8015164:	461c      	movlt	r4, r3
 8015166:	2c01      	cmp	r4, #1
 8015168:	dd07      	ble.n	801517a <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 801516a:	fb91 f1f4 	sdiv	r1, r1, r4
 801516e:	fb90 f0f4 	sdiv	r0, r0, r4
 8015172:	f7ff ffea 	bl	801514a <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8015176:	4360      	muls	r0, r4
 8015178:	bd10      	pop	{r4, pc}
 801517a:	4340      	muls	r0, r0
 801517c:	fb01 0101 	mla	r1, r1, r1, r0
 8015180:	2000      	movs	r0, #0
 8015182:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8015186:	bfb4      	ite	lt
 8015188:	f44f 4380 	movlt.w	r3, #16384	@ 0x4000
 801518c:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
 8015190:	18c2      	adds	r2, r0, r3
 8015192:	428a      	cmp	r2, r1
 8015194:	bf9c      	itt	ls
 8015196:	1898      	addls	r0, r3, r2
 8015198:	1a89      	subls	r1, r1, r2
 801519a:	089b      	lsrs	r3, r3, #2
 801519c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80151a0:	d1f6      	bne.n	8015190 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 80151a2:	e7e9      	b.n	8015178 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

080151a4 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 80151a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151a6:	9906      	ldr	r1, [sp, #24]
 80151a8:	4606      	mov	r6, r0
 80151aa:	461c      	mov	r4, r3
 80151ac:	2020      	movs	r0, #32
 80151ae:	4291      	cmp	r1, r2
 80151b0:	bfbc      	itt	lt
 80151b2:	9206      	strlt	r2, [sp, #24]
 80151b4:	460a      	movlt	r2, r1
 80151b6:	9907      	ldr	r1, [sp, #28]
 80151b8:	428b      	cmp	r3, r1
 80151ba:	bfc4      	itt	gt
 80151bc:	460c      	movgt	r4, r1
 80151be:	9307      	strgt	r3, [sp, #28]
 80151c0:	fb92 f5f0 	sdiv	r5, r2, r0
 80151c4:	fb94 f4f0 	sdiv	r4, r4, r0
 80151c8:	a806      	add	r0, sp, #24
 80151ca:	f7ff fdf9 	bl	8014dc0 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80151ce:	4607      	mov	r7, r0
 80151d0:	a807      	add	r0, sp, #28
 80151d2:	f7ff fdf5 	bl	8014dc0 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80151d6:	1b7a      	subs	r2, r7, r5
 80151d8:	1b00      	subs	r0, r0, r4
 80151da:	8035      	strh	r5, [r6, #0]
 80151dc:	8074      	strh	r4, [r6, #2]
 80151de:	80f0      	strh	r0, [r6, #6]
 80151e0:	4630      	mov	r0, r6
 80151e2:	80b2      	strh	r2, [r6, #4]
 80151e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080151e6 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 80151e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80151e8:	9c08      	ldr	r4, [sp, #32]
 80151ea:	2602      	movs	r6, #2
 80151ec:	4605      	mov	r5, r0
 80151ee:	3401      	adds	r4, #1
 80151f0:	fb94 f4f6 	sdiv	r4, r4, r6
 80151f4:	18a6      	adds	r6, r4, r2
 80151f6:	191f      	adds	r7, r3, r4
 80151f8:	1b12      	subs	r2, r2, r4
 80151fa:	1b1b      	subs	r3, r3, r4
 80151fc:	e9cd 6700 	strd	r6, r7, [sp]
 8015200:	f7ff ffd0 	bl	80151a4 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 8015204:	4628      	mov	r0, r5
 8015206:	b003      	add	sp, #12
 8015208:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801520a <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 801520a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801520e:	6943      	ldr	r3, [r0, #20]
 8015210:	b087      	sub	sp, #28
 8015212:	4606      	mov	r6, r0
 8015214:	460d      	mov	r5, r1
 8015216:	2b00      	cmp	r3, #0
 8015218:	d072      	beq.n	8015300 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 801521a:	695c      	ldr	r4, [r3, #20]
 801521c:	f890 702c 	ldrb.w	r7, [r0, #44]	@ 0x2c
 8015220:	6823      	ldr	r3, [r4, #0]
 8015222:	4620      	mov	r0, r4
 8015224:	017f      	lsls	r7, r7, #5
 8015226:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801522a:	4798      	blx	r3
 801522c:	6823      	ldr	r3, [r4, #0]
 801522e:	4680      	mov	r8, r0
 8015230:	4629      	mov	r1, r5
 8015232:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015236:	4620      	mov	r0, r4
 8015238:	4798      	blx	r3
 801523a:	9700      	str	r7, [sp, #0]
 801523c:	4603      	mov	r3, r0
 801523e:	4642      	mov	r2, r8
 8015240:	4631      	mov	r1, r6
 8015242:	a802      	add	r0, sp, #8
 8015244:	f7ff ffcf 	bl	80151e6 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8015248:	2d00      	cmp	r5, #0
 801524a:	dd1b      	ble.n	8015284 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 801524c:	f105 38ff 	add.w	r8, r5, #4294967295
 8015250:	6823      	ldr	r3, [r4, #0]
 8015252:	4620      	mov	r0, r4
 8015254:	fa0f f888 	sxth.w	r8, r8
 8015258:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801525c:	4641      	mov	r1, r8
 801525e:	4798      	blx	r3
 8015260:	6823      	ldr	r3, [r4, #0]
 8015262:	4681      	mov	r9, r0
 8015264:	4641      	mov	r1, r8
 8015266:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801526a:	4620      	mov	r0, r4
 801526c:	4798      	blx	r3
 801526e:	4631      	mov	r1, r6
 8015270:	4603      	mov	r3, r0
 8015272:	9700      	str	r7, [sp, #0]
 8015274:	a804      	add	r0, sp, #16
 8015276:	464a      	mov	r2, r9
 8015278:	f7ff ffb5 	bl	80151e6 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801527c:	a904      	add	r1, sp, #16
 801527e:	a802      	add	r0, sp, #8
 8015280:	f7ff fd59 	bl	8014d36 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015284:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8015288:	3b01      	subs	r3, #1
 801528a:	429d      	cmp	r5, r3
 801528c:	da19      	bge.n	80152c2 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 801528e:	3501      	adds	r5, #1
 8015290:	6823      	ldr	r3, [r4, #0]
 8015292:	4620      	mov	r0, r4
 8015294:	b22d      	sxth	r5, r5
 8015296:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801529a:	4629      	mov	r1, r5
 801529c:	4798      	blx	r3
 801529e:	6823      	ldr	r3, [r4, #0]
 80152a0:	4680      	mov	r8, r0
 80152a2:	4629      	mov	r1, r5
 80152a4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80152a8:	4620      	mov	r0, r4
 80152aa:	4798      	blx	r3
 80152ac:	4631      	mov	r1, r6
 80152ae:	4603      	mov	r3, r0
 80152b0:	9700      	str	r7, [sp, #0]
 80152b2:	a804      	add	r0, sp, #16
 80152b4:	4642      	mov	r2, r8
 80152b6:	f7ff ff96 	bl	80151e6 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 80152ba:	a904      	add	r1, sp, #16
 80152bc:	a802      	add	r0, sp, #8
 80152be:	f7ff fd3a 	bl	8014d36 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80152c2:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 80152c6:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 80152ca:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 80152ce:	18ca      	adds	r2, r1, r3
 80152d0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 80152d4:	f8ad 1012 	strh.w	r1, [sp, #18]
 80152d8:	a904      	add	r1, sp, #16
 80152da:	1a9b      	subs	r3, r3, r2
 80152dc:	2200      	movs	r2, #0
 80152de:	f8ad 0014 	strh.w	r0, [sp, #20]
 80152e2:	a802      	add	r0, sp, #8
 80152e4:	f8ad 2010 	strh.w	r2, [sp, #16]
 80152e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80152ec:	f7fc fc88 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 80152f0:	6833      	ldr	r3, [r6, #0]
 80152f2:	a902      	add	r1, sp, #8
 80152f4:	4630      	mov	r0, r6
 80152f6:	691b      	ldr	r3, [r3, #16]
 80152f8:	4798      	blx	r3
 80152fa:	b007      	add	sp, #28
 80152fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	deff      	udf	#255	@ 0xff

08015304 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 8015304:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8015308:	2b00      	cmp	r3, #0
 801530a:	da05      	bge.n	8015318 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 801530c:	b29b      	uxth	r3, r3
 801530e:	880a      	ldrh	r2, [r1, #0]
 8015310:	441a      	add	r2, r3
 8015312:	425b      	negs	r3, r3
 8015314:	800a      	strh	r2, [r1, #0]
 8015316:	808b      	strh	r3, [r1, #4]
 8015318:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801531c:	2b00      	cmp	r3, #0
 801531e:	da05      	bge.n	801532c <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 8015320:	b29b      	uxth	r3, r3
 8015322:	884a      	ldrh	r2, [r1, #2]
 8015324:	441a      	add	r2, r3
 8015326:	425b      	negs	r3, r3
 8015328:	804a      	strh	r2, [r1, #2]
 801532a:	80cb      	strh	r3, [r1, #6]
 801532c:	4770      	bx	lr

0801532e <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 801532e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015330:	4604      	mov	r4, r0
 8015332:	460d      	mov	r5, r1
 8015334:	6801      	ldr	r1, [r0, #0]
 8015336:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	@ 0x24
 801533a:	9001      	str	r0, [sp, #4]
 801533c:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8015340:	9000      	str	r0, [sp, #0]
 8015342:	a802      	add	r0, sp, #8
 8015344:	f8d1 6090 	ldr.w	r6, [r1, #144]	@ 0x90
 8015348:	4621      	mov	r1, r4
 801534a:	47b0      	blx	r6
 801534c:	a902      	add	r1, sp, #8
 801534e:	4620      	mov	r0, r4
 8015350:	f7ff ffd8 	bl	8015304 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 8015354:	a802      	add	r0, sp, #8
 8015356:	4629      	mov	r1, r5
 8015358:	f7fc fc52 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 801535c:	a802      	add	r0, sp, #8
 801535e:	f7fc fc92 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015362:	b968      	cbnz	r0, 8015380 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 8015364:	6823      	ldr	r3, [r4, #0]
 8015366:	a902      	add	r1, sp, #8
 8015368:	4620      	mov	r0, r4
 801536a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801536c:	4798      	blx	r3
 801536e:	f7ef fcd7 	bl	8004d20 <_ZN8touchgfx3HAL3lcdEv>
 8015372:	6803      	ldr	r3, [r0, #0]
 8015374:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015376:	a902      	add	r1, sp, #8
 8015378:	6a1d      	ldr	r5, [r3, #32]
 801537a:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801537e:	47a8      	blx	r5
 8015380:	b004      	add	sp, #16
 8015382:	bd70      	pop	{r4, r5, r6, pc}

08015384 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8015384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015388:	b08b      	sub	sp, #44	@ 0x2c
 801538a:	461e      	mov	r6, r3
 801538c:	460f      	mov	r7, r1
 801538e:	4615      	mov	r5, r2
 8015390:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 8015394:	429e      	cmp	r6, r3
 8015396:	9304      	str	r3, [sp, #16]
 8015398:	d074      	beq.n	8015484 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 801539a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801539e:	4631      	mov	r1, r6
 80153a0:	4610      	mov	r0, r2
 80153a2:	4634      	mov	r4, r6
 80153a4:	015b      	lsls	r3, r3, #5
 80153a6:	9303      	str	r3, [sp, #12]
 80153a8:	6813      	ldr	r3, [r2, #0]
 80153aa:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80153ae:	4798      	blx	r3
 80153b0:	ab0a      	add	r3, sp, #40	@ 0x28
 80153b2:	f843 0d10 	str.w	r0, [r3, #-16]!
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7ff fa28 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80153bc:	682b      	ldr	r3, [r5, #0]
 80153be:	4631      	mov	r1, r6
 80153c0:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80153c4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80153c8:	4628      	mov	r0, r5
 80153ca:	4798      	blx	r3
 80153cc:	ab0a      	add	r3, sp, #40	@ 0x28
 80153ce:	f843 0d0c 	str.w	r0, [r3, #-12]!
 80153d2:	4618      	mov	r0, r3
 80153d4:	f7ff fa1a 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80153d8:	4641      	mov	r1, r8
 80153da:	ea4f 1940 	mov.w	r9, r0, lsl #5
 80153de:	4638      	mov	r0, r7
 80153e0:	464a      	mov	r2, r9
 80153e2:	f014 f9d5 	bl	8029790 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80153e6:	2301      	movs	r3, #1
 80153e8:	9300      	str	r3, [sp, #0]
 80153ea:	4628      	mov	r0, r5
 80153ec:	9b00      	ldr	r3, [sp, #0]
 80153ee:	441c      	add	r4, r3
 80153f0:	682b      	ldr	r3, [r5, #0]
 80153f2:	b224      	sxth	r4, r4
 80153f4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80153f8:	4621      	mov	r1, r4
 80153fa:	4798      	blx	r3
 80153fc:	9008      	str	r0, [sp, #32]
 80153fe:	a808      	add	r0, sp, #32
 8015400:	f7ff fa04 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015404:	4621      	mov	r1, r4
 8015406:	0143      	lsls	r3, r0, #5
 8015408:	4628      	mov	r0, r5
 801540a:	9301      	str	r3, [sp, #4]
 801540c:	682b      	ldr	r3, [r5, #0]
 801540e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015412:	4798      	blx	r3
 8015414:	9009      	str	r0, [sp, #36]	@ 0x24
 8015416:	a809      	add	r0, sp, #36	@ 0x24
 8015418:	f7ff f9f8 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801541c:	0143      	lsls	r3, r0, #5
 801541e:	9302      	str	r3, [sp, #8]
 8015420:	9b01      	ldr	r3, [sp, #4]
 8015422:	eba3 0b08 	sub.w	fp, r3, r8
 8015426:	9b02      	ldr	r3, [sp, #8]
 8015428:	eba3 0a09 	sub.w	sl, r3, r9
 801542c:	4658      	mov	r0, fp
 801542e:	4651      	mov	r1, sl
 8015430:	f7ff fe8b 	bl	801514a <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8015434:	b320      	cbz	r0, 8015480 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 8015436:	4602      	mov	r2, r0
 8015438:	4651      	mov	r1, sl
 801543a:	9005      	str	r0, [sp, #20]
 801543c:	9803      	ldr	r0, [sp, #12]
 801543e:	f004 fc2c 	bl	8019c9a <_ZN8touchgfx6muldivElll>
 8015442:	2302      	movs	r3, #2
 8015444:	4659      	mov	r1, fp
 8015446:	fb90 faf3 	sdiv	sl, r0, r3
 801544a:	9b05      	ldr	r3, [sp, #20]
 801544c:	9803      	ldr	r0, [sp, #12]
 801544e:	461a      	mov	r2, r3
 8015450:	f004 fc23 	bl	8019c9a <_ZN8touchgfx6muldivElll>
 8015454:	2302      	movs	r3, #2
 8015456:	eba8 010a 	sub.w	r1, r8, sl
 801545a:	fb90 fbf3 	sdiv	fp, r0, r3
 801545e:	683b      	ldr	r3, [r7, #0]
 8015460:	eb0b 0209 	add.w	r2, fp, r9
 8015464:	4638      	mov	r0, r7
 8015466:	689b      	ldr	r3, [r3, #8]
 8015468:	4798      	blx	r3
 801546a:	683b      	ldr	r3, [r7, #0]
 801546c:	9a02      	ldr	r2, [sp, #8]
 801546e:	4638      	mov	r0, r7
 8015470:	9901      	ldr	r1, [sp, #4]
 8015472:	689b      	ldr	r3, [r3, #8]
 8015474:	445a      	add	r2, fp
 8015476:	eba1 010a 	sub.w	r1, r1, sl
 801547a:	4798      	blx	r3
 801547c:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 8015480:	42a6      	cmp	r6, r4
 8015482:	db02      	blt.n	801548a <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 8015484:	b00b      	add	sp, #44	@ 0x2c
 8015486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801548a:	9b00      	ldr	r3, [sp, #0]
 801548c:	9a04      	ldr	r2, [sp, #16]
 801548e:	42a2      	cmp	r2, r4
 8015490:	bf08      	it	eq
 8015492:	f04f 33ff 	moveq.w	r3, #4294967295
 8015496:	e7a7      	b.n	80153e8 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

08015498 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8015498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801549c:	6943      	ldr	r3, [r0, #20]
 801549e:	b0a4      	sub	sp, #144	@ 0x90
 80154a0:	4605      	mov	r5, r0
 80154a2:	460f      	mov	r7, r1
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d077      	beq.n	8015598 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x100>
 80154a8:	695c      	ldr	r4, [r3, #20]
 80154aa:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 80154ae:	2b01      	cmp	r3, #1
 80154b0:	dc04      	bgt.n	80154bc <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 80154b2:	2401      	movs	r4, #1
 80154b4:	4620      	mov	r0, r4
 80154b6:	b024      	add	sp, #144	@ 0x90
 80154b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154bc:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80154c0:	ae24      	add	r6, sp, #144	@ 0x90
 80154c2:	011b      	lsls	r3, r3, #4
 80154c4:	f846 3d74 	str.w	r3, [r6, #-116]!
 80154c8:	4630      	mov	r0, r6
 80154ca:	f7ff fc79 	bl	8014dc0 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80154ce:	8839      	ldrh	r1, [r7, #0]
 80154d0:	88ba      	ldrh	r2, [r7, #4]
 80154d2:	b280      	uxth	r0, r0
 80154d4:	6823      	ldr	r3, [r4, #0]
 80154d6:	440a      	add	r2, r1
 80154d8:	1a09      	subs	r1, r1, r0
 80154da:	4402      	add	r2, r0
 80154dc:	f10d 000a 	add.w	r0, sp, #10
 80154e0:	b209      	sxth	r1, r1
 80154e2:	9000      	str	r0, [sp, #0]
 80154e4:	b212      	sxth	r2, r2
 80154e6:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 80154ea:	4620      	mov	r0, r4
 80154ec:	ab02      	add	r3, sp, #8
 80154ee:	47c0      	blx	r8
 80154f0:	2800      	cmp	r0, #0
 80154f2:	d0de      	beq.n	80154b2 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 80154f4:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 80154f8:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 80154fc:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 8015500:	18ca      	adds	r2, r1, r3
 8015502:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8015506:	f8ad 100e 	strh.w	r1, [sp, #14]
 801550a:	4639      	mov	r1, r7
 801550c:	1a9b      	subs	r3, r3, r2
 801550e:	2200      	movs	r2, #0
 8015510:	f8ad 0010 	strh.w	r0, [sp, #16]
 8015514:	a803      	add	r0, sp, #12
 8015516:	f8ad 200c 	strh.w	r2, [sp, #12]
 801551a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801551e:	f7fc fb6f 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 8015522:	4629      	mov	r1, r5
 8015524:	a805      	add	r0, sp, #20
 8015526:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 8015528:	f003 ff64 	bl	80193f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801552c:	682b      	ldr	r3, [r5, #0]
 801552e:	4628      	mov	r0, r5
 8015530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015532:	4798      	blx	r3
 8015534:	ab03      	add	r3, sp, #12
 8015536:	9000      	str	r0, [sp, #0]
 8015538:	aa05      	add	r2, sp, #20
 801553a:	4639      	mov	r1, r7
 801553c:	4630      	mov	r0, r6
 801553e:	f013 ffdb 	bl	80294f8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8015542:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	@ 0x120
 8015546:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801554a:	2f00      	cmp	r7, #0
 801554c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8015550:	dd03      	ble.n	801555a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 8015552:	42bb      	cmp	r3, r7
 8015554:	da01      	bge.n	801555a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 8015556:	42ba      	cmp	r2, r7
 8015558:	da11      	bge.n	801557e <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xe6>
 801555a:	9200      	str	r2, [sp, #0]
 801555c:	4622      	mov	r2, r4
 801555e:	4631      	mov	r1, r6
 8015560:	4628      	mov	r0, r5
 8015562:	f7ff ff0f 	bl	8015384 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8015566:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801556a:	4630      	mov	r0, r6
 801556c:	f014 f858 	bl	8029620 <_ZN8touchgfx6Canvas6renderEh>
 8015570:	4b0b      	ldr	r3, [pc, #44]	@ (80155a0 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x108>)
 8015572:	4604      	mov	r4, r0
 8015574:	a80c      	add	r0, sp, #48	@ 0x30
 8015576:	9307      	str	r3, [sp, #28]
 8015578:	f000 fb1e 	bl	8015bb8 <_ZN8touchgfx7OutlineD1Ev>
 801557c:	e79a      	b.n	80154b4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 801557e:	1e7a      	subs	r2, r7, #1
 8015580:	4631      	mov	r1, r6
 8015582:	4628      	mov	r0, r5
 8015584:	b212      	sxth	r2, r2
 8015586:	9200      	str	r2, [sp, #0]
 8015588:	4622      	mov	r2, r4
 801558a:	f7ff fefb 	bl	8015384 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 801558e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8015592:	9300      	str	r3, [sp, #0]
 8015594:	463b      	mov	r3, r7
 8015596:	e7e1      	b.n	801555c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc4>
 8015598:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 801559c:	deff      	udf	#255	@ 0xff
 801559e:	bf00      	nop
 80155a0:	0802f230 	.word	0x0802f230

080155a4 <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 80155a4:	4770      	bx	lr

080155a6 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 80155a6:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80155a8:	b118      	cbz	r0, 80155b2 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 80155aa:	6803      	ldr	r3, [r0, #0]
 80155ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80155b0:	4718      	bx	r3
 80155b2:	4770      	bx	lr

080155b4 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 80155b4:	680b      	ldr	r3, [r1, #0]
 80155b6:	4608      	mov	r0, r1
 80155b8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80155bc:	4718      	bx	r3

080155be <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 80155be:	680b      	ldr	r3, [r1, #0]
 80155c0:	4608      	mov	r0, r1
 80155c2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80155c6:	4718      	bx	r3

080155c8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 80155c8:	4a38      	ldr	r2, [pc, #224]	@ (80156ac <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe4>)
 80155ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155ce:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 80155d0:	b087      	sub	sp, #28
 80155d2:	8812      	ldrh	r2, [r2, #0]
 80155d4:	4604      	mov	r4, r0
 80155d6:	4689      	mov	r9, r1
 80155d8:	429a      	cmp	r2, r3
 80155da:	d937      	bls.n	801564c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 80155dc:	4a34      	ldr	r2, [pc, #208]	@ (80156b0 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe8>)
 80155de:	6812      	ldr	r2, [r2, #0]
 80155e0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80155e4:	4b33      	ldr	r3, [pc, #204]	@ (80156b4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xec>)
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 80155ec:	f1b8 0f00 	cmp.w	r8, #0
 80155f0:	d02c      	beq.n	801564c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 80155f2:	6803      	ldr	r3, [r0, #0]
 80155f4:	6945      	ldr	r5, [r0, #20]
 80155f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155f8:	2d00      	cmp	r5, #0
 80155fa:	d052      	beq.n	80156a2 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xda>
 80155fc:	696f      	ldr	r7, [r5, #20]
 80155fe:	4798      	blx	r3
 8015600:	f897 502c 	ldrb.w	r5, [r7, #44]	@ 0x2c
 8015604:	fb15 f000 	smulbb	r0, r5, r0
 8015608:	b280      	uxth	r0, r0
 801560a:	1c45      	adds	r5, r0, #1
 801560c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8015610:	122d      	asrs	r5, r5, #8
 8015612:	d01b      	beq.n	801564c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8015614:	6823      	ldr	r3, [r4, #0]
 8015616:	4639      	mov	r1, r7
 8015618:	4620      	mov	r0, r4
 801561a:	b2ed      	uxtb	r5, r5
 801561c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015620:	4798      	blx	r3
 8015622:	6823      	ldr	r3, [r4, #0]
 8015624:	4606      	mov	r6, r0
 8015626:	4639      	mov	r1, r7
 8015628:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801562c:	4620      	mov	r0, r4
 801562e:	4798      	blx	r3
 8015630:	4683      	mov	fp, r0
 8015632:	b970      	cbnz	r0, 8015652 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8015634:	b96e      	cbnz	r6, 8015652 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8015636:	6823      	ldr	r3, [r4, #0]
 8015638:	4642      	mov	r2, r8
 801563a:	9600      	str	r6, [sp, #0]
 801563c:	4649      	mov	r1, r9
 801563e:	4620      	mov	r0, r4
 8015640:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8015644:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 8015648:	463b      	mov	r3, r7
 801564a:	47a8      	blx	r5
 801564c:	b007      	add	sp, #28
 801564e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015652:	2e00      	cmp	r6, #0
 8015654:	ddfa      	ble.n	801564c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8015656:	6823      	ldr	r3, [r4, #0]
 8015658:	4639      	mov	r1, r7
 801565a:	4620      	mov	r0, r4
 801565c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015660:	4798      	blx	r3
 8015662:	6823      	ldr	r3, [r4, #0]
 8015664:	4682      	mov	sl, r0
 8015666:	4639      	mov	r1, r7
 8015668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801566c:	4620      	mov	r0, r4
 801566e:	4798      	blx	r3
 8015670:	4582      	cmp	sl, r0
 8015672:	bfde      	ittt	le
 8015674:	4603      	movle	r3, r0
 8015676:	4650      	movle	r0, sl
 8015678:	469a      	movle	sl, r3
 801567a:	ebaa 0300 	sub.w	r3, sl, r0
 801567e:	fb93 f3f6 	sdiv	r3, r3, r6
 8015682:	2b64      	cmp	r3, #100	@ 0x64
 8015684:	dce2      	bgt.n	801564c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8015686:	6823      	ldr	r3, [r4, #0]
 8015688:	4642      	mov	r2, r8
 801568a:	9000      	str	r0, [sp, #0]
 801568c:	4649      	mov	r1, r9
 801568e:	4620      	mov	r0, r4
 8015690:	e9cd b503 	strd	fp, r5, [sp, #12]
 8015694:	e9cd a601 	strd	sl, r6, [sp, #4]
 8015698:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 801569c:	463b      	mov	r3, r7
 801569e:	47a8      	blx	r5
 80156a0:	e7d4      	b.n	801564c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 80156a2:	4798      	blx	r3
 80156a4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80156a8:	deff      	udf	#255	@ 0xff
 80156aa:	bf00      	nop
 80156ac:	20027a34 	.word	0x20027a34
 80156b0:	20027a30 	.word	0x20027a30
 80156b4:	20027a38 	.word	0x20027a38

080156b8 <_ZN8touchgfx12GraphLabelsYD1Ev>:
 80156b8:	4770      	bx	lr

080156ba <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 80156ba:	b538      	push	{r3, r4, r5, lr}
 80156bc:	680a      	ldr	r2, [r1, #0]
 80156be:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	@ 0x30
 80156c2:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 80156c6:	4608      	mov	r0, r1
 80156c8:	4790      	blx	r2
 80156ca:	4629      	mov	r1, r5
 80156cc:	4602      	mov	r2, r0
 80156ce:	4620      	mov	r0, r4
 80156d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156d4:	f7ff baba 	b.w	8014c4c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

080156d8 <_ZN8touchgfx12GraphLabelsYD0Ev>:
 80156d8:	b510      	push	{r4, lr}
 80156da:	4604      	mov	r4, r0
 80156dc:	214c      	movs	r1, #76	@ 0x4c
 80156de:	f014 fb6c 	bl	8029dba <_ZdlPvj>
 80156e2:	4620      	mov	r0, r4
 80156e4:	bd10      	pop	{r4, pc}

080156e6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 80156e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156ea:	b08d      	sub	sp, #52	@ 0x34
 80156ec:	4606      	mov	r6, r0
 80156ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80156f0:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 80156f4:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	@ 0x60
 80156f8:	e9cd 1207 	strd	r1, r2, [sp, #28]
 80156fc:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	@ 0x58
 8015700:	930a      	str	r3, [sp, #40]	@ 0x28
 8015702:	f1b9 0f00 	cmp.w	r9, #0
 8015706:	d117      	bne.n	8015738 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 8015708:	2f00      	cmp	r7, #0
 801570a:	dc7c      	bgt.n	8015806 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 801570c:	f1b8 0f00 	cmp.w	r8, #0
 8015710:	da01      	bge.n	8015716 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 8015712:	2f00      	cmp	r7, #0
 8015714:	d17a      	bne.n	801580c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8015716:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015718:	4630      	mov	r0, r6
 801571a:	6832      	ldr	r2, [r6, #0]
 801571c:	9318      	str	r3, [sp, #96]	@ 0x60
 801571e:	2300      	movs	r3, #0
 8015720:	9907      	ldr	r1, [sp, #28]
 8015722:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
 8015726:	f8d2 408c 	ldr.w	r4, [r2, #140]	@ 0x8c
 801572a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801572e:	46a4      	mov	ip, r4
 8015730:	b00d      	add	sp, #52	@ 0x34
 8015732:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015736:	4760      	bx	ip
 8015738:	fb97 f4f9 	sdiv	r4, r7, r9
 801573c:	1e63      	subs	r3, r4, #1
 801573e:	9305      	str	r3, [sp, #20]
 8015740:	f1ba 0f00 	cmp.w	sl, #0
 8015744:	d122      	bne.n	801578c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 8015746:	fb03 f509 	mul.w	r5, r3, r9
 801574a:	fb98 faf9 	sdiv	sl, r8, r9
 801574e:	f10a 0a02 	add.w	sl, sl, #2
 8015752:	9b05      	ldr	r3, [sp, #20]
 8015754:	459a      	cmp	sl, r3
 8015756:	d059      	beq.n	801580c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8015758:	42af      	cmp	r7, r5
 801575a:	dc5a      	bgt.n	8015812 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 801575c:	45a8      	cmp	r8, r5
 801575e:	da01      	bge.n	8015764 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 8015760:	42af      	cmp	r7, r5
 8015762:	db0e      	blt.n	8015782 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 8015764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015766:	4630      	mov	r0, r6
 8015768:	9905      	ldr	r1, [sp, #20]
 801576a:	9302      	str	r3, [sp, #8]
 801576c:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 801576e:	6832      	ldr	r2, [r6, #0]
 8015770:	434b      	muls	r3, r1
 8015772:	9907      	ldr	r1, [sp, #28]
 8015774:	e9cd 5300 	strd	r5, r3, [sp]
 8015778:	f8d2 b08c 	ldr.w	fp, [r2, #140]	@ 0x8c
 801577c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015780:	47d8      	blx	fp
 8015782:	9b05      	ldr	r3, [sp, #20]
 8015784:	444d      	add	r5, r9
 8015786:	3301      	adds	r3, #1
 8015788:	9305      	str	r3, [sp, #20]
 801578a:	e7e2      	b.n	8015752 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 801578c:	fb97 f3fa 	sdiv	r3, r7, sl
 8015790:	3b01      	subs	r3, #1
 8015792:	9306      	str	r3, [sp, #24]
 8015794:	9a06      	ldr	r2, [sp, #24]
 8015796:	fb98 f3fa 	sdiv	r3, r8, sl
 801579a:	fb02 fb0a 	mul.w	fp, r2, sl
 801579e:	9a05      	ldr	r2, [sp, #20]
 80157a0:	3302      	adds	r3, #2
 80157a2:	fb02 f509 	mul.w	r5, r2, r9
 80157a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80157a8:	45ab      	cmp	fp, r5
 80157aa:	dd1d      	ble.n	80157e8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 80157ac:	42af      	cmp	r7, r5
 80157ae:	dc08      	bgt.n	80157c2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 80157b0:	45a8      	cmp	r8, r5
 80157b2:	da08      	bge.n	80157c6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 80157b4:	42af      	cmp	r7, r5
 80157b6:	da06      	bge.n	80157c6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 80157b8:	9b05      	ldr	r3, [sp, #20]
 80157ba:	444d      	add	r5, r9
 80157bc:	3301      	adds	r3, #1
 80157be:	9305      	str	r3, [sp, #20]
 80157c0:	e7f2      	b.n	80157a8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 80157c2:	45a8      	cmp	r8, r5
 80157c4:	dcf8      	bgt.n	80157b8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 80157c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80157c8:	4630      	mov	r0, r6
 80157ca:	9905      	ldr	r1, [sp, #20]
 80157cc:	9302      	str	r3, [sp, #8]
 80157ce:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 80157d0:	6832      	ldr	r2, [r6, #0]
 80157d2:	434b      	muls	r3, r1
 80157d4:	9907      	ldr	r1, [sp, #28]
 80157d6:	e9cd 5300 	strd	r5, r3, [sp]
 80157da:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80157de:	461c      	mov	r4, r3
 80157e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80157e4:	47a0      	blx	r4
 80157e6:	e7e7      	b.n	80157b8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 80157e8:	45ab      	cmp	fp, r5
 80157ea:	db04      	blt.n	80157f6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 80157ec:	9b05      	ldr	r3, [sp, #20]
 80157ee:	444d      	add	r5, r9
 80157f0:	3301      	adds	r3, #1
 80157f2:	9305      	str	r3, [sp, #20]
 80157f4:	e7f8      	b.n	80157e8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 80157f6:	9b06      	ldr	r3, [sp, #24]
 80157f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80157fa:	3301      	adds	r3, #1
 80157fc:	4293      	cmp	r3, r2
 80157fe:	9306      	str	r3, [sp, #24]
 8015800:	d004      	beq.n	801580c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8015802:	44d3      	add	fp, sl
 8015804:	e7d0      	b.n	80157a8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 8015806:	f1b8 0f00 	cmp.w	r8, #0
 801580a:	dd84      	ble.n	8015716 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 801580c:	b00d      	add	sp, #52	@ 0x34
 801580e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015812:	45a8      	cmp	r8, r5
 8015814:	dcb5      	bgt.n	8015782 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 8015816:	e7a5      	b.n	8015764 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

08015818 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 8015818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801581c:	f1b3 0900 	subs.w	r9, r3, #0
 8015820:	460d      	mov	r5, r1
 8015822:	4690      	mov	r8, r2
 8015824:	9f08      	ldr	r7, [sp, #32]
 8015826:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 801582a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801582c:	da18      	bge.n	8015860 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 801582e:	2a01      	cmp	r2, #1
 8015830:	dd16      	ble.n	8015860 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 8015832:	232d      	movs	r3, #45	@ 0x2d
 8015834:	f1c9 0900 	rsb	r9, r9, #0
 8015838:	2001      	movs	r0, #1
 801583a:	800b      	strh	r3, [r1, #0]
 801583c:	2f00      	cmp	r7, #0
 801583e:	d111      	bne.n	8015864 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 8015840:	2302      	movs	r3, #2
 8015842:	eba8 0100 	sub.w	r1, r8, r0
 8015846:	4a26      	ldr	r2, [pc, #152]	@ (80158e0 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 8015848:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 801584c:	b289      	uxth	r1, r1
 801584e:	fb96 f3f3 	sdiv	r3, r6, r3
 8015852:	444b      	add	r3, r9
 8015854:	fb93 f3f6 	sdiv	r3, r3, r6
 8015858:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801585c:	f006 b834 	b.w	801b8c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8015860:	2000      	movs	r0, #0
 8015862:	e7eb      	b.n	801583c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 8015864:	dd39      	ble.n	80158da <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 8015866:	eba8 0100 	sub.w	r1, r8, r0
 801586a:	4a1d      	ldr	r2, [pc, #116]	@ (80158e0 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 801586c:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8015870:	f108 38ff 	add.w	r8, r8, #4294967295
 8015874:	b289      	uxth	r1, r1
 8015876:	fb99 f4f6 	sdiv	r4, r9, r6
 801587a:	4623      	mov	r3, r4
 801587c:	f006 f824 	bl	801b8c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8015880:	4628      	mov	r0, r5
 8015882:	f005 fcb5 	bl	801b1f0 <_ZN8touchgfx7Unicode6strlenEPKt>
 8015886:	4580      	cmp	r8, r0
 8015888:	dd27      	ble.n	80158da <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 801588a:	f04f 0e02 	mov.w	lr, #2
 801588e:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 8015892:	fb06 9314 	mls	r3, r6, r4, r9
 8015896:	3001      	adds	r0, #1
 8015898:	2200      	movs	r2, #0
 801589a:	f04f 090a 	mov.w	r9, #10
 801589e:	f107 3aff 	add.w	sl, r7, #4294967295
 80158a2:	fb96 fefe 	sdiv	lr, r6, lr
 80158a6:	4580      	cmp	r8, r0
 80158a8:	4684      	mov	ip, r0
 80158aa:	dd13      	ble.n	80158d4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 80158ac:	fb09 f303 	mul.w	r3, r9, r3
 80158b0:	4592      	cmp	sl, r2
 80158b2:	f102 0201 	add.w	r2, r2, #1
 80158b6:	f100 0c01 	add.w	ip, r0, #1
 80158ba:	bf08      	it	eq
 80158bc:	4473      	addeq	r3, lr
 80158be:	4297      	cmp	r7, r2
 80158c0:	fb93 f4f6 	sdiv	r4, r3, r6
 80158c4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80158c8:	fb06 3314 	mls	r3, r6, r4, r3
 80158cc:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 80158d0:	4660      	mov	r0, ip
 80158d2:	d1e8      	bne.n	80158a6 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 80158d4:	2300      	movs	r3, #0
 80158d6:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 80158da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158de:	bf00      	nop
 80158e0:	0802ecf0 	.word	0x0802ecf0

080158e4 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 80158e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158e8:	b09b      	sub	sp, #108	@ 0x6c
 80158ea:	4698      	mov	r8, r3
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	4604      	mov	r4, r0
 80158f0:	ae1a      	add	r6, sp, #104	@ 0x68
 80158f2:	9104      	str	r1, [sp, #16]
 80158f4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80158f8:	4640      	mov	r0, r8
 80158fa:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80158fc:	4617      	mov	r7, r2
 80158fe:	4798      	blx	r3
 8015900:	f846 0d28 	str.w	r0, [r6, #-40]!
 8015904:	4630      	mov	r0, r6
 8015906:	f7fe ff81 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801590a:	f8b8 3114 	ldrh.w	r3, [r8, #276]	@ 0x114
 801590e:	1ac0      	subs	r0, r0, r3
 8015910:	b200      	sxth	r0, r0
 8015912:	2800      	cmp	r0, #0
 8015914:	f2c0 80ba 	blt.w	8015a8c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8015918:	f8b8 211a 	ldrh.w	r2, [r8, #282]	@ 0x11a
 801591c:	441a      	add	r2, r3
 801591e:	f8b8 3042 	ldrh.w	r3, [r8, #66]	@ 0x42
 8015922:	1a9b      	subs	r3, r3, r2
 8015924:	b21b      	sxth	r3, r3
 8015926:	4298      	cmp	r0, r3
 8015928:	f280 80b0 	bge.w	8015a8c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 801592c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801592e:	2214      	movs	r2, #20
 8015930:	4631      	mov	r1, r6
 8015932:	4620      	mov	r0, r4
 8015934:	9302      	str	r3, [sp, #8]
 8015936:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 801593a:	9301      	str	r3, [sp, #4]
 801593c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8015940:	9300      	str	r3, [sp, #0]
 8015942:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8015944:	f7ff ff68 	bl	8015818 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 8015948:	4b55      	ldr	r3, [pc, #340]	@ (8015aa0 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1bc>)
 801594a:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 801594c:	6818      	ldr	r0, [r3, #0]
 801594e:	f7f3 fff5 	bl	800993c <_ZNK8touchgfx5Texts7getTextEt>
 8015952:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8015956:	4681      	mov	r9, r0
 8015958:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	f040 8098 	bne.w	8015a92 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1ae>
 8015962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015964:	4638      	mov	r0, r7
 8015966:	4798      	blx	r3
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	4605      	mov	r5, r0
 801596c:	4632      	mov	r2, r6
 801596e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015970:	4649      	mov	r1, r9
 8015972:	4638      	mov	r0, r7
 8015974:	4798      	blx	r3
 8015976:	fb15 f500 	smulbb	r5, r5, r0
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	4632      	mov	r2, r6
 801597e:	b2ad      	uxth	r5, r5
 8015980:	4649      	mov	r1, r9
 8015982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015984:	4638      	mov	r0, r7
 8015986:	4798      	blx	r3
 8015988:	4405      	add	r5, r0
 801598a:	b22d      	sxth	r5, r5
 801598c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8015990:	2002      	movs	r0, #2
 8015992:	f8d8 2000 	ldr.w	r2, [r8]
 8015996:	f10d 0a68 	add.w	sl, sp, #104	@ 0x68
 801599a:	2b01      	cmp	r3, #1
 801599c:	f8b8 30c6 	ldrh.w	r3, [r8, #198]	@ 0xc6
 80159a0:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 80159a4:	bf88      	it	hi
 80159a6:	f105 0b01 	addhi.w	fp, r5, #1
 80159aa:	9305      	str	r3, [sp, #20]
 80159ac:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80159ae:	bf8c      	ite	hi
 80159b0:	fb9b fbf0 	sdivhi	fp, fp, r0
 80159b4:	fb95 fbf0 	sdivls	fp, r5, r0
 80159b8:	4640      	mov	r0, r8
 80159ba:	bf88      	it	hi
 80159bc:	fa0f fb8b 	sxthhi.w	fp, fp
 80159c0:	4790      	blx	r2
 80159c2:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 80159c6:	4650      	mov	r0, sl
 80159c8:	f04f 0800 	mov.w	r8, #0
 80159cc:	f7fe ff1e 	bl	801480c <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80159d0:	9b05      	ldr	r3, [sp, #20]
 80159d2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80159d6:	4418      	add	r0, r3
 80159d8:	f8ad 5022 	strh.w	r5, [sp, #34]	@ 0x22
 80159dc:	ad07      	add	r5, sp, #28
 80159de:	f8ad 801c 	strh.w	r8, [sp, #28]
 80159e2:	eba0 0b0b 	sub.w	fp, r0, fp
 80159e6:	f8ad 1020 	strh.w	r1, [sp, #32]
 80159ea:	f8ad b01e 	strh.w	fp, [sp, #30]
 80159ee:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 80159f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80159f6:	e88b 0003 	stmia.w	fp, {r0, r1}
 80159fa:	9904      	ldr	r1, [sp, #16]
 80159fc:	4658      	mov	r0, fp
 80159fe:	f7fc f8ff 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 8015a02:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8015a06:	4543      	cmp	r3, r8
 8015a08:	dd40      	ble.n	8015a8c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8015a0a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8015a0e:	4543      	cmp	r3, r8
 8015a10:	dd3c      	ble.n	8015a8c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8015a12:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8015a16:	4620      	mov	r0, r4
 8015a18:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015a1c:	1a5b      	subs	r3, r3, r1
 8015a1e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8015a22:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8015a26:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8015a2a:	1a5b      	subs	r3, r3, r1
 8015a2c:	4629      	mov	r1, r5
 8015a2e:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8015a32:	6823      	ldr	r3, [r4, #0]
 8015a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a36:	4798      	blx	r3
 8015a38:	4b1a      	ldr	r3, [pc, #104]	@ (8015aa4 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1c0>)
 8015a3a:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 8015a42:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8015a46:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015a48:	785b      	ldrb	r3, [r3, #1]
 8015a4a:	910d      	str	r1, [sp, #52]	@ 0x34
 8015a4c:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 8015a50:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015a54:	970b      	str	r7, [sp, #44]	@ 0x2c
 8015a56:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
 8015a5a:	f89d 3098 	ldrb.w	r3, [sp, #152]	@ 0x98
 8015a5e:	f88d c030 	strb.w	ip, [sp, #48]	@ 0x30
 8015a62:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8015a66:	f88d 0032 	strb.w	r0, [sp, #50]	@ 0x32
 8015a6a:	f8ad 8038 	strh.w	r8, [sp, #56]	@ 0x38
 8015a6e:	f88d 803b 	strb.w	r8, [sp, #59]	@ 0x3b
 8015a72:	f88d 803c 	strb.w	r8, [sp, #60]	@ 0x3c
 8015a76:	f7ef f953 	bl	8004d20 <_ZN8touchgfx3HAL3lcdEv>
 8015a7a:	465b      	mov	r3, fp
 8015a7c:	e9cd 6802 	strd	r6, r8, [sp, #8]
 8015a80:	e9cd a900 	strd	sl, r9, [sp]
 8015a84:	e895 0006 	ldmia.w	r5, {r1, r2}
 8015a88:	f7f3 ff0a 	bl	80098a0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015a8c:	b01b      	add	sp, #108	@ 0x6c
 8015a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a92:	4601      	mov	r1, r0
 8015a94:	699b      	ldr	r3, [r3, #24]
 8015a96:	4632      	mov	r2, r6
 8015a98:	4638      	mov	r0, r7
 8015a9a:	4798      	blx	r3
 8015a9c:	b205      	sxth	r5, r0
 8015a9e:	e775      	b.n	801598c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 8015aa0:	20027a3c 	.word	0x20027a3c
 8015aa4:	20027a30 	.word	0x20027a30

08015aa8 <_ZN8touchgfx15GraphScrollData5clearEv>:
 8015aa8:	b510      	push	{r4, lr}
 8015aaa:	4604      	mov	r4, r0
 8015aac:	f7fe fd4b 	bl	8014546 <_ZN8touchgfx17AbstractDataGraph5clearEv>
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
 8015ab6:	bd10      	pop	{r4, pc}

08015ab8 <_ZN8touchgfx15GraphScrollData14beforeAddValueEv>:
 8015ab8:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	@ 0x11e
 8015abc:	f9b0 311c 	ldrsh.w	r3, [r0, #284]	@ 0x11c
 8015ac0:	429a      	cmp	r2, r3
 8015ac2:	d101      	bne.n	8015ac8 <_ZN8touchgfx15GraphScrollData14beforeAddValueEv+0x10>
 8015ac4:	f7fe bf7b 	b.w	80149be <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8015ac8:	4770      	bx	lr

08015aca <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs>:
 8015aca:	b538      	push	{r3, r4, r5, lr}
 8015acc:	f9b0 411c 	ldrsh.w	r4, [r0, #284]	@ 0x11c
 8015ad0:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	@ 0x11e
 8015ad4:	42a5      	cmp	r5, r4
 8015ad6:	da04      	bge.n	8015ae2 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x18>
 8015ad8:	6803      	ldr	r3, [r0, #0]
 8015ada:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8015ade:	4798      	blx	r3
 8015ae0:	bd38      	pop	{r3, r4, r5, pc}
 8015ae2:	f8d0 0148 	ldr.w	r0, [r0, #328]	@ 0x148
 8015ae6:	4408      	add	r0, r1
 8015ae8:	1b00      	subs	r0, r0, r4
 8015aea:	e7f9      	b.n	8015ae0 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x16>

08015aec <_ZN8touchgfx15GraphScrollData8addValueEi>:
 8015aec:	b570      	push	{r4, r5, r6, lr}
 8015aee:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	@ 0x14c
 8015af2:	4604      	mov	r4, r0
 8015af4:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 8015af8:	1c6b      	adds	r3, r5, #1
 8015afa:	f9b0 611e 	ldrsh.w	r6, [r0, #286]	@ 0x11e
 8015afe:	b21b      	sxth	r3, r3
 8015b00:	42ae      	cmp	r6, r5
 8015b02:	fb93 f0f2 	sdiv	r0, r3, r2
 8015b06:	bf08      	it	eq
 8015b08:	f8a4 311e 	strheq.w	r3, [r4, #286]	@ 0x11e
 8015b0c:	4296      	cmp	r6, r2
 8015b0e:	fb02 3010 	mls	r0, r2, r0, r3
 8015b12:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
 8015b16:	f8a4 014c 	strh.w	r0, [r4, #332]	@ 0x14c
 8015b1a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8015b1e:	d108      	bne.n	8015b32 <_ZN8touchgfx15GraphScrollData8addValueEi+0x46>
 8015b20:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8015b24:	f003 fbcb 	bl	80192be <_ZNK8touchgfx8Drawable10invalidateEv>
 8015b28:	4620      	mov	r0, r4
 8015b2a:	f7fe ff48 	bl	80149be <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8015b2e:	4628      	mov	r0, r5
 8015b30:	bd70      	pop	{r4, r5, r6, pc}
 8015b32:	4629      	mov	r1, r5
 8015b34:	4620      	mov	r0, r4
 8015b36:	f7fe ff1a 	bl	801496e <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8015b3a:	e7f8      	b.n	8015b2e <_ZN8touchgfx15GraphScrollData8addValueEi+0x42>

08015b3c <_ZNK8touchgfx3Box12getSolidRectEv>:
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	8083      	strh	r3, [r0, #4]
 8015b40:	80c3      	strh	r3, [r0, #6]
 8015b42:	8003      	strh	r3, [r0, #0]
 8015b44:	8043      	strh	r3, [r0, #2]
 8015b46:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8015b4a:	2bff      	cmp	r3, #255	@ 0xff
 8015b4c:	bf01      	itttt	eq
 8015b4e:	890b      	ldrheq	r3, [r1, #8]
 8015b50:	8083      	strheq	r3, [r0, #4]
 8015b52:	894b      	ldrheq	r3, [r1, #10]
 8015b54:	80c3      	strheq	r3, [r0, #6]
 8015b56:	4770      	bx	lr

08015b58 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8015b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015b5a:	4604      	mov	r4, r0
 8015b5c:	466b      	mov	r3, sp
 8015b5e:	6808      	ldr	r0, [r1, #0]
 8015b60:	6849      	ldr	r1, [r1, #4]
 8015b62:	c303      	stmia	r3!, {r0, r1}
 8015b64:	6823      	ldr	r3, [r4, #0]
 8015b66:	4669      	mov	r1, sp
 8015b68:	4620      	mov	r0, r4
 8015b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b6c:	4798      	blx	r3
 8015b6e:	4b08      	ldr	r3, [pc, #32]	@ (8015b90 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8015b76:	b10a      	cbz	r2, 8015b7c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8015b78:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8015b7a:	b900      	cbnz	r0, 8015b7e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8015b7c:	6898      	ldr	r0, [r3, #8]
 8015b7e:	6803      	ldr	r3, [r0, #0]
 8015b80:	4669      	mov	r1, sp
 8015b82:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8015b84:	6a1d      	ldr	r5, [r3, #32]
 8015b86:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8015b8a:	47a8      	blx	r5
 8015b8c:	b003      	add	sp, #12
 8015b8e:	bd30      	pop	{r4, r5, pc}
 8015b90:	200279d8 	.word	0x200279d8

08015b94 <_ZN8touchgfx3BoxD1Ev>:
 8015b94:	4770      	bx	lr

08015b96 <_ZN8touchgfx3BoxD0Ev>:
 8015b96:	b510      	push	{r4, lr}
 8015b98:	4604      	mov	r4, r0
 8015b9a:	212c      	movs	r1, #44	@ 0x2c
 8015b9c:	f014 f90d 	bl	8029dba <_ZdlPvj>
 8015ba0:	4620      	mov	r0, r4
 8015ba2:	bd10      	pop	{r4, pc}

08015ba4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8015ba4:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8015ba8:	b12a      	cbz	r2, 8015bb6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015baa:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8015bae:	b112      	cbz	r2, 8015bb6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015bb0:	6803      	ldr	r3, [r0, #0]
 8015bb2:	695b      	ldr	r3, [r3, #20]
 8015bb4:	4718      	bx	r3
 8015bb6:	4770      	bx	lr

08015bb8 <_ZN8touchgfx7OutlineD1Ev>:
 8015bb8:	4770      	bx	lr

08015bba <_ZN8touchgfx7OutlineD0Ev>:
 8015bba:	b510      	push	{r4, lr}
 8015bbc:	4604      	mov	r4, r0
 8015bbe:	2130      	movs	r1, #48	@ 0x30
 8015bc0:	f014 f8fb 	bl	8029dba <_ZdlPvj>
 8015bc4:	4620      	mov	r0, r4
 8015bc6:	bd10      	pop	{r4, pc}

08015bc8 <_ZN8touchgfx7Outline5resetEv>:
 8015bc8:	b510      	push	{r4, lr}
 8015bca:	4604      	mov	r4, r0
 8015bcc:	f000 fe86 	bl	80168dc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8015bd0:	60e0      	str	r0, [r4, #12]
 8015bd2:	f000 fe89 	bl	80168e8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8015bd6:	68e3      	ldr	r3, [r4, #12]
 8015bd8:	08c0      	lsrs	r0, r0, #3
 8015bda:	2200      	movs	r2, #0
 8015bdc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8015be0:	6123      	str	r3, [r4, #16]
 8015be2:	3801      	subs	r0, #1
 8015be4:	60a2      	str	r2, [r4, #8]
 8015be6:	6060      	str	r0, [r4, #4]
 8015be8:	8019      	strh	r1, [r3, #0]
 8015bea:	8059      	strh	r1, [r3, #2]
 8015bec:	809a      	strh	r2, [r3, #4]
 8015bee:	80da      	strh	r2, [r3, #6]
 8015bf0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8015bf2:	f023 0301 	bic.w	r3, r3, #1
 8015bf6:	f043 0302 	orr.w	r3, r3, #2
 8015bfa:	6263      	str	r3, [r4, #36]	@ 0x24
 8015bfc:	bd10      	pop	{r4, pc}
	...

08015c00 <_ZN8touchgfx7OutlineC1Ev>:
 8015c00:	4b0a      	ldr	r3, [pc, #40]	@ (8015c2c <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8015c02:	b510      	push	{r4, lr}
 8015c04:	6003      	str	r3, [r0, #0]
 8015c06:	2300      	movs	r3, #0
 8015c08:	4604      	mov	r4, r0
 8015c0a:	6243      	str	r3, [r0, #36]	@ 0x24
 8015c0c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8015c10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015c14:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8015c18:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8015c1c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015c20:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8015c24:	f7ff ffd0 	bl	8015bc8 <_ZN8touchgfx7Outline5resetEv>
 8015c28:	4620      	mov	r0, r4
 8015c2a:	bd10      	pop	{r4, pc}
 8015c2c:	0802ee04 	.word	0x0802ee04

08015c30 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8015c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c34:	b093      	sub	sp, #76	@ 0x4c
 8015c36:	1156      	asrs	r6, r2, #5
 8015c38:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8015c3a:	9305      	str	r3, [sp, #20]
 8015c3c:	1153      	asrs	r3, r2, #5
 8015c3e:	f004 051f 	and.w	r5, r4, #31
 8015c42:	9303      	str	r3, [sp, #12]
 8015c44:	1163      	asrs	r3, r4, #5
 8015c46:	9504      	str	r5, [sp, #16]
 8015c48:	1165      	asrs	r5, r4, #5
 8015c4a:	9306      	str	r3, [sp, #24]
 8015c4c:	f002 031f 	and.w	r3, r2, #31
 8015c50:	42ae      	cmp	r6, r5
 8015c52:	f040 80f4 	bne.w	8015e3e <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8015c56:	9c04      	ldr	r4, [sp, #16]
 8015c58:	9a05      	ldr	r2, [sp, #20]
 8015c5a:	42a3      	cmp	r3, r4
 8015c5c:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8015c60:	6902      	ldr	r2, [r0, #16]
 8015c62:	d125      	bne.n	8015cb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8015c64:	f9b2 3000 	ldrsh.w	r3, [r2]
 8015c68:	459e      	cmp	lr, r3
 8015c6a:	d103      	bne.n	8015c74 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8015c6c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8015c70:	429e      	cmp	r6, r3
 8015c72:	d035      	beq.n	8015ce0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015c74:	88d1      	ldrh	r1, [r2, #6]
 8015c76:	8893      	ldrh	r3, [r2, #4]
 8015c78:	430b      	orrs	r3, r1
 8015c7a:	d010      	beq.n	8015c9e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8015c7c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	db0c      	blt.n	8015c9e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8015c84:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8015c86:	428b      	cmp	r3, r1
 8015c88:	da09      	bge.n	8015c9e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8015c8a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8015c8e:	428b      	cmp	r3, r1
 8015c90:	f103 0301 	add.w	r3, r3, #1
 8015c94:	bf38      	it	cc
 8015c96:	3208      	addcc	r2, #8
 8015c98:	6083      	str	r3, [r0, #8]
 8015c9a:	bf38      	it	cc
 8015c9c:	6102      	strcc	r2, [r0, #16]
 8015c9e:	6903      	ldr	r3, [r0, #16]
 8015ca0:	9a03      	ldr	r2, [sp, #12]
 8015ca2:	f8a3 e000 	strh.w	lr, [r3]
 8015ca6:	805a      	strh	r2, [r3, #2]
 8015ca8:	2200      	movs	r2, #0
 8015caa:	809a      	strh	r2, [r3, #4]
 8015cac:	80da      	strh	r2, [r3, #6]
 8015cae:	e017      	b.n	8015ce0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015cb0:	9c05      	ldr	r4, [sp, #20]
 8015cb2:	114e      	asrs	r6, r1, #5
 8015cb4:	f001 0c1f 	and.w	ip, r1, #31
 8015cb8:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8015cbc:	f004 041f 	and.w	r4, r4, #31
 8015cc0:	4576      	cmp	r6, lr
 8015cc2:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8015cc6:	9402      	str	r4, [sp, #8]
 8015cc8:	9c04      	ldr	r4, [sp, #16]
 8015cca:	eba4 0403 	sub.w	r4, r4, r3
 8015cce:	d10a      	bne.n	8015ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8015cd0:	9b02      	ldr	r3, [sp, #8]
 8015cd2:	44a0      	add	r8, r4
 8015cd4:	449c      	add	ip, r3
 8015cd6:	f8a2 8004 	strh.w	r8, [r2, #4]
 8015cda:	fb04 a40c 	mla	r4, r4, ip, sl
 8015cde:	80d4      	strh	r4, [r2, #6]
 8015ce0:	b013      	add	sp, #76	@ 0x4c
 8015ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ce6:	9d05      	ldr	r5, [sp, #20]
 8015ce8:	1a69      	subs	r1, r5, r1
 8015cea:	bf51      	iteee	pl
 8015cec:	f1cc 0520 	rsbpl	r5, ip, #32
 8015cf0:	fb04 f40c 	mulmi.w	r4, r4, ip
 8015cf4:	4249      	negmi	r1, r1
 8015cf6:	2500      	movmi	r5, #0
 8015cf8:	bf5d      	ittte	pl
 8015cfa:	436c      	mulpl	r4, r5
 8015cfc:	2520      	movpl	r5, #32
 8015cfe:	f04f 0901 	movpl.w	r9, #1
 8015d02:	f04f 39ff 	movmi.w	r9, #4294967295
 8015d06:	9501      	str	r5, [sp, #4]
 8015d08:	9f01      	ldr	r7, [sp, #4]
 8015d0a:	444e      	add	r6, r9
 8015d0c:	fb94 f5f1 	sdiv	r5, r4, r1
 8015d10:	fb01 4415 	mls	r4, r1, r5, r4
 8015d14:	44bc      	add	ip, r7
 8015d16:	2c00      	cmp	r4, #0
 8015d18:	bfbc      	itt	lt
 8015d1a:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8015d1e:	1864      	addlt	r4, r4, r1
 8015d20:	44a8      	add	r8, r5
 8015d22:	fb05 ac0c 	mla	ip, r5, ip, sl
 8015d26:	f8a2 8004 	strh.w	r8, [r2, #4]
 8015d2a:	f8a2 c006 	strh.w	ip, [r2, #6]
 8015d2e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015d32:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8015d36:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8015d3a:	ea58 0202 	orrs.w	r2, r8, r2
 8015d3e:	d011      	beq.n	8015d64 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8015d40:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8015d44:	f1b8 0f00 	cmp.w	r8, #0
 8015d48:	db0c      	blt.n	8015d64 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8015d4a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8015d4c:	4590      	cmp	r8, r2
 8015d4e:	da09      	bge.n	8015d64 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8015d50:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8015d54:	4590      	cmp	r8, r2
 8015d56:	bf3c      	itt	cc
 8015d58:	f10c 0208 	addcc.w	r2, ip, #8
 8015d5c:	6102      	strcc	r2, [r0, #16]
 8015d5e:	f108 0201 	add.w	r2, r8, #1
 8015d62:	6082      	str	r2, [r0, #8]
 8015d64:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015d68:	2700      	movs	r7, #0
 8015d6a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8015d6e:	45b6      	cmp	lr, r6
 8015d70:	f8ac 6000 	strh.w	r6, [ip]
 8015d74:	442b      	add	r3, r5
 8015d76:	f8ac 2002 	strh.w	r2, [ip, #2]
 8015d7a:	f8ac 7004 	strh.w	r7, [ip, #4]
 8015d7e:	f8ac 7006 	strh.w	r7, [ip, #6]
 8015d82:	d04b      	beq.n	8015e1c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8015d84:	9f04      	ldr	r7, [sp, #16]
 8015d86:	1a64      	subs	r4, r4, r1
 8015d88:	f04f 0a00 	mov.w	sl, #0
 8015d8c:	1aff      	subs	r7, r7, r3
 8015d8e:	443d      	add	r5, r7
 8015d90:	016d      	lsls	r5, r5, #5
 8015d92:	fb95 f8f1 	sdiv	r8, r5, r1
 8015d96:	fb01 5518 	mls	r5, r1, r8, r5
 8015d9a:	2d00      	cmp	r5, #0
 8015d9c:	bfbc      	itt	lt
 8015d9e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8015da2:	186d      	addlt	r5, r5, r1
 8015da4:	f108 0701 	add.w	r7, r8, #1
 8015da8:	9703      	str	r7, [sp, #12]
 8015daa:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015dae:	1964      	adds	r4, r4, r5
 8015db0:	444e      	add	r6, r9
 8015db2:	bf54      	ite	pl
 8015db4:	9f03      	ldrpl	r7, [sp, #12]
 8015db6:	4647      	movmi	r7, r8
 8015db8:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8015dbc:	bf58      	it	pl
 8015dbe:	1a64      	subpl	r4, r4, r1
 8015dc0:	443b      	add	r3, r7
 8015dc2:	44bb      	add	fp, r7
 8015dc4:	f8ac b004 	strh.w	fp, [ip, #4]
 8015dc8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015dcc:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8015dd0:	f8ac b006 	strh.w	fp, [ip, #6]
 8015dd4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015dd8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015ddc:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015de0:	ea5b 0707 	orrs.w	r7, fp, r7
 8015de4:	d011      	beq.n	8015e0a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8015de6:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8015dea:	f1bb 0f00 	cmp.w	fp, #0
 8015dee:	db0c      	blt.n	8015e0a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8015df0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8015df2:	45bb      	cmp	fp, r7
 8015df4:	da09      	bge.n	8015e0a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8015df6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8015dfa:	45bb      	cmp	fp, r7
 8015dfc:	bf3c      	itt	cc
 8015dfe:	f10c 0708 	addcc.w	r7, ip, #8
 8015e02:	6107      	strcc	r7, [r0, #16]
 8015e04:	f10b 0701 	add.w	r7, fp, #1
 8015e08:	6087      	str	r7, [r0, #8]
 8015e0a:	6907      	ldr	r7, [r0, #16]
 8015e0c:	45b6      	cmp	lr, r6
 8015e0e:	803e      	strh	r6, [r7, #0]
 8015e10:	807a      	strh	r2, [r7, #2]
 8015e12:	f8a7 a004 	strh.w	sl, [r7, #4]
 8015e16:	f8a7 a006 	strh.w	sl, [r7, #6]
 8015e1a:	d1c6      	bne.n	8015daa <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8015e1c:	9a04      	ldr	r2, [sp, #16]
 8015e1e:	1ad3      	subs	r3, r2, r3
 8015e20:	6902      	ldr	r2, [r0, #16]
 8015e22:	8891      	ldrh	r1, [r2, #4]
 8015e24:	88d6      	ldrh	r6, [r2, #6]
 8015e26:	4419      	add	r1, r3
 8015e28:	8091      	strh	r1, [r2, #4]
 8015e2a:	9902      	ldr	r1, [sp, #8]
 8015e2c:	f101 0c20 	add.w	ip, r1, #32
 8015e30:	9901      	ldr	r1, [sp, #4]
 8015e32:	ebac 0c01 	sub.w	ip, ip, r1
 8015e36:	fb03 630c 	mla	r3, r3, ip, r6
 8015e3a:	80d3      	strh	r3, [r2, #6]
 8015e3c:	e750      	b.n	8015ce0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015e3e:	9d05      	ldr	r5, [sp, #20]
 8015e40:	1aa2      	subs	r2, r4, r2
 8015e42:	eba5 0501 	sub.w	r5, r5, r1
 8015e46:	9202      	str	r2, [sp, #8]
 8015e48:	9508      	str	r5, [sp, #32]
 8015e4a:	f140 8128 	bpl.w	801609e <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8015e4e:	9a03      	ldr	r2, [sp, #12]
 8015e50:	2a00      	cmp	r2, #0
 8015e52:	f6ff af45 	blt.w	8015ce0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015e56:	9a02      	ldr	r2, [sp, #8]
 8015e58:	f04f 34ff 	mov.w	r4, #4294967295
 8015e5c:	4252      	negs	r2, r2
 8015e5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015e60:	2400      	movs	r4, #0
 8015e62:	9202      	str	r2, [sp, #8]
 8015e64:	9a06      	ldr	r2, [sp, #24]
 8015e66:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8015e6a:	9206      	str	r2, [sp, #24]
 8015e6c:	462a      	mov	r2, r5
 8015e6e:	435a      	muls	r2, r3
 8015e70:	9401      	str	r4, [sp, #4]
 8015e72:	9c02      	ldr	r4, [sp, #8]
 8015e74:	9d02      	ldr	r5, [sp, #8]
 8015e76:	fb92 f4f4 	sdiv	r4, r2, r4
 8015e7a:	fb05 2214 	mls	r2, r5, r4, r2
 8015e7e:	2a00      	cmp	r2, #0
 8015e80:	9207      	str	r2, [sp, #28]
 8015e82:	bfbc      	itt	lt
 8015e84:	1952      	addlt	r2, r2, r5
 8015e86:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8015e8a:	6905      	ldr	r5, [r0, #16]
 8015e8c:	bfb8      	it	lt
 8015e8e:	9207      	strlt	r2, [sp, #28]
 8015e90:	eb04 0901 	add.w	r9, r4, r1
 8015e94:	9a01      	ldr	r2, [sp, #4]
 8015e96:	ea4f 1669 	mov.w	r6, r9, asr #5
 8015e9a:	429a      	cmp	r2, r3
 8015e9c:	f040 8111 	bne.w	80160c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8015ea0:	f9b5 3000 	ldrsh.w	r3, [r5]
 8015ea4:	429e      	cmp	r6, r3
 8015ea6:	d104      	bne.n	8015eb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8015ea8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8015eac:	9a03      	ldr	r2, [sp, #12]
 8015eae:	429a      	cmp	r2, r3
 8015eb0:	d01b      	beq.n	8015eea <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8015eb2:	88ea      	ldrh	r2, [r5, #6]
 8015eb4:	88ab      	ldrh	r3, [r5, #4]
 8015eb6:	4313      	orrs	r3, r2
 8015eb8:	d010      	beq.n	8015edc <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8015eba:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015ebe:	2a00      	cmp	r2, #0
 8015ec0:	db0c      	blt.n	8015edc <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8015ec2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	da09      	bge.n	8015edc <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8015ec8:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8015ecc:	429a      	cmp	r2, r3
 8015ece:	f102 0201 	add.w	r2, r2, #1
 8015ed2:	bf38      	it	cc
 8015ed4:	3508      	addcc	r5, #8
 8015ed6:	6082      	str	r2, [r0, #8]
 8015ed8:	bf38      	it	cc
 8015eda:	6105      	strcc	r5, [r0, #16]
 8015edc:	6903      	ldr	r3, [r0, #16]
 8015ede:	9a03      	ldr	r2, [sp, #12]
 8015ee0:	801e      	strh	r6, [r3, #0]
 8015ee2:	805a      	strh	r2, [r3, #2]
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	809a      	strh	r2, [r3, #4]
 8015ee8:	80da      	strh	r2, [r3, #6]
 8015eea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015eec:	9a03      	ldr	r2, [sp, #12]
 8015eee:	6901      	ldr	r1, [r0, #16]
 8015ef0:	441a      	add	r2, r3
 8015ef2:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015ef6:	42b3      	cmp	r3, r6
 8015ef8:	d103      	bne.n	8015f02 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8015efa:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8015efe:	429a      	cmp	r2, r3
 8015f00:	d01a      	beq.n	8015f38 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8015f02:	88cc      	ldrh	r4, [r1, #6]
 8015f04:	888b      	ldrh	r3, [r1, #4]
 8015f06:	4323      	orrs	r3, r4
 8015f08:	d010      	beq.n	8015f2c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8015f0a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8015f0e:	2c00      	cmp	r4, #0
 8015f10:	db0c      	blt.n	8015f2c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8015f12:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8015f14:	429c      	cmp	r4, r3
 8015f16:	da09      	bge.n	8015f2c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8015f18:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8015f1c:	429c      	cmp	r4, r3
 8015f1e:	f104 0401 	add.w	r4, r4, #1
 8015f22:	bf38      	it	cc
 8015f24:	3108      	addcc	r1, #8
 8015f26:	6084      	str	r4, [r0, #8]
 8015f28:	bf38      	it	cc
 8015f2a:	6101      	strcc	r1, [r0, #16]
 8015f2c:	6903      	ldr	r3, [r0, #16]
 8015f2e:	2100      	movs	r1, #0
 8015f30:	801e      	strh	r6, [r3, #0]
 8015f32:	805a      	strh	r2, [r3, #2]
 8015f34:	8099      	strh	r1, [r3, #4]
 8015f36:	80d9      	strh	r1, [r3, #6]
 8015f38:	9b06      	ldr	r3, [sp, #24]
 8015f3a:	4293      	cmp	r3, r2
 8015f3c:	f000 8082 	beq.w	8016044 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8015f40:	9b08      	ldr	r3, [sp, #32]
 8015f42:	9902      	ldr	r1, [sp, #8]
 8015f44:	015b      	lsls	r3, r3, #5
 8015f46:	9c02      	ldr	r4, [sp, #8]
 8015f48:	fb93 f1f1 	sdiv	r1, r3, r1
 8015f4c:	fb04 3311 	mls	r3, r4, r1, r3
 8015f50:	9103      	str	r1, [sp, #12]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	9308      	str	r3, [sp, #32]
 8015f56:	da04      	bge.n	8015f62 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8015f58:	1e4b      	subs	r3, r1, #1
 8015f5a:	9303      	str	r3, [sp, #12]
 8015f5c:	9b08      	ldr	r3, [sp, #32]
 8015f5e:	4423      	add	r3, r4
 8015f60:	9308      	str	r3, [sp, #32]
 8015f62:	9b07      	ldr	r3, [sp, #28]
 8015f64:	464f      	mov	r7, r9
 8015f66:	9902      	ldr	r1, [sp, #8]
 8015f68:	2600      	movs	r6, #0
 8015f6a:	1a5b      	subs	r3, r3, r1
 8015f6c:	9307      	str	r3, [sp, #28]
 8015f6e:	9b01      	ldr	r3, [sp, #4]
 8015f70:	f1c3 0320 	rsb	r3, r3, #32
 8015f74:	930e      	str	r3, [sp, #56]	@ 0x38
 8015f76:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015f78:	9b01      	ldr	r3, [sp, #4]
 8015f7a:	1a5b      	subs	r3, r3, r1
 8015f7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8015f7e:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8015f82:	185b      	adds	r3, r3, r1
 8015f84:	bf58      	it	pl
 8015f86:	9902      	ldrpl	r1, [sp, #8]
 8015f88:	9307      	str	r3, [sp, #28]
 8015f8a:	bf57      	itett	pl
 8015f8c:	1a5b      	subpl	r3, r3, r1
 8015f8e:	9903      	ldrmi	r1, [sp, #12]
 8015f90:	9307      	strpl	r3, [sp, #28]
 8015f92:	9b03      	ldrpl	r3, [sp, #12]
 8015f94:	bf58      	it	pl
 8015f96:	1c59      	addpl	r1, r3, #1
 8015f98:	2a00      	cmp	r2, #0
 8015f9a:	4489      	add	r9, r1
 8015f9c:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8015fa0:	db2e      	blt.n	8016000 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8015fa2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8015fa4:	4293      	cmp	r3, r2
 8015fa6:	dd2b      	ble.n	8016000 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8015fa8:	9c01      	ldr	r4, [sp, #4]
 8015faa:	6905      	ldr	r5, [r0, #16]
 8015fac:	46a0      	mov	r8, r4
 8015fae:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8015fb0:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8015fb4:	45a0      	cmp	r8, r4
 8015fb6:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8015fba:	f040 814c 	bne.w	8016256 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8015fbe:	f9b5 1000 	ldrsh.w	r1, [r5]
 8015fc2:	4551      	cmp	r1, sl
 8015fc4:	d103      	bne.n	8015fce <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8015fc6:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8015fca:	4291      	cmp	r1, r2
 8015fcc:	d018      	beq.n	8016000 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8015fce:	ea5c 010e 	orrs.w	r1, ip, lr
 8015fd2:	d00f      	beq.n	8015ff4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8015fd4:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8015fd8:	2900      	cmp	r1, #0
 8015fda:	db0b      	blt.n	8015ff4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8015fdc:	428b      	cmp	r3, r1
 8015fde:	dd09      	ble.n	8015ff4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8015fe0:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8015fe4:	4299      	cmp	r1, r3
 8015fe6:	f101 0101 	add.w	r1, r1, #1
 8015fea:	bf38      	it	cc
 8015fec:	3508      	addcc	r5, #8
 8015fee:	6081      	str	r1, [r0, #8]
 8015ff0:	bf38      	it	cc
 8015ff2:	6105      	strcc	r5, [r0, #16]
 8015ff4:	6903      	ldr	r3, [r0, #16]
 8015ff6:	f8a3 a000 	strh.w	sl, [r3]
 8015ffa:	805a      	strh	r2, [r3, #2]
 8015ffc:	809e      	strh	r6, [r3, #4]
 8015ffe:	80de      	strh	r6, [r3, #6]
 8016000:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016002:	6901      	ldr	r1, [r0, #16]
 8016004:	441a      	add	r2, r3
 8016006:	88cc      	ldrh	r4, [r1, #6]
 8016008:	888b      	ldrh	r3, [r1, #4]
 801600a:	4323      	orrs	r3, r4
 801600c:	d010      	beq.n	8016030 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801600e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8016012:	2c00      	cmp	r4, #0
 8016014:	db0c      	blt.n	8016030 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8016016:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8016018:	429c      	cmp	r4, r3
 801601a:	da09      	bge.n	8016030 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801601c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8016020:	429c      	cmp	r4, r3
 8016022:	f104 0401 	add.w	r4, r4, #1
 8016026:	bf38      	it	cc
 8016028:	3108      	addcc	r1, #8
 801602a:	6084      	str	r4, [r0, #8]
 801602c:	bf38      	it	cc
 801602e:	6101      	strcc	r1, [r0, #16]
 8016030:	6903      	ldr	r3, [r0, #16]
 8016032:	464f      	mov	r7, r9
 8016034:	f8a3 a000 	strh.w	sl, [r3]
 8016038:	805a      	strh	r2, [r3, #2]
 801603a:	809e      	strh	r6, [r3, #4]
 801603c:	80de      	strh	r6, [r3, #6]
 801603e:	9b06      	ldr	r3, [sp, #24]
 8016040:	4293      	cmp	r3, r2
 8016042:	d19c      	bne.n	8015f7e <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8016044:	9b01      	ldr	r3, [sp, #4]
 8016046:	6907      	ldr	r7, [r0, #16]
 8016048:	f1c3 0620 	rsb	r6, r3, #32
 801604c:	9b05      	ldr	r3, [sp, #20]
 801604e:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8016052:	9b04      	ldr	r3, [sp, #16]
 8016054:	429e      	cmp	r6, r3
 8016056:	f040 81c7 	bne.w	80163e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801605a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801605e:	459e      	cmp	lr, r3
 8016060:	d104      	bne.n	801606c <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8016062:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016066:	429a      	cmp	r2, r3
 8016068:	f43f ae3a 	beq.w	8015ce0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801606c:	88f9      	ldrh	r1, [r7, #6]
 801606e:	88bb      	ldrh	r3, [r7, #4]
 8016070:	430b      	orrs	r3, r1
 8016072:	d010      	beq.n	8016096 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8016074:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016078:	2b00      	cmp	r3, #0
 801607a:	db0c      	blt.n	8016096 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801607c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801607e:	428b      	cmp	r3, r1
 8016080:	da09      	bge.n	8016096 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8016082:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8016086:	428b      	cmp	r3, r1
 8016088:	f103 0301 	add.w	r3, r3, #1
 801608c:	bf38      	it	cc
 801608e:	3708      	addcc	r7, #8
 8016090:	6083      	str	r3, [r0, #8]
 8016092:	bf38      	it	cc
 8016094:	6107      	strcc	r7, [r0, #16]
 8016096:	6903      	ldr	r3, [r0, #16]
 8016098:	f8a3 e000 	strh.w	lr, [r3]
 801609c:	e603      	b.n	8015ca6 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 801609e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80160a0:	9c03      	ldr	r4, [sp, #12]
 80160a2:	42a2      	cmp	r2, r4
 80160a4:	f6ff ae1c 	blt.w	8015ce0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80160a8:	9c06      	ldr	r4, [sp, #24]
 80160aa:	42a2      	cmp	r2, r4
 80160ac:	9c08      	ldr	r4, [sp, #32]
 80160ae:	bfbc      	itt	lt
 80160b0:	3201      	addlt	r2, #1
 80160b2:	9206      	strlt	r2, [sp, #24]
 80160b4:	f1c3 0220 	rsb	r2, r3, #32
 80160b8:	4362      	muls	r2, r4
 80160ba:	2401      	movs	r4, #1
 80160bc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80160be:	2420      	movs	r4, #32
 80160c0:	e6d6      	b.n	8015e70 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 80160c2:	ea4f 1861 	mov.w	r8, r1, asr #5
 80160c6:	f009 021f 	and.w	r2, r9, #31
 80160ca:	f001 011f 	and.w	r1, r1, #31
 80160ce:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80160d2:	920c      	str	r2, [sp, #48]	@ 0x30
 80160d4:	45b0      	cmp	r8, r6
 80160d6:	9a01      	ldr	r2, [sp, #4]
 80160d8:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80160dc:	eba2 0203 	sub.w	r2, r2, r3
 80160e0:	d108      	bne.n	80160f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 80160e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80160e4:	4496      	add	lr, r2
 80160e6:	4419      	add	r1, r3
 80160e8:	f8a5 e004 	strh.w	lr, [r5, #4]
 80160ec:	fb02 a101 	mla	r1, r2, r1, sl
 80160f0:	80e9      	strh	r1, [r5, #6]
 80160f2:	e6fa      	b.n	8015eea <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80160f4:	2c00      	cmp	r4, #0
 80160f6:	f2c0 80a7 	blt.w	8016248 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 80160fa:	2701      	movs	r7, #1
 80160fc:	f1c1 0c20 	rsb	ip, r1, #32
 8016100:	970a      	str	r7, [sp, #40]	@ 0x28
 8016102:	2720      	movs	r7, #32
 8016104:	fb02 f20c 	mul.w	r2, r2, ip
 8016108:	9709      	str	r7, [sp, #36]	@ 0x24
 801610a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801610c:	fb92 fcf4 	sdiv	ip, r2, r4
 8016110:	fb04 221c 	mls	r2, r4, ip, r2
 8016114:	4439      	add	r1, r7
 8016116:	2a00      	cmp	r2, #0
 8016118:	bfbc      	itt	lt
 801611a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801611e:	1912      	addlt	r2, r2, r4
 8016120:	fb0c a101 	mla	r1, ip, r1, sl
 8016124:	44e6      	add	lr, ip
 8016126:	80e9      	strh	r1, [r5, #6]
 8016128:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801612a:	f8a5 e004 	strh.w	lr, [r5, #4]
 801612e:	eb08 0501 	add.w	r5, r8, r1
 8016132:	6901      	ldr	r1, [r0, #16]
 8016134:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8016138:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801613c:	ea58 070e 	orrs.w	r7, r8, lr
 8016140:	d010      	beq.n	8016164 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8016142:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8016146:	f1be 0f00 	cmp.w	lr, #0
 801614a:	db0b      	blt.n	8016164 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801614c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801614e:	45be      	cmp	lr, r7
 8016150:	da08      	bge.n	8016164 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8016152:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8016156:	45be      	cmp	lr, r7
 8016158:	bf3c      	itt	cc
 801615a:	3108      	addcc	r1, #8
 801615c:	6101      	strcc	r1, [r0, #16]
 801615e:	f10e 0101 	add.w	r1, lr, #1
 8016162:	6081      	str	r1, [r0, #8]
 8016164:	6901      	ldr	r1, [r0, #16]
 8016166:	f04f 0e00 	mov.w	lr, #0
 801616a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801616e:	42ae      	cmp	r6, r5
 8016170:	800d      	strh	r5, [r1, #0]
 8016172:	4463      	add	r3, ip
 8016174:	f8a1 8002 	strh.w	r8, [r1, #2]
 8016178:	f8a1 e004 	strh.w	lr, [r1, #4]
 801617c:	f8a1 e006 	strh.w	lr, [r1, #6]
 8016180:	d053      	beq.n	801622a <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8016182:	9901      	ldr	r1, [sp, #4]
 8016184:	1b12      	subs	r2, r2, r4
 8016186:	1ac9      	subs	r1, r1, r3
 8016188:	4461      	add	r1, ip
 801618a:	0149      	lsls	r1, r1, #5
 801618c:	fb91 fef4 	sdiv	lr, r1, r4
 8016190:	fb04 111e 	mls	r1, r4, lr, r1
 8016194:	2900      	cmp	r1, #0
 8016196:	bfbc      	itt	lt
 8016198:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801619c:	1909      	addlt	r1, r1, r4
 801619e:	f10e 0701 	add.w	r7, lr, #1
 80161a2:	970d      	str	r7, [sp, #52]	@ 0x34
 80161a4:	f8d0 a010 	ldr.w	sl, [r0, #16]
 80161a8:	1852      	adds	r2, r2, r1
 80161aa:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80161ac:	bf54      	ite	pl
 80161ae:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 80161b2:	46f4      	movmi	ip, lr
 80161b4:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80161b8:	bf58      	it	pl
 80161ba:	1b12      	subpl	r2, r2, r4
 80161bc:	4463      	add	r3, ip
 80161be:	443d      	add	r5, r7
 80161c0:	44e3      	add	fp, ip
 80161c2:	f8aa b004 	strh.w	fp, [sl, #4]
 80161c6:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80161ca:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80161ce:	f8aa b006 	strh.w	fp, [sl, #6]
 80161d2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80161d6:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80161da:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80161de:	ea5b 070a 	orrs.w	r7, fp, sl
 80161e2:	d014      	beq.n	801620e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80161e4:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80161e8:	f1ba 0f00 	cmp.w	sl, #0
 80161ec:	db0f      	blt.n	801620e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80161ee:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80161f0:	45ba      	cmp	sl, r7
 80161f2:	da0c      	bge.n	801620e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80161f4:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80161f8:	45ba      	cmp	sl, r7
 80161fa:	f10a 0a01 	add.w	sl, sl, #1
 80161fe:	bf38      	it	cc
 8016200:	f10c 0c08 	addcc.w	ip, ip, #8
 8016204:	f8c0 a008 	str.w	sl, [r0, #8]
 8016208:	bf38      	it	cc
 801620a:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801620e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016212:	f04f 0700 	mov.w	r7, #0
 8016216:	42ae      	cmp	r6, r5
 8016218:	f8ac 5000 	strh.w	r5, [ip]
 801621c:	f8ac 8002 	strh.w	r8, [ip, #2]
 8016220:	f8ac 7004 	strh.w	r7, [ip, #4]
 8016224:	f8ac 7006 	strh.w	r7, [ip, #6]
 8016228:	d1bc      	bne.n	80161a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801622a:	6904      	ldr	r4, [r0, #16]
 801622c:	9a01      	ldr	r2, [sp, #4]
 801622e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016230:	1ad3      	subs	r3, r2, r3
 8016232:	88a2      	ldrh	r2, [r4, #4]
 8016234:	3120      	adds	r1, #32
 8016236:	441a      	add	r2, r3
 8016238:	80a2      	strh	r2, [r4, #4]
 801623a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801623c:	1a89      	subs	r1, r1, r2
 801623e:	88e2      	ldrh	r2, [r4, #6]
 8016240:	fb03 2301 	mla	r3, r3, r1, r2
 8016244:	80e3      	strh	r3, [r4, #6]
 8016246:	e650      	b.n	8015eea <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8016248:	f04f 37ff 	mov.w	r7, #4294967295
 801624c:	434a      	muls	r2, r1
 801624e:	4264      	negs	r4, r4
 8016250:	970a      	str	r7, [sp, #40]	@ 0x28
 8016252:	2700      	movs	r7, #0
 8016254:	e758      	b.n	8016108 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8016256:	ea4f 1867 	mov.w	r8, r7, asr #5
 801625a:	f009 031f 	and.w	r3, r9, #31
 801625e:	f007 071f 	and.w	r7, r7, #31
 8016262:	fa1f fc8c 	uxth.w	ip, ip
 8016266:	45d0      	cmp	r8, sl
 8016268:	930f      	str	r3, [sp, #60]	@ 0x3c
 801626a:	fa1f fe8e 	uxth.w	lr, lr
 801626e:	d10a      	bne.n	8016286 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8016270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016272:	449c      	add	ip, r3
 8016274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016276:	441f      	add	r7, r3
 8016278:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801627a:	f8a5 c004 	strh.w	ip, [r5, #4]
 801627e:	fb03 e707 	mla	r7, r3, r7, lr
 8016282:	80ef      	strh	r7, [r5, #6]
 8016284:	e6bc      	b.n	8016000 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8016286:	2900      	cmp	r1, #0
 8016288:	f2c0 80a6 	blt.w	80163d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 801628c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801628e:	f1c7 0320 	rsb	r3, r7, #32
 8016292:	4363      	muls	r3, r4
 8016294:	2401      	movs	r4, #1
 8016296:	940d      	str	r4, [sp, #52]	@ 0x34
 8016298:	2420      	movs	r4, #32
 801629a:	940c      	str	r4, [sp, #48]	@ 0x30
 801629c:	fb93 f4f1 	sdiv	r4, r3, r1
 80162a0:	fb01 3b14 	mls	fp, r1, r4, r3
 80162a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80162a6:	f1bb 0f00 	cmp.w	fp, #0
 80162aa:	441f      	add	r7, r3
 80162ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80162ae:	bfbc      	itt	lt
 80162b0:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80162b4:	448b      	addlt	fp, r1
 80162b6:	fb04 e707 	mla	r7, r4, r7, lr
 80162ba:	44a4      	add	ip, r4
 80162bc:	80ef      	strh	r7, [r5, #6]
 80162be:	f8a5 c004 	strh.w	ip, [r5, #4]
 80162c2:	eb08 0503 	add.w	r5, r8, r3
 80162c6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80162ca:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80162ce:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80162d2:	ea5e 0307 	orrs.w	r3, lr, r7
 80162d6:	d011      	beq.n	80162fc <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80162d8:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80162dc:	f1be 0f00 	cmp.w	lr, #0
 80162e0:	db0c      	blt.n	80162fc <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80162e2:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80162e4:	45be      	cmp	lr, r7
 80162e6:	da09      	bge.n	80162fc <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80162e8:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80162ec:	45be      	cmp	lr, r7
 80162ee:	bf3c      	itt	cc
 80162f0:	f10c 0708 	addcc.w	r7, ip, #8
 80162f4:	6107      	strcc	r7, [r0, #16]
 80162f6:	f10e 0701 	add.w	r7, lr, #1
 80162fa:	6087      	str	r7, [r0, #8]
 80162fc:	6907      	ldr	r7, [r0, #16]
 80162fe:	b213      	sxth	r3, r2
 8016300:	4555      	cmp	r5, sl
 8016302:	9310      	str	r3, [sp, #64]	@ 0x40
 8016304:	807b      	strh	r3, [r7, #2]
 8016306:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016308:	803d      	strh	r5, [r7, #0]
 801630a:	80be      	strh	r6, [r7, #4]
 801630c:	eb04 0c03 	add.w	ip, r4, r3
 8016310:	80fe      	strh	r6, [r7, #6]
 8016312:	d050      	beq.n	80163b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8016314:	9b01      	ldr	r3, [sp, #4]
 8016316:	eba3 070c 	sub.w	r7, r3, ip
 801631a:	ebab 0301 	sub.w	r3, fp, r1
 801631e:	443c      	add	r4, r7
 8016320:	9309      	str	r3, [sp, #36]	@ 0x24
 8016322:	0164      	lsls	r4, r4, #5
 8016324:	fb94 f8f1 	sdiv	r8, r4, r1
 8016328:	fb01 4418 	mls	r4, r1, r8, r4
 801632c:	2c00      	cmp	r4, #0
 801632e:	bfbc      	itt	lt
 8016330:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8016334:	1864      	addlt	r4, r4, r1
 8016336:	f108 0701 	add.w	r7, r8, #1
 801633a:	9711      	str	r7, [sp, #68]	@ 0x44
 801633c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801633e:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8016342:	191b      	adds	r3, r3, r4
 8016344:	f8be b004 	ldrh.w	fp, [lr, #4]
 8016348:	bf54      	ite	pl
 801634a:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 801634c:	4647      	movmi	r7, r8
 801634e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016350:	bf58      	it	pl
 8016352:	1a5b      	subpl	r3, r3, r1
 8016354:	44bb      	add	fp, r7
 8016356:	44bc      	add	ip, r7
 8016358:	bf58      	it	pl
 801635a:	9309      	strpl	r3, [sp, #36]	@ 0x24
 801635c:	f8ae b004 	strh.w	fp, [lr, #4]
 8016360:	f8be b006 	ldrh.w	fp, [lr, #6]
 8016364:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8016368:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801636a:	f8ae b006 	strh.w	fp, [lr, #6]
 801636e:	443d      	add	r5, r7
 8016370:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8016374:	f8be b006 	ldrh.w	fp, [lr, #6]
 8016378:	f8be 7004 	ldrh.w	r7, [lr, #4]
 801637c:	ea5b 0307 	orrs.w	r3, fp, r7
 8016380:	d011      	beq.n	80163a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8016382:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8016386:	f1bb 0f00 	cmp.w	fp, #0
 801638a:	db0c      	blt.n	80163a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801638c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801638e:	45bb      	cmp	fp, r7
 8016390:	da09      	bge.n	80163a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8016392:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8016396:	45bb      	cmp	fp, r7
 8016398:	bf3c      	itt	cc
 801639a:	f10e 0708 	addcc.w	r7, lr, #8
 801639e:	6107      	strcc	r7, [r0, #16]
 80163a0:	f10b 0701 	add.w	r7, fp, #1
 80163a4:	6087      	str	r7, [r0, #8]
 80163a6:	6907      	ldr	r7, [r0, #16]
 80163a8:	4555      	cmp	r5, sl
 80163aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80163ac:	803d      	strh	r5, [r7, #0]
 80163ae:	807b      	strh	r3, [r7, #2]
 80163b0:	80be      	strh	r6, [r7, #4]
 80163b2:	80fe      	strh	r6, [r7, #6]
 80163b4:	d1c2      	bne.n	801633c <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 80163b6:	9b01      	ldr	r3, [sp, #4]
 80163b8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80163ba:	eba3 0c0c 	sub.w	ip, r3, ip
 80163be:	6903      	ldr	r3, [r0, #16]
 80163c0:	3720      	adds	r7, #32
 80163c2:	8899      	ldrh	r1, [r3, #4]
 80163c4:	4461      	add	r1, ip
 80163c6:	8099      	strh	r1, [r3, #4]
 80163c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80163ca:	1a7f      	subs	r7, r7, r1
 80163cc:	88d9      	ldrh	r1, [r3, #6]
 80163ce:	fb0c 1c07 	mla	ip, ip, r7, r1
 80163d2:	f8a3 c006 	strh.w	ip, [r3, #6]
 80163d6:	e613      	b.n	8016000 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80163d8:	f04f 34ff 	mov.w	r4, #4294967295
 80163dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80163de:	4249      	negs	r1, r1
 80163e0:	940d      	str	r4, [sp, #52]	@ 0x34
 80163e2:	2400      	movs	r4, #0
 80163e4:	437b      	muls	r3, r7
 80163e6:	e758      	b.n	801629a <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80163e8:	9905      	ldr	r1, [sp, #20]
 80163ea:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80163ee:	f009 0c1f 	and.w	ip, r9, #31
 80163f2:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 80163f6:	f001 011f 	and.w	r1, r1, #31
 80163fa:	45f3      	cmp	fp, lr
 80163fc:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8016400:	9102      	str	r1, [sp, #8]
 8016402:	9904      	ldr	r1, [sp, #16]
 8016404:	eba1 0406 	sub.w	r4, r1, r6
 8016408:	d108      	bne.n	801641c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801640a:	9b02      	ldr	r3, [sp, #8]
 801640c:	44a0      	add	r8, r4
 801640e:	449c      	add	ip, r3
 8016410:	f8a7 8004 	strh.w	r8, [r7, #4]
 8016414:	fb04 a40c 	mla	r4, r4, ip, sl
 8016418:	80fc      	strh	r4, [r7, #6]
 801641a:	e461      	b.n	8015ce0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801641c:	9905      	ldr	r1, [sp, #20]
 801641e:	ebb1 0109 	subs.w	r1, r1, r9
 8016422:	bf51      	iteee	pl
 8016424:	f1cc 0520 	rsbpl	r5, ip, #32
 8016428:	fb04 f40c 	mulmi.w	r4, r4, ip
 801642c:	4249      	negmi	r1, r1
 801642e:	2500      	movmi	r5, #0
 8016430:	bf5d      	ittte	pl
 8016432:	436c      	mulpl	r4, r5
 8016434:	2520      	movpl	r5, #32
 8016436:	f04f 0901 	movpl.w	r9, #1
 801643a:	f04f 39ff 	movmi.w	r9, #4294967295
 801643e:	9501      	str	r5, [sp, #4]
 8016440:	9b01      	ldr	r3, [sp, #4]
 8016442:	fb94 f5f1 	sdiv	r5, r4, r1
 8016446:	fb01 4415 	mls	r4, r1, r5, r4
 801644a:	449c      	add	ip, r3
 801644c:	eb0b 0309 	add.w	r3, fp, r9
 8016450:	2c00      	cmp	r4, #0
 8016452:	bfbc      	itt	lt
 8016454:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8016458:	1864      	addlt	r4, r4, r1
 801645a:	44a8      	add	r8, r5
 801645c:	fb05 ac0c 	mla	ip, r5, ip, sl
 8016460:	f8a7 8004 	strh.w	r8, [r7, #4]
 8016464:	f8a7 c006 	strh.w	ip, [r7, #6]
 8016468:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801646c:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8016470:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016474:	ea58 0707 	orrs.w	r7, r8, r7
 8016478:	d011      	beq.n	801649e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801647a:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801647e:	f1b8 0f00 	cmp.w	r8, #0
 8016482:	db0c      	blt.n	801649e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8016484:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8016486:	45b8      	cmp	r8, r7
 8016488:	da09      	bge.n	801649e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801648a:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801648e:	45b8      	cmp	r8, r7
 8016490:	bf3c      	itt	cc
 8016492:	f10c 0708 	addcc.w	r7, ip, #8
 8016496:	6107      	strcc	r7, [r0, #16]
 8016498:	f108 0701 	add.w	r7, r8, #1
 801649c:	6087      	str	r7, [r0, #8]
 801649e:	6907      	ldr	r7, [r0, #16]
 80164a0:	f04f 0c00 	mov.w	ip, #0
 80164a4:	b212      	sxth	r2, r2
 80164a6:	459e      	cmp	lr, r3
 80164a8:	803b      	strh	r3, [r7, #0]
 80164aa:	442e      	add	r6, r5
 80164ac:	807a      	strh	r2, [r7, #2]
 80164ae:	f8a7 c004 	strh.w	ip, [r7, #4]
 80164b2:	f8a7 c006 	strh.w	ip, [r7, #6]
 80164b6:	d04b      	beq.n	8016550 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 80164b8:	9f04      	ldr	r7, [sp, #16]
 80164ba:	1a64      	subs	r4, r4, r1
 80164bc:	f04f 0a00 	mov.w	sl, #0
 80164c0:	1bbf      	subs	r7, r7, r6
 80164c2:	443d      	add	r5, r7
 80164c4:	016d      	lsls	r5, r5, #5
 80164c6:	fb95 f8f1 	sdiv	r8, r5, r1
 80164ca:	fb01 5518 	mls	r5, r1, r8, r5
 80164ce:	4565      	cmp	r5, ip
 80164d0:	bfbc      	itt	lt
 80164d2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80164d6:	186d      	addlt	r5, r5, r1
 80164d8:	f108 0701 	add.w	r7, r8, #1
 80164dc:	9703      	str	r7, [sp, #12]
 80164de:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80164e2:	1964      	adds	r4, r4, r5
 80164e4:	444b      	add	r3, r9
 80164e6:	bf54      	ite	pl
 80164e8:	9f03      	ldrpl	r7, [sp, #12]
 80164ea:	4647      	movmi	r7, r8
 80164ec:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80164f0:	bf58      	it	pl
 80164f2:	1a64      	subpl	r4, r4, r1
 80164f4:	443e      	add	r6, r7
 80164f6:	44bb      	add	fp, r7
 80164f8:	f8ac b004 	strh.w	fp, [ip, #4]
 80164fc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016500:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8016504:	f8ac b006 	strh.w	fp, [ip, #6]
 8016508:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801650c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016510:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016514:	ea5b 0707 	orrs.w	r7, fp, r7
 8016518:	d011      	beq.n	801653e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801651a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801651e:	f1bb 0f00 	cmp.w	fp, #0
 8016522:	db0c      	blt.n	801653e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8016524:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8016526:	45bb      	cmp	fp, r7
 8016528:	da09      	bge.n	801653e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801652a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801652e:	45bb      	cmp	fp, r7
 8016530:	bf3c      	itt	cc
 8016532:	f10c 0708 	addcc.w	r7, ip, #8
 8016536:	6107      	strcc	r7, [r0, #16]
 8016538:	f10b 0701 	add.w	r7, fp, #1
 801653c:	6087      	str	r7, [r0, #8]
 801653e:	6907      	ldr	r7, [r0, #16]
 8016540:	459e      	cmp	lr, r3
 8016542:	803b      	strh	r3, [r7, #0]
 8016544:	807a      	strh	r2, [r7, #2]
 8016546:	f8a7 a004 	strh.w	sl, [r7, #4]
 801654a:	f8a7 a006 	strh.w	sl, [r7, #6]
 801654e:	d1c6      	bne.n	80164de <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8016550:	9b04      	ldr	r3, [sp, #16]
 8016552:	1b9e      	subs	r6, r3, r6
 8016554:	6903      	ldr	r3, [r0, #16]
 8016556:	889a      	ldrh	r2, [r3, #4]
 8016558:	4432      	add	r2, r6
 801655a:	809a      	strh	r2, [r3, #4]
 801655c:	9a02      	ldr	r2, [sp, #8]
 801655e:	f102 0c20 	add.w	ip, r2, #32
 8016562:	9a01      	ldr	r2, [sp, #4]
 8016564:	ebac 0c02 	sub.w	ip, ip, r2
 8016568:	88da      	ldrh	r2, [r3, #6]
 801656a:	fb06 260c 	mla	r6, r6, ip, r2
 801656e:	80de      	strh	r6, [r3, #6]
 8016570:	f7ff bbb6 	b.w	8015ce0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08016574 <_ZN8touchgfx7Outline6lineToEii>:
 8016574:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8016576:	079b      	lsls	r3, r3, #30
 8016578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801657a:	460e      	mov	r6, r1
 801657c:	4615      	mov	r5, r2
 801657e:	d511      	bpl.n	80165a4 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8016580:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8016584:	ea86 0701 	eor.w	r7, r6, r1
 8016588:	ea85 0302 	eor.w	r3, r5, r2
 801658c:	433b      	orrs	r3, r7
 801658e:	d009      	beq.n	80165a4 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8016590:	4633      	mov	r3, r6
 8016592:	9500      	str	r5, [sp, #0]
 8016594:	f7ff fb4c 	bl	8015c30 <_ZN8touchgfx7Outline10renderLineEiiii>
 8016598:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801659a:	f043 0301 	orr.w	r3, r3, #1
 801659e:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80165a2:	6243      	str	r3, [r0, #36]	@ 0x24
 80165a4:	b003      	add	sp, #12
 80165a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080165a8 <_ZN8touchgfx7Outline6moveToEii>:
 80165a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165aa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80165ac:	4615      	mov	r5, r2
 80165ae:	4604      	mov	r4, r0
 80165b0:	460e      	mov	r6, r1
 80165b2:	079a      	lsls	r2, r3, #30
 80165b4:	d401      	bmi.n	80165ba <_ZN8touchgfx7Outline6moveToEii+0x12>
 80165b6:	f7ff fb07 	bl	8015bc8 <_ZN8touchgfx7Outline5resetEv>
 80165ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80165bc:	07db      	lsls	r3, r3, #31
 80165be:	d504      	bpl.n	80165ca <_ZN8touchgfx7Outline6moveToEii+0x22>
 80165c0:	4620      	mov	r0, r4
 80165c2:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80165c6:	f7ff ffd5 	bl	8016574 <_ZN8touchgfx7Outline6lineToEii>
 80165ca:	6923      	ldr	r3, [r4, #16]
 80165cc:	1170      	asrs	r0, r6, #5
 80165ce:	1169      	asrs	r1, r5, #5
 80165d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80165d4:	4290      	cmp	r0, r2
 80165d6:	d103      	bne.n	80165e0 <_ZN8touchgfx7Outline6moveToEii+0x38>
 80165d8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80165dc:	4291      	cmp	r1, r2
 80165de:	d01a      	beq.n	8016616 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 80165e0:	88df      	ldrh	r7, [r3, #6]
 80165e2:	889a      	ldrh	r2, [r3, #4]
 80165e4:	433a      	orrs	r2, r7
 80165e6:	d010      	beq.n	801660a <_ZN8touchgfx7Outline6moveToEii+0x62>
 80165e8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80165ec:	2a00      	cmp	r2, #0
 80165ee:	db0c      	blt.n	801660a <_ZN8touchgfx7Outline6moveToEii+0x62>
 80165f0:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80165f2:	42ba      	cmp	r2, r7
 80165f4:	da09      	bge.n	801660a <_ZN8touchgfx7Outline6moveToEii+0x62>
 80165f6:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 80165fa:	42ba      	cmp	r2, r7
 80165fc:	f102 0201 	add.w	r2, r2, #1
 8016600:	bf38      	it	cc
 8016602:	3308      	addcc	r3, #8
 8016604:	60a2      	str	r2, [r4, #8]
 8016606:	bf38      	it	cc
 8016608:	6123      	strcc	r3, [r4, #16]
 801660a:	6923      	ldr	r3, [r4, #16]
 801660c:	2200      	movs	r2, #0
 801660e:	8018      	strh	r0, [r3, #0]
 8016610:	8059      	strh	r1, [r3, #2]
 8016612:	809a      	strh	r2, [r3, #4]
 8016614:	80da      	strh	r2, [r3, #6]
 8016616:	6166      	str	r6, [r4, #20]
 8016618:	6225      	str	r5, [r4, #32]
 801661a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801661e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016620 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8016620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016624:	b0d0      	sub	sp, #320	@ 0x140
 8016626:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801662a:	466c      	mov	r4, sp
 801662c:	4627      	mov	r7, r4
 801662e:	1a0d      	subs	r5, r1, r0
 8016630:	f100 0308 	add.w	r3, r0, #8
 8016634:	2d48      	cmp	r5, #72	@ 0x48
 8016636:	f340 80d5 	ble.w	80167e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801663a:	112d      	asrs	r5, r5, #4
 801663c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8016640:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016644:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8016648:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 801664c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8016650:	6816      	ldr	r6, [r2, #0]
 8016652:	6006      	str	r6, [r0, #0]
 8016654:	6856      	ldr	r6, [r2, #4]
 8016656:	6046      	str	r6, [r0, #4]
 8016658:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801665c:	f8a2 8002 	strh.w	r8, [r2, #2]
 8016660:	f8a2 e004 	strh.w	lr, [r2, #4]
 8016664:	f8a2 c006 	strh.w	ip, [r2, #6]
 8016668:	f1a1 0208 	sub.w	r2, r1, #8
 801666c:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8016670:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8016674:	4565      	cmp	r5, ip
 8016676:	db06      	blt.n	8016686 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8016678:	d119      	bne.n	80166ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801667a:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801667e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8016682:	42ae      	cmp	r6, r5
 8016684:	dd13      	ble.n	80166ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8016686:	460e      	mov	r6, r1
 8016688:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801668c:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8016690:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8016694:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8016698:	601d      	str	r5, [r3, #0]
 801669a:	6875      	ldr	r5, [r6, #4]
 801669c:	605d      	str	r5, [r3, #4]
 801669e:	f821 9c08 	strh.w	r9, [r1, #-8]
 80166a2:	f821 cc06 	strh.w	ip, [r1, #-6]
 80166a6:	f821 8c04 	strh.w	r8, [r1, #-4]
 80166aa:	f821 ec02 	strh.w	lr, [r1, #-2]
 80166ae:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80166b2:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80166b6:	42ae      	cmp	r6, r5
 80166b8:	db06      	blt.n	80166c8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 80166ba:	d116      	bne.n	80166ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80166bc:	f9b0 c000 	ldrsh.w	ip, [r0]
 80166c0:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80166c4:	45ac      	cmp	ip, r5
 80166c6:	da10      	bge.n	80166ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80166c8:	681d      	ldr	r5, [r3, #0]
 80166ca:	f9b0 8000 	ldrsh.w	r8, [r0]
 80166ce:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80166d2:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80166d6:	6005      	str	r5, [r0, #0]
 80166d8:	685d      	ldr	r5, [r3, #4]
 80166da:	f8a0 8008 	strh.w	r8, [r0, #8]
 80166de:	6045      	str	r5, [r0, #4]
 80166e0:	8146      	strh	r6, [r0, #10]
 80166e2:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80166e6:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80166ea:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80166ee:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80166f2:	4565      	cmp	r5, ip
 80166f4:	db06      	blt.n	8016704 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 80166f6:	d119      	bne.n	801672c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80166f8:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 80166fc:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016700:	42ae      	cmp	r6, r5
 8016702:	da13      	bge.n	801672c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016704:	460e      	mov	r6, r1
 8016706:	f9b0 9000 	ldrsh.w	r9, [r0]
 801670a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801670e:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8016712:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8016716:	6005      	str	r5, [r0, #0]
 8016718:	6875      	ldr	r5, [r6, #4]
 801671a:	6045      	str	r5, [r0, #4]
 801671c:	f821 9c08 	strh.w	r9, [r1, #-8]
 8016720:	f821 cc06 	strh.w	ip, [r1, #-6]
 8016724:	f821 8c04 	strh.w	r8, [r1, #-4]
 8016728:	f821 ec02 	strh.w	lr, [r1, #-2]
 801672c:	3308      	adds	r3, #8
 801672e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8016732:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8016736:	45e6      	cmp	lr, ip
 8016738:	dbf8      	blt.n	801672c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801673a:	d105      	bne.n	8016748 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801673c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016740:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016744:	42ae      	cmp	r6, r5
 8016746:	dbf1      	blt.n	801672c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016748:	4615      	mov	r5, r2
 801674a:	3a08      	subs	r2, #8
 801674c:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8016750:	45b4      	cmp	ip, r6
 8016752:	dbf9      	blt.n	8016748 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8016754:	d105      	bne.n	8016762 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8016756:	f9b0 8000 	ldrsh.w	r8, [r0]
 801675a:	f9b2 6000 	ldrsh.w	r6, [r2]
 801675e:	45b0      	cmp	r8, r6
 8016760:	dbf2      	blt.n	8016748 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8016762:	4293      	cmp	r3, r2
 8016764:	f1a5 0608 	sub.w	r6, r5, #8
 8016768:	d816      	bhi.n	8016798 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801676a:	f8d6 c000 	ldr.w	ip, [r6]
 801676e:	f9b3 a000 	ldrsh.w	sl, [r3]
 8016772:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8016776:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801677a:	f8c3 c000 	str.w	ip, [r3]
 801677e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8016782:	f8c3 c004 	str.w	ip, [r3, #4]
 8016786:	f825 ac08 	strh.w	sl, [r5, #-8]
 801678a:	f825 ec06 	strh.w	lr, [r5, #-6]
 801678e:	f825 9c04 	strh.w	r9, [r5, #-4]
 8016792:	f825 8c02 	strh.w	r8, [r5, #-2]
 8016796:	e7c9      	b.n	801672c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016798:	f8d6 e000 	ldr.w	lr, [r6]
 801679c:	f9b0 a000 	ldrsh.w	sl, [r0]
 80167a0:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80167a4:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80167a8:	f8c0 e000 	str.w	lr, [r0]
 80167ac:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80167b0:	1a16      	subs	r6, r2, r0
 80167b2:	f8c0 e004 	str.w	lr, [r0, #4]
 80167b6:	f825 ac08 	strh.w	sl, [r5, #-8]
 80167ba:	f825 cc06 	strh.w	ip, [r5, #-6]
 80167be:	f825 9c04 	strh.w	r9, [r5, #-4]
 80167c2:	f825 8c02 	strh.w	r8, [r5, #-2]
 80167c6:	1acd      	subs	r5, r1, r3
 80167c8:	10ed      	asrs	r5, r5, #3
 80167ca:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 80167ce:	bfb5      	itete	lt
 80167d0:	e9c4 0200 	strdlt	r0, r2, [r4]
 80167d4:	e9c4 3100 	strdge	r3, r1, [r4]
 80167d8:	460a      	movlt	r2, r1
 80167da:	4603      	movge	r3, r0
 80167dc:	3408      	adds	r4, #8
 80167de:	4618      	mov	r0, r3
 80167e0:	4611      	mov	r1, r2
 80167e2:	e724      	b.n	801662e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80167e4:	4299      	cmp	r1, r3
 80167e6:	d927      	bls.n	8016838 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 80167e8:	f1a3 0210 	sub.w	r2, r3, #16
 80167ec:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 80167f0:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 80167f4:	45ac      	cmp	ip, r5
 80167f6:	db06      	blt.n	8016806 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 80167f8:	d11c      	bne.n	8016834 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80167fa:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 80167fe:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8016802:	42ae      	cmp	r6, r5
 8016804:	da16      	bge.n	8016834 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8016806:	4615      	mov	r5, r2
 8016808:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801680c:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8016810:	3a08      	subs	r2, #8
 8016812:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8016816:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801681a:	6196      	str	r6, [r2, #24]
 801681c:	42a8      	cmp	r0, r5
 801681e:	686e      	ldr	r6, [r5, #4]
 8016820:	f8a2 9010 	strh.w	r9, [r2, #16]
 8016824:	61d6      	str	r6, [r2, #28]
 8016826:	f8a2 c012 	strh.w	ip, [r2, #18]
 801682a:	f8a2 8014 	strh.w	r8, [r2, #20]
 801682e:	f8a2 e016 	strh.w	lr, [r2, #22]
 8016832:	d1db      	bne.n	80167ec <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8016834:	3308      	adds	r3, #8
 8016836:	e7d5      	b.n	80167e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8016838:	42bc      	cmp	r4, r7
 801683a:	d903      	bls.n	8016844 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 801683c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8016840:	3c08      	subs	r4, #8
 8016842:	e6f4      	b.n	801662e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8016844:	b050      	add	sp, #320	@ 0x140
 8016846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801684a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801684a:	b510      	push	{r4, lr}
 801684c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801684e:	4604      	mov	r4, r0
 8016850:	07da      	lsls	r2, r3, #31
 8016852:	d507      	bpl.n	8016864 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8016854:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8016858:	f7ff fe8c 	bl	8016574 <_ZN8touchgfx7Outline6lineToEii>
 801685c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801685e:	f023 0301 	bic.w	r3, r3, #1
 8016862:	6243      	str	r3, [r0, #36]	@ 0x24
 8016864:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8016866:	079b      	lsls	r3, r3, #30
 8016868:	d521      	bpl.n	80168ae <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801686a:	6923      	ldr	r3, [r4, #16]
 801686c:	88d9      	ldrh	r1, [r3, #6]
 801686e:	889a      	ldrh	r2, [r3, #4]
 8016870:	430a      	orrs	r2, r1
 8016872:	d010      	beq.n	8016896 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8016874:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016878:	2a00      	cmp	r2, #0
 801687a:	db0c      	blt.n	8016896 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801687c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801687e:	428a      	cmp	r2, r1
 8016880:	da09      	bge.n	8016896 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8016882:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8016886:	4291      	cmp	r1, r2
 8016888:	f102 0201 	add.w	r2, r2, #1
 801688c:	bf88      	it	hi
 801688e:	3308      	addhi	r3, #8
 8016890:	60a2      	str	r2, [r4, #8]
 8016892:	bf88      	it	hi
 8016894:	6123      	strhi	r3, [r4, #16]
 8016896:	68a1      	ldr	r1, [r4, #8]
 8016898:	b129      	cbz	r1, 80168a6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801689a:	6863      	ldr	r3, [r4, #4]
 801689c:	4299      	cmp	r1, r3
 801689e:	d802      	bhi.n	80168a6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80168a0:	68e0      	ldr	r0, [r4, #12]
 80168a2:	f7ff febd 	bl	8016620 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80168a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80168a8:	f023 0302 	bic.w	r3, r3, #2
 80168ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80168ae:	68e0      	ldr	r0, [r4, #12]
 80168b0:	bd10      	pop	{r4, pc}
	...

080168b4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80168b4:	4b02      	ldr	r3, [pc, #8]	@ (80168c0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80168b6:	6018      	str	r0, [r3, #0]
 80168b8:	4b02      	ldr	r3, [pc, #8]	@ (80168c4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80168ba:	6019      	str	r1, [r3, #0]
 80168bc:	4770      	bx	lr
 80168be:	bf00      	nop
 80168c0:	200279e0 	.word	0x200279e0
 80168c4:	200279e4 	.word	0x200279e4

080168c8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 80168c8:	2300      	movs	r3, #0
 80168ca:	4a02      	ldr	r2, [pc, #8]	@ (80168d4 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 80168cc:	6013      	str	r3, [r2, #0]
 80168ce:	4a02      	ldr	r2, [pc, #8]	@ (80168d8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 80168d0:	6013      	str	r3, [r2, #0]
 80168d2:	4770      	bx	lr
 80168d4:	200279e0 	.word	0x200279e0
 80168d8:	200279e4 	.word	0x200279e4

080168dc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80168dc:	4b01      	ldr	r3, [pc, #4]	@ (80168e4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80168de:	6818      	ldr	r0, [r3, #0]
 80168e0:	4770      	bx	lr
 80168e2:	bf00      	nop
 80168e4:	200279e0 	.word	0x200279e0

080168e8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80168e8:	4b01      	ldr	r3, [pc, #4]	@ (80168f0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80168ea:	6818      	ldr	r0, [r3, #0]
 80168ec:	4770      	bx	lr
 80168ee:	bf00      	nop
 80168f0:	200279e4 	.word	0x200279e4

080168f4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80168f4:	b510      	push	{r4, lr}
 80168f6:	6803      	ldr	r3, [r0, #0]
 80168f8:	460c      	mov	r4, r1
 80168fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80168fc:	4798      	blx	r3
 80168fe:	1b03      	subs	r3, r0, r4
 8016900:	4258      	negs	r0, r3
 8016902:	4158      	adcs	r0, r3
 8016904:	bd10      	pop	{r4, pc}
	...

08016908 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8016908:	4b01      	ldr	r3, [pc, #4]	@ (8016910 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801690a:	6019      	str	r1, [r3, #0]
 801690c:	4770      	bx	lr
 801690e:	bf00      	nop
 8016910:	200279e8 	.word	0x200279e8

08016914 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016918:	4696      	mov	lr, r2
 801691a:	b097      	sub	sp, #92	@ 0x5c
 801691c:	4605      	mov	r5, r0
 801691e:	4614      	mov	r4, r2
 8016920:	460e      	mov	r6, r1
 8016922:	461f      	mov	r7, r3
 8016924:	f10d 0c1c 	add.w	ip, sp, #28
 8016928:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 801692c:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8016930:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8016934:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016938:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801693c:	f8de 3000 	ldr.w	r3, [lr]
 8016940:	f104 0e14 	add.w	lr, r4, #20
 8016944:	f8cc 3000 	str.w	r3, [ip]
 8016948:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801694c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016950:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016954:	f8de 3000 	ldr.w	r3, [lr]
 8016958:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801695c:	f8cc 3000 	str.w	r3, [ip]
 8016960:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8016964:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016968:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801696c:	f8de 3000 	ldr.w	r3, [lr]
 8016970:	4631      	mov	r1, r6
 8016972:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8016974:	4628      	mov	r0, r5
 8016976:	f8cc 3000 	str.w	r3, [ip]
 801697a:	682b      	ldr	r3, [r5, #0]
 801697c:	9201      	str	r2, [sp, #4]
 801697e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016980:	f8cd 8008 	str.w	r8, [sp, #8]
 8016984:	9200      	str	r2, [sp, #0]
 8016986:	aa07      	add	r2, sp, #28
 8016988:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801698c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8016990:	463b      	mov	r3, r7
 8016992:	47d8      	blx	fp
 8016994:	46a6      	mov	lr, r4
 8016996:	f10d 0c1c 	add.w	ip, sp, #28
 801699a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801699e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169a2:	f8de 3000 	ldr.w	r3, [lr]
 80169a6:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80169aa:	343c      	adds	r4, #60	@ 0x3c
 80169ac:	f8cc 3000 	str.w	r3, [ip]
 80169b0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80169b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80169b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169bc:	f8de 3000 	ldr.w	r3, [lr]
 80169c0:	f8cc 3000 	str.w	r3, [ip]
 80169c4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80169c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169ce:	6823      	ldr	r3, [r4, #0]
 80169d0:	4631      	mov	r1, r6
 80169d2:	4628      	mov	r0, r5
 80169d4:	f8cc 3000 	str.w	r3, [ip]
 80169d8:	682b      	ldr	r3, [r5, #0]
 80169da:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80169de:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80169e0:	f8cd 8008 	str.w	r8, [sp, #8]
 80169e4:	9201      	str	r2, [sp, #4]
 80169e6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80169e8:	9200      	str	r2, [sp, #0]
 80169ea:	aa07      	add	r2, sp, #28
 80169ec:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80169ee:	463b      	mov	r3, r7
 80169f0:	47a0      	blx	r4
 80169f2:	b017      	add	sp, #92	@ 0x5c
 80169f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080169f8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80169f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169fc:	b08d      	sub	sp, #52	@ 0x34
 80169fe:	4688      	mov	r8, r1
 8016a00:	f8d3 c000 	ldr.w	ip, [r3]
 8016a04:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8016a06:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8016a0a:	680f      	ldr	r7, [r1, #0]
 8016a0c:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8016a10:	eba7 070c 	sub.w	r7, r7, ip
 8016a14:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8016a18:	edd3 6a07 	vldr	s13, [r3, #28]
 8016a1c:	42bc      	cmp	r4, r7
 8016a1e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016a20:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8016a24:	bfa8      	it	ge
 8016a26:	463c      	movge	r4, r7
 8016a28:	f9b1 9000 	ldrsh.w	r9, [r1]
 8016a2c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8016a30:	ee07 4a90 	vmov	s15, r4
 8016a34:	eb09 0e0c 	add.w	lr, r9, ip
 8016a38:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8016a3c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016a40:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8016a44:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8016a48:	4571      	cmp	r1, lr
 8016a4a:	ee25 4a04 	vmul.f32	s8, s10, s8
 8016a4e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016a52:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016a56:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8016a5a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8016a5e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8016a62:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016a66:	ee36 0a84 	vadd.f32	s0, s13, s8
 8016a6a:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016a6e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016a72:	f340 808c 	ble.w	8016b8e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8016a76:	eba1 060e 	sub.w	r6, r1, lr
 8016a7a:	fb96 f5f4 	sdiv	r5, r6, r4
 8016a7e:	ee07 5a10 	vmov	s14, r5
 8016a82:	2d00      	cmp	r5, #0
 8016a84:	fb04 6615 	mls	r6, r4, r5, r6
 8016a88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016a8c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8016a90:	eee7 0a24 	vfma.f32	s1, s14, s9
 8016a94:	eea7 1a05 	vfma.f32	s2, s14, s10
 8016a98:	dd12      	ble.n	8016ac0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8016a9a:	ee70 6a44 	vsub.f32	s13, s0, s8
 8016a9e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8016aa2:	ee31 2a45 	vsub.f32	s4, s2, s10
 8016aa6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aae:	bf14      	ite	ne
 8016ab0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016ab4:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016ab8:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016abc:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016ac0:	fb05 f204 	mul.w	r2, r5, r4
 8016ac4:	1abf      	subs	r7, r7, r2
 8016ac6:	4494      	add	ip, r2
 8016ac8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8016acc:	4411      	add	r1, r2
 8016ace:	eb09 020c 	add.w	r2, r9, ip
 8016ad2:	b209      	sxth	r1, r1
 8016ad4:	443a      	add	r2, r7
 8016ad6:	428a      	cmp	r2, r1
 8016ad8:	bfc4      	itt	gt
 8016ada:	eba1 0209 	subgt.w	r2, r1, r9
 8016ade:	eba2 070c 	subgt.w	r7, r2, ip
 8016ae2:	2f00      	cmp	r7, #0
 8016ae4:	dd50      	ble.n	8016b88 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8016ae6:	fb97 f1f4 	sdiv	r1, r7, r4
 8016aea:	fb04 7211 	mls	r2, r4, r1, r7
 8016aee:	b90a      	cbnz	r2, 8016af4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8016af0:	3901      	subs	r1, #1
 8016af2:	4622      	mov	r2, r4
 8016af4:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016af8:	6840      	ldr	r0, [r0, #4]
 8016afa:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8016afe:	44b6      	add	lr, r6
 8016b00:	f8d0 a000 	ldr.w	sl, [r0]
 8016b04:	2900      	cmp	r1, #0
 8016b06:	bfcc      	ite	gt
 8016b08:	46a1      	movgt	r9, r4
 8016b0a:	4691      	movle	r9, r2
 8016b0c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016b0e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8016b10:	fb04 e505 	mla	r5, r4, r5, lr
 8016b14:	eef0 6a42 	vmov.f32	s13, s4
 8016b18:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8016b1c:	9008      	str	r0, [sp, #32]
 8016b1e:	eeb0 7a61 	vmov.f32	s14, s3
 8016b22:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8016b24:	695b      	ldr	r3, [r3, #20]
 8016b26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016b2a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8016b2e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016b32:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016b34:	445b      	add	r3, fp
 8016b36:	9307      	str	r3, [sp, #28]
 8016b38:	ee16 3a90 	vmov	r3, s13
 8016b3c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8016b40:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016b44:	ee21 3a23 	vmul.f32	s6, s2, s7
 8016b48:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016b4c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016b50:	ee17 7a90 	vmov	r7, s15
 8016b54:	ee73 7a42 	vsub.f32	s15, s6, s4
 8016b58:	fb97 f7f4 	sdiv	r7, r7, r4
 8016b5c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016b60:	ee17 ca90 	vmov	ip, s15
 8016b64:	fb9c fcf4 	sdiv	ip, ip, r4
 8016b68:	fb0c 3306 	mla	r3, ip, r6, r3
 8016b6c:	9302      	str	r3, [sp, #8]
 8016b6e:	ee17 3a10 	vmov	r3, s14
 8016b72:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8016b76:	fb07 3706 	mla	r7, r7, r6, r3
 8016b7a:	eba9 0306 	sub.w	r3, r9, r6
 8016b7e:	e9cd 4700 	strd	r4, r7, [sp]
 8016b82:	f8da 4008 	ldr.w	r4, [sl, #8]
 8016b86:	47a0      	blx	r4
 8016b88:	b00d      	add	sp, #52	@ 0x34
 8016b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b8e:	2500      	movs	r5, #0
 8016b90:	462e      	mov	r6, r5
 8016b92:	e799      	b.n	8016ac8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08016b94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b98:	b0db      	sub	sp, #364	@ 0x16c
 8016b9a:	461d      	mov	r5, r3
 8016b9c:	4614      	mov	r4, r2
 8016b9e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8016ba2:	910f      	str	r1, [sp, #60]	@ 0x3c
 8016ba4:	4629      	mov	r1, r5
 8016ba6:	930a      	str	r3, [sp, #40]	@ 0x28
 8016ba8:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8016bac:	9009      	str	r0, [sp, #36]	@ 0x24
 8016bae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016bb0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8016bb4:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8016bb8:	9310      	str	r3, [sp, #64]	@ 0x40
 8016bba:	6803      	ldr	r3, [r0, #0]
 8016bbc:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8016bbe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8016bc2:	47b8      	blx	r7
 8016bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016bc6:	6058      	str	r0, [r3, #4]
 8016bc8:	2800      	cmp	r0, #0
 8016bca:	f000 83a1 	beq.w	8017310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016bce:	682b      	ldr	r3, [r5, #0]
 8016bd0:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8016bd4:	ed94 7a02 	vldr	s14, [r4, #8]
 8016bd8:	9314      	str	r3, [sp, #80]	@ 0x50
 8016bda:	686b      	ldr	r3, [r5, #4]
 8016bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016be0:	9315      	str	r3, [sp, #84]	@ 0x54
 8016be2:	4bc1      	ldr	r3, [pc, #772]	@ (8016ee8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016be4:	7819      	ldrb	r1, [r3, #0]
 8016be6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8016bea:	2900      	cmp	r1, #0
 8016bec:	bf16      	itet	ne
 8016bee:	4619      	movne	r1, r3
 8016bf0:	4611      	moveq	r1, r2
 8016bf2:	4613      	movne	r3, r2
 8016bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bf8:	9116      	str	r1, [sp, #88]	@ 0x58
 8016bfa:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8016bfe:	f240 8387 	bls.w	8017310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c02:	ed94 7a07 	vldr	s14, [r4, #28]
 8016c06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c0e:	f240 837f 	bls.w	8017310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c12:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8016c16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c1e:	f240 8377 	bls.w	8017310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c22:	6822      	ldr	r2, [r4, #0]
 8016c24:	4bb1      	ldr	r3, [pc, #708]	@ (8016eec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8016c26:	429a      	cmp	r2, r3
 8016c28:	f2c0 8372 	blt.w	8017310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c2c:	49b0      	ldr	r1, [pc, #704]	@ (8016ef0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8016c2e:	6963      	ldr	r3, [r4, #20]
 8016c30:	428a      	cmp	r2, r1
 8016c32:	f300 836d 	bgt.w	8017310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c36:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8016c3a:	48ae      	ldr	r0, [pc, #696]	@ (8016ef4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016c3c:	33ff      	adds	r3, #255	@ 0xff
 8016c3e:	4283      	cmp	r3, r0
 8016c40:	f200 8366 	bhi.w	8017310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c44:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8016c46:	4dac      	ldr	r5, [pc, #688]	@ (8016ef8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8016c48:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8016c4c:	33ff      	adds	r3, #255	@ 0xff
 8016c4e:	42ab      	cmp	r3, r5
 8016c50:	f200 835e 	bhi.w	8017310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c54:	6862      	ldr	r2, [r4, #4]
 8016c56:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8016c5a:	33ff      	adds	r3, #255	@ 0xff
 8016c5c:	4283      	cmp	r3, r0
 8016c5e:	f200 8357 	bhi.w	8017310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c62:	69a1      	ldr	r1, [r4, #24]
 8016c64:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8016c68:	33ff      	adds	r3, #255	@ 0xff
 8016c6a:	4283      	cmp	r3, r0
 8016c6c:	f200 8350 	bhi.w	8017310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c70:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8016c72:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8016c76:	30ff      	adds	r0, #255	@ 0xff
 8016c78:	42a8      	cmp	r0, r5
 8016c7a:	f200 8349 	bhi.w	8017310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016c7e:	428a      	cmp	r2, r1
 8016c80:	f280 8110 	bge.w	8016ea4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8016c84:	429a      	cmp	r2, r3
 8016c86:	f300 8119 	bgt.w	8016ebc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8016c8a:	4299      	cmp	r1, r3
 8016c8c:	f280 811d 	bge.w	8016eca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8016c90:	2502      	movs	r5, #2
 8016c92:	2701      	movs	r7, #1
 8016c94:	46a9      	mov	r9, r5
 8016c96:	46b8      	mov	r8, r7
 8016c98:	f04f 0a00 	mov.w	sl, #0
 8016c9c:	4621      	mov	r1, r4
 8016c9e:	a849      	add	r0, sp, #292	@ 0x124
 8016ca0:	f004 f88a 	bl	801adb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016ca4:	4622      	mov	r2, r4
 8016ca6:	4653      	mov	r3, sl
 8016ca8:	a949      	add	r1, sp, #292	@ 0x124
 8016caa:	f8cd 9000 	str.w	r9, [sp]
 8016cae:	a819      	add	r0, sp, #100	@ 0x64
 8016cb0:	f004 f9b2 	bl	801b018 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016cb4:	4622      	mov	r2, r4
 8016cb6:	4653      	mov	r3, sl
 8016cb8:	a949      	add	r1, sp, #292	@ 0x124
 8016cba:	f8cd 8000 	str.w	r8, [sp]
 8016cbe:	a829      	add	r0, sp, #164	@ 0xa4
 8016cc0:	f004 f9aa 	bl	801b018 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016cc4:	4643      	mov	r3, r8
 8016cc6:	4622      	mov	r2, r4
 8016cc8:	a949      	add	r1, sp, #292	@ 0x124
 8016cca:	f8cd 9000 	str.w	r9, [sp]
 8016cce:	a839      	add	r0, sp, #228	@ 0xe4
 8016cd0:	f004 f9a2 	bl	801b018 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016cd4:	42af      	cmp	r7, r5
 8016cd6:	af12      	add	r7, sp, #72	@ 0x48
 8016cd8:	bfb7      	itett	lt
 8016cda:	2300      	movlt	r3, #0
 8016cdc:	2301      	movge	r3, #1
 8016cde:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8016ce0:	ac19      	addlt	r4, sp, #100	@ 0x64
 8016ce2:	bfb1      	iteee	lt
 8016ce4:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8016ce6:	ad19      	addge	r5, sp, #100	@ 0x64
 8016ce8:	930e      	strge	r3, [sp, #56]	@ 0x38
 8016cea:	ac29      	addge	r4, sp, #164	@ 0xa4
 8016cec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016cee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016cf2:	e887 0003 	stmia.w	r7, {r0, r1}
 8016cf6:	b928      	cbnz	r0, 8016d04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8016cf8:	4b80      	ldr	r3, [pc, #512]	@ (8016efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8016cfa:	6818      	ldr	r0, [r3, #0]
 8016cfc:	6803      	ldr	r3, [r0, #0]
 8016cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d00:	4798      	blx	r3
 8016d02:	6038      	str	r0, [r7, #0]
 8016d04:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8016d06:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016d0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016d0e:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8016d10:	930c      	str	r3, [sp, #48]	@ 0x30
 8016d12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016d14:	6963      	ldr	r3, [r4, #20]
 8016d16:	440b      	add	r3, r1
 8016d18:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016d1c:	4408      	add	r0, r1
 8016d1e:	b200      	sxth	r0, r0
 8016d20:	4283      	cmp	r3, r0
 8016d22:	900d      	str	r0, [sp, #52]	@ 0x34
 8016d24:	f280 80dd 	bge.w	8016ee2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8016d28:	428b      	cmp	r3, r1
 8016d2a:	da08      	bge.n	8016d3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016d2c:	2a00      	cmp	r2, #0
 8016d2e:	dd06      	ble.n	8016d3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016d30:	1acb      	subs	r3, r1, r3
 8016d32:	429a      	cmp	r2, r3
 8016d34:	f2c0 80e4 	blt.w	8016f00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	f300 80e2 	bgt.w	8016f02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8016d3e:	6967      	ldr	r7, [r4, #20]
 8016d40:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8016d44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016d46:	443b      	add	r3, r7
 8016d48:	461f      	mov	r7, r3
 8016d4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016d4c:	1bdf      	subs	r7, r3, r7
 8016d4e:	4297      	cmp	r7, r2
 8016d50:	bfa8      	it	ge
 8016d52:	4617      	movge	r7, r2
 8016d54:	2f00      	cmp	r7, #0
 8016d56:	f340 8166 	ble.w	8017026 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8016d5a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8016d5c:	6829      	ldr	r1, [r5, #0]
 8016d5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016d62:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016d66:	4411      	add	r1, r2
 8016d68:	6820      	ldr	r0, [r4, #0]
 8016d6a:	4299      	cmp	r1, r3
 8016d6c:	dd1a      	ble.n	8016da4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016d6e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016d72:	4402      	add	r2, r0
 8016d74:	440b      	add	r3, r1
 8016d76:	b21b      	sxth	r3, r3
 8016d78:	429a      	cmp	r2, r3
 8016d7a:	dc13      	bgt.n	8016da4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016d7c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016d7e:	a912      	add	r1, sp, #72	@ 0x48
 8016d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	9206      	str	r2, [sp, #24]
 8016d88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016d8a:	9500      	str	r5, [sp, #0]
 8016d8c:	9205      	str	r2, [sp, #20]
 8016d8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016d90:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016d94:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8016d96:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016d9a:	aa49      	add	r2, sp, #292	@ 0x124
 8016d9c:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8016da0:	4623      	mov	r3, r4
 8016da2:	47c8      	blx	r9
 8016da4:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8016da8:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8016dac:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8016db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016db4:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8016db8:	68a1      	ldr	r1, [r4, #8]
 8016dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016dbe:	ed94 6a08 	vldr	s12, [r4, #32]
 8016dc2:	edd4 6a07 	vldr	s13, [r4, #28]
 8016dc6:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8016dca:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016dce:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8016dd2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016dd6:	edc4 6a07 	vstr	s13, [r4, #28]
 8016dda:	441a      	add	r2, r3
 8016ddc:	6963      	ldr	r3, [r4, #20]
 8016dde:	3301      	adds	r3, #1
 8016de0:	6022      	str	r2, [r4, #0]
 8016de2:	6163      	str	r3, [r4, #20]
 8016de4:	69a3      	ldr	r3, [r4, #24]
 8016de6:	3b01      	subs	r3, #1
 8016de8:	61a3      	str	r3, [r4, #24]
 8016dea:	6923      	ldr	r3, [r4, #16]
 8016dec:	440b      	add	r3, r1
 8016dee:	68e1      	ldr	r1, [r4, #12]
 8016df0:	428b      	cmp	r3, r1
 8016df2:	6123      	str	r3, [r4, #16]
 8016df4:	db15      	blt.n	8016e22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8016df6:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8016dfa:	3201      	adds	r2, #1
 8016dfc:	1a5b      	subs	r3, r3, r1
 8016dfe:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016e02:	6022      	str	r2, [r4, #0]
 8016e04:	6123      	str	r3, [r4, #16]
 8016e06:	edc4 6a07 	vstr	s13, [r4, #28]
 8016e0a:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8016e0e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016e12:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8016e16:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8016e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e1e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8016e22:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8016e26:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8016e2a:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8016e2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016e32:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8016e36:	68a9      	ldr	r1, [r5, #8]
 8016e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e3c:	ed95 6a08 	vldr	s12, [r5, #32]
 8016e40:	edd5 6a07 	vldr	s13, [r5, #28]
 8016e44:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8016e48:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016e4c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8016e50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016e54:	edc5 6a07 	vstr	s13, [r5, #28]
 8016e58:	441a      	add	r2, r3
 8016e5a:	696b      	ldr	r3, [r5, #20]
 8016e5c:	3301      	adds	r3, #1
 8016e5e:	602a      	str	r2, [r5, #0]
 8016e60:	616b      	str	r3, [r5, #20]
 8016e62:	69ab      	ldr	r3, [r5, #24]
 8016e64:	3b01      	subs	r3, #1
 8016e66:	61ab      	str	r3, [r5, #24]
 8016e68:	692b      	ldr	r3, [r5, #16]
 8016e6a:	440b      	add	r3, r1
 8016e6c:	68e9      	ldr	r1, [r5, #12]
 8016e6e:	428b      	cmp	r3, r1
 8016e70:	612b      	str	r3, [r5, #16]
 8016e72:	db15      	blt.n	8016ea0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8016e74:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8016e78:	3201      	adds	r2, #1
 8016e7a:	1a5b      	subs	r3, r3, r1
 8016e7c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016e80:	602a      	str	r2, [r5, #0]
 8016e82:	612b      	str	r3, [r5, #16]
 8016e84:	edc5 6a07 	vstr	s13, [r5, #28]
 8016e88:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8016e8c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016e90:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8016e94:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8016e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e9c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8016ea0:	3f01      	subs	r7, #1
 8016ea2:	e757      	b.n	8016d54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016ea4:	4299      	cmp	r1, r3
 8016ea6:	dc13      	bgt.n	8016ed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016ea8:	429a      	cmp	r2, r3
 8016eaa:	da14      	bge.n	8016ed6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8016eac:	2502      	movs	r5, #2
 8016eae:	2703      	movs	r7, #3
 8016eb0:	f04f 0800 	mov.w	r8, #0
 8016eb4:	46a9      	mov	r9, r5
 8016eb6:	f04f 0a01 	mov.w	sl, #1
 8016eba:	e6ef      	b.n	8016c9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016ebc:	2501      	movs	r5, #1
 8016ebe:	2700      	movs	r7, #0
 8016ec0:	46a9      	mov	r9, r5
 8016ec2:	46b8      	mov	r8, r7
 8016ec4:	f04f 0a02 	mov.w	sl, #2
 8016ec8:	e6e8      	b.n	8016c9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016eca:	2501      	movs	r5, #1
 8016ecc:	2702      	movs	r7, #2
 8016ece:	e6e1      	b.n	8016c94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016ed0:	2500      	movs	r5, #0
 8016ed2:	2701      	movs	r7, #1
 8016ed4:	e7f4      	b.n	8016ec0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016ed6:	2702      	movs	r7, #2
 8016ed8:	2503      	movs	r5, #3
 8016eda:	f04f 0900 	mov.w	r9, #0
 8016ede:	46b8      	mov	r8, r7
 8016ee0:	e7e9      	b.n	8016eb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8016ee2:	4613      	mov	r3, r2
 8016ee4:	e728      	b.n	8016d38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8016ee6:	bf00      	nop
 8016ee8:	200279d0 	.word	0x200279d0
 8016eec:	fffd8f01 	.word	0xfffd8f01
 8016ef0:	00027100 	.word	0x00027100
 8016ef4:	0004e1ff 	.word	0x0004e1ff
 8016ef8:	0004e1fe 	.word	0x0004e1fe
 8016efc:	200279d8 	.word	0x200279d8
 8016f00:	4613      	mov	r3, r2
 8016f02:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8016f04:	469e      	mov	lr, r3
 8016f06:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8016f08:	469c      	mov	ip, r3
 8016f0a:	9111      	str	r1, [sp, #68]	@ 0x44
 8016f0c:	f04f 0900 	mov.w	r9, #0
 8016f10:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8016f14:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8016f18:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8016f1c:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8016f20:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8016f24:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8016f28:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8016f2c:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8016f30:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8016f34:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8016f38:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8016f3c:	f1bc 0f00 	cmp.w	ip, #0
 8016f40:	d147      	bne.n	8016fd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8016f42:	eb03 0c07 	add.w	ip, r3, r7
 8016f46:	1ad7      	subs	r7, r2, r3
 8016f48:	f1b9 0f00 	cmp.w	r9, #0
 8016f4c:	d009      	beq.n	8016f62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8016f4e:	9029      	str	r0, [sp, #164]	@ 0xa4
 8016f50:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8016f54:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8016f58:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8016f5c:	912d      	str	r1, [sp, #180]	@ 0xb4
 8016f5e:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8016f62:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8016f64:	f04f 0800 	mov.w	r8, #0
 8016f68:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8016f6c:	9111      	str	r1, [sp, #68]	@ 0x44
 8016f6e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8016f72:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8016f76:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8016f7a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8016f7e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8016f82:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8016f86:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8016f8a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8016f8e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8016f92:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8016f96:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8016f9a:	f1be 0f00 	cmp.w	lr, #0
 8016f9e:	d031      	beq.n	8017004 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016fa0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8016fa2:	4450      	add	r0, sl
 8016fa4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016fa8:	4431      	add	r1, r6
 8016faa:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016fae:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016fb2:	4549      	cmp	r1, r9
 8016fb4:	db08      	blt.n	8016fc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8016fb6:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016fba:	3001      	adds	r0, #1
 8016fbc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016fc0:	eba1 0109 	sub.w	r1, r1, r9
 8016fc4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016fc8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016fcc:	f04f 0801 	mov.w	r8, #1
 8016fd0:	e7e3      	b.n	8016f9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8016fd2:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8016fd4:	4450      	add	r0, sl
 8016fd6:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016fda:	4431      	add	r1, r6
 8016fdc:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016fe0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016fe4:	4541      	cmp	r1, r8
 8016fe6:	db08      	blt.n	8016ffa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8016fe8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016fec:	3001      	adds	r0, #1
 8016fee:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016ff2:	eba1 0108 	sub.w	r1, r1, r8
 8016ff6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016ffa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016ffe:	f04f 0901 	mov.w	r9, #1
 8017002:	e79b      	b.n	8016f3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8017004:	449c      	add	ip, r3
 8017006:	1aff      	subs	r7, r7, r3
 8017008:	f1b8 0f00 	cmp.w	r8, #0
 801700c:	d009      	beq.n	8017022 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801700e:	9019      	str	r0, [sp, #100]	@ 0x64
 8017010:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8017014:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8017018:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801701c:	911d      	str	r1, [sp, #116]	@ 0x74
 801701e:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8017022:	1ad2      	subs	r2, r2, r3
 8017024:	e68b      	b.n	8016d3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017026:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017028:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801702a:	2b00      	cmp	r3, #0
 801702c:	f000 80d1 	beq.w	80171d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8017030:	ad19      	add	r5, sp, #100	@ 0x64
 8017032:	ac39      	add	r4, sp, #228	@ 0xe4
 8017034:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8017036:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801703a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801703e:	930c      	str	r3, [sp, #48]	@ 0x30
 8017040:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017042:	6963      	ldr	r3, [r4, #20]
 8017044:	440b      	add	r3, r1
 8017046:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801704a:	4408      	add	r0, r1
 801704c:	b200      	sxth	r0, r0
 801704e:	4283      	cmp	r3, r0
 8017050:	900d      	str	r0, [sp, #52]	@ 0x34
 8017052:	f280 80c1 	bge.w	80171d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8017056:	428b      	cmp	r3, r1
 8017058:	da08      	bge.n	801706c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801705a:	2a00      	cmp	r2, #0
 801705c:	dd06      	ble.n	801706c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801705e:	1acb      	subs	r3, r1, r3
 8017060:	429a      	cmp	r2, r3
 8017062:	f2c0 80bb 	blt.w	80171dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8017066:	2b00      	cmp	r3, #0
 8017068:	f300 80b9 	bgt.w	80171de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801706c:	6967      	ldr	r7, [r4, #20]
 801706e:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8017072:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017074:	443b      	add	r3, r7
 8017076:	461f      	mov	r7, r3
 8017078:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801707a:	1bdf      	subs	r7, r3, r7
 801707c:	4297      	cmp	r7, r2
 801707e:	bfa8      	it	ge
 8017080:	4617      	movge	r7, r2
 8017082:	2f00      	cmp	r7, #0
 8017084:	f340 813c 	ble.w	8017300 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8017088:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801708a:	6829      	ldr	r1, [r5, #0]
 801708c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017090:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017094:	4411      	add	r1, r2
 8017096:	6820      	ldr	r0, [r4, #0]
 8017098:	4299      	cmp	r1, r3
 801709a:	dd1a      	ble.n	80170d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801709c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80170a0:	4402      	add	r2, r0
 80170a2:	440b      	add	r3, r1
 80170a4:	b21b      	sxth	r3, r3
 80170a6:	429a      	cmp	r2, r3
 80170a8:	dc13      	bgt.n	80170d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80170aa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80170ac:	a912      	add	r1, sp, #72	@ 0x48
 80170ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80170b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	9206      	str	r2, [sp, #24]
 80170b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80170b8:	9500      	str	r5, [sp, #0]
 80170ba:	9205      	str	r2, [sp, #20]
 80170bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80170be:	e9cd b203 	strd	fp, r2, [sp, #12]
 80170c2:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80170c4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80170c8:	aa49      	add	r2, sp, #292	@ 0x124
 80170ca:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80170ce:	4623      	mov	r3, r4
 80170d0:	47c8      	blx	r9
 80170d2:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80170d6:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80170da:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80170de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80170e2:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80170e6:	68a1      	ldr	r1, [r4, #8]
 80170e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80170ec:	ed94 6a08 	vldr	s12, [r4, #32]
 80170f0:	edd4 6a07 	vldr	s13, [r4, #28]
 80170f4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80170f8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80170fc:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8017100:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017104:	edc4 6a07 	vstr	s13, [r4, #28]
 8017108:	441a      	add	r2, r3
 801710a:	6963      	ldr	r3, [r4, #20]
 801710c:	3301      	adds	r3, #1
 801710e:	6022      	str	r2, [r4, #0]
 8017110:	6163      	str	r3, [r4, #20]
 8017112:	69a3      	ldr	r3, [r4, #24]
 8017114:	3b01      	subs	r3, #1
 8017116:	61a3      	str	r3, [r4, #24]
 8017118:	6923      	ldr	r3, [r4, #16]
 801711a:	440b      	add	r3, r1
 801711c:	68e1      	ldr	r1, [r4, #12]
 801711e:	428b      	cmp	r3, r1
 8017120:	6123      	str	r3, [r4, #16]
 8017122:	db15      	blt.n	8017150 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8017124:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8017128:	3201      	adds	r2, #1
 801712a:	1a5b      	subs	r3, r3, r1
 801712c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017130:	6022      	str	r2, [r4, #0]
 8017132:	6123      	str	r3, [r4, #16]
 8017134:	edc4 6a07 	vstr	s13, [r4, #28]
 8017138:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801713c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017140:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8017144:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8017148:	ee77 7a27 	vadd.f32	s15, s14, s15
 801714c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8017150:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8017154:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8017158:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801715c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017160:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8017164:	68a9      	ldr	r1, [r5, #8]
 8017166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801716a:	ed95 6a08 	vldr	s12, [r5, #32]
 801716e:	edd5 6a07 	vldr	s13, [r5, #28]
 8017172:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8017176:	ee76 6a86 	vadd.f32	s13, s13, s12
 801717a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801717e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017182:	edc5 6a07 	vstr	s13, [r5, #28]
 8017186:	441a      	add	r2, r3
 8017188:	696b      	ldr	r3, [r5, #20]
 801718a:	3301      	adds	r3, #1
 801718c:	602a      	str	r2, [r5, #0]
 801718e:	616b      	str	r3, [r5, #20]
 8017190:	69ab      	ldr	r3, [r5, #24]
 8017192:	3b01      	subs	r3, #1
 8017194:	61ab      	str	r3, [r5, #24]
 8017196:	692b      	ldr	r3, [r5, #16]
 8017198:	440b      	add	r3, r1
 801719a:	68e9      	ldr	r1, [r5, #12]
 801719c:	428b      	cmp	r3, r1
 801719e:	612b      	str	r3, [r5, #16]
 80171a0:	db15      	blt.n	80171ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80171a2:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80171a6:	3201      	adds	r2, #1
 80171a8:	1a5b      	subs	r3, r3, r1
 80171aa:	ee76 6a26 	vadd.f32	s13, s12, s13
 80171ae:	602a      	str	r2, [r5, #0]
 80171b0:	612b      	str	r3, [r5, #16]
 80171b2:	edc5 6a07 	vstr	s13, [r5, #28]
 80171b6:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80171ba:	ee36 7a87 	vadd.f32	s14, s13, s14
 80171be:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80171c2:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80171c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80171ca:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80171ce:	3f01      	subs	r7, #1
 80171d0:	e757      	b.n	8017082 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80171d2:	ad39      	add	r5, sp, #228	@ 0xe4
 80171d4:	ac19      	add	r4, sp, #100	@ 0x64
 80171d6:	e72d      	b.n	8017034 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80171d8:	4613      	mov	r3, r2
 80171da:	e744      	b.n	8017066 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80171dc:	4613      	mov	r3, r2
 80171de:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 80171e0:	469e      	mov	lr, r3
 80171e2:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 80171e6:	461f      	mov	r7, r3
 80171e8:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 80171ec:	f04f 0900 	mov.w	r9, #0
 80171f0:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 80171f4:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 80171f8:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 80171fc:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8017200:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8017204:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8017206:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801720a:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801720e:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8017212:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8017216:	960e      	str	r6, [sp, #56]	@ 0x38
 8017218:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801721c:	2f00      	cmp	r7, #0
 801721e:	d146      	bne.n	80172ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017220:	449c      	add	ip, r3
 8017222:	1ad7      	subs	r7, r2, r3
 8017224:	f1b9 0f00 	cmp.w	r9, #0
 8017228:	d009      	beq.n	801723e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801722a:	9039      	str	r0, [sp, #228]	@ 0xe4
 801722c:	913d      	str	r1, [sp, #244]	@ 0xf4
 801722e:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8017232:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8017236:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801723a:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801723e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8017240:	f04f 0800 	mov.w	r8, #0
 8017244:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8017248:	910e      	str	r1, [sp, #56]	@ 0x38
 801724a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801724e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8017252:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8017256:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801725a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801725e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8017262:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8017266:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801726a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801726e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8017272:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8017276:	f1be 0f00 	cmp.w	lr, #0
 801727a:	d030      	beq.n	80172de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801727c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801727e:	4450      	add	r0, sl
 8017280:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017284:	4431      	add	r1, r6
 8017286:	ee37 7a04 	vadd.f32	s14, s14, s8
 801728a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801728e:	4549      	cmp	r1, r9
 8017290:	db08      	blt.n	80172a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8017292:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017296:	3001      	adds	r0, #1
 8017298:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801729c:	eba1 0109 	sub.w	r1, r1, r9
 80172a0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80172a4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80172a8:	f04f 0801 	mov.w	r8, #1
 80172ac:	e7e3      	b.n	8017276 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80172ae:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80172b0:	4450      	add	r0, sl
 80172b2:	ee37 7a24 	vadd.f32	s14, s14, s9
 80172b6:	4431      	add	r1, r6
 80172b8:	ee77 7a84 	vadd.f32	s15, s15, s8
 80172bc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80172c0:	4541      	cmp	r1, r8
 80172c2:	db08      	blt.n	80172d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80172c4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80172c8:	3001      	adds	r0, #1
 80172ca:	ee37 7a25 	vadd.f32	s14, s14, s11
 80172ce:	eba1 0108 	sub.w	r1, r1, r8
 80172d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80172d6:	3f01      	subs	r7, #1
 80172d8:	f04f 0901 	mov.w	r9, #1
 80172dc:	e79e      	b.n	801721c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80172de:	449c      	add	ip, r3
 80172e0:	1aff      	subs	r7, r7, r3
 80172e2:	f1b8 0f00 	cmp.w	r8, #0
 80172e6:	d009      	beq.n	80172fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80172e8:	9019      	str	r0, [sp, #100]	@ 0x64
 80172ea:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80172ee:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80172f2:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80172f6:	911d      	str	r1, [sp, #116]	@ 0x74
 80172f8:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80172fc:	1ad2      	subs	r2, r2, r3
 80172fe:	e6b5      	b.n	801706c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	b923      	cbnz	r3, 8017310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017306:	4b04      	ldr	r3, [pc, #16]	@ (8017318 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8017308:	6818      	ldr	r0, [r3, #0]
 801730a:	6803      	ldr	r3, [r0, #0]
 801730c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801730e:	4798      	blx	r3
 8017310:	b05b      	add	sp, #364	@ 0x16c
 8017312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017316:	bf00      	nop
 8017318:	200279d8 	.word	0x200279d8

0801731c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 801731c:	b570      	push	{r4, r5, r6, lr}
 801731e:	4604      	mov	r4, r0
 8017320:	2500      	movs	r5, #0
 8017322:	9805      	ldr	r0, [sp, #20]
 8017324:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8017328:	6061      	str	r1, [r4, #4]
 801732a:	8263      	strh	r3, [r4, #18]
 801732c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8017330:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017334:	8025      	strh	r5, [r4, #0]
 8017336:	7221      	strb	r1, [r4, #8]
 8017338:	7266      	strb	r6, [r4, #9]
 801733a:	60e0      	str	r0, [r4, #12]
 801733c:	8222      	strh	r2, [r4, #16]
 801733e:	82a3      	strh	r3, [r4, #20]
 8017340:	82e5      	strh	r5, [r4, #22]
 8017342:	8325      	strh	r5, [r4, #24]
 8017344:	8365      	strh	r5, [r4, #26]
 8017346:	83a5      	strh	r5, [r4, #28]
 8017348:	83e5      	strh	r5, [r4, #30]
 801734a:	8425      	strh	r5, [r4, #32]
 801734c:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8017350:	b32e      	cbz	r6, 801739e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8017352:	6803      	ldr	r3, [r0, #0]
 8017354:	695b      	ldr	r3, [r3, #20]
 8017356:	4798      	blx	r3
 8017358:	4606      	mov	r6, r0
 801735a:	b300      	cbz	r0, 801739e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801735c:	68e0      	ldr	r0, [r4, #12]
 801735e:	4631      	mov	r1, r6
 8017360:	6803      	ldr	r3, [r0, #0]
 8017362:	68db      	ldr	r3, [r3, #12]
 8017364:	4798      	blx	r3
 8017366:	4605      	mov	r5, r0
 8017368:	b1c8      	cbz	r0, 801739e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801736a:	7b43      	ldrb	r3, [r0, #13]
 801736c:	7a82      	ldrb	r2, [r0, #10]
 801736e:	005b      	lsls	r3, r3, #1
 8017370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017374:	4313      	orrs	r3, r2
 8017376:	8423      	strh	r3, [r4, #32]
 8017378:	7a63      	ldrb	r3, [r4, #9]
 801737a:	2b06      	cmp	r3, #6
 801737c:	d10f      	bne.n	801739e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801737e:	68e0      	ldr	r0, [r4, #12]
 8017380:	462a      	mov	r2, r5
 8017382:	4631      	mov	r1, r6
 8017384:	6803      	ldr	r3, [r0, #0]
 8017386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017388:	4798      	blx	r3
 801738a:	7b6b      	ldrb	r3, [r5, #13]
 801738c:	005b      	lsls	r3, r3, #1
 801738e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017392:	7aab      	ldrb	r3, [r5, #10]
 8017394:	4313      	orrs	r3, r2
 8017396:	4418      	add	r0, r3
 8017398:	8c23      	ldrh	r3, [r4, #32]
 801739a:	4418      	add	r0, r3
 801739c:	8420      	strh	r0, [r4, #32]
 801739e:	4620      	mov	r0, r4
 80173a0:	bd70      	pop	{r4, r5, r6, pc}

080173a2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80173a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173a6:	2400      	movs	r4, #0
 80173a8:	b085      	sub	sp, #20
 80173aa:	4681      	mov	r9, r0
 80173ac:	4688      	mov	r8, r1
 80173ae:	4692      	mov	sl, r2
 80173b0:	469b      	mov	fp, r3
 80173b2:	4627      	mov	r7, r4
 80173b4:	4625      	mov	r5, r4
 80173b6:	4626      	mov	r6, r4
 80173b8:	4554      	cmp	r4, sl
 80173ba:	da2a      	bge.n	8017412 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80173bc:	2300      	movs	r3, #0
 80173be:	9303      	str	r3, [sp, #12]
 80173c0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80173c4:	429d      	cmp	r5, r3
 80173c6:	d004      	beq.n	80173d2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80173c8:	f242 030b 	movw	r3, #8203	@ 0x200b
 80173cc:	429d      	cmp	r5, r3
 80173ce:	bf18      	it	ne
 80173d0:	462f      	movne	r7, r5
 80173d2:	ab03      	add	r3, sp, #12
 80173d4:	4642      	mov	r2, r8
 80173d6:	4659      	mov	r1, fp
 80173d8:	4648      	mov	r0, r9
 80173da:	f003 fb03 	bl	801a9e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80173de:	4605      	mov	r5, r0
 80173e0:	b1b8      	cbz	r0, 8017412 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80173e2:	280a      	cmp	r0, #10
 80173e4:	d015      	beq.n	8017412 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80173e6:	9a03      	ldr	r2, [sp, #12]
 80173e8:	b18a      	cbz	r2, 801740e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80173ea:	7b50      	ldrb	r0, [r2, #13]
 80173ec:	4639      	mov	r1, r7
 80173ee:	7a93      	ldrb	r3, [r2, #10]
 80173f0:	0040      	lsls	r0, r0, #1
 80173f2:	8895      	ldrh	r5, [r2, #4]
 80173f4:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80173f8:	4303      	orrs	r3, r0
 80173fa:	4640      	mov	r0, r8
 80173fc:	9301      	str	r3, [sp, #4]
 80173fe:	f8d8 3000 	ldr.w	r3, [r8]
 8017402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017404:	4798      	blx	r3
 8017406:	9b01      	ldr	r3, [sp, #4]
 8017408:	4418      	add	r0, r3
 801740a:	4406      	add	r6, r0
 801740c:	b2b6      	uxth	r6, r6
 801740e:	3401      	adds	r4, #1
 8017410:	e7d2      	b.n	80173b8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8017412:	4630      	mov	r0, r6
 8017414:	b005      	add	sp, #20
 8017416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801741a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801741a:	2a02      	cmp	r2, #2
 801741c:	b530      	push	{r4, r5, lr}
 801741e:	d011      	beq.n	8017444 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8017420:	2a03      	cmp	r2, #3
 8017422:	d01c      	beq.n	801745e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8017424:	2a01      	cmp	r2, #1
 8017426:	d10c      	bne.n	8017442 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017428:	888b      	ldrh	r3, [r1, #4]
 801742a:	8801      	ldrh	r1, [r0, #0]
 801742c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017430:	1a5b      	subs	r3, r3, r1
 8017432:	8844      	ldrh	r4, [r0, #2]
 8017434:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017438:	1a9b      	subs	r3, r3, r2
 801743a:	8004      	strh	r4, [r0, #0]
 801743c:	8081      	strh	r1, [r0, #4]
 801743e:	8043      	strh	r3, [r0, #2]
 8017440:	80c2      	strh	r2, [r0, #6]
 8017442:	bd30      	pop	{r4, r5, pc}
 8017444:	88cb      	ldrh	r3, [r1, #6]
 8017446:	8842      	ldrh	r2, [r0, #2]
 8017448:	1a9b      	subs	r3, r3, r2
 801744a:	88c2      	ldrh	r2, [r0, #6]
 801744c:	1a9b      	subs	r3, r3, r2
 801744e:	888a      	ldrh	r2, [r1, #4]
 8017450:	8801      	ldrh	r1, [r0, #0]
 8017452:	8043      	strh	r3, [r0, #2]
 8017454:	1a52      	subs	r2, r2, r1
 8017456:	8881      	ldrh	r1, [r0, #4]
 8017458:	1a52      	subs	r2, r2, r1
 801745a:	8002      	strh	r2, [r0, #0]
 801745c:	e7f1      	b.n	8017442 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801745e:	88cb      	ldrh	r3, [r1, #6]
 8017460:	8841      	ldrh	r1, [r0, #2]
 8017462:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017466:	1a5b      	subs	r3, r3, r1
 8017468:	f9b0 5000 	ldrsh.w	r5, [r0]
 801746c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017470:	1a9b      	subs	r3, r3, r2
 8017472:	8045      	strh	r5, [r0, #2]
 8017474:	8082      	strh	r2, [r0, #4]
 8017476:	8003      	strh	r3, [r0, #0]
 8017478:	80c4      	strh	r4, [r0, #6]
 801747a:	e7e2      	b.n	8017442 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801747c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801747c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017480:	b09f      	sub	sp, #124	@ 0x7c
 8017482:	920f      	str	r2, [sp, #60]	@ 0x3c
 8017484:	9312      	str	r3, [sp, #72]	@ 0x48
 8017486:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8017488:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801748a:	8812      	ldrh	r2, [r2, #0]
 801748c:	889b      	ldrh	r3, [r3, #4]
 801748e:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8017490:	4413      	add	r3, r2
 8017492:	900e      	str	r0, [sp, #56]	@ 0x38
 8017494:	6828      	ldr	r0, [r5, #0]
 8017496:	b21b      	sxth	r3, r3
 8017498:	9117      	str	r1, [sp, #92]	@ 0x5c
 801749a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 801749e:	9311      	str	r3, [sp, #68]	@ 0x44
 80174a0:	6803      	ldr	r3, [r0, #0]
 80174a2:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 80174a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80174a8:	4798      	blx	r3
 80174aa:	682b      	ldr	r3, [r5, #0]
 80174ac:	9013      	str	r0, [sp, #76]	@ 0x4c
 80174ae:	7b1a      	ldrb	r2, [r3, #12]
 80174b0:	7adb      	ldrb	r3, [r3, #11]
 80174b2:	9215      	str	r2, [sp, #84]	@ 0x54
 80174b4:	9316      	str	r3, [sp, #88]	@ 0x58
 80174b6:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 80174ba:	2c00      	cmp	r4, #0
 80174bc:	d067      	beq.n	801758e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80174be:	7c2b      	ldrb	r3, [r5, #16]
 80174c0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80174c2:	2b06      	cmp	r3, #6
 80174c4:	bf14      	ite	ne
 80174c6:	2301      	movne	r3, #1
 80174c8:	2302      	moveq	r3, #2
 80174ca:	4413      	add	r3, r2
 80174cc:	f04f 0900 	mov.w	r9, #0
 80174d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80174d2:	464c      	mov	r4, r9
 80174d4:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 80174d8:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 80174dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80174de:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80174e0:	4293      	cmp	r3, r2
 80174e2:	f280 808b 	bge.w	80175fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80174e6:	2300      	movs	r3, #0
 80174e8:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 80174ec:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 80174f0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80174f4:	429c      	cmp	r4, r3
 80174f6:	d006      	beq.n	8017506 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 80174f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80174fa:	f242 020b 	movw	r2, #8203	@ 0x200b
 80174fe:	4294      	cmp	r4, r2
 8017500:	bf18      	it	ne
 8017502:	4623      	movne	r3, r4
 8017504:	930c      	str	r3, [sp, #48]	@ 0x30
 8017506:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017508:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801750a:	682a      	ldr	r2, [r5, #0]
 801750c:	428b      	cmp	r3, r1
 801750e:	db40      	blt.n	8017592 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8017510:	6813      	ldr	r3, [r2, #0]
 8017512:	4610      	mov	r0, r2
 8017514:	695b      	ldr	r3, [r3, #20]
 8017516:	4798      	blx	r3
 8017518:	4604      	mov	r4, r0
 801751a:	6828      	ldr	r0, [r5, #0]
 801751c:	aa1d      	add	r2, sp, #116	@ 0x74
 801751e:	4621      	mov	r1, r4
 8017520:	6803      	ldr	r3, [r0, #0]
 8017522:	689f      	ldr	r7, [r3, #8]
 8017524:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8017528:	47b8      	blx	r7
 801752a:	901c      	str	r0, [sp, #112]	@ 0x70
 801752c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017530:	429c      	cmp	r4, r3
 8017532:	f000 80eb 	beq.w	801770c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8017536:	f242 030b 	movw	r3, #8203	@ 0x200b
 801753a:	429c      	cmp	r4, r3
 801753c:	f000 80e6 	beq.w	801770c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8017540:	2c00      	cmp	r4, #0
 8017542:	f000 810d 	beq.w	8017760 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8017546:	2c0a      	cmp	r4, #10
 8017548:	d05e      	beq.n	8017608 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801754a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801754c:	b36a      	cbz	r2, 80175aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801754e:	8894      	ldrh	r4, [r2, #4]
 8017550:	f1bb 0f00 	cmp.w	fp, #0
 8017554:	d03a      	beq.n	80175cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8017556:	f892 900d 	ldrb.w	r9, [r2, #13]
 801755a:	f1bb 0f01 	cmp.w	fp, #1
 801755e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8017562:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8017566:	f892 900a 	ldrb.w	r9, [r2, #10]
 801756a:	ea49 0903 	orr.w	r9, r9, r3
 801756e:	d133      	bne.n	80175d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8017570:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017572:	eba6 0609 	sub.w	r6, r6, r9
 8017576:	2b00      	cmp	r3, #0
 8017578:	d14d      	bne.n	8017616 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801757a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801757c:	eb09 0306 	add.w	r3, r9, r6
 8017580:	4413      	add	r3, r2
 8017582:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8017584:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017588:	4293      	cmp	r3, r2
 801758a:	da4e      	bge.n	801762a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801758c:	e036      	b.n	80175fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801758e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8017590:	e79c      	b.n	80174cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8017592:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8017596:	4659      	mov	r1, fp
 8017598:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801759a:	9301      	str	r3, [sp, #4]
 801759c:	ab1d      	add	r3, sp, #116	@ 0x74
 801759e:	9300      	str	r3, [sp, #0]
 80175a0:	ab1c      	add	r3, sp, #112	@ 0x70
 80175a2:	f003 fa68 	bl	801aa76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80175a6:	4604      	mov	r4, r0
 80175a8:	e7c0      	b.n	801752c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80175aa:	6828      	ldr	r0, [r5, #0]
 80175ac:	6803      	ldr	r3, [r0, #0]
 80175ae:	691b      	ldr	r3, [r3, #16]
 80175b0:	4798      	blx	r3
 80175b2:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80175b6:	4298      	cmp	r0, r3
 80175b8:	f000 80a8 	beq.w	801770c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80175bc:	f242 030b 	movw	r3, #8203	@ 0x200b
 80175c0:	4298      	cmp	r0, r3
 80175c2:	f000 80a3 	beq.w	801770c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80175c6:	f1bb 0f00 	cmp.w	fp, #0
 80175ca:	d100      	bne.n	80175ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80175cc:	444e      	add	r6, r9
 80175ce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80175d0:	2a00      	cmp	r2, #0
 80175d2:	d1c0      	bne.n	8017556 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80175d4:	4691      	mov	r9, r2
 80175d6:	e099      	b.n	801770c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80175d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80175da:	2b00      	cmp	r3, #0
 80175dc:	f000 80c2 	beq.w	8017764 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 80175e0:	f1bb 0f00 	cmp.w	fp, #0
 80175e4:	d117      	bne.n	8017616 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80175e6:	6828      	ldr	r0, [r5, #0]
 80175e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80175ea:	6803      	ldr	r3, [r0, #0]
 80175ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80175ee:	4798      	blx	r3
 80175f0:	4406      	add	r6, r0
 80175f2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80175f4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80175f6:	1af3      	subs	r3, r6, r3
 80175f8:	4293      	cmp	r3, r2
 80175fa:	dd16      	ble.n	801762a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 80175fc:	2c00      	cmp	r4, #0
 80175fe:	f000 80af 	beq.w	8017760 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8017602:	2c0a      	cmp	r4, #10
 8017604:	f040 809d 	bne.w	8017742 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8017608:	240a      	movs	r4, #10
 801760a:	fab4 f084 	clz	r0, r4
 801760e:	0940      	lsrs	r0, r0, #5
 8017610:	b01f      	add	sp, #124	@ 0x7c
 8017612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017616:	6828      	ldr	r0, [r5, #0]
 8017618:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801761a:	6803      	ldr	r3, [r0, #0]
 801761c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801761e:	4798      	blx	r3
 8017620:	f1bb 0f01 	cmp.w	fp, #1
 8017624:	eba6 0600 	sub.w	r6, r6, r0
 8017628:	d0a7      	beq.n	801757a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801762a:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801762c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801762e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8017632:	f9b3 8000 	ldrsh.w	r8, [r3]
 8017636:	7b43      	ldrb	r3, [r0, #13]
 8017638:	4431      	add	r1, r6
 801763a:	015b      	lsls	r3, r3, #5
 801763c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017640:	7983      	ldrb	r3, [r0, #6]
 8017642:	4313      	orrs	r3, r2
 8017644:	440b      	add	r3, r1
 8017646:	4543      	cmp	r3, r8
 8017648:	db60      	blt.n	801770c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801764a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801764c:	4299      	cmp	r1, r3
 801764e:	da5d      	bge.n	801770c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8017650:	6828      	ldr	r0, [r5, #0]
 8017652:	45b0      	cmp	r8, r6
 8017654:	6803      	ldr	r3, [r0, #0]
 8017656:	bfcc      	ite	gt
 8017658:	eba8 0806 	subgt.w	r8, r8, r6
 801765c:	f04f 0800 	movle.w	r8, #0
 8017660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017662:	bfc8      	it	gt
 8017664:	fa1f f888 	uxthgt.w	r8, r8
 8017668:	4798      	blx	r3
 801766a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801766c:	7b53      	ldrb	r3, [r2, #13]
 801766e:	00d9      	lsls	r1, r3, #3
 8017670:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8017674:	7a11      	ldrb	r1, [r2, #8]
 8017676:	4339      	orrs	r1, r7
 8017678:	065f      	lsls	r7, r3, #25
 801767a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801767c:	bf48      	it	mi
 801767e:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8017682:	4407      	add	r7, r0
 8017684:	bf48      	it	mi
 8017686:	b209      	sxthmi	r1, r1
 8017688:	1a7f      	subs	r7, r7, r1
 801768a:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801768c:	b2bf      	uxth	r7, r7
 801768e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8017692:	fa0f fa87 	sxth.w	sl, r7
 8017696:	4551      	cmp	r1, sl
 8017698:	dd3c      	ble.n	8017714 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801769a:	011b      	lsls	r3, r3, #4
 801769c:	79d0      	ldrb	r0, [r2, #7]
 801769e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80176a2:	4303      	orrs	r3, r0
 80176a4:	449a      	add	sl, r3
 80176a6:	4551      	cmp	r1, sl
 80176a8:	dc30      	bgt.n	801770c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80176aa:	1bcf      	subs	r7, r1, r7
 80176ac:	468a      	mov	sl, r1
 80176ae:	b23f      	sxth	r7, r7
 80176b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80176b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80176b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80176b6:	6828      	ldr	r0, [r5, #0]
 80176b8:	2a00      	cmp	r2, #0
 80176ba:	d12d      	bne.n	8017718 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 80176bc:	9318      	str	r3, [sp, #96]	@ 0x60
 80176be:	b2bf      	uxth	r7, r7
 80176c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80176c2:	6819      	ldr	r1, [r3, #0]
 80176c4:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 80176c6:	6801      	ldr	r1, [r0, #0]
 80176c8:	9314      	str	r3, [sp, #80]	@ 0x50
 80176ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80176cc:	4788      	blx	r1
 80176ce:	79a9      	ldrb	r1, [r5, #6]
 80176d0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80176d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80176d4:	7ba9      	ldrb	r1, [r5, #14]
 80176d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80176d8:	910a      	str	r1, [sp, #40]	@ 0x28
 80176da:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 80176de:	9109      	str	r1, [sp, #36]	@ 0x24
 80176e0:	68a9      	ldr	r1, [r5, #8]
 80176e2:	9306      	str	r3, [sp, #24]
 80176e4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80176e6:	9205      	str	r2, [sp, #20]
 80176e8:	9304      	str	r3, [sp, #16]
 80176ea:	f8cd a004 	str.w	sl, [sp, #4]
 80176ee:	e9cd 8702 	strd	r8, r7, [sp, #8]
 80176f2:	44b0      	add	r8, r6
 80176f4:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80176f6:	fa0f f388 	sxth.w	r3, r8
 80176fa:	9300      	str	r3, [sp, #0]
 80176fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80176fe:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8017702:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8017704:	681a      	ldr	r2, [r3, #0]
 8017706:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8017708:	685b      	ldr	r3, [r3, #4]
 801770a:	47b8      	blx	r7
 801770c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801770e:	3301      	adds	r3, #1
 8017710:	930d      	str	r3, [sp, #52]	@ 0x34
 8017712:	e6e3      	b.n	80174dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8017714:	2700      	movs	r7, #0
 8017716:	e7cb      	b.n	80176b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8017718:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801771a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 801771e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017720:	f8dc 1000 	ldr.w	r1, [ip]
 8017724:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8017728:	79aa      	ldrb	r2, [r5, #6]
 801772a:	9203      	str	r2, [sp, #12]
 801772c:	7baa      	ldrb	r2, [r5, #14]
 801772e:	9202      	str	r2, [sp, #8]
 8017730:	68aa      	ldr	r2, [r5, #8]
 8017732:	e9cd 0200 	strd	r0, r2, [sp]
 8017736:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8017738:	4660      	mov	r0, ip
 801773a:	688f      	ldr	r7, [r1, #8]
 801773c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801773e:	47b8      	blx	r7
 8017740:	e7e4      	b.n	801770c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8017742:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8017744:	3501      	adds	r5, #1
 8017746:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8017748:	429d      	cmp	r5, r3
 801774a:	f6bf af5e 	bge.w	801760a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801774e:	4659      	mov	r1, fp
 8017750:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8017752:	f7f2 f861 	bl	8009818 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017756:	4604      	mov	r4, r0
 8017758:	b110      	cbz	r0, 8017760 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801775a:	280a      	cmp	r0, #10
 801775c:	d1f2      	bne.n	8017744 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 801775e:	e753      	b.n	8017608 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8017760:	2400      	movs	r4, #0
 8017762:	e752      	b.n	801760a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8017764:	f1bb 0f00 	cmp.w	fp, #0
 8017768:	f43f af43 	beq.w	80175f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801776c:	e75d      	b.n	801762a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0801776e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801776e:	b530      	push	{r4, r5, lr}
 8017770:	8ac4      	ldrh	r4, [r0, #22]
 8017772:	8b45      	ldrh	r5, [r0, #26]
 8017774:	8343      	strh	r3, [r0, #26]
 8017776:	442c      	add	r4, r5
 8017778:	1ae4      	subs	r4, r4, r3
 801777a:	8b83      	ldrh	r3, [r0, #28]
 801777c:	82c4      	strh	r4, [r0, #22]
 801777e:	8b04      	ldrh	r4, [r0, #24]
 8017780:	4422      	add	r2, r4
 8017782:	440c      	add	r4, r1
 8017784:	1a59      	subs	r1, r3, r1
 8017786:	83c2      	strh	r2, [r0, #30]
 8017788:	8304      	strh	r4, [r0, #24]
 801778a:	8381      	strh	r1, [r0, #28]
 801778c:	bd30      	pop	{r4, r5, pc}

0801778e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801778e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017792:	4604      	mov	r4, r0
 8017794:	8a47      	ldrh	r7, [r0, #18]
 8017796:	68c0      	ldr	r0, [r0, #12]
 8017798:	b085      	sub	sp, #20
 801779a:	6803      	ldr	r3, [r0, #0]
 801779c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801779e:	4798      	blx	r3
 80177a0:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80177a4:	7a63      	ldrb	r3, [r4, #9]
 80177a6:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80177aa:	3b01      	subs	r3, #1
 80177ac:	42b7      	cmp	r7, r6
 80177ae:	bfac      	ite	ge
 80177b0:	f04f 0900 	movge.w	r9, #0
 80177b4:	f04f 0901 	movlt.w	r9, #1
 80177b8:	2b05      	cmp	r3, #5
 80177ba:	d804      	bhi.n	80177c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 80177bc:	e8df f003 	tbb	[pc, r3]
 80177c0:	470f0854 	.word	0x470f0854
 80177c4:	4c4c      	.short	0x4c4c
 80177c6:	2500      	movs	r5, #0
 80177c8:	46a9      	mov	r9, r5
 80177ca:	462e      	mov	r6, r5
 80177cc:	462f      	mov	r7, r5
 80177ce:	e00e      	b.n	80177ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80177d0:	42b7      	cmp	r7, r6
 80177d2:	f04f 0500 	mov.w	r5, #0
 80177d6:	bfb4      	ite	lt
 80177d8:	2600      	movlt	r6, #0
 80177da:	2601      	movge	r6, #1
 80177dc:	e7f6      	b.n	80177cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80177de:	42b7      	cmp	r7, r6
 80177e0:	464d      	mov	r5, r9
 80177e2:	f04f 0900 	mov.w	r9, #0
 80177e6:	bfb4      	ite	lt
 80177e8:	2600      	movlt	r6, #0
 80177ea:	2601      	movge	r6, #1
 80177ec:	464f      	mov	r7, r9
 80177ee:	f04f 0800 	mov.w	r8, #0
 80177f2:	f8a4 8016 	strh.w	r8, [r4, #22]
 80177f6:	f8a4 8018 	strh.w	r8, [r4, #24]
 80177fa:	f8cd 8004 	str.w	r8, [sp, #4]
 80177fe:	2300      	movs	r3, #0
 8017800:	9303      	str	r3, [sp, #12]
 8017802:	8823      	ldrh	r3, [r4, #0]
 8017804:	2b20      	cmp	r3, #32
 8017806:	d033      	beq.n	8017870 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8017808:	f242 010b 	movw	r1, #8203	@ 0x200b
 801780c:	1a5a      	subs	r2, r3, r1
 801780e:	f1d2 0a00 	rsbs	sl, r2, #0
 8017812:	eb4a 0a02 	adc.w	sl, sl, r2
 8017816:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801781a:	4293      	cmp	r3, r2
 801781c:	d008      	beq.n	8017830 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801781e:	428b      	cmp	r3, r1
 8017820:	9a01      	ldr	r2, [sp, #4]
 8017822:	bf0e      	itee	eq
 8017824:	f04f 0a01 	moveq.w	sl, #1
 8017828:	461a      	movne	r2, r3
 801782a:	f04f 0a00 	movne.w	sl, #0
 801782e:	9201      	str	r2, [sp, #4]
 8017830:	ab03      	add	r3, sp, #12
 8017832:	68e2      	ldr	r2, [r4, #12]
 8017834:	7a21      	ldrb	r1, [r4, #8]
 8017836:	6860      	ldr	r0, [r4, #4]
 8017838:	f003 f8d4 	bl	801a9e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801783c:	8020      	strh	r0, [r4, #0]
 801783e:	b9d8      	cbnz	r0, 8017878 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8017840:	8ba2      	ldrh	r2, [r4, #28]
 8017842:	2300      	movs	r3, #0
 8017844:	4611      	mov	r1, r2
 8017846:	4620      	mov	r0, r4
 8017848:	f7ff ff91 	bl	801776e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801784c:	e06e      	b.n	801792c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801784e:	2500      	movs	r5, #0
 8017850:	2701      	movs	r7, #1
 8017852:	46a9      	mov	r9, r5
 8017854:	462e      	mov	r6, r5
 8017856:	e7ca      	b.n	80177ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8017858:	42b7      	cmp	r7, r6
 801785a:	f04f 0500 	mov.w	r5, #0
 801785e:	bfb4      	ite	lt
 8017860:	2700      	movlt	r7, #0
 8017862:	2701      	movge	r7, #1
 8017864:	462e      	mov	r6, r5
 8017866:	e7c2      	b.n	80177ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8017868:	2500      	movs	r5, #0
 801786a:	2601      	movs	r6, #1
 801786c:	46a9      	mov	r9, r5
 801786e:	e7ad      	b.n	80177cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8017870:	9301      	str	r3, [sp, #4]
 8017872:	f04f 0a01 	mov.w	sl, #1
 8017876:	e7db      	b.n	8017830 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8017878:	8b63      	ldrh	r3, [r4, #26]
 801787a:	280a      	cmp	r0, #10
 801787c:	f103 0301 	add.w	r3, r3, #1
 8017880:	8363      	strh	r3, [r4, #26]
 8017882:	d0dd      	beq.n	8017840 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8017884:	9a03      	ldr	r2, [sp, #12]
 8017886:	bb62      	cbnz	r2, 80178e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8017888:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801788c:	4298      	cmp	r0, r3
 801788e:	d003      	beq.n	8017898 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8017890:	f242 030b 	movw	r3, #8203	@ 0x200b
 8017894:	4298      	cmp	r0, r3
 8017896:	d1b2      	bne.n	80177fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017898:	8823      	ldrh	r3, [r4, #0]
 801789a:	8ba1      	ldrh	r1, [r4, #28]
 801789c:	2b20      	cmp	r3, #32
 801789e:	d003      	beq.n	80178a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 80178a0:	f242 000b 	movw	r0, #8203	@ 0x200b
 80178a4:	4283      	cmp	r3, r0
 80178a6:	d131      	bne.n	801790c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 80178a8:	f1ba 0f00 	cmp.w	sl, #0
 80178ac:	bf0a      	itet	eq
 80178ae:	4688      	moveq	r8, r1
 80178b0:	4650      	movne	r0, sl
 80178b2:	2001      	moveq	r0, #1
 80178b4:	440a      	add	r2, r1
 80178b6:	8b23      	ldrh	r3, [r4, #24]
 80178b8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80178bc:	b292      	uxth	r2, r2
 80178be:	83a2      	strh	r2, [r4, #28]
 80178c0:	4413      	add	r3, r2
 80178c2:	f1b9 0f00 	cmp.w	r9, #0
 80178c6:	d102      	bne.n	80178ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 80178c8:	2d00      	cmp	r5, #0
 80178ca:	d042      	beq.n	8017952 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 80178cc:	b300      	cbz	r0, 8017910 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 80178ce:	8c21      	ldrh	r1, [r4, #32]
 80178d0:	4419      	add	r1, r3
 80178d2:	458c      	cmp	ip, r1
 80178d4:	da37      	bge.n	8017946 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80178d6:	8ae1      	ldrh	r1, [r4, #22]
 80178d8:	2900      	cmp	r1, #0
 80178da:	d034      	beq.n	8017946 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80178dc:	4563      	cmp	r3, ip
 80178de:	dd8e      	ble.n	80177fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80178e0:	e01d      	b.n	801791e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 80178e2:	8893      	ldrh	r3, [r2, #4]
 80178e4:	9901      	ldr	r1, [sp, #4]
 80178e6:	8023      	strh	r3, [r4, #0]
 80178e8:	f892 b00d 	ldrb.w	fp, [r2, #13]
 80178ec:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80178f0:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 80178f4:	f892 b00a 	ldrb.w	fp, [r2, #10]
 80178f8:	ea4b 0b00 	orr.w	fp, fp, r0
 80178fc:	68e0      	ldr	r0, [r4, #12]
 80178fe:	6803      	ldr	r3, [r0, #0]
 8017900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017902:	4798      	blx	r3
 8017904:	eb0b 0200 	add.w	r2, fp, r0
 8017908:	b292      	uxth	r2, r2
 801790a:	e7c5      	b.n	8017898 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801790c:	2000      	movs	r0, #0
 801790e:	e7d1      	b.n	80178b4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8017910:	4563      	cmp	r3, ip
 8017912:	f77f af74 	ble.w	80177fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017916:	8ae3      	ldrh	r3, [r4, #22]
 8017918:	2b00      	cmp	r3, #0
 801791a:	f43f af70 	beq.w	80177fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801791e:	2301      	movs	r3, #1
 8017920:	8c22      	ldrh	r2, [r4, #32]
 8017922:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8017926:	8be3      	ldrh	r3, [r4, #30]
 8017928:	4413      	add	r3, r2
 801792a:	83e3      	strh	r3, [r4, #30]
 801792c:	68e0      	ldr	r0, [r4, #12]
 801792e:	6803      	ldr	r3, [r0, #0]
 8017930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017932:	4798      	blx	r3
 8017934:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8017938:	4418      	add	r0, r3
 801793a:	8a63      	ldrh	r3, [r4, #18]
 801793c:	1a18      	subs	r0, r3, r0
 801793e:	8260      	strh	r0, [r4, #18]
 8017940:	b005      	add	sp, #20
 8017942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017946:	2300      	movs	r3, #0
 8017948:	4611      	mov	r1, r2
 801794a:	4620      	mov	r0, r4
 801794c:	f7ff ff0f 	bl	801776e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017950:	e755      	b.n	80177fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017952:	4563      	cmp	r3, ip
 8017954:	dd14      	ble.n	8017980 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8017956:	b117      	cbz	r7, 801795e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8017958:	2301      	movs	r3, #1
 801795a:	460a      	mov	r2, r1
 801795c:	e772      	b.n	8017844 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801795e:	2e00      	cmp	r6, #0
 8017960:	f43f af4d 	beq.w	80177fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017964:	2800      	cmp	r0, #0
 8017966:	f47f af4a 	bne.w	80177fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801796a:	f1ba 0f00 	cmp.w	sl, #0
 801796e:	d002      	beq.n	8017976 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8017970:	2301      	movs	r3, #1
 8017972:	4642      	mov	r2, r8
 8017974:	e767      	b.n	8017846 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8017976:	8ae3      	ldrh	r3, [r4, #22]
 8017978:	2b00      	cmp	r3, #0
 801797a:	f43f af40 	beq.w	80177fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801797e:	e7d5      	b.n	801792c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8017980:	2800      	cmp	r0, #0
 8017982:	f47f af3c 	bne.w	80177fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017986:	f1ba 0f00 	cmp.w	sl, #0
 801798a:	f43f af38 	beq.w	80177fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801798e:	2301      	movs	r3, #1
 8017990:	4642      	mov	r2, r8
 8017992:	e7da      	b.n	801794a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08017994 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8017994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017998:	b0e3      	sub	sp, #396	@ 0x18c
 801799a:	461c      	mov	r4, r3
 801799c:	4683      	mov	fp, r0
 801799e:	4688      	mov	r8, r1
 80179a0:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	f000 8112 	beq.w	8017bcc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80179a8:	6823      	ldr	r3, [r4, #0]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	f000 810e 	beq.w	8017bcc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80179b0:	7ba3      	ldrb	r3, [r4, #14]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	f000 810a 	beq.w	8017bcc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80179b8:	ad0a      	add	r5, sp, #40	@ 0x28
 80179ba:	6810      	ldr	r0, [r2, #0]
 80179bc:	6851      	ldr	r1, [r2, #4]
 80179be:	462b      	mov	r3, r5
 80179c0:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 80179c4:	c303      	stmia	r3!, {r0, r1}
 80179c6:	2100      	movs	r1, #0
 80179c8:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80179cc:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80179d0:	4628      	mov	r0, r5
 80179d2:	910c      	str	r1, [sp, #48]	@ 0x30
 80179d4:	a90c      	add	r1, sp, #48	@ 0x30
 80179d6:	79a2      	ldrb	r2, [r4, #6]
 80179d8:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80179dc:	f7ff fd1d 	bl	801741a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80179e0:	a90c      	add	r1, sp, #48	@ 0x30
 80179e2:	79a2      	ldrb	r2, [r4, #6]
 80179e4:	4608      	mov	r0, r1
 80179e6:	f7ff fd18 	bl	801741a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80179ea:	a817      	add	r0, sp, #92	@ 0x5c
 80179ec:	f002 fcb2 	bl	801a354 <_ZN8touchgfx12TextProviderC1Ev>
 80179f0:	6820      	ldr	r0, [r4, #0]
 80179f2:	6803      	ldr	r3, [r0, #0]
 80179f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80179f6:	4798      	blx	r3
 80179f8:	4606      	mov	r6, r0
 80179fa:	6820      	ldr	r0, [r4, #0]
 80179fc:	6803      	ldr	r3, [r0, #0]
 80179fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017a00:	4798      	blx	r3
 8017a02:	4633      	mov	r3, r6
 8017a04:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8017a06:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8017a08:	9000      	str	r0, [sp, #0]
 8017a0a:	a817      	add	r0, sp, #92	@ 0x5c
 8017a0c:	f002 fcf5 	bl	801a3fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017a10:	6820      	ldr	r0, [r4, #0]
 8017a12:	f894 a004 	ldrb.w	sl, [r4, #4]
 8017a16:	6803      	ldr	r3, [r0, #0]
 8017a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017a1a:	4798      	blx	r3
 8017a1c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8017a20:	6823      	ldr	r3, [r4, #0]
 8017a22:	4607      	mov	r7, r0
 8017a24:	4406      	add	r6, r0
 8017a26:	a830      	add	r0, sp, #192	@ 0xc0
 8017a28:	f893 9009 	ldrb.w	r9, [r3, #9]
 8017a2c:	f002 fc92 	bl	801a354 <_ZN8touchgfx12TextProviderC1Ev>
 8017a30:	7c23      	ldrb	r3, [r4, #16]
 8017a32:	b17b      	cbz	r3, 8017a54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8017a34:	6820      	ldr	r0, [r4, #0]
 8017a36:	6803      	ldr	r3, [r0, #0]
 8017a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017a3a:	4798      	blx	r3
 8017a3c:	9009      	str	r0, [sp, #36]	@ 0x24
 8017a3e:	6820      	ldr	r0, [r4, #0]
 8017a40:	6802      	ldr	r2, [r0, #0]
 8017a42:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8017a44:	4790      	blx	r2
 8017a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a48:	9000      	str	r0, [sp, #0]
 8017a4a:	a830      	add	r0, sp, #192	@ 0xc0
 8017a4c:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8017a4e:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8017a50:	f002 fcd3 	bl	801a3fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017a54:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8017a58:	a80e      	add	r0, sp, #56	@ 0x38
 8017a5a:	7be2      	ldrb	r2, [r4, #15]
 8017a5c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8017a60:	1a8a      	subs	r2, r1, r2
 8017a62:	7c21      	ldrb	r1, [r4, #16]
 8017a64:	9103      	str	r1, [sp, #12]
 8017a66:	b292      	uxth	r2, r2
 8017a68:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8017a6c:	9102      	str	r1, [sp, #8]
 8017a6e:	6821      	ldr	r1, [r4, #0]
 8017a70:	9101      	str	r1, [sp, #4]
 8017a72:	7961      	ldrb	r1, [r4, #5]
 8017a74:	9100      	str	r1, [sp, #0]
 8017a76:	a930      	add	r1, sp, #192	@ 0xc0
 8017a78:	f7ff fc50 	bl	801731c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8017a7c:	2e00      	cmp	r6, #0
 8017a7e:	dc5b      	bgt.n	8017b38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8017a80:	af17      	add	r7, sp, #92	@ 0x5c
 8017a82:	f04f 0900 	mov.w	r9, #0
 8017a86:	7c23      	ldrb	r3, [r4, #16]
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	f000 80b1 	beq.w	8017bf0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8017a8e:	a80e      	add	r0, sp, #56	@ 0x38
 8017a90:	f7ff fe7d 	bl	801778e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8017a94:	f1ba 0f00 	cmp.w	sl, #0
 8017a98:	f000 80a5 	beq.w	8017be6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8017a9c:	7c23      	ldrb	r3, [r4, #16]
 8017a9e:	2264      	movs	r2, #100	@ 0x64
 8017aa0:	4639      	mov	r1, r7
 8017aa2:	a849      	add	r0, sp, #292	@ 0x124
 8017aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8017aa6:	f013 f87c 	bl	802aba2 <memcpy>
 8017aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	f000 80a7 	beq.w	8017c00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8017ab2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8017ab6:	7922      	ldrb	r2, [r4, #4]
 8017ab8:	2a01      	cmp	r2, #1
 8017aba:	f040 808a 	bne.w	8017bd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8017abe:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8017ac2:	1ac0      	subs	r0, r0, r3
 8017ac4:	2302      	movs	r3, #2
 8017ac6:	fb90 f0f3 	sdiv	r0, r0, r3
 8017aca:	b200      	sxth	r0, r0
 8017acc:	7c23      	ldrb	r3, [r4, #16]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	f000 808b 	beq.w	8017bea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8017ad4:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8017ad8:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8017adc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8017ae0:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8017ae4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8017ae8:	2100      	movs	r1, #0
 8017aea:	4410      	add	r0, r2
 8017aec:	4642      	mov	r2, r8
 8017aee:	b200      	sxth	r0, r0
 8017af0:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8017af4:	9000      	str	r0, [sp, #0]
 8017af6:	4658      	mov	r0, fp
 8017af8:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8017afc:	f7ff fcbe 	bl	801747c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8017b00:	2800      	cmp	r0, #0
 8017b02:	d163      	bne.n	8017bcc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017b04:	b2b2      	uxth	r2, r6
 8017b06:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8017b0a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8017b0e:	4413      	add	r3, r2
 8017b10:	1a8a      	subs	r2, r1, r2
 8017b12:	b21b      	sxth	r3, r3
 8017b14:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8017b18:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8017b1c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8017b20:	2a00      	cmp	r2, #0
 8017b22:	d153      	bne.n	8017bcc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017b24:	6822      	ldr	r2, [r4, #0]
 8017b26:	8869      	ldrh	r1, [r5, #2]
 8017b28:	7a12      	ldrb	r2, [r2, #8]
 8017b2a:	1a9b      	subs	r3, r3, r2
 8017b2c:	88ea      	ldrh	r2, [r5, #6]
 8017b2e:	440a      	add	r2, r1
 8017b30:	b212      	sxth	r2, r2
 8017b32:	4293      	cmp	r3, r2
 8017b34:	dda7      	ble.n	8017a86 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8017b36:	e049      	b.n	8017bcc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017b38:	7c23      	ldrb	r3, [r4, #16]
 8017b3a:	444f      	add	r7, r9
 8017b3c:	b1c3      	cbz	r3, 8017b70 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8017b3e:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8017b42:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8017b46:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017b4a:	443b      	add	r3, r7
 8017b4c:	4293      	cmp	r3, r2
 8017b4e:	da97      	bge.n	8017a80 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8017b50:	a80e      	add	r0, sp, #56	@ 0x38
 8017b52:	f7ff fe1c 	bl	801778e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8017b56:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8017b5a:	3b01      	subs	r3, #1
 8017b5c:	b29b      	uxth	r3, r3
 8017b5e:	454b      	cmp	r3, r9
 8017b60:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b62:	d021      	beq.n	8017ba8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8017b64:	7961      	ldrb	r1, [r4, #5]
 8017b66:	a817      	add	r0, sp, #92	@ 0x5c
 8017b68:	f7f1 fe56 	bl	8009818 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b6e:	e7f4      	b.n	8017b5a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8017b70:	fa1f f986 	uxth.w	r9, r6
 8017b74:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8017b78:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017b7c:	443b      	add	r3, r7
 8017b7e:	4293      	cmp	r3, r2
 8017b80:	f6bf af7e 	bge.w	8017a80 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8017b84:	a817      	add	r0, sp, #92	@ 0x5c
 8017b86:	f002 fff9 	bl	801ab7c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017b8a:	b1f8      	cbz	r0, 8017bcc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017b8c:	280a      	cmp	r0, #10
 8017b8e:	d1f1      	bne.n	8017b74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8017b90:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8017b94:	444b      	add	r3, r9
 8017b96:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8017b9a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8017b9e:	eba3 0309 	sub.w	r3, r3, r9
 8017ba2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8017ba6:	e7e5      	b.n	8017b74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8017ba8:	b2b3      	uxth	r3, r6
 8017baa:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8017bae:	441a      	add	r2, r3
 8017bb0:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8017bb4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8017bb8:	1ad3      	subs	r3, r2, r3
 8017bba:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8017bbe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8017bc2:	b11b      	cbz	r3, 8017bcc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017bc4:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d0ba      	beq.n	8017b42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8017bcc:	b063      	add	sp, #396	@ 0x18c
 8017bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bd2:	2a02      	cmp	r2, #2
 8017bd4:	d105      	bne.n	8017be2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8017bd6:	7be2      	ldrb	r2, [r4, #15]
 8017bd8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8017bdc:	1a80      	subs	r0, r0, r2
 8017bde:	1ac0      	subs	r0, r0, r3
 8017be0:	e773      	b.n	8017aca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8017be2:	2000      	movs	r0, #0
 8017be4:	e772      	b.n	8017acc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8017be6:	7be0      	ldrb	r0, [r4, #15]
 8017be8:	e770      	b.n	8017acc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8017bea:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8017bee:	e773      	b.n	8017ad8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8017bf0:	f1ba 0f00 	cmp.w	sl, #0
 8017bf4:	d0f7      	beq.n	8017be6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8017bf6:	2264      	movs	r2, #100	@ 0x64
 8017bf8:	4639      	mov	r1, r7
 8017bfa:	a849      	add	r0, sp, #292	@ 0x124
 8017bfc:	f012 ffd1 	bl	802aba2 <memcpy>
 8017c00:	2300      	movs	r3, #0
 8017c02:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8017c06:	6821      	ldr	r1, [r4, #0]
 8017c08:	a849      	add	r0, sp, #292	@ 0x124
 8017c0a:	f7ff fbca 	bl	80173a2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017c0e:	b203      	sxth	r3, r0
 8017c10:	e751      	b.n	8017ab6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08017c12 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8017c12:	2b03      	cmp	r3, #3
 8017c14:	d818      	bhi.n	8017c48 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8017c16:	e8df f003 	tbb	[pc, r3]
 8017c1a:	0602      	.short	0x0602
 8017c1c:	130d      	.short	0x130d
 8017c1e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017c22:	1850      	adds	r0, r2, r1
 8017c24:	4770      	bx	lr
 8017c26:	8803      	ldrh	r3, [r0, #0]
 8017c28:	8880      	ldrh	r0, [r0, #4]
 8017c2a:	4418      	add	r0, r3
 8017c2c:	b200      	sxth	r0, r0
 8017c2e:	1a80      	subs	r0, r0, r2
 8017c30:	3801      	subs	r0, #1
 8017c32:	4770      	bx	lr
 8017c34:	8803      	ldrh	r3, [r0, #0]
 8017c36:	8880      	ldrh	r0, [r0, #4]
 8017c38:	4418      	add	r0, r3
 8017c3a:	b200      	sxth	r0, r0
 8017c3c:	1a40      	subs	r0, r0, r1
 8017c3e:	e7f7      	b.n	8017c30 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8017c40:	f9b0 0000 	ldrsh.w	r0, [r0]
 8017c44:	4410      	add	r0, r2
 8017c46:	4770      	bx	lr
 8017c48:	2000      	movs	r0, #0
 8017c4a:	4770      	bx	lr

08017c4c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8017c4c:	2b03      	cmp	r3, #3
 8017c4e:	d817      	bhi.n	8017c80 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8017c50:	e8df f003 	tbb	[pc, r3]
 8017c54:	10090602 	.word	0x10090602
 8017c58:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017c5c:	1850      	adds	r0, r2, r1
 8017c5e:	4770      	bx	lr
 8017c60:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017c64:	e7fa      	b.n	8017c5c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8017c66:	8843      	ldrh	r3, [r0, #2]
 8017c68:	88c0      	ldrh	r0, [r0, #6]
 8017c6a:	4418      	add	r0, r3
 8017c6c:	b200      	sxth	r0, r0
 8017c6e:	1a80      	subs	r0, r0, r2
 8017c70:	3801      	subs	r0, #1
 8017c72:	4770      	bx	lr
 8017c74:	8843      	ldrh	r3, [r0, #2]
 8017c76:	88c0      	ldrh	r0, [r0, #6]
 8017c78:	4418      	add	r0, r3
 8017c7a:	b200      	sxth	r0, r0
 8017c7c:	1a40      	subs	r0, r0, r1
 8017c7e:	e7f7      	b.n	8017c70 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8017c80:	2000      	movs	r0, #0
 8017c82:	4770      	bx	lr

08017c84 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8017c84:	4b01      	ldr	r3, [pc, #4]	@ (8017c8c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8017c86:	2200      	movs	r2, #0
 8017c88:	601a      	str	r2, [r3, #0]
 8017c8a:	4770      	bx	lr
 8017c8c:	200279e8 	.word	0x200279e8

08017c90 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8017c90:	4603      	mov	r3, r0
 8017c92:	b1c8      	cbz	r0, 8017cc8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8017c94:	0c02      	lsrs	r2, r0, #16
 8017c96:	0412      	lsls	r2, r2, #16
 8017c98:	b9a2      	cbnz	r2, 8017cc4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8017c9a:	0403      	lsls	r3, r0, #16
 8017c9c:	2010      	movs	r0, #16
 8017c9e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8017ca2:	bf04      	itt	eq
 8017ca4:	021b      	lsleq	r3, r3, #8
 8017ca6:	3008      	addeq	r0, #8
 8017ca8:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8017cac:	bf04      	itt	eq
 8017cae:	011b      	lsleq	r3, r3, #4
 8017cb0:	3004      	addeq	r0, #4
 8017cb2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8017cb6:	bf04      	itt	eq
 8017cb8:	009b      	lsleq	r3, r3, #2
 8017cba:	3002      	addeq	r0, #2
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	db04      	blt.n	8017cca <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8017cc0:	3001      	adds	r0, #1
 8017cc2:	4770      	bx	lr
 8017cc4:	2000      	movs	r0, #0
 8017cc6:	e7ea      	b.n	8017c9e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8017cc8:	2020      	movs	r0, #32
 8017cca:	4770      	bx	lr

08017ccc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8017ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cd0:	b087      	sub	sp, #28
 8017cd2:	460d      	mov	r5, r1
 8017cd4:	4616      	mov	r6, r2
 8017cd6:	4698      	mov	r8, r3
 8017cd8:	4601      	mov	r1, r0
 8017cda:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8017cde:	b120      	cbz	r0, 8017cea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8017ce0:	b11a      	cbz	r2, 8017cea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8017ce2:	2d1f      	cmp	r5, #31
 8017ce4:	d801      	bhi.n	8017cea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8017ce6:	2b1f      	cmp	r3, #31
 8017ce8:	d904      	bls.n	8017cf4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8017cea:	2000      	movs	r0, #0
 8017cec:	6038      	str	r0, [r7, #0]
 8017cee:	b007      	add	sp, #28
 8017cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cf4:	b97d      	cbnz	r5, 8017d16 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8017cf6:	b143      	cbz	r3, 8017d0a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8017cf8:	4602      	mov	r2, r0
 8017cfa:	462b      	mov	r3, r5
 8017cfc:	4641      	mov	r1, r8
 8017cfe:	4630      	mov	r0, r6
 8017d00:	e9cd 4700 	strd	r4, r7, [sp]
 8017d04:	f7ff ffe2 	bl	8017ccc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017d08:	e7f1      	b.n	8017cee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8017d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8017d0e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017d12:	603b      	str	r3, [r7, #0]
 8017d14:	e7eb      	b.n	8017cee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8017d16:	fa32 fa05 	lsrs.w	sl, r2, r5
 8017d1a:	d106      	bne.n	8017d2a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8017d1c:	4346      	muls	r6, r0
 8017d1e:	fbb6 f0f4 	udiv	r0, r6, r4
 8017d22:	fb04 6610 	mls	r6, r4, r0, r6
 8017d26:	603e      	str	r6, [r7, #0]
 8017d28:	e7e1      	b.n	8017cee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8017d2a:	2201      	movs	r2, #1
 8017d2c:	fa00 fb05 	lsl.w	fp, r0, r5
 8017d30:	40aa      	lsls	r2, r5
 8017d32:	fbbb f9f4 	udiv	r9, fp, r4
 8017d36:	3a01      	subs	r2, #1
 8017d38:	fb0a f309 	mul.w	r3, sl, r9
 8017d3c:	fb04 b919 	mls	r9, r4, r9, fp
 8017d40:	4016      	ands	r6, r2
 8017d42:	9303      	str	r3, [sp, #12]
 8017d44:	4630      	mov	r0, r6
 8017d46:	f7ff ffa3 	bl	8017c90 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017d4a:	462b      	mov	r3, r5
 8017d4c:	460a      	mov	r2, r1
 8017d4e:	4601      	mov	r1, r0
 8017d50:	4630      	mov	r0, r6
 8017d52:	e9cd 4700 	strd	r4, r7, [sp]
 8017d56:	f7ff ffb9 	bl	8017ccc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017d5a:	4606      	mov	r6, r0
 8017d5c:	4648      	mov	r0, r9
 8017d5e:	eb05 0108 	add.w	r1, r5, r8
 8017d62:	f7ff ff95 	bl	8017c90 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017d66:	ab05      	add	r3, sp, #20
 8017d68:	464a      	mov	r2, r9
 8017d6a:	e9cd 4300 	strd	r4, r3, [sp]
 8017d6e:	4603      	mov	r3, r0
 8017d70:	4650      	mov	r0, sl
 8017d72:	f7ff ffab 	bl	8017ccc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017d76:	6839      	ldr	r1, [r7, #0]
 8017d78:	9a05      	ldr	r2, [sp, #20]
 8017d7a:	9b03      	ldr	r3, [sp, #12]
 8017d7c:	4411      	add	r1, r2
 8017d7e:	fbb1 f2f4 	udiv	r2, r1, r4
 8017d82:	18d3      	adds	r3, r2, r3
 8017d84:	fb04 1412 	mls	r4, r4, r2, r1
 8017d88:	441e      	add	r6, r3
 8017d8a:	603c      	str	r4, [r7, #0]
 8017d8c:	4430      	add	r0, r6
 8017d8e:	e7ae      	b.n	8017cee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08017d90 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8017d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d94:	b085      	sub	sp, #20
 8017d96:	f1b0 0900 	subs.w	r9, r0, #0
 8017d9a:	461d      	mov	r5, r3
 8017d9c:	4617      	mov	r7, r2
 8017d9e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8017da0:	bfbb      	ittet	lt
 8017da2:	f1c9 0900 	rsblt	r9, r9, #0
 8017da6:	f04f 36ff 	movlt.w	r6, #4294967295
 8017daa:	2601      	movge	r6, #1
 8017dac:	6823      	ldrlt	r3, [r4, #0]
 8017dae:	bfbc      	itt	lt
 8017db0:	425b      	neglt	r3, r3
 8017db2:	6023      	strlt	r3, [r4, #0]
 8017db4:	2a00      	cmp	r2, #0
 8017db6:	da04      	bge.n	8017dc2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8017db8:	6823      	ldr	r3, [r4, #0]
 8017dba:	4257      	negs	r7, r2
 8017dbc:	4276      	negs	r6, r6
 8017dbe:	425b      	negs	r3, r3
 8017dc0:	6023      	str	r3, [r4, #0]
 8017dc2:	2d00      	cmp	r5, #0
 8017dc4:	4638      	mov	r0, r7
 8017dc6:	bfba      	itte	lt
 8017dc8:	426d      	neglt	r5, r5
 8017dca:	f04f 38ff 	movlt.w	r8, #4294967295
 8017dce:	f04f 0801 	movge.w	r8, #1
 8017dd2:	f7ff ff5d 	bl	8017c90 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017dd6:	ab03      	add	r3, sp, #12
 8017dd8:	463a      	mov	r2, r7
 8017dda:	e9cd 5300 	strd	r5, r3, [sp]
 8017dde:	4603      	mov	r3, r0
 8017de0:	4648      	mov	r0, r9
 8017de2:	f7ff ff73 	bl	8017ccc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017de6:	6823      	ldr	r3, [r4, #0]
 8017de8:	9a03      	ldr	r2, [sp, #12]
 8017dea:	4546      	cmp	r6, r8
 8017dec:	441a      	add	r2, r3
 8017dee:	fb92 f3f5 	sdiv	r3, r2, r5
 8017df2:	4418      	add	r0, r3
 8017df4:	fb05 2313 	mls	r3, r5, r3, r2
 8017df8:	bf18      	it	ne
 8017dfa:	4240      	negne	r0, r0
 8017dfc:	1c72      	adds	r2, r6, #1
 8017dfe:	6023      	str	r3, [r4, #0]
 8017e00:	d105      	bne.n	8017e0e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	f1c3 0200 	rsb	r2, r3, #0
 8017e08:	db0b      	blt.n	8017e22 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8017e0a:	6022      	str	r2, [r4, #0]
 8017e0c:	e006      	b.n	8017e1c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017e0e:	2e01      	cmp	r6, #1
 8017e10:	d104      	bne.n	8017e1c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	da02      	bge.n	8017e1c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017e16:	442b      	add	r3, r5
 8017e18:	3801      	subs	r0, #1
 8017e1a:	6023      	str	r3, [r4, #0]
 8017e1c:	b005      	add	sp, #20
 8017e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e22:	3801      	subs	r0, #1
 8017e24:	1b52      	subs	r2, r2, r5
 8017e26:	e7f0      	b.n	8017e0a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08017e28 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017e28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017e2c:	4c1c      	ldr	r4, [pc, #112]	@ (8017ea0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8017e2e:	4605      	mov	r5, r0
 8017e30:	6807      	ldr	r7, [r0, #0]
 8017e32:	69a3      	ldr	r3, [r4, #24]
 8017e34:	b92b      	cbnz	r3, 8017e42 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8017e36:	6840      	ldr	r0, [r0, #4]
 8017e38:	e9c5 7000 	strd	r7, r0, [r5]
 8017e3c:	b004      	add	sp, #16
 8017e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e42:	f04f 0802 	mov.w	r8, #2
 8017e46:	68a2      	ldr	r2, [r4, #8]
 8017e48:	ae04      	add	r6, sp, #16
 8017e4a:	6820      	ldr	r0, [r4, #0]
 8017e4c:	fb93 f1f8 	sdiv	r1, r3, r8
 8017e50:	440a      	add	r2, r1
 8017e52:	69e1      	ldr	r1, [r4, #28]
 8017e54:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017e58:	463a      	mov	r2, r7
 8017e5a:	9600      	str	r6, [sp, #0]
 8017e5c:	f7ff ff98 	bl	8017d90 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017e60:	69a3      	ldr	r3, [r4, #24]
 8017e62:	4607      	mov	r7, r0
 8017e64:	686a      	ldr	r2, [r5, #4]
 8017e66:	6a21      	ldr	r1, [r4, #32]
 8017e68:	9600      	str	r6, [sp, #0]
 8017e6a:	6860      	ldr	r0, [r4, #4]
 8017e6c:	f7ff ff90 	bl	8017d90 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017e70:	69a3      	ldr	r3, [r4, #24]
 8017e72:	6962      	ldr	r2, [r4, #20]
 8017e74:	4407      	add	r7, r0
 8017e76:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8017e78:	9600      	str	r6, [sp, #0]
 8017e7a:	68e0      	ldr	r0, [r4, #12]
 8017e7c:	fb93 f8f8 	sdiv	r8, r3, r8
 8017e80:	4442      	add	r2, r8
 8017e82:	9203      	str	r2, [sp, #12]
 8017e84:	682a      	ldr	r2, [r5, #0]
 8017e86:	f7ff ff83 	bl	8017d90 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017e8a:	4680      	mov	r8, r0
 8017e8c:	9600      	str	r6, [sp, #0]
 8017e8e:	69a3      	ldr	r3, [r4, #24]
 8017e90:	686a      	ldr	r2, [r5, #4]
 8017e92:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8017e94:	6920      	ldr	r0, [r4, #16]
 8017e96:	f7ff ff7b 	bl	8017d90 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017e9a:	4440      	add	r0, r8
 8017e9c:	e7cc      	b.n	8017e38 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8017e9e:	bf00      	nop
 8017ea0:	200279ec 	.word	0x200279ec

08017ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017ea4:	4b07      	ldr	r3, [pc, #28]	@ (8017ec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8017ea6:	781b      	ldrb	r3, [r3, #0]
 8017ea8:	2b01      	cmp	r3, #1
 8017eaa:	d109      	bne.n	8017ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8017eac:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017eb0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017eb4:	8003      	strh	r3, [r0, #0]
 8017eb6:	4b04      	ldr	r3, [pc, #16]	@ (8017ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017eb8:	881b      	ldrh	r3, [r3, #0]
 8017eba:	3b01      	subs	r3, #1
 8017ebc:	1a9b      	subs	r3, r3, r2
 8017ebe:	800b      	strh	r3, [r1, #0]
 8017ec0:	4770      	bx	lr
 8017ec2:	bf00      	nop
 8017ec4:	200279d0 	.word	0x200279d0
 8017ec8:	200279cc 	.word	0x200279cc

08017ecc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8017ecc:	4b07      	ldr	r3, [pc, #28]	@ (8017eec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017ece:	b510      	push	{r4, lr}
 8017ed0:	781b      	ldrb	r3, [r3, #0]
 8017ed2:	2b01      	cmp	r3, #1
 8017ed4:	d108      	bne.n	8017ee8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8017ed6:	4b06      	ldr	r3, [pc, #24]	@ (8017ef0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017ed8:	880c      	ldrh	r4, [r1, #0]
 8017eda:	881b      	ldrh	r3, [r3, #0]
 8017edc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017ee0:	3b01      	subs	r3, #1
 8017ee2:	1b1b      	subs	r3, r3, r4
 8017ee4:	8003      	strh	r3, [r0, #0]
 8017ee6:	800a      	strh	r2, [r1, #0]
 8017ee8:	bd10      	pop	{r4, pc}
 8017eea:	bf00      	nop
 8017eec:	200279d0 	.word	0x200279d0
 8017ef0:	200279cc 	.word	0x200279cc

08017ef4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8017ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8017f20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8017ef6:	b510      	push	{r4, lr}
 8017ef8:	781b      	ldrb	r3, [r3, #0]
 8017efa:	2b01      	cmp	r3, #1
 8017efc:	d10e      	bne.n	8017f1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8017efe:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017f02:	8843      	ldrh	r3, [r0, #2]
 8017f04:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017f08:	18ca      	adds	r2, r1, r3
 8017f0a:	4b06      	ldr	r3, [pc, #24]	@ (8017f24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017f0c:	8044      	strh	r4, [r0, #2]
 8017f0e:	881b      	ldrh	r3, [r3, #0]
 8017f10:	1a9b      	subs	r3, r3, r2
 8017f12:	8003      	strh	r3, [r0, #0]
 8017f14:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017f18:	8081      	strh	r1, [r0, #4]
 8017f1a:	80c3      	strh	r3, [r0, #6]
 8017f1c:	bd10      	pop	{r4, pc}
 8017f1e:	bf00      	nop
 8017f20:	200279d0 	.word	0x200279d0
 8017f24:	200279cc 	.word	0x200279cc

08017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017f28:	4b08      	ldr	r3, [pc, #32]	@ (8017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8017f2a:	781b      	ldrb	r3, [r3, #0]
 8017f2c:	2b01      	cmp	r3, #1
 8017f2e:	d10c      	bne.n	8017f4a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8017f30:	8803      	ldrh	r3, [r0, #0]
 8017f32:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8017f36:	8842      	ldrh	r2, [r0, #2]
 8017f38:	8002      	strh	r2, [r0, #0]
 8017f3a:	185a      	adds	r2, r3, r1
 8017f3c:	4b04      	ldr	r3, [pc, #16]	@ (8017f50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017f3e:	881b      	ldrh	r3, [r3, #0]
 8017f40:	1a9b      	subs	r3, r3, r2
 8017f42:	8043      	strh	r3, [r0, #2]
 8017f44:	88c3      	ldrh	r3, [r0, #6]
 8017f46:	80c1      	strh	r1, [r0, #6]
 8017f48:	8083      	strh	r3, [r0, #4]
 8017f4a:	4770      	bx	lr
 8017f4c:	200279d0 	.word	0x200279d0
 8017f50:	200279cc 	.word	0x200279cc

08017f54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017f54:	4b07      	ldr	r3, [pc, #28]	@ (8017f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017f56:	b510      	push	{r4, lr}
 8017f58:	781b      	ldrb	r3, [r3, #0]
 8017f5a:	2b01      	cmp	r3, #1
 8017f5c:	d108      	bne.n	8017f70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017f5e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017f62:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017f66:	8003      	strh	r3, [r0, #0]
 8017f68:	8893      	ldrh	r3, [r2, #4]
 8017f6a:	3b01      	subs	r3, #1
 8017f6c:	1b1b      	subs	r3, r3, r4
 8017f6e:	800b      	strh	r3, [r1, #0]
 8017f70:	bd10      	pop	{r4, pc}
 8017f72:	bf00      	nop
 8017f74:	200279d0 	.word	0x200279d0

08017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017f78:	4b0a      	ldr	r3, [pc, #40]	@ (8017fa4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017f7a:	460a      	mov	r2, r1
 8017f7c:	b510      	push	{r4, lr}
 8017f7e:	781b      	ldrb	r3, [r3, #0]
 8017f80:	2b01      	cmp	r3, #1
 8017f82:	d10d      	bne.n	8017fa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017f84:	8881      	ldrh	r1, [r0, #4]
 8017f86:	8803      	ldrh	r3, [r0, #0]
 8017f88:	440b      	add	r3, r1
 8017f8a:	4601      	mov	r1, r0
 8017f8c:	3b01      	subs	r3, #1
 8017f8e:	f821 3b02 	strh.w	r3, [r1], #2
 8017f92:	f7ff ffdf 	bl	8017f54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017f96:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017f9a:	88c2      	ldrh	r2, [r0, #6]
 8017f9c:	80c3      	strh	r3, [r0, #6]
 8017f9e:	8082      	strh	r2, [r0, #4]
 8017fa0:	bd10      	pop	{r4, pc}
 8017fa2:	bf00      	nop
 8017fa4:	200279d0 	.word	0x200279d0

08017fa8 <_ZN8touchgfx11Application13requestRedrawEv>:
 8017fa8:	4b06      	ldr	r3, [pc, #24]	@ (8017fc4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8017faa:	2100      	movs	r1, #0
 8017fac:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017fb0:	4b05      	ldr	r3, [pc, #20]	@ (8017fc8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8017fb2:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8017fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017fba:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8017fbe:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8017fc2:	4770      	bx	lr
 8017fc4:	200279cc 	.word	0x200279cc
 8017fc8:	200279ce 	.word	0x200279ce

08017fcc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017fcc:	4b03      	ldr	r3, [pc, #12]	@ (8017fdc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8017fce:	6818      	ldr	r0, [r3, #0]
 8017fd0:	b110      	cbz	r0, 8017fd8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8017fd2:	6803      	ldr	r3, [r0, #0]
 8017fd4:	699b      	ldr	r3, [r3, #24]
 8017fd6:	4718      	bx	r3
 8017fd8:	4770      	bx	lr
 8017fda:	bf00      	nop
 8017fdc:	20027a1c 	.word	0x20027a1c

08017fe0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017fe0:	4770      	bx	lr
	...

08017fe4 <_ZN8touchgfx11Application4drawEv>:
 8017fe4:	4b09      	ldr	r3, [pc, #36]	@ (801800c <_ZN8touchgfx11Application4drawEv+0x28>)
 8017fe6:	b507      	push	{r0, r1, r2, lr}
 8017fe8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017fec:	2100      	movs	r1, #0
 8017fee:	4b08      	ldr	r3, [pc, #32]	@ (8018010 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8017ff0:	9100      	str	r1, [sp, #0]
 8017ff2:	4669      	mov	r1, sp
 8017ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ff8:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017ffc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018000:	6803      	ldr	r3, [r0, #0]
 8018002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018004:	4798      	blx	r3
 8018006:	b003      	add	sp, #12
 8018008:	f85d fb04 	ldr.w	pc, [sp], #4
 801800c:	200279cc 	.word	0x200279cc
 8018010:	200279ce 	.word	0x200279ce

08018014 <_ZN8touchgfx11Application10invalidateEv>:
 8018014:	4b09      	ldr	r3, [pc, #36]	@ (801803c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8018016:	b082      	sub	sp, #8
 8018018:	2100      	movs	r1, #0
 801801a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801801e:	4b08      	ldr	r3, [pc, #32]	@ (8018040 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8018020:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018024:	aa02      	add	r2, sp, #8
 8018026:	f9b3 3000 	ldrsh.w	r3, [r3]
 801802a:	9100      	str	r1, [sp, #0]
 801802c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018030:	6803      	ldr	r3, [r0, #0]
 8018032:	e912 0006 	ldmdb	r2, {r1, r2}
 8018036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018038:	b002      	add	sp, #8
 801803a:	4718      	bx	r3
 801803c:	200279cc 	.word	0x200279cc
 8018040:	200279ce 	.word	0x200279ce

08018044 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018044:	4b03      	ldr	r3, [pc, #12]	@ (8018054 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018046:	6818      	ldr	r0, [r3, #0]
 8018048:	b110      	cbz	r0, 8018050 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801804a:	6803      	ldr	r3, [r0, #0]
 801804c:	69db      	ldr	r3, [r3, #28]
 801804e:	4718      	bx	r3
 8018050:	4770      	bx	lr
 8018052:	bf00      	nop
 8018054:	20027a1c 	.word	0x20027a1c

08018058 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018058:	4b03      	ldr	r3, [pc, #12]	@ (8018068 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801805a:	6818      	ldr	r0, [r3, #0]
 801805c:	b110      	cbz	r0, 8018064 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801805e:	6803      	ldr	r3, [r0, #0]
 8018060:	6a1b      	ldr	r3, [r3, #32]
 8018062:	4718      	bx	r3
 8018064:	4770      	bx	lr
 8018066:	bf00      	nop
 8018068:	20027a1c 	.word	0x20027a1c

0801806c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801806c:	2300      	movs	r3, #0
 801806e:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8018072:	4770      	bx	lr

08018074 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018074:	4b03      	ldr	r3, [pc, #12]	@ (8018084 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018076:	6818      	ldr	r0, [r3, #0]
 8018078:	b110      	cbz	r0, 8018080 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801807a:	6803      	ldr	r3, [r0, #0]
 801807c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801807e:	4718      	bx	r3
 8018080:	4770      	bx	lr
 8018082:	bf00      	nop
 8018084:	20027a1c 	.word	0x20027a1c

08018088 <_ZN8touchgfx11ApplicationD1Ev>:
 8018088:	4770      	bx	lr

0801808a <_ZN8touchgfx11ApplicationD0Ev>:
 801808a:	b510      	push	{r4, lr}
 801808c:	4604      	mov	r4, r0
 801808e:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8018092:	f011 fe92 	bl	8029dba <_ZdlPvj>
 8018096:	4620      	mov	r0, r4
 8018098:	bd10      	pop	{r4, pc}

0801809a <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801809a:	b510      	push	{r4, lr}
 801809c:	f9b1 4000 	ldrsh.w	r4, [r1]
 80180a0:	888a      	ldrh	r2, [r1, #4]
 80180a2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80180a6:	4422      	add	r2, r4
 80180a8:	b212      	sxth	r2, r2
 80180aa:	4293      	cmp	r3, r2
 80180ac:	da15      	bge.n	80180da <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80180ae:	8882      	ldrh	r2, [r0, #4]
 80180b0:	4413      	add	r3, r2
 80180b2:	b21b      	sxth	r3, r3
 80180b4:	429c      	cmp	r4, r3
 80180b6:	da10      	bge.n	80180da <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80180b8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80180bc:	88c9      	ldrh	r1, [r1, #6]
 80180be:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80180c2:	4419      	add	r1, r3
 80180c4:	b209      	sxth	r1, r1
 80180c6:	428a      	cmp	r2, r1
 80180c8:	da07      	bge.n	80180da <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80180ca:	88c0      	ldrh	r0, [r0, #6]
 80180cc:	4410      	add	r0, r2
 80180ce:	b200      	sxth	r0, r0
 80180d0:	4283      	cmp	r3, r0
 80180d2:	bfac      	ite	ge
 80180d4:	2000      	movge	r0, #0
 80180d6:	2001      	movlt	r0, #1
 80180d8:	bd10      	pop	{r4, pc}
 80180da:	2000      	movs	r0, #0
 80180dc:	e7fc      	b.n	80180d8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080180de <_ZN8touchgfx4Rect10restrictToEss>:
 80180de:	f9b0 3000 	ldrsh.w	r3, [r0]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	b510      	push	{r4, lr}
 80180e6:	da04      	bge.n	80180f2 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80180e8:	8884      	ldrh	r4, [r0, #4]
 80180ea:	4423      	add	r3, r4
 80180ec:	8083      	strh	r3, [r0, #4]
 80180ee:	2300      	movs	r3, #0
 80180f0:	8003      	strh	r3, [r0, #0]
 80180f2:	f9b0 4000 	ldrsh.w	r4, [r0]
 80180f6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80180fa:	1b09      	subs	r1, r1, r4
 80180fc:	428b      	cmp	r3, r1
 80180fe:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018102:	bfc8      	it	gt
 8018104:	8081      	strhgt	r1, [r0, #4]
 8018106:	2b00      	cmp	r3, #0
 8018108:	da04      	bge.n	8018114 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801810a:	88c1      	ldrh	r1, [r0, #6]
 801810c:	440b      	add	r3, r1
 801810e:	80c3      	strh	r3, [r0, #6]
 8018110:	2300      	movs	r3, #0
 8018112:	8043      	strh	r3, [r0, #2]
 8018114:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8018118:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801811c:	1a52      	subs	r2, r2, r1
 801811e:	4293      	cmp	r3, r2
 8018120:	bfc8      	it	gt
 8018122:	80c2      	strhgt	r2, [r0, #6]
 8018124:	bd10      	pop	{r4, pc}
	...

08018128 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8018128:	4b10      	ldr	r3, [pc, #64]	@ (801816c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801812a:	b510      	push	{r4, lr}
 801812c:	460c      	mov	r4, r1
 801812e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018132:	4b0f      	ldr	r3, [pc, #60]	@ (8018170 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8018134:	4620      	mov	r0, r4
 8018136:	f9b3 1000 	ldrsh.w	r1, [r3]
 801813a:	f7ff ffd0 	bl	80180de <_ZN8touchgfx4Rect10restrictToEss>
 801813e:	4b0d      	ldr	r3, [pc, #52]	@ (8018174 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8018140:	6818      	ldr	r0, [r3, #0]
 8018142:	b190      	cbz	r0, 801816a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8018144:	6803      	ldr	r3, [r0, #0]
 8018146:	4621      	mov	r1, r4
 8018148:	689b      	ldr	r3, [r3, #8]
 801814a:	4798      	blx	r3
 801814c:	4b0a      	ldr	r3, [pc, #40]	@ (8018178 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801814e:	6818      	ldr	r0, [r3, #0]
 8018150:	b118      	cbz	r0, 801815a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8018152:	6803      	ldr	r3, [r0, #0]
 8018154:	4621      	mov	r1, r4
 8018156:	689b      	ldr	r3, [r3, #8]
 8018158:	4798      	blx	r3
 801815a:	4b08      	ldr	r3, [pc, #32]	@ (801817c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801815c:	4621      	mov	r1, r4
 801815e:	6818      	ldr	r0, [r3, #0]
 8018160:	6803      	ldr	r3, [r0, #0]
 8018162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018166:	69db      	ldr	r3, [r3, #28]
 8018168:	4718      	bx	r3
 801816a:	bd10      	pop	{r4, pc}
 801816c:	200279ce 	.word	0x200279ce
 8018170:	200279cc 	.word	0x200279cc
 8018174:	20027a1c 	.word	0x20027a1c
 8018178:	20027a18 	.word	0x20027a18
 801817c:	200279d8 	.word	0x200279d8

08018180 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018182:	4606      	mov	r6, r0
 8018184:	4608      	mov	r0, r1
 8018186:	460f      	mov	r7, r1
 8018188:	f7f9 fd7d 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 801818c:	b9e8      	cbnz	r0, 80181ca <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801818e:	f9b7 5000 	ldrsh.w	r5, [r7]
 8018192:	f9b6 4000 	ldrsh.w	r4, [r6]
 8018196:	42a5      	cmp	r5, r4
 8018198:	db17      	blt.n	80181ca <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801819a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801819e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80181a2:	429a      	cmp	r2, r3
 80181a4:	db11      	blt.n	80181ca <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80181a6:	88b9      	ldrh	r1, [r7, #4]
 80181a8:	440d      	add	r5, r1
 80181aa:	88b1      	ldrh	r1, [r6, #4]
 80181ac:	440c      	add	r4, r1
 80181ae:	b22d      	sxth	r5, r5
 80181b0:	b224      	sxth	r4, r4
 80181b2:	42a5      	cmp	r5, r4
 80181b4:	dc09      	bgt.n	80181ca <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80181b6:	88f8      	ldrh	r0, [r7, #6]
 80181b8:	4410      	add	r0, r2
 80181ba:	88f2      	ldrh	r2, [r6, #6]
 80181bc:	4413      	add	r3, r2
 80181be:	b200      	sxth	r0, r0
 80181c0:	b21b      	sxth	r3, r3
 80181c2:	4298      	cmp	r0, r3
 80181c4:	bfcc      	ite	gt
 80181c6:	2000      	movgt	r0, #0
 80181c8:	2001      	movle	r0, #1
 80181ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080181cc <_ZN8touchgfx11Application11getInstanceEv>:
 80181cc:	4b01      	ldr	r3, [pc, #4]	@ (80181d4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80181ce:	6818      	ldr	r0, [r3, #0]
 80181d0:	4770      	bx	lr
 80181d2:	bf00      	nop
 80181d4:	20027a2c 	.word	0x20027a2c

080181d8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80181d8:	2300      	movs	r3, #0
 80181da:	b510      	push	{r4, lr}
 80181dc:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 80181e0:	4604      	mov	r4, r0
 80181e2:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80181e6:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80181ea:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80181ee:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 80181f2:	429a      	cmp	r2, r3
 80181f4:	d90e      	bls.n	8018214 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80181f6:	18e2      	adds	r2, r4, r3
 80181f8:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 80181fc:	b122      	cbz	r2, 8018208 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80181fe:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8018202:	6803      	ldr	r3, [r0, #0]
 8018204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018206:	4798      	blx	r3
 8018208:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801820c:	3301      	adds	r3, #1
 801820e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8018212:	e7ea      	b.n	80181ea <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8018214:	bd10      	pop	{r4, pc}

08018216 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8018216:	2300      	movs	r3, #0
 8018218:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801821c:	30a4      	adds	r0, #164	@ 0xa4
 801821e:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018222:	f802 3b01 	strb.w	r3, [r2], #1
 8018226:	4282      	cmp	r2, r0
 8018228:	d1fb      	bne.n	8018222 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801822a:	4770      	bx	lr

0801822c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801822c:	b570      	push	{r4, r5, r6, lr}
 801822e:	4c0b      	ldr	r4, [pc, #44]	@ (801825c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8018230:	4605      	mov	r5, r0
 8018232:	460e      	mov	r6, r1
 8018234:	6820      	ldr	r0, [r4, #0]
 8018236:	b110      	cbz	r0, 801823e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8018238:	6803      	ldr	r3, [r0, #0]
 801823a:	695b      	ldr	r3, [r3, #20]
 801823c:	4798      	blx	r3
 801823e:	1d28      	adds	r0, r5, #4
 8018240:	f7ff ffe9 	bl	8018216 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8018244:	6026      	str	r6, [r4, #0]
 8018246:	6833      	ldr	r3, [r6, #0]
 8018248:	4630      	mov	r0, r6
 801824a:	68db      	ldr	r3, [r3, #12]
 801824c:	4798      	blx	r3
 801824e:	682b      	ldr	r3, [r5, #0]
 8018250:	4628      	mov	r0, r5
 8018252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018258:	4718      	bx	r3
 801825a:	bf00      	nop
 801825c:	20027a1c 	.word	0x20027a1c

08018260 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8018260:	2300      	movs	r3, #0
 8018262:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8018266:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801826a:	461a      	mov	r2, r3
 801826c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801826e:	461c      	mov	r4, r3
 8018270:	461d      	mov	r5, r3
 8018272:	459c      	cmp	ip, r3
 8018274:	dd1a      	ble.n	80182ac <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8018276:	18c6      	adds	r6, r0, r3
 8018278:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801827c:	b16e      	cbz	r6, 801829a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801827e:	429a      	cmp	r2, r3
 8018280:	d008      	beq.n	8018294 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8018282:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8018286:	fa1f fe82 	uxth.w	lr, r2
 801828a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801828e:	1887      	adds	r7, r0, r2
 8018290:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8018294:	3201      	adds	r2, #1
 8018296:	3301      	adds	r3, #1
 8018298:	e7eb      	b.n	8018272 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801829a:	4299      	cmp	r1, r3
 801829c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 80182a0:	bfa8      	it	ge
 80182a2:	3501      	addge	r5, #1
 80182a4:	429e      	cmp	r6, r3
 80182a6:	bfc8      	it	gt
 80182a8:	3401      	addgt	r4, #1
 80182aa:	e7f4      	b.n	8018296 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80182ac:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 80182b0:	1b49      	subs	r1, r1, r5
 80182b2:	1b1b      	subs	r3, r3, r4
 80182b4:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 80182b8:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80182bc:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80182c0:	4293      	cmp	r3, r2
 80182c2:	dd03      	ble.n	80182cc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80182c4:	3b01      	subs	r3, #1
 80182c6:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 80182ca:	e7f7      	b.n	80182bc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 80182cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080182d0 <_ZN8touchgfx11Application15handleTickEventEv>:
 80182d0:	b570      	push	{r4, r5, r6, lr}
 80182d2:	4d16      	ldr	r5, [pc, #88]	@ (801832c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 80182d4:	4604      	mov	r4, r0
 80182d6:	6828      	ldr	r0, [r5, #0]
 80182d8:	b140      	cbz	r0, 80182ec <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80182da:	7a03      	ldrb	r3, [r0, #8]
 80182dc:	b933      	cbnz	r3, 80182ec <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80182de:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80182e2:	6803      	ldr	r3, [r0, #0]
 80182e4:	689b      	ldr	r3, [r3, #8]
 80182e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182ea:	4718      	bx	r3
 80182ec:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 80182f0:	4e0f      	ldr	r6, [pc, #60]	@ (8018330 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80182f2:	b973      	cbnz	r3, 8018312 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80182f4:	b168      	cbz	r0, 8018312 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80182f6:	7a03      	ldrb	r3, [r0, #8]
 80182f8:	b15b      	cbz	r3, 8018312 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80182fa:	6830      	ldr	r0, [r6, #0]
 80182fc:	b110      	cbz	r0, 8018304 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80182fe:	6803      	ldr	r3, [r0, #0]
 8018300:	691b      	ldr	r3, [r3, #16]
 8018302:	4798      	blx	r3
 8018304:	6828      	ldr	r0, [r5, #0]
 8018306:	6803      	ldr	r3, [r0, #0]
 8018308:	68db      	ldr	r3, [r3, #12]
 801830a:	4798      	blx	r3
 801830c:	2301      	movs	r3, #1
 801830e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8018312:	3404      	adds	r4, #4
 8018314:	4620      	mov	r0, r4
 8018316:	f7ff ff5f 	bl	80181d8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801831a:	4620      	mov	r0, r4
 801831c:	f7ff ffa0 	bl	8018260 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8018320:	6830      	ldr	r0, [r6, #0]
 8018322:	b110      	cbz	r0, 801832a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8018324:	6803      	ldr	r3, [r0, #0]
 8018326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018328:	e7dd      	b.n	80182e6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801832a:	bd70      	pop	{r4, r5, r6, pc}
 801832c:	20027a20 	.word	0x20027a20
 8018330:	20027a1c 	.word	0x20027a1c

08018334 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018334:	4603      	mov	r3, r0
 8018336:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801833a:	2200      	movs	r2, #0
 801833c:	801a      	strh	r2, [r3, #0]
 801833e:	3308      	adds	r3, #8
 8018340:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018344:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018348:	f823 2c02 	strh.w	r2, [r3, #-2]
 801834c:	428b      	cmp	r3, r1
 801834e:	d1f5      	bne.n	801833c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018350:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8018354:	4770      	bx	lr
	...

08018358 <_ZN8touchgfx11ApplicationC1Ev>:
 8018358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801835a:	4b1d      	ldr	r3, [pc, #116]	@ (80183d0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801835c:	4606      	mov	r6, r0
 801835e:	4604      	mov	r4, r0
 8018360:	2500      	movs	r5, #0
 8018362:	f846 3b04 	str.w	r3, [r6], #4
 8018366:	22a8      	movs	r2, #168	@ 0xa8
 8018368:	2100      	movs	r1, #0
 801836a:	4630      	mov	r0, r6
 801836c:	f012 fb38 	bl	802a9e0 <memset>
 8018370:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8018374:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8018378:	4f16      	ldr	r7, [pc, #88]	@ (80183d4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801837a:	f7ff ffdb 	bl	8018334 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801837e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8018382:	f7ff ffd7 	bl	8018334 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018386:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801838a:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801838e:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8018392:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8018396:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801839a:	490f      	ldr	r1, [pc, #60]	@ (80183d8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801839c:	480f      	ldr	r0, [pc, #60]	@ (80183dc <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801839e:	f010 fe9b 	bl	80290d8 <CRC_Lock>
 80183a2:	4b0f      	ldr	r3, [pc, #60]	@ (80183e0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80183a4:	b158      	cbz	r0, 80183be <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80183a6:	801d      	strh	r5, [r3, #0]
 80183a8:	2300      	movs	r3, #0
 80183aa:	4a0e      	ldr	r2, [pc, #56]	@ (80183e4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80183ac:	4630      	mov	r0, r6
 80183ae:	6013      	str	r3, [r2, #0]
 80183b0:	4a0d      	ldr	r2, [pc, #52]	@ (80183e8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80183b2:	603b      	str	r3, [r7, #0]
 80183b4:	6013      	str	r3, [r2, #0]
 80183b6:	f7ff ff2e 	bl	8018216 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80183ba:	4620      	mov	r0, r4
 80183bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80183c2:	2002      	movs	r0, #2
 80183c4:	801a      	strh	r2, [r3, #0]
 80183c6:	6038      	str	r0, [r7, #0]
 80183c8:	f001 fe4a 	bl	801a060 <_ZN8touchgfx6Screen4drawEv>
 80183cc:	e7ec      	b.n	80183a8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 80183ce:	bf00      	nop
 80183d0:	0802ee14 	.word	0x0802ee14
 80183d4:	20027a1c 	.word	0x20027a1c
 80183d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80183dc:	f407a5c2 	.word	0xf407a5c2
 80183e0:	20000070 	.word	0x20000070
 80183e4:	20027a2c 	.word	0x20027a2c
 80183e8:	20027a20 	.word	0x20027a20

080183ec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80183ec:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80183f0:	3b01      	subs	r3, #1
 80183f2:	b29b      	uxth	r3, r3
 80183f4:	428b      	cmp	r3, r1
 80183f6:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 80183fa:	b510      	push	{r4, lr}
 80183fc:	d908      	bls.n	8018410 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 80183fe:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8018402:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8018406:	681a      	ldr	r2, [r3, #0]
 8018408:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801840c:	685a      	ldr	r2, [r3, #4]
 801840e:	6062      	str	r2, [r4, #4]
 8018410:	bd10      	pop	{r4, pc}
	...

08018414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018418:	b08f      	sub	sp, #60	@ 0x3c
 801841a:	4b8f      	ldr	r3, [pc, #572]	@ (8018658 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801841c:	4683      	mov	fp, r0
 801841e:	ac0a      	add	r4, sp, #40	@ 0x28
 8018420:	e884 0006 	stmia.w	r4, {r1, r2}
 8018424:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018428:	4620      	mov	r0, r4
 801842a:	4b8c      	ldr	r3, [pc, #560]	@ (801865c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801842c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018430:	f7ff fe55 	bl	80180de <_ZN8touchgfx4Rect10restrictToEss>
 8018434:	4620      	mov	r0, r4
 8018436:	f7f9 fc26 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 801843a:	2800      	cmp	r0, #0
 801843c:	d16a      	bne.n	8018514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801843e:	9403      	str	r4, [sp, #12]
 8018440:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8018444:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8018448:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801844c:	9301      	str	r3, [sp, #4]
 801844e:	35a4      	adds	r5, #164	@ 0xa4
 8018450:	b15c      	cbz	r4, 801846a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8018452:	4629      	mov	r1, r5
 8018454:	9803      	ldr	r0, [sp, #12]
 8018456:	f7ff fe93 	bl	8018180 <_ZNK8touchgfx4Rect8includesERKS0_>
 801845a:	3c01      	subs	r4, #1
 801845c:	b118      	cbz	r0, 8018466 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801845e:	b2a1      	uxth	r1, r4
 8018460:	9801      	ldr	r0, [sp, #4]
 8018462:	f7ff ffc3 	bl	80183ec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018466:	3d08      	subs	r5, #8
 8018468:	e7f2      	b.n	8018450 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801846a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801846e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018472:	f8cd a010 	str.w	sl, [sp, #16]
 8018476:	9302      	str	r3, [sp, #8]
 8018478:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801847c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8018480:	9306      	str	r3, [sp, #24]
 8018482:	445c      	add	r4, fp
 8018484:	2500      	movs	r5, #0
 8018486:	4626      	mov	r6, r4
 8018488:	f8cd a014 	str.w	sl, [sp, #20]
 801848c:	462f      	mov	r7, r5
 801848e:	9b05      	ldr	r3, [sp, #20]
 8018490:	2b00      	cmp	r3, #0
 8018492:	d073      	beq.n	801857c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8018494:	9903      	ldr	r1, [sp, #12]
 8018496:	4630      	mov	r0, r6
 8018498:	f7ff fdff 	bl	801809a <_ZNK8touchgfx4Rect9intersectERKS0_>
 801849c:	b350      	cbz	r0, 80184f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801849e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 80184a2:	f9b6 c000 	ldrsh.w	ip, [r6]
 80184a6:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 80184aa:	45e6      	cmp	lr, ip
 80184ac:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80184b0:	db33      	blt.n	801851a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80184b2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80184b6:	88b3      	ldrh	r3, [r6, #4]
 80184b8:	4472      	add	r2, lr
 80184ba:	4463      	add	r3, ip
 80184bc:	b212      	sxth	r2, r2
 80184be:	b21b      	sxth	r3, r3
 80184c0:	429a      	cmp	r2, r3
 80184c2:	dc2a      	bgt.n	801851a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80184c4:	fa1f f289 	uxth.w	r2, r9
 80184c8:	88f3      	ldrh	r3, [r6, #6]
 80184ca:	45c8      	cmp	r8, r9
 80184cc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80184d0:	4413      	add	r3, r2
 80184d2:	fa1f fc88 	uxth.w	ip, r8
 80184d6:	b29b      	uxth	r3, r3
 80184d8:	fa0f fe83 	sxth.w	lr, r3
 80184dc:	db0f      	blt.n	80184fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80184de:	eba3 030c 	sub.w	r3, r3, ip
 80184e2:	1ac9      	subs	r1, r1, r3
 80184e4:	b209      	sxth	r1, r1
 80184e6:	2900      	cmp	r1, #0
 80184e8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80184ec:	dd12      	ble.n	8018514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80184ee:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 80184f2:	4605      	mov	r5, r0
 80184f4:	9b05      	ldr	r3, [sp, #20]
 80184f6:	3e08      	subs	r6, #8
 80184f8:	3b01      	subs	r3, #1
 80184fa:	9305      	str	r3, [sp, #20]
 80184fc:	e7c7      	b.n	801848e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80184fe:	4461      	add	r1, ip
 8018500:	b209      	sxth	r1, r1
 8018502:	4571      	cmp	r1, lr
 8018504:	dc38      	bgt.n	8018578 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018506:	eba2 020c 	sub.w	r2, r2, ip
 801850a:	b212      	sxth	r2, r2
 801850c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8018510:	2a00      	cmp	r2, #0
 8018512:	dcee      	bgt.n	80184f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8018514:	b00f      	add	sp, #60	@ 0x3c
 8018516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801851a:	45c8      	cmp	r8, r9
 801851c:	db2c      	blt.n	8018578 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801851e:	88f3      	ldrh	r3, [r6, #6]
 8018520:	4499      	add	r9, r3
 8018522:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8018526:	4498      	add	r8, r3
 8018528:	fa0f f989 	sxth.w	r9, r9
 801852c:	fa0f f888 	sxth.w	r8, r8
 8018530:	45c1      	cmp	r9, r8
 8018532:	db21      	blt.n	8018578 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018534:	fa1f f28c 	uxth.w	r2, ip
 8018538:	88b3      	ldrh	r3, [r6, #4]
 801853a:	45e6      	cmp	lr, ip
 801853c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8018540:	4413      	add	r3, r2
 8018542:	fa1f f88e 	uxth.w	r8, lr
 8018546:	b29b      	uxth	r3, r3
 8018548:	fa0f f983 	sxth.w	r9, r3
 801854c:	db0a      	blt.n	8018564 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801854e:	eba3 0308 	sub.w	r3, r3, r8
 8018552:	1ac9      	subs	r1, r1, r3
 8018554:	b209      	sxth	r1, r1
 8018556:	2900      	cmp	r1, #0
 8018558:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801855c:	ddda      	ble.n	8018514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801855e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8018562:	e7c6      	b.n	80184f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8018564:	4441      	add	r1, r8
 8018566:	b209      	sxth	r1, r1
 8018568:	4549      	cmp	r1, r9
 801856a:	dc05      	bgt.n	8018578 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801856c:	eba2 0208 	sub.w	r2, r2, r8
 8018570:	b212      	sxth	r2, r2
 8018572:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8018576:	e7cb      	b.n	8018510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8018578:	4607      	mov	r7, r0
 801857a:	e7bb      	b.n	80184f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801857c:	2d00      	cmp	r5, #0
 801857e:	d181      	bne.n	8018484 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8018580:	2f00      	cmp	r7, #0
 8018582:	f000 81dd 	beq.w	8018940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8018586:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801858a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801858e:	b2b3      	uxth	r3, r6
 8018590:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8018594:	9305      	str	r3, [sp, #20]
 8018596:	9a05      	ldr	r2, [sp, #20]
 8018598:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801859c:	4413      	add	r3, r2
 801859e:	b2ba      	uxth	r2, r7
 80185a0:	4492      	add	sl, r2
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	fa1f fa8a 	uxth.w	sl, sl
 80185a8:	fa0f f883 	sxth.w	r8, r3
 80185ac:	fa0f f98a 	sxth.w	r9, sl
 80185b0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80185b4:	9b04      	ldr	r3, [sp, #16]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d052      	beq.n	8018660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 80185ba:	9903      	ldr	r1, [sp, #12]
 80185bc:	4620      	mov	r0, r4
 80185be:	f7ff fd6c 	bl	801809a <_ZNK8touchgfx4Rect9intersectERKS0_>
 80185c2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80185c6:	b1c0      	cbz	r0, 80185fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80185c8:	f9b4 e000 	ldrsh.w	lr, [r4]
 80185cc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80185d0:	4576      	cmp	r6, lr
 80185d2:	dc22      	bgt.n	801861a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80185d4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80185d8:	44f4      	add	ip, lr
 80185da:	fa0f fc8c 	sxth.w	ip, ip
 80185de:	45e0      	cmp	r8, ip
 80185e0:	db1b      	blt.n	801861a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80185e2:	428f      	cmp	r7, r1
 80185e4:	fa1f fc81 	uxth.w	ip, r1
 80185e8:	88e1      	ldrh	r1, [r4, #6]
 80185ea:	dc0d      	bgt.n	8018608 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80185ec:	ebaa 0c0c 	sub.w	ip, sl, ip
 80185f0:	f8a4 9002 	strh.w	r9, [r4, #2]
 80185f4:	eba1 010c 	sub.w	r1, r1, ip
 80185f8:	80e1      	strh	r1, [r4, #6]
 80185fa:	4628      	mov	r0, r5
 80185fc:	9904      	ldr	r1, [sp, #16]
 80185fe:	3c08      	subs	r4, #8
 8018600:	4605      	mov	r5, r0
 8018602:	3901      	subs	r1, #1
 8018604:	9104      	str	r1, [sp, #16]
 8018606:	e7d3      	b.n	80185b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8018608:	4461      	add	r1, ip
 801860a:	b209      	sxth	r1, r1
 801860c:	4549      	cmp	r1, r9
 801860e:	dcf5      	bgt.n	80185fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8018610:	eba2 0c0c 	sub.w	ip, r2, ip
 8018614:	f8a4 c006 	strh.w	ip, [r4, #6]
 8018618:	e7ef      	b.n	80185fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801861a:	428f      	cmp	r7, r1
 801861c:	dcee      	bgt.n	80185fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801861e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8018622:	4461      	add	r1, ip
 8018624:	b209      	sxth	r1, r1
 8018626:	4589      	cmp	r9, r1
 8018628:	dbe8      	blt.n	80185fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801862a:	4576      	cmp	r6, lr
 801862c:	fa1f fc8e 	uxth.w	ip, lr
 8018630:	88a1      	ldrh	r1, [r4, #4]
 8018632:	dc07      	bgt.n	8018644 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8018634:	eba3 0c0c 	sub.w	ip, r3, ip
 8018638:	f8a4 8000 	strh.w	r8, [r4]
 801863c:	eba1 010c 	sub.w	r1, r1, ip
 8018640:	80a1      	strh	r1, [r4, #4]
 8018642:	e7da      	b.n	80185fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018644:	4461      	add	r1, ip
 8018646:	b209      	sxth	r1, r1
 8018648:	4588      	cmp	r8, r1
 801864a:	dbd7      	blt.n	80185fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801864c:	9905      	ldr	r1, [sp, #20]
 801864e:	eba1 0c0c 	sub.w	ip, r1, ip
 8018652:	f8a4 c004 	strh.w	ip, [r4, #4]
 8018656:	e7d0      	b.n	80185fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018658:	200279ce 	.word	0x200279ce
 801865c:	200279cc 	.word	0x200279cc
 8018660:	2d00      	cmp	r5, #0
 8018662:	f000 816d 	beq.w	8018940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8018666:	9b06      	ldr	r3, [sp, #24]
 8018668:	445b      	add	r3, fp
 801866a:	461c      	mov	r4, r3
 801866c:	9b02      	ldr	r3, [sp, #8]
 801866e:	3301      	adds	r3, #1
 8018670:	f000 8166 	beq.w	8018940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8018674:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8018678:	9803      	ldr	r0, [sp, #12]
 801867a:	4629      	mov	r1, r5
 801867c:	f7ff fd80 	bl	8018180 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018680:	b120      	cbz	r0, 801868c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8018682:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8018686:	9801      	ldr	r0, [sp, #4]
 8018688:	f7ff feb0 	bl	80183ec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801868c:	9903      	ldr	r1, [sp, #12]
 801868e:	4628      	mov	r0, r5
 8018690:	f7ff fd03 	bl	801809a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018694:	2800      	cmp	r0, #0
 8018696:	f000 809c 	beq.w	80187d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801869a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801869e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80186a2:	fa1f f189 	uxth.w	r1, r9
 80186a6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 80186aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80186ac:	eb01 0c03 	add.w	ip, r1, r3
 80186b0:	b283      	uxth	r3, r0
 80186b2:	4548      	cmp	r0, r9
 80186b4:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 80186b8:	fa1f fa8c 	uxth.w	sl, ip
 80186bc:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 80186c0:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 80186c4:	eb03 050c 	add.w	r5, r3, ip
 80186c8:	b2ad      	uxth	r5, r5
 80186ca:	9505      	str	r5, [sp, #20]
 80186cc:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 80186d0:	9504      	str	r5, [sp, #16]
 80186d2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 80186d6:	f340 8099 	ble.w	801880c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 80186da:	1a5b      	subs	r3, r3, r1
 80186dc:	4596      	cmp	lr, r2
 80186de:	fa0f f08a 	sxth.w	r0, sl
 80186e2:	b29b      	uxth	r3, r3
 80186e4:	b21e      	sxth	r6, r3
 80186e6:	dd2e      	ble.n	8018746 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 80186e8:	9f02      	ldr	r7, [sp, #8]
 80186ea:	fa1f fe8e 	uxth.w	lr, lr
 80186ee:	b292      	uxth	r2, r2
 80186f0:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 80186f4:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80186f8:	9f04      	ldr	r7, [sp, #16]
 80186fa:	ebae 0102 	sub.w	r1, lr, r2
 80186fe:	44a6      	add	lr, r4
 8018700:	1a3f      	subs	r7, r7, r0
 8018702:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8018706:	b289      	uxth	r1, r1
 8018708:	4402      	add	r2, r0
 801870a:	fa0f fe8e 	sxth.w	lr, lr
 801870e:	b20d      	sxth	r5, r1
 8018710:	b212      	sxth	r2, r2
 8018712:	436f      	muls	r7, r5
 8018714:	ebae 0202 	sub.w	r2, lr, r2
 8018718:	4372      	muls	r2, r6
 801871a:	4297      	cmp	r7, r2
 801871c:	db09      	blt.n	8018732 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801871e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8018722:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8018726:	449c      	add	ip, r3
 8018728:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801872c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8018730:	e686      	b.n	8018440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018732:	4421      	add	r1, r4
 8018734:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8018738:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801873c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8018740:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8018744:	e67c      	b.n	8018440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018746:	9f04      	ldr	r7, [sp, #16]
 8018748:	42b8      	cmp	r0, r7
 801874a:	da27      	bge.n	801879c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801874c:	9902      	ldr	r1, [sp, #8]
 801874e:	1a3f      	subs	r7, r7, r0
 8018750:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8018754:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8018758:	eb05 010e 	add.w	r1, r5, lr
 801875c:	fa1f f881 	uxth.w	r8, r1
 8018760:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8018764:	4411      	add	r1, r2
 8018766:	fa0f f988 	sxth.w	r9, r8
 801876a:	eba2 020e 	sub.w	r2, r2, lr
 801876e:	eba1 0108 	sub.w	r1, r1, r8
 8018772:	4372      	muls	r2, r6
 8018774:	b289      	uxth	r1, r1
 8018776:	fa0f f881 	sxth.w	r8, r1
 801877a:	fb08 f707 	mul.w	r7, r8, r7
 801877e:	42ba      	cmp	r2, r7
 8018780:	dc06      	bgt.n	8018790 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8018782:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8018786:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801878a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801878e:	e7ca      	b.n	8018726 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8018790:	4429      	add	r1, r5
 8018792:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8018796:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801879a:	e651      	b.n	8018440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801879c:	9805      	ldr	r0, [sp, #20]
 801879e:	2d06      	cmp	r5, #6
 80187a0:	ebaa 0000 	sub.w	r0, sl, r0
 80187a4:	b280      	uxth	r0, r0
 80187a6:	fa0f fe80 	sxth.w	lr, r0
 80187aa:	d817      	bhi.n	80187dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 80187ac:	9b04      	ldr	r3, [sp, #16]
 80187ae:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 80187b2:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80187b6:	1c6b      	adds	r3, r5, #1
 80187b8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 80187bc:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 80187c0:	9b01      	ldr	r3, [sp, #4]
 80187c2:	9801      	ldr	r0, [sp, #4]
 80187c4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80187c8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80187cc:	805a      	strh	r2, [r3, #2]
 80187ce:	809e      	strh	r6, [r3, #4]
 80187d0:	80d9      	strh	r1, [r3, #6]
 80187d2:	9b02      	ldr	r3, [sp, #8]
 80187d4:	3c08      	subs	r4, #8
 80187d6:	3b01      	subs	r3, #1
 80187d8:	9302      	str	r3, [sp, #8]
 80187da:	e747      	b.n	801866c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 80187dc:	9a02      	ldr	r2, [sp, #8]
 80187de:	45b6      	cmp	lr, r6
 80187e0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80187e4:	db0d      	blt.n	8018802 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80187e6:	449c      	add	ip, r3
 80187e8:	445a      	add	r2, fp
 80187ea:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80187ee:	fa1f fc8c 	uxth.w	ip, ip
 80187f2:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 80187f6:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 80187fa:	448c      	add	ip, r1
 80187fc:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8018800:	e61e      	b.n	8018440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018802:	445a      	add	r2, fp
 8018804:	4484      	add	ip, r0
 8018806:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801880a:	e78f      	b.n	801872c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801880c:	fa1f f18e 	uxth.w	r1, lr
 8018810:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8018814:	b293      	uxth	r3, r2
 8018816:	4596      	cmp	lr, r2
 8018818:	eb01 0806 	add.w	r8, r1, r6
 801881c:	9306      	str	r3, [sp, #24]
 801881e:	fa1f f888 	uxth.w	r8, r8
 8018822:	9f06      	ldr	r7, [sp, #24]
 8018824:	fa0f f388 	sxth.w	r3, r8
 8018828:	9307      	str	r3, [sp, #28]
 801882a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801882e:	443b      	add	r3, r7
 8018830:	b29b      	uxth	r3, r3
 8018832:	9308      	str	r3, [sp, #32]
 8018834:	da24      	bge.n	8018880 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8018836:	9905      	ldr	r1, [sp, #20]
 8018838:	eba3 0308 	sub.w	r3, r3, r8
 801883c:	eba2 020e 	sub.w	r2, r2, lr
 8018840:	eba9 0000 	sub.w	r0, r9, r0
 8018844:	ebaa 0401 	sub.w	r4, sl, r1
 8018848:	b29b      	uxth	r3, r3
 801884a:	b2a4      	uxth	r4, r4
 801884c:	b219      	sxth	r1, r3
 801884e:	b225      	sxth	r5, r4
 8018850:	4348      	muls	r0, r1
 8018852:	436a      	muls	r2, r5
 8018854:	4282      	cmp	r2, r0
 8018856:	9a02      	ldr	r2, [sp, #8]
 8018858:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801885c:	445a      	add	r2, fp
 801885e:	dc06      	bgt.n	801886e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8018860:	9b07      	ldr	r3, [sp, #28]
 8018862:	44a4      	add	ip, r4
 8018864:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8018868:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801886c:	e75e      	b.n	801872c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801886e:	9904      	ldr	r1, [sp, #16]
 8018870:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8018874:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8018878:	4433      	add	r3, r6
 801887a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801887e:	e5df      	b.n	8018440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018880:	9f06      	ldr	r7, [sp, #24]
 8018882:	9b04      	ldr	r3, [sp, #16]
 8018884:	1bc9      	subs	r1, r1, r7
 8018886:	fa0f f78a 	sxth.w	r7, sl
 801888a:	b289      	uxth	r1, r1
 801888c:	429f      	cmp	r7, r3
 801888e:	fa0f fe81 	sxth.w	lr, r1
 8018892:	dd23      	ble.n	80188dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8018894:	9a05      	ldr	r2, [sp, #20]
 8018896:	eba9 0000 	sub.w	r0, r9, r0
 801889a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801889e:	ebaa 0202 	sub.w	r2, sl, r2
 80188a2:	9d07      	ldr	r5, [sp, #28]
 80188a4:	fb0e f000 	mul.w	r0, lr, r0
 80188a8:	b292      	uxth	r2, r2
 80188aa:	eba5 0a03 	sub.w	sl, r5, r3
 80188ae:	9b02      	ldr	r3, [sp, #8]
 80188b0:	b214      	sxth	r4, r2
 80188b2:	00db      	lsls	r3, r3, #3
 80188b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80188b8:	445b      	add	r3, fp
 80188ba:	4550      	cmp	r0, sl
 80188bc:	db03      	blt.n	80188c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 80188be:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 80188c2:	4494      	add	ip, r2
 80188c4:	e732      	b.n	801872c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80188c6:	9a04      	ldr	r2, [sp, #16]
 80188c8:	4431      	add	r1, r6
 80188ca:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 80188ce:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 80188d2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 80188d6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80188da:	e75c      	b.n	8018796 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 80188dc:	9b08      	ldr	r3, [sp, #32]
 80188de:	2d06      	cmp	r5, #6
 80188e0:	eba3 0308 	sub.w	r3, r3, r8
 80188e4:	b29b      	uxth	r3, r3
 80188e6:	b218      	sxth	r0, r3
 80188e8:	d813      	bhi.n	8018912 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 80188ea:	9b07      	ldr	r3, [sp, #28]
 80188ec:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 80188f0:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 80188f4:	1c6b      	adds	r3, r5, #1
 80188f6:	9901      	ldr	r1, [sp, #4]
 80188f8:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 80188fc:	9b01      	ldr	r3, [sp, #4]
 80188fe:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8018902:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018906:	805a      	strh	r2, [r3, #2]
 8018908:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801890a:	f8a3 e006 	strh.w	lr, [r3, #6]
 801890e:	809a      	strh	r2, [r3, #4]
 8018910:	e75f      	b.n	80187d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8018912:	9c02      	ldr	r4, [sp, #8]
 8018914:	4570      	cmp	r0, lr
 8018916:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801891a:	db0d      	blt.n	8018938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801891c:	4431      	add	r1, r6
 801891e:	9b06      	ldr	r3, [sp, #24]
 8018920:	445c      	add	r4, fp
 8018922:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8018926:	b289      	uxth	r1, r1
 8018928:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801892c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8018930:	4419      	add	r1, r3
 8018932:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8018936:	e583      	b.n	8018440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018938:	445c      	add	r4, fp
 801893a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801893e:	e79b      	b.n	8018878 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8018940:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8018944:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8018948:	1e65      	subs	r5, r4, #1
 801894a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801894e:	b2ad      	uxth	r5, r5
 8018950:	42b5      	cmp	r5, r6
 8018952:	d044      	beq.n	80189de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8018954:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8018958:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801895c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8018960:	4282      	cmp	r2, r0
 8018962:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8018966:	d11f      	bne.n	80189a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8018968:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801896c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8018970:	459c      	cmp	ip, r3
 8018972:	d119      	bne.n	80189a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8018974:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8018978:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801897c:	19d8      	adds	r0, r3, r7
 801897e:	b200      	sxth	r0, r0
 8018980:	4288      	cmp	r0, r1
 8018982:	d109      	bne.n	8018998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8018984:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8018988:	4413      	add	r3, r2
 801898a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801898e:	4629      	mov	r1, r5
 8018990:	9801      	ldr	r0, [sp, #4]
 8018992:	f7ff fd2b 	bl	80183ec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018996:	e003      	b.n	80189a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8018998:	4411      	add	r1, r2
 801899a:	b209      	sxth	r1, r1
 801899c:	42b9      	cmp	r1, r7
 801899e:	d0f3      	beq.n	8018988 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 80189a0:	3d01      	subs	r5, #1
 80189a2:	3c08      	subs	r4, #8
 80189a4:	b2ad      	uxth	r5, r5
 80189a6:	e7d3      	b.n	8018950 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 80189a8:	42b9      	cmp	r1, r7
 80189aa:	d1f9      	bne.n	80189a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80189ac:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 80189b0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80189b4:	4299      	cmp	r1, r3
 80189b6:	d1f3      	bne.n	80189a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80189b8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80189bc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80189c0:	181f      	adds	r7, r3, r0
 80189c2:	b23f      	sxth	r7, r7
 80189c4:	42ba      	cmp	r2, r7
 80189c6:	d105      	bne.n	80189d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 80189c8:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 80189cc:	440b      	add	r3, r1
 80189ce:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80189d2:	e7dc      	b.n	801898e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 80189d4:	440a      	add	r2, r1
 80189d6:	b212      	sxth	r2, r2
 80189d8:	4290      	cmp	r0, r2
 80189da:	d1e1      	bne.n	80189a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80189dc:	e7f6      	b.n	80189cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 80189de:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 80189e2:	2e07      	cmp	r6, #7
 80189e4:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80189e8:	d812      	bhi.n	8018a10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 80189ea:	1c75      	adds	r5, r6, #1
 80189ec:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 80189f0:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 80189f4:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 80189f8:	9d01      	ldr	r5, [sp, #4]
 80189fa:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80189fe:	442c      	add	r4, r5
 8018a00:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8018a04:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8018a08:	8061      	strh	r1, [r4, #2]
 8018a0a:	80a2      	strh	r2, [r4, #4]
 8018a0c:	80e3      	strh	r3, [r4, #6]
 8018a0e:	e581      	b.n	8018514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018a10:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8018a14:	3e01      	subs	r6, #1
 8018a16:	445c      	add	r4, fp
 8018a18:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8018a1c:	f04f 37ff 	mov.w	r7, #4294967295
 8018a20:	2500      	movs	r5, #0
 8018a22:	9305      	str	r3, [sp, #20]
 8018a24:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8018a28:	1e72      	subs	r2, r6, #1
 8018a2a:	9302      	str	r3, [sp, #8]
 8018a2c:	4691      	mov	r9, r2
 8018a2e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8018a32:	9304      	str	r3, [sp, #16]
 8018a34:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8018a38:	f1b9 3fff 	cmp.w	r9, #4294967295
 8018a3c:	6818      	ldr	r0, [r3, #0]
 8018a3e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018a42:	9207      	str	r2, [sp, #28]
 8018a44:	bf16      	itet	ne
 8018a46:	9905      	ldrne	r1, [sp, #20]
 8018a48:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8018a4c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8018a50:	9306      	str	r3, [sp, #24]
 8018a52:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8018a56:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8018a5a:	fb18 f801 	smulbb	r8, r8, r1
 8018a5e:	6859      	ldr	r1, [r3, #4]
 8018a60:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018a64:	4671      	mov	r1, lr
 8018a66:	a80c      	add	r0, sp, #48	@ 0x30
 8018a68:	f7fc f965 	bl	8014d36 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018a6c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8018a70:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8018a74:	f04f 0c08 	mov.w	ip, #8
 8018a78:	9b04      	ldr	r3, [sp, #16]
 8018a7a:	9a02      	ldr	r2, [sp, #8]
 8018a7c:	fb10 f001 	smulbb	r0, r0, r1
 8018a80:	fb02 8803 	mla	r8, r2, r3, r8
 8018a84:	eba0 0108 	sub.w	r1, r0, r8
 8018a88:	fb90 f0fc 	sdiv	r0, r0, ip
 8018a8c:	4288      	cmp	r0, r1
 8018a8e:	dc20      	bgt.n	8018ad2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8018a90:	4551      	cmp	r1, sl
 8018a92:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8018a96:	da03      	bge.n	8018aa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8018a98:	b1d9      	cbz	r1, 8018ad2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8018a9a:	468a      	mov	sl, r1
 8018a9c:	464f      	mov	r7, r9
 8018a9e:	4635      	mov	r5, r6
 8018aa0:	f109 39ff 	add.w	r9, r9, #4294967295
 8018aa4:	f119 0f02 	cmn.w	r9, #2
 8018aa8:	d1c6      	bne.n	8018a38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8018aaa:	4616      	mov	r6, r2
 8018aac:	3201      	adds	r2, #1
 8018aae:	f1a4 0408 	sub.w	r4, r4, #8
 8018ab2:	d1b7      	bne.n	8018a24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8018ab4:	9b01      	ldr	r3, [sp, #4]
 8018ab6:	b2ac      	uxth	r4, r5
 8018ab8:	00ed      	lsls	r5, r5, #3
 8018aba:	1958      	adds	r0, r3, r5
 8018abc:	1c7b      	adds	r3, r7, #1
 8018abe:	d10b      	bne.n	8018ad8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8018ac0:	4601      	mov	r1, r0
 8018ac2:	9803      	ldr	r0, [sp, #12]
 8018ac4:	f7fc f937 	bl	8014d36 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018ac8:	4621      	mov	r1, r4
 8018aca:	9801      	ldr	r0, [sp, #4]
 8018acc:	f7ff fc8e 	bl	80183ec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018ad0:	e4b6      	b.n	8018440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018ad2:	464f      	mov	r7, r9
 8018ad4:	4635      	mov	r5, r6
 8018ad6:	e7ed      	b.n	8018ab4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8018ad8:	9b01      	ldr	r3, [sp, #4]
 8018ada:	00ff      	lsls	r7, r7, #3
 8018adc:	445d      	add	r5, fp
 8018ade:	19d9      	adds	r1, r3, r7
 8018ae0:	445f      	add	r7, fp
 8018ae2:	f7fc f928 	bl	8014d36 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018ae6:	9b03      	ldr	r3, [sp, #12]
 8018ae8:	cb03      	ldmia	r3!, {r0, r1}
 8018aea:	9b03      	ldr	r3, [sp, #12]
 8018aec:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8018af0:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8018af4:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8018af8:	6869      	ldr	r1, [r5, #4]
 8018afa:	c303      	stmia	r3!, {r0, r1}
 8018afc:	e7e4      	b.n	8018ac8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 8018afe:	bf00      	nop

08018b00 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8018b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b04:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8018b08:	b09b      	sub	sp, #108	@ 0x6c
 8018b0a:	4604      	mov	r4, r0
 8018b0c:	4630      	mov	r0, r6
 8018b0e:	f7f9 f8ba 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018b12:	4605      	mov	r5, r0
 8018b14:	b948      	cbnz	r0, 8018b2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8018b16:	6823      	ldr	r3, [r4, #0]
 8018b18:	4620      	mov	r0, r4
 8018b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018b1c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8018b20:	4798      	blx	r3
 8018b22:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8018b26:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8018b2a:	4bc5      	ldr	r3, [pc, #788]	@ (8018e40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d03f      	beq.n	8018bb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8018b32:	4dc4      	ldr	r5, [pc, #784]	@ (8018e44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8018b34:	4628      	mov	r0, r5
 8018b36:	f7f9 f8a6 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018b3a:	4606      	mov	r6, r0
 8018b3c:	2800      	cmp	r0, #0
 8018b3e:	d138      	bne.n	8018bb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8018b40:	4628      	mov	r0, r5
 8018b42:	f7ff f9d7 	bl	8017ef4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018b46:	6823      	ldr	r3, [r4, #0]
 8018b48:	6829      	ldr	r1, [r5, #0]
 8018b4a:	4620      	mov	r0, r4
 8018b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018b4e:	686a      	ldr	r2, [r5, #4]
 8018b50:	4798      	blx	r3
 8018b52:	802e      	strh	r6, [r5, #0]
 8018b54:	806e      	strh	r6, [r5, #2]
 8018b56:	80ae      	strh	r6, [r5, #4]
 8018b58:	80ee      	strh	r6, [r5, #6]
 8018b5a:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 8018b5e:	4dba      	ldr	r5, [pc, #744]	@ (8018e48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8018b60:	4640      	mov	r0, r8
 8018b62:	f7ff fbe7 	bl	8018334 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018b66:	882e      	ldrh	r6, [r5, #0]
 8018b68:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8018b6c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8018b70:	4633      	mov	r3, r6
 8018b72:	42bb      	cmp	r3, r7
 8018b74:	d224      	bcs.n	8018bc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8018b76:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8018b7a:	2907      	cmp	r1, #7
 8018b7c:	d816      	bhi.n	8018bac <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8018b7e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8018b82:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8018b86:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8018b8a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8018b8e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8018b92:	1c4a      	adds	r2, r1, #1
 8018b94:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8018b98:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8018b9c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8018ba0:	f8a2 a002 	strh.w	sl, [r2, #2]
 8018ba4:	f8a2 e004 	strh.w	lr, [r2, #4]
 8018ba8:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018bac:	3301      	adds	r3, #1
 8018bae:	b29b      	uxth	r3, r3
 8018bb0:	e7df      	b.n	8018b72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8018bb2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d1cf      	bne.n	8018b5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8018bba:	b01b      	add	sp, #108	@ 0x6c
 8018bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bc0:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8018bc4:	42b3      	cmp	r3, r6
 8018bc6:	d90c      	bls.n	8018be2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8018bc8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018bcc:	6822      	ldr	r2, [r4, #0]
 8018bce:	3601      	adds	r6, #1
 8018bd0:	4620      	mov	r0, r4
 8018bd2:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8018bd4:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8018bd8:	b2b6      	uxth	r6, r6
 8018bda:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8018bde:	47b8      	blx	r7
 8018be0:	e7ee      	b.n	8018bc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8018be2:	4a9a      	ldr	r2, [pc, #616]	@ (8018e4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8018be4:	6813      	ldr	r3, [r2, #0]
 8018be6:	4691      	mov	r9, r2
 8018be8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8018bec:	2b01      	cmp	r3, #1
 8018bee:	f040 80e0 	bne.w	8018db2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 8018bf2:	8829      	ldrh	r1, [r5, #0]
 8018bf4:	2600      	movs	r6, #0
 8018bf6:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8018bfa:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8018bfe:	33ae      	adds	r3, #174	@ 0xae
 8018c00:	428f      	cmp	r7, r1
 8018c02:	f103 0308 	add.w	r3, r3, #8
 8018c06:	dd0a      	ble.n	8018c1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8018c08:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8018c0c:	3101      	adds	r1, #1
 8018c0e:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8018c12:	4402      	add	r2, r0
 8018c14:	b212      	sxth	r2, r2
 8018c16:	4296      	cmp	r6, r2
 8018c18:	bfb8      	it	lt
 8018c1a:	4616      	movlt	r6, r2
 8018c1c:	e7f0      	b.n	8018c00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 8018c1e:	4b8c      	ldr	r3, [pc, #560]	@ (8018e50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8018c20:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 8018e4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8018c24:	881b      	ldrh	r3, [r3, #0]
 8018c26:	2b0f      	cmp	r3, #15
 8018c28:	bf8c      	ite	hi
 8018c2a:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 8018c2e:	f04f 0b01 	movls.w	fp, #1
 8018c32:	2300      	movs	r3, #0
 8018c34:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018c38:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8018c3c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8018c40:	4b82      	ldr	r3, [pc, #520]	@ (8018e4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8018c42:	4438      	add	r0, r7
 8018c44:	b207      	sxth	r7, r0
 8018c46:	6818      	ldr	r0, [r3, #0]
 8018c48:	42b7      	cmp	r7, r6
 8018c4a:	6803      	ldr	r3, [r0, #0]
 8018c4c:	f280 8083 	bge.w	8018d56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8018c50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8018c54:	4798      	blx	r3
 8018c56:	eb07 030b 	add.w	r3, r7, fp
 8018c5a:	4298      	cmp	r0, r3
 8018c5c:	da07      	bge.n	8018c6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8018c5e:	42b0      	cmp	r0, r6
 8018c60:	da05      	bge.n	8018c6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8018c62:	4287      	cmp	r7, r0
 8018c64:	dd6c      	ble.n	8018d40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8018c66:	2f00      	cmp	r7, #0
 8018c68:	dd6a      	ble.n	8018d40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8018c6a:	4630      	mov	r0, r6
 8018c6c:	e004      	b.n	8018c78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 8018c6e:	4287      	cmp	r7, r0
 8018c70:	dcfb      	bgt.n	8018c6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 8018c72:	42b0      	cmp	r0, r6
 8018c74:	bfa8      	it	ge
 8018c76:	4630      	movge	r0, r6
 8018c78:	4b76      	ldr	r3, [pc, #472]	@ (8018e54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8018c7a:	1bc0      	subs	r0, r0, r7
 8018c7c:	2200      	movs	r2, #0
 8018c7e:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018c86:	882f      	ldrh	r7, [r5, #0]
 8018c88:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018c8c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018c90:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018c94:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8018c98:	42bb      	cmp	r3, r7
 8018c9a:	d9cd      	bls.n	8018c38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8018c9c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8018ca0:	ab07      	add	r3, sp, #28
 8018ca2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8018ca6:	6851      	ldr	r1, [r2, #4]
 8018ca8:	c303      	stmia	r3!, {r0, r1}
 8018caa:	a905      	add	r1, sp, #20
 8018cac:	a807      	add	r0, sp, #28
 8018cae:	f7ff f9f4 	bl	801809a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018cb2:	2800      	cmp	r0, #0
 8018cb4:	d04c      	beq.n	8018d50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8018cb6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8018cba:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8018cbe:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8018cc2:	4686      	mov	lr, r0
 8018cc4:	4290      	cmp	r0, r2
 8018cc6:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8018cca:	4450      	add	r0, sl
 8018ccc:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8018cd0:	bfb8      	it	lt
 8018cd2:	4696      	movlt	lr, r2
 8018cd4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018cd8:	4452      	add	r2, sl
 8018cda:	b280      	uxth	r0, r0
 8018cdc:	4299      	cmp	r1, r3
 8018cde:	468c      	mov	ip, r1
 8018ce0:	b292      	uxth	r2, r2
 8018ce2:	9302      	str	r3, [sp, #8]
 8018ce4:	bfb8      	it	lt
 8018ce6:	469c      	movlt	ip, r3
 8018ce8:	b203      	sxth	r3, r0
 8018cea:	fa0f fa82 	sxth.w	sl, r2
 8018cee:	f8ad e01c 	strh.w	lr, [sp, #28]
 8018cf2:	f8ad c01e 	strh.w	ip, [sp, #30]
 8018cf6:	4553      	cmp	r3, sl
 8018cf8:	bfb8      	it	lt
 8018cfa:	4602      	movlt	r2, r0
 8018cfc:	9b02      	ldr	r3, [sp, #8]
 8018cfe:	eba2 020e 	sub.w	r2, r2, lr
 8018d02:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018d06:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8018d0a:	4411      	add	r1, r2
 8018d0c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018d10:	4413      	add	r3, r2
 8018d12:	b289      	uxth	r1, r1
 8018d14:	b29b      	uxth	r3, r3
 8018d16:	b208      	sxth	r0, r1
 8018d18:	b21a      	sxth	r2, r3
 8018d1a:	4290      	cmp	r0, r2
 8018d1c:	bfb8      	it	lt
 8018d1e:	460b      	movlt	r3, r1
 8018d20:	eba3 030c 	sub.w	r3, r3, ip
 8018d24:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8018d28:	a807      	add	r0, sp, #28
 8018d2a:	f7f8 ffac 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018d2e:	b920      	cbnz	r0, 8018d3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8018d30:	6823      	ldr	r3, [r4, #0]
 8018d32:	a907      	add	r1, sp, #28
 8018d34:	4620      	mov	r0, r4
 8018d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018d38:	4798      	blx	r3
 8018d3a:	3701      	adds	r7, #1
 8018d3c:	b2bf      	uxth	r7, r7
 8018d3e:	e7a9      	b.n	8018c94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8018d40:	f8d9 0000 	ldr.w	r0, [r9]
 8018d44:	2101      	movs	r1, #1
 8018d46:	6803      	ldr	r3, [r0, #0]
 8018d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8018d4c:	4798      	blx	r3
 8018d4e:	e773      	b.n	8018c38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8018d50:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8018d54:	e7e8      	b.n	8018d28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8018d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d58:	4798      	blx	r3
 8018d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8018e58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8018d5c:	781b      	ldrb	r3, [r3, #0]
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	f43f af2b 	beq.w	8018bba <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8018d64:	2300      	movs	r3, #0
 8018d66:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8018d6a:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8018d6e:	882b      	ldrh	r3, [r5, #0]
 8018d70:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8018d74:	42ab      	cmp	r3, r5
 8018d76:	f4bf af20 	bcs.w	8018bba <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8018d7a:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8018d7e:	2907      	cmp	r1, #7
 8018d80:	d814      	bhi.n	8018dac <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 8018d82:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8018d86:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8018d8a:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8018d8e:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8018d92:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8018d96:	1c4a      	adds	r2, r1, #1
 8018d98:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8018d9c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8018da0:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8018da4:	f8a2 c002 	strh.w	ip, [r2, #2]
 8018da8:	8097      	strh	r7, [r2, #4]
 8018daa:	80d6      	strh	r6, [r2, #6]
 8018dac:	3301      	adds	r3, #1
 8018dae:	b29b      	uxth	r3, r3
 8018db0:	e7e0      	b.n	8018d74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 8018db2:	2b02      	cmp	r3, #2
 8018db4:	f040 8133 	bne.w	801901e <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8018db8:	4b28      	ldr	r3, [pc, #160]	@ (8018e5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8018dba:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8018dbe:	781b      	ldrb	r3, [r3, #0]
 8018dc0:	2b01      	cmp	r3, #1
 8018dc2:	f000 8098 	beq.w	8018ef6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8018dc6:	882a      	ldrh	r2, [r5, #0]
 8018dc8:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8018dcc:	3201      	adds	r2, #1
 8018dce:	b292      	uxth	r2, r2
 8018dd0:	2900      	cmp	r1, #0
 8018dd2:	d0c2      	beq.n	8018d5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018dd4:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 8018dd8:	4694      	mov	ip, r2
 8018dda:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8018dde:	f04f 0900 	mov.w	r9, #0
 8018de2:	441e      	add	r6, r3
 8018de4:	b236      	sxth	r6, r6
 8018de6:	fa1f f38c 	uxth.w	r3, ip
 8018dea:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8018dee:	4299      	cmp	r1, r3
 8018df0:	f240 80be 	bls.w	8018f70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8018df4:	4427      	add	r7, r4
 8018df6:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8018dfa:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8018dfe:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8018e02:	4283      	cmp	r3, r0
 8018e04:	f340 80a0 	ble.w	8018f48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8018e08:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 8018e0c:	46e1      	mov	r9, ip
 8018e0e:	4406      	add	r6, r0
 8018e10:	b236      	sxth	r6, r6
 8018e12:	429e      	cmp	r6, r3
 8018e14:	bfa8      	it	ge
 8018e16:	461e      	movge	r6, r3
 8018e18:	f10c 0c01 	add.w	ip, ip, #1
 8018e1c:	e7e3      	b.n	8018de6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 8018e1e:	d10a      	bne.n	8018e36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8018e20:	4562      	cmp	r2, ip
 8018e22:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 8018e26:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 8018e2a:	bfb8      	it	lt
 8018e2c:	4662      	movlt	r2, ip
 8018e2e:	4288      	cmp	r0, r1
 8018e30:	bfb8      	it	lt
 8018e32:	461f      	movlt	r7, r3
 8018e34:	e086      	b.n	8018f44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8018e36:	428a      	cmp	r2, r1
 8018e38:	bfb8      	it	lt
 8018e3a:	460a      	movlt	r2, r1
 8018e3c:	e082      	b.n	8018f44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8018e3e:	bf00      	nop
 8018e40:	20027a18 	.word	0x20027a18
 8018e44:	20027a24 	.word	0x20027a24
 8018e48:	20000070 	.word	0x20000070
 8018e4c:	200279d8 	.word	0x200279d8
 8018e50:	200279ce 	.word	0x200279ce
 8018e54:	200279cc 	.word	0x200279cc
 8018e58:	200279d6 	.word	0x200279d6
 8018e5c:	200279d0 	.word	0x200279d0
 8018e60:	19a1      	adds	r1, r4, r6
 8018e62:	ab07      	add	r3, sp, #28
 8018e64:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8018e68:	6849      	ldr	r1, [r1, #4]
 8018e6a:	c303      	stmia	r3!, {r0, r1}
 8018e6c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018e70:	a807      	add	r0, sp, #28
 8018e72:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018e76:	2b13      	cmp	r3, #19
 8018e78:	440b      	add	r3, r1
 8018e7a:	bfd8      	it	le
 8018e7c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8018e80:	1a9b      	subs	r3, r3, r2
 8018e82:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018e86:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018e8a:	f7ff f84d 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018e8e:	a807      	add	r0, sp, #28
 8018e90:	f7f8 fef9 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018e94:	bb78      	cbnz	r0, 8018ef6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8018e96:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 8018e9a:	4426      	add	r6, r4
 8018e9c:	f8d9 0000 	ldr.w	r0, [r9]
 8018ea0:	f1bc 0f14 	cmp.w	ip, #20
 8018ea4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018ea8:	f8d0 e000 	ldr.w	lr, [r0]
 8018eac:	bfa8      	it	ge
 8018eae:	f04f 0c14 	movge.w	ip, #20
 8018eb2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8018eb6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018eba:	fa1f fc8c 	uxth.w	ip, ip
 8018ebe:	f8cd c000 	str.w	ip, [sp]
 8018ec2:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 8018ec6:	47d8      	blx	fp
 8018ec8:	4683      	mov	fp, r0
 8018eca:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8018ece:	a807      	add	r0, sp, #28
 8018ed0:	f7ff f810 	bl	8017ef4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018ed4:	6823      	ldr	r3, [r4, #0]
 8018ed6:	4620      	mov	r0, r4
 8018ed8:	a907      	add	r1, sp, #28
 8018eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018edc:	4798      	blx	r3
 8018ede:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8018ee2:	eba0 000b 	sub.w	r0, r0, fp
 8018ee6:	b200      	sxth	r0, r0
 8018ee8:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8018eec:	b918      	cbnz	r0, 8018ef6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8018eee:	b2b9      	uxth	r1, r7
 8018ef0:	4650      	mov	r0, sl
 8018ef2:	f7ff fa7b 	bl	80183ec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018ef6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8018efa:	f1bb 0f00 	cmp.w	fp, #0
 8018efe:	f43f af2c 	beq.w	8018d5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018f02:	882b      	ldrh	r3, [r5, #0]
 8018f04:	2700      	movs	r7, #0
 8018f06:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8018f0a:	3301      	adds	r3, #1
 8018f0c:	b29b      	uxth	r3, r3
 8018f0e:	b299      	uxth	r1, r3
 8018f10:	00fe      	lsls	r6, r7, #3
 8018f12:	458b      	cmp	fp, r1
 8018f14:	d9a4      	bls.n	8018e60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8018f16:	4426      	add	r6, r4
 8018f18:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8018f1c:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 8018f20:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8018f24:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8018f28:	4408      	add	r0, r1
 8018f2a:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 8018f2e:	4461      	add	r1, ip
 8018f30:	b200      	sxth	r0, r0
 8018f32:	b209      	sxth	r1, r1
 8018f34:	4288      	cmp	r0, r1
 8018f36:	f6bf af72 	bge.w	8018e1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8018f3a:	4584      	cmp	ip, r0
 8018f3c:	4662      	mov	r2, ip
 8018f3e:	461f      	mov	r7, r3
 8018f40:	bfb8      	it	lt
 8018f42:	4602      	movlt	r2, r0
 8018f44:	3301      	adds	r3, #1
 8018f46:	e7e2      	b.n	8018f0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8018f48:	d10e      	bne.n	8018f68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 8018f4a:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 8018f4e:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8018f52:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8018f56:	4473      	add	r3, lr
 8018f58:	b21b      	sxth	r3, r3
 8018f5a:	429e      	cmp	r6, r3
 8018f5c:	bfa8      	it	ge
 8018f5e:	461e      	movge	r6, r3
 8018f60:	4287      	cmp	r7, r0
 8018f62:	bfb8      	it	lt
 8018f64:	46e1      	movlt	r9, ip
 8018f66:	e757      	b.n	8018e18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8018f68:	4286      	cmp	r6, r0
 8018f6a:	bfa8      	it	ge
 8018f6c:	4606      	movge	r6, r0
 8018f6e:	e753      	b.n	8018e18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8018f70:	eb0a 0007 	add.w	r0, sl, r7
 8018f74:	4427      	add	r7, r4
 8018f76:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8018f7a:	f1bb 0f13 	cmp.w	fp, #19
 8018f7e:	bfdc      	itt	le
 8018f80:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 8018f84:	445e      	addle	r6, fp
 8018f86:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8018f8a:	bfd8      	it	le
 8018f8c:	b236      	sxthle	r6, r6
 8018f8e:	f7f8 fe7a 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018f92:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018f96:	2800      	cmp	r0, #0
 8018f98:	f47f af1a 	bne.w	8018dd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8018f9c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8018fa0:	fa1f fb8b 	uxth.w	fp, fp
 8018fa4:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8018fa8:	1ab6      	subs	r6, r6, r2
 8018faa:	4829      	ldr	r0, [pc, #164]	@ (8019050 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8018fac:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8018fb0:	2e14      	cmp	r6, #20
 8018fb2:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8018fb6:	6800      	ldr	r0, [r0, #0]
 8018fb8:	bfa8      	it	ge
 8018fba:	2614      	movge	r6, #20
 8018fbc:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018fc0:	f8ad 201e 	strh.w	r2, [sp, #30]
 8018fc4:	b289      	uxth	r1, r1
 8018fc6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018fca:	b2b6      	uxth	r6, r6
 8018fcc:	f8d0 c000 	ldr.w	ip, [r0]
 8018fd0:	b292      	uxth	r2, r2
 8018fd2:	455e      	cmp	r6, fp
 8018fd4:	bf94      	ite	ls
 8018fd6:	9600      	strls	r6, [sp, #0]
 8018fd8:	f8cd b000 	strhi.w	fp, [sp]
 8018fdc:	b29b      	uxth	r3, r3
 8018fde:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 8018fe2:	47b0      	blx	r6
 8018fe4:	6823      	ldr	r3, [r4, #0]
 8018fe6:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8018fea:	a907      	add	r1, sp, #28
 8018fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018fee:	4620      	mov	r0, r4
 8018ff0:	4798      	blx	r3
 8018ff2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8018ff6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8018ffa:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8018ffe:	1a5b      	subs	r3, r3, r1
 8019000:	440a      	add	r2, r1
 8019002:	b21b      	sxth	r3, r3
 8019004:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8019008:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801900c:	2b00      	cmp	r3, #0
 801900e:	f47f aeda 	bne.w	8018dc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8019012:	fa1f f189 	uxth.w	r1, r9
 8019016:	4650      	mov	r0, sl
 8019018:	f7ff f9e8 	bl	80183ec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801901c:	e6d3      	b.n	8018dc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801901e:	882e      	ldrh	r6, [r5, #0]
 8019020:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8019024:	42b3      	cmp	r3, r6
 8019026:	f67f ae98 	bls.w	8018d5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801902a:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801902e:	ab07      	add	r3, sp, #28
 8019030:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8019034:	6851      	ldr	r1, [r2, #4]
 8019036:	c303      	stmia	r3!, {r0, r1}
 8019038:	a807      	add	r0, sp, #28
 801903a:	f7f8 fe24 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 801903e:	b920      	cbnz	r0, 801904a <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8019040:	6823      	ldr	r3, [r4, #0]
 8019042:	a907      	add	r1, sp, #28
 8019044:	4620      	mov	r0, r4
 8019046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019048:	4798      	blx	r3
 801904a:	3601      	adds	r6, #1
 801904c:	b2b6      	uxth	r6, r6
 801904e:	e7e7      	b.n	8019020 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8019050:	200279d8 	.word	0x200279d8

08019054 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8019054:	4b03      	ldr	r3, [pc, #12]	@ (8019064 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8019056:	2200      	movs	r2, #0
 8019058:	801a      	strh	r2, [r3, #0]
 801905a:	805a      	strh	r2, [r3, #2]
 801905c:	809a      	strh	r2, [r3, #4]
 801905e:	80da      	strh	r2, [r3, #6]
 8019060:	4770      	bx	lr
 8019062:	bf00      	nop
 8019064:	20027a24 	.word	0x20027a24

08019068 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801906c:	b09d      	sub	sp, #116	@ 0x74
 801906e:	4606      	mov	r6, r0
 8019070:	4614      	mov	r4, r2
 8019072:	468a      	mov	sl, r1
 8019074:	a803      	add	r0, sp, #12
 8019076:	461d      	mov	r5, r3
 8019078:	f001 f96c 	bl	801a354 <_ZN8touchgfx12TextProviderC1Ev>
 801907c:	6833      	ldr	r3, [r6, #0]
 801907e:	4630      	mov	r0, r6
 8019080:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8019084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019086:	4798      	blx	r3
 8019088:	6833      	ldr	r3, [r6, #0]
 801908a:	4607      	mov	r7, r0
 801908c:	4630      	mov	r0, r6
 801908e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019090:	4798      	blx	r3
 8019092:	462a      	mov	r2, r5
 8019094:	2500      	movs	r5, #0
 8019096:	4621      	mov	r1, r4
 8019098:	9000      	str	r0, [sp, #0]
 801909a:	463b      	mov	r3, r7
 801909c:	462c      	mov	r4, r5
 801909e:	46a9      	mov	r9, r5
 80190a0:	46a8      	mov	r8, r5
 80190a2:	a803      	add	r0, sp, #12
 80190a4:	f001 f9a9 	bl	801a3fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80190a8:	2300      	movs	r3, #0
 80190aa:	9302      	str	r3, [sp, #8]
 80190ac:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80190b0:	429c      	cmp	r4, r3
 80190b2:	d002      	beq.n	80190ba <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80190b4:	455c      	cmp	r4, fp
 80190b6:	bf18      	it	ne
 80190b8:	4625      	movne	r5, r4
 80190ba:	ab02      	add	r3, sp, #8
 80190bc:	4632      	mov	r2, r6
 80190be:	4651      	mov	r1, sl
 80190c0:	a803      	add	r0, sp, #12
 80190c2:	f001 fc8f 	bl	801a9e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80190c6:	4604      	mov	r4, r0
 80190c8:	b108      	cbz	r0, 80190ce <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80190ca:	280a      	cmp	r0, #10
 80190cc:	d10a      	bne.n	80190e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80190ce:	45c1      	cmp	r9, r8
 80190d0:	bf38      	it	cc
 80190d2:	46c1      	movcc	r9, r8
 80190d4:	f04f 0800 	mov.w	r8, #0
 80190d8:	2c00      	cmp	r4, #0
 80190da:	d1e5      	bne.n	80190a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80190dc:	4648      	mov	r0, r9
 80190de:	b01d      	add	sp, #116	@ 0x74
 80190e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190e4:	9a02      	ldr	r2, [sp, #8]
 80190e6:	2a00      	cmp	r2, #0
 80190e8:	d0de      	beq.n	80190a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80190ea:	7b57      	ldrb	r7, [r2, #13]
 80190ec:	4629      	mov	r1, r5
 80190ee:	6833      	ldr	r3, [r6, #0]
 80190f0:	007f      	lsls	r7, r7, #1
 80190f2:	8894      	ldrh	r4, [r2, #4]
 80190f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80190f6:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 80190fa:	7a97      	ldrb	r7, [r2, #10]
 80190fc:	4307      	orrs	r7, r0
 80190fe:	4630      	mov	r0, r6
 8019100:	4798      	blx	r3
 8019102:	4438      	add	r0, r7
 8019104:	4480      	add	r8, r0
 8019106:	fa1f f888 	uxth.w	r8, r8
 801910a:	e7e5      	b.n	80190d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801910c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801910c:	b508      	push	{r3, lr}
 801910e:	6803      	ldr	r3, [r0, #0]
 8019110:	68db      	ldr	r3, [r3, #12]
 8019112:	4798      	blx	r3
 8019114:	b128      	cbz	r0, 8019122 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019116:	7b43      	ldrb	r3, [r0, #13]
 8019118:	7a80      	ldrb	r0, [r0, #10]
 801911a:	005b      	lsls	r3, r3, #1
 801911c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019120:	4318      	orrs	r0, r3
 8019122:	bd08      	pop	{r3, pc}

08019124 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019124:	b40e      	push	{r1, r2, r3}
 8019126:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019128:	b09e      	sub	sp, #120	@ 0x78
 801912a:	4605      	mov	r5, r0
 801912c:	ab23      	add	r3, sp, #140	@ 0x8c
 801912e:	a805      	add	r0, sp, #20
 8019130:	f853 4b04 	ldr.w	r4, [r3], #4
 8019134:	9303      	str	r3, [sp, #12]
 8019136:	f001 f90d 	bl	801a354 <_ZN8touchgfx12TextProviderC1Ev>
 801913a:	682b      	ldr	r3, [r5, #0]
 801913c:	4628      	mov	r0, r5
 801913e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019140:	4798      	blx	r3
 8019142:	682b      	ldr	r3, [r5, #0]
 8019144:	4606      	mov	r6, r0
 8019146:	4628      	mov	r0, r5
 8019148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801914a:	4798      	blx	r3
 801914c:	4633      	mov	r3, r6
 801914e:	4621      	mov	r1, r4
 8019150:	ae1e      	add	r6, sp, #120	@ 0x78
 8019152:	2400      	movs	r4, #0
 8019154:	9000      	str	r0, [sp, #0]
 8019156:	9a03      	ldr	r2, [sp, #12]
 8019158:	a805      	add	r0, sp, #20
 801915a:	f001 f94e 	bl	801a3fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801915e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8019162:	462a      	mov	r2, r5
 8019164:	4633      	mov	r3, r6
 8019166:	4621      	mov	r1, r4
 8019168:	a805      	add	r0, sp, #20
 801916a:	f001 fc3b 	bl	801a9e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801916e:	b300      	cbz	r0, 80191b2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8019170:	280a      	cmp	r0, #10
 8019172:	d01a      	beq.n	80191aa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019174:	9f04      	ldr	r7, [sp, #16]
 8019176:	b1c7      	cbz	r7, 80191aa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019178:	7b78      	ldrb	r0, [r7, #13]
 801917a:	7a3b      	ldrb	r3, [r7, #8]
 801917c:	00c1      	lsls	r1, r0, #3
 801917e:	88ea      	ldrh	r2, [r5, #6]
 8019180:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8019184:	4319      	orrs	r1, r3
 8019186:	0643      	lsls	r3, r0, #25
 8019188:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801918c:	bf48      	it	mi
 801918e:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8019192:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8019196:	bf48      	it	mi
 8019198:	b219      	sxthmi	r1, r3
 801919a:	79fb      	ldrb	r3, [r7, #7]
 801919c:	4303      	orrs	r3, r0
 801919e:	4413      	add	r3, r2
 80191a0:	1a5b      	subs	r3, r3, r1
 80191a2:	b21b      	sxth	r3, r3
 80191a4:	429c      	cmp	r4, r3
 80191a6:	bfb8      	it	lt
 80191a8:	461c      	movlt	r4, r3
 80191aa:	4633      	mov	r3, r6
 80191ac:	462a      	mov	r2, r5
 80191ae:	2100      	movs	r1, #0
 80191b0:	e7da      	b.n	8019168 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80191b2:	b2a0      	uxth	r0, r4
 80191b4:	b01e      	add	sp, #120	@ 0x78
 80191b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80191ba:	b003      	add	sp, #12
 80191bc:	4770      	bx	lr

080191be <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80191be:	7a43      	ldrb	r3, [r0, #9]
 80191c0:	8880      	ldrh	r0, [r0, #4]
 80191c2:	4418      	add	r0, r3
 80191c4:	b280      	uxth	r0, r0
 80191c6:	4770      	bx	lr

080191c8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80191c8:	6803      	ldr	r3, [r0, #0]
 80191ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80191cc:	4718      	bx	r3

080191ce <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80191ce:	b40e      	push	{r1, r2, r3}
 80191d0:	b570      	push	{r4, r5, r6, lr}
 80191d2:	b09d      	sub	sp, #116	@ 0x74
 80191d4:	4604      	mov	r4, r0
 80191d6:	ab21      	add	r3, sp, #132	@ 0x84
 80191d8:	a803      	add	r0, sp, #12
 80191da:	f853 5b04 	ldr.w	r5, [r3], #4
 80191de:	9302      	str	r3, [sp, #8]
 80191e0:	f001 f8b8 	bl	801a354 <_ZN8touchgfx12TextProviderC1Ev>
 80191e4:	6823      	ldr	r3, [r4, #0]
 80191e6:	4620      	mov	r0, r4
 80191e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80191ea:	4798      	blx	r3
 80191ec:	6823      	ldr	r3, [r4, #0]
 80191ee:	4606      	mov	r6, r0
 80191f0:	4620      	mov	r0, r4
 80191f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80191f4:	2401      	movs	r4, #1
 80191f6:	4798      	blx	r3
 80191f8:	4633      	mov	r3, r6
 80191fa:	9000      	str	r0, [sp, #0]
 80191fc:	4629      	mov	r1, r5
 80191fe:	9a02      	ldr	r2, [sp, #8]
 8019200:	a803      	add	r0, sp, #12
 8019202:	f001 f8fa 	bl	801a3fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019206:	a803      	add	r0, sp, #12
 8019208:	f001 fcb8 	bl	801ab7c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801920c:	b2a3      	uxth	r3, r4
 801920e:	b138      	cbz	r0, 8019220 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8019210:	280a      	cmp	r0, #10
 8019212:	a803      	add	r0, sp, #12
 8019214:	bf04      	itt	eq
 8019216:	3301      	addeq	r3, #1
 8019218:	b21c      	sxtheq	r4, r3
 801921a:	f001 fcaf 	bl	801ab7c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801921e:	e7f5      	b.n	801920c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019220:	4618      	mov	r0, r3
 8019222:	b01d      	add	sp, #116	@ 0x74
 8019224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019228:	b003      	add	sp, #12
 801922a:	4770      	bx	lr

0801922c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801922c:	b40e      	push	{r1, r2, r3}
 801922e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019230:	b09e      	sub	sp, #120	@ 0x78
 8019232:	4604      	mov	r4, r0
 8019234:	ab23      	add	r3, sp, #140	@ 0x8c
 8019236:	a805      	add	r0, sp, #20
 8019238:	f853 5b04 	ldr.w	r5, [r3], #4
 801923c:	9303      	str	r3, [sp, #12]
 801923e:	f001 f889 	bl	801a354 <_ZN8touchgfx12TextProviderC1Ev>
 8019242:	6823      	ldr	r3, [r4, #0]
 8019244:	4620      	mov	r0, r4
 8019246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019248:	4798      	blx	r3
 801924a:	6823      	ldr	r3, [r4, #0]
 801924c:	4606      	mov	r6, r0
 801924e:	4620      	mov	r0, r4
 8019250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019252:	4798      	blx	r3
 8019254:	4633      	mov	r3, r6
 8019256:	4629      	mov	r1, r5
 8019258:	9000      	str	r0, [sp, #0]
 801925a:	9a03      	ldr	r2, [sp, #12]
 801925c:	a805      	add	r0, sp, #20
 801925e:	f001 f8cc 	bl	801a3fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019262:	ad1e      	add	r5, sp, #120	@ 0x78
 8019264:	2100      	movs	r1, #0
 8019266:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801926a:	4622      	mov	r2, r4
 801926c:	a805      	add	r0, sp, #20
 801926e:	f845 1d68 	str.w	r1, [r5, #-104]!
 8019272:	462b      	mov	r3, r5
 8019274:	f001 fbb6 	bl	801a9e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019278:	b1d8      	cbz	r0, 80192b2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801927a:	280a      	cmp	r0, #10
 801927c:	d012      	beq.n	80192a4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801927e:	9804      	ldr	r0, [sp, #16]
 8019280:	b180      	cbz	r0, 80192a4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019282:	7b47      	ldrb	r7, [r0, #13]
 8019284:	88e2      	ldrh	r2, [r4, #6]
 8019286:	00fb      	lsls	r3, r7, #3
 8019288:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801928c:	7a03      	ldrb	r3, [r0, #8]
 801928e:	430b      	orrs	r3, r1
 8019290:	0679      	lsls	r1, r7, #25
 8019292:	bf44      	itt	mi
 8019294:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019298:	b21b      	sxthmi	r3, r3
 801929a:	1ad3      	subs	r3, r2, r3
 801929c:	b21b      	sxth	r3, r3
 801929e:	429e      	cmp	r6, r3
 80192a0:	bfa8      	it	ge
 80192a2:	461e      	movge	r6, r3
 80192a4:	462b      	mov	r3, r5
 80192a6:	4622      	mov	r2, r4
 80192a8:	2100      	movs	r1, #0
 80192aa:	a805      	add	r0, sp, #20
 80192ac:	f001 fb9a 	bl	801a9e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80192b0:	e7e2      	b.n	8019278 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80192b2:	4630      	mov	r0, r6
 80192b4:	b01e      	add	sp, #120	@ 0x78
 80192b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80192ba:	b003      	add	sp, #12
 80192bc:	4770      	bx	lr

080192be <_ZNK8touchgfx8Drawable10invalidateEv>:
 80192be:	b513      	push	{r0, r1, r4, lr}
 80192c0:	6803      	ldr	r3, [r0, #0]
 80192c2:	2400      	movs	r4, #0
 80192c4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80192c8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80192cc:	f8ad 1004 	strh.w	r1, [sp, #4]
 80192d0:	4669      	mov	r1, sp
 80192d2:	691b      	ldr	r3, [r3, #16]
 80192d4:	9400      	str	r4, [sp, #0]
 80192d6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80192da:	4798      	blx	r3
 80192dc:	b002      	add	sp, #8
 80192de:	bd10      	pop	{r4, pc}

080192e0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80192e0:	b538      	push	{r3, r4, r5, lr}
 80192e2:	680b      	ldr	r3, [r1, #0]
 80192e4:	460c      	mov	r4, r1
 80192e6:	4605      	mov	r5, r0
 80192e8:	68db      	ldr	r3, [r3, #12]
 80192ea:	4798      	blx	r3
 80192ec:	6823      	ldr	r3, [r4, #0]
 80192ee:	4620      	mov	r0, r4
 80192f0:	4629      	mov	r1, r5
 80192f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80192f4:	4798      	blx	r3
 80192f6:	4628      	mov	r0, r5
 80192f8:	bd38      	pop	{r3, r4, r5, pc}

080192fa <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80192fa:	b410      	push	{r4}
 80192fc:	880a      	ldrh	r2, [r1, #0]
 80192fe:	8884      	ldrh	r4, [r0, #4]
 8019300:	4422      	add	r2, r4
 8019302:	800a      	strh	r2, [r1, #0]
 8019304:	884a      	ldrh	r2, [r1, #2]
 8019306:	88c4      	ldrh	r4, [r0, #6]
 8019308:	4422      	add	r2, r4
 801930a:	804a      	strh	r2, [r1, #2]
 801930c:	6940      	ldr	r0, [r0, #20]
 801930e:	b120      	cbz	r0, 801931a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019310:	6803      	ldr	r3, [r0, #0]
 8019312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019318:	4718      	bx	r3
 801931a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801931e:	4770      	bx	lr

08019320 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019320:	b570      	push	{r4, r5, r6, lr}
 8019322:	8882      	ldrh	r2, [r0, #4]
 8019324:	460c      	mov	r4, r1
 8019326:	880b      	ldrh	r3, [r1, #0]
 8019328:	4605      	mov	r5, r0
 801932a:	4413      	add	r3, r2
 801932c:	800b      	strh	r3, [r1, #0]
 801932e:	884b      	ldrh	r3, [r1, #2]
 8019330:	88c2      	ldrh	r2, [r0, #6]
 8019332:	4413      	add	r3, r2
 8019334:	804b      	strh	r3, [r1, #2]
 8019336:	1d01      	adds	r1, r0, #4
 8019338:	4620      	mov	r0, r4
 801933a:	f7f8 fc61 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 801933e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019342:	2b00      	cmp	r3, #0
 8019344:	dd0b      	ble.n	801935e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019346:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801934a:	2b00      	cmp	r3, #0
 801934c:	dd07      	ble.n	801935e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801934e:	6968      	ldr	r0, [r5, #20]
 8019350:	b128      	cbz	r0, 801935e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019352:	6803      	ldr	r3, [r0, #0]
 8019354:	4621      	mov	r1, r4
 8019356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801935c:	4718      	bx	r3
 801935e:	bd70      	pop	{r4, r5, r6, pc}

08019360 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019360:	b570      	push	{r4, r5, r6, lr}
 8019362:	8882      	ldrh	r2, [r0, #4]
 8019364:	460c      	mov	r4, r1
 8019366:	880b      	ldrh	r3, [r1, #0]
 8019368:	4605      	mov	r5, r0
 801936a:	4413      	add	r3, r2
 801936c:	800b      	strh	r3, [r1, #0]
 801936e:	884b      	ldrh	r3, [r1, #2]
 8019370:	88c2      	ldrh	r2, [r0, #6]
 8019372:	4413      	add	r3, r2
 8019374:	804b      	strh	r3, [r1, #2]
 8019376:	1d01      	adds	r1, r0, #4
 8019378:	4620      	mov	r0, r4
 801937a:	f7f8 fc41 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 801937e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019382:	2b00      	cmp	r3, #0
 8019384:	dd19      	ble.n	80193ba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019386:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801938a:	2b00      	cmp	r3, #0
 801938c:	dd15      	ble.n	80193ba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801938e:	6968      	ldr	r0, [r5, #20]
 8019390:	b128      	cbz	r0, 801939e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8019392:	6803      	ldr	r3, [r0, #0]
 8019394:	4621      	mov	r1, r4
 8019396:	691b      	ldr	r3, [r3, #16]
 8019398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801939c:	4718      	bx	r3
 801939e:	4b07      	ldr	r3, [pc, #28]	@ (80193bc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	3304      	adds	r3, #4
 80193a4:	429d      	cmp	r5, r3
 80193a6:	d108      	bne.n	80193ba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80193a8:	f7fe ff10 	bl	80181cc <_ZN8touchgfx11Application11getInstanceEv>
 80193ac:	6803      	ldr	r3, [r0, #0]
 80193ae:	6821      	ldr	r1, [r4, #0]
 80193b0:	6862      	ldr	r2, [r4, #4]
 80193b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80193b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193b8:	4718      	bx	r3
 80193ba:	bd70      	pop	{r4, r5, r6, pc}
 80193bc:	20027a1c 	.word	0x20027a1c

080193c0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80193c0:	b570      	push	{r4, r5, r6, lr}
 80193c2:	4604      	mov	r4, r0
 80193c4:	4616      	mov	r6, r2
 80193c6:	460d      	mov	r5, r1
 80193c8:	b901      	cbnz	r1, 80193cc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80193ca:	b192      	cbz	r2, 80193f2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80193cc:	6823      	ldr	r3, [r4, #0]
 80193ce:	4620      	mov	r0, r4
 80193d0:	699b      	ldr	r3, [r3, #24]
 80193d2:	4798      	blx	r3
 80193d4:	88e2      	ldrh	r2, [r4, #6]
 80193d6:	88a1      	ldrh	r1, [r4, #4]
 80193d8:	4620      	mov	r0, r4
 80193da:	4432      	add	r2, r6
 80193dc:	4429      	add	r1, r5
 80193de:	b212      	sxth	r2, r2
 80193e0:	b209      	sxth	r1, r1
 80193e2:	f7f8 fee3 	bl	80121ac <_ZN8touchgfx8Drawable5setXYEss>
 80193e6:	6823      	ldr	r3, [r4, #0]
 80193e8:	4620      	mov	r0, r4
 80193ea:	699b      	ldr	r3, [r3, #24]
 80193ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193f0:	4718      	bx	r3
 80193f2:	bd70      	pop	{r4, r5, r6, pc}

080193f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80193f4:	b510      	push	{r4, lr}
 80193f6:	2300      	movs	r3, #0
 80193f8:	4604      	mov	r4, r0
 80193fa:	4608      	mov	r0, r1
 80193fc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019400:	8023      	strh	r3, [r4, #0]
 8019402:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019406:	8063      	strh	r3, [r4, #2]
 8019408:	6803      	ldr	r3, [r0, #0]
 801940a:	80a1      	strh	r1, [r4, #4]
 801940c:	4621      	mov	r1, r4
 801940e:	80e2      	strh	r2, [r4, #6]
 8019410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019412:	4798      	blx	r3
 8019414:	4620      	mov	r0, r4
 8019416:	bd10      	pop	{r4, pc}

08019418 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8019418:	4770      	bx	lr

0801941a <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 801941a:	b510      	push	{r4, lr}
 801941c:	4604      	mov	r4, r0
 801941e:	211c      	movs	r1, #28
 8019420:	f010 fccb 	bl	8029dba <_ZdlPvj>
 8019424:	4620      	mov	r0, r4
 8019426:	bd10      	pop	{r4, pc}

08019428 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8019428:	4a04      	ldr	r2, [pc, #16]	@ (801943c <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801942a:	6002      	str	r2, [r0, #0]
 801942c:	2200      	movs	r2, #0
 801942e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8019432:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019436:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801943a:	4770      	bx	lr
 801943c:	0802ee68 	.word	0x0802ee68

08019440 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 8019440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019444:	4604      	mov	r4, r0
 8019446:	b087      	sub	sp, #28
 8019448:	4696      	mov	lr, r2
 801944a:	6880      	ldr	r0, [r0, #8]
 801944c:	8b22      	ldrh	r2, [r4, #24]
 801944e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8019452:	9105      	str	r1, [sp, #20]
 8019454:	1c51      	adds	r1, r2, #1
 8019456:	8321      	strh	r1, [r4, #24]
 8019458:	2101      	movs	r1, #1
 801945a:	5481      	strb	r1, [r0, r2]
 801945c:	4689      	mov	r9, r1
 801945e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019462:	8b60      	ldrh	r0, [r4, #26]
 8019464:	ee06 2a90 	vmov	s13, r2
 8019468:	68e2      	ldr	r2, [r4, #12]
 801946a:	1845      	adds	r5, r0, r1
 801946c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019470:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8019474:	8365      	strh	r5, [r4, #26]
 8019476:	edc2 6a00 	vstr	s13, [r2]
 801947a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801947e:	8b60      	ldrh	r0, [r4, #26]
 8019480:	ee07 2a10 	vmov	s14, r2
 8019484:	68e2      	ldr	r2, [r4, #12]
 8019486:	1845      	adds	r5, r0, r1
 8019488:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801948c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8019490:	8365      	strh	r5, [r4, #26]
 8019492:	1d18      	adds	r0, r3, #4
 8019494:	460d      	mov	r5, r1
 8019496:	ed82 7a00 	vstr	s14, [r2]
 801949a:	f8be 2000 	ldrh.w	r2, [lr]
 801949e:	9203      	str	r2, [sp, #12]
 80194a0:	2200      	movs	r2, #0
 80194a2:	4613      	mov	r3, r2
 80194a4:	4694      	mov	ip, r2
 80194a6:	9201      	str	r2, [sp, #4]
 80194a8:	9202      	str	r2, [sp, #8]
 80194aa:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 80194ae:	9e05      	ldr	r6, [sp, #20]
 80194b0:	f108 0701 	add.w	r7, r8, #1
 80194b4:	f8d4 a008 	ldr.w	sl, [r4, #8]
 80194b8:	428e      	cmp	r6, r1
 80194ba:	b2bf      	uxth	r7, r7
 80194bc:	eb0a 0b08 	add.w	fp, sl, r8
 80194c0:	f340 80b6 	ble.w	8019630 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 80194c4:	9b03      	ldr	r3, [sp, #12]
 80194c6:	f9b0 c000 	ldrsh.w	ip, [r0]
 80194ca:	fa43 fb05 	asr.w	fp, r3, r5
 80194ce:	f00b 0b01 	and.w	fp, fp, #1
 80194d2:	fa5f f38b 	uxtb.w	r3, fp
 80194d6:	9304      	str	r3, [sp, #16]
 80194d8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80194dc:	f1bb 0f00 	cmp.w	fp, #0
 80194e0:	d057      	beq.n	8019592 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 80194e2:	ee07 ca90 	vmov	s15, ip
 80194e6:	8327      	strh	r7, [r4, #24]
 80194e8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80194ec:	ee07 3a90 	vmov	s15, r3
 80194f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80194f4:	f1b9 0f00 	cmp.w	r9, #0
 80194f8:	d028      	beq.n	801954c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 80194fa:	f04f 0602 	mov.w	r6, #2
 80194fe:	f80a 6008 	strb.w	r6, [sl, r8]
 8019502:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019506:	68e7      	ldr	r7, [r4, #12]
 8019508:	f108 0901 	add.w	r9, r8, #1
 801950c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019510:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019514:	edc7 5a00 	vstr	s11, [r7]
 8019518:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801951c:	68e7      	ldr	r7, [r4, #12]
 801951e:	f108 0901 	add.w	r9, r8, #1
 8019522:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019526:	f8a4 901a 	strh.w	r9, [r4, #26]
 801952a:	edc7 7a00 	vstr	s15, [r7]
 801952e:	3501      	adds	r5, #1
 8019530:	2d10      	cmp	r5, #16
 8019532:	d106      	bne.n	8019542 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8019534:	9d02      	ldr	r5, [sp, #8]
 8019536:	3501      	adds	r5, #1
 8019538:	9502      	str	r5, [sp, #8]
 801953a:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 801953e:	9503      	str	r5, [sp, #12]
 8019540:	2500      	movs	r5, #0
 8019542:	3101      	adds	r1, #1
 8019544:	3004      	adds	r0, #4
 8019546:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801954a:	e7ae      	b.n	80194aa <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 801954c:	f04f 0605 	mov.w	r6, #5
 8019550:	ed9d 5a01 	vldr	s10, [sp, #4]
 8019554:	f80a 6008 	strb.w	r6, [sl, r8]
 8019558:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801955c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8019560:	68e7      	ldr	r7, [r4, #12]
 8019562:	f108 0901 	add.w	r9, r8, #1
 8019566:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801956a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801956e:	ed87 5a00 	vstr	s10, [r7]
 8019572:	ee05 2a10 	vmov	s10, r2
 8019576:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801957a:	68e7      	ldr	r7, [r4, #12]
 801957c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8019580:	f108 0901 	add.w	r9, r8, #1
 8019584:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8019588:	f8a4 901a 	strh.w	r9, [r4, #26]
 801958c:	ed87 5a00 	vstr	s10, [r7]
 8019590:	e7b7      	b.n	8019502 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 8019592:	f1b9 0f00 	cmp.w	r9, #0
 8019596:	d147      	bne.n	8019628 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 8019598:	f04f 0605 	mov.w	r6, #5
 801959c:	eddd 7a01 	vldr	s15, [sp, #4]
 80195a0:	8327      	strh	r7, [r4, #24]
 80195a2:	f80a 6008 	strb.w	r6, [sl, r8]
 80195a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80195aa:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80195ae:	68e7      	ldr	r7, [r4, #12]
 80195b0:	f108 0901 	add.w	r9, r8, #1
 80195b4:	9e01      	ldr	r6, [sp, #4]
 80195b6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80195ba:	f8a4 901a 	strh.w	r9, [r4, #26]
 80195be:	4466      	add	r6, ip
 80195c0:	edc7 7a00 	vstr	s15, [r7]
 80195c4:	ee07 2a90 	vmov	s15, r2
 80195c8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80195cc:	441a      	add	r2, r3
 80195ce:	68e7      	ldr	r7, [r4, #12]
 80195d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80195d4:	f108 0901 	add.w	r9, r8, #1
 80195d8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80195dc:	f8a4 901a 	strh.w	r9, [r4, #26]
 80195e0:	edc7 7a00 	vstr	s15, [r7]
 80195e4:	ee07 6a90 	vmov	s15, r6
 80195e8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80195ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80195f0:	68e7      	ldr	r7, [r4, #12]
 80195f2:	f108 0901 	add.w	r9, r8, #1
 80195f6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80195fa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80195fe:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019602:	edc7 7a00 	vstr	s15, [r7]
 8019606:	ee07 2a90 	vmov	s15, r2
 801960a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801960e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019612:	68e7      	ldr	r7, [r4, #12]
 8019614:	f108 0901 	add.w	r9, r8, #1
 8019618:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801961c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019620:	f8a4 901a 	strh.w	r9, [r4, #26]
 8019624:	edc7 7a00 	vstr	s15, [r7]
 8019628:	461a      	mov	r2, r3
 801962a:	f8cd c004 	str.w	ip, [sp, #4]
 801962e:	e77e      	b.n	801952e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 8019630:	f1b9 0f00 	cmp.w	r9, #0
 8019634:	d028      	beq.n	8019688 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8019636:	ee07 ca90 	vmov	s15, ip
 801963a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801963e:	eef4 6a67 	vcmp.f32	s13, s15
 8019642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019646:	d108      	bne.n	801965a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 8019648:	ee07 3a90 	vmov	s15, r3
 801964c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019650:	eeb4 7a67 	vcmp.f32	s14, s15
 8019654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019658:	d016      	beq.n	8019688 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801965a:	2302      	movs	r3, #2
 801965c:	8327      	strh	r7, [r4, #24]
 801965e:	f88b 3000 	strb.w	r3, [fp]
 8019662:	8b62      	ldrh	r2, [r4, #26]
 8019664:	68e3      	ldr	r3, [r4, #12]
 8019666:	1c51      	adds	r1, r2, #1
 8019668:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801966c:	8361      	strh	r1, [r4, #26]
 801966e:	edc3 6a00 	vstr	s13, [r3]
 8019672:	8b62      	ldrh	r2, [r4, #26]
 8019674:	68e3      	ldr	r3, [r4, #12]
 8019676:	1c51      	adds	r1, r2, #1
 8019678:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801967c:	8361      	strh	r1, [r4, #26]
 801967e:	ed83 7a00 	vstr	s14, [r3]
 8019682:	b007      	add	sp, #28
 8019684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019688:	2305      	movs	r3, #5
 801968a:	eddd 7a01 	vldr	s15, [sp, #4]
 801968e:	8327      	strh	r7, [r4, #24]
 8019690:	f88b 3000 	strb.w	r3, [fp]
 8019694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019698:	8b61      	ldrh	r1, [r4, #26]
 801969a:	68e3      	ldr	r3, [r4, #12]
 801969c:	1c4d      	adds	r5, r1, #1
 801969e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80196a2:	8365      	strh	r5, [r4, #26]
 80196a4:	edc3 7a00 	vstr	s15, [r3]
 80196a8:	ee07 2a90 	vmov	s15, r2
 80196ac:	8b61      	ldrh	r1, [r4, #26]
 80196ae:	68e3      	ldr	r3, [r4, #12]
 80196b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80196b4:	1c4d      	adds	r5, r1, #1
 80196b6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80196ba:	8365      	strh	r5, [r4, #26]
 80196bc:	edc3 7a00 	vstr	s15, [r3]
 80196c0:	e7cf      	b.n	8019662 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

080196c4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 80196c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196c8:	4604      	mov	r4, r0
 80196ca:	b08e      	sub	sp, #56	@ 0x38
 80196cc:	4699      	mov	r9, r3
 80196ce:	4688      	mov	r8, r1
 80196d0:	4615      	mov	r5, r2
 80196d2:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80196d4:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 80196d8:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80196da:	f7e9 f9c5 	bl	8002a68 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 80196de:	6060      	str	r0, [r4, #4]
 80196e0:	f1b9 0f00 	cmp.w	r9, #0
 80196e4:	f000 80e8 	beq.w	80198b8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 80196e8:	2800      	cmp	r0, #0
 80196ea:	f000 80e5 	beq.w	80198b8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 80196ee:	a805      	add	r0, sp, #20
 80196f0:	f000 f8f9 	bl	80198e6 <_ZN8touchgfx9Matrix3x3C1Ev>
 80196f4:	6833      	ldr	r3, [r6, #0]
 80196f6:	4630      	mov	r0, r6
 80196f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80196fa:	4798      	blx	r3
 80196fc:	a805      	add	r0, sp, #20
 80196fe:	eef0 0a40 	vmov.f32	s1, s0
 8019702:	f000 f8f4 	bl	80198ee <_ZN8touchgfx9Matrix3x35scaleEff>
 8019706:	6860      	ldr	r0, [r4, #4]
 8019708:	f1ba 0f03 	cmp.w	sl, #3
 801970c:	d83b      	bhi.n	8019786 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801970e:	e8df f00a 	tbb	[pc, sl]
 8019712:	1002      	.short	0x1002
 8019714:	9f71      	.short	0x9f71
 8019716:	6803      	ldr	r3, [r0, #0]
 8019718:	462a      	mov	r2, r5
 801971a:	4641      	mov	r1, r8
 801971c:	689b      	ldr	r3, [r3, #8]
 801971e:	4798      	blx	r3
 8019720:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8019724:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8019728:	ee07 7a90 	vmov	s15, r7
 801972c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8019730:	e026      	b.n	8019780 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 8019732:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8019736:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801973a:	8869      	ldrh	r1, [r5, #2]
 801973c:	1a9b      	subs	r3, r3, r2
 801973e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019742:	aa03      	add	r2, sp, #12
 8019744:	1a5b      	subs	r3, r3, r1
 8019746:	4641      	mov	r1, r8
 8019748:	f8ad 300c 	strh.w	r3, [sp, #12]
 801974c:	882b      	ldrh	r3, [r5, #0]
 801974e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019752:	88ab      	ldrh	r3, [r5, #4]
 8019754:	f8ad 3012 	strh.w	r3, [sp, #18]
 8019758:	6803      	ldr	r3, [r0, #0]
 801975a:	689b      	ldr	r3, [r3, #8]
 801975c:	4798      	blx	r3
 801975e:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 80198c0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 8019762:	a805      	add	r0, sp, #20
 8019764:	f000 f8e8 	bl	8019938 <_ZN8touchgfx9Matrix3x36rotateEf>
 8019768:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801976c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801976e:	ee07 7a90 	vmov	s15, r7
 8019772:	1a9b      	subs	r3, r3, r2
 8019774:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8019778:	ee00 3a10 	vmov	s0, r3
 801977c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8019780:	a805      	add	r0, sp, #20
 8019782:	f000 f927 	bl	80199d4 <_ZN8touchgfx9Matrix3x39translateEff>
 8019786:	6860      	ldr	r0, [r4, #4]
 8019788:	a905      	add	r1, sp, #20
 801978a:	2500      	movs	r5, #0
 801978c:	f109 0602 	add.w	r6, r9, #2
 8019790:	6803      	ldr	r3, [r0, #0]
 8019792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019794:	4798      	blx	r3
 8019796:	6860      	ldr	r0, [r4, #4]
 8019798:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801979a:	6803      	ldr	r3, [r0, #0]
 801979c:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 80197a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80197a2:	4798      	blx	r3
 80197a4:	6860      	ldr	r0, [r4, #4]
 80197a6:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 80197aa:	6803      	ldr	r3, [r0, #0]
 80197ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80197ae:	4798      	blx	r3
 80197b0:	6860      	ldr	r0, [r4, #4]
 80197b2:	2101      	movs	r1, #1
 80197b4:	6803      	ldr	r3, [r0, #0]
 80197b6:	68db      	ldr	r3, [r3, #12]
 80197b8:	4798      	blx	r3
 80197ba:	f8b9 7000 	ldrh.w	r7, [r9]
 80197be:	f104 0310 	add.w	r3, r4, #16
 80197c2:	61a5      	str	r5, [r4, #24]
 80197c4:	f104 0208 	add.w	r2, r4, #8
 80197c8:	f104 0114 	add.w	r1, r4, #20
 80197cc:	f104 000c 	add.w	r0, r4, #12
 80197d0:	f7f0 f8d6 	bl	8009980 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 80197d4:	42af      	cmp	r7, r5
 80197d6:	dd60      	ble.n	801989a <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 80197d8:	8831      	ldrh	r1, [r6, #0]
 80197da:	1cb2      	adds	r2, r6, #2
 80197dc:	4620      	mov	r0, r4
 80197de:	3501      	adds	r5, #1
 80197e0:	f101 030f 	add.w	r3, r1, #15
 80197e4:	f3c3 1307 	ubfx	r3, r3, #4, #8
 80197e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80197ec:	f7ff fe28 	bl	8019440 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 80197f0:	4606      	mov	r6, r0
 80197f2:	e7ef      	b.n	80197d4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 80197f4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80197f8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80197fc:	8829      	ldrh	r1, [r5, #0]
 80197fe:	1a9b      	subs	r3, r3, r2
 8019800:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019804:	aa03      	add	r2, sp, #12
 8019806:	1a5b      	subs	r3, r3, r1
 8019808:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801980c:	886d      	ldrh	r5, [r5, #2]
 801980e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019812:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8019816:	f8ad 1012 	strh.w	r1, [sp, #18]
 801981a:	1a5b      	subs	r3, r3, r1
 801981c:	4641      	mov	r1, r8
 801981e:	1b5b      	subs	r3, r3, r5
 8019820:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019824:	6803      	ldr	r3, [r0, #0]
 8019826:	689b      	ldr	r3, [r3, #8]
 8019828:	4798      	blx	r3
 801982a:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 80198c4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801982e:	a805      	add	r0, sp, #20
 8019830:	f000 f882 	bl	8019938 <_ZN8touchgfx9Matrix3x36rotateEf>
 8019834:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8019838:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801983a:	1a9b      	subs	r3, r3, r2
 801983c:	ee00 3a90 	vmov	s1, r3
 8019840:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8019844:	1bdb      	subs	r3, r3, r7
 8019846:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801984a:	ee00 3a10 	vmov	s0, r3
 801984e:	e795      	b.n	801977c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8019850:	886b      	ldrh	r3, [r5, #2]
 8019852:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8019856:	f8ad 300c 	strh.w	r3, [sp, #12]
 801985a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801985e:	8829      	ldrh	r1, [r5, #0]
 8019860:	1a9b      	subs	r3, r3, r2
 8019862:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019866:	aa03      	add	r2, sp, #12
 8019868:	1a5b      	subs	r3, r3, r1
 801986a:	4641      	mov	r1, r8
 801986c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019870:	88eb      	ldrh	r3, [r5, #6]
 8019872:	f8ad 3010 	strh.w	r3, [sp, #16]
 8019876:	6803      	ldr	r3, [r0, #0]
 8019878:	689b      	ldr	r3, [r3, #8]
 801987a:	4798      	blx	r3
 801987c:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80198c8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8019880:	a805      	add	r0, sp, #20
 8019882:	f000 f859 	bl	8019938 <_ZN8touchgfx9Matrix3x36rotateEf>
 8019886:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801988a:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801988e:	1bdb      	subs	r3, r3, r7
 8019890:	ee00 3a90 	vmov	s1, r3
 8019894:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8019898:	e748      	b.n	801972c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801989a:	6860      	ldr	r0, [r4, #4]
 801989c:	2100      	movs	r1, #0
 801989e:	8b22      	ldrh	r2, [r4, #24]
 80198a0:	6803      	ldr	r3, [r0, #0]
 80198a2:	9101      	str	r1, [sp, #4]
 80198a4:	8b61      	ldrh	r1, [r4, #26]
 80198a6:	9100      	str	r1, [sp, #0]
 80198a8:	6a1d      	ldr	r5, [r3, #32]
 80198aa:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80198ae:	47a8      	blx	r5
 80198b0:	6860      	ldr	r0, [r4, #4]
 80198b2:	6803      	ldr	r3, [r0, #0]
 80198b4:	69db      	ldr	r3, [r3, #28]
 80198b6:	4798      	blx	r3
 80198b8:	b00e      	add	sp, #56	@ 0x38
 80198ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198be:	bf00      	nop
 80198c0:	42b40000 	.word	0x42b40000
 80198c4:	43340000 	.word	0x43340000
 80198c8:	43870000 	.word	0x43870000

080198cc <_ZN8touchgfx9Matrix3x35resetEv>:
 80198cc:	2300      	movs	r3, #0
 80198ce:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80198d2:	6043      	str	r3, [r0, #4]
 80198d4:	6002      	str	r2, [r0, #0]
 80198d6:	6083      	str	r3, [r0, #8]
 80198d8:	60c3      	str	r3, [r0, #12]
 80198da:	6102      	str	r2, [r0, #16]
 80198dc:	6143      	str	r3, [r0, #20]
 80198de:	6183      	str	r3, [r0, #24]
 80198e0:	61c3      	str	r3, [r0, #28]
 80198e2:	6202      	str	r2, [r0, #32]
 80198e4:	4770      	bx	lr

080198e6 <_ZN8touchgfx9Matrix3x3C1Ev>:
 80198e6:	b508      	push	{r3, lr}
 80198e8:	f7ff fff0 	bl	80198cc <_ZN8touchgfx9Matrix3x35resetEv>
 80198ec:	bd08      	pop	{r3, pc}

080198ee <_ZN8touchgfx9Matrix3x35scaleEff>:
 80198ee:	edd0 7a00 	vldr	s15, [r0]
 80198f2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80198f6:	edc0 7a00 	vstr	s15, [r0]
 80198fa:	edd0 7a01 	vldr	s15, [r0, #4]
 80198fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019902:	edc0 7a01 	vstr	s15, [r0, #4]
 8019906:	edd0 7a02 	vldr	s15, [r0, #8]
 801990a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801990e:	edd0 7a03 	vldr	s15, [r0, #12]
 8019912:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8019916:	ed80 0a02 	vstr	s0, [r0, #8]
 801991a:	edc0 7a03 	vstr	s15, [r0, #12]
 801991e:	edd0 7a04 	vldr	s15, [r0, #16]
 8019922:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8019926:	edc0 7a04 	vstr	s15, [r0, #16]
 801992a:	edd0 7a05 	vldr	s15, [r0, #20]
 801992e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8019932:	edc0 0a05 	vstr	s1, [r0, #20]
 8019936:	4770      	bx	lr

08019938 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8019938:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80199cc <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801993c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019940:	eddf 7a23 	vldr	s15, [pc, #140]	@ 80199d0 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8019944:	b510      	push	{r4, lr}
 8019946:	ed2d 8b02 	vpush	{d8}
 801994a:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801994e:	4604      	mov	r4, r0
 8019950:	eeb0 0a68 	vmov.f32	s0, s17
 8019954:	f010 fb68 	bl	802a028 <cosf>
 8019958:	eeb0 8a40 	vmov.f32	s16, s0
 801995c:	eeb0 0a68 	vmov.f32	s0, s17
 8019960:	f010 fa9e 	bl	8029ea0 <sinf>
 8019964:	edd4 6a03 	vldr	s13, [r4, #12]
 8019968:	edd4 4a00 	vldr	s9, [r4]
 801996c:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8019970:	ed94 7a04 	vldr	s14, [r4, #16]
 8019974:	ed94 5a01 	vldr	s10, [r4, #4]
 8019978:	ee66 6a88 	vmul.f32	s13, s13, s16
 801997c:	edd4 5a02 	vldr	s11, [r4, #8]
 8019980:	eee8 7a24 	vfma.f32	s15, s16, s9
 8019984:	eee0 6a24 	vfma.f32	s13, s0, s9
 8019988:	edc4 7a00 	vstr	s15, [r4]
 801998c:	ee60 7a47 	vnmul.f32	s15, s0, s14
 8019990:	ee27 7a08 	vmul.f32	s14, s14, s16
 8019994:	edc4 6a03 	vstr	s13, [r4, #12]
 8019998:	eee8 7a05 	vfma.f32	s15, s16, s10
 801999c:	eea0 7a05 	vfma.f32	s14, s0, s10
 80199a0:	edc4 7a01 	vstr	s15, [r4, #4]
 80199a4:	edd4 7a05 	vldr	s15, [r4, #20]
 80199a8:	ed84 7a04 	vstr	s14, [r4, #16]
 80199ac:	ee20 6a67 	vnmul.f32	s12, s0, s15
 80199b0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80199b4:	eea8 6a25 	vfma.f32	s12, s16, s11
 80199b8:	eee0 7a25 	vfma.f32	s15, s0, s11
 80199bc:	ecbd 8b02 	vpop	{d8}
 80199c0:	ed84 6a02 	vstr	s12, [r4, #8]
 80199c4:	edc4 7a05 	vstr	s15, [r4, #20]
 80199c8:	bd10      	pop	{r4, pc}
 80199ca:	bf00      	nop
 80199cc:	40490fdb 	.word	0x40490fdb
 80199d0:	43340000 	.word	0x43340000

080199d4 <_ZN8touchgfx9Matrix3x39translateEff>:
 80199d4:	ed90 6a06 	vldr	s12, [r0, #24]
 80199d8:	edd0 7a00 	vldr	s15, [r0]
 80199dc:	edd0 6a07 	vldr	s13, [r0, #28]
 80199e0:	eee6 7a00 	vfma.f32	s15, s12, s0
 80199e4:	ed90 7a08 	vldr	s14, [r0, #32]
 80199e8:	edc0 7a00 	vstr	s15, [r0]
 80199ec:	edd0 7a01 	vldr	s15, [r0, #4]
 80199f0:	eee6 7a80 	vfma.f32	s15, s13, s0
 80199f4:	edc0 7a01 	vstr	s15, [r0, #4]
 80199f8:	edd0 7a02 	vldr	s15, [r0, #8]
 80199fc:	eee7 7a00 	vfma.f32	s15, s14, s0
 8019a00:	edc0 7a02 	vstr	s15, [r0, #8]
 8019a04:	edd0 7a03 	vldr	s15, [r0, #12]
 8019a08:	eee6 7a20 	vfma.f32	s15, s12, s1
 8019a0c:	edc0 7a03 	vstr	s15, [r0, #12]
 8019a10:	edd0 7a04 	vldr	s15, [r0, #16]
 8019a14:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8019a18:	edc0 7a04 	vstr	s15, [r0, #16]
 8019a1c:	edd0 7a05 	vldr	s15, [r0, #20]
 8019a20:	eee7 7a20 	vfma.f32	s15, s14, s1
 8019a24:	edc0 7a05 	vstr	s15, [r0, #20]
 8019a28:	4770      	bx	lr

08019a2a <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8019a2a:	edd0 6a01 	vldr	s13, [r0, #4]
 8019a2e:	b084      	sub	sp, #16
 8019a30:	edd0 7a04 	vldr	s15, [r0, #16]
 8019a34:	ed90 7a03 	vldr	s14, [r0, #12]
 8019a38:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8019a3c:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8019a40:	edd0 6a00 	vldr	s13, [r0]
 8019a44:	eee7 7a00 	vfma.f32	s15, s14, s0
 8019a48:	ed90 7a05 	vldr	s14, [r0, #20]
 8019a4c:	eee6 0a80 	vfma.f32	s1, s13, s0
 8019a50:	ed90 0a02 	vldr	s0, [r0, #8]
 8019a54:	ee30 0a80 	vadd.f32	s0, s1, s0
 8019a58:	ee77 0a87 	vadd.f32	s1, s15, s14
 8019a5c:	b004      	add	sp, #16
 8019a5e:	4770      	bx	lr

08019a60 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8019a60:	b530      	push	{r4, r5, lr}
 8019a62:	8083      	strh	r3, [r0, #4]
 8019a64:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019a68:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8019a6c:	80c3      	strh	r3, [r0, #6]
 8019a6e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8019a72:	6141      	str	r1, [r0, #20]
 8019a74:	7203      	strb	r3, [r0, #8]
 8019a76:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019a7a:	8302      	strh	r2, [r0, #24]
 8019a7c:	7243      	strb	r3, [r0, #9]
 8019a7e:	7a83      	ldrb	r3, [r0, #10]
 8019a80:	f365 0306 	bfi	r3, r5, #0, #7
 8019a84:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8019a88:	f365 13c7 	bfi	r3, r5, #7, #1
 8019a8c:	7283      	strb	r3, [r0, #10]
 8019a8e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8019a92:	72c3      	strb	r3, [r0, #11]
 8019a94:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8019a98:	7303      	strb	r3, [r0, #12]
 8019a9a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8019a9e:	81c3      	strh	r3, [r0, #14]
 8019aa0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8019aa4:	8203      	strh	r3, [r0, #16]
 8019aa6:	4b01      	ldr	r3, [pc, #4]	@ (8019aac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8019aa8:	6003      	str	r3, [r0, #0]
 8019aaa:	bd30      	pop	{r4, r5, pc}
 8019aac:	0802ee7c 	.word	0x0802ee7c

08019ab0 <_ZNK8touchgfx9ConstFont4findEt>:
 8019ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ab2:	6944      	ldr	r4, [r0, #20]
 8019ab4:	b3bc      	cbz	r4, 8019b26 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019ab6:	88a3      	ldrh	r3, [r4, #4]
 8019ab8:	8b02      	ldrh	r2, [r0, #24]
 8019aba:	1acb      	subs	r3, r1, r3
 8019abc:	f102 32ff 	add.w	r2, r2, #4294967295
 8019ac0:	d431      	bmi.n	8019b26 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019ac2:	4293      	cmp	r3, r2
 8019ac4:	dd0c      	ble.n	8019ae0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019ac6:	230e      	movs	r3, #14
 8019ac8:	fb03 4302 	mla	r3, r3, r2, r4
 8019acc:	889b      	ldrh	r3, [r3, #4]
 8019ace:	1a5b      	subs	r3, r3, r1
 8019ad0:	1ad3      	subs	r3, r2, r3
 8019ad2:	429a      	cmp	r2, r3
 8019ad4:	db27      	blt.n	8019b26 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	bfbc      	itt	lt
 8019ada:	2302      	movlt	r3, #2
 8019adc:	fb92 f3f3 	sdivlt	r3, r2, r3
 8019ae0:	2500      	movs	r5, #0
 8019ae2:	260e      	movs	r6, #14
 8019ae4:	4295      	cmp	r5, r2
 8019ae6:	dc1e      	bgt.n	8019b26 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019ae8:	fb06 4003 	mla	r0, r6, r3, r4
 8019aec:	8887      	ldrh	r7, [r0, #4]
 8019aee:	42b9      	cmp	r1, r7
 8019af0:	d01a      	beq.n	8019b28 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8019af2:	d20d      	bcs.n	8019b10 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8019af4:	1e5a      	subs	r2, r3, #1
 8019af6:	4295      	cmp	r5, r2
 8019af8:	dc15      	bgt.n	8019b26 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019afa:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8019afe:	1a5b      	subs	r3, r3, r1
 8019b00:	1ad3      	subs	r3, r2, r3
 8019b02:	429a      	cmp	r2, r3
 8019b04:	db0f      	blt.n	8019b26 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019b06:	429d      	cmp	r5, r3
 8019b08:	ddec      	ble.n	8019ae4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019b0a:	1953      	adds	r3, r2, r5
 8019b0c:	105b      	asrs	r3, r3, #1
 8019b0e:	e7e9      	b.n	8019ae4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019b10:	1c5d      	adds	r5, r3, #1
 8019b12:	42aa      	cmp	r2, r5
 8019b14:	db07      	blt.n	8019b26 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019b16:	8a43      	ldrh	r3, [r0, #18]
 8019b18:	1acb      	subs	r3, r1, r3
 8019b1a:	442b      	add	r3, r5
 8019b1c:	429d      	cmp	r5, r3
 8019b1e:	dc02      	bgt.n	8019b26 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019b20:	429a      	cmp	r2, r3
 8019b22:	dadf      	bge.n	8019ae4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019b24:	e7f1      	b.n	8019b0a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8019b26:	2000      	movs	r0, #0
 8019b28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019b2a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b2c:	4604      	mov	r4, r0
 8019b2e:	4617      	mov	r7, r2
 8019b30:	461e      	mov	r6, r3
 8019b32:	b911      	cbnz	r1, 8019b3a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019b34:	2500      	movs	r5, #0
 8019b36:	4628      	mov	r0, r5
 8019b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b3a:	290a      	cmp	r1, #10
 8019b3c:	d0fa      	beq.n	8019b34 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019b3e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8019b42:	4291      	cmp	r1, r2
 8019b44:	d0f6      	beq.n	8019b34 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019b46:	f242 020b 	movw	r2, #8203	@ 0x200b
 8019b4a:	4291      	cmp	r1, r2
 8019b4c:	d0f2      	beq.n	8019b34 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019b4e:	f7ff ffaf 	bl	8019ab0 <_ZNK8touchgfx9ConstFont4findEt>
 8019b52:	4605      	mov	r5, r0
 8019b54:	b950      	cbnz	r0, 8019b6c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8019b56:	6823      	ldr	r3, [r4, #0]
 8019b58:	4620      	mov	r0, r4
 8019b5a:	691b      	ldr	r3, [r3, #16]
 8019b5c:	4798      	blx	r3
 8019b5e:	4601      	mov	r1, r0
 8019b60:	4620      	mov	r0, r4
 8019b62:	f7ff ffa5 	bl	8019ab0 <_ZNK8touchgfx9ConstFont4findEt>
 8019b66:	4605      	mov	r5, r0
 8019b68:	2800      	cmp	r0, #0
 8019b6a:	d0e3      	beq.n	8019b34 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019b6c:	6823      	ldr	r3, [r4, #0]
 8019b6e:	4629      	mov	r1, r5
 8019b70:	4620      	mov	r0, r4
 8019b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019b74:	4798      	blx	r3
 8019b76:	6038      	str	r0, [r7, #0]
 8019b78:	6823      	ldr	r3, [r4, #0]
 8019b7a:	4620      	mov	r0, r4
 8019b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019b7e:	4798      	blx	r3
 8019b80:	7030      	strb	r0, [r6, #0]
 8019b82:	e7d8      	b.n	8019b36 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08019b84 <_ZN8touchgfx4clzuEm>:
 8019b84:	4603      	mov	r3, r0
 8019b86:	b1c8      	cbz	r0, 8019bbc <_ZN8touchgfx4clzuEm+0x38>
 8019b88:	0c02      	lsrs	r2, r0, #16
 8019b8a:	0412      	lsls	r2, r2, #16
 8019b8c:	b9a2      	cbnz	r2, 8019bb8 <_ZN8touchgfx4clzuEm+0x34>
 8019b8e:	0403      	lsls	r3, r0, #16
 8019b90:	2010      	movs	r0, #16
 8019b92:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8019b96:	bf04      	itt	eq
 8019b98:	021b      	lsleq	r3, r3, #8
 8019b9a:	3008      	addeq	r0, #8
 8019b9c:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8019ba0:	bf04      	itt	eq
 8019ba2:	011b      	lsleq	r3, r3, #4
 8019ba4:	3004      	addeq	r0, #4
 8019ba6:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8019baa:	bf04      	itt	eq
 8019bac:	009b      	lsleq	r3, r3, #2
 8019bae:	3002      	addeq	r0, #2
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	db04      	blt.n	8019bbe <_ZN8touchgfx4clzuEm+0x3a>
 8019bb4:	3001      	adds	r0, #1
 8019bb6:	4770      	bx	lr
 8019bb8:	2000      	movs	r0, #0
 8019bba:	e7ea      	b.n	8019b92 <_ZN8touchgfx4clzuEm+0xe>
 8019bbc:	2020      	movs	r0, #32
 8019bbe:	4770      	bx	lr

08019bc0 <_ZN8touchgfx7muldivuEmmmRm>:
 8019bc0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019bc4:	460f      	mov	r7, r1
 8019bc6:	4615      	mov	r5, r2
 8019bc8:	461e      	mov	r6, r3
 8019bca:	4601      	mov	r1, r0
 8019bcc:	b100      	cbz	r0, 8019bd0 <_ZN8touchgfx7muldivuEmmmRm+0x10>
 8019bce:	b927      	cbnz	r7, 8019bda <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 8019bd0:	2000      	movs	r0, #0
 8019bd2:	6030      	str	r0, [r6, #0]
 8019bd4:	b002      	add	sp, #8
 8019bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bda:	f7ff ffd3 	bl	8019b84 <_ZN8touchgfx4clzuEm>
 8019bde:	b980      	cbnz	r0, 8019c02 <_ZN8touchgfx7muldivuEmmmRm+0x42>
 8019be0:	4638      	mov	r0, r7
 8019be2:	f7ff ffcf 	bl	8019b84 <_ZN8touchgfx4clzuEm>
 8019be6:	2800      	cmp	r0, #0
 8019be8:	dd05      	ble.n	8019bf6 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 8019bea:	4633      	mov	r3, r6
 8019bec:	462a      	mov	r2, r5
 8019bee:	4638      	mov	r0, r7
 8019bf0:	f7ff ffe6 	bl	8019bc0 <_ZN8touchgfx7muldivuEmmmRm>
 8019bf4:	e7ee      	b.n	8019bd4 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8019bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8019bfa:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8019bfe:	6033      	str	r3, [r6, #0]
 8019c00:	e7e8      	b.n	8019bd4 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8019c02:	fa37 f800 	lsrs.w	r8, r7, r0
 8019c06:	fb07 f301 	mul.w	r3, r7, r1
 8019c0a:	d105      	bne.n	8019c18 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 8019c0c:	fbb3 f0f5 	udiv	r0, r3, r5
 8019c10:	fb05 3510 	mls	r5, r5, r0, r3
 8019c14:	6035      	str	r5, [r6, #0]
 8019c16:	e7dd      	b.n	8019bd4 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8019c18:	2301      	movs	r3, #1
 8019c1a:	fa01 fa00 	lsl.w	sl, r1, r0
 8019c1e:	462a      	mov	r2, r5
 8019c20:	fa03 f000 	lsl.w	r0, r3, r0
 8019c24:	4633      	mov	r3, r6
 8019c26:	fbba f9f5 	udiv	r9, sl, r5
 8019c2a:	3801      	subs	r0, #1
 8019c2c:	fb08 f409 	mul.w	r4, r8, r9
 8019c30:	4038      	ands	r0, r7
 8019c32:	f7ff ffc5 	bl	8019bc0 <_ZN8touchgfx7muldivuEmmmRm>
 8019c36:	462a      	mov	r2, r5
 8019c38:	4607      	mov	r7, r0
 8019c3a:	ab01      	add	r3, sp, #4
 8019c3c:	fb05 a119 	mls	r1, r5, r9, sl
 8019c40:	4640      	mov	r0, r8
 8019c42:	f7ff ffbd 	bl	8019bc0 <_ZN8touchgfx7muldivuEmmmRm>
 8019c46:	9b01      	ldr	r3, [sp, #4]
 8019c48:	6832      	ldr	r2, [r6, #0]
 8019c4a:	441a      	add	r2, r3
 8019c4c:	fbb2 f3f5 	udiv	r3, r2, r5
 8019c50:	441c      	add	r4, r3
 8019c52:	fb05 2513 	mls	r5, r5, r3, r2
 8019c56:	443c      	add	r4, r7
 8019c58:	4420      	add	r0, r4
 8019c5a:	e7db      	b.n	8019c14 <_ZN8touchgfx7muldivuEmmmRm+0x54>

08019c5c <_ZN8touchgfx6muldivElllRl>:
 8019c5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019c5e:	2800      	cmp	r0, #0
 8019c60:	461e      	mov	r6, r3
 8019c62:	bfba      	itte	lt
 8019c64:	4240      	neglt	r0, r0
 8019c66:	f04f 34ff 	movlt.w	r4, #4294967295
 8019c6a:	2401      	movge	r4, #1
 8019c6c:	2900      	cmp	r1, #0
 8019c6e:	bfbc      	itt	lt
 8019c70:	4249      	neglt	r1, r1
 8019c72:	4264      	neglt	r4, r4
 8019c74:	2a00      	cmp	r2, #0
 8019c76:	bfb6      	itet	lt
 8019c78:	4265      	neglt	r5, r4
 8019c7a:	4625      	movge	r5, r4
 8019c7c:	4252      	neglt	r2, r2
 8019c7e:	4288      	cmp	r0, r1
 8019c80:	bfc2      	ittt	gt
 8019c82:	4603      	movgt	r3, r0
 8019c84:	4608      	movgt	r0, r1
 8019c86:	4619      	movgt	r1, r3
 8019c88:	ab01      	add	r3, sp, #4
 8019c8a:	f7ff ff99 	bl	8019bc0 <_ZN8touchgfx7muldivuEmmmRm>
 8019c8e:	9b01      	ldr	r3, [sp, #4]
 8019c90:	4368      	muls	r0, r5
 8019c92:	435c      	muls	r4, r3
 8019c94:	6034      	str	r4, [r6, #0]
 8019c96:	b002      	add	sp, #8
 8019c98:	bd70      	pop	{r4, r5, r6, pc}

08019c9a <_ZN8touchgfx6muldivElll>:
 8019c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019c9c:	4606      	mov	r6, r0
 8019c9e:	ab01      	add	r3, sp, #4
 8019ca0:	460d      	mov	r5, r1
 8019ca2:	4614      	mov	r4, r2
 8019ca4:	f7ff ffda 	bl	8019c5c <_ZN8touchgfx6muldivElllRl>
 8019ca8:	2e00      	cmp	r6, #0
 8019caa:	db20      	blt.n	8019cee <_ZN8touchgfx6muldivElll+0x54>
 8019cac:	bf14      	ite	ne
 8019cae:	2301      	movne	r3, #1
 8019cb0:	2300      	moveq	r3, #0
 8019cb2:	2d00      	cmp	r5, #0
 8019cb4:	db1e      	blt.n	8019cf4 <_ZN8touchgfx6muldivElll+0x5a>
 8019cb6:	bf14      	ite	ne
 8019cb8:	2201      	movne	r2, #1
 8019cba:	2200      	moveq	r2, #0
 8019cbc:	2c00      	cmp	r4, #0
 8019cbe:	fb03 f202 	mul.w	r2, r3, r2
 8019cc2:	db1a      	blt.n	8019cfa <_ZN8touchgfx6muldivElll+0x60>
 8019cc4:	bf14      	ite	ne
 8019cc6:	2301      	movne	r3, #1
 8019cc8:	2300      	moveq	r3, #0
 8019cca:	4353      	muls	r3, r2
 8019ccc:	2b01      	cmp	r3, #1
 8019cce:	d117      	bne.n	8019d00 <_ZN8touchgfx6muldivElll+0x66>
 8019cd0:	2c00      	cmp	r4, #0
 8019cd2:	9b01      	ldr	r3, [sp, #4]
 8019cd4:	bfb8      	it	lt
 8019cd6:	4264      	neglt	r4, r4
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	f104 0401 	add.w	r4, r4, #1
 8019cde:	bfb8      	it	lt
 8019ce0:	425b      	neglt	r3, r3
 8019ce2:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8019ce6:	db00      	blt.n	8019cea <_ZN8touchgfx6muldivElll+0x50>
 8019ce8:	3001      	adds	r0, #1
 8019cea:	b002      	add	sp, #8
 8019cec:	bd70      	pop	{r4, r5, r6, pc}
 8019cee:	f04f 33ff 	mov.w	r3, #4294967295
 8019cf2:	e7de      	b.n	8019cb2 <_ZN8touchgfx6muldivElll+0x18>
 8019cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8019cf8:	e7e0      	b.n	8019cbc <_ZN8touchgfx6muldivElll+0x22>
 8019cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8019cfe:	e7e4      	b.n	8019cca <_ZN8touchgfx6muldivElll+0x30>
 8019d00:	3301      	adds	r3, #1
 8019d02:	d1f2      	bne.n	8019cea <_ZN8touchgfx6muldivElll+0x50>
 8019d04:	9b01      	ldr	r3, [sp, #4]
 8019d06:	2c00      	cmp	r4, #0
 8019d08:	bfb8      	it	lt
 8019d0a:	4264      	neglt	r4, r4
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	bfb8      	it	lt
 8019d10:	425b      	neglt	r3, r3
 8019d12:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8019d16:	bfc8      	it	gt
 8019d18:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8019d1c:	e7e5      	b.n	8019cea <_ZN8touchgfx6muldivElll+0x50>

08019d1e <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8019d1e:	2000      	movs	r0, #0
 8019d20:	4770      	bx	lr

08019d22 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8019d22:	2001      	movs	r0, #1
 8019d24:	4770      	bx	lr

08019d26 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8019d26:	2002      	movs	r0, #2
 8019d28:	4770      	bx	lr

08019d2a <_ZN8touchgfx6ScreenD1Ev>:
 8019d2a:	4770      	bx	lr

08019d2c <_ZN8touchgfx12GestureEventD1Ev>:
 8019d2c:	4770      	bx	lr

08019d2e <_ZN8touchgfx9DragEventD1Ev>:
 8019d2e:	4770      	bx	lr

08019d30 <_ZN8touchgfx10ClickEventD1Ev>:
 8019d30:	4770      	bx	lr

08019d32 <_ZN8touchgfx10ClickEventD0Ev>:
 8019d32:	b510      	push	{r4, lr}
 8019d34:	4604      	mov	r4, r0
 8019d36:	210c      	movs	r1, #12
 8019d38:	f010 f83f 	bl	8029dba <_ZdlPvj>
 8019d3c:	4620      	mov	r0, r4
 8019d3e:	bd10      	pop	{r4, pc}

08019d40 <_ZN8touchgfx9DragEventD0Ev>:
 8019d40:	b510      	push	{r4, lr}
 8019d42:	4604      	mov	r4, r0
 8019d44:	2110      	movs	r1, #16
 8019d46:	f010 f838 	bl	8029dba <_ZdlPvj>
 8019d4a:	4620      	mov	r0, r4
 8019d4c:	bd10      	pop	{r4, pc}

08019d4e <_ZN8touchgfx12GestureEventD0Ev>:
 8019d4e:	b510      	push	{r4, lr}
 8019d50:	4604      	mov	r4, r0
 8019d52:	210c      	movs	r1, #12
 8019d54:	f010 f831 	bl	8029dba <_ZdlPvj>
 8019d58:	4620      	mov	r0, r4
 8019d5a:	bd10      	pop	{r4, pc}

08019d5c <_ZN8touchgfx6ScreenD0Ev>:
 8019d5c:	b510      	push	{r4, lr}
 8019d5e:	4604      	mov	r4, r0
 8019d60:	213c      	movs	r1, #60	@ 0x3c
 8019d62:	f010 f82a 	bl	8029dba <_ZdlPvj>
 8019d66:	4620      	mov	r0, r4
 8019d68:	bd10      	pop	{r4, pc}
	...

08019d6c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019d6c:	b530      	push	{r4, r5, lr}
 8019d6e:	460d      	mov	r5, r1
 8019d70:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8019d72:	b087      	sub	sp, #28
 8019d74:	4604      	mov	r4, r0
 8019d76:	b301      	cbz	r1, 8019dba <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019d78:	a801      	add	r0, sp, #4
 8019d7a:	f7ff fb3b 	bl	80193f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019d7e:	892a      	ldrh	r2, [r5, #8]
 8019d80:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019d84:	7928      	ldrb	r0, [r5, #4]
 8019d86:	1ad2      	subs	r2, r2, r3
 8019d88:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8019d8a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019d8e:	441a      	add	r2, r3
 8019d90:	896b      	ldrh	r3, [r5, #10]
 8019d92:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019d96:	f88d 0010 	strb.w	r0, [sp, #16]
 8019d9a:	1b5b      	subs	r3, r3, r5
 8019d9c:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8019d9e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019da0:	442b      	add	r3, r5
 8019da2:	4d07      	ldr	r5, [pc, #28]	@ (8019dc0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019da4:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019da8:	a903      	add	r1, sp, #12
 8019daa:	9503      	str	r5, [sp, #12]
 8019dac:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019db0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019db4:	6803      	ldr	r3, [r0, #0]
 8019db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019db8:	4798      	blx	r3
 8019dba:	b007      	add	sp, #28
 8019dbc:	bd30      	pop	{r4, r5, pc}
 8019dbe:	bf00      	nop
 8019dc0:	0802ef0c 	.word	0x0802ef0c

08019dc4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dc8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019dca:	b08a      	sub	sp, #40	@ 0x28
 8019dcc:	4604      	mov	r4, r0
 8019dce:	460d      	mov	r5, r1
 8019dd0:	b113      	cbz	r3, 8019dd8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8019dd2:	790b      	ldrb	r3, [r1, #4]
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d044      	beq.n	8019e62 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019dd8:	f104 0804 	add.w	r8, r4, #4
 8019ddc:	a803      	add	r0, sp, #12
 8019dde:	4641      	mov	r1, r8
 8019de0:	f7ff fb08 	bl	80193f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019de4:	792b      	ldrb	r3, [r5, #4]
 8019de6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8019dea:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8019dee:	b983      	cbnz	r3, 8019e12 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8019df0:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8019df4:	892a      	ldrh	r2, [r5, #8]
 8019df6:	88e9      	ldrh	r1, [r5, #6]
 8019df8:	4640      	mov	r0, r8
 8019dfa:	1b92      	subs	r2, r2, r6
 8019dfc:	9301      	str	r3, [sp, #4]
 8019dfe:	1bc9      	subs	r1, r1, r7
 8019e00:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8019e04:	b212      	sxth	r2, r2
 8019e06:	9300      	str	r3, [sp, #0]
 8019e08:	b209      	sxth	r1, r1
 8019e0a:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8019e0e:	f7f7 fe15 	bl	8011a3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8019e12:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019e14:	b329      	cbz	r1, 8019e62 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019e16:	a805      	add	r0, sp, #20
 8019e18:	f7ff faec 	bl	80193f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019e1c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019e20:	792b      	ldrb	r3, [r5, #4]
 8019e22:	a907      	add	r1, sp, #28
 8019e24:	1abf      	subs	r7, r7, r2
 8019e26:	88ea      	ldrh	r2, [r5, #6]
 8019e28:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019e2a:	4417      	add	r7, r2
 8019e2c:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8019e2e:	f88d 3020 	strb.w	r3, [sp, #32]
 8019e32:	4417      	add	r7, r2
 8019e34:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019e38:	1ab6      	subs	r6, r6, r2
 8019e3a:	892a      	ldrh	r2, [r5, #8]
 8019e3c:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8019e40:	4416      	add	r6, r2
 8019e42:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8019e44:	4416      	add	r6, r2
 8019e46:	4a08      	ldr	r2, [pc, #32]	@ (8019e68 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8019e48:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8019e4c:	2600      	movs	r6, #0
 8019e4e:	9207      	str	r2, [sp, #28]
 8019e50:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8019e54:	6803      	ldr	r3, [r0, #0]
 8019e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019e58:	4798      	blx	r3
 8019e5a:	792b      	ldrb	r3, [r5, #4]
 8019e5c:	b10b      	cbz	r3, 8019e62 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019e5e:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8019e62:	b00a      	add	sp, #40	@ 0x28
 8019e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e68:	0802eee4 	.word	0x0802eee4

08019e6c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e70:	460c      	mov	r4, r1
 8019e72:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8019e74:	b088      	sub	sp, #32
 8019e76:	4605      	mov	r5, r0
 8019e78:	2900      	cmp	r1, #0
 8019e7a:	d06d      	beq.n	8019f58 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8019e7c:	4668      	mov	r0, sp
 8019e7e:	f7ff fab9 	bl	80193f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019e82:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8019e84:	88e3      	ldrh	r3, [r4, #6]
 8019e86:	f9bd 8000 	ldrsh.w	r8, [sp]
 8019e8a:	440b      	add	r3, r1
 8019e8c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8019e90:	b21b      	sxth	r3, r3
 8019e92:	4543      	cmp	r3, r8
 8019e94:	db31      	blt.n	8019efa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019e96:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8019e9a:	44c4      	add	ip, r8
 8019e9c:	fa0f fc8c 	sxth.w	ip, ip
 8019ea0:	4563      	cmp	r3, ip
 8019ea2:	da2a      	bge.n	8019efa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019ea4:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8019ea6:	8926      	ldrh	r6, [r4, #8]
 8019ea8:	4416      	add	r6, r2
 8019eaa:	b236      	sxth	r6, r6
 8019eac:	42be      	cmp	r6, r7
 8019eae:	db24      	blt.n	8019efa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019eb0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019eb4:	4438      	add	r0, r7
 8019eb6:	b200      	sxth	r0, r0
 8019eb8:	4286      	cmp	r6, r0
 8019eba:	da1e      	bge.n	8019efa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019ebc:	8963      	ldrh	r3, [r4, #10]
 8019ebe:	4419      	add	r1, r3
 8019ec0:	b209      	sxth	r1, r1
 8019ec2:	4541      	cmp	r1, r8
 8019ec4:	db08      	blt.n	8019ed8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019ec6:	4561      	cmp	r1, ip
 8019ec8:	da06      	bge.n	8019ed8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019eca:	89a3      	ldrh	r3, [r4, #12]
 8019ecc:	441a      	add	r2, r3
 8019ece:	b212      	sxth	r2, r2
 8019ed0:	42ba      	cmp	r2, r7
 8019ed2:	db01      	blt.n	8019ed8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019ed4:	4282      	cmp	r2, r0
 8019ed6:	db10      	blt.n	8019efa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019ed8:	4b21      	ldr	r3, [pc, #132]	@ (8019f60 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8019eda:	a904      	add	r1, sp, #16
 8019edc:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8019ede:	9304      	str	r3, [sp, #16]
 8019ee0:	2302      	movs	r3, #2
 8019ee2:	f88d 3014 	strb.w	r3, [sp, #20]
 8019ee6:	2300      	movs	r3, #0
 8019ee8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019eec:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019ef0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019ef4:	6803      	ldr	r3, [r0, #0]
 8019ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019ef8:	4798      	blx	r3
 8019efa:	1d29      	adds	r1, r5, #4
 8019efc:	a802      	add	r0, sp, #8
 8019efe:	f7ff fa79 	bl	80193f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019f02:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019f06:	88e0      	ldrh	r0, [r4, #6]
 8019f08:	eba3 0808 	sub.w	r8, r3, r8
 8019f0c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019f10:	7921      	ldrb	r1, [r4, #4]
 8019f12:	fa1f f888 	uxth.w	r8, r8
 8019f16:	1bdf      	subs	r7, r3, r7
 8019f18:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8019f1c:	b2bb      	uxth	r3, r7
 8019f1e:	4440      	add	r0, r8
 8019f20:	8922      	ldrh	r2, [r4, #8]
 8019f22:	8967      	ldrh	r7, [r4, #10]
 8019f24:	4460      	add	r0, ip
 8019f26:	89a4      	ldrh	r4, [r4, #12]
 8019f28:	441a      	add	r2, r3
 8019f2a:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8019f2c:	44b8      	add	r8, r7
 8019f2e:	4423      	add	r3, r4
 8019f30:	f8ad 0016 	strh.w	r0, [sp, #22]
 8019f34:	4432      	add	r2, r6
 8019f36:	44e0      	add	r8, ip
 8019f38:	4433      	add	r3, r6
 8019f3a:	4c0a      	ldr	r4, [pc, #40]	@ (8019f64 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8019f3c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8019f3e:	f88d 1014 	strb.w	r1, [sp, #20]
 8019f42:	a904      	add	r1, sp, #16
 8019f44:	9404      	str	r4, [sp, #16]
 8019f46:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019f4a:	f8ad 801a 	strh.w	r8, [sp, #26]
 8019f4e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019f52:	6803      	ldr	r3, [r0, #0]
 8019f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019f56:	4798      	blx	r3
 8019f58:	b008      	add	sp, #32
 8019f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f5e:	bf00      	nop
 8019f60:	0802eee4 	.word	0x0802eee4
 8019f64:	0802eef8 	.word	0x0802eef8

08019f68 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019f6a:	4604      	mov	r4, r0
 8019f6c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8019f70:	3201      	adds	r2, #1
 8019f72:	d112      	bne.n	8019f9a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8019f74:	2500      	movs	r5, #0
 8019f76:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019f7a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019f7e:	6803      	ldr	r3, [r0, #0]
 8019f80:	9500      	str	r5, [sp, #0]
 8019f82:	466d      	mov	r5, sp
 8019f84:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019f88:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019f8c:	4629      	mov	r1, r5
 8019f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019f90:	4798      	blx	r3
 8019f92:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019f96:	e884 0003 	stmia.w	r4, {r0, r1}
 8019f9a:	4620      	mov	r0, r4
 8019f9c:	b003      	add	sp, #12
 8019f9e:	bd30      	pop	{r4, r5, pc}

08019fa0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8019fa0:	b513      	push	{r0, r1, r4, lr}
 8019fa2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019fa6:	4604      	mov	r4, r0
 8019fa8:	3301      	adds	r3, #1
 8019faa:	d109      	bne.n	8019fc0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019fac:	4601      	mov	r1, r0
 8019fae:	4668      	mov	r0, sp
 8019fb0:	f7ff fa20 	bl	80193f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019fb4:	f8bd 3000 	ldrh.w	r3, [sp]
 8019fb8:	8423      	strh	r3, [r4, #32]
 8019fba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019fbe:	8463      	strh	r3, [r4, #34]	@ 0x22
 8019fc0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019fc4:	b002      	add	sp, #8
 8019fc6:	bd10      	pop	{r4, pc}

08019fc8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019fc8:	b513      	push	{r0, r1, r4, lr}
 8019fca:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8019fce:	4604      	mov	r4, r0
 8019fd0:	3301      	adds	r3, #1
 8019fd2:	d109      	bne.n	8019fe8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019fd4:	4601      	mov	r1, r0
 8019fd6:	4668      	mov	r0, sp
 8019fd8:	f7ff fa0c 	bl	80193f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019fdc:	f8bd 3000 	ldrh.w	r3, [sp]
 8019fe0:	8423      	strh	r3, [r4, #32]
 8019fe2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019fe6:	8463      	strh	r3, [r4, #34]	@ 0x22
 8019fe8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8019fec:	b002      	add	sp, #8
 8019fee:	bd10      	pop	{r4, pc}

08019ff0 <_ZN8touchgfx6ScreenC1Ev>:
 8019ff0:	b570      	push	{r4, r5, r6, lr}
 8019ff2:	4b17      	ldr	r3, [pc, #92]	@ (801a050 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8019ff4:	4605      	mov	r5, r0
 8019ff6:	4a17      	ldr	r2, [pc, #92]	@ (801a054 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019ff8:	2101      	movs	r1, #1
 8019ffa:	f845 3b04 	str.w	r3, [r5], #4
 8019ffe:	2300      	movs	r3, #0
 801a000:	6042      	str	r2, [r0, #4]
 801a002:	4604      	mov	r4, r0
 801a004:	8103      	strh	r3, [r0, #8]
 801a006:	8143      	strh	r3, [r0, #10]
 801a008:	8183      	strh	r3, [r0, #12]
 801a00a:	81c3      	strh	r3, [r0, #14]
 801a00c:	8203      	strh	r3, [r0, #16]
 801a00e:	8243      	strh	r3, [r0, #18]
 801a010:	8283      	strh	r3, [r0, #20]
 801a012:	82c3      	strh	r3, [r0, #22]
 801a014:	6203      	str	r3, [r0, #32]
 801a016:	8483      	strh	r3, [r0, #36]	@ 0x24
 801a018:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801a01a:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801a01e:	6343      	str	r3, [r0, #52]	@ 0x34
 801a020:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801a024:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801a028:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a02c:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801a030:	4b09      	ldr	r3, [pc, #36]	@ (801a058 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a032:	4628      	mov	r0, r5
 801a034:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a038:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801a03a:	4a08      	ldr	r2, [pc, #32]	@ (801a05c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a03c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a040:	4798      	blx	r3
 801a042:	6863      	ldr	r3, [r4, #4]
 801a044:	4628      	mov	r0, r5
 801a046:	4631      	mov	r1, r6
 801a048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a04a:	4798      	blx	r3
 801a04c:	4620      	mov	r0, r4
 801a04e:	bd70      	pop	{r4, r5, r6, pc}
 801a050:	0802ef20 	.word	0x0802ef20
 801a054:	0802e70c 	.word	0x0802e70c
 801a058:	200279ce 	.word	0x200279ce
 801a05c:	200279cc 	.word	0x200279cc

0801a060 <_ZN8touchgfx6Screen4drawEv>:
 801a060:	4b09      	ldr	r3, [pc, #36]	@ (801a088 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a062:	b507      	push	{r0, r1, r2, lr}
 801a064:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a068:	2100      	movs	r1, #0
 801a06a:	4b08      	ldr	r3, [pc, #32]	@ (801a08c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a06c:	9100      	str	r1, [sp, #0]
 801a06e:	4669      	mov	r1, sp
 801a070:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a074:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a078:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a07c:	6803      	ldr	r3, [r0, #0]
 801a07e:	689b      	ldr	r3, [r3, #8]
 801a080:	4798      	blx	r3
 801a082:	b003      	add	sp, #12
 801a084:	f85d fb04 	ldr.w	pc, [sp], #4
 801a088:	200279cc 	.word	0x200279cc
 801a08c:	200279ce 	.word	0x200279ce

0801a090 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a094:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a098:	b089      	sub	sp, #36	@ 0x24
 801a09a:	4680      	mov	r8, r0
 801a09c:	460c      	mov	r4, r1
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	4615      	mov	r5, r2
 801a0a2:	dd0e      	ble.n	801a0c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a0a4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	dd0a      	ble.n	801a0c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a0ac:	4628      	mov	r0, r5
 801a0ae:	f7ff ff5b 	bl	8019f68 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a0b2:	4621      	mov	r1, r4
 801a0b4:	f7fd fff1 	bl	801809a <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a0b8:	69eb      	ldr	r3, [r5, #28]
 801a0ba:	b928      	cbnz	r0, 801a0c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a0bc:	461d      	mov	r5, r3
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d1f4      	bne.n	801a0ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a0c2:	b009      	add	sp, #36	@ 0x24
 801a0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0c8:	ae04      	add	r6, sp, #16
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	f000 80b5 	beq.w	801a23a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a0d0:	682b      	ldr	r3, [r5, #0]
 801a0d2:	4629      	mov	r1, r5
 801a0d4:	a802      	add	r0, sp, #8
 801a0d6:	68db      	ldr	r3, [r3, #12]
 801a0d8:	4798      	blx	r3
 801a0da:	4628      	mov	r0, r5
 801a0dc:	f7ff ff60 	bl	8019fa0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a0e0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a0e4:	4407      	add	r7, r0
 801a0e6:	4628      	mov	r0, r5
 801a0e8:	f7ff ff6e 	bl	8019fc8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a0ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a0f0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a0f4:	b23f      	sxth	r7, r7
 801a0f6:	4418      	add	r0, r3
 801a0f8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a0fc:	4621      	mov	r1, r4
 801a0fe:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a102:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a106:	4630      	mov	r0, r6
 801a108:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a10c:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a110:	f7f7 fd76 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 801a114:	4628      	mov	r0, r5
 801a116:	f7ff ff27 	bl	8019f68 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a11a:	ab06      	add	r3, sp, #24
 801a11c:	4602      	mov	r2, r0
 801a11e:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a122:	e883 0003 	stmia.w	r3, {r0, r1}
 801a126:	4611      	mov	r1, r2
 801a128:	4618      	mov	r0, r3
 801a12a:	f7f7 fd69 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 801a12e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a132:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a136:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a13a:	4299      	cmp	r1, r3
 801a13c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a140:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a144:	d10b      	bne.n	801a15e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a146:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a14a:	4552      	cmp	r2, sl
 801a14c:	d107      	bne.n	801a15e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a14e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a152:	455a      	cmp	r2, fp
 801a154:	d103      	bne.n	801a15e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a156:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a15a:	454a      	cmp	r2, r9
 801a15c:	d06d      	beq.n	801a23a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a15e:	f1bb 0f00 	cmp.w	fp, #0
 801a162:	dd65      	ble.n	801a230 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a164:	f1b9 0f00 	cmp.w	r9, #0
 801a168:	dd62      	ble.n	801a230 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a16a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a16e:	fa1f f08a 	uxth.w	r0, sl
 801a172:	4552      	cmp	r2, sl
 801a174:	9000      	str	r0, [sp, #0]
 801a176:	da12      	bge.n	801a19e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801a178:	9301      	str	r3, [sp, #4]
 801a17a:	9b00      	ldr	r3, [sp, #0]
 801a17c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a180:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a184:	1a9a      	subs	r2, r3, r2
 801a186:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a18a:	4631      	mov	r1, r6
 801a18c:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a190:	4640      	mov	r0, r8
 801a192:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a196:	69ea      	ldr	r2, [r5, #28]
 801a198:	f7ff ff7a 	bl	801a090 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a19c:	9b01      	ldr	r3, [sp, #4]
 801a19e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a1a2:	b29f      	uxth	r7, r3
 801a1a4:	429a      	cmp	r2, r3
 801a1a6:	da0d      	bge.n	801a1c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801a1a8:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a1ac:	1aba      	subs	r2, r7, r2
 801a1ae:	f8ad a012 	strh.w	sl, [sp, #18]
 801a1b2:	4631      	mov	r1, r6
 801a1b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a1b8:	4640      	mov	r0, r8
 801a1ba:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a1be:	69ea      	ldr	r2, [r5, #28]
 801a1c0:	f7ff ff66 	bl	801a090 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a1c4:	8822      	ldrh	r2, [r4, #0]
 801a1c6:	445f      	add	r7, fp
 801a1c8:	88a3      	ldrh	r3, [r4, #4]
 801a1ca:	b2bf      	uxth	r7, r7
 801a1cc:	4413      	add	r3, r2
 801a1ce:	b23a      	sxth	r2, r7
 801a1d0:	b29b      	uxth	r3, r3
 801a1d2:	b219      	sxth	r1, r3
 801a1d4:	4291      	cmp	r1, r2
 801a1d6:	dd0d      	ble.n	801a1f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801a1d8:	1bdb      	subs	r3, r3, r7
 801a1da:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a1de:	f8ad a012 	strh.w	sl, [sp, #18]
 801a1e2:	4631      	mov	r1, r6
 801a1e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a1e8:	4640      	mov	r0, r8
 801a1ea:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a1ee:	69ea      	ldr	r2, [r5, #28]
 801a1f0:	f7ff ff4e 	bl	801a090 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a1f4:	88e2      	ldrh	r2, [r4, #6]
 801a1f6:	8863      	ldrh	r3, [r4, #2]
 801a1f8:	4413      	add	r3, r2
 801a1fa:	9a00      	ldr	r2, [sp, #0]
 801a1fc:	444a      	add	r2, r9
 801a1fe:	b29b      	uxth	r3, r3
 801a200:	fa1f f982 	uxth.w	r9, r2
 801a204:	b219      	sxth	r1, r3
 801a206:	fa0f f289 	sxth.w	r2, r9
 801a20a:	428a      	cmp	r2, r1
 801a20c:	da15      	bge.n	801a23a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a20e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a212:	eba3 0309 	sub.w	r3, r3, r9
 801a216:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a21a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a21e:	4631      	mov	r1, r6
 801a220:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a224:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a228:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a22c:	69ea      	ldr	r2, [r5, #28]
 801a22e:	e001      	b.n	801a234 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801a230:	69ea      	ldr	r2, [r5, #28]
 801a232:	4621      	mov	r1, r4
 801a234:	4640      	mov	r0, r8
 801a236:	f7ff ff2b 	bl	801a090 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a23a:	4628      	mov	r0, r5
 801a23c:	f7ff fe94 	bl	8019f68 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a240:	6861      	ldr	r1, [r4, #4]
 801a242:	4602      	mov	r2, r0
 801a244:	4633      	mov	r3, r6
 801a246:	6820      	ldr	r0, [r4, #0]
 801a248:	c303      	stmia	r3!, {r0, r1}
 801a24a:	4611      	mov	r1, r2
 801a24c:	4630      	mov	r0, r6
 801a24e:	f7f7 fcd7 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 801a252:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a256:	2b00      	cmp	r3, #0
 801a258:	f77f af33 	ble.w	801a0c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a25c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a260:	2b00      	cmp	r3, #0
 801a262:	f77f af2e 	ble.w	801a0c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a266:	4628      	mov	r0, r5
 801a268:	f7ff fe9a 	bl	8019fa0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a26c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a270:	1a18      	subs	r0, r3, r0
 801a272:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a276:	4628      	mov	r0, r5
 801a278:	f7ff fea6 	bl	8019fc8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a27c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a280:	4631      	mov	r1, r6
 801a282:	1a18      	subs	r0, r3, r0
 801a284:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a288:	4628      	mov	r0, r5
 801a28a:	682b      	ldr	r3, [r5, #0]
 801a28c:	689b      	ldr	r3, [r3, #8]
 801a28e:	4798      	blx	r3
 801a290:	e717      	b.n	801a0c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801a292 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a292:	b570      	push	{r4, r5, r6, lr}
 801a294:	1d06      	adds	r6, r0, #4
 801a296:	b086      	sub	sp, #24
 801a298:	460c      	mov	r4, r1
 801a29a:	2300      	movs	r3, #0
 801a29c:	4631      	mov	r1, r6
 801a29e:	4605      	mov	r5, r0
 801a2a0:	a802      	add	r0, sp, #8
 801a2a2:	9301      	str	r3, [sp, #4]
 801a2a4:	f7ff f8a6 	bl	80193f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a2a8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a2ac:	8822      	ldrh	r2, [r4, #0]
 801a2ae:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801a2b2:	1ad2      	subs	r2, r2, r3
 801a2b4:	8863      	ldrh	r3, [r4, #2]
 801a2b6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a2ba:	1a5b      	subs	r3, r3, r1
 801a2bc:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a2c0:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a2c4:	aa01      	add	r2, sp, #4
 801a2c6:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a2ca:	4630      	mov	r0, r6
 801a2cc:	f8ad 1016 	strh.w	r1, [sp, #22]
 801a2d0:	a904      	add	r1, sp, #16
 801a2d2:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a2d6:	f7f7 fd6b 	bl	8011db0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a2da:	9a01      	ldr	r2, [sp, #4]
 801a2dc:	b11a      	cbz	r2, 801a2e6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801a2de:	4621      	mov	r1, r4
 801a2e0:	4628      	mov	r0, r5
 801a2e2:	f7ff fed5 	bl	801a090 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a2e6:	b006      	add	sp, #24
 801a2e8:	bd70      	pop	{r4, r5, r6, pc}

0801a2ea <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a2ea:	4602      	mov	r2, r0
 801a2ec:	b530      	push	{r4, r5, lr}
 801a2ee:	4604      	mov	r4, r0
 801a2f0:	b085      	sub	sp, #20
 801a2f2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a2f6:	460d      	mov	r5, r1
 801a2f8:	466b      	mov	r3, sp
 801a2fa:	6851      	ldr	r1, [r2, #4]
 801a2fc:	c303      	stmia	r3!, {r0, r1}
 801a2fe:	4629      	mov	r1, r5
 801a300:	4668      	mov	r0, sp
 801a302:	f7f7 fc7d 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 801a306:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a30a:	b12b      	cbz	r3, 801a318 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801a30c:	4669      	mov	r1, sp
 801a30e:	4620      	mov	r0, r4
 801a310:	f7ff ffbf 	bl	801a292 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a314:	b005      	add	sp, #20
 801a316:	bd30      	pop	{r4, r5, pc}
 801a318:	3404      	adds	r4, #4
 801a31a:	a802      	add	r0, sp, #8
 801a31c:	4621      	mov	r1, r4
 801a31e:	f7ff f869 	bl	80193f4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a322:	f8bd 3000 	ldrh.w	r3, [sp]
 801a326:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a32a:	4669      	mov	r1, sp
 801a32c:	4620      	mov	r0, r4
 801a32e:	1a9b      	subs	r3, r3, r2
 801a330:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a334:	f8ad 3000 	strh.w	r3, [sp]
 801a338:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a33c:	1a9b      	subs	r3, r3, r2
 801a33e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a342:	f7f7 fcfc 	bl	8011d3e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a346:	e7e5      	b.n	801a314 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801a348 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a348:	460b      	mov	r3, r1
 801a34a:	680a      	ldr	r2, [r1, #0]
 801a34c:	1d01      	adds	r1, r0, #4
 801a34e:	6992      	ldr	r2, [r2, #24]
 801a350:	4618      	mov	r0, r3
 801a352:	4710      	bx	r2

0801a354 <_ZN8touchgfx12TextProviderC1Ev>:
 801a354:	b538      	push	{r3, r4, r5, lr}
 801a356:	2500      	movs	r5, #0
 801a358:	2302      	movs	r3, #2
 801a35a:	4604      	mov	r4, r0
 801a35c:	220e      	movs	r2, #14
 801a35e:	7403      	strb	r3, [r0, #16]
 801a360:	4629      	mov	r1, r5
 801a362:	6145      	str	r5, [r0, #20]
 801a364:	7605      	strb	r5, [r0, #24]
 801a366:	83c5      	strh	r5, [r0, #30]
 801a368:	8405      	strh	r5, [r0, #32]
 801a36a:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801a36c:	8705      	strh	r5, [r0, #56]	@ 0x38
 801a36e:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801a370:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801a374:	e9c0 5500 	strd	r5, r5, [r0]
 801a378:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801a37c:	304c      	adds	r0, #76	@ 0x4c
 801a37e:	f010 fb2f 	bl	802a9e0 <memset>
 801a382:	2301      	movs	r3, #1
 801a384:	4620      	mov	r0, r4
 801a386:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801a38a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801a38e:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801a392:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801a396:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801a39a:	f7ef fa7f 	bl	800989c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a39e:	4620      	mov	r0, r4
 801a3a0:	bd38      	pop	{r3, r4, r5, pc}

0801a3a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a3a2:	b530      	push	{r4, r5, lr}
 801a3a4:	2500      	movs	r5, #0
 801a3a6:	2401      	movs	r4, #1
 801a3a8:	6843      	ldr	r3, [r0, #4]
 801a3aa:	b913      	cbnz	r3, 801a3b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a3ac:	6803      	ldr	r3, [r0, #0]
 801a3ae:	b313      	cbz	r3, 801a3f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a3b0:	6043      	str	r3, [r0, #4]
 801a3b2:	7e03      	ldrb	r3, [r0, #24]
 801a3b4:	b143      	cbz	r3, 801a3c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a3b6:	6943      	ldr	r3, [r0, #20]
 801a3b8:	b12b      	cbz	r3, 801a3c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a3ba:	881a      	ldrh	r2, [r3, #0]
 801a3bc:	b11a      	cbz	r2, 801a3c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a3be:	1c9a      	adds	r2, r3, #2
 801a3c0:	6142      	str	r2, [r0, #20]
 801a3c2:	8818      	ldrh	r0, [r3, #0]
 801a3c4:	bd30      	pop	{r4, r5, pc}
 801a3c6:	7605      	strb	r5, [r0, #24]
 801a3c8:	6843      	ldr	r3, [r0, #4]
 801a3ca:	8819      	ldrh	r1, [r3, #0]
 801a3cc:	b199      	cbz	r1, 801a3f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a3ce:	1c9a      	adds	r2, r3, #2
 801a3d0:	2902      	cmp	r1, #2
 801a3d2:	6042      	str	r2, [r0, #4]
 801a3d4:	d1f5      	bne.n	801a3c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a3d6:	7c03      	ldrb	r3, [r0, #16]
 801a3d8:	2b01      	cmp	r3, #1
 801a3da:	d8e5      	bhi.n	801a3a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a3dc:	1c5a      	adds	r2, r3, #1
 801a3de:	3302      	adds	r3, #2
 801a3e0:	7402      	strb	r2, [r0, #16]
 801a3e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801a3e6:	6143      	str	r3, [r0, #20]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d0dd      	beq.n	801a3a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a3ec:	881b      	ldrh	r3, [r3, #0]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d0da      	beq.n	801a3a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a3f2:	7604      	strb	r4, [r0, #24]
 801a3f4:	e7d8      	b.n	801a3a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a3f6:	2000      	movs	r0, #0
 801a3f8:	e7e4      	b.n	801a3c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a3fa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801a3fa:	6001      	str	r1, [r0, #0]
 801a3fc:	2100      	movs	r1, #0
 801a3fe:	b430      	push	{r4, r5}
 801a400:	6041      	str	r1, [r0, #4]
 801a402:	6815      	ldr	r5, [r2, #0]
 801a404:	6085      	str	r5, [r0, #8]
 801a406:	6852      	ldr	r2, [r2, #4]
 801a408:	6443      	str	r3, [r0, #68]	@ 0x44
 801a40a:	9b02      	ldr	r3, [sp, #8]
 801a40c:	60c2      	str	r2, [r0, #12]
 801a40e:	7401      	strb	r1, [r0, #16]
 801a410:	6141      	str	r1, [r0, #20]
 801a412:	7601      	strb	r1, [r0, #24]
 801a414:	8701      	strh	r1, [r0, #56]	@ 0x38
 801a416:	8401      	strh	r1, [r0, #32]
 801a418:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801a41c:	6483      	str	r3, [r0, #72]	@ 0x48
 801a41e:	bc30      	pop	{r4, r5}
 801a420:	f7ef ba3c 	b.w	800989c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a424 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a424:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a426:	4605      	mov	r5, r0
 801a428:	4608      	mov	r0, r1
 801a42a:	b1f1      	cbz	r1, 801a46a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a42c:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801a430:	460b      	mov	r3, r1
 801a432:	f101 0708 	add.w	r7, r1, #8
 801a436:	4622      	mov	r2, r4
 801a438:	6818      	ldr	r0, [r3, #0]
 801a43a:	3308      	adds	r3, #8
 801a43c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a440:	4626      	mov	r6, r4
 801a442:	42bb      	cmp	r3, r7
 801a444:	c603      	stmia	r6!, {r0, r1}
 801a446:	4634      	mov	r4, r6
 801a448:	d1f6      	bne.n	801a438 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a44a:	6818      	ldr	r0, [r3, #0]
 801a44c:	6030      	str	r0, [r6, #0]
 801a44e:	4610      	mov	r0, r2
 801a450:	889b      	ldrh	r3, [r3, #4]
 801a452:	80b3      	strh	r3, [r6, #4]
 801a454:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801a458:	015b      	lsls	r3, r3, #5
 801a45a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801a45e:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801a462:	430b      	orrs	r3, r1
 801a464:	425b      	negs	r3, r3
 801a466:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801a46a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a46c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a46c:	b538      	push	{r3, r4, r5, lr}
 801a46e:	460c      	mov	r4, r1
 801a470:	6811      	ldr	r1, [r2, #0]
 801a472:	4610      	mov	r0, r2
 801a474:	68cd      	ldr	r5, [r1, #12]
 801a476:	4619      	mov	r1, r3
 801a478:	47a8      	blx	r5
 801a47a:	2800      	cmp	r0, #0
 801a47c:	bf08      	it	eq
 801a47e:	4620      	moveq	r0, r4
 801a480:	bd38      	pop	{r3, r4, r5, pc}
	...

0801a484 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a486:	4604      	mov	r4, r0
 801a488:	4615      	mov	r5, r2
 801a48a:	4608      	mov	r0, r1
 801a48c:	b93a      	cbnz	r2, 801a49e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a48e:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801a492:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801a496:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801a49a:	4628      	mov	r0, r5
 801a49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a49e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801a4a2:	f46f 6763 	mvn.w	r7, #3632	@ 0xe30
 801a4a6:	8893      	ldrh	r3, [r2, #4]
 801a4a8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801a4ac:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801a4b0:	79ee      	ldrb	r6, [r5, #7]
 801a4b2:	4316      	orrs	r6, r2
 801a4b4:	19da      	adds	r2, r3, r7
 801a4b6:	b291      	uxth	r1, r2
 801a4b8:	b2b7      	uxth	r7, r6
 801a4ba:	291d      	cmp	r1, #29
 801a4bc:	d87b      	bhi.n	801a5b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801a4be:	2201      	movs	r2, #1
 801a4c0:	10f6      	asrs	r6, r6, #3
 801a4c2:	408a      	lsls	r2, r1
 801a4c4:	4974      	ldr	r1, [pc, #464]	@ (801a698 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801a4c6:	420a      	tst	r2, r1
 801a4c8:	d12e      	bne.n	801a528 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801a4ca:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801a4ce:	d072      	beq.n	801a5b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801a4d0:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801a4d4:	462b      	mov	r3, r5
 801a4d6:	f105 0e08 	add.w	lr, r5, #8
 801a4da:	4615      	mov	r5, r2
 801a4dc:	6818      	ldr	r0, [r3, #0]
 801a4de:	3308      	adds	r3, #8
 801a4e0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a4e4:	4694      	mov	ip, r2
 801a4e6:	4573      	cmp	r3, lr
 801a4e8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a4ec:	4662      	mov	r2, ip
 801a4ee:	d1f5      	bne.n	801a4dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801a4f0:	6818      	ldr	r0, [r3, #0]
 801a4f2:	f8cc 0000 	str.w	r0, [ip]
 801a4f6:	889b      	ldrh	r3, [r3, #4]
 801a4f8:	f8ac 3004 	strh.w	r3, [ip, #4]
 801a4fc:	b2b3      	uxth	r3, r6
 801a4fe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801a502:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801a506:	1aca      	subs	r2, r1, r3
 801a508:	1bcf      	subs	r7, r1, r7
 801a50a:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801a50e:	b292      	uxth	r2, r2
 801a510:	1afb      	subs	r3, r7, r3
 801a512:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801a516:	10d2      	asrs	r2, r2, #3
 801a518:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801a51c:	4302      	orrs	r2, r0
 801a51e:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801a522:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801a526:	e7b8      	b.n	801a49a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a528:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801a52a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a52e:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801a530:	f640 6333 	movw	r3, #3635	@ 0xe33
 801a534:	4299      	cmp	r1, r3
 801a536:	d110      	bne.n	801a55a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801a538:	6803      	ldr	r3, [r0, #0]
 801a53a:	68db      	ldr	r3, [r3, #12]
 801a53c:	4798      	blx	r3
 801a53e:	7b41      	ldrb	r1, [r0, #13]
 801a540:	00cb      	lsls	r3, r1, #3
 801a542:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a546:	7a03      	ldrb	r3, [r0, #8]
 801a548:	0648      	lsls	r0, r1, #25
 801a54a:	ea43 0302 	orr.w	r3, r3, r2
 801a54e:	bf44      	itt	mi
 801a550:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a554:	b21b      	sxthmi	r3, r3
 801a556:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a55a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 801a55e:	462a      	mov	r2, r5
 801a560:	f105 0c08 	add.w	ip, r5, #8
 801a564:	443b      	add	r3, r7
 801a566:	4433      	add	r3, r6
 801a568:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 801a56c:	b29b      	uxth	r3, r3
 801a56e:	4635      	mov	r5, r6
 801a570:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a574:	6810      	ldr	r0, [r2, #0]
 801a576:	3208      	adds	r2, #8
 801a578:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801a57c:	4637      	mov	r7, r6
 801a57e:	4562      	cmp	r2, ip
 801a580:	c703      	stmia	r7!, {r0, r1}
 801a582:	463e      	mov	r6, r7
 801a584:	d1f6      	bne.n	801a574 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801a586:	6810      	ldr	r0, [r2, #0]
 801a588:	6038      	str	r0, [r7, #0]
 801a58a:	8892      	ldrh	r2, [r2, #4]
 801a58c:	80ba      	strh	r2, [r7, #4]
 801a58e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801a592:	10db      	asrs	r3, r3, #3
 801a594:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801a598:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801a59c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801a5a0:	4313      	orrs	r3, r2
 801a5a2:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801a5a6:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801a5aa:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801a5ae:	1a9b      	subs	r3, r3, r2
 801a5b0:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801a5b4:	e771      	b.n	801a49a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a5b6:	f023 0204 	bic.w	r2, r3, #4
 801a5ba:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801a5be:	428a      	cmp	r2, r1
 801a5c0:	d003      	beq.n	801a5ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801a5c2:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801a5c6:	4293      	cmp	r3, r2
 801a5c8:	d120      	bne.n	801a60c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801a5ca:	3b01      	subs	r3, #1
 801a5cc:	4602      	mov	r2, r0
 801a5ce:	4629      	mov	r1, r5
 801a5d0:	4620      	mov	r0, r4
 801a5d2:	b29b      	uxth	r3, r3
 801a5d4:	f7ff ff4a 	bl	801a46c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a5d8:	7b41      	ldrb	r1, [r0, #13]
 801a5da:	00cb      	lsls	r3, r1, #3
 801a5dc:	0649      	lsls	r1, r1, #25
 801a5de:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a5e2:	7a03      	ldrb	r3, [r0, #8]
 801a5e4:	ea43 0302 	orr.w	r3, r3, r2
 801a5e8:	bf44      	itt	mi
 801a5ea:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a5ee:	b21b      	sxthmi	r3, r3
 801a5f0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a5f4:	7b6b      	ldrb	r3, [r5, #13]
 801a5f6:	7aaa      	ldrb	r2, [r5, #10]
 801a5f8:	005b      	lsls	r3, r3, #1
 801a5fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a5fe:	4313      	orrs	r3, r2
 801a600:	115a      	asrs	r2, r3, #5
 801a602:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a606:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801a60a:	e035      	b.n	801a678 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801a60c:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801a610:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 801a614:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801a618:	7a2a      	ldrb	r2, [r5, #8]
 801a61a:	ea42 0201 	orr.w	r2, r2, r1
 801a61e:	f640 6109 	movw	r1, #3593	@ 0xe09
 801a622:	bf1c      	itt	ne
 801a624:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 801a628:	b212      	sxthne	r2, r2
 801a62a:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801a62e:	f023 0210 	bic.w	r2, r3, #16
 801a632:	428a      	cmp	r2, r1
 801a634:	d003      	beq.n	801a63e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801a636:	f640 6213 	movw	r2, #3603	@ 0xe13
 801a63a:	4293      	cmp	r3, r2
 801a63c:	d129      	bne.n	801a692 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801a63e:	7b6e      	ldrb	r6, [r5, #13]
 801a640:	4629      	mov	r1, r5
 801a642:	0076      	lsls	r6, r6, #1
 801a644:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801a648:	7aae      	ldrb	r6, [r5, #10]
 801a64a:	4316      	orrs	r6, r2
 801a64c:	f640 6213 	movw	r2, #3603	@ 0xe13
 801a650:	4293      	cmp	r3, r2
 801a652:	4602      	mov	r2, r0
 801a654:	4620      	mov	r0, r4
 801a656:	bf16      	itet	ne
 801a658:	f103 33ff 	addne.w	r3, r3, #4294967295
 801a65c:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801a660:	b29b      	uxthne	r3, r3
 801a662:	f7ff ff03 	bl	801a46c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a666:	7b43      	ldrb	r3, [r0, #13]
 801a668:	7a82      	ldrb	r2, [r0, #10]
 801a66a:	005b      	lsls	r3, r3, #1
 801a66c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a670:	4313      	orrs	r3, r2
 801a672:	1af6      	subs	r6, r6, r3
 801a674:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801a678:	7b69      	ldrb	r1, [r5, #13]
 801a67a:	00cb      	lsls	r3, r1, #3
 801a67c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a680:	7a2b      	ldrb	r3, [r5, #8]
 801a682:	4313      	orrs	r3, r2
 801a684:	064a      	lsls	r2, r1, #25
 801a686:	bf44      	itt	mi
 801a688:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a68c:	b21b      	sxthmi	r3, r3
 801a68e:	1bdb      	subs	r3, r3, r7
 801a690:	e747      	b.n	801a522 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801a692:	2300      	movs	r3, #0
 801a694:	e7b7      	b.n	801a606 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801a696:	bf00      	nop
 801a698:	3fc00079 	.word	0x3fc00079

0801a69c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801a69c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a6a0:	4604      	mov	r4, r0
 801a6a2:	b942      	cbnz	r2, 801a6b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801a6a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a6a8:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801a6ac:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801a6b0:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801a6b4:	e047      	b.n	801a746 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801a6b6:	7b51      	ldrb	r1, [r2, #13]
 801a6b8:	8893      	ldrh	r3, [r2, #4]
 801a6ba:	010d      	lsls	r5, r1, #4
 801a6bc:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801a6c0:	79d5      	ldrb	r5, [r2, #7]
 801a6c2:	4305      	orrs	r5, r0
 801a6c4:	2d04      	cmp	r5, #4
 801a6c6:	bfcc      	ite	gt
 801a6c8:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801a6cc:	f04f 0e01 	movle.w	lr, #1
 801a6d0:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801a6d4:	f200 80ab 	bhi.w	801a82e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801a6d8:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801a6dc:	4283      	cmp	r3, r0
 801a6de:	d216      	bcs.n	801a70e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a6e0:	f240 605b 	movw	r0, #1627	@ 0x65b
 801a6e4:	4283      	cmp	r3, r0
 801a6e6:	d859      	bhi.n	801a79c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801a6e8:	f240 6057 	movw	r0, #1623	@ 0x657
 801a6ec:	4283      	cmp	r3, r0
 801a6ee:	d20e      	bcs.n	801a70e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a6f0:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801a6f4:	d24a      	bcs.n	801a78c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801a6f6:	f240 604e 	movw	r0, #1614	@ 0x64e
 801a6fa:	4283      	cmp	r3, r0
 801a6fc:	d207      	bcs.n	801a70e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a6fe:	f240 601a 	movw	r0, #1562	@ 0x61a
 801a702:	4283      	cmp	r3, r0
 801a704:	d02a      	beq.n	801a75c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a706:	d821      	bhi.n	801a74c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801a708:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801a70c:	d35b      	bcc.n	801a7c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a70e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801a712:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801a716:	f040 80d0 	bne.w	801a8ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801a71a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801a71e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801a722:	f040 80ca 	bne.w	801a8ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801a726:	00cb      	lsls	r3, r1, #3
 801a728:	0649      	lsls	r1, r1, #25
 801a72a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801a72e:	7a13      	ldrb	r3, [r2, #8]
 801a730:	ea43 0300 	orr.w	r3, r3, r0
 801a734:	bf44      	itt	mi
 801a736:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a73a:	b21b      	sxthmi	r3, r3
 801a73c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a740:	1b5d      	subs	r5, r3, r5
 801a742:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801a746:	4610      	mov	r0, r2
 801a748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a74c:	f240 604b 	movw	r0, #1611	@ 0x64b
 801a750:	4283      	cmp	r3, r0
 801a752:	d338      	bcc.n	801a7c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a754:	f240 604c 	movw	r0, #1612	@ 0x64c
 801a758:	4283      	cmp	r3, r0
 801a75a:	d9d8      	bls.n	801a70e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a75c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801a760:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801a764:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801a768:	f040 80f3 	bne.w	801a952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801a76c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801a770:	f040 80ef 	bne.w	801a952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801a774:	00cb      	lsls	r3, r1, #3
 801a776:	064e      	lsls	r6, r1, #25
 801a778:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801a77c:	7a13      	ldrb	r3, [r2, #8]
 801a77e:	ea43 0300 	orr.w	r3, r3, r0
 801a782:	bf44      	itt	mi
 801a784:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a788:	b21b      	sxthmi	r3, r3
 801a78a:	e7d9      	b.n	801a740 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801a78c:	f240 6054 	movw	r0, #1620	@ 0x654
 801a790:	4283      	cmp	r3, r0
 801a792:	d8e3      	bhi.n	801a75c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a794:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801a798:	d9e0      	bls.n	801a75c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a79a:	e7b8      	b.n	801a70e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a79c:	f240 6074 	movw	r0, #1652	@ 0x674
 801a7a0:	4283      	cmp	r3, r0
 801a7a2:	d0b4      	beq.n	801a70e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a7a4:	d82d      	bhi.n	801a802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801a7a6:	f240 605e 	movw	r0, #1630	@ 0x65e
 801a7aa:	4283      	cmp	r3, r0
 801a7ac:	d804      	bhi.n	801a7b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801a7ae:	f240 605d 	movw	r0, #1629	@ 0x65d
 801a7b2:	4283      	cmp	r3, r0
 801a7b4:	d3d2      	bcc.n	801a75c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a7b6:	e7aa      	b.n	801a70e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a7b8:	f240 605f 	movw	r0, #1631	@ 0x65f
 801a7bc:	4283      	cmp	r3, r0
 801a7be:	d0cd      	beq.n	801a75c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a7c0:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801a7c4:	d0a3      	beq.n	801a70e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a7c6:	00cb      	lsls	r3, r1, #3
 801a7c8:	0649      	lsls	r1, r1, #25
 801a7ca:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801a7ce:	7a13      	ldrb	r3, [r2, #8]
 801a7d0:	ea43 0300 	orr.w	r3, r3, r0
 801a7d4:	bf44      	itt	mi
 801a7d6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a7da:	b21b      	sxthmi	r3, r3
 801a7dc:	1b5d      	subs	r5, r3, r5
 801a7de:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a7e2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801a7e6:	7b53      	ldrb	r3, [r2, #13]
 801a7e8:	015b      	lsls	r3, r3, #5
 801a7ea:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801a7ee:	7993      	ldrb	r3, [r2, #6]
 801a7f0:	430b      	orrs	r3, r1
 801a7f2:	2105      	movs	r1, #5
 801a7f4:	005b      	lsls	r3, r3, #1
 801a7f6:	fb93 f3f1 	sdiv	r3, r3, r1
 801a7fa:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801a7fe:	440b      	add	r3, r1
 801a800:	e756      	b.n	801a6b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801a802:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801a806:	4283      	cmp	r3, r0
 801a808:	d809      	bhi.n	801a81e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801a80a:	f240 60df 	movw	r0, #1759	@ 0x6df
 801a80e:	4283      	cmp	r3, r0
 801a810:	f4bf af7d 	bcs.w	801a70e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a814:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801a818:	2b05      	cmp	r3, #5
 801a81a:	d8d4      	bhi.n	801a7c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a81c:	e777      	b.n	801a70e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a81e:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801a822:	4283      	cmp	r3, r0
 801a824:	d09a      	beq.n	801a75c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a826:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801a82a:	4283      	cmp	r3, r0
 801a82c:	e7ca      	b.n	801a7c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a82e:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801a832:	d22b      	bcs.n	801a88c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801a834:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801a838:	4283      	cmp	r3, r0
 801a83a:	d28f      	bcs.n	801a75c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a83c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a840:	4283      	cmp	r3, r0
 801a842:	d816      	bhi.n	801a872 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801a844:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801a848:	4283      	cmp	r3, r0
 801a84a:	f4bf af60 	bcs.w	801a70e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a84e:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801a852:	4283      	cmp	r3, r0
 801a854:	d80a      	bhi.n	801a86c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801a856:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801a85a:	4283      	cmp	r3, r0
 801a85c:	f4bf af57 	bcs.w	801a70e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a860:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801a864:	4283      	cmp	r3, r0
 801a866:	f43f af79 	beq.w	801a75c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a86a:	e7ac      	b.n	801a7c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a86c:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801a870:	e7f8      	b.n	801a864 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801a872:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801a876:	4283      	cmp	r3, r0
 801a878:	d802      	bhi.n	801a880 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801a87a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a87e:	e798      	b.n	801a7b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801a880:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801a884:	4283      	cmp	r3, r0
 801a886:	f47f af42 	bne.w	801a70e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a88a:	e767      	b.n	801a75c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a88c:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801a890:	4283      	cmp	r3, r0
 801a892:	f43f af63 	beq.w	801a75c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a896:	d802      	bhi.n	801a89e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801a898:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801a89c:	e7f2      	b.n	801a884 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801a89e:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801a8a2:	4283      	cmp	r3, r0
 801a8a4:	d805      	bhi.n	801a8b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801a8a6:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801a8aa:	4283      	cmp	r3, r0
 801a8ac:	f4ff af2f 	bcc.w	801a70e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a8b0:	e754      	b.n	801a75c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a8b2:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801a8b6:	4283      	cmp	r3, r0
 801a8b8:	e7af      	b.n	801a81a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801a8ba:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801a8be:	4617      	mov	r7, r2
 801a8c0:	f102 0808 	add.w	r8, r2, #8
 801a8c4:	4666      	mov	r6, ip
 801a8c6:	6838      	ldr	r0, [r7, #0]
 801a8c8:	3708      	adds	r7, #8
 801a8ca:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801a8ce:	46e6      	mov	lr, ip
 801a8d0:	4547      	cmp	r7, r8
 801a8d2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801a8d6:	46f4      	mov	ip, lr
 801a8d8:	d1f5      	bne.n	801a8c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801a8da:	6838      	ldr	r0, [r7, #0]
 801a8dc:	f8ce 0000 	str.w	r0, [lr]
 801a8e0:	88b9      	ldrh	r1, [r7, #4]
 801a8e2:	f8ae 1004 	strh.w	r1, [lr, #4]
 801a8e6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801a8ea:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801a8ee:	d009      	beq.n	801a904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801a8f0:	7b51      	ldrb	r1, [r2, #13]
 801a8f2:	7992      	ldrb	r2, [r2, #6]
 801a8f4:	0149      	lsls	r1, r1, #5
 801a8f6:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801a8fa:	4311      	orrs	r1, r2
 801a8fc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a900:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801a904:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801a908:	b2ad      	uxth	r5, r5
 801a90a:	d00d      	beq.n	801a928 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801a90c:	442b      	add	r3, r5
 801a90e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801a912:	b29b      	uxth	r3, r3
 801a914:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801a918:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801a91c:	10db      	asrs	r3, r3, #3
 801a91e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801a922:	4313      	orrs	r3, r2
 801a924:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801a928:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801a92c:	00cb      	lsls	r3, r1, #3
 801a92e:	064f      	lsls	r7, r1, #25
 801a930:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a934:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801a938:	ea43 0302 	orr.w	r3, r3, r2
 801a93c:	bf44      	itt	mi
 801a93e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a942:	b21b      	sxthmi	r3, r3
 801a944:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a948:	1b5b      	subs	r3, r3, r5
 801a94a:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801a94e:	4632      	mov	r2, r6
 801a950:	e6f9      	b.n	801a746 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801a952:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801a956:	4617      	mov	r7, r2
 801a958:	f102 0908 	add.w	r9, r2, #8
 801a95c:	4666      	mov	r6, ip
 801a95e:	6838      	ldr	r0, [r7, #0]
 801a960:	3708      	adds	r7, #8
 801a962:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801a966:	46e0      	mov	r8, ip
 801a968:	454f      	cmp	r7, r9
 801a96a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801a96e:	46c4      	mov	ip, r8
 801a970:	d1f5      	bne.n	801a95e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801a972:	6838      	ldr	r0, [r7, #0]
 801a974:	f8c8 0000 	str.w	r0, [r8]
 801a978:	88b9      	ldrh	r1, [r7, #4]
 801a97a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801a97e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801a982:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801a986:	d009      	beq.n	801a99c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801a988:	7b51      	ldrb	r1, [r2, #13]
 801a98a:	7992      	ldrb	r2, [r2, #6]
 801a98c:	0149      	lsls	r1, r1, #5
 801a98e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801a992:	4311      	orrs	r1, r2
 801a994:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a998:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801a99c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801a9a0:	d00e      	beq.n	801a9c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801a9a2:	eba3 030e 	sub.w	r3, r3, lr
 801a9a6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801a9aa:	b29b      	uxth	r3, r3
 801a9ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801a9b0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801a9b4:	10db      	asrs	r3, r3, #3
 801a9b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801a9ba:	4313      	orrs	r3, r2
 801a9bc:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801a9c0:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801a9c4:	00cb      	lsls	r3, r1, #3
 801a9c6:	0648      	lsls	r0, r1, #25
 801a9c8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a9cc:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801a9d0:	ea43 0302 	orr.w	r3, r3, r2
 801a9d4:	bf44      	itt	mi
 801a9d6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a9da:	b21b      	sxthmi	r3, r3
 801a9dc:	1b5d      	subs	r5, r3, r5
 801a9de:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801a9e2:	e7b4      	b.n	801a94e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801a9e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9e8:	461e      	mov	r6, r3
 801a9ea:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801a9ec:	4604      	mov	r4, r0
 801a9ee:	4617      	mov	r7, r2
 801a9f0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a9f4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801a9f8:	f7ee ff0e 	bl	8009818 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a9fc:	4605      	mov	r5, r0
 801a9fe:	b918      	cbnz	r0, 801aa08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801aa00:	6030      	str	r0, [r6, #0]
 801aa02:	4628      	mov	r0, r5
 801aa04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa08:	683b      	ldr	r3, [r7, #0]
 801aa0a:	4601      	mov	r1, r0
 801aa0c:	4638      	mov	r0, r7
 801aa0e:	68db      	ldr	r3, [r3, #12]
 801aa10:	4798      	blx	r3
 801aa12:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801aa16:	4602      	mov	r2, r0
 801aa18:	6030      	str	r0, [r6, #0]
 801aa1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801aa1e:	d213      	bcs.n	801aa48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801aa20:	4643      	mov	r3, r8
 801aa22:	4639      	mov	r1, r7
 801aa24:	4620      	mov	r0, r4
 801aa26:	f7ff fe39 	bl	801a69c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801aa2a:	6030      	str	r0, [r6, #0]
 801aa2c:	6833      	ldr	r3, [r6, #0]
 801aa2e:	b143      	cbz	r3, 801aa42 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801aa30:	7b5a      	ldrb	r2, [r3, #13]
 801aa32:	7a9b      	ldrb	r3, [r3, #10]
 801aa34:	0052      	lsls	r2, r2, #1
 801aa36:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801aa3a:	4313      	orrs	r3, r2
 801aa3c:	bf0c      	ite	eq
 801aa3e:	2301      	moveq	r3, #1
 801aa40:	2300      	movne	r3, #0
 801aa42:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801aa46:	e7dc      	b.n	801aa02 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801aa48:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801aa4c:	b29b      	uxth	r3, r3
 801aa4e:	2b7f      	cmp	r3, #127	@ 0x7f
 801aa50:	d804      	bhi.n	801aa5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801aa52:	4639      	mov	r1, r7
 801aa54:	4620      	mov	r0, r4
 801aa56:	f7ff fd15 	bl	801a484 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801aa5a:	e7e6      	b.n	801aa2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801aa5c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d0e3      	beq.n	801aa2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801aa64:	f640 1302 	movw	r3, #2306	@ 0x902
 801aa68:	429d      	cmp	r5, r3
 801aa6a:	d1df      	bne.n	801aa2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801aa6c:	4601      	mov	r1, r0
 801aa6e:	4620      	mov	r0, r4
 801aa70:	f7ff fcd8 	bl	801a424 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801aa74:	e7d9      	b.n	801aa2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801aa76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801aa76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa7a:	461e      	mov	r6, r3
 801aa7c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801aa7e:	4604      	mov	r4, r0
 801aa80:	4617      	mov	r7, r2
 801aa82:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801aa86:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801aa8a:	f7ee fec5 	bl	8009818 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801aa8e:	4605      	mov	r5, r0
 801aa90:	b918      	cbnz	r0, 801aa9a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801aa92:	6030      	str	r0, [r6, #0]
 801aa94:	4628      	mov	r0, r5
 801aa96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa9a:	683b      	ldr	r3, [r7, #0]
 801aa9c:	4601      	mov	r1, r0
 801aa9e:	4638      	mov	r0, r7
 801aaa0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801aaa4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801aaa8:	47c8      	blx	r9
 801aaaa:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801aaae:	4602      	mov	r2, r0
 801aab0:	6030      	str	r0, [r6, #0]
 801aab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801aab6:	d213      	bcs.n	801aae0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801aab8:	4643      	mov	r3, r8
 801aaba:	4639      	mov	r1, r7
 801aabc:	4620      	mov	r0, r4
 801aabe:	f7ff fded 	bl	801a69c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801aac2:	6030      	str	r0, [r6, #0]
 801aac4:	6833      	ldr	r3, [r6, #0]
 801aac6:	b143      	cbz	r3, 801aada <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801aac8:	7b5a      	ldrb	r2, [r3, #13]
 801aaca:	7a9b      	ldrb	r3, [r3, #10]
 801aacc:	0052      	lsls	r2, r2, #1
 801aace:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801aad2:	4313      	orrs	r3, r2
 801aad4:	bf0c      	ite	eq
 801aad6:	2301      	moveq	r3, #1
 801aad8:	2300      	movne	r3, #0
 801aada:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801aade:	e7d9      	b.n	801aa94 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801aae0:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801aae4:	b29b      	uxth	r3, r3
 801aae6:	2b7f      	cmp	r3, #127	@ 0x7f
 801aae8:	d804      	bhi.n	801aaf4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801aaea:	4639      	mov	r1, r7
 801aaec:	4620      	mov	r0, r4
 801aaee:	f7ff fcc9 	bl	801a484 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801aaf2:	e7e6      	b.n	801aac2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801aaf4:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d0e3      	beq.n	801aac4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801aafc:	f640 1302 	movw	r3, #2306	@ 0x902
 801ab00:	429d      	cmp	r5, r3
 801ab02:	d1df      	bne.n	801aac4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801ab04:	4601      	mov	r1, r0
 801ab06:	4620      	mov	r0, r4
 801ab08:	f7ff fc8c 	bl	801a424 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ab0c:	e7d9      	b.n	801aac2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801ab0e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801ab0e:	b510      	push	{r4, lr}
 801ab10:	4604      	mov	r4, r0
 801ab12:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801ab16:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801ab18:	b1e1      	cbz	r1, 801ab54 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801ab1a:	2b0a      	cmp	r3, #10
 801ab1c:	d02d      	beq.n	801ab7a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801ab1e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801ab20:	3901      	subs	r1, #1
 801ab22:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801ab26:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801ab28:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801ab2c:	1c51      	adds	r1, r2, #1
 801ab2e:	b289      	uxth	r1, r1
 801ab30:	2901      	cmp	r1, #1
 801ab32:	bf8a      	itet	hi
 801ab34:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801ab38:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801ab3a:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801ab3c:	1c5a      	adds	r2, r3, #1
 801ab3e:	8722      	strh	r2, [r4, #56]	@ 0x38
 801ab40:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801ab42:	4413      	add	r3, r2
 801ab44:	b29b      	uxth	r3, r3
 801ab46:	2b09      	cmp	r3, #9
 801ab48:	bf88      	it	hi
 801ab4a:	3b0a      	subhi	r3, #10
 801ab4c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ab50:	8458      	strh	r0, [r3, #34]	@ 0x22
 801ab52:	e7de      	b.n	801ab12 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801ab54:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801ab56:	2b0a      	cmp	r3, #10
 801ab58:	d00f      	beq.n	801ab7a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801ab5a:	4620      	mov	r0, r4
 801ab5c:	f7ff fc21 	bl	801a3a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ab60:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801ab62:	1c5a      	adds	r2, r3, #1
 801ab64:	8722      	strh	r2, [r4, #56]	@ 0x38
 801ab66:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801ab68:	4413      	add	r3, r2
 801ab6a:	b29b      	uxth	r3, r3
 801ab6c:	2b09      	cmp	r3, #9
 801ab6e:	bf88      	it	hi
 801ab70:	3b0a      	subhi	r3, #10
 801ab72:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ab76:	8458      	strh	r0, [r3, #34]	@ 0x22
 801ab78:	e7ec      	b.n	801ab54 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801ab7a:	bd10      	pop	{r4, pc}

0801ab7c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801ab7c:	b538      	push	{r3, r4, r5, lr}
 801ab7e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801ab80:	4604      	mov	r4, r0
 801ab82:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801ab86:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801ab88:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801ab8a:	3a01      	subs	r2, #1
 801ab8c:	8702      	strh	r2, [r0, #56]	@ 0x38
 801ab8e:	1c5a      	adds	r2, r3, #1
 801ab90:	b292      	uxth	r2, r2
 801ab92:	2a09      	cmp	r2, #9
 801ab94:	bf8a      	itet	hi
 801ab96:	3b09      	subhi	r3, #9
 801ab98:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801ab9a:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801ab9c:	f7ff ffb7 	bl	801ab0e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801aba0:	8c23      	ldrh	r3, [r4, #32]
 801aba2:	2b01      	cmp	r3, #1
 801aba4:	bf9c      	itt	ls
 801aba6:	3301      	addls	r3, #1
 801aba8:	8423      	strhls	r3, [r4, #32]
 801abaa:	8be3      	ldrh	r3, [r4, #30]
 801abac:	b90b      	cbnz	r3, 801abb2 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801abae:	2302      	movs	r3, #2
 801abb0:	83e3      	strh	r3, [r4, #30]
 801abb2:	8be3      	ldrh	r3, [r4, #30]
 801abb4:	4628      	mov	r0, r5
 801abb6:	3b01      	subs	r3, #1
 801abb8:	b29b      	uxth	r3, r3
 801abba:	83e3      	strh	r3, [r4, #30]
 801abbc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801abc0:	8365      	strh	r5, [r4, #26]
 801abc2:	bd38      	pop	{r3, r4, r5, pc}

0801abc4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801abc4:	428a      	cmp	r2, r1
 801abc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abca:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801abcc:	d932      	bls.n	801ac34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801abce:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801abd0:	1a54      	subs	r4, r2, r1
 801abd2:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801abd6:	19ee      	adds	r6, r5, r7
 801abd8:	fa1f fe84 	uxth.w	lr, r4
 801abdc:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801abe0:	3e01      	subs	r6, #1
 801abe2:	b2b4      	uxth	r4, r6
 801abe4:	eba4 090e 	sub.w	r9, r4, lr
 801abe8:	fa1f f989 	uxth.w	r9, r9
 801abec:	2c09      	cmp	r4, #9
 801abee:	4626      	mov	r6, r4
 801abf0:	bf88      	it	hi
 801abf2:	f1a4 060a 	subhi.w	r6, r4, #10
 801abf6:	f1bc 0f00 	cmp.w	ip, #0
 801abfa:	f104 34ff 	add.w	r4, r4, #4294967295
 801abfe:	bf08      	it	eq
 801ac00:	f04f 0c02 	moveq.w	ip, #2
 801ac04:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ac08:	b2a4      	uxth	r4, r4
 801ac0a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ac0e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801ac12:	454c      	cmp	r4, r9
 801ac14:	fa1f fc8c 	uxth.w	ip, ip
 801ac18:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801ac1c:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801ac20:	d1e4      	bne.n	801abec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801ac22:	eba5 050e 	sub.w	r5, r5, lr
 801ac26:	eb0e 0408 	add.w	r4, lr, r8
 801ac2a:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801ac2e:	8705      	strh	r5, [r0, #56]	@ 0x38
 801ac30:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801ac34:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801ac36:	250a      	movs	r5, #10
 801ac38:	1a64      	subs	r4, r4, r1
 801ac3a:	4439      	add	r1, r7
 801ac3c:	b289      	uxth	r1, r1
 801ac3e:	8704      	strh	r4, [r0, #56]	@ 0x38
 801ac40:	2909      	cmp	r1, #9
 801ac42:	bf88      	it	hi
 801ac44:	390a      	subhi	r1, #10
 801ac46:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801ac48:	b18a      	cbz	r2, 801ac6e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801ac4a:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801ac4c:	3a01      	subs	r2, #1
 801ac4e:	3101      	adds	r1, #1
 801ac50:	b292      	uxth	r2, r2
 801ac52:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801ac56:	8701      	strh	r1, [r0, #56]	@ 0x38
 801ac58:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801ac5a:	b901      	cbnz	r1, 801ac5e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801ac5c:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801ac5e:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801ac60:	3901      	subs	r1, #1
 801ac62:	b289      	uxth	r1, r1
 801ac64:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801ac66:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801ac6a:	844c      	strh	r4, [r1, #34]	@ 0x22
 801ac6c:	e7ec      	b.n	801ac48 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801ac6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac72:	f7ff bf4c 	b.w	801ab0e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801ac76 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ac76:	b570      	push	{r4, r5, r6, lr}
 801ac78:	2500      	movs	r5, #0
 801ac7a:	4295      	cmp	r5, r2
 801ac7c:	d011      	beq.n	801aca2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801ac7e:	8bc4      	ldrh	r4, [r0, #30]
 801ac80:	f831 6b02 	ldrh.w	r6, [r1], #2
 801ac84:	4414      	add	r4, r2
 801ac86:	3c01      	subs	r4, #1
 801ac88:	1b64      	subs	r4, r4, r5
 801ac8a:	b2a4      	uxth	r4, r4
 801ac8c:	2c01      	cmp	r4, #1
 801ac8e:	bf88      	it	hi
 801ac90:	3c02      	subhi	r4, #2
 801ac92:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ac96:	8b64      	ldrh	r4, [r4, #26]
 801ac98:	42b4      	cmp	r4, r6
 801ac9a:	d117      	bne.n	801accc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801ac9c:	3501      	adds	r5, #1
 801ac9e:	b2ad      	uxth	r5, r5
 801aca0:	e7eb      	b.n	801ac7a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801aca2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801aca6:	2400      	movs	r4, #0
 801aca8:	4413      	add	r3, r2
 801acaa:	b2a2      	uxth	r2, r4
 801acac:	429a      	cmp	r2, r3
 801acae:	da0f      	bge.n	801acd0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801acb0:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801acb2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801acb6:	3401      	adds	r4, #1
 801acb8:	4432      	add	r2, r6
 801acba:	b292      	uxth	r2, r2
 801acbc:	2a09      	cmp	r2, #9
 801acbe:	bf88      	it	hi
 801acc0:	3a0a      	subhi	r2, #10
 801acc2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801acc6:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801acc8:	42aa      	cmp	r2, r5
 801acca:	d0ee      	beq.n	801acaa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801accc:	2000      	movs	r0, #0
 801acce:	bd70      	pop	{r4, r5, r6, pc}
 801acd0:	2001      	movs	r0, #1
 801acd2:	e7fc      	b.n	801acce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801acd4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801acd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acd8:	4605      	mov	r5, r0
 801acda:	4616      	mov	r6, r2
 801acdc:	1c8c      	adds	r4, r1, #2
 801acde:	8809      	ldrh	r1, [r1, #0]
 801ace0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801ace4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801ace8:	42b3      	cmp	r3, r6
 801acea:	d124      	bne.n	801ad36 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801acec:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801acf0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801acf4:	f001 070f 	and.w	r7, r1, #15
 801acf8:	4652      	mov	r2, sl
 801acfa:	f8cd 8000 	str.w	r8, [sp]
 801acfe:	464b      	mov	r3, r9
 801ad00:	4621      	mov	r1, r4
 801ad02:	4628      	mov	r0, r5
 801ad04:	f7ff ffb7 	bl	801ac76 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ad08:	4683      	mov	fp, r0
 801ad0a:	b168      	cbz	r0, 801ad28 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ad0c:	eb0a 0109 	add.w	r1, sl, r9
 801ad10:	463a      	mov	r2, r7
 801ad12:	4628      	mov	r0, r5
 801ad14:	4441      	add	r1, r8
 801ad16:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ad1a:	4649      	mov	r1, r9
 801ad1c:	f7ff ff52 	bl	801abc4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ad20:	4658      	mov	r0, fp
 801ad22:	b003      	add	sp, #12
 801ad24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad28:	eb07 010a 	add.w	r1, r7, sl
 801ad2c:	4449      	add	r1, r9
 801ad2e:	4441      	add	r1, r8
 801ad30:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ad34:	e7d2      	b.n	801acdc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801ad36:	f04f 0b00 	mov.w	fp, #0
 801ad3a:	e7f1      	b.n	801ad20 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801ad3c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801ad3c:	b570      	push	{r4, r5, r6, lr}
 801ad3e:	8810      	ldrh	r0, [r2, #0]
 801ad40:	4298      	cmp	r0, r3
 801ad42:	d817      	bhi.n	801ad74 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ad44:	1e48      	subs	r0, r1, #1
 801ad46:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801ad4a:	4298      	cmp	r0, r3
 801ad4c:	d312      	bcc.n	801ad74 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ad4e:	2400      	movs	r4, #0
 801ad50:	428c      	cmp	r4, r1
 801ad52:	d20f      	bcs.n	801ad74 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ad54:	1860      	adds	r0, r4, r1
 801ad56:	1040      	asrs	r0, r0, #1
 801ad58:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801ad5c:	0085      	lsls	r5, r0, #2
 801ad5e:	42b3      	cmp	r3, r6
 801ad60:	d902      	bls.n	801ad68 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801ad62:	3001      	adds	r0, #1
 801ad64:	b284      	uxth	r4, r0
 801ad66:	e7f3      	b.n	801ad50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ad68:	d201      	bcs.n	801ad6e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801ad6a:	b281      	uxth	r1, r0
 801ad6c:	e7f0      	b.n	801ad50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ad6e:	442a      	add	r2, r5
 801ad70:	8850      	ldrh	r0, [r2, #2]
 801ad72:	bd70      	pop	{r4, r5, r6, pc}
 801ad74:	2000      	movs	r0, #0
 801ad76:	e7fc      	b.n	801ad72 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801ad78 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801ad78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad7c:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801ad7e:	4604      	mov	r4, r0
 801ad80:	260b      	movs	r6, #11
 801ad82:	886f      	ldrh	r7, [r5, #2]
 801ad84:	087f      	lsrs	r7, r7, #1
 801ad86:	3e01      	subs	r6, #1
 801ad88:	d013      	beq.n	801adb2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ad8a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801ad8c:	462a      	mov	r2, r5
 801ad8e:	4639      	mov	r1, r7
 801ad90:	4620      	mov	r0, r4
 801ad92:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ad96:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801ad9a:	4643      	mov	r3, r8
 801ad9c:	f7ff ffce 	bl	801ad3c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801ada0:	b138      	cbz	r0, 801adb2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ada2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801ada6:	4642      	mov	r2, r8
 801ada8:	4620      	mov	r0, r4
 801adaa:	f7ff ff93 	bl	801acd4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801adae:	2800      	cmp	r0, #0
 801adb0:	d1e9      	bne.n	801ad86 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801adb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801adb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801adb8:	b570      	push	{r4, r5, r6, lr}
 801adba:	694a      	ldr	r2, [r1, #20]
 801adbc:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801adbe:	684b      	ldr	r3, [r1, #4]
 801adc0:	1b54      	subs	r4, r2, r5
 801adc2:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801adc4:	f000 8106 	beq.w	801afd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801adc8:	1b9b      	subs	r3, r3, r6
 801adca:	d003      	beq.n	801add4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801adcc:	4363      	muls	r3, r4
 801adce:	2210      	movs	r2, #16
 801add0:	fb93 f3f2 	sdiv	r3, r3, r2
 801add4:	680c      	ldr	r4, [r1, #0]
 801add6:	698a      	ldr	r2, [r1, #24]
 801add8:	1b65      	subs	r5, r4, r5
 801adda:	f000 80fd 	beq.w	801afd8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801adde:	1b92      	subs	r2, r2, r6
 801ade0:	d003      	beq.n	801adea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ade2:	436a      	muls	r2, r5
 801ade4:	2410      	movs	r4, #16
 801ade6:	fb92 f2f4 	sdiv	r2, r2, r4
 801adea:	1a9b      	subs	r3, r3, r2
 801adec:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801b014 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801adf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801adf4:	460a      	mov	r2, r1
 801adf6:	ee07 3a90 	vmov	s15, r3
 801adfa:	f100 040c 	add.w	r4, r0, #12
 801adfe:	4603      	mov	r3, r0
 801ae00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae04:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ae08:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801ae0c:	eeb1 6a43 	vneg.f32	s12, s6
 801ae10:	edd2 7a02 	vldr	s15, [r2, #8]
 801ae14:	3214      	adds	r2, #20
 801ae16:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ae1a:	ece3 6a01 	vstmia	r3!, {s13}
 801ae1e:	429c      	cmp	r4, r3
 801ae20:	ed52 7a02 	vldr	s15, [r2, #-8]
 801ae24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ae28:	edc3 7a02 	vstr	s15, [r3, #8]
 801ae2c:	ed52 7a01 	vldr	s15, [r2, #-4]
 801ae30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ae34:	edc3 7a05 	vstr	s15, [r3, #20]
 801ae38:	d1ea      	bne.n	801ae10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801ae3a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801ae3c:	698b      	ldr	r3, [r1, #24]
 801ae3e:	edd0 4a02 	vldr	s9, [r0, #8]
 801ae42:	1a9b      	subs	r3, r3, r2
 801ae44:	edd0 3a00 	vldr	s7, [r0]
 801ae48:	edd0 6a01 	vldr	s13, [r0, #4]
 801ae4c:	ee07 3a90 	vmov	s15, r3
 801ae50:	684b      	ldr	r3, [r1, #4]
 801ae52:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801ae56:	ed90 5a05 	vldr	s10, [r0, #20]
 801ae5a:	1a9b      	subs	r3, r3, r2
 801ae5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae60:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801ae64:	ed90 2a03 	vldr	s4, [r0, #12]
 801ae68:	ee07 3a10 	vmov	s14, r3
 801ae6c:	edd0 5a04 	vldr	s11, [r0, #16]
 801ae70:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ae74:	ed90 1a07 	vldr	s2, [r0, #28]
 801ae78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ae7c:	edd0 2a06 	vldr	s5, [r0, #24]
 801ae80:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801ae84:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801ae88:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ae8c:	ee32 5a45 	vsub.f32	s10, s4, s10
 801ae90:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ae94:	ee67 7a83 	vmul.f32	s15, s15, s6
 801ae98:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801ae9c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801ae9e:	694a      	ldr	r2, [r1, #20]
 801aea0:	1b13      	subs	r3, r2, r4
 801aea2:	ee07 3a10 	vmov	s14, r3
 801aea6:	680b      	ldr	r3, [r1, #0]
 801aea8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aeac:	1b1b      	subs	r3, r3, r4
 801aeae:	ee27 7a04 	vmul.f32	s14, s14, s8
 801aeb2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801aeb6:	ee07 3a10 	vmov	s14, r3
 801aeba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aebe:	ee27 7a04 	vmul.f32	s14, s14, s8
 801aec2:	eee6 4a87 	vfma.f32	s9, s13, s14
 801aec6:	ee64 4a86 	vmul.f32	s9, s9, s12
 801aeca:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801aece:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801aed0:	698b      	ldr	r3, [r1, #24]
 801aed2:	1a9b      	subs	r3, r3, r2
 801aed4:	ee06 3a90 	vmov	s13, r3
 801aed8:	684b      	ldr	r3, [r1, #4]
 801aeda:	1a9b      	subs	r3, r3, r2
 801aedc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801aee0:	ee07 3a10 	vmov	s14, r3
 801aee4:	ee66 6a84 	vmul.f32	s13, s13, s8
 801aee8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aeec:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801aef0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801aef4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801aef8:	ee66 6a83 	vmul.f32	s13, s13, s6
 801aefc:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801af00:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801af02:	694a      	ldr	r2, [r1, #20]
 801af04:	1b13      	subs	r3, r2, r4
 801af06:	ee07 3a10 	vmov	s14, r3
 801af0a:	680b      	ldr	r3, [r1, #0]
 801af0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af10:	1b1b      	subs	r3, r3, r4
 801af12:	ee27 7a04 	vmul.f32	s14, s14, s8
 801af16:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801af1a:	ee07 3a10 	vmov	s14, r3
 801af1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af22:	ee27 7a04 	vmul.f32	s14, s14, s8
 801af26:	eea5 5a87 	vfma.f32	s10, s11, s14
 801af2a:	edd0 5a08 	vldr	s11, [r0, #32]
 801af2e:	ee31 1a65 	vsub.f32	s2, s2, s11
 801af32:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801af36:	ee25 5a06 	vmul.f32	s10, s10, s12
 801af3a:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801af3e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801af40:	698b      	ldr	r3, [r1, #24]
 801af42:	1a9b      	subs	r3, r3, r2
 801af44:	ee07 3a10 	vmov	s14, r3
 801af48:	684b      	ldr	r3, [r1, #4]
 801af4a:	1a9b      	subs	r3, r3, r2
 801af4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af50:	ee01 3a90 	vmov	s3, r3
 801af54:	ee27 7a04 	vmul.f32	s14, s14, s8
 801af58:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801af5c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801af60:	ee61 1a84 	vmul.f32	s3, s3, s8
 801af64:	eea1 7a21 	vfma.f32	s14, s2, s3
 801af68:	ee27 7a03 	vmul.f32	s14, s14, s6
 801af6c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801af70:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801af72:	694a      	ldr	r2, [r1, #20]
 801af74:	1b13      	subs	r3, r2, r4
 801af76:	ee03 3a10 	vmov	s6, r3
 801af7a:	680b      	ldr	r3, [r1, #0]
 801af7c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801af80:	1b1b      	subs	r3, r3, r4
 801af82:	ee23 3a04 	vmul.f32	s6, s6, s8
 801af86:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801af8a:	ee03 3a10 	vmov	s6, r3
 801af8e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801af92:	ee23 4a04 	vmul.f32	s8, s6, s8
 801af96:	eee1 5a04 	vfma.f32	s11, s2, s8
 801af9a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801af9e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801afa2:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801afa6:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801afaa:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801afae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afb2:	dd13      	ble.n	801afdc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801afb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801afb8:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801afbc:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801afbe:	eee3 7a87 	vfma.f32	s15, s7, s14
 801afc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801afc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afca:	dd15      	ble.n	801aff8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801afcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801afd0:	6403      	str	r3, [r0, #64]	@ 0x40
 801afd2:	bd70      	pop	{r4, r5, r6, pc}
 801afd4:	4623      	mov	r3, r4
 801afd6:	e6fd      	b.n	801add4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801afd8:	462a      	mov	r2, r5
 801afda:	e706      	b.n	801adea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801afdc:	d502      	bpl.n	801afe4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801afde:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801afe2:	e7e9      	b.n	801afb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801afe4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801afe8:	eea3 2a85 	vfma.f32	s4, s7, s10
 801afec:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801aff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aff4:	dade      	bge.n	801afb4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801aff6:	e7f2      	b.n	801afde <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801aff8:	d502      	bpl.n	801b000 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801affa:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801affe:	e7e7      	b.n	801afd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801b000:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801b004:	eee3 4a86 	vfma.f32	s9, s7, s12
 801b008:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801b00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b010:	dadc      	bge.n	801afcc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801b012:	e7f2      	b.n	801affa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801b014:	3d800000 	.word	0x3d800000

0801b018 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801b018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b01c:	2714      	movs	r7, #20
 801b01e:	435f      	muls	r7, r3
 801b020:	eb02 0c07 	add.w	ip, r2, r7
 801b024:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801b028:	f115 0e0f 	adds.w	lr, r5, #15
 801b02c:	f100 80a2 	bmi.w	801b174 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801b030:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801b034:	9c08      	ldr	r4, [sp, #32]
 801b036:	2614      	movs	r6, #20
 801b038:	f8c0 e014 	str.w	lr, [r0, #20]
 801b03c:	4366      	muls	r6, r4
 801b03e:	eb02 0806 	add.w	r8, r2, r6
 801b042:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b046:	f115 040f 	adds.w	r4, r5, #15
 801b04a:	f100 809f 	bmi.w	801b18c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801b04e:	1124      	asrs	r4, r4, #4
 801b050:	eba4 040e 	sub.w	r4, r4, lr
 801b054:	6184      	str	r4, [r0, #24]
 801b056:	2c00      	cmp	r4, #0
 801b058:	f000 808a 	beq.w	801b170 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801b05c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801b060:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801b064:	5995      	ldr	r5, [r2, r6]
 801b066:	eba4 0809 	sub.w	r8, r4, r9
 801b06a:	59d4      	ldr	r4, [r2, r7]
 801b06c:	eba5 0a04 	sub.w	sl, r5, r4
 801b070:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801b074:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801b078:	fb0e fe05 	mul.w	lr, lr, r5
 801b07c:	fb0a ee19 	mls	lr, sl, r9, lr
 801b080:	fb08 e404 	mla	r4, r8, r4, lr
 801b084:	3c01      	subs	r4, #1
 801b086:	19a4      	adds	r4, r4, r6
 801b088:	f100 808c 	bmi.w	801b1a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801b08c:	fb94 fef6 	sdiv	lr, r4, r6
 801b090:	fb06 441e 	mls	r4, r6, lr, r4
 801b094:	f8c0 e000 	str.w	lr, [r0]
 801b098:	6104      	str	r4, [r0, #16]
 801b09a:	2d00      	cmp	r5, #0
 801b09c:	f2c0 8095 	blt.w	801b1ca <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801b0a0:	fb95 f4f6 	sdiv	r4, r5, r6
 801b0a4:	fb06 5514 	mls	r5, r6, r4, r5
 801b0a8:	6044      	str	r4, [r0, #4]
 801b0aa:	6085      	str	r5, [r0, #8]
 801b0ac:	60c6      	str	r6, [r0, #12]
 801b0ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b0b2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801b0b6:	6945      	ldr	r5, [r0, #20]
 801b0b8:	59d2      	ldr	r2, [r2, r7]
 801b0ba:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801b0be:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801b1ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801b0c2:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801b0c6:	ee07 4a10 	vmov	s14, r4
 801b0ca:	6804      	ldr	r4, [r0, #0]
 801b0cc:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801b0d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b0d4:	ee07 2a90 	vmov	s15, r2
 801b0d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b0dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b0e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b0e4:	edd3 6a00 	vldr	s13, [r3]
 801b0e8:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b0ec:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801b0f0:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b0f4:	edc0 6a07 	vstr	s13, [r0, #28]
 801b0f8:	edd0 6a01 	vldr	s13, [r0, #4]
 801b0fc:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801b100:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b104:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801b108:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b10c:	ed80 6a08 	vstr	s12, [r0, #32]
 801b110:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801b112:	6242      	str	r2, [r0, #36]	@ 0x24
 801b114:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801b118:	ed93 6a03 	vldr	s12, [r3, #12]
 801b11c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b120:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801b124:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801b128:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801b12c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801b130:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801b134:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b138:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801b13c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801b13e:	6302      	str	r2, [r0, #48]	@ 0x30
 801b140:	ed93 6a06 	vldr	s12, [r3, #24]
 801b144:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801b148:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b14c:	eeb0 7a46 	vmov.f32	s14, s12
 801b150:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801b154:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b158:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801b15c:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801b160:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801b164:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b168:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801b16c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801b16e:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801b170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b174:	2410      	movs	r4, #16
 801b176:	f1c5 0501 	rsb	r5, r5, #1
 801b17a:	fb9e fef4 	sdiv	lr, lr, r4
 801b17e:	f015 050f 	ands.w	r5, r5, #15
 801b182:	bf18      	it	ne
 801b184:	2501      	movne	r5, #1
 801b186:	ebae 0e05 	sub.w	lr, lr, r5
 801b18a:	e753      	b.n	801b034 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801b18c:	f04f 0910 	mov.w	r9, #16
 801b190:	f1c5 0501 	rsb	r5, r5, #1
 801b194:	fb94 f4f9 	sdiv	r4, r4, r9
 801b198:	f015 050f 	ands.w	r5, r5, #15
 801b19c:	bf18      	it	ne
 801b19e:	2501      	movne	r5, #1
 801b1a0:	1b64      	subs	r4, r4, r5
 801b1a2:	e755      	b.n	801b050 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801b1a4:	4264      	negs	r4, r4
 801b1a6:	fb94 fef6 	sdiv	lr, r4, r6
 801b1aa:	f1ce 0800 	rsb	r8, lr, #0
 801b1ae:	fb06 441e 	mls	r4, r6, lr, r4
 801b1b2:	f8c0 8000 	str.w	r8, [r0]
 801b1b6:	6104      	str	r4, [r0, #16]
 801b1b8:	2c00      	cmp	r4, #0
 801b1ba:	f43f af6e 	beq.w	801b09a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801b1be:	ea6f 0e0e 	mvn.w	lr, lr
 801b1c2:	1b34      	subs	r4, r6, r4
 801b1c4:	f8c0 e000 	str.w	lr, [r0]
 801b1c8:	e766      	b.n	801b098 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801b1ca:	426d      	negs	r5, r5
 801b1cc:	fb95 f4f6 	sdiv	r4, r5, r6
 801b1d0:	f1c4 0e00 	rsb	lr, r4, #0
 801b1d4:	fb06 5514 	mls	r5, r6, r4, r5
 801b1d8:	f8c0 e004 	str.w	lr, [r0, #4]
 801b1dc:	6085      	str	r5, [r0, #8]
 801b1de:	2d00      	cmp	r5, #0
 801b1e0:	f43f af64 	beq.w	801b0ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801b1e4:	43e4      	mvns	r4, r4
 801b1e6:	1b75      	subs	r5, r6, r5
 801b1e8:	6044      	str	r4, [r0, #4]
 801b1ea:	e75e      	b.n	801b0aa <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801b1ec:	3d800000 	.word	0x3d800000

0801b1f0 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801b1f0:	4602      	mov	r2, r0
 801b1f2:	b148      	cbz	r0, 801b208 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801b1f4:	2300      	movs	r3, #0
 801b1f6:	b298      	uxth	r0, r3
 801b1f8:	3301      	adds	r3, #1
 801b1fa:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801b1fe:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801b202:	2900      	cmp	r1, #0
 801b204:	d1f7      	bne.n	801b1f6 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801b206:	4770      	bx	lr
 801b208:	4770      	bx	lr

0801b20a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801b20a:	b530      	push	{r4, r5, lr}
 801b20c:	4604      	mov	r4, r0
 801b20e:	b159      	cbz	r1, 801b228 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801b210:	b148      	cbz	r0, 801b226 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b212:	2300      	movs	r3, #0
 801b214:	b298      	uxth	r0, r3
 801b216:	4282      	cmp	r2, r0
 801b218:	d905      	bls.n	801b226 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b21a:	5ccd      	ldrb	r5, [r1, r3]
 801b21c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801b220:	3301      	adds	r3, #1
 801b222:	2d00      	cmp	r5, #0
 801b224:	d1f6      	bne.n	801b214 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801b226:	bd30      	pop	{r4, r5, pc}
 801b228:	4608      	mov	r0, r1
 801b22a:	e7fc      	b.n	801b226 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801b22c <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801b22c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b22e:	b08b      	sub	sp, #44	@ 0x2c
 801b230:	468c      	mov	ip, r1
 801b232:	4604      	mov	r4, r0
 801b234:	2100      	movs	r1, #0
 801b236:	261f      	movs	r6, #31
 801b238:	af01      	add	r7, sp, #4
 801b23a:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801b23e:	1e71      	subs	r1, r6, #1
 801b240:	fb94 fef3 	sdiv	lr, r4, r3
 801b244:	fb03 441e 	mls	r4, r3, lr, r4
 801b248:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801b24c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801b250:	b2ec      	uxtb	r4, r5
 801b252:	2d09      	cmp	r5, #9
 801b254:	bfd4      	ite	le
 801b256:	3430      	addle	r4, #48	@ 0x30
 801b258:	3457      	addgt	r4, #87	@ 0x57
 801b25a:	b2e4      	uxtb	r4, r4
 801b25c:	55bc      	strb	r4, [r7, r6]
 801b25e:	4674      	mov	r4, lr
 801b260:	b974      	cbnz	r4, 801b280 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801b262:	2800      	cmp	r0, #0
 801b264:	da05      	bge.n	801b272 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801b266:	ab0a      	add	r3, sp, #40	@ 0x28
 801b268:	4419      	add	r1, r3
 801b26a:	232d      	movs	r3, #45	@ 0x2d
 801b26c:	f801 3c24 	strb.w	r3, [r1, #-36]
 801b270:	1eb1      	subs	r1, r6, #2
 801b272:	3101      	adds	r1, #1
 801b274:	4660      	mov	r0, ip
 801b276:	4439      	add	r1, r7
 801b278:	f7ff ffc7 	bl	801b20a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b27c:	b00b      	add	sp, #44	@ 0x2c
 801b27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b280:	460e      	mov	r6, r1
 801b282:	e7dc      	b.n	801b23e <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801b284 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801b284:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b286:	468c      	mov	ip, r1
 801b288:	b08b      	sub	sp, #44	@ 0x2c
 801b28a:	2100      	movs	r1, #0
 801b28c:	ae01      	add	r6, sp, #4
 801b28e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801b292:	211f      	movs	r1, #31
 801b294:	fbb0 f7f3 	udiv	r7, r0, r3
 801b298:	fb03 0517 	mls	r5, r3, r7, r0
 801b29c:	4638      	mov	r0, r7
 801b29e:	b2ec      	uxtb	r4, r5
 801b2a0:	2d09      	cmp	r5, #9
 801b2a2:	bfd4      	ite	le
 801b2a4:	3430      	addle	r4, #48	@ 0x30
 801b2a6:	3457      	addgt	r4, #87	@ 0x57
 801b2a8:	b2e4      	uxtb	r4, r4
 801b2aa:	558c      	strb	r4, [r1, r6]
 801b2ac:	1e4c      	subs	r4, r1, #1
 801b2ae:	b92f      	cbnz	r7, 801b2bc <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801b2b0:	4431      	add	r1, r6
 801b2b2:	4660      	mov	r0, ip
 801b2b4:	f7ff ffa9 	bl	801b20a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b2b8:	b00b      	add	sp, #44	@ 0x2c
 801b2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b2bc:	4621      	mov	r1, r4
 801b2be:	e7e9      	b.n	801b294 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801b2c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801b2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2c4:	b085      	sub	sp, #20
 801b2c6:	4691      	mov	r9, r2
 801b2c8:	6802      	ldr	r2, [r0, #0]
 801b2ca:	4688      	mov	r8, r1
 801b2cc:	461c      	mov	r4, r3
 801b2ce:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801b2d2:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801b2d6:	4683      	mov	fp, r0
 801b2d8:	4610      	mov	r0, r2
 801b2da:	9103      	str	r1, [sp, #12]
 801b2dc:	9302      	str	r3, [sp, #8]
 801b2de:	9201      	str	r2, [sp, #4]
 801b2e0:	f7ff ff86 	bl	801b1f0 <_ZN8touchgfx7Unicode6strlenEPKt>
 801b2e4:	f1b8 0f00 	cmp.w	r8, #0
 801b2e8:	bf0c      	ite	eq
 801b2ea:	4684      	moveq	ip, r0
 801b2ec:	f100 0c01 	addne.w	ip, r0, #1
 801b2f0:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801b2f4:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801b2f8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801b2fa:	fa1f fc8c 	uxth.w	ip, ip
 801b2fe:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801b300:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801b304:	9903      	ldr	r1, [sp, #12]
 801b306:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b30a:	d041      	beq.n	801b390 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b30c:	d834      	bhi.n	801b378 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801b30e:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801b312:	d059      	beq.n	801b3c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801b314:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801b318:	d03a      	beq.n	801b390 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b31a:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801b31e:	d034      	beq.n	801b38a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b320:	2400      	movs	r4, #0
 801b322:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801b326:	3a01      	subs	r2, #1
 801b328:	b169      	cbz	r1, 801b346 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b32a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b32c:	458c      	cmp	ip, r1
 801b32e:	da09      	bge.n	801b344 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b330:	eba1 010c 	sub.w	r1, r1, ip
 801b334:	b289      	uxth	r1, r1
 801b336:	b933      	cbnz	r3, 801b346 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b338:	2e00      	cmp	r6, #0
 801b33a:	d051      	beq.n	801b3e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b33c:	2800      	cmp	r0, #0
 801b33e:	d04f      	beq.n	801b3e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b340:	440c      	add	r4, r1
 801b342:	b2a4      	uxth	r4, r4
 801b344:	2100      	movs	r1, #0
 801b346:	682b      	ldr	r3, [r5, #0]
 801b348:	4293      	cmp	r3, r2
 801b34a:	da07      	bge.n	801b35c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b34c:	f1b8 0f00 	cmp.w	r8, #0
 801b350:	d004      	beq.n	801b35c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b352:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801b356:	682b      	ldr	r3, [r5, #0]
 801b358:	3301      	adds	r3, #1
 801b35a:	602b      	str	r3, [r5, #0]
 801b35c:	2730      	movs	r7, #48	@ 0x30
 801b35e:	2c00      	cmp	r4, #0
 801b360:	d04e      	beq.n	801b400 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b362:	682e      	ldr	r6, [r5, #0]
 801b364:	3c01      	subs	r4, #1
 801b366:	42b2      	cmp	r2, r6
 801b368:	b2a4      	uxth	r4, r4
 801b36a:	dd49      	ble.n	801b400 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b36c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b370:	682b      	ldr	r3, [r5, #0]
 801b372:	3301      	adds	r3, #1
 801b374:	602b      	str	r3, [r5, #0]
 801b376:	e7f2      	b.n	801b35e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801b378:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801b37c:	d01d      	beq.n	801b3ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801b37e:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801b382:	d002      	beq.n	801b38a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b384:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801b388:	e7c9      	b.n	801b31e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801b38a:	4684      	mov	ip, r0
 801b38c:	f04f 0800 	mov.w	r8, #0
 801b390:	2c00      	cmp	r4, #0
 801b392:	d0c6      	beq.n	801b322 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b394:	b947      	cbnz	r7, 801b3a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b396:	2801      	cmp	r0, #1
 801b398:	d106      	bne.n	801b3a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b39a:	8814      	ldrh	r4, [r2, #0]
 801b39c:	2c30      	cmp	r4, #48	@ 0x30
 801b39e:	bf02      	ittt	eq
 801b3a0:	3202      	addeq	r2, #2
 801b3a2:	4638      	moveq	r0, r7
 801b3a4:	f8cb 2000 	streq.w	r2, [fp]
 801b3a8:	45bc      	cmp	ip, r7
 801b3aa:	da14      	bge.n	801b3d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801b3ac:	b2bf      	uxth	r7, r7
 801b3ae:	eba7 040c 	sub.w	r4, r7, ip
 801b3b2:	46bc      	mov	ip, r7
 801b3b4:	b2a4      	uxth	r4, r4
 801b3b6:	2600      	movs	r6, #0
 801b3b8:	e7b3      	b.n	801b322 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b3ba:	4684      	mov	ip, r0
 801b3bc:	b16c      	cbz	r4, 801b3da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801b3be:	42b8      	cmp	r0, r7
 801b3c0:	dd00      	ble.n	801b3c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801b3c2:	b2b8      	uxth	r0, r7
 801b3c4:	2400      	movs	r4, #0
 801b3c6:	e003      	b.n	801b3d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801b3c8:	f04f 0c01 	mov.w	ip, #1
 801b3cc:	2400      	movs	r4, #0
 801b3ce:	4660      	mov	r0, ip
 801b3d0:	4626      	mov	r6, r4
 801b3d2:	46a0      	mov	r8, r4
 801b3d4:	e7a5      	b.n	801b322 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b3d6:	2400      	movs	r4, #0
 801b3d8:	e7ed      	b.n	801b3b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801b3da:	4626      	mov	r6, r4
 801b3dc:	46a0      	mov	r8, r4
 801b3de:	e7a0      	b.n	801b322 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b3e0:	2900      	cmp	r1, #0
 801b3e2:	d0b0      	beq.n	801b346 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b3e4:	2720      	movs	r7, #32
 801b3e6:	682e      	ldr	r6, [r5, #0]
 801b3e8:	2900      	cmp	r1, #0
 801b3ea:	d0ac      	beq.n	801b346 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b3ec:	3901      	subs	r1, #1
 801b3ee:	4296      	cmp	r6, r2
 801b3f0:	b289      	uxth	r1, r1
 801b3f2:	daa7      	bge.n	801b344 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b3f4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b3f8:	682b      	ldr	r3, [r5, #0]
 801b3fa:	3301      	adds	r3, #1
 801b3fc:	602b      	str	r3, [r5, #0]
 801b3fe:	e7f2      	b.n	801b3e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801b400:	b188      	cbz	r0, 801b426 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b402:	682b      	ldr	r3, [r5, #0]
 801b404:	3801      	subs	r0, #1
 801b406:	429a      	cmp	r2, r3
 801b408:	b280      	uxth	r0, r0
 801b40a:	dd0c      	ble.n	801b426 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b40c:	f8db 3000 	ldr.w	r3, [fp]
 801b410:	1c9c      	adds	r4, r3, #2
 801b412:	f8cb 4000 	str.w	r4, [fp]
 801b416:	881c      	ldrh	r4, [r3, #0]
 801b418:	682b      	ldr	r3, [r5, #0]
 801b41a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801b41e:	682b      	ldr	r3, [r5, #0]
 801b420:	3301      	adds	r3, #1
 801b422:	602b      	str	r3, [r5, #0]
 801b424:	e7ec      	b.n	801b400 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b426:	2620      	movs	r6, #32
 801b428:	b151      	cbz	r1, 801b440 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b42a:	6828      	ldr	r0, [r5, #0]
 801b42c:	3901      	subs	r1, #1
 801b42e:	4282      	cmp	r2, r0
 801b430:	b289      	uxth	r1, r1
 801b432:	dd05      	ble.n	801b440 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b434:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801b438:	682b      	ldr	r3, [r5, #0]
 801b43a:	3301      	adds	r3, #1
 801b43c:	602b      	str	r3, [r5, #0]
 801b43e:	e7f3      	b.n	801b428 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801b440:	b005      	add	sp, #20
 801b442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b446 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801b446:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b44a:	2400      	movs	r4, #0
 801b44c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801b450:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801b454:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801b458:	8014      	strh	r4, [r2, #0]
 801b45a:	701c      	strb	r4, [r3, #0]
 801b45c:	f888 4000 	strb.w	r4, [r8]
 801b460:	f88c 4000 	strb.w	r4, [ip]
 801b464:	f88e 4000 	strb.w	r4, [lr]
 801b468:	703c      	strb	r4, [r7, #0]
 801b46a:	6804      	ldr	r4, [r0, #0]
 801b46c:	b1a4      	cbz	r4, 801b498 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801b46e:	8824      	ldrh	r4, [r4, #0]
 801b470:	f04f 0901 	mov.w	r9, #1
 801b474:	b314      	cbz	r4, 801b4bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b476:	2c2b      	cmp	r4, #43	@ 0x2b
 801b478:	d001      	beq.n	801b47e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801b47a:	2c20      	cmp	r4, #32
 801b47c:	d110      	bne.n	801b4a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801b47e:	8014      	strh	r4, [r2, #0]
 801b480:	6804      	ldr	r4, [r0, #0]
 801b482:	b10c      	cbz	r4, 801b488 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801b484:	3402      	adds	r4, #2
 801b486:	6004      	str	r4, [r0, #0]
 801b488:	680c      	ldr	r4, [r1, #0]
 801b48a:	b10c      	cbz	r4, 801b490 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801b48c:	3401      	adds	r4, #1
 801b48e:	600c      	str	r4, [r1, #0]
 801b490:	6804      	ldr	r4, [r0, #0]
 801b492:	b17c      	cbz	r4, 801b4b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801b494:	8824      	ldrh	r4, [r4, #0]
 801b496:	e7ed      	b.n	801b474 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b498:	680c      	ldr	r4, [r1, #0]
 801b49a:	b17c      	cbz	r4, 801b4bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b49c:	7824      	ldrb	r4, [r4, #0]
 801b49e:	e7e7      	b.n	801b470 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801b4a0:	2c2d      	cmp	r4, #45	@ 0x2d
 801b4a2:	d102      	bne.n	801b4aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801b4a4:	f883 9000 	strb.w	r9, [r3]
 801b4a8:	e7ea      	b.n	801b480 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b4aa:	2c23      	cmp	r4, #35	@ 0x23
 801b4ac:	d107      	bne.n	801b4be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801b4ae:	f888 9000 	strb.w	r9, [r8]
 801b4b2:	e7e5      	b.n	801b480 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b4b4:	680c      	ldr	r4, [r1, #0]
 801b4b6:	b10c      	cbz	r4, 801b4bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b4b8:	7824      	ldrb	r4, [r4, #0]
 801b4ba:	e7db      	b.n	801b474 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b4bc:	2400      	movs	r4, #0
 801b4be:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801b4c2:	2b09      	cmp	r3, #9
 801b4c4:	d901      	bls.n	801b4ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801b4c6:	2c2a      	cmp	r4, #42	@ 0x2a
 801b4c8:	d122      	bne.n	801b510 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b4ca:	2301      	movs	r3, #1
 801b4cc:	2c30      	cmp	r4, #48	@ 0x30
 801b4ce:	f88e 3000 	strb.w	r3, [lr]
 801b4d2:	d10d      	bne.n	801b4f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b4d4:	f88c 3000 	strb.w	r3, [ip]
 801b4d8:	6803      	ldr	r3, [r0, #0]
 801b4da:	b10b      	cbz	r3, 801b4e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801b4dc:	3302      	adds	r3, #2
 801b4de:	6003      	str	r3, [r0, #0]
 801b4e0:	680b      	ldr	r3, [r1, #0]
 801b4e2:	b10b      	cbz	r3, 801b4e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801b4e4:	3301      	adds	r3, #1
 801b4e6:	600b      	str	r3, [r1, #0]
 801b4e8:	6803      	ldr	r3, [r0, #0]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d02f      	beq.n	801b54e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801b4ee:	881c      	ldrh	r4, [r3, #0]
 801b4f0:	2c2a      	cmp	r4, #42	@ 0x2a
 801b4f2:	d135      	bne.n	801b560 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b4f4:	f04f 33ff 	mov.w	r3, #4294967295
 801b4f8:	6033      	str	r3, [r6, #0]
 801b4fa:	6803      	ldr	r3, [r0, #0]
 801b4fc:	b10b      	cbz	r3, 801b502 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801b4fe:	3302      	adds	r3, #2
 801b500:	6003      	str	r3, [r0, #0]
 801b502:	680b      	ldr	r3, [r1, #0]
 801b504:	b10b      	cbz	r3, 801b50a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801b506:	3301      	adds	r3, #1
 801b508:	600b      	str	r3, [r1, #0]
 801b50a:	6803      	ldr	r3, [r0, #0]
 801b50c:	b31b      	cbz	r3, 801b556 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801b50e:	881c      	ldrh	r4, [r3, #0]
 801b510:	2c2e      	cmp	r4, #46	@ 0x2e
 801b512:	d11a      	bne.n	801b54a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b514:	2301      	movs	r3, #1
 801b516:	703b      	strb	r3, [r7, #0]
 801b518:	6803      	ldr	r3, [r0, #0]
 801b51a:	b10b      	cbz	r3, 801b520 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801b51c:	3302      	adds	r3, #2
 801b51e:	6003      	str	r3, [r0, #0]
 801b520:	680b      	ldr	r3, [r1, #0]
 801b522:	b10b      	cbz	r3, 801b528 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801b524:	3301      	adds	r3, #1
 801b526:	600b      	str	r3, [r1, #0]
 801b528:	6803      	ldr	r3, [r0, #0]
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d036      	beq.n	801b59c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801b52e:	881b      	ldrh	r3, [r3, #0]
 801b530:	2b2a      	cmp	r3, #42	@ 0x2a
 801b532:	d137      	bne.n	801b5a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b534:	f04f 33ff 	mov.w	r3, #4294967295
 801b538:	602b      	str	r3, [r5, #0]
 801b53a:	6803      	ldr	r3, [r0, #0]
 801b53c:	b10b      	cbz	r3, 801b542 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801b53e:	3302      	adds	r3, #2
 801b540:	6003      	str	r3, [r0, #0]
 801b542:	680b      	ldr	r3, [r1, #0]
 801b544:	b10b      	cbz	r3, 801b54a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b546:	3301      	adds	r3, #1
 801b548:	600b      	str	r3, [r1, #0]
 801b54a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b54e:	680c      	ldr	r4, [r1, #0]
 801b550:	b134      	cbz	r4, 801b560 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b552:	7824      	ldrb	r4, [r4, #0]
 801b554:	e7cc      	b.n	801b4f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b556:	680b      	ldr	r3, [r1, #0]
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d0f6      	beq.n	801b54a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b55c:	781c      	ldrb	r4, [r3, #0]
 801b55e:	e7d7      	b.n	801b510 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b560:	2300      	movs	r3, #0
 801b562:	220a      	movs	r2, #10
 801b564:	6033      	str	r3, [r6, #0]
 801b566:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801b56a:	fa1f f38c 	uxth.w	r3, ip
 801b56e:	2b09      	cmp	r3, #9
 801b570:	d8ce      	bhi.n	801b510 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b572:	6833      	ldr	r3, [r6, #0]
 801b574:	fb02 c303 	mla	r3, r2, r3, ip
 801b578:	6033      	str	r3, [r6, #0]
 801b57a:	6803      	ldr	r3, [r0, #0]
 801b57c:	b10b      	cbz	r3, 801b582 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801b57e:	3302      	adds	r3, #2
 801b580:	6003      	str	r3, [r0, #0]
 801b582:	680b      	ldr	r3, [r1, #0]
 801b584:	b10b      	cbz	r3, 801b58a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801b586:	3301      	adds	r3, #1
 801b588:	600b      	str	r3, [r1, #0]
 801b58a:	6803      	ldr	r3, [r0, #0]
 801b58c:	b10b      	cbz	r3, 801b592 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801b58e:	881c      	ldrh	r4, [r3, #0]
 801b590:	e7e9      	b.n	801b566 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b592:	680c      	ldr	r4, [r1, #0]
 801b594:	2c00      	cmp	r4, #0
 801b596:	d0e6      	beq.n	801b566 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b598:	7824      	ldrb	r4, [r4, #0]
 801b59a:	e7e4      	b.n	801b566 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b59c:	680b      	ldr	r3, [r1, #0]
 801b59e:	b10b      	cbz	r3, 801b5a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b5a0:	781b      	ldrb	r3, [r3, #0]
 801b5a2:	e7c5      	b.n	801b530 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801b5a4:	2200      	movs	r2, #0
 801b5a6:	240a      	movs	r4, #10
 801b5a8:	602a      	str	r2, [r5, #0]
 801b5aa:	3b30      	subs	r3, #48	@ 0x30
 801b5ac:	682a      	ldr	r2, [r5, #0]
 801b5ae:	b29e      	uxth	r6, r3
 801b5b0:	2e09      	cmp	r6, #9
 801b5b2:	d813      	bhi.n	801b5dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801b5b4:	fb04 3302 	mla	r3, r4, r2, r3
 801b5b8:	602b      	str	r3, [r5, #0]
 801b5ba:	6803      	ldr	r3, [r0, #0]
 801b5bc:	b10b      	cbz	r3, 801b5c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801b5be:	3302      	adds	r3, #2
 801b5c0:	6003      	str	r3, [r0, #0]
 801b5c2:	680b      	ldr	r3, [r1, #0]
 801b5c4:	b10b      	cbz	r3, 801b5ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801b5c6:	3301      	adds	r3, #1
 801b5c8:	600b      	str	r3, [r1, #0]
 801b5ca:	6803      	ldr	r3, [r0, #0]
 801b5cc:	b10b      	cbz	r3, 801b5d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801b5ce:	881b      	ldrh	r3, [r3, #0]
 801b5d0:	e7eb      	b.n	801b5aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b5d2:	680b      	ldr	r3, [r1, #0]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d0e8      	beq.n	801b5aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b5d8:	781b      	ldrb	r3, [r3, #0]
 801b5da:	e7e6      	b.n	801b5aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b5dc:	2a06      	cmp	r2, #6
 801b5de:	bfa8      	it	ge
 801b5e0:	2206      	movge	r2, #6
 801b5e2:	602a      	str	r2, [r5, #0]
 801b5e4:	e7b1      	b.n	801b54a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801b5e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801b5e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5ea:	b0a3      	sub	sp, #140	@ 0x8c
 801b5ec:	2600      	movs	r6, #0
 801b5ee:	4607      	mov	r7, r0
 801b5f0:	4688      	mov	r8, r1
 801b5f2:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801b5f6:	4631      	mov	r1, r6
 801b5f8:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801b5fa:	4648      	mov	r0, r9
 801b5fc:	960d      	str	r6, [sp, #52]	@ 0x34
 801b5fe:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801b602:	2242      	movs	r2, #66	@ 0x42
 801b604:	f00f f9ec 	bl	802a9e0 <memset>
 801b608:	b15f      	cbz	r7, 801b622 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801b60a:	f108 3aff 	add.w	sl, r8, #4294967295
 801b60e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b610:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b612:	b152      	cbz	r2, 801b62a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801b614:	8812      	ldrh	r2, [r2, #0]
 801b616:	b10a      	cbz	r2, 801b61c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b618:	459a      	cmp	sl, r3
 801b61a:	dc2e      	bgt.n	801b67a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801b61c:	2200      	movs	r2, #0
 801b61e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b622:	4638      	mov	r0, r7
 801b624:	b023      	add	sp, #140	@ 0x8c
 801b626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b62a:	9a08      	ldr	r2, [sp, #32]
 801b62c:	2a00      	cmp	r2, #0
 801b62e:	d0f5      	beq.n	801b61c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b630:	7812      	ldrb	r2, [r2, #0]
 801b632:	e7f0      	b.n	801b616 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801b634:	2d00      	cmp	r5, #0
 801b636:	d0ea      	beq.n	801b60e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b638:	782a      	ldrb	r2, [r5, #0]
 801b63a:	b142      	cbz	r2, 801b64e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801b63c:	2a25      	cmp	r2, #37	@ 0x25
 801b63e:	d001      	beq.n	801b644 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801b640:	459a      	cmp	sl, r3
 801b642:	dc08      	bgt.n	801b656 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801b644:	f1bb 0f00 	cmp.w	fp, #0
 801b648:	d121      	bne.n	801b68e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801b64a:	2d00      	cmp	r5, #0
 801b64c:	d0df      	beq.n	801b60e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b64e:	782a      	ldrb	r2, [r5, #0]
 801b650:	f04f 0b00 	mov.w	fp, #0
 801b654:	e01d      	b.n	801b692 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801b656:	f1bb 0f00 	cmp.w	fp, #0
 801b65a:	d077      	beq.n	801b74c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801b65c:	f8bb 2000 	ldrh.w	r2, [fp]
 801b660:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b664:	f1bb 0f00 	cmp.w	fp, #0
 801b668:	d002      	beq.n	801b670 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801b66a:	f10b 0202 	add.w	r2, fp, #2
 801b66e:	9209      	str	r2, [sp, #36]	@ 0x24
 801b670:	b10d      	cbz	r5, 801b676 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801b672:	3501      	adds	r5, #1
 801b674:	9508      	str	r5, [sp, #32]
 801b676:	3301      	adds	r3, #1
 801b678:	930d      	str	r3, [sp, #52]	@ 0x34
 801b67a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b67c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801b680:	f1bb 0f00 	cmp.w	fp, #0
 801b684:	d0d6      	beq.n	801b634 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801b686:	f8bb 2000 	ldrh.w	r2, [fp]
 801b68a:	2a00      	cmp	r2, #0
 801b68c:	d1d6      	bne.n	801b63c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801b68e:	f8bb 2000 	ldrh.w	r2, [fp]
 801b692:	2a00      	cmp	r2, #0
 801b694:	d0bb      	beq.n	801b60e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b696:	459a      	cmp	sl, r3
 801b698:	ddb9      	ble.n	801b60e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b69a:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801b69e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801b6a2:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801b6a6:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801b6aa:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801b6ae:	960e      	str	r6, [sp, #56]	@ 0x38
 801b6b0:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801b6b4:	960f      	str	r6, [sp, #60]	@ 0x3c
 801b6b6:	f1bb 0f00 	cmp.w	fp, #0
 801b6ba:	d002      	beq.n	801b6c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801b6bc:	f10b 0302 	add.w	r3, fp, #2
 801b6c0:	9309      	str	r3, [sp, #36]	@ 0x24
 801b6c2:	b10d      	cbz	r5, 801b6c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801b6c4:	1c6b      	adds	r3, r5, #1
 801b6c6:	9308      	str	r3, [sp, #32]
 801b6c8:	ab0f      	add	r3, sp, #60	@ 0x3c
 801b6ca:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801b6ce:	a908      	add	r1, sp, #32
 801b6d0:	a809      	add	r0, sp, #36	@ 0x24
 801b6d2:	9305      	str	r3, [sp, #20]
 801b6d4:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801b6d8:	9304      	str	r3, [sp, #16]
 801b6da:	ab0e      	add	r3, sp, #56	@ 0x38
 801b6dc:	9303      	str	r3, [sp, #12]
 801b6de:	ab0c      	add	r3, sp, #48	@ 0x30
 801b6e0:	9302      	str	r3, [sp, #8]
 801b6e2:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801b6e6:	9301      	str	r3, [sp, #4]
 801b6e8:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801b6ec:	9300      	str	r3, [sp, #0]
 801b6ee:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801b6f2:	f7ff fea8 	bl	801b446 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801b6f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	bfbf      	itttt	lt
 801b6fc:	6823      	ldrlt	r3, [r4, #0]
 801b6fe:	3404      	addlt	r4, #4
 801b700:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b704:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801b706:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b708:	2b00      	cmp	r3, #0
 801b70a:	bfbe      	ittt	lt
 801b70c:	6823      	ldrlt	r3, [r4, #0]
 801b70e:	3404      	addlt	r4, #4
 801b710:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b714:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801b718:	bfb8      	it	lt
 801b71a:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801b71c:	b1d9      	cbz	r1, 801b756 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801b71e:	880b      	ldrh	r3, [r1, #0]
 801b720:	2b69      	cmp	r3, #105	@ 0x69
 801b722:	d01f      	beq.n	801b764 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b724:	d82f      	bhi.n	801b786 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801b726:	2b58      	cmp	r3, #88	@ 0x58
 801b728:	d01c      	beq.n	801b764 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b72a:	d818      	bhi.n	801b75e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801b72c:	2b25      	cmp	r3, #37	@ 0x25
 801b72e:	d034      	beq.n	801b79a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801b730:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b732:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801b736:	f1bb 0f00 	cmp.w	fp, #0
 801b73a:	f000 80b7 	beq.w	801b8ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801b73e:	f8bb 5000 	ldrh.w	r5, [fp]
 801b742:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801b746:	3301      	adds	r3, #1
 801b748:	930d      	str	r3, [sp, #52]	@ 0x34
 801b74a:	e029      	b.n	801b7a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801b74c:	b10d      	cbz	r5, 801b752 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801b74e:	782a      	ldrb	r2, [r5, #0]
 801b750:	e786      	b.n	801b660 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b752:	462a      	mov	r2, r5
 801b754:	e784      	b.n	801b660 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b756:	2a00      	cmp	r2, #0
 801b758:	d0ea      	beq.n	801b730 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b75a:	7813      	ldrb	r3, [r2, #0]
 801b75c:	e7e0      	b.n	801b720 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801b75e:	3b63      	subs	r3, #99	@ 0x63
 801b760:	2b01      	cmp	r3, #1
 801b762:	d8e5      	bhi.n	801b730 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b764:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801b768:	b329      	cbz	r1, 801b7b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801b76a:	880b      	ldrh	r3, [r1, #0]
 801b76c:	2b69      	cmp	r3, #105	@ 0x69
 801b76e:	d063      	beq.n	801b838 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801b770:	d825      	bhi.n	801b7be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801b772:	2b63      	cmp	r3, #99	@ 0x63
 801b774:	d038      	beq.n	801b7e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801b776:	2b64      	cmp	r3, #100	@ 0x64
 801b778:	d05e      	beq.n	801b838 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801b77a:	2b58      	cmp	r3, #88	@ 0x58
 801b77c:	d07a      	beq.n	801b874 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801b77e:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801b782:	4625      	mov	r5, r4
 801b784:	e036      	b.n	801b7f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b786:	2b73      	cmp	r3, #115	@ 0x73
 801b788:	d0ec      	beq.n	801b764 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b78a:	d802      	bhi.n	801b792 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801b78c:	2b6f      	cmp	r3, #111	@ 0x6f
 801b78e:	d1cf      	bne.n	801b730 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b790:	e7e8      	b.n	801b764 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b792:	2b75      	cmp	r3, #117	@ 0x75
 801b794:	d0e6      	beq.n	801b764 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b796:	2b78      	cmp	r3, #120	@ 0x78
 801b798:	e7f9      	b.n	801b78e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801b79a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b79c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801b7a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b7a2:	b10b      	cbz	r3, 801b7a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801b7a4:	3302      	adds	r3, #2
 801b7a6:	9309      	str	r3, [sp, #36]	@ 0x24
 801b7a8:	9b08      	ldr	r3, [sp, #32]
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	f43f af2f 	beq.w	801b60e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b7b0:	3301      	adds	r3, #1
 801b7b2:	9308      	str	r3, [sp, #32]
 801b7b4:	e72b      	b.n	801b60e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b7b6:	2a00      	cmp	r2, #0
 801b7b8:	d0e1      	beq.n	801b77e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b7ba:	7813      	ldrb	r3, [r2, #0]
 801b7bc:	e7d6      	b.n	801b76c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801b7be:	2b73      	cmp	r3, #115	@ 0x73
 801b7c0:	d036      	beq.n	801b830 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801b7c2:	d807      	bhi.n	801b7d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801b7c4:	2b6f      	cmp	r3, #111	@ 0x6f
 801b7c6:	d1da      	bne.n	801b77e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b7c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b7ca:	1d25      	adds	r5, r4, #4
 801b7cc:	2308      	movs	r3, #8
 801b7ce:	eba8 0202 	sub.w	r2, r8, r2
 801b7d2:	e049      	b.n	801b868 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801b7d4:	2b75      	cmp	r3, #117	@ 0x75
 801b7d6:	d042      	beq.n	801b85e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801b7d8:	2b78      	cmp	r3, #120	@ 0x78
 801b7da:	d1d0      	bne.n	801b77e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b7dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b7de:	1d25      	adds	r5, r4, #4
 801b7e0:	2310      	movs	r3, #16
 801b7e2:	eba8 0202 	sub.w	r2, r8, r2
 801b7e6:	e03f      	b.n	801b868 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801b7e8:	6823      	ldr	r3, [r4, #0]
 801b7ea:	1d25      	adds	r5, r4, #4
 801b7ec:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801b7f0:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801b7f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b7f6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d051      	beq.n	801b8a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801b7fe:	881a      	ldrh	r2, [r3, #0]
 801b800:	a80d      	add	r0, sp, #52	@ 0x34
 801b802:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801b806:	462c      	mov	r4, r5
 801b808:	9005      	str	r0, [sp, #20]
 801b80a:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801b80e:	9004      	str	r0, [sp, #16]
 801b810:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801b812:	9003      	str	r0, [sp, #12]
 801b814:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801b818:	9002      	str	r0, [sp, #8]
 801b81a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801b81c:	9001      	str	r0, [sp, #4]
 801b81e:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801b822:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801b826:	9000      	str	r0, [sp, #0]
 801b828:	a810      	add	r0, sp, #64	@ 0x40
 801b82a:	f7ff fd49 	bl	801b2c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801b82e:	e7b7      	b.n	801b7a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801b830:	1d25      	adds	r5, r4, #4
 801b832:	6823      	ldr	r3, [r4, #0]
 801b834:	9310      	str	r3, [sp, #64]	@ 0x40
 801b836:	e7dd      	b.n	801b7f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b838:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b83a:	230a      	movs	r3, #10
 801b83c:	4649      	mov	r1, r9
 801b83e:	6820      	ldr	r0, [r4, #0]
 801b840:	eba8 0202 	sub.w	r2, r8, r2
 801b844:	1d25      	adds	r5, r4, #4
 801b846:	b292      	uxth	r2, r2
 801b848:	f7ff fcf0 	bl	801b22c <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801b84c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801b850:	2b2d      	cmp	r3, #45	@ 0x2d
 801b852:	d1cf      	bne.n	801b7f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b854:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801b858:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b85a:	3302      	adds	r3, #2
 801b85c:	e7ea      	b.n	801b834 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801b85e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b860:	1d25      	adds	r5, r4, #4
 801b862:	230a      	movs	r3, #10
 801b864:	eba8 0202 	sub.w	r2, r8, r2
 801b868:	b292      	uxth	r2, r2
 801b86a:	4649      	mov	r1, r9
 801b86c:	6820      	ldr	r0, [r4, #0]
 801b86e:	f7ff fd09 	bl	801b284 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801b872:	e7bf      	b.n	801b7f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b874:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b876:	2310      	movs	r3, #16
 801b878:	4649      	mov	r1, r9
 801b87a:	6820      	ldr	r0, [r4, #0]
 801b87c:	eba8 0202 	sub.w	r2, r8, r2
 801b880:	1d25      	adds	r5, r4, #4
 801b882:	b292      	uxth	r2, r2
 801b884:	f7ff fcfe 	bl	801b284 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801b888:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801b88c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b890:	2b00      	cmp	r3, #0
 801b892:	d0af      	beq.n	801b7f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b894:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801b898:	2919      	cmp	r1, #25
 801b89a:	d8f7      	bhi.n	801b88c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801b89c:	3b20      	subs	r3, #32
 801b89e:	8013      	strh	r3, [r2, #0]
 801b8a0:	e7f4      	b.n	801b88c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801b8a2:	9a08      	ldr	r2, [sp, #32]
 801b8a4:	2a00      	cmp	r2, #0
 801b8a6:	d0ab      	beq.n	801b800 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801b8a8:	7812      	ldrb	r2, [r2, #0]
 801b8aa:	e7a9      	b.n	801b800 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801b8ac:	2d00      	cmp	r5, #0
 801b8ae:	f43f af48 	beq.w	801b742 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801b8b2:	782d      	ldrb	r5, [r5, #0]
 801b8b4:	e745      	b.n	801b742 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801b8b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801b8b6:	b507      	push	{r0, r1, r2, lr}
 801b8b8:	9300      	str	r3, [sp, #0]
 801b8ba:	4613      	mov	r3, r2
 801b8bc:	2200      	movs	r2, #0
 801b8be:	f7ff fe92 	bl	801b5e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801b8c2:	b003      	add	sp, #12
 801b8c4:	f85d fb04 	ldr.w	pc, [sp], #4

0801b8c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801b8c8:	b40c      	push	{r2, r3}
 801b8ca:	b507      	push	{r0, r1, r2, lr}
 801b8cc:	ab04      	add	r3, sp, #16
 801b8ce:	f853 2b04 	ldr.w	r2, [r3], #4
 801b8d2:	9301      	str	r3, [sp, #4]
 801b8d4:	f7ff ffef 	bl	801b8b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801b8d8:	b003      	add	sp, #12
 801b8da:	f85d eb04 	ldr.w	lr, [sp], #4
 801b8de:	b002      	add	sp, #8
 801b8e0:	4770      	bx	lr
	...

0801b8e4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b8e4:	4b01      	ldr	r3, [pc, #4]	@ (801b8ec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b8e6:	6018      	str	r0, [r3, #0]
 801b8e8:	4770      	bx	lr
 801b8ea:	bf00      	nop
 801b8ec:	20027a40 	.word	0x20027a40

0801b8f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801b8f0:	4b06      	ldr	r3, [pc, #24]	@ (801b90c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801b8f2:	881a      	ldrh	r2, [r3, #0]
 801b8f4:	4282      	cmp	r2, r0
 801b8f6:	d807      	bhi.n	801b908 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801b8f8:	4b05      	ldr	r3, [pc, #20]	@ (801b910 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801b8fa:	881b      	ldrh	r3, [r3, #0]
 801b8fc:	4413      	add	r3, r2
 801b8fe:	4298      	cmp	r0, r3
 801b900:	bfac      	ite	ge
 801b902:	2000      	movge	r0, #0
 801b904:	2001      	movlt	r0, #1
 801b906:	4770      	bx	lr
 801b908:	2000      	movs	r0, #0
 801b90a:	4770      	bx	lr
 801b90c:	20027a60 	.word	0x20027a60
 801b910:	20027a64 	.word	0x20027a64

0801b914 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b914:	b508      	push	{r3, lr}
 801b916:	4601      	mov	r1, r0
 801b918:	f7ff ffea 	bl	801b8f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b91c:	b118      	cbz	r0, 801b926 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801b91e:	4b02      	ldr	r3, [pc, #8]	@ (801b928 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801b926:	bd08      	pop	{r3, pc}
 801b928:	20027a44 	.word	0x20027a44

0801b92c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b92c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b92e:	4c24      	ldr	r4, [pc, #144]	@ (801b9c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801b930:	6823      	ldr	r3, [r4, #0]
 801b932:	2b00      	cmp	r3, #0
 801b934:	d042      	beq.n	801b9bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b936:	4a23      	ldr	r2, [pc, #140]	@ (801b9c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801b938:	4d23      	ldr	r5, [pc, #140]	@ (801b9c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801b93a:	8811      	ldrh	r1, [r2, #0]
 801b93c:	f8b5 c000 	ldrh.w	ip, [r5]
 801b940:	4822      	ldr	r0, [pc, #136]	@ (801b9cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b942:	4461      	add	r1, ip
 801b944:	1c4a      	adds	r2, r1, #1
 801b946:	008f      	lsls	r7, r1, #2
 801b948:	f022 0201 	bic.w	r2, r2, #1
 801b94c:	19de      	adds	r6, r3, r7
 801b94e:	0412      	lsls	r2, r2, #16
 801b950:	6006      	str	r6, [r0, #0]
 801b952:	4e1f      	ldr	r6, [pc, #124]	@ (801b9d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b954:	0c12      	lsrs	r2, r2, #16
 801b956:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801b95a:	19da      	adds	r2, r3, r7
 801b95c:	6032      	str	r2, [r6, #0]
 801b95e:	220e      	movs	r2, #14
 801b960:	fb02 f20c 	mul.w	r2, r2, ip
 801b964:	3203      	adds	r2, #3
 801b966:	f022 0203 	bic.w	r2, r2, #3
 801b96a:	443a      	add	r2, r7
 801b96c:	4f19      	ldr	r7, [pc, #100]	@ (801b9d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b96e:	4413      	add	r3, r2
 801b970:	603b      	str	r3, [r7, #0]
 801b972:	2300      	movs	r3, #0
 801b974:	4f18      	ldr	r7, [pc, #96]	@ (801b9d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b976:	469c      	mov	ip, r3
 801b978:	803b      	strh	r3, [r7, #0]
 801b97a:	4f18      	ldr	r7, [pc, #96]	@ (801b9dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b97c:	683f      	ldr	r7, [r7, #0]
 801b97e:	1aba      	subs	r2, r7, r2
 801b980:	4f17      	ldr	r7, [pc, #92]	@ (801b9e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b982:	603a      	str	r2, [r7, #0]
 801b984:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801b988:	4a16      	ldr	r2, [pc, #88]	@ (801b9e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b98a:	8013      	strh	r3, [r2, #0]
 801b98c:	428b      	cmp	r3, r1
 801b98e:	d10d      	bne.n	801b9ac <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801b990:	882d      	ldrh	r5, [r5, #0]
 801b992:	2300      	movs	r3, #0
 801b994:	6830      	ldr	r0, [r6, #0]
 801b996:	240e      	movs	r4, #14
 801b998:	429d      	cmp	r5, r3
 801b99a:	d90f      	bls.n	801b9bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b99c:	fb04 0203 	mla	r2, r4, r3, r0
 801b9a0:	3301      	adds	r3, #1
 801b9a2:	7b11      	ldrb	r1, [r2, #12]
 801b9a4:	f36f 1145 	bfc	r1, #5, #1
 801b9a8:	7311      	strb	r1, [r2, #12]
 801b9aa:	e7f5      	b.n	801b998 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801b9ac:	6822      	ldr	r2, [r4, #0]
 801b9ae:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b9b2:	6802      	ldr	r2, [r0, #0]
 801b9b4:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801b9b8:	3301      	adds	r3, #1
 801b9ba:	e7e7      	b.n	801b98c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801b9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b9be:	bf00      	nop
 801b9c0:	20027a44 	.word	0x20027a44
 801b9c4:	20027a60 	.word	0x20027a60
 801b9c8:	20027a64 	.word	0x20027a64
 801b9cc:	20027a58 	.word	0x20027a58
 801b9d0:	20027a48 	.word	0x20027a48
 801b9d4:	20027a50 	.word	0x20027a50
 801b9d8:	20027a62 	.word	0x20027a62
 801b9dc:	20027a4c 	.word	0x20027a4c
 801b9e0:	20027a5c 	.word	0x20027a5c
 801b9e4:	20027a54 	.word	0x20027a54

0801b9e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b9e8:	4b06      	ldr	r3, [pc, #24]	@ (801ba04 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801b9ea:	681b      	ldr	r3, [r3, #0]
 801b9ec:	b943      	cbnz	r3, 801ba00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b9ee:	b139      	cbz	r1, 801ba00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b9f0:	4b05      	ldr	r3, [pc, #20]	@ (801ba08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801b9f2:	801a      	strh	r2, [r3, #0]
 801b9f4:	4b05      	ldr	r3, [pc, #20]	@ (801ba0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801b9f6:	6019      	str	r1, [r3, #0]
 801b9f8:	4b05      	ldr	r3, [pc, #20]	@ (801ba10 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801b9fa:	6018      	str	r0, [r3, #0]
 801b9fc:	f7ff bf96 	b.w	801b92c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801ba00:	4770      	bx	lr
 801ba02:	bf00      	nop
 801ba04:	20027a50 	.word	0x20027a50
 801ba08:	20027a64 	.word	0x20027a64
 801ba0c:	20027a4c 	.word	0x20027a4c
 801ba10:	20027a44 	.word	0x20027a44

0801ba14 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ba14:	b470      	push	{r4, r5, r6}
 801ba16:	4c07      	ldr	r4, [pc, #28]	@ (801ba34 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801ba18:	4605      	mov	r5, r0
 801ba1a:	4610      	mov	r0, r2
 801ba1c:	9a03      	ldr	r2, [sp, #12]
 801ba1e:	6826      	ldr	r6, [r4, #0]
 801ba20:	b936      	cbnz	r6, 801ba30 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801ba22:	6025      	str	r5, [r4, #0]
 801ba24:	4c04      	ldr	r4, [pc, #16]	@ (801ba38 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801ba26:	8021      	strh	r1, [r4, #0]
 801ba28:	4619      	mov	r1, r3
 801ba2a:	bc70      	pop	{r4, r5, r6}
 801ba2c:	f7ff bfdc 	b.w	801b9e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801ba30:	bc70      	pop	{r4, r5, r6}
 801ba32:	4770      	bx	lr
 801ba34:	20027a68 	.word	0x20027a68
 801ba38:	20027a60 	.word	0x20027a60

0801ba3c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ba3c:	4a12      	ldr	r2, [pc, #72]	@ (801ba88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801ba3e:	8803      	ldrh	r3, [r0, #0]
 801ba40:	8812      	ldrh	r2, [r2, #0]
 801ba42:	4293      	cmp	r3, r2
 801ba44:	d207      	bcs.n	801ba56 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801ba46:	4a11      	ldr	r2, [pc, #68]	@ (801ba8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801ba48:	2114      	movs	r1, #20
 801ba4a:	6812      	ldr	r2, [r2, #0]
 801ba4c:	fb01 2303 	mla	r3, r1, r3, r2
 801ba50:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801ba54:	4770      	bx	lr
 801ba56:	490e      	ldr	r1, [pc, #56]	@ (801ba90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ba58:	8809      	ldrh	r1, [r1, #0]
 801ba5a:	4411      	add	r1, r2
 801ba5c:	428b      	cmp	r3, r1
 801ba5e:	da04      	bge.n	801ba6a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801ba60:	1a9b      	subs	r3, r3, r2
 801ba62:	4a0c      	ldr	r2, [pc, #48]	@ (801ba94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ba64:	210e      	movs	r1, #14
 801ba66:	6812      	ldr	r2, [r2, #0]
 801ba68:	e7f0      	b.n	801ba4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801ba6a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ba6e:	4293      	cmp	r3, r2
 801ba70:	d108      	bne.n	801ba84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801ba72:	4b09      	ldr	r3, [pc, #36]	@ (801ba98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ba74:	781b      	ldrb	r3, [r3, #0]
 801ba76:	b91b      	cbnz	r3, 801ba80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801ba78:	4b08      	ldr	r3, [pc, #32]	@ (801ba9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ba7a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801ba7e:	4770      	bx	lr
 801ba80:	4b07      	ldr	r3, [pc, #28]	@ (801baa0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ba82:	e7fa      	b.n	801ba7a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801ba84:	2000      	movs	r0, #0
 801ba86:	4770      	bx	lr
 801ba88:	20027a60 	.word	0x20027a60
 801ba8c:	20027a68 	.word	0x20027a68
 801ba90:	20027a64 	.word	0x20027a64
 801ba94:	20027a48 	.word	0x20027a48
 801ba98:	200279d0 	.word	0x200279d0
 801ba9c:	200279d2 	.word	0x200279d2
 801baa0:	200279d4 	.word	0x200279d4

0801baa4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801baa4:	4a12      	ldr	r2, [pc, #72]	@ (801baf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801baa6:	8803      	ldrh	r3, [r0, #0]
 801baa8:	8812      	ldrh	r2, [r2, #0]
 801baaa:	4293      	cmp	r3, r2
 801baac:	d207      	bcs.n	801babe <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801baae:	4a11      	ldr	r2, [pc, #68]	@ (801baf4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801bab0:	2114      	movs	r1, #20
 801bab2:	6812      	ldr	r2, [r2, #0]
 801bab4:	fb01 2303 	mla	r3, r1, r3, r2
 801bab8:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801babc:	4770      	bx	lr
 801babe:	490e      	ldr	r1, [pc, #56]	@ (801baf8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801bac0:	8809      	ldrh	r1, [r1, #0]
 801bac2:	4411      	add	r1, r2
 801bac4:	428b      	cmp	r3, r1
 801bac6:	da04      	bge.n	801bad2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801bac8:	1a9b      	subs	r3, r3, r2
 801baca:	4a0c      	ldr	r2, [pc, #48]	@ (801bafc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801bacc:	210e      	movs	r1, #14
 801bace:	6812      	ldr	r2, [r2, #0]
 801bad0:	e7f0      	b.n	801bab4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801bad2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801bad6:	4293      	cmp	r3, r2
 801bad8:	d108      	bne.n	801baec <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801bada:	4b09      	ldr	r3, [pc, #36]	@ (801bb00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801badc:	781b      	ldrb	r3, [r3, #0]
 801bade:	b91b      	cbnz	r3, 801bae8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801bae0:	4b08      	ldr	r3, [pc, #32]	@ (801bb04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801bae2:	f9b3 0000 	ldrsh.w	r0, [r3]
 801bae6:	4770      	bx	lr
 801bae8:	4b07      	ldr	r3, [pc, #28]	@ (801bb08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801baea:	e7fa      	b.n	801bae2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801baec:	2000      	movs	r0, #0
 801baee:	4770      	bx	lr
 801baf0:	20027a60 	.word	0x20027a60
 801baf4:	20027a68 	.word	0x20027a68
 801baf8:	20027a64 	.word	0x20027a64
 801bafc:	20027a48 	.word	0x20027a48
 801bb00:	200279d0 	.word	0x200279d0
 801bb04:	200279d4 	.word	0x200279d4
 801bb08:	200279d2 	.word	0x200279d2

0801bb0c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801bb0c:	4a22      	ldr	r2, [pc, #136]	@ (801bb98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801bb0e:	b530      	push	{r4, r5, lr}
 801bb10:	880b      	ldrh	r3, [r1, #0]
 801bb12:	8812      	ldrh	r2, [r2, #0]
 801bb14:	4293      	cmp	r3, r2
 801bb16:	d213      	bcs.n	801bb40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801bb18:	4a20      	ldr	r2, [pc, #128]	@ (801bb9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801bb1a:	2114      	movs	r1, #20
 801bb1c:	6812      	ldr	r2, [r2, #0]
 801bb1e:	fb01 2303 	mla	r3, r1, r3, r2
 801bb22:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801bb26:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801bb2a:	8a1a      	ldrh	r2, [r3, #16]
 801bb2c:	8a5b      	ldrh	r3, [r3, #18]
 801bb2e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bb32:	8004      	strh	r4, [r0, #0]
 801bb34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bb38:	8041      	strh	r1, [r0, #2]
 801bb3a:	8082      	strh	r2, [r0, #4]
 801bb3c:	80c3      	strh	r3, [r0, #6]
 801bb3e:	e024      	b.n	801bb8a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801bb40:	4917      	ldr	r1, [pc, #92]	@ (801bba0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801bb42:	8809      	ldrh	r1, [r1, #0]
 801bb44:	4411      	add	r1, r2
 801bb46:	428b      	cmp	r3, r1
 801bb48:	da10      	bge.n	801bb6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801bb4a:	1a9b      	subs	r3, r3, r2
 801bb4c:	220e      	movs	r2, #14
 801bb4e:	4353      	muls	r3, r2
 801bb50:	4a14      	ldr	r2, [pc, #80]	@ (801bba4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801bb52:	6811      	ldr	r1, [r2, #0]
 801bb54:	18ca      	adds	r2, r1, r3
 801bb56:	5ecd      	ldrsh	r5, [r1, r3]
 801bb58:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801bb5c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801bb60:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801bb64:	8005      	strh	r5, [r0, #0]
 801bb66:	8044      	strh	r4, [r0, #2]
 801bb68:	8081      	strh	r1, [r0, #4]
 801bb6a:	e7e7      	b.n	801bb3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801bb6c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801bb70:	4293      	cmp	r3, r2
 801bb72:	d10b      	bne.n	801bb8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801bb74:	4b0c      	ldr	r3, [pc, #48]	@ (801bba8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801bb76:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bb7a:	4b0c      	ldr	r3, [pc, #48]	@ (801bbac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801bb7c:	8081      	strh	r1, [r0, #4]
 801bb7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bb82:	2300      	movs	r3, #0
 801bb84:	80c2      	strh	r2, [r0, #6]
 801bb86:	8003      	strh	r3, [r0, #0]
 801bb88:	8043      	strh	r3, [r0, #2]
 801bb8a:	bd30      	pop	{r4, r5, pc}
 801bb8c:	2300      	movs	r3, #0
 801bb8e:	8003      	strh	r3, [r0, #0]
 801bb90:	8043      	strh	r3, [r0, #2]
 801bb92:	8083      	strh	r3, [r0, #4]
 801bb94:	e7d2      	b.n	801bb3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801bb96:	bf00      	nop
 801bb98:	20027a60 	.word	0x20027a60
 801bb9c:	20027a68 	.word	0x20027a68
 801bba0:	20027a64 	.word	0x20027a64
 801bba4:	20027a48 	.word	0x20027a48
 801bba8:	200279cc 	.word	0x200279cc
 801bbac:	200279ce 	.word	0x200279ce

0801bbb0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801bbb0:	4a17      	ldr	r2, [pc, #92]	@ (801bc10 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801bbb2:	8803      	ldrh	r3, [r0, #0]
 801bbb4:	8812      	ldrh	r2, [r2, #0]
 801bbb6:	4293      	cmp	r3, r2
 801bbb8:	d213      	bcs.n	801bbe2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801bbba:	4a16      	ldr	r2, [pc, #88]	@ (801bc14 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801bbbc:	2114      	movs	r1, #20
 801bbbe:	6812      	ldr	r2, [r2, #0]
 801bbc0:	fb01 2303 	mla	r3, r1, r3, r2
 801bbc4:	8a1a      	ldrh	r2, [r3, #16]
 801bbc6:	8919      	ldrh	r1, [r3, #8]
 801bbc8:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bbcc:	428a      	cmp	r2, r1
 801bbce:	db1d      	blt.n	801bc0c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801bbd0:	8a58      	ldrh	r0, [r3, #18]
 801bbd2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801bbd6:	895b      	ldrh	r3, [r3, #10]
 801bbd8:	4298      	cmp	r0, r3
 801bbda:	bfac      	ite	ge
 801bbdc:	2000      	movge	r0, #0
 801bbde:	2001      	movlt	r0, #1
 801bbe0:	4770      	bx	lr
 801bbe2:	490d      	ldr	r1, [pc, #52]	@ (801bc18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801bbe4:	8809      	ldrh	r1, [r1, #0]
 801bbe6:	4411      	add	r1, r2
 801bbe8:	428b      	cmp	r3, r1
 801bbea:	da0d      	bge.n	801bc08 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801bbec:	1a9b      	subs	r3, r3, r2
 801bbee:	4a0b      	ldr	r2, [pc, #44]	@ (801bc1c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801bbf0:	210e      	movs	r1, #14
 801bbf2:	6812      	ldr	r2, [r2, #0]
 801bbf4:	fb01 2303 	mla	r3, r1, r3, r2
 801bbf8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801bbfc:	891a      	ldrh	r2, [r3, #8]
 801bbfe:	4291      	cmp	r1, r2
 801bc00:	db04      	blt.n	801bc0c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801bc02:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801bc06:	e7e6      	b.n	801bbd6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801bc08:	2000      	movs	r0, #0
 801bc0a:	4770      	bx	lr
 801bc0c:	2001      	movs	r0, #1
 801bc0e:	4770      	bx	lr
 801bc10:	20027a60 	.word	0x20027a60
 801bc14:	20027a68 	.word	0x20027a68
 801bc18:	20027a64 	.word	0x20027a64
 801bc1c:	20027a48 	.word	0x20027a48

0801bc20 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bc20:	4a12      	ldr	r2, [pc, #72]	@ (801bc6c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bc22:	8803      	ldrh	r3, [r0, #0]
 801bc24:	8811      	ldrh	r1, [r2, #0]
 801bc26:	428b      	cmp	r3, r1
 801bc28:	d20b      	bcs.n	801bc42 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801bc2a:	4a11      	ldr	r2, [pc, #68]	@ (801bc70 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bc2c:	6812      	ldr	r2, [r2, #0]
 801bc2e:	b112      	cbz	r2, 801bc36 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bc30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bc34:	b9c0      	cbnz	r0, 801bc68 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801bc36:	4a0f      	ldr	r2, [pc, #60]	@ (801bc74 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bc38:	6811      	ldr	r1, [r2, #0]
 801bc3a:	2214      	movs	r2, #20
 801bc3c:	4353      	muls	r3, r2
 801bc3e:	58c8      	ldr	r0, [r1, r3]
 801bc40:	4770      	bx	lr
 801bc42:	4a0d      	ldr	r2, [pc, #52]	@ (801bc78 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bc44:	8812      	ldrh	r2, [r2, #0]
 801bc46:	440a      	add	r2, r1
 801bc48:	4293      	cmp	r3, r2
 801bc4a:	da04      	bge.n	801bc56 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801bc4c:	4a08      	ldr	r2, [pc, #32]	@ (801bc70 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bc4e:	6812      	ldr	r2, [r2, #0]
 801bc50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bc54:	4770      	bx	lr
 801bc56:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801bc5a:	4293      	cmp	r3, r2
 801bc5c:	d103      	bne.n	801bc66 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801bc5e:	4b07      	ldr	r3, [pc, #28]	@ (801bc7c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bc60:	681b      	ldr	r3, [r3, #0]
 801bc62:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801bc64:	4770      	bx	lr
 801bc66:	2000      	movs	r0, #0
 801bc68:	4770      	bx	lr
 801bc6a:	bf00      	nop
 801bc6c:	20027a60 	.word	0x20027a60
 801bc70:	20027a44 	.word	0x20027a44
 801bc74:	20027a68 	.word	0x20027a68
 801bc78:	20027a64 	.word	0x20027a64
 801bc7c:	200279d8 	.word	0x200279d8

0801bc80 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bc80:	4b24      	ldr	r3, [pc, #144]	@ (801bd14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801bc82:	8802      	ldrh	r2, [r0, #0]
 801bc84:	8818      	ldrh	r0, [r3, #0]
 801bc86:	4282      	cmp	r2, r0
 801bc88:	d221      	bcs.n	801bcce <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801bc8a:	4b23      	ldr	r3, [pc, #140]	@ (801bd18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bc8c:	6819      	ldr	r1, [r3, #0]
 801bc8e:	2314      	movs	r3, #20
 801bc90:	fb03 1302 	mla	r3, r3, r2, r1
 801bc94:	6858      	ldr	r0, [r3, #4]
 801bc96:	2800      	cmp	r0, #0
 801bc98:	d03a      	beq.n	801bd10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bc9a:	4920      	ldr	r1, [pc, #128]	@ (801bd1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bc9c:	6809      	ldr	r1, [r1, #0]
 801bc9e:	2900      	cmp	r1, #0
 801bca0:	d036      	beq.n	801bd10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bca2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bca6:	2900      	cmp	r1, #0
 801bca8:	d032      	beq.n	801bd10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bcaa:	891a      	ldrh	r2, [r3, #8]
 801bcac:	8958      	ldrh	r0, [r3, #10]
 801bcae:	4350      	muls	r0, r2
 801bcb0:	7c5a      	ldrb	r2, [r3, #17]
 801bcb2:	7cdb      	ldrb	r3, [r3, #19]
 801bcb4:	0952      	lsrs	r2, r2, #5
 801bcb6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801bcba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801bcbe:	2b0b      	cmp	r3, #11
 801bcc0:	bf18      	it	ne
 801bcc2:	0040      	lslne	r0, r0, #1
 801bcc4:	3003      	adds	r0, #3
 801bcc6:	f020 0003 	bic.w	r0, r0, #3
 801bcca:	4408      	add	r0, r1
 801bccc:	4770      	bx	lr
 801bcce:	4b14      	ldr	r3, [pc, #80]	@ (801bd20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801bcd0:	881b      	ldrh	r3, [r3, #0]
 801bcd2:	4403      	add	r3, r0
 801bcd4:	429a      	cmp	r2, r3
 801bcd6:	da1a      	bge.n	801bd0e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bcd8:	4b12      	ldr	r3, [pc, #72]	@ (801bd24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801bcda:	1a10      	subs	r0, r2, r0
 801bcdc:	210e      	movs	r1, #14
 801bcde:	681b      	ldr	r3, [r3, #0]
 801bce0:	fb01 3000 	mla	r0, r1, r0, r3
 801bce4:	7b03      	ldrb	r3, [r0, #12]
 801bce6:	f003 031f 	and.w	r3, r3, #31
 801bcea:	2b0b      	cmp	r3, #11
 801bcec:	d10b      	bne.n	801bd06 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801bcee:	8903      	ldrh	r3, [r0, #8]
 801bcf0:	8940      	ldrh	r0, [r0, #10]
 801bcf2:	4358      	muls	r0, r3
 801bcf4:	4b09      	ldr	r3, [pc, #36]	@ (801bd1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bcf6:	3003      	adds	r0, #3
 801bcf8:	6819      	ldr	r1, [r3, #0]
 801bcfa:	f020 0303 	bic.w	r3, r0, #3
 801bcfe:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801bd02:	4418      	add	r0, r3
 801bd04:	4770      	bx	lr
 801bd06:	2b0d      	cmp	r3, #13
 801bd08:	d101      	bne.n	801bd0e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bd0a:	300d      	adds	r0, #13
 801bd0c:	4770      	bx	lr
 801bd0e:	2000      	movs	r0, #0
 801bd10:	4770      	bx	lr
 801bd12:	bf00      	nop
 801bd14:	20027a60 	.word	0x20027a60
 801bd18:	20027a68 	.word	0x20027a68
 801bd1c:	20027a44 	.word	0x20027a44
 801bd20:	20027a64 	.word	0x20027a64
 801bd24:	20027a48 	.word	0x20027a48

0801bd28 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801bd28:	4a17      	ldr	r2, [pc, #92]	@ (801bd88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801bd2a:	b510      	push	{r4, lr}
 801bd2c:	8803      	ldrh	r3, [r0, #0]
 801bd2e:	8812      	ldrh	r2, [r2, #0]
 801bd30:	4293      	cmp	r3, r2
 801bd32:	d20c      	bcs.n	801bd4e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801bd34:	4a15      	ldr	r2, [pc, #84]	@ (801bd8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801bd36:	2114      	movs	r1, #20
 801bd38:	6812      	ldr	r2, [r2, #0]
 801bd3a:	fb01 2303 	mla	r3, r1, r3, r2
 801bd3e:	7c58      	ldrb	r0, [r3, #17]
 801bd40:	0942      	lsrs	r2, r0, #5
 801bd42:	7cd8      	ldrb	r0, [r3, #19]
 801bd44:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801bd48:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801bd4c:	bd10      	pop	{r4, pc}
 801bd4e:	4910      	ldr	r1, [pc, #64]	@ (801bd90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801bd50:	8809      	ldrh	r1, [r1, #0]
 801bd52:	4411      	add	r1, r2
 801bd54:	428b      	cmp	r3, r1
 801bd56:	da09      	bge.n	801bd6c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801bd58:	1a9b      	subs	r3, r3, r2
 801bd5a:	4a0e      	ldr	r2, [pc, #56]	@ (801bd94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801bd5c:	210e      	movs	r1, #14
 801bd5e:	6812      	ldr	r2, [r2, #0]
 801bd60:	fb01 2303 	mla	r3, r1, r3, r2
 801bd64:	7b18      	ldrb	r0, [r3, #12]
 801bd66:	f000 001f 	and.w	r0, r0, #31
 801bd6a:	e7ef      	b.n	801bd4c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801bd6c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801bd70:	4293      	cmp	r3, r2
 801bd72:	d106      	bne.n	801bd82 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801bd74:	f7e8 ffd4 	bl	8004d20 <_ZN8touchgfx3HAL3lcdEv>
 801bd78:	6803      	ldr	r3, [r0, #0]
 801bd7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd80:	4718      	bx	r3
 801bd82:	2000      	movs	r0, #0
 801bd84:	e7e2      	b.n	801bd4c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801bd86:	bf00      	nop
 801bd88:	20027a60 	.word	0x20027a60
 801bd8c:	20027a68 	.word	0x20027a68
 801bd90:	20027a64 	.word	0x20027a64
 801bd94:	20027a48 	.word	0x20027a48

0801bd98 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801bd98:	2010      	movs	r0, #16
 801bd9a:	4770      	bx	lr

0801bd9c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801bd9c:	2000      	movs	r0, #0
 801bd9e:	4770      	bx	lr

0801bda0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801bda0:	4b02      	ldr	r3, [pc, #8]	@ (801bdac <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801bda2:	8818      	ldrh	r0, [r3, #0]
 801bda4:	0040      	lsls	r0, r0, #1
 801bda6:	b280      	uxth	r0, r0
 801bda8:	4770      	bx	lr
 801bdaa:	bf00      	nop
 801bdac:	200279d2 	.word	0x200279d2

0801bdb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801bdb0:	2bff      	cmp	r3, #255	@ 0xff
 801bdb2:	d050      	beq.n	801be56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801bdb4:	2a0b      	cmp	r2, #11
 801bdb6:	d04a      	beq.n	801be4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801bdb8:	d80e      	bhi.n	801bdd8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801bdba:	2a03      	cmp	r2, #3
 801bdbc:	d03f      	beq.n	801be3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801bdbe:	d804      	bhi.n	801bdca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801bdc0:	2a01      	cmp	r2, #1
 801bdc2:	d03e      	beq.n	801be42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801bdc4:	d93f      	bls.n	801be46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801bdc6:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 801bdc8:	4770      	bx	lr
 801bdca:	2a09      	cmp	r2, #9
 801bdcc:	d03f      	beq.n	801be4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801bdce:	d83c      	bhi.n	801be4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801bdd0:	2a08      	cmp	r2, #8
 801bdd2:	d03a      	beq.n	801be4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801bdd4:	2000      	movs	r0, #0
 801bdd6:	4770      	bx	lr
 801bdd8:	2a2f      	cmp	r2, #47	@ 0x2f
 801bdda:	d024      	beq.n	801be26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801bddc:	d80d      	bhi.n	801bdfa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801bdde:	2a2d      	cmp	r2, #45	@ 0x2d
 801bde0:	d014      	beq.n	801be0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801bde2:	d826      	bhi.n	801be32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801bde4:	2a2c      	cmp	r2, #44	@ 0x2c
 801bde6:	d1f5      	bne.n	801bdd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bde8:	684b      	ldr	r3, [r1, #4]
 801bdea:	781b      	ldrb	r3, [r3, #0]
 801bdec:	2b01      	cmp	r3, #1
 801bdee:	d018      	beq.n	801be22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801bdf0:	d323      	bcc.n	801be3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801bdf2:	2b02      	cmp	r3, #2
 801bdf4:	d1ee      	bne.n	801bdd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bdf6:	68c0      	ldr	r0, [r0, #12]
 801bdf8:	4770      	bx	lr
 801bdfa:	2a31      	cmp	r2, #49	@ 0x31
 801bdfc:	d004      	beq.n	801be08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801bdfe:	d328      	bcc.n	801be52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801be00:	2a32      	cmp	r2, #50	@ 0x32
 801be02:	d026      	beq.n	801be52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801be04:	2a33      	cmp	r2, #51	@ 0x33
 801be06:	d1e5      	bne.n	801bdd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801be08:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 801be0a:	4770      	bx	lr
 801be0c:	684b      	ldr	r3, [r1, #4]
 801be0e:	781b      	ldrb	r3, [r3, #0]
 801be10:	2b01      	cmp	r3, #1
 801be12:	d004      	beq.n	801be1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801be14:	d30b      	bcc.n	801be2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801be16:	2b02      	cmp	r3, #2
 801be18:	d1dc      	bne.n	801bdd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801be1a:	6940      	ldr	r0, [r0, #20]
 801be1c:	4770      	bx	lr
 801be1e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801be20:	4770      	bx	lr
 801be22:	69c0      	ldr	r0, [r0, #28]
 801be24:	4770      	bx	lr
 801be26:	684b      	ldr	r3, [r1, #4]
 801be28:	781b      	ldrb	r3, [r3, #0]
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d1d2      	bne.n	801bdd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801be2e:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801be30:	4770      	bx	lr
 801be32:	684b      	ldr	r3, [r1, #4]
 801be34:	781b      	ldrb	r3, [r3, #0]
 801be36:	2b00      	cmp	r3, #0
 801be38:	d1cc      	bne.n	801bdd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801be3a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 801be3c:	4770      	bx	lr
 801be3e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 801be40:	4770      	bx	lr
 801be42:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 801be44:	4770      	bx	lr
 801be46:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 801be48:	4770      	bx	lr
 801be4a:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801be4c:	4770      	bx	lr
 801be4e:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801be50:	4770      	bx	lr
 801be52:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 801be54:	4770      	bx	lr
 801be56:	2a0b      	cmp	r2, #11
 801be58:	d049      	beq.n	801beee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801be5a:	d80e      	bhi.n	801be7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801be5c:	2a03      	cmp	r2, #3
 801be5e:	d040      	beq.n	801bee2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801be60:	d804      	bhi.n	801be6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801be62:	2a01      	cmp	r2, #1
 801be64:	d03f      	beq.n	801bee6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801be66:	d940      	bls.n	801beea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801be68:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 801be6a:	4770      	bx	lr
 801be6c:	2a09      	cmp	r2, #9
 801be6e:	d03e      	beq.n	801beee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801be70:	d801      	bhi.n	801be76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801be72:	2a08      	cmp	r2, #8
 801be74:	d1ae      	bne.n	801bdd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801be76:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801be78:	4770      	bx	lr
 801be7a:	2a2f      	cmp	r2, #47	@ 0x2f
 801be7c:	d024      	beq.n	801bec8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801be7e:	d80d      	bhi.n	801be9c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801be80:	2a2d      	cmp	r2, #45	@ 0x2d
 801be82:	d014      	beq.n	801beae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801be84:	d826      	bhi.n	801bed4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801be86:	2a2c      	cmp	r2, #44	@ 0x2c
 801be88:	d1a4      	bne.n	801bdd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801be8a:	684b      	ldr	r3, [r1, #4]
 801be8c:	781b      	ldrb	r3, [r3, #0]
 801be8e:	2b01      	cmp	r3, #1
 801be90:	d018      	beq.n	801bec4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801be92:	d324      	bcc.n	801bede <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801be94:	2b02      	cmp	r3, #2
 801be96:	d19d      	bne.n	801bdd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801be98:	6900      	ldr	r0, [r0, #16]
 801be9a:	4770      	bx	lr
 801be9c:	2a31      	cmp	r2, #49	@ 0x31
 801be9e:	d004      	beq.n	801beaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801bea0:	d327      	bcc.n	801bef2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801bea2:	2a32      	cmp	r2, #50	@ 0x32
 801bea4:	d025      	beq.n	801bef2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801bea6:	2a33      	cmp	r2, #51	@ 0x33
 801bea8:	d194      	bne.n	801bdd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801beaa:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 801beac:	4770      	bx	lr
 801beae:	684b      	ldr	r3, [r1, #4]
 801beb0:	781b      	ldrb	r3, [r3, #0]
 801beb2:	2b01      	cmp	r3, #1
 801beb4:	d004      	beq.n	801bec0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801beb6:	d30b      	bcc.n	801bed0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801beb8:	2b02      	cmp	r3, #2
 801beba:	d18b      	bne.n	801bdd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bebc:	6980      	ldr	r0, [r0, #24]
 801bebe:	4770      	bx	lr
 801bec0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801bec2:	4770      	bx	lr
 801bec4:	6a00      	ldr	r0, [r0, #32]
 801bec6:	4770      	bx	lr
 801bec8:	684b      	ldr	r3, [r1, #4]
 801beca:	781b      	ldrb	r3, [r3, #0]
 801becc:	2b00      	cmp	r3, #0
 801bece:	d181      	bne.n	801bdd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bed0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 801bed2:	4770      	bx	lr
 801bed4:	684b      	ldr	r3, [r1, #4]
 801bed6:	781b      	ldrb	r3, [r3, #0]
 801bed8:	2b00      	cmp	r3, #0
 801beda:	f47f af7b 	bne.w	801bdd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801bede:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801bee0:	4770      	bx	lr
 801bee2:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 801bee4:	4770      	bx	lr
 801bee6:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 801bee8:	4770      	bx	lr
 801beea:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 801beec:	4770      	bx	lr
 801beee:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801bef0:	4770      	bx	lr
 801bef2:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 801bef4:	4770      	bx	lr

0801bef6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bef6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801befa:	b087      	sub	sp, #28
 801befc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801befe:	9205      	str	r2, [sp, #20]
 801bf00:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801bf04:	9101      	str	r1, [sp, #4]
 801bf06:	9202      	str	r2, [sp, #8]
 801bf08:	6841      	ldr	r1, [r0, #4]
 801bf0a:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801bf0e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801bf12:	fb01 2404 	mla	r4, r1, r4, r2
 801bf16:	6802      	ldr	r2, [r0, #0]
 801bf18:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bf1c:	f8de 2000 	ldr.w	r2, [lr]
 801bf20:	9203      	str	r2, [sp, #12]
 801bf22:	f8de 2004 	ldr.w	r2, [lr, #4]
 801bf26:	3204      	adds	r2, #4
 801bf28:	9204      	str	r2, [sp, #16]
 801bf2a:	9a02      	ldr	r2, [sp, #8]
 801bf2c:	43d6      	mvns	r6, r2
 801bf2e:	b2f6      	uxtb	r6, r6
 801bf30:	9a01      	ldr	r2, [sp, #4]
 801bf32:	2a00      	cmp	r2, #0
 801bf34:	dc03      	bgt.n	801bf3e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801bf36:	9a05      	ldr	r2, [sp, #20]
 801bf38:	2a00      	cmp	r2, #0
 801bf3a:	f340 8129 	ble.w	801c190 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bf3e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bf40:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801bf44:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801bf48:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bf4a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801bf4e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	dd0e      	ble.n	801bf74 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bf56:	1408      	asrs	r0, r1, #16
 801bf58:	d405      	bmi.n	801bf66 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bf5a:	4560      	cmp	r0, ip
 801bf5c:	da03      	bge.n	801bf66 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bf5e:	1410      	asrs	r0, r2, #16
 801bf60:	d401      	bmi.n	801bf66 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bf62:	42b8      	cmp	r0, r7
 801bf64:	db07      	blt.n	801bf76 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801bf66:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801bf68:	3b01      	subs	r3, #1
 801bf6a:	3402      	adds	r4, #2
 801bf6c:	4401      	add	r1, r0
 801bf6e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801bf70:	4402      	add	r2, r0
 801bf72:	e7ee      	b.n	801bf52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801bf74:	d071      	beq.n	801c05a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bf76:	1e58      	subs	r0, r3, #1
 801bf78:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801bf7a:	fb05 1500 	mla	r5, r5, r0, r1
 801bf7e:	142d      	asrs	r5, r5, #16
 801bf80:	d45f      	bmi.n	801c042 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801bf82:	4565      	cmp	r5, ip
 801bf84:	da5d      	bge.n	801c042 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801bf86:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801bf88:	fb05 2000 	mla	r0, r5, r0, r2
 801bf8c:	1400      	asrs	r0, r0, #16
 801bf8e:	d458      	bmi.n	801c042 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801bf90:	42b8      	cmp	r0, r7
 801bf92:	da56      	bge.n	801c042 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801bf94:	4699      	mov	r9, r3
 801bf96:	46a2      	mov	sl, r4
 801bf98:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801bf9c:	f1b9 0f00 	cmp.w	r9, #0
 801bfa0:	dd57      	ble.n	801c052 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801bfa2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801bfa6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801bfaa:	9803      	ldr	r0, [sp, #12]
 801bfac:	140d      	asrs	r5, r1, #16
 801bfae:	f109 39ff 	add.w	r9, r9, #4294967295
 801bfb2:	fb07 000c 	mla	r0, r7, ip, r0
 801bfb6:	5d40      	ldrb	r0, [r0, r5]
 801bfb8:	9d04      	ldr	r5, [sp, #16]
 801bfba:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801bfbe:	f8ba 5000 	ldrh.w	r5, [sl]
 801bfc2:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801bfc6:	122f      	asrs	r7, r5, #8
 801bfc8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801bfcc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801bfd0:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801bfd4:	00ed      	lsls	r5, r5, #3
 801bfd6:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801bfda:	fb17 f706 	smulbb	r7, r7, r6
 801bfde:	b2ed      	uxtb	r5, r5
 801bfe0:	fb18 f806 	smulbb	r8, r8, r6
 801bfe4:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801bfe8:	10c7      	asrs	r7, r0, #3
 801bfea:	fb15 f506 	smulbb	r5, r5, r6
 801bfee:	00c0      	lsls	r0, r0, #3
 801bff0:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801bff4:	fa1f fc8c 	uxth.w	ip, ip
 801bff8:	b2c0      	uxtb	r0, r0
 801bffa:	fb07 870b 	mla	r7, r7, fp, r8
 801bffe:	fb00 500b 	mla	r0, r0, fp, r5
 801c002:	f10c 0501 	add.w	r5, ip, #1
 801c006:	b2bf      	uxth	r7, r7
 801c008:	b280      	uxth	r0, r0
 801c00a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c00e:	f107 0801 	add.w	r8, r7, #1
 801c012:	1c45      	adds	r5, r0, #1
 801c014:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801c018:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c01c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c020:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c022:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801c026:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c02a:	4401      	add	r1, r0
 801c02c:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801c030:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c032:	ea45 0c0c 	orr.w	ip, r5, ip
 801c036:	4402      	add	r2, r0
 801c038:	ea4c 0c08 	orr.w	ip, ip, r8
 801c03c:	f82a cb02 	strh.w	ip, [sl], #2
 801c040:	e7ac      	b.n	801bf9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c042:	f04f 0800 	mov.w	r8, #0
 801c046:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801c04a:	eb03 0008 	add.w	r0, r3, r8
 801c04e:	2800      	cmp	r0, #0
 801c050:	dc41      	bgt.n	801c0d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c052:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c056:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c05a:	9b01      	ldr	r3, [sp, #4]
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	f340 8097 	ble.w	801c190 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c062:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c066:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c068:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c06c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c070:	eef0 6a62 	vmov.f32	s13, s5
 801c074:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c078:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c07c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c080:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801c084:	eef0 6a43 	vmov.f32	s13, s6
 801c088:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c08c:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801c090:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c094:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c098:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c09c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c0a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c0a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c0a8:	ee12 2a90 	vmov	r2, s5
 801c0ac:	eef0 2a47 	vmov.f32	s5, s14
 801c0b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c0b4:	ee13 2a10 	vmov	r2, s6
 801c0b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c0ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c0bc:	eeb0 3a67 	vmov.f32	s6, s15
 801c0c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c0c4:	9314      	str	r3, [sp, #80]	@ 0x50
 801c0c6:	9b01      	ldr	r3, [sp, #4]
 801c0c8:	9a05      	ldr	r2, [sp, #20]
 801c0ca:	3b01      	subs	r3, #1
 801c0cc:	9301      	str	r3, [sp, #4]
 801c0ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c0d0:	bf08      	it	eq
 801c0d2:	4613      	moveq	r3, r2
 801c0d4:	e72c      	b.n	801bf30 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801c0d6:	140f      	asrs	r7, r1, #16
 801c0d8:	d453      	bmi.n	801c182 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c0da:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c0de:	42bd      	cmp	r5, r7
 801c0e0:	dd4f      	ble.n	801c182 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c0e2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c0e6:	d44c      	bmi.n	801c182 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c0e8:	f8de 000c 	ldr.w	r0, [lr, #12]
 801c0ec:	4560      	cmp	r0, ip
 801c0ee:	dd48      	ble.n	801c182 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c0f0:	9803      	ldr	r0, [sp, #12]
 801c0f2:	b22d      	sxth	r5, r5
 801c0f4:	fb0c 0505 	mla	r5, ip, r5, r0
 801c0f8:	5de8      	ldrb	r0, [r5, r7]
 801c0fa:	9d04      	ldr	r5, [sp, #16]
 801c0fc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801c100:	f06f 0501 	mvn.w	r5, #1
 801c104:	fb05 fb08 	mul.w	fp, r5, r8
 801c108:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801c10c:	f834 500b 	ldrh.w	r5, [r4, fp]
 801c110:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c114:	122f      	asrs	r7, r5, #8
 801c116:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801c11a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c11e:	00ed      	lsls	r5, r5, #3
 801c120:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801c124:	fb17 f706 	smulbb	r7, r7, r6
 801c128:	b2ed      	uxtb	r5, r5
 801c12a:	fb19 f906 	smulbb	r9, r9, r6
 801c12e:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801c132:	10c7      	asrs	r7, r0, #3
 801c134:	fb15 f506 	smulbb	r5, r5, r6
 801c138:	00c0      	lsls	r0, r0, #3
 801c13a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c13e:	fa1f fc8c 	uxth.w	ip, ip
 801c142:	b2c0      	uxtb	r0, r0
 801c144:	fb07 970a 	mla	r7, r7, sl, r9
 801c148:	fb00 500a 	mla	r0, r0, sl, r5
 801c14c:	f10c 0501 	add.w	r5, ip, #1
 801c150:	b2bf      	uxth	r7, r7
 801c152:	b280      	uxth	r0, r0
 801c154:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c158:	f107 0901 	add.w	r9, r7, #1
 801c15c:	1c45      	adds	r5, r0, #1
 801c15e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801c162:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c166:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c16a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801c16e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c172:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801c176:	ea45 0c0c 	orr.w	ip, r5, ip
 801c17a:	ea4c 0c09 	orr.w	ip, ip, r9
 801c17e:	f824 c00b 	strh.w	ip, [r4, fp]
 801c182:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c184:	f108 38ff 	add.w	r8, r8, #4294967295
 801c188:	4401      	add	r1, r0
 801c18a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c18c:	4402      	add	r2, r0
 801c18e:	e75c      	b.n	801c04a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c190:	b007      	add	sp, #28
 801c192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c196 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c19a:	b085      	sub	sp, #20
 801c19c:	4693      	mov	fp, r2
 801c19e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c1a2:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801c1a4:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801c1a6:	6870      	ldr	r0, [r6, #4]
 801c1a8:	9100      	str	r1, [sp, #0]
 801c1aa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801c1ae:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801c1b2:	fb00 2404 	mla	r4, r0, r4, r2
 801c1b6:	6832      	ldr	r2, [r6, #0]
 801c1b8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c1bc:	682a      	ldr	r2, [r5, #0]
 801c1be:	9201      	str	r2, [sp, #4]
 801c1c0:	686a      	ldr	r2, [r5, #4]
 801c1c2:	3204      	adds	r2, #4
 801c1c4:	9202      	str	r2, [sp, #8]
 801c1c6:	9a00      	ldr	r2, [sp, #0]
 801c1c8:	2a00      	cmp	r2, #0
 801c1ca:	dc03      	bgt.n	801c1d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c1cc:	f1bb 0f00 	cmp.w	fp, #0
 801c1d0:	f340 80a0 	ble.w	801c314 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801c1d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c1d6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c1da:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c1de:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c1e0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801c1e4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	dd0c      	ble.n	801c206 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c1ec:	1406      	asrs	r6, r0, #16
 801c1ee:	d405      	bmi.n	801c1fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c1f0:	454e      	cmp	r6, r9
 801c1f2:	da03      	bge.n	801c1fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c1f4:	1416      	asrs	r6, r2, #16
 801c1f6:	d401      	bmi.n	801c1fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c1f8:	4546      	cmp	r6, r8
 801c1fa:	db05      	blt.n	801c208 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c1fc:	4470      	add	r0, lr
 801c1fe:	4462      	add	r2, ip
 801c200:	3b01      	subs	r3, #1
 801c202:	3402      	adds	r4, #2
 801c204:	e7f0      	b.n	801c1e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c206:	d00f      	beq.n	801c228 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c208:	1e5e      	subs	r6, r3, #1
 801c20a:	fb0e 0706 	mla	r7, lr, r6, r0
 801c20e:	143f      	asrs	r7, r7, #16
 801c210:	d541      	bpl.n	801c296 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801c212:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801c216:	4698      	mov	r8, r3
 801c218:	9603      	str	r6, [sp, #12]
 801c21a:	f1b8 0f00 	cmp.w	r8, #0
 801c21e:	dc59      	bgt.n	801c2d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c220:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c224:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c228:	9b00      	ldr	r3, [sp, #0]
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	dd72      	ble.n	801c314 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801c22e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c232:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c234:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c238:	eeb0 6a62 	vmov.f32	s12, s5
 801c23c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c240:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c244:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c248:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801c24c:	eeb0 6a43 	vmov.f32	s12, s6
 801c250:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c254:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801c258:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c25c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c260:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c264:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c268:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c26c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c270:	ee12 2a90 	vmov	r2, s5
 801c274:	eef0 2a47 	vmov.f32	s5, s14
 801c278:	fb92 fef3 	sdiv	lr, r2, r3
 801c27c:	ee13 2a10 	vmov	r2, s6
 801c280:	eeb0 3a67 	vmov.f32	s6, s15
 801c284:	fb92 fcf3 	sdiv	ip, r2, r3
 801c288:	9b00      	ldr	r3, [sp, #0]
 801c28a:	3b01      	subs	r3, #1
 801c28c:	9300      	str	r3, [sp, #0]
 801c28e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c290:	bf08      	it	eq
 801c292:	465b      	moveq	r3, fp
 801c294:	e797      	b.n	801c1c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801c296:	454f      	cmp	r7, r9
 801c298:	dabb      	bge.n	801c212 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c29a:	fb0c 2606 	mla	r6, ip, r6, r2
 801c29e:	1436      	asrs	r6, r6, #16
 801c2a0:	d4b7      	bmi.n	801c212 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c2a2:	4546      	cmp	r6, r8
 801c2a4:	dab5      	bge.n	801c212 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c2a6:	461e      	mov	r6, r3
 801c2a8:	46a0      	mov	r8, r4
 801c2aa:	2e00      	cmp	r6, #0
 801c2ac:	ddb8      	ble.n	801c220 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c2ae:	1417      	asrs	r7, r2, #16
 801c2b0:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801c2b4:	9901      	ldr	r1, [sp, #4]
 801c2b6:	ea4f 4920 	mov.w	r9, r0, asr #16
 801c2ba:	4462      	add	r2, ip
 801c2bc:	4470      	add	r0, lr
 801c2be:	fb0a 1707 	mla	r7, sl, r7, r1
 801c2c2:	9902      	ldr	r1, [sp, #8]
 801c2c4:	3e01      	subs	r6, #1
 801c2c6:	f817 7009 	ldrb.w	r7, [r7, r9]
 801c2ca:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801c2ce:	f828 7b02 	strh.w	r7, [r8], #2
 801c2d2:	e7ea      	b.n	801c2aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801c2d4:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c2d8:	d417      	bmi.n	801c30a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c2da:	68ae      	ldr	r6, [r5, #8]
 801c2dc:	454e      	cmp	r6, r9
 801c2de:	dd14      	ble.n	801c30a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c2e0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c2e4:	d411      	bmi.n	801c30a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c2e6:	68ef      	ldr	r7, [r5, #12]
 801c2e8:	4557      	cmp	r7, sl
 801c2ea:	dd0e      	ble.n	801c30a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c2ec:	9f01      	ldr	r7, [sp, #4]
 801c2ee:	b236      	sxth	r6, r6
 801c2f0:	f06f 0101 	mvn.w	r1, #1
 801c2f4:	fb0a 7606 	mla	r6, sl, r6, r7
 801c2f8:	9f02      	ldr	r7, [sp, #8]
 801c2fa:	f816 6009 	ldrb.w	r6, [r6, r9]
 801c2fe:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801c302:	fb01 f608 	mul.w	r6, r1, r8
 801c306:	9903      	ldr	r1, [sp, #12]
 801c308:	538f      	strh	r7, [r1, r6]
 801c30a:	4470      	add	r0, lr
 801c30c:	4462      	add	r2, ip
 801c30e:	f108 38ff 	add.w	r8, r8, #4294967295
 801c312:	e782      	b.n	801c21a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c314:	b005      	add	sp, #20
 801c316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c31a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c31a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c31e:	b087      	sub	sp, #28
 801c320:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c322:	9205      	str	r2, [sp, #20]
 801c324:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c328:	9102      	str	r1, [sp, #8]
 801c32a:	9203      	str	r2, [sp, #12]
 801c32c:	6861      	ldr	r1, [r4, #4]
 801c32e:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801c332:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801c336:	fb01 2000 	mla	r0, r1, r0, r2
 801c33a:	6822      	ldr	r2, [r4, #0]
 801c33c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801c340:	9200      	str	r2, [sp, #0]
 801c342:	f8dc 2000 	ldr.w	r2, [ip]
 801c346:	9204      	str	r2, [sp, #16]
 801c348:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c34c:	3204      	adds	r2, #4
 801c34e:	9201      	str	r2, [sp, #4]
 801c350:	9a03      	ldr	r2, [sp, #12]
 801c352:	43d5      	mvns	r5, r2
 801c354:	b2ed      	uxtb	r5, r5
 801c356:	9a02      	ldr	r2, [sp, #8]
 801c358:	2a00      	cmp	r2, #0
 801c35a:	dc03      	bgt.n	801c364 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c35c:	9a05      	ldr	r2, [sp, #20]
 801c35e:	2a00      	cmp	r2, #0
 801c360:	f340 812c 	ble.w	801c5bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c364:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c366:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c36a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801c36e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c370:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c374:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c378:	2b00      	cmp	r3, #0
 801c37a:	dd10      	ble.n	801c39e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c37c:	140c      	asrs	r4, r1, #16
 801c37e:	d405      	bmi.n	801c38c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c380:	4574      	cmp	r4, lr
 801c382:	da03      	bge.n	801c38c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c384:	1414      	asrs	r4, r2, #16
 801c386:	d401      	bmi.n	801c38c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c388:	42bc      	cmp	r4, r7
 801c38a:	db09      	blt.n	801c3a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c38c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c38e:	3b01      	subs	r3, #1
 801c390:	9800      	ldr	r0, [sp, #0]
 801c392:	4421      	add	r1, r4
 801c394:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c396:	3002      	adds	r0, #2
 801c398:	4422      	add	r2, r4
 801c39a:	9000      	str	r0, [sp, #0]
 801c39c:	e7ec      	b.n	801c378 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c39e:	d071      	beq.n	801c484 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801c3a0:	1e5c      	subs	r4, r3, #1
 801c3a2:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801c3a4:	fb06 1604 	mla	r6, r6, r4, r1
 801c3a8:	1436      	asrs	r6, r6, #16
 801c3aa:	d45d      	bmi.n	801c468 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c3ac:	4576      	cmp	r6, lr
 801c3ae:	da5b      	bge.n	801c468 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c3b0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801c3b2:	fb06 2404 	mla	r4, r6, r4, r2
 801c3b6:	1424      	asrs	r4, r4, #16
 801c3b8:	d456      	bmi.n	801c468 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c3ba:	42bc      	cmp	r4, r7
 801c3bc:	da54      	bge.n	801c468 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c3be:	4698      	mov	r8, r3
 801c3c0:	f8dd 9000 	ldr.w	r9, [sp]
 801c3c4:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801c3c8:	f1b8 0f00 	cmp.w	r8, #0
 801c3cc:	dd54      	ble.n	801c478 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801c3ce:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801c3d2:	1414      	asrs	r4, r2, #16
 801c3d4:	9804      	ldr	r0, [sp, #16]
 801c3d6:	140e      	asrs	r6, r1, #16
 801c3d8:	f108 38ff 	add.w	r8, r8, #4294967295
 801c3dc:	fb07 0404 	mla	r4, r7, r4, r0
 801c3e0:	9801      	ldr	r0, [sp, #4]
 801c3e2:	f814 e006 	ldrb.w	lr, [r4, r6]
 801c3e6:	f8b9 4000 	ldrh.w	r4, [r9]
 801c3ea:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c3ee:	1227      	asrs	r7, r4, #8
 801c3f0:	eb00 0b0e 	add.w	fp, r0, lr
 801c3f4:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801c3f8:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c3fc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c3fe:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801c402:	f89b b001 	ldrb.w	fp, [fp, #1]
 801c406:	4401      	add	r1, r0
 801c408:	fb16 f60a 	smulbb	r6, r6, sl
 801c40c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c40e:	fb1b fb0a 	smulbb	fp, fp, sl
 801c412:	fb07 6705 	mla	r7, r7, r5, r6
 801c416:	10e6      	asrs	r6, r4, #3
 801c418:	00e4      	lsls	r4, r4, #3
 801c41a:	4402      	add	r2, r0
 801c41c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801c420:	b2bf      	uxth	r7, r7
 801c422:	b2e4      	uxtb	r4, r4
 801c424:	fb06 b605 	mla	r6, r6, r5, fp
 801c428:	fb14 f405 	smulbb	r4, r4, r5
 801c42c:	b2b6      	uxth	r6, r6
 801c42e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801c432:	1c7c      	adds	r4, r7, #1
 801c434:	f106 0b01 	add.w	fp, r6, #1
 801c438:	fa1f fe8e 	uxth.w	lr, lr
 801c43c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801c440:	f10e 0401 	add.w	r4, lr, #1
 801c444:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801c448:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801c44c:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801c450:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801c454:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801c458:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801c45c:	4327      	orrs	r7, r4
 801c45e:	ea47 070b 	orr.w	r7, r7, fp
 801c462:	f829 7b02 	strh.w	r7, [r9], #2
 801c466:	e7af      	b.n	801c3c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801c468:	f04f 0e00 	mov.w	lr, #0
 801c46c:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801c470:	eb03 040e 	add.w	r4, r3, lr
 801c474:	2c00      	cmp	r4, #0
 801c476:	dc43      	bgt.n	801c500 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801c478:	9a00      	ldr	r2, [sp, #0]
 801c47a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c47e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c482:	9300      	str	r3, [sp, #0]
 801c484:	9b02      	ldr	r3, [sp, #8]
 801c486:	2b00      	cmp	r3, #0
 801c488:	f340 8098 	ble.w	801c5bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c48c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c490:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c492:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c496:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c49a:	eef0 6a62 	vmov.f32	s13, s5
 801c49e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c4a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c4a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c4aa:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801c4ae:	eef0 6a43 	vmov.f32	s13, s6
 801c4b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c4b6:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801c4ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c4be:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c4c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c4c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c4ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c4ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c4d2:	ee12 2a90 	vmov	r2, s5
 801c4d6:	eef0 2a47 	vmov.f32	s5, s14
 801c4da:	fb92 f3f3 	sdiv	r3, r2, r3
 801c4de:	ee13 2a10 	vmov	r2, s6
 801c4e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c4e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c4e6:	eeb0 3a67 	vmov.f32	s6, s15
 801c4ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801c4ee:	9314      	str	r3, [sp, #80]	@ 0x50
 801c4f0:	9b02      	ldr	r3, [sp, #8]
 801c4f2:	9a05      	ldr	r2, [sp, #20]
 801c4f4:	3b01      	subs	r3, #1
 801c4f6:	9302      	str	r3, [sp, #8]
 801c4f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c4fa:	bf08      	it	eq
 801c4fc:	4613      	moveq	r3, r2
 801c4fe:	e72a      	b.n	801c356 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c500:	140f      	asrs	r7, r1, #16
 801c502:	d454      	bmi.n	801c5ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c504:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c508:	42be      	cmp	r6, r7
 801c50a:	dd50      	ble.n	801c5ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c50c:	ea5f 4822 	movs.w	r8, r2, asr #16
 801c510:	d44d      	bmi.n	801c5ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c512:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801c516:	4544      	cmp	r4, r8
 801c518:	dd49      	ble.n	801c5ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801c51a:	9c04      	ldr	r4, [sp, #16]
 801c51c:	b236      	sxth	r6, r6
 801c51e:	f06f 0001 	mvn.w	r0, #1
 801c522:	fb08 4606 	mla	r6, r8, r6, r4
 801c526:	9c01      	ldr	r4, [sp, #4]
 801c528:	fb00 fa0e 	mul.w	sl, r0, lr
 801c52c:	9800      	ldr	r0, [sp, #0]
 801c52e:	f816 8007 	ldrb.w	r8, [r6, r7]
 801c532:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c536:	eb04 0b08 	add.w	fp, r4, r8
 801c53a:	f830 400a 	ldrh.w	r4, [r0, sl]
 801c53e:	9801      	ldr	r0, [sp, #4]
 801c540:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801c544:	1227      	asrs	r7, r4, #8
 801c546:	f89b b001 	ldrb.w	fp, [fp, #1]
 801c54a:	fb16 f609 	smulbb	r6, r6, r9
 801c54e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c552:	f810 8008 	ldrb.w	r8, [r0, r8]
 801c556:	fb1b fb09 	smulbb	fp, fp, r9
 801c55a:	fb07 6705 	mla	r7, r7, r5, r6
 801c55e:	10e6      	asrs	r6, r4, #3
 801c560:	00e4      	lsls	r4, r4, #3
 801c562:	9800      	ldr	r0, [sp, #0]
 801c564:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801c568:	b2bf      	uxth	r7, r7
 801c56a:	b2e4      	uxtb	r4, r4
 801c56c:	fb06 b605 	mla	r6, r6, r5, fp
 801c570:	fb14 f405 	smulbb	r4, r4, r5
 801c574:	b2b6      	uxth	r6, r6
 801c576:	fb08 4809 	mla	r8, r8, r9, r4
 801c57a:	1c7c      	adds	r4, r7, #1
 801c57c:	f106 0b01 	add.w	fp, r6, #1
 801c580:	fa1f f888 	uxth.w	r8, r8
 801c584:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801c588:	f108 0401 	add.w	r4, r8, #1
 801c58c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801c590:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801c594:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801c598:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801c59c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801c5a0:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801c5a4:	4327      	orrs	r7, r4
 801c5a6:	ea47 070b 	orr.w	r7, r7, fp
 801c5aa:	f820 700a 	strh.w	r7, [r0, sl]
 801c5ae:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c5b0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c5b4:	4401      	add	r1, r0
 801c5b6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c5b8:	4402      	add	r2, r0
 801c5ba:	e759      	b.n	801c470 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c5bc:	b007      	add	sp, #28
 801c5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c5c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5c8:	b085      	sub	sp, #20
 801c5ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c5ce:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801c5d0:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801c5d2:	9203      	str	r2, [sp, #12]
 801c5d4:	6870      	ldr	r0, [r6, #4]
 801c5d6:	686f      	ldr	r7, [r5, #4]
 801c5d8:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801c5dc:	3704      	adds	r7, #4
 801c5de:	9101      	str	r1, [sp, #4]
 801c5e0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801c5e4:	fb00 2404 	mla	r4, r0, r4, r2
 801c5e8:	6832      	ldr	r2, [r6, #0]
 801c5ea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c5ee:	682a      	ldr	r2, [r5, #0]
 801c5f0:	9202      	str	r2, [sp, #8]
 801c5f2:	9a01      	ldr	r2, [sp, #4]
 801c5f4:	2a00      	cmp	r2, #0
 801c5f6:	dc03      	bgt.n	801c600 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c5f8:	9a03      	ldr	r2, [sp, #12]
 801c5fa:	2a00      	cmp	r2, #0
 801c5fc:	f340 80cc 	ble.w	801c798 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c600:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c602:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c606:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c60a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c60c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801c610:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c614:	2b00      	cmp	r3, #0
 801c616:	dd0d      	ble.n	801c634 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c618:	1406      	asrs	r6, r0, #16
 801c61a:	d405      	bmi.n	801c628 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c61c:	454e      	cmp	r6, r9
 801c61e:	da03      	bge.n	801c628 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c620:	1416      	asrs	r6, r2, #16
 801c622:	d401      	bmi.n	801c628 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c624:	4546      	cmp	r6, r8
 801c626:	db06      	blt.n	801c636 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c628:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801c62a:	4460      	add	r0, ip
 801c62c:	3b01      	subs	r3, #1
 801c62e:	3402      	adds	r4, #2
 801c630:	4432      	add	r2, r6
 801c632:	e7ef      	b.n	801c614 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c634:	d00f      	beq.n	801c656 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c636:	1e5e      	subs	r6, r3, #1
 801c638:	fb0c 0e06 	mla	lr, ip, r6, r0
 801c63c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801c640:	d543      	bpl.n	801c6ca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801c642:	4698      	mov	r8, r3
 801c644:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801c648:	f1b8 0f00 	cmp.w	r8, #0
 801c64c:	dc71      	bgt.n	801c732 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801c64e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c652:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c656:	9b01      	ldr	r3, [sp, #4]
 801c658:	2b00      	cmp	r3, #0
 801c65a:	f340 809d 	ble.w	801c798 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c65e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c664:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c668:	eeb0 6a62 	vmov.f32	s12, s5
 801c66c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c670:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c674:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c678:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801c67c:	eeb0 6a43 	vmov.f32	s12, s6
 801c680:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c684:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801c688:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c68c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c690:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c694:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c698:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c69c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c6a0:	ee12 2a90 	vmov	r2, s5
 801c6a4:	eef0 2a47 	vmov.f32	s5, s14
 801c6a8:	fb92 fcf3 	sdiv	ip, r2, r3
 801c6ac:	ee13 2a10 	vmov	r2, s6
 801c6b0:	eeb0 3a67 	vmov.f32	s6, s15
 801c6b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6b8:	9312      	str	r3, [sp, #72]	@ 0x48
 801c6ba:	9b01      	ldr	r3, [sp, #4]
 801c6bc:	9a03      	ldr	r2, [sp, #12]
 801c6be:	3b01      	subs	r3, #1
 801c6c0:	9301      	str	r3, [sp, #4]
 801c6c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c6c4:	bf08      	it	eq
 801c6c6:	4613      	moveq	r3, r2
 801c6c8:	e793      	b.n	801c5f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c6ca:	45ce      	cmp	lr, r9
 801c6cc:	dab9      	bge.n	801c642 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c6ce:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c6d0:	fb01 2606 	mla	r6, r1, r6, r2
 801c6d4:	1436      	asrs	r6, r6, #16
 801c6d6:	d4b4      	bmi.n	801c642 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c6d8:	4546      	cmp	r6, r8
 801c6da:	dab2      	bge.n	801c642 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c6dc:	4698      	mov	r8, r3
 801c6de:	46a2      	mov	sl, r4
 801c6e0:	f1b8 0f00 	cmp.w	r8, #0
 801c6e4:	ddb3      	ble.n	801c64e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c6e6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c6ea:	1416      	asrs	r6, r2, #16
 801c6ec:	9902      	ldr	r1, [sp, #8]
 801c6ee:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801c6f2:	f108 38ff 	add.w	r8, r8, #4294967295
 801c6f6:	4460      	add	r0, ip
 801c6f8:	fb09 1606 	mla	r6, r9, r6, r1
 801c6fc:	4928      	ldr	r1, [pc, #160]	@ (801c7a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801c6fe:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801c702:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c706:	eb07 0b0e 	add.w	fp, r7, lr
 801c70a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801c70e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c712:	00f6      	lsls	r6, r6, #3
 801c714:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801c718:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c71a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801c71e:	440a      	add	r2, r1
 801c720:	ea49 0606 	orr.w	r6, r9, r6
 801c724:	f817 900e 	ldrb.w	r9, [r7, lr]
 801c728:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801c72c:	f82a 6b02 	strh.w	r6, [sl], #2
 801c730:	e7d6      	b.n	801c6e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c732:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c736:	d429      	bmi.n	801c78c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c738:	68ae      	ldr	r6, [r5, #8]
 801c73a:	454e      	cmp	r6, r9
 801c73c:	dd26      	ble.n	801c78c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c73e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801c742:	d423      	bmi.n	801c78c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c744:	68e9      	ldr	r1, [r5, #12]
 801c746:	4559      	cmp	r1, fp
 801c748:	dd20      	ble.n	801c78c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c74a:	fa0f fe86 	sxth.w	lr, r6
 801c74e:	9902      	ldr	r1, [sp, #8]
 801c750:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801c754:	f06f 0101 	mvn.w	r1, #1
 801c758:	f81e e009 	ldrb.w	lr, [lr, r9]
 801c75c:	fb01 f908 	mul.w	r9, r1, r8
 801c760:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801c764:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c768:	eb07 060e 	add.w	r6, r7, lr
 801c76c:	f896 b002 	ldrb.w	fp, [r6, #2]
 801c770:	7876      	ldrb	r6, [r6, #1]
 801c772:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801c776:	00f6      	lsls	r6, r6, #3
 801c778:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801c77c:	ea4b 0606 	orr.w	r6, fp, r6
 801c780:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801c784:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801c788:	f82a 6009 	strh.w	r6, [sl, r9]
 801c78c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c78e:	4460      	add	r0, ip
 801c790:	f108 38ff 	add.w	r8, r8, #4294967295
 801c794:	440a      	add	r2, r1
 801c796:	e757      	b.n	801c648 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c798:	b005      	add	sp, #20
 801c79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c79e:	bf00      	nop
 801c7a0:	fffff800 	.word	0xfffff800

0801c7a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7a8:	b087      	sub	sp, #28
 801c7aa:	468b      	mov	fp, r1
 801c7ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c7b0:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c7b2:	9204      	str	r2, [sp, #16]
 801c7b4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c7b8:	6841      	ldr	r1, [r0, #4]
 801c7ba:	9205      	str	r2, [sp, #20]
 801c7bc:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801c7c0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801c7c4:	fb01 2404 	mla	r4, r1, r4, r2
 801c7c8:	6802      	ldr	r2, [r0, #0]
 801c7ca:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c7ce:	f8dc 2000 	ldr.w	r2, [ip]
 801c7d2:	9201      	str	r2, [sp, #4]
 801c7d4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c7d8:	3204      	adds	r2, #4
 801c7da:	9202      	str	r2, [sp, #8]
 801c7dc:	f1bb 0f00 	cmp.w	fp, #0
 801c7e0:	dc03      	bgt.n	801c7ea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801c7e2:	9a04      	ldr	r2, [sp, #16]
 801c7e4:	2a00      	cmp	r2, #0
 801c7e6:	f340 8138 	ble.w	801ca5a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c7ea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c7ec:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801c7f0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c7f4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c7f6:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801c7fa:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	dd0e      	ble.n	801c820 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c802:	1402      	asrs	r2, r0, #16
 801c804:	d405      	bmi.n	801c812 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c806:	42ba      	cmp	r2, r7
 801c808:	da03      	bge.n	801c812 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c80a:	140a      	asrs	r2, r1, #16
 801c80c:	d401      	bmi.n	801c812 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c80e:	42b2      	cmp	r2, r6
 801c810:	db07      	blt.n	801c822 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c812:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c814:	3b01      	subs	r3, #1
 801c816:	3402      	adds	r4, #2
 801c818:	4410      	add	r0, r2
 801c81a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c81c:	4411      	add	r1, r2
 801c81e:	e7ee      	b.n	801c7fe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c820:	d019      	beq.n	801c856 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801c822:	1e5a      	subs	r2, r3, #1
 801c824:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801c826:	fb05 0502 	mla	r5, r5, r2, r0
 801c82a:	142d      	asrs	r5, r5, #16
 801c82c:	d409      	bmi.n	801c842 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c82e:	42bd      	cmp	r5, r7
 801c830:	da07      	bge.n	801c842 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c832:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801c834:	fb05 1202 	mla	r2, r5, r2, r1
 801c838:	1412      	asrs	r2, r2, #16
 801c83a:	d402      	bmi.n	801c842 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c83c:	42b2      	cmp	r2, r6
 801c83e:	f2c0 80ac 	blt.w	801c99a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801c842:	f04f 0e00 	mov.w	lr, #0
 801c846:	eb03 020e 	add.w	r2, r3, lr
 801c84a:	2a00      	cmp	r2, #0
 801c84c:	dc3e      	bgt.n	801c8cc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c84e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c852:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c856:	f1bb 0f00 	cmp.w	fp, #0
 801c85a:	f340 80fe 	ble.w	801ca5a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c85e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c862:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c864:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c868:	f1bb 0b01 	subs.w	fp, fp, #1
 801c86c:	eeb0 6a62 	vmov.f32	s12, s5
 801c870:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c874:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c878:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c87c:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801c880:	eeb0 6a43 	vmov.f32	s12, s6
 801c884:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c888:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801c88c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c890:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c894:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c898:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c89c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c8a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c8a4:	ee12 2a90 	vmov	r2, s5
 801c8a8:	eef0 2a47 	vmov.f32	s5, s14
 801c8ac:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8b0:	ee13 2a10 	vmov	r2, s6
 801c8b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c8b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c8b8:	eeb0 3a67 	vmov.f32	s6, s15
 801c8bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8c0:	9a04      	ldr	r2, [sp, #16]
 801c8c2:	9314      	str	r3, [sp, #80]	@ 0x50
 801c8c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c8c6:	bf08      	it	eq
 801c8c8:	4613      	moveq	r3, r2
 801c8ca:	e787      	b.n	801c7dc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c8cc:	1406      	asrs	r6, r0, #16
 801c8ce:	d45d      	bmi.n	801c98c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c8d0:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801c8d4:	42b5      	cmp	r5, r6
 801c8d6:	dd59      	ble.n	801c98c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c8d8:	140f      	asrs	r7, r1, #16
 801c8da:	d457      	bmi.n	801c98c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c8dc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c8e0:	42ba      	cmp	r2, r7
 801c8e2:	dd53      	ble.n	801c98c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c8e4:	9a01      	ldr	r2, [sp, #4]
 801c8e6:	b22d      	sxth	r5, r5
 801c8e8:	fb07 2505 	mla	r5, r7, r5, r2
 801c8ec:	5daa      	ldrb	r2, [r5, r6]
 801c8ee:	9d02      	ldr	r5, [sp, #8]
 801c8f0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801c8f4:	0e2e      	lsrs	r6, r5, #24
 801c8f6:	d049      	beq.n	801c98c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c8f8:	f06f 0201 	mvn.w	r2, #1
 801c8fc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c900:	fb02 f20e 	mul.w	r2, r2, lr
 801c904:	f834 8002 	ldrh.w	r8, [r4, r2]
 801c908:	9203      	str	r2, [sp, #12]
 801c90a:	9a05      	ldr	r2, [sp, #20]
 801c90c:	ea4f 2728 	mov.w	r7, r8, asr #8
 801c910:	4356      	muls	r6, r2
 801c912:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c916:	1c72      	adds	r2, r6, #1
 801c918:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801c91c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c920:	b2ed      	uxtb	r5, r5
 801c922:	1212      	asrs	r2, r2, #8
 801c924:	fa1f f982 	uxth.w	r9, r2
 801c928:	43d2      	mvns	r2, r2
 801c92a:	fb16 f609 	smulbb	r6, r6, r9
 801c92e:	b2d2      	uxtb	r2, r2
 801c930:	fb15 f509 	smulbb	r5, r5, r9
 801c934:	fb07 6702 	mla	r7, r7, r2, r6
 801c938:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801c93c:	fb1a fa09 	smulbb	sl, sl, r9
 801c940:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c944:	b2bf      	uxth	r7, r7
 801c946:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801c94a:	fa5f f888 	uxtb.w	r8, r8
 801c94e:	fb06 a602 	mla	r6, r6, r2, sl
 801c952:	fb08 5502 	mla	r5, r8, r2, r5
 801c956:	1c7a      	adds	r2, r7, #1
 801c958:	b2b6      	uxth	r6, r6
 801c95a:	b2ad      	uxth	r5, r5
 801c95c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c960:	9a03      	ldr	r2, [sp, #12]
 801c962:	f105 0a01 	add.w	sl, r5, #1
 801c966:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801c96a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c96e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c972:	ea4a 0707 	orr.w	r7, sl, r7
 801c976:	f106 0a01 	add.w	sl, r6, #1
 801c97a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c97e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c982:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801c986:	ea47 070a 	orr.w	r7, r7, sl
 801c98a:	52a7      	strh	r7, [r4, r2]
 801c98c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c98e:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c992:	4410      	add	r0, r2
 801c994:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c996:	4411      	add	r1, r2
 801c998:	e755      	b.n	801c846 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c99a:	f04f 0800 	mov.w	r8, #0
 801c99e:	eba3 0208 	sub.w	r2, r3, r8
 801c9a2:	2a00      	cmp	r2, #0
 801c9a4:	f77f af53 	ble.w	801c84e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801c9a8:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801c9ac:	140a      	asrs	r2, r1, #16
 801c9ae:	9f01      	ldr	r7, [sp, #4]
 801c9b0:	1405      	asrs	r5, r0, #16
 801c9b2:	fb06 7202 	mla	r2, r6, r2, r7
 801c9b6:	5d52      	ldrb	r2, [r2, r5]
 801c9b8:	9d02      	ldr	r5, [sp, #8]
 801c9ba:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801c9be:	0e2e      	lsrs	r6, r5, #24
 801c9c0:	d044      	beq.n	801ca4c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c9c2:	9a05      	ldr	r2, [sp, #20]
 801c9c4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c9c8:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801c9cc:	4356      	muls	r6, r2
 801c9ce:	ea4f 272e 	mov.w	r7, lr, asr #8
 801c9d2:	1c72      	adds	r2, r6, #1
 801c9d4:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c9d8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801c9dc:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c9e0:	b2ed      	uxtb	r5, r5
 801c9e2:	1212      	asrs	r2, r2, #8
 801c9e4:	fa1f f982 	uxth.w	r9, r2
 801c9e8:	43d2      	mvns	r2, r2
 801c9ea:	fb16 f609 	smulbb	r6, r6, r9
 801c9ee:	b2d2      	uxtb	r2, r2
 801c9f0:	fb15 f509 	smulbb	r5, r5, r9
 801c9f4:	fb07 6702 	mla	r7, r7, r2, r6
 801c9f8:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c9fc:	fb1a fa09 	smulbb	sl, sl, r9
 801ca00:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ca04:	b2bf      	uxth	r7, r7
 801ca06:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801ca0a:	fa5f fe8e 	uxtb.w	lr, lr
 801ca0e:	fb06 a602 	mla	r6, r6, r2, sl
 801ca12:	fb0e 5502 	mla	r5, lr, r2, r5
 801ca16:	1c7a      	adds	r2, r7, #1
 801ca18:	b2b6      	uxth	r6, r6
 801ca1a:	b2ad      	uxth	r5, r5
 801ca1c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ca20:	f105 0a01 	add.w	sl, r5, #1
 801ca24:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801ca28:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ca2c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ca30:	ea4a 0707 	orr.w	r7, sl, r7
 801ca34:	f106 0a01 	add.w	sl, r6, #1
 801ca38:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ca3c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ca40:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ca44:	ea47 070a 	orr.w	r7, r7, sl
 801ca48:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801ca4c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ca4e:	f108 0801 	add.w	r8, r8, #1
 801ca52:	4410      	add	r0, r2
 801ca54:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ca56:	4411      	add	r1, r2
 801ca58:	e7a1      	b.n	801c99e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ca5a:	b007      	add	sp, #28
 801ca5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca60 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ca60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca64:	b085      	sub	sp, #20
 801ca66:	468b      	mov	fp, r1
 801ca68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ca6c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ca6e:	9203      	str	r2, [sp, #12]
 801ca70:	6841      	ldr	r1, [r0, #4]
 801ca72:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801ca76:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801ca7a:	fb01 2404 	mla	r4, r1, r4, r2
 801ca7e:	6802      	ldr	r2, [r0, #0]
 801ca80:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ca84:	f8de 2000 	ldr.w	r2, [lr]
 801ca88:	9200      	str	r2, [sp, #0]
 801ca8a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ca8e:	3204      	adds	r2, #4
 801ca90:	9201      	str	r2, [sp, #4]
 801ca92:	f1bb 0f00 	cmp.w	fp, #0
 801ca96:	dc03      	bgt.n	801caa0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ca98:	9a03      	ldr	r2, [sp, #12]
 801ca9a:	2a00      	cmp	r2, #0
 801ca9c:	f340 8153 	ble.w	801cd46 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801caa0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801caa2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801caa6:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801caaa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801caac:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801cab0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	dd0e      	ble.n	801cad6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cab8:	1408      	asrs	r0, r1, #16
 801caba:	d405      	bmi.n	801cac8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cabc:	42b8      	cmp	r0, r7
 801cabe:	da03      	bge.n	801cac8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cac0:	1410      	asrs	r0, r2, #16
 801cac2:	d401      	bmi.n	801cac8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cac4:	42b0      	cmp	r0, r6
 801cac6:	db07      	blt.n	801cad8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801cac8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801caca:	3b01      	subs	r3, #1
 801cacc:	3402      	adds	r4, #2
 801cace:	4401      	add	r1, r0
 801cad0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cad2:	4402      	add	r2, r0
 801cad4:	e7ee      	b.n	801cab4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801cad6:	d017      	beq.n	801cb08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801cad8:	1e58      	subs	r0, r3, #1
 801cada:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801cadc:	fb05 1500 	mla	r5, r5, r0, r1
 801cae0:	142d      	asrs	r5, r5, #16
 801cae2:	d409      	bmi.n	801caf8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cae4:	42bd      	cmp	r5, r7
 801cae6:	da07      	bge.n	801caf8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cae8:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801caea:	fb05 2000 	mla	r0, r5, r0, r2
 801caee:	1400      	asrs	r0, r0, #16
 801caf0:	d402      	bmi.n	801caf8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801caf2:	42b0      	cmp	r0, r6
 801caf4:	f2c0 80bc 	blt.w	801cc70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801caf8:	2600      	movs	r6, #0
 801cafa:	1998      	adds	r0, r3, r6
 801cafc:	2800      	cmp	r0, #0
 801cafe:	dc3e      	bgt.n	801cb7e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801cb00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cb04:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cb08:	f1bb 0f00 	cmp.w	fp, #0
 801cb0c:	f340 811b 	ble.w	801cd46 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801cb10:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cb14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb16:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cb1a:	f1bb 0b01 	subs.w	fp, fp, #1
 801cb1e:	eeb0 6a62 	vmov.f32	s12, s5
 801cb22:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cb26:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cb2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb2e:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801cb32:	eeb0 6a43 	vmov.f32	s12, s6
 801cb36:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb3a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801cb3e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cb42:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cb46:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cb4a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cb4e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cb52:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cb56:	ee12 2a90 	vmov	r2, s5
 801cb5a:	eef0 2a47 	vmov.f32	s5, s14
 801cb5e:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb62:	ee13 2a10 	vmov	r2, s6
 801cb66:	9311      	str	r3, [sp, #68]	@ 0x44
 801cb68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb6a:	eeb0 3a67 	vmov.f32	s6, s15
 801cb6e:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb72:	9a03      	ldr	r2, [sp, #12]
 801cb74:	9312      	str	r3, [sp, #72]	@ 0x48
 801cb76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb78:	bf08      	it	eq
 801cb7a:	4613      	moveq	r3, r2
 801cb7c:	e789      	b.n	801ca92 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801cb7e:	140f      	asrs	r7, r1, #16
 801cb80:	d426      	bmi.n	801cbd0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801cb82:	f8de 5008 	ldr.w	r5, [lr, #8]
 801cb86:	42bd      	cmp	r5, r7
 801cb88:	dd22      	ble.n	801cbd0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801cb8a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801cb8e:	d41f      	bmi.n	801cbd0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801cb90:	f8de 000c 	ldr.w	r0, [lr, #12]
 801cb94:	4560      	cmp	r0, ip
 801cb96:	dd1b      	ble.n	801cbd0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801cb98:	9800      	ldr	r0, [sp, #0]
 801cb9a:	b22d      	sxth	r5, r5
 801cb9c:	fb0c 0505 	mla	r5, ip, r5, r0
 801cba0:	5de8      	ldrb	r0, [r5, r7]
 801cba2:	9d01      	ldr	r5, [sp, #4]
 801cba4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801cba8:	0e07      	lsrs	r7, r0, #24
 801cbaa:	2fff      	cmp	r7, #255	@ 0xff
 801cbac:	d116      	bne.n	801cbdc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801cbae:	f06f 0501 	mvn.w	r5, #1
 801cbb2:	fb05 f706 	mul.w	r7, r5, r6
 801cbb6:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801cbba:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801cbbe:	0945      	lsrs	r5, r0, #5
 801cbc0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801cbc4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801cbc8:	ea4c 0505 	orr.w	r5, ip, r5
 801cbcc:	4305      	orrs	r5, r0
 801cbce:	53e5      	strh	r5, [r4, r7]
 801cbd0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801cbd2:	3e01      	subs	r6, #1
 801cbd4:	4401      	add	r1, r0
 801cbd6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cbd8:	4402      	add	r2, r0
 801cbda:	e78e      	b.n	801cafa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801cbdc:	b2fd      	uxtb	r5, r7
 801cbde:	2f00      	cmp	r7, #0
 801cbe0:	d0f6      	beq.n	801cbd0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801cbe2:	f06f 0701 	mvn.w	r7, #1
 801cbe6:	fa1f f985 	uxth.w	r9, r5
 801cbea:	43ed      	mvns	r5, r5
 801cbec:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801cbf0:	4377      	muls	r7, r6
 801cbf2:	fb1a fa09 	smulbb	sl, sl, r9
 801cbf6:	b2ed      	uxtb	r5, r5
 801cbf8:	f834 8007 	ldrh.w	r8, [r4, r7]
 801cbfc:	9702      	str	r7, [sp, #8]
 801cbfe:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801cc02:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801cc06:	fb17 f709 	smulbb	r7, r7, r9
 801cc0a:	b2c0      	uxtb	r0, r0
 801cc0c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801cc10:	fb10 f009 	smulbb	r0, r0, r9
 801cc14:	fb0c 7c05 	mla	ip, ip, r5, r7
 801cc18:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801cc1c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801cc20:	fa1f fc8c 	uxth.w	ip, ip
 801cc24:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801cc28:	fa5f f888 	uxtb.w	r8, r8
 801cc2c:	fb07 a705 	mla	r7, r7, r5, sl
 801cc30:	fb08 0005 	mla	r0, r8, r5, r0
 801cc34:	f10c 0501 	add.w	r5, ip, #1
 801cc38:	b2bf      	uxth	r7, r7
 801cc3a:	b280      	uxth	r0, r0
 801cc3c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801cc40:	f100 0a01 	add.w	sl, r0, #1
 801cc44:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801cc48:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801cc4c:	9802      	ldr	r0, [sp, #8]
 801cc4e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cc52:	ea4a 0c0c 	orr.w	ip, sl, ip
 801cc56:	f107 0a01 	add.w	sl, r7, #1
 801cc5a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801cc5e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cc62:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801cc66:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cc6a:	f824 c000 	strh.w	ip, [r4, r0]
 801cc6e:	e7af      	b.n	801cbd0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801cc70:	f04f 0800 	mov.w	r8, #0
 801cc74:	eba3 0008 	sub.w	r0, r3, r8
 801cc78:	2800      	cmp	r0, #0
 801cc7a:	f77f af41 	ble.w	801cb00 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cc7e:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801cc82:	1410      	asrs	r0, r2, #16
 801cc84:	9f00      	ldr	r7, [sp, #0]
 801cc86:	140d      	asrs	r5, r1, #16
 801cc88:	fb06 7000 	mla	r0, r6, r0, r7
 801cc8c:	5d40      	ldrb	r0, [r0, r5]
 801cc8e:	9d01      	ldr	r5, [sp, #4]
 801cc90:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801cc94:	0e2e      	lsrs	r6, r5, #24
 801cc96:	2eff      	cmp	r6, #255	@ 0xff
 801cc98:	d112      	bne.n	801ccc0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801cc9a:	482c      	ldr	r0, [pc, #176]	@ (801cd4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801cc9c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801cca0:	0968      	lsrs	r0, r5, #5
 801cca2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801cca6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801ccaa:	4330      	orrs	r0, r6
 801ccac:	4328      	orrs	r0, r5
 801ccae:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801ccb2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ccb4:	f108 0801 	add.w	r8, r8, #1
 801ccb8:	4401      	add	r1, r0
 801ccba:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ccbc:	4402      	add	r2, r0
 801ccbe:	e7d9      	b.n	801cc74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ccc0:	b2f0      	uxtb	r0, r6
 801ccc2:	2e00      	cmp	r6, #0
 801ccc4:	d0f5      	beq.n	801ccb2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ccc6:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801ccca:	fa1f f980 	uxth.w	r9, r0
 801ccce:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ccd2:	43c0      	mvns	r0, r0
 801ccd4:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ccd8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ccdc:	fb16 f609 	smulbb	r6, r6, r9
 801cce0:	b2c0      	uxtb	r0, r0
 801cce2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801cce6:	b2ed      	uxtb	r5, r5
 801cce8:	fb1a fa09 	smulbb	sl, sl, r9
 801ccec:	fb07 6700 	mla	r7, r7, r0, r6
 801ccf0:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ccf4:	fb15 f509 	smulbb	r5, r5, r9
 801ccf8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ccfc:	b2bf      	uxth	r7, r7
 801ccfe:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801cd02:	fa5f fc8c 	uxtb.w	ip, ip
 801cd06:	fb06 a600 	mla	r6, r6, r0, sl
 801cd0a:	fb0c 5500 	mla	r5, ip, r0, r5
 801cd0e:	1c78      	adds	r0, r7, #1
 801cd10:	b2b6      	uxth	r6, r6
 801cd12:	b2ad      	uxth	r5, r5
 801cd14:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801cd18:	f105 0a01 	add.w	sl, r5, #1
 801cd1c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801cd20:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cd24:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cd28:	ea4a 0707 	orr.w	r7, sl, r7
 801cd2c:	f106 0a01 	add.w	sl, r6, #1
 801cd30:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cd34:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cd38:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801cd3c:	ea47 070a 	orr.w	r7, r7, sl
 801cd40:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801cd44:	e7b5      	b.n	801ccb2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801cd46:	b005      	add	sp, #20
 801cd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd4c:	fffff800 	.word	0xfffff800

0801cd50 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd54:	b087      	sub	sp, #28
 801cd56:	468b      	mov	fp, r1
 801cd58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cd5c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801cd5e:	9204      	str	r2, [sp, #16]
 801cd60:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801cd64:	6861      	ldr	r1, [r4, #4]
 801cd66:	9205      	str	r2, [sp, #20]
 801cd68:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801cd6c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801cd70:	fb01 2000 	mla	r0, r1, r0, r2
 801cd74:	6822      	ldr	r2, [r4, #0]
 801cd76:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801cd7a:	f8de 2000 	ldr.w	r2, [lr]
 801cd7e:	9201      	str	r2, [sp, #4]
 801cd80:	f8de 2004 	ldr.w	r2, [lr, #4]
 801cd84:	9202      	str	r2, [sp, #8]
 801cd86:	f1bb 0f00 	cmp.w	fp, #0
 801cd8a:	dc03      	bgt.n	801cd94 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801cd8c:	9a04      	ldr	r2, [sp, #16]
 801cd8e:	2a00      	cmp	r2, #0
 801cd90:	f340 8142 	ble.w	801d018 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801cd94:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cd96:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801cd9a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801cd9e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cda0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801cda4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	dd0e      	ble.n	801cdca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801cdac:	140c      	asrs	r4, r1, #16
 801cdae:	d405      	bmi.n	801cdbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801cdb0:	42bc      	cmp	r4, r7
 801cdb2:	da03      	bge.n	801cdbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801cdb4:	1414      	asrs	r4, r2, #16
 801cdb6:	d401      	bmi.n	801cdbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801cdb8:	42b4      	cmp	r4, r6
 801cdba:	db07      	blt.n	801cdcc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cdbc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cdbe:	3b01      	subs	r3, #1
 801cdc0:	3002      	adds	r0, #2
 801cdc2:	4421      	add	r1, r4
 801cdc4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801cdc6:	4422      	add	r2, r4
 801cdc8:	e7ee      	b.n	801cda8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801cdca:	d019      	beq.n	801ce00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801cdcc:	1e5c      	subs	r4, r3, #1
 801cdce:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801cdd0:	fb05 1504 	mla	r5, r5, r4, r1
 801cdd4:	142d      	asrs	r5, r5, #16
 801cdd6:	d409      	bmi.n	801cdec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801cdd8:	42bd      	cmp	r5, r7
 801cdda:	da07      	bge.n	801cdec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801cddc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801cdde:	fb05 2404 	mla	r4, r5, r4, r2
 801cde2:	1424      	asrs	r4, r4, #16
 801cde4:	d402      	bmi.n	801cdec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801cde6:	42b4      	cmp	r4, r6
 801cde8:	f2c0 80b1 	blt.w	801cf4e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801cdec:	f04f 0800 	mov.w	r8, #0
 801cdf0:	eb03 0408 	add.w	r4, r3, r8
 801cdf4:	2c00      	cmp	r4, #0
 801cdf6:	dc3e      	bgt.n	801ce76 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801cdf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cdfc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ce00:	f1bb 0f00 	cmp.w	fp, #0
 801ce04:	f340 8108 	ble.w	801d018 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ce08:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ce0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ce0e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ce12:	f1bb 0b01 	subs.w	fp, fp, #1
 801ce16:	eeb0 6a62 	vmov.f32	s12, s5
 801ce1a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ce1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ce22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ce26:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801ce2a:	eeb0 6a43 	vmov.f32	s12, s6
 801ce2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ce32:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801ce36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ce3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ce3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ce42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ce46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ce4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ce4e:	ee12 2a90 	vmov	r2, s5
 801ce52:	eef0 2a47 	vmov.f32	s5, s14
 801ce56:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce5a:	ee13 2a10 	vmov	r2, s6
 801ce5e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ce60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ce62:	eeb0 3a67 	vmov.f32	s6, s15
 801ce66:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce6a:	9a04      	ldr	r2, [sp, #16]
 801ce6c:	9314      	str	r3, [sp, #80]	@ 0x50
 801ce6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ce70:	bf08      	it	eq
 801ce72:	4613      	moveq	r3, r2
 801ce74:	e787      	b.n	801cd86 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ce76:	140e      	asrs	r6, r1, #16
 801ce78:	d462      	bmi.n	801cf40 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ce7a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ce7e:	42b5      	cmp	r5, r6
 801ce80:	dd5e      	ble.n	801cf40 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ce82:	1417      	asrs	r7, r2, #16
 801ce84:	d45c      	bmi.n	801cf40 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ce86:	f8de 400c 	ldr.w	r4, [lr, #12]
 801ce8a:	42bc      	cmp	r4, r7
 801ce8c:	dd58      	ble.n	801cf40 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ce8e:	b22d      	sxth	r5, r5
 801ce90:	9c02      	ldr	r4, [sp, #8]
 801ce92:	fb07 6505 	mla	r5, r7, r5, r6
 801ce96:	5d66      	ldrb	r6, [r4, r5]
 801ce98:	2e00      	cmp	r6, #0
 801ce9a:	d051      	beq.n	801cf40 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ce9c:	9c01      	ldr	r4, [sp, #4]
 801ce9e:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801cea2:	f06f 0401 	mvn.w	r4, #1
 801cea6:	fb04 f408 	mul.w	r4, r4, r8
 801ceaa:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801ceae:	5b05      	ldrh	r5, [r0, r4]
 801ceb0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801ceb4:	9403      	str	r4, [sp, #12]
 801ceb6:	9c05      	ldr	r4, [sp, #20]
 801ceb8:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801cebc:	4366      	muls	r6, r4
 801cebe:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801cec2:	1c74      	adds	r4, r6, #1
 801cec4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801cec8:	122e      	asrs	r6, r5, #8
 801ceca:	1224      	asrs	r4, r4, #8
 801cecc:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801ced0:	00ed      	lsls	r5, r5, #3
 801ced2:	b2a7      	uxth	r7, r4
 801ced4:	43e4      	mvns	r4, r4
 801ced6:	b2ed      	uxtb	r5, r5
 801ced8:	b2e4      	uxtb	r4, r4
 801ceda:	fb16 f604 	smulbb	r6, r6, r4
 801cede:	fb15 f504 	smulbb	r5, r5, r4
 801cee2:	fb0c 6c07 	mla	ip, ip, r7, r6
 801cee6:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801ceea:	fb1a fa04 	smulbb	sl, sl, r4
 801ceee:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801cef2:	fa1f fc8c 	uxth.w	ip, ip
 801cef6:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801cefa:	fa5f f989 	uxtb.w	r9, r9
 801cefe:	fb06 a607 	mla	r6, r6, r7, sl
 801cf02:	f10c 0401 	add.w	r4, ip, #1
 801cf06:	fb09 5507 	mla	r5, r9, r7, r5
 801cf0a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801cf0e:	9c03      	ldr	r4, [sp, #12]
 801cf10:	b2ad      	uxth	r5, r5
 801cf12:	b2b6      	uxth	r6, r6
 801cf14:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801cf18:	f105 0a01 	add.w	sl, r5, #1
 801cf1c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cf20:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cf24:	ea4a 0c0c 	orr.w	ip, sl, ip
 801cf28:	f106 0a01 	add.w	sl, r6, #1
 801cf2c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cf30:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cf34:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801cf38:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cf3c:	f820 c004 	strh.w	ip, [r0, r4]
 801cf40:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cf42:	f108 38ff 	add.w	r8, r8, #4294967295
 801cf46:	4421      	add	r1, r4
 801cf48:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801cf4a:	4422      	add	r2, r4
 801cf4c:	e750      	b.n	801cdf0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cf4e:	f04f 0900 	mov.w	r9, #0
 801cf52:	eba3 0409 	sub.w	r4, r3, r9
 801cf56:	2c00      	cmp	r4, #0
 801cf58:	f77f af4e 	ble.w	801cdf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801cf5c:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801cf60:	140d      	asrs	r5, r1, #16
 801cf62:	1414      	asrs	r4, r2, #16
 801cf64:	fb06 5404 	mla	r4, r6, r4, r5
 801cf68:	9d02      	ldr	r5, [sp, #8]
 801cf6a:	5d2e      	ldrb	r6, [r5, r4]
 801cf6c:	2e00      	cmp	r6, #0
 801cf6e:	d04c      	beq.n	801d00a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801cf70:	9d01      	ldr	r5, [sp, #4]
 801cf72:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801cf76:	9c05      	ldr	r4, [sp, #20]
 801cf78:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801cf7c:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801cf80:	4366      	muls	r6, r4
 801cf82:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801cf86:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801cf8a:	1c74      	adds	r4, r6, #1
 801cf8c:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801cf90:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801cf94:	122e      	asrs	r6, r5, #8
 801cf96:	1224      	asrs	r4, r4, #8
 801cf98:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801cf9c:	00ed      	lsls	r5, r5, #3
 801cf9e:	b2a7      	uxth	r7, r4
 801cfa0:	43e4      	mvns	r4, r4
 801cfa2:	b2ed      	uxtb	r5, r5
 801cfa4:	b2e4      	uxtb	r4, r4
 801cfa6:	fb16 f604 	smulbb	r6, r6, r4
 801cfaa:	fb15 f504 	smulbb	r5, r5, r4
 801cfae:	fb0c 6c07 	mla	ip, ip, r7, r6
 801cfb2:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801cfb6:	fb1a fa04 	smulbb	sl, sl, r4
 801cfba:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801cfbe:	fa1f fc8c 	uxth.w	ip, ip
 801cfc2:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801cfc6:	fa5f f888 	uxtb.w	r8, r8
 801cfca:	fb06 a607 	mla	r6, r6, r7, sl
 801cfce:	f10c 0401 	add.w	r4, ip, #1
 801cfd2:	fb08 5507 	mla	r5, r8, r7, r5
 801cfd6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801cfda:	b2ad      	uxth	r5, r5
 801cfdc:	b2b6      	uxth	r6, r6
 801cfde:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801cfe2:	f105 0a01 	add.w	sl, r5, #1
 801cfe6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cfea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cfee:	ea4a 0c0c 	orr.w	ip, sl, ip
 801cff2:	f106 0a01 	add.w	sl, r6, #1
 801cff6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cffa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cffe:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d002:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d006:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801d00a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d00c:	f109 0901 	add.w	r9, r9, #1
 801d010:	4421      	add	r1, r4
 801d012:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d014:	4422      	add	r2, r4
 801d016:	e79c      	b.n	801cf52 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801d018:	b007      	add	sp, #28
 801d01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d01e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d01e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d022:	b085      	sub	sp, #20
 801d024:	468b      	mov	fp, r1
 801d026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d02a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d02c:	9203      	str	r2, [sp, #12]
 801d02e:	6861      	ldr	r1, [r4, #4]
 801d030:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801d034:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 801d038:	fb01 2000 	mla	r0, r1, r0, r2
 801d03c:	6822      	ldr	r2, [r4, #0]
 801d03e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801d042:	f8d8 2000 	ldr.w	r2, [r8]
 801d046:	9200      	str	r2, [sp, #0]
 801d048:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801d04c:	9201      	str	r2, [sp, #4]
 801d04e:	f1bb 0f00 	cmp.w	fp, #0
 801d052:	dc03      	bgt.n	801d05c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d054:	9a03      	ldr	r2, [sp, #12]
 801d056:	2a00      	cmp	r2, #0
 801d058:	f340 8146 	ble.w	801d2e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801d05c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d05e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801d062:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d066:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d068:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801d06c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d070:	2b00      	cmp	r3, #0
 801d072:	dd0e      	ble.n	801d092 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d074:	140c      	asrs	r4, r1, #16
 801d076:	d405      	bmi.n	801d084 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d078:	42bc      	cmp	r4, r7
 801d07a:	da03      	bge.n	801d084 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d07c:	1414      	asrs	r4, r2, #16
 801d07e:	d401      	bmi.n	801d084 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d080:	42b4      	cmp	r4, r6
 801d082:	db07      	blt.n	801d094 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d084:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d086:	3b01      	subs	r3, #1
 801d088:	3002      	adds	r0, #2
 801d08a:	4421      	add	r1, r4
 801d08c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d08e:	4422      	add	r2, r4
 801d090:	e7ee      	b.n	801d070 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d092:	d017      	beq.n	801d0c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d094:	1e5c      	subs	r4, r3, #1
 801d096:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801d098:	fb05 1504 	mla	r5, r5, r4, r1
 801d09c:	142d      	asrs	r5, r5, #16
 801d09e:	d409      	bmi.n	801d0b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d0a0:	42bd      	cmp	r5, r7
 801d0a2:	da07      	bge.n	801d0b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d0a4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801d0a6:	fb05 2404 	mla	r4, r5, r4, r2
 801d0aa:	1424      	asrs	r4, r4, #16
 801d0ac:	d402      	bmi.n	801d0b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d0ae:	42b4      	cmp	r4, r6
 801d0b0:	f2c0 80b3 	blt.w	801d21a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801d0b4:	2600      	movs	r6, #0
 801d0b6:	199c      	adds	r4, r3, r6
 801d0b8:	2c00      	cmp	r4, #0
 801d0ba:	dc3e      	bgt.n	801d13a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d0bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d0c0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d0c4:	f1bb 0f00 	cmp.w	fp, #0
 801d0c8:	f340 810e 	ble.w	801d2e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801d0cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d0d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d0d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d0d6:	f1bb 0b01 	subs.w	fp, fp, #1
 801d0da:	eeb0 6a62 	vmov.f32	s12, s5
 801d0de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d0e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d0e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d0ea:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d0ee:	eeb0 6a43 	vmov.f32	s12, s6
 801d0f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d0f6:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d0fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d0fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d102:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d106:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d10a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d10e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d112:	ee12 2a90 	vmov	r2, s5
 801d116:	eef0 2a47 	vmov.f32	s5, s14
 801d11a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d11e:	ee13 2a10 	vmov	r2, s6
 801d122:	9311      	str	r3, [sp, #68]	@ 0x44
 801d124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d126:	eeb0 3a67 	vmov.f32	s6, s15
 801d12a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d12e:	9a03      	ldr	r2, [sp, #12]
 801d130:	9312      	str	r3, [sp, #72]	@ 0x48
 801d132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d134:	bf08      	it	eq
 801d136:	4613      	moveq	r3, r2
 801d138:	e789      	b.n	801d04e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d13a:	140f      	asrs	r7, r1, #16
 801d13c:	d418      	bmi.n	801d170 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d13e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801d142:	42bd      	cmp	r5, r7
 801d144:	dd14      	ble.n	801d170 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d146:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d14a:	d411      	bmi.n	801d170 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d14c:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801d150:	4564      	cmp	r4, ip
 801d152:	dd0d      	ble.n	801d170 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d154:	b22d      	sxth	r5, r5
 801d156:	9c01      	ldr	r4, [sp, #4]
 801d158:	fb0c 7505 	mla	r5, ip, r5, r7
 801d15c:	5d64      	ldrb	r4, [r4, r5]
 801d15e:	2cff      	cmp	r4, #255	@ 0xff
 801d160:	d10c      	bne.n	801d17c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801d162:	9c00      	ldr	r4, [sp, #0]
 801d164:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801d168:	f06f 0401 	mvn.w	r4, #1
 801d16c:	4374      	muls	r4, r6
 801d16e:	5305      	strh	r5, [r0, r4]
 801d170:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d172:	3e01      	subs	r6, #1
 801d174:	4421      	add	r1, r4
 801d176:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d178:	4422      	add	r2, r4
 801d17a:	e79c      	b.n	801d0b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d17c:	2c00      	cmp	r4, #0
 801d17e:	d0f7      	beq.n	801d170 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d180:	9f00      	ldr	r7, [sp, #0]
 801d182:	fa1f fc84 	uxth.w	ip, r4
 801d186:	43e4      	mvns	r4, r4
 801d188:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801d18c:	f06f 0501 	mvn.w	r5, #1
 801d190:	b2e4      	uxtb	r4, r4
 801d192:	4375      	muls	r5, r6
 801d194:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801d198:	9502      	str	r5, [sp, #8]
 801d19a:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801d19e:	5b45      	ldrh	r5, [r0, r5]
 801d1a0:	122f      	asrs	r7, r5, #8
 801d1a2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d1a6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d1aa:	00ed      	lsls	r5, r5, #3
 801d1ac:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801d1b0:	fb17 f704 	smulbb	r7, r7, r4
 801d1b4:	b2ed      	uxtb	r5, r5
 801d1b6:	fb1a fa04 	smulbb	sl, sl, r4
 801d1ba:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801d1be:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801d1c2:	fb15 f504 	smulbb	r5, r5, r4
 801d1c6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801d1ca:	fa1f fe8e 	uxth.w	lr, lr
 801d1ce:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d1d2:	fa5f f989 	uxtb.w	r9, r9
 801d1d6:	fb07 a70c 	mla	r7, r7, ip, sl
 801d1da:	f10e 0401 	add.w	r4, lr, #1
 801d1de:	fb09 550c 	mla	r5, r9, ip, r5
 801d1e2:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801d1e6:	9c02      	ldr	r4, [sp, #8]
 801d1e8:	b2ad      	uxth	r5, r5
 801d1ea:	b2bf      	uxth	r7, r7
 801d1ec:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801d1f0:	f105 0a01 	add.w	sl, r5, #1
 801d1f4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d1f8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d1fc:	ea4a 0e0e 	orr.w	lr, sl, lr
 801d200:	f107 0a01 	add.w	sl, r7, #1
 801d204:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801d208:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d20c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d210:	ea4e 0e0a 	orr.w	lr, lr, sl
 801d214:	f820 e004 	strh.w	lr, [r0, r4]
 801d218:	e7aa      	b.n	801d170 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d21a:	f04f 0900 	mov.w	r9, #0
 801d21e:	eba3 0409 	sub.w	r4, r3, r9
 801d222:	2c00      	cmp	r4, #0
 801d224:	f77f af4a 	ble.w	801d0bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d228:	1414      	asrs	r4, r2, #16
 801d22a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801d22e:	140d      	asrs	r5, r1, #16
 801d230:	fb06 5504 	mla	r5, r6, r4, r5
 801d234:	9c01      	ldr	r4, [sp, #4]
 801d236:	5d64      	ldrb	r4, [r4, r5]
 801d238:	2cff      	cmp	r4, #255	@ 0xff
 801d23a:	d10b      	bne.n	801d254 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801d23c:	9c00      	ldr	r4, [sp, #0]
 801d23e:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801d242:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801d246:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d248:	f109 0901 	add.w	r9, r9, #1
 801d24c:	4421      	add	r1, r4
 801d24e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d250:	4422      	add	r2, r4
 801d252:	e7e4      	b.n	801d21e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d254:	2c00      	cmp	r4, #0
 801d256:	d0f6      	beq.n	801d246 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801d258:	9e00      	ldr	r6, [sp, #0]
 801d25a:	b2a7      	uxth	r7, r4
 801d25c:	43e4      	mvns	r4, r4
 801d25e:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801d262:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801d266:	b2e4      	uxtb	r4, r4
 801d268:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d26c:	122e      	asrs	r6, r5, #8
 801d26e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d272:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d276:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801d27a:	00ed      	lsls	r5, r5, #3
 801d27c:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801d280:	fb16 f604 	smulbb	r6, r6, r4
 801d284:	b2ed      	uxtb	r5, r5
 801d286:	fb1a fa04 	smulbb	sl, sl, r4
 801d28a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801d28e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d292:	fb15 f504 	smulbb	r5, r5, r4
 801d296:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d29a:	fa1f fc8c 	uxth.w	ip, ip
 801d29e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d2a2:	fa5f fe8e 	uxtb.w	lr, lr
 801d2a6:	fb06 a607 	mla	r6, r6, r7, sl
 801d2aa:	f10c 0401 	add.w	r4, ip, #1
 801d2ae:	fb0e 5507 	mla	r5, lr, r7, r5
 801d2b2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801d2b6:	b2ad      	uxth	r5, r5
 801d2b8:	b2b6      	uxth	r6, r6
 801d2ba:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d2be:	f105 0a01 	add.w	sl, r5, #1
 801d2c2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d2c6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d2ca:	ea4a 0c0c 	orr.w	ip, sl, ip
 801d2ce:	f106 0a01 	add.w	sl, r6, #1
 801d2d2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d2d6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d2da:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d2de:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d2e2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801d2e6:	e7ae      	b.n	801d246 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801d2e8:	b005      	add	sp, #20
 801d2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d2ee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d2ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2f2:	b085      	sub	sp, #20
 801d2f4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d2f6:	9203      	str	r2, [sp, #12]
 801d2f8:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801d2fc:	9100      	str	r1, [sp, #0]
 801d2fe:	9201      	str	r2, [sp, #4]
 801d300:	6841      	ldr	r1, [r0, #4]
 801d302:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801d306:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801d30a:	fb01 2404 	mla	r4, r1, r4, r2
 801d30e:	6802      	ldr	r2, [r0, #0]
 801d310:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d314:	f8de 2000 	ldr.w	r2, [lr]
 801d318:	9202      	str	r2, [sp, #8]
 801d31a:	9a01      	ldr	r2, [sp, #4]
 801d31c:	43d6      	mvns	r6, r2
 801d31e:	b2f6      	uxtb	r6, r6
 801d320:	9a00      	ldr	r2, [sp, #0]
 801d322:	2a00      	cmp	r2, #0
 801d324:	dc03      	bgt.n	801d32e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d326:	9a03      	ldr	r2, [sp, #12]
 801d328:	2a00      	cmp	r2, #0
 801d32a:	f340 8124 	ble.w	801d576 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801d32e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d330:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801d334:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d338:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d33a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801d33e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d342:	2b00      	cmp	r3, #0
 801d344:	dd0e      	ble.n	801d364 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d346:	1408      	asrs	r0, r1, #16
 801d348:	d405      	bmi.n	801d356 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d34a:	4560      	cmp	r0, ip
 801d34c:	da03      	bge.n	801d356 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d34e:	1410      	asrs	r0, r2, #16
 801d350:	d401      	bmi.n	801d356 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d352:	42b8      	cmp	r0, r7
 801d354:	db07      	blt.n	801d366 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d356:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d358:	3b01      	subs	r3, #1
 801d35a:	3402      	adds	r4, #2
 801d35c:	4401      	add	r1, r0
 801d35e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d360:	4402      	add	r2, r0
 801d362:	e7ee      	b.n	801d342 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801d364:	d06e      	beq.n	801d444 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d366:	1e58      	subs	r0, r3, #1
 801d368:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801d36a:	fb05 1500 	mla	r5, r5, r0, r1
 801d36e:	142d      	asrs	r5, r5, #16
 801d370:	d45c      	bmi.n	801d42c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d372:	4565      	cmp	r5, ip
 801d374:	da5a      	bge.n	801d42c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d376:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801d378:	fb05 2000 	mla	r0, r5, r0, r2
 801d37c:	1400      	asrs	r0, r0, #16
 801d37e:	d455      	bmi.n	801d42c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d380:	42b8      	cmp	r0, r7
 801d382:	da53      	bge.n	801d42c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d384:	4699      	mov	r9, r3
 801d386:	46a2      	mov	sl, r4
 801d388:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801d38c:	f1b9 0f00 	cmp.w	r9, #0
 801d390:	dd54      	ble.n	801d43c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d392:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d396:	140d      	asrs	r5, r1, #16
 801d398:	1410      	asrs	r0, r2, #16
 801d39a:	f109 39ff 	add.w	r9, r9, #4294967295
 801d39e:	fb07 5000 	mla	r0, r7, r0, r5
 801d3a2:	9d02      	ldr	r5, [sp, #8]
 801d3a4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d3a8:	f8ba 5000 	ldrh.w	r5, [sl]
 801d3ac:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d3b0:	122f      	asrs	r7, r5, #8
 801d3b2:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801d3b6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d3ba:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d3be:	00ed      	lsls	r5, r5, #3
 801d3c0:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801d3c4:	fb17 f706 	smulbb	r7, r7, r6
 801d3c8:	b2ed      	uxtb	r5, r5
 801d3ca:	fb18 f806 	smulbb	r8, r8, r6
 801d3ce:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801d3d2:	10c7      	asrs	r7, r0, #3
 801d3d4:	fb15 f506 	smulbb	r5, r5, r6
 801d3d8:	00c0      	lsls	r0, r0, #3
 801d3da:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d3de:	fa1f fc8c 	uxth.w	ip, ip
 801d3e2:	b2c0      	uxtb	r0, r0
 801d3e4:	fb07 870b 	mla	r7, r7, fp, r8
 801d3e8:	fb00 500b 	mla	r0, r0, fp, r5
 801d3ec:	f10c 0501 	add.w	r5, ip, #1
 801d3f0:	b2bf      	uxth	r7, r7
 801d3f2:	b280      	uxth	r0, r0
 801d3f4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d3f8:	f107 0801 	add.w	r8, r7, #1
 801d3fc:	1c45      	adds	r5, r0, #1
 801d3fe:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801d402:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d406:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d40a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d40c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d410:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d414:	4401      	add	r1, r0
 801d416:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801d41a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d41c:	ea45 0c0c 	orr.w	ip, r5, ip
 801d420:	4402      	add	r2, r0
 801d422:	ea4c 0c08 	orr.w	ip, ip, r8
 801d426:	f82a cb02 	strh.w	ip, [sl], #2
 801d42a:	e7af      	b.n	801d38c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d42c:	f04f 0800 	mov.w	r8, #0
 801d430:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801d434:	eb03 0008 	add.w	r0, r3, r8
 801d438:	2800      	cmp	r0, #0
 801d43a:	dc41      	bgt.n	801d4c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d43c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d440:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d444:	9b00      	ldr	r3, [sp, #0]
 801d446:	2b00      	cmp	r3, #0
 801d448:	f340 8095 	ble.w	801d576 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801d44c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d450:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d452:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d456:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d45a:	eef0 6a62 	vmov.f32	s13, s5
 801d45e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d462:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d466:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d46a:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801d46e:	eef0 6a43 	vmov.f32	s13, s6
 801d472:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d476:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801d47a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d47e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d482:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d486:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d48a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d48e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d492:	ee12 2a90 	vmov	r2, s5
 801d496:	eef0 2a47 	vmov.f32	s5, s14
 801d49a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d49e:	ee13 2a10 	vmov	r2, s6
 801d4a2:	9311      	str	r3, [sp, #68]	@ 0x44
 801d4a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d4a6:	eeb0 3a67 	vmov.f32	s6, s15
 801d4aa:	fb92 f3f3 	sdiv	r3, r2, r3
 801d4ae:	9312      	str	r3, [sp, #72]	@ 0x48
 801d4b0:	9b00      	ldr	r3, [sp, #0]
 801d4b2:	9a03      	ldr	r2, [sp, #12]
 801d4b4:	3b01      	subs	r3, #1
 801d4b6:	9300      	str	r3, [sp, #0]
 801d4b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d4ba:	bf08      	it	eq
 801d4bc:	4613      	moveq	r3, r2
 801d4be:	e72f      	b.n	801d320 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801d4c0:	140f      	asrs	r7, r1, #16
 801d4c2:	d451      	bmi.n	801d568 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d4c4:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d4c8:	42bd      	cmp	r5, r7
 801d4ca:	dd4d      	ble.n	801d568 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d4cc:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d4d0:	d44a      	bmi.n	801d568 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d4d2:	f8de 000c 	ldr.w	r0, [lr, #12]
 801d4d6:	4560      	cmp	r0, ip
 801d4d8:	dd46      	ble.n	801d568 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d4da:	b22d      	sxth	r5, r5
 801d4dc:	9802      	ldr	r0, [sp, #8]
 801d4de:	fb0c 7505 	mla	r5, ip, r5, r7
 801d4e2:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801d4e6:	f06f 0501 	mvn.w	r5, #1
 801d4ea:	fb05 fb08 	mul.w	fp, r5, r8
 801d4ee:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d4f2:	f834 500b 	ldrh.w	r5, [r4, fp]
 801d4f6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d4fa:	122f      	asrs	r7, r5, #8
 801d4fc:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d500:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d504:	00ed      	lsls	r5, r5, #3
 801d506:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801d50a:	fb17 f706 	smulbb	r7, r7, r6
 801d50e:	b2ed      	uxtb	r5, r5
 801d510:	fb19 f906 	smulbb	r9, r9, r6
 801d514:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801d518:	10c7      	asrs	r7, r0, #3
 801d51a:	fb15 f506 	smulbb	r5, r5, r6
 801d51e:	00c0      	lsls	r0, r0, #3
 801d520:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d524:	fa1f fc8c 	uxth.w	ip, ip
 801d528:	b2c0      	uxtb	r0, r0
 801d52a:	fb07 970a 	mla	r7, r7, sl, r9
 801d52e:	fb00 500a 	mla	r0, r0, sl, r5
 801d532:	f10c 0501 	add.w	r5, ip, #1
 801d536:	b2bf      	uxth	r7, r7
 801d538:	b280      	uxth	r0, r0
 801d53a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d53e:	f107 0901 	add.w	r9, r7, #1
 801d542:	1c45      	adds	r5, r0, #1
 801d544:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801d548:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d54c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d550:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d554:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d558:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801d55c:	ea45 0c0c 	orr.w	ip, r5, ip
 801d560:	ea4c 0c09 	orr.w	ip, ip, r9
 801d564:	f824 c00b 	strh.w	ip, [r4, fp]
 801d568:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d56a:	f108 38ff 	add.w	r8, r8, #4294967295
 801d56e:	4401      	add	r1, r0
 801d570:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d572:	4402      	add	r2, r0
 801d574:	e75e      	b.n	801d434 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d576:	b005      	add	sp, #20
 801d578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d57c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d580:	b085      	sub	sp, #20
 801d582:	4693      	mov	fp, r2
 801d584:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d588:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d58a:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801d58c:	6870      	ldr	r0, [r6, #4]
 801d58e:	9101      	str	r1, [sp, #4]
 801d590:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801d594:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801d598:	fb00 2404 	mla	r4, r0, r4, r2
 801d59c:	6832      	ldr	r2, [r6, #0]
 801d59e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d5a2:	682a      	ldr	r2, [r5, #0]
 801d5a4:	9202      	str	r2, [sp, #8]
 801d5a6:	9a01      	ldr	r2, [sp, #4]
 801d5a8:	2a00      	cmp	r2, #0
 801d5aa:	dc03      	bgt.n	801d5b4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d5ac:	f1bb 0f00 	cmp.w	fp, #0
 801d5b0:	f340 809a 	ble.w	801d6e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d5b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d5b6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d5ba:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d5be:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d5c0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d5c4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d5c8:	2b00      	cmp	r3, #0
 801d5ca:	dd0c      	ble.n	801d5e6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d5cc:	1406      	asrs	r6, r0, #16
 801d5ce:	d405      	bmi.n	801d5dc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d5d0:	454e      	cmp	r6, r9
 801d5d2:	da03      	bge.n	801d5dc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d5d4:	1416      	asrs	r6, r2, #16
 801d5d6:	d401      	bmi.n	801d5dc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d5d8:	4546      	cmp	r6, r8
 801d5da:	db05      	blt.n	801d5e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d5dc:	4470      	add	r0, lr
 801d5de:	4462      	add	r2, ip
 801d5e0:	3b01      	subs	r3, #1
 801d5e2:	3402      	adds	r4, #2
 801d5e4:	e7f0      	b.n	801d5c8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d5e6:	d00f      	beq.n	801d608 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d5e8:	1e5e      	subs	r6, r3, #1
 801d5ea:	fb0e 0706 	mla	r7, lr, r6, r0
 801d5ee:	143f      	asrs	r7, r7, #16
 801d5f0:	d541      	bpl.n	801d676 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801d5f2:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801d5f6:	4698      	mov	r8, r3
 801d5f8:	9603      	str	r6, [sp, #12]
 801d5fa:	f1b8 0f00 	cmp.w	r8, #0
 801d5fe:	dc56      	bgt.n	801d6ae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801d600:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d604:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d608:	9b01      	ldr	r3, [sp, #4]
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	dd6c      	ble.n	801d6e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d60e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d612:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d614:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d618:	eeb0 6a62 	vmov.f32	s12, s5
 801d61c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d620:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d624:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d628:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d62c:	eeb0 6a43 	vmov.f32	s12, s6
 801d630:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d634:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d638:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d63c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d640:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d644:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d648:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d64c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d650:	ee12 2a90 	vmov	r2, s5
 801d654:	eef0 2a47 	vmov.f32	s5, s14
 801d658:	fb92 fef3 	sdiv	lr, r2, r3
 801d65c:	ee13 2a10 	vmov	r2, s6
 801d660:	eeb0 3a67 	vmov.f32	s6, s15
 801d664:	fb92 fcf3 	sdiv	ip, r2, r3
 801d668:	9b01      	ldr	r3, [sp, #4]
 801d66a:	3b01      	subs	r3, #1
 801d66c:	9301      	str	r3, [sp, #4]
 801d66e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d670:	bf08      	it	eq
 801d672:	465b      	moveq	r3, fp
 801d674:	e797      	b.n	801d5a6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801d676:	454f      	cmp	r7, r9
 801d678:	dabb      	bge.n	801d5f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d67a:	fb0c 2606 	mla	r6, ip, r6, r2
 801d67e:	1436      	asrs	r6, r6, #16
 801d680:	d4b7      	bmi.n	801d5f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d682:	4546      	cmp	r6, r8
 801d684:	dab5      	bge.n	801d5f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d686:	461e      	mov	r6, r3
 801d688:	46a0      	mov	r8, r4
 801d68a:	2e00      	cmp	r6, #0
 801d68c:	ddb8      	ble.n	801d600 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d68e:	1417      	asrs	r7, r2, #16
 801d690:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801d694:	ea4f 4920 	mov.w	r9, r0, asr #16
 801d698:	9902      	ldr	r1, [sp, #8]
 801d69a:	4470      	add	r0, lr
 801d69c:	4462      	add	r2, ip
 801d69e:	fb0a 9707 	mla	r7, sl, r7, r9
 801d6a2:	3e01      	subs	r6, #1
 801d6a4:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801d6a8:	f828 7b02 	strh.w	r7, [r8], #2
 801d6ac:	e7ed      	b.n	801d68a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801d6ae:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d6b2:	d414      	bmi.n	801d6de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d6b4:	68ae      	ldr	r6, [r5, #8]
 801d6b6:	454e      	cmp	r6, r9
 801d6b8:	dd11      	ble.n	801d6de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d6ba:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d6be:	d40e      	bmi.n	801d6de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d6c0:	68ef      	ldr	r7, [r5, #12]
 801d6c2:	4557      	cmp	r7, sl
 801d6c4:	dd0b      	ble.n	801d6de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801d6c6:	b236      	sxth	r6, r6
 801d6c8:	f06f 0101 	mvn.w	r1, #1
 801d6cc:	9f02      	ldr	r7, [sp, #8]
 801d6ce:	fb0a 9606 	mla	r6, sl, r6, r9
 801d6d2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801d6d6:	fb01 f608 	mul.w	r6, r1, r8
 801d6da:	9903      	ldr	r1, [sp, #12]
 801d6dc:	538f      	strh	r7, [r1, r6]
 801d6de:	4470      	add	r0, lr
 801d6e0:	4462      	add	r2, ip
 801d6e2:	f108 38ff 	add.w	r8, r8, #4294967295
 801d6e6:	e788      	b.n	801d5fa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d6e8:	b005      	add	sp, #20
 801d6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d6ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d6ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6f2:	b087      	sub	sp, #28
 801d6f4:	468b      	mov	fp, r1
 801d6f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d6fa:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801d6fc:	9203      	str	r2, [sp, #12]
 801d6fe:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d702:	6841      	ldr	r1, [r0, #4]
 801d704:	9204      	str	r2, [sp, #16]
 801d706:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801d70a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801d70e:	fb01 2505 	mla	r5, r1, r5, r2
 801d712:	6802      	ldr	r2, [r0, #0]
 801d714:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801d718:	f8d9 2000 	ldr.w	r2, [r9]
 801d71c:	9201      	str	r2, [sp, #4]
 801d71e:	f1bb 0f00 	cmp.w	fp, #0
 801d722:	dc03      	bgt.n	801d72c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d724:	9a03      	ldr	r2, [sp, #12]
 801d726:	2a00      	cmp	r2, #0
 801d728:	f340 8158 	ble.w	801d9dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801d72c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d72e:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801d732:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d736:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d738:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801d73c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d740:	2b00      	cmp	r3, #0
 801d742:	dd0e      	ble.n	801d762 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d744:	1402      	asrs	r2, r0, #16
 801d746:	d405      	bmi.n	801d754 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d748:	42ba      	cmp	r2, r7
 801d74a:	da03      	bge.n	801d754 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d74c:	140a      	asrs	r2, r1, #16
 801d74e:	d401      	bmi.n	801d754 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d750:	42b2      	cmp	r2, r6
 801d752:	db07      	blt.n	801d764 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d754:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d756:	3b01      	subs	r3, #1
 801d758:	3502      	adds	r5, #2
 801d75a:	4410      	add	r0, r2
 801d75c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d75e:	4411      	add	r1, r2
 801d760:	e7ee      	b.n	801d740 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d762:	d017      	beq.n	801d794 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d764:	1e5a      	subs	r2, r3, #1
 801d766:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d768:	fb04 0402 	mla	r4, r4, r2, r0
 801d76c:	1424      	asrs	r4, r4, #16
 801d76e:	d409      	bmi.n	801d784 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d770:	42bc      	cmp	r4, r7
 801d772:	da07      	bge.n	801d784 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d774:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d776:	fb04 1202 	mla	r2, r4, r2, r1
 801d77a:	1412      	asrs	r2, r2, #16
 801d77c:	d402      	bmi.n	801d784 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d77e:	42b2      	cmp	r2, r6
 801d780:	f2c0 80bf 	blt.w	801d902 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d784:	2700      	movs	r7, #0
 801d786:	19da      	adds	r2, r3, r7
 801d788:	2a00      	cmp	r2, #0
 801d78a:	dc3e      	bgt.n	801d80a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d78c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d790:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801d794:	f1bb 0f00 	cmp.w	fp, #0
 801d798:	f340 8120 	ble.w	801d9dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801d79c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d7a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d7a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d7a6:	f1bb 0b01 	subs.w	fp, fp, #1
 801d7aa:	eeb0 6a62 	vmov.f32	s12, s5
 801d7ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d7b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d7b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d7ba:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801d7be:	eeb0 6a43 	vmov.f32	s12, s6
 801d7c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d7c6:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801d7ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d7ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d7d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d7d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d7da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d7de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d7e2:	ee12 2a90 	vmov	r2, s5
 801d7e6:	eef0 2a47 	vmov.f32	s5, s14
 801d7ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801d7ee:	ee13 2a10 	vmov	r2, s6
 801d7f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d7f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d7f6:	eeb0 3a67 	vmov.f32	s6, s15
 801d7fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801d7fe:	9a03      	ldr	r2, [sp, #12]
 801d800:	9314      	str	r3, [sp, #80]	@ 0x50
 801d802:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d804:	bf08      	it	eq
 801d806:	4613      	moveq	r3, r2
 801d808:	e789      	b.n	801d71e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d80a:	1406      	asrs	r6, r0, #16
 801d80c:	d42d      	bmi.n	801d86a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d80e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801d812:	42b4      	cmp	r4, r6
 801d814:	dd29      	ble.n	801d86a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d816:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801d81a:	d426      	bmi.n	801d86a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d81c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801d820:	4562      	cmp	r2, ip
 801d822:	dd22      	ble.n	801d86a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d824:	b224      	sxth	r4, r4
 801d826:	9a01      	ldr	r2, [sp, #4]
 801d828:	fb0c 6404 	mla	r4, ip, r4, r6
 801d82c:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801d830:	0e22      	lsrs	r2, r4, #24
 801d832:	d01a      	beq.n	801d86a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d834:	9e04      	ldr	r6, [sp, #16]
 801d836:	4372      	muls	r2, r6
 801d838:	1c56      	adds	r6, r2, #1
 801d83a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d83e:	0a26      	lsrs	r6, r4, #8
 801d840:	1212      	asrs	r2, r2, #8
 801d842:	9605      	str	r6, [sp, #20]
 801d844:	2aff      	cmp	r2, #255	@ 0xff
 801d846:	d116      	bne.n	801d876 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801d848:	f06f 0201 	mvn.w	r2, #1
 801d84c:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801d850:	fb02 fc07 	mul.w	ip, r2, r7
 801d854:	0962      	lsrs	r2, r4, #5
 801d856:	f026 0607 	bic.w	r6, r6, #7
 801d85a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d85e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d862:	4316      	orrs	r6, r2
 801d864:	4326      	orrs	r6, r4
 801d866:	f825 600c 	strh.w	r6, [r5, ip]
 801d86a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d86c:	3f01      	subs	r7, #1
 801d86e:	4410      	add	r0, r2
 801d870:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d872:	4411      	add	r1, r2
 801d874:	e787      	b.n	801d786 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d876:	f06f 0601 	mvn.w	r6, #1
 801d87a:	fa1f fa82 	uxth.w	sl, r2
 801d87e:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801d882:	43d2      	mvns	r2, r2
 801d884:	437e      	muls	r6, r7
 801d886:	b2e4      	uxtb	r4, r4
 801d888:	fb1c fc0a 	smulbb	ip, ip, sl
 801d88c:	b2d2      	uxtb	r2, r2
 801d88e:	f835 8006 	ldrh.w	r8, [r5, r6]
 801d892:	fb14 f40a 	smulbb	r4, r4, sl
 801d896:	9602      	str	r6, [sp, #8]
 801d898:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801d89c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801d8a0:	fb16 f60a 	smulbb	r6, r6, sl
 801d8a4:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801d8a8:	fb0e ce02 	mla	lr, lr, r2, ip
 801d8ac:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801d8b0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d8b4:	fa1f fe8e 	uxth.w	lr, lr
 801d8b8:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801d8bc:	fa5f f888 	uxtb.w	r8, r8
 801d8c0:	fb0c 6c02 	mla	ip, ip, r2, r6
 801d8c4:	fb08 4402 	mla	r4, r8, r2, r4
 801d8c8:	f10e 0201 	add.w	r2, lr, #1
 801d8cc:	fa1f fc8c 	uxth.w	ip, ip
 801d8d0:	b2a4      	uxth	r4, r4
 801d8d2:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801d8d6:	9a02      	ldr	r2, [sp, #8]
 801d8d8:	1c66      	adds	r6, r4, #1
 801d8da:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801d8de:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801d8e2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d8e6:	ea46 0e0e 	orr.w	lr, r6, lr
 801d8ea:	f10c 0601 	add.w	r6, ip, #1
 801d8ee:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801d8f2:	0976      	lsrs	r6, r6, #5
 801d8f4:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801d8f8:	ea4e 0e06 	orr.w	lr, lr, r6
 801d8fc:	f825 e002 	strh.w	lr, [r5, r2]
 801d900:	e7b3      	b.n	801d86a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d902:	f04f 0800 	mov.w	r8, #0
 801d906:	eba3 0208 	sub.w	r2, r3, r8
 801d90a:	2a00      	cmp	r2, #0
 801d90c:	f77f af3e 	ble.w	801d78c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d910:	1404      	asrs	r4, r0, #16
 801d912:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801d916:	140a      	asrs	r2, r1, #16
 801d918:	fb06 4202 	mla	r2, r6, r2, r4
 801d91c:	9c01      	ldr	r4, [sp, #4]
 801d91e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801d922:	0e22      	lsrs	r2, r4, #24
 801d924:	d015      	beq.n	801d952 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801d926:	9e04      	ldr	r6, [sp, #16]
 801d928:	4372      	muls	r2, r6
 801d92a:	1c56      	adds	r6, r2, #1
 801d92c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d930:	0a26      	lsrs	r6, r4, #8
 801d932:	1212      	asrs	r2, r2, #8
 801d934:	2aff      	cmp	r2, #255	@ 0xff
 801d936:	d113      	bne.n	801d960 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801d938:	0962      	lsrs	r2, r4, #5
 801d93a:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801d93e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d942:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d946:	f026 0607 	bic.w	r6, r6, #7
 801d94a:	4316      	orrs	r6, r2
 801d94c:	4326      	orrs	r6, r4
 801d94e:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801d952:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d954:	f108 0801 	add.w	r8, r8, #1
 801d958:	4410      	add	r0, r2
 801d95a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d95c:	4411      	add	r1, r2
 801d95e:	e7d2      	b.n	801d906 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801d960:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801d964:	fa1f fa82 	uxth.w	sl, r2
 801d968:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801d96c:	43d2      	mvns	r2, r2
 801d96e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d972:	fb17 f70a 	smulbb	r7, r7, sl
 801d976:	b2d2      	uxtb	r2, r2
 801d978:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d97c:	b2e4      	uxtb	r4, r4
 801d97e:	b2f6      	uxtb	r6, r6
 801d980:	fb0c 7c02 	mla	ip, ip, r2, r7
 801d984:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801d988:	fb14 f40a 	smulbb	r4, r4, sl
 801d98c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d990:	fa1f fc8c 	uxth.w	ip, ip
 801d994:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801d998:	fb16 f60a 	smulbb	r6, r6, sl
 801d99c:	fa5f fe8e 	uxtb.w	lr, lr
 801d9a0:	fb0e 4402 	mla	r4, lr, r2, r4
 801d9a4:	fb07 6702 	mla	r7, r7, r2, r6
 801d9a8:	f10c 0201 	add.w	r2, ip, #1
 801d9ac:	b2a4      	uxth	r4, r4
 801d9ae:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d9b2:	1c66      	adds	r6, r4, #1
 801d9b4:	b2bf      	uxth	r7, r7
 801d9b6:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801d9ba:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801d9be:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d9c2:	ea46 0c0c 	orr.w	ip, r6, ip
 801d9c6:	1c7e      	adds	r6, r7, #1
 801d9c8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801d9cc:	0976      	lsrs	r6, r6, #5
 801d9ce:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801d9d2:	ea4c 0c06 	orr.w	ip, ip, r6
 801d9d6:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801d9da:	e7ba      	b.n	801d952 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801d9dc:	b007      	add	sp, #28
 801d9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d9e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9e8:	b085      	sub	sp, #20
 801d9ea:	468b      	mov	fp, r1
 801d9ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d9f0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d9f2:	9203      	str	r2, [sp, #12]
 801d9f4:	6841      	ldr	r1, [r0, #4]
 801d9f6:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801d9fa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801d9fe:	fb01 2404 	mla	r4, r1, r4, r2
 801da02:	6802      	ldr	r2, [r0, #0]
 801da04:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801da08:	f8d8 2000 	ldr.w	r2, [r8]
 801da0c:	9201      	str	r2, [sp, #4]
 801da0e:	f1bb 0f00 	cmp.w	fp, #0
 801da12:	dc03      	bgt.n	801da1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801da14:	9a03      	ldr	r2, [sp, #12]
 801da16:	2a00      	cmp	r2, #0
 801da18:	f340 814f 	ble.w	801dcba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801da1c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801da1e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801da22:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801da26:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801da28:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801da2c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801da30:	2b00      	cmp	r3, #0
 801da32:	dd0e      	ble.n	801da52 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801da34:	1408      	asrs	r0, r1, #16
 801da36:	d405      	bmi.n	801da44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801da38:	42b8      	cmp	r0, r7
 801da3a:	da03      	bge.n	801da44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801da3c:	1410      	asrs	r0, r2, #16
 801da3e:	d401      	bmi.n	801da44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801da40:	42b0      	cmp	r0, r6
 801da42:	db07      	blt.n	801da54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801da44:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801da46:	3b01      	subs	r3, #1
 801da48:	3402      	adds	r4, #2
 801da4a:	4401      	add	r1, r0
 801da4c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801da4e:	4402      	add	r2, r0
 801da50:	e7ee      	b.n	801da30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801da52:	d017      	beq.n	801da84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801da54:	1e58      	subs	r0, r3, #1
 801da56:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801da58:	fb05 1500 	mla	r5, r5, r0, r1
 801da5c:	142d      	asrs	r5, r5, #16
 801da5e:	d409      	bmi.n	801da74 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801da60:	42bd      	cmp	r5, r7
 801da62:	da07      	bge.n	801da74 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801da64:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801da66:	fb05 2000 	mla	r0, r5, r0, r2
 801da6a:	1400      	asrs	r0, r0, #16
 801da6c:	d402      	bmi.n	801da74 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801da6e:	42b0      	cmp	r0, r6
 801da70:	f2c0 80ba 	blt.w	801dbe8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801da74:	2600      	movs	r6, #0
 801da76:	1998      	adds	r0, r3, r6
 801da78:	2800      	cmp	r0, #0
 801da7a:	dc3e      	bgt.n	801dafa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801da7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801da80:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801da84:	f1bb 0f00 	cmp.w	fp, #0
 801da88:	f340 8117 	ble.w	801dcba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801da8c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801da90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801da92:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801da96:	f1bb 0b01 	subs.w	fp, fp, #1
 801da9a:	eeb0 6a62 	vmov.f32	s12, s5
 801da9e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801daa2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801daa6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801daaa:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801daae:	eeb0 6a43 	vmov.f32	s12, s6
 801dab2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dab6:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801daba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dabe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dac2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dac6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801daca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dace:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dad2:	ee12 2a90 	vmov	r2, s5
 801dad6:	eef0 2a47 	vmov.f32	s5, s14
 801dada:	fb92 f3f3 	sdiv	r3, r2, r3
 801dade:	ee13 2a10 	vmov	r2, s6
 801dae2:	9311      	str	r3, [sp, #68]	@ 0x44
 801dae4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dae6:	eeb0 3a67 	vmov.f32	s6, s15
 801daea:	fb92 f3f3 	sdiv	r3, r2, r3
 801daee:	9a03      	ldr	r2, [sp, #12]
 801daf0:	9312      	str	r3, [sp, #72]	@ 0x48
 801daf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801daf4:	bf08      	it	eq
 801daf6:	4613      	moveq	r3, r2
 801daf8:	e789      	b.n	801da0e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801dafa:	140f      	asrs	r7, r1, #16
 801dafc:	d424      	bmi.n	801db48 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801dafe:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801db02:	42bd      	cmp	r5, r7
 801db04:	dd20      	ble.n	801db48 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801db06:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801db0a:	d41d      	bmi.n	801db48 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801db0c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801db10:	4560      	cmp	r0, ip
 801db12:	dd19      	ble.n	801db48 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801db14:	b22d      	sxth	r5, r5
 801db16:	9801      	ldr	r0, [sp, #4]
 801db18:	fb0c 7505 	mla	r5, ip, r5, r7
 801db1c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801db20:	0e07      	lsrs	r7, r0, #24
 801db22:	2fff      	cmp	r7, #255	@ 0xff
 801db24:	d116      	bne.n	801db54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801db26:	f06f 0501 	mvn.w	r5, #1
 801db2a:	fb05 f706 	mul.w	r7, r5, r6
 801db2e:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801db32:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801db36:	0945      	lsrs	r5, r0, #5
 801db38:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801db3c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801db40:	ea4c 0505 	orr.w	r5, ip, r5
 801db44:	4305      	orrs	r5, r0
 801db46:	53e5      	strh	r5, [r4, r7]
 801db48:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801db4a:	3e01      	subs	r6, #1
 801db4c:	4401      	add	r1, r0
 801db4e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801db50:	4402      	add	r2, r0
 801db52:	e790      	b.n	801da76 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801db54:	b2fd      	uxtb	r5, r7
 801db56:	2f00      	cmp	r7, #0
 801db58:	d0f6      	beq.n	801db48 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801db5a:	f06f 0701 	mvn.w	r7, #1
 801db5e:	fa1f f985 	uxth.w	r9, r5
 801db62:	43ed      	mvns	r5, r5
 801db64:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801db68:	4377      	muls	r7, r6
 801db6a:	fb1a fa09 	smulbb	sl, sl, r9
 801db6e:	b2ed      	uxtb	r5, r5
 801db70:	f834 e007 	ldrh.w	lr, [r4, r7]
 801db74:	9702      	str	r7, [sp, #8]
 801db76:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801db7a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801db7e:	fb17 f709 	smulbb	r7, r7, r9
 801db82:	b2c0      	uxtb	r0, r0
 801db84:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801db88:	fb10 f009 	smulbb	r0, r0, r9
 801db8c:	fb0c 7c05 	mla	ip, ip, r5, r7
 801db90:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801db94:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801db98:	fa1f fc8c 	uxth.w	ip, ip
 801db9c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801dba0:	fa5f fe8e 	uxtb.w	lr, lr
 801dba4:	fb07 a705 	mla	r7, r7, r5, sl
 801dba8:	fb0e 0005 	mla	r0, lr, r5, r0
 801dbac:	f10c 0501 	add.w	r5, ip, #1
 801dbb0:	b2bf      	uxth	r7, r7
 801dbb2:	b280      	uxth	r0, r0
 801dbb4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801dbb8:	f100 0a01 	add.w	sl, r0, #1
 801dbbc:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801dbc0:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801dbc4:	9802      	ldr	r0, [sp, #8]
 801dbc6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801dbca:	ea4a 0c0c 	orr.w	ip, sl, ip
 801dbce:	f107 0a01 	add.w	sl, r7, #1
 801dbd2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801dbd6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dbda:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801dbde:	ea4c 0c0a 	orr.w	ip, ip, sl
 801dbe2:	f824 c000 	strh.w	ip, [r4, r0]
 801dbe6:	e7af      	b.n	801db48 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801dbe8:	f04f 0e00 	mov.w	lr, #0
 801dbec:	eba3 000e 	sub.w	r0, r3, lr
 801dbf0:	2800      	cmp	r0, #0
 801dbf2:	f77f af43 	ble.w	801da7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801dbf6:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801dbfa:	140d      	asrs	r5, r1, #16
 801dbfc:	1410      	asrs	r0, r2, #16
 801dbfe:	fb06 5000 	mla	r0, r6, r0, r5
 801dc02:	9d01      	ldr	r5, [sp, #4]
 801dc04:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801dc08:	0e2e      	lsrs	r6, r5, #24
 801dc0a:	2eff      	cmp	r6, #255	@ 0xff
 801dc0c:	d112      	bne.n	801dc34 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801dc0e:	482c      	ldr	r0, [pc, #176]	@ (801dcc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801dc10:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801dc14:	0968      	lsrs	r0, r5, #5
 801dc16:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801dc1a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801dc1e:	4330      	orrs	r0, r6
 801dc20:	4328      	orrs	r0, r5
 801dc22:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801dc26:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801dc28:	f10e 0e01 	add.w	lr, lr, #1
 801dc2c:	4401      	add	r1, r0
 801dc2e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dc30:	4402      	add	r2, r0
 801dc32:	e7db      	b.n	801dbec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801dc34:	b2f0      	uxtb	r0, r6
 801dc36:	2e00      	cmp	r6, #0
 801dc38:	d0f5      	beq.n	801dc26 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801dc3a:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801dc3e:	fa1f f980 	uxth.w	r9, r0
 801dc42:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801dc46:	43c0      	mvns	r0, r0
 801dc48:	ea4f 272c 	mov.w	r7, ip, asr #8
 801dc4c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801dc50:	fb16 f609 	smulbb	r6, r6, r9
 801dc54:	b2c0      	uxtb	r0, r0
 801dc56:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801dc5a:	b2ed      	uxtb	r5, r5
 801dc5c:	fb1a fa09 	smulbb	sl, sl, r9
 801dc60:	fb07 6700 	mla	r7, r7, r0, r6
 801dc64:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801dc68:	fb15 f509 	smulbb	r5, r5, r9
 801dc6c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801dc70:	b2bf      	uxth	r7, r7
 801dc72:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801dc76:	fa5f fc8c 	uxtb.w	ip, ip
 801dc7a:	fb06 a600 	mla	r6, r6, r0, sl
 801dc7e:	fb0c 5500 	mla	r5, ip, r0, r5
 801dc82:	1c78      	adds	r0, r7, #1
 801dc84:	b2b6      	uxth	r6, r6
 801dc86:	b2ad      	uxth	r5, r5
 801dc88:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801dc8c:	f105 0a01 	add.w	sl, r5, #1
 801dc90:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801dc94:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801dc98:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801dc9c:	ea4a 0707 	orr.w	r7, sl, r7
 801dca0:	f106 0a01 	add.w	sl, r6, #1
 801dca4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801dca8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dcac:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801dcb0:	ea47 070a 	orr.w	r7, r7, sl
 801dcb4:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801dcb8:	e7b5      	b.n	801dc26 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801dcba:	b005      	add	sp, #20
 801dcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcc0:	fffff800 	.word	0xfffff800

0801dcc4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcc8:	b087      	sub	sp, #28
 801dcca:	468b      	mov	fp, r1
 801dccc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dcd0:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801dcd2:	9203      	str	r2, [sp, #12]
 801dcd4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801dcd8:	6841      	ldr	r1, [r0, #4]
 801dcda:	9204      	str	r2, [sp, #16]
 801dcdc:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801dce0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801dce4:	fb01 2404 	mla	r4, r1, r4, r2
 801dce8:	6802      	ldr	r2, [r0, #0]
 801dcea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801dcee:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801dcf2:	3201      	adds	r2, #1
 801dcf4:	f022 0201 	bic.w	r2, r2, #1
 801dcf8:	9200      	str	r2, [sp, #0]
 801dcfa:	f8d9 2000 	ldr.w	r2, [r9]
 801dcfe:	9201      	str	r2, [sp, #4]
 801dd00:	f1bb 0f00 	cmp.w	fp, #0
 801dd04:	dc03      	bgt.n	801dd0e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801dd06:	9a03      	ldr	r2, [sp, #12]
 801dd08:	2a00      	cmp	r2, #0
 801dd0a:	f340 816a 	ble.w	801dfe2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801dd0e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801dd10:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801dd14:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801dd18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801dd1a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801dd1e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801dd22:	2b00      	cmp	r3, #0
 801dd24:	dd0e      	ble.n	801dd44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801dd26:	1402      	asrs	r2, r0, #16
 801dd28:	d405      	bmi.n	801dd36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dd2a:	42ba      	cmp	r2, r7
 801dd2c:	da03      	bge.n	801dd36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dd2e:	140a      	asrs	r2, r1, #16
 801dd30:	d401      	bmi.n	801dd36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dd32:	42b2      	cmp	r2, r6
 801dd34:	db07      	blt.n	801dd46 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801dd36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dd38:	3b01      	subs	r3, #1
 801dd3a:	3402      	adds	r4, #2
 801dd3c:	4410      	add	r0, r2
 801dd3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dd40:	4411      	add	r1, r2
 801dd42:	e7ee      	b.n	801dd22 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801dd44:	d017      	beq.n	801dd76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801dd46:	1e5a      	subs	r2, r3, #1
 801dd48:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801dd4a:	fb05 0502 	mla	r5, r5, r2, r0
 801dd4e:	142d      	asrs	r5, r5, #16
 801dd50:	d409      	bmi.n	801dd66 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801dd52:	42bd      	cmp	r5, r7
 801dd54:	da07      	bge.n	801dd66 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801dd56:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801dd58:	fb05 1202 	mla	r2, r5, r2, r1
 801dd5c:	1412      	asrs	r2, r2, #16
 801dd5e:	d402      	bmi.n	801dd66 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801dd60:	42b2      	cmp	r2, r6
 801dd62:	f2c0 80c8 	blt.w	801def6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801dd66:	2700      	movs	r7, #0
 801dd68:	19da      	adds	r2, r3, r7
 801dd6a:	2a00      	cmp	r2, #0
 801dd6c:	dc3e      	bgt.n	801ddec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801dd6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dd72:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dd76:	f1bb 0f00 	cmp.w	fp, #0
 801dd7a:	f340 8132 	ble.w	801dfe2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801dd7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dd84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd88:	f1bb 0b01 	subs.w	fp, fp, #1
 801dd8c:	eeb0 6a62 	vmov.f32	s12, s5
 801dd90:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dd94:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dd98:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dd9c:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801dda0:	eeb0 6a43 	vmov.f32	s12, s6
 801dda4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dda8:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801ddac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ddb0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ddb4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ddb8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ddbc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ddc0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ddc4:	ee12 2a90 	vmov	r2, s5
 801ddc8:	eef0 2a47 	vmov.f32	s5, s14
 801ddcc:	fb92 f3f3 	sdiv	r3, r2, r3
 801ddd0:	ee13 2a10 	vmov	r2, s6
 801ddd4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ddd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ddd8:	eeb0 3a67 	vmov.f32	s6, s15
 801dddc:	fb92 f3f3 	sdiv	r3, r2, r3
 801dde0:	9a03      	ldr	r2, [sp, #12]
 801dde2:	9314      	str	r3, [sp, #80]	@ 0x50
 801dde4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dde6:	bf08      	it	eq
 801dde8:	4613      	moveq	r3, r2
 801ddea:	e789      	b.n	801dd00 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ddec:	1405      	asrs	r5, r0, #16
 801ddee:	d436      	bmi.n	801de5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ddf0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ddf4:	42aa      	cmp	r2, r5
 801ddf6:	dd32      	ble.n	801de5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ddf8:	140e      	asrs	r6, r1, #16
 801ddfa:	d430      	bmi.n	801de5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ddfc:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801de00:	42b2      	cmp	r2, r6
 801de02:	dd2c      	ble.n	801de5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801de04:	9a00      	ldr	r2, [sp, #0]
 801de06:	fb06 5502 	mla	r5, r6, r2, r5
 801de0a:	9e01      	ldr	r6, [sp, #4]
 801de0c:	086a      	lsrs	r2, r5, #1
 801de0e:	5cb2      	ldrb	r2, [r6, r2]
 801de10:	07ee      	lsls	r6, r5, #31
 801de12:	bf54      	ite	pl
 801de14:	f002 020f 	andpl.w	r2, r2, #15
 801de18:	1112      	asrmi	r2, r2, #4
 801de1a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801de1e:	b2d2      	uxtb	r2, r2
 801de20:	b1ea      	cbz	r2, 801de5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801de22:	9d04      	ldr	r5, [sp, #16]
 801de24:	436a      	muls	r2, r5
 801de26:	1c55      	adds	r5, r2, #1
 801de28:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801de2c:	4d6e      	ldr	r5, [pc, #440]	@ (801dfe8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801de2e:	1212      	asrs	r2, r2, #8
 801de30:	682d      	ldr	r5, [r5, #0]
 801de32:	2aff      	cmp	r2, #255	@ 0xff
 801de34:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801de38:	9605      	str	r6, [sp, #20]
 801de3a:	d116      	bne.n	801de6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801de3c:	f06f 0201 	mvn.w	r2, #1
 801de40:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801de44:	fb02 fc07 	mul.w	ip, r2, r7
 801de48:	096a      	lsrs	r2, r5, #5
 801de4a:	f026 0607 	bic.w	r6, r6, #7
 801de4e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801de52:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801de56:	4316      	orrs	r6, r2
 801de58:	432e      	orrs	r6, r5
 801de5a:	f824 600c 	strh.w	r6, [r4, ip]
 801de5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801de60:	3f01      	subs	r7, #1
 801de62:	4410      	add	r0, r2
 801de64:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801de66:	4411      	add	r1, r2
 801de68:	e77e      	b.n	801dd68 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801de6a:	f06f 0601 	mvn.w	r6, #1
 801de6e:	fa1f fa82 	uxth.w	sl, r2
 801de72:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801de76:	43d2      	mvns	r2, r2
 801de78:	437e      	muls	r6, r7
 801de7a:	b2ed      	uxtb	r5, r5
 801de7c:	fb1c fc0a 	smulbb	ip, ip, sl
 801de80:	b2d2      	uxtb	r2, r2
 801de82:	f834 8006 	ldrh.w	r8, [r4, r6]
 801de86:	fb15 f50a 	smulbb	r5, r5, sl
 801de8a:	9602      	str	r6, [sp, #8]
 801de8c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801de90:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801de94:	fb16 f60a 	smulbb	r6, r6, sl
 801de98:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801de9c:	fb0e ce02 	mla	lr, lr, r2, ip
 801dea0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801dea4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801dea8:	fa1f fe8e 	uxth.w	lr, lr
 801deac:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801deb0:	fa5f f888 	uxtb.w	r8, r8
 801deb4:	fb0c 6c02 	mla	ip, ip, r2, r6
 801deb8:	fb08 5502 	mla	r5, r8, r2, r5
 801debc:	f10e 0201 	add.w	r2, lr, #1
 801dec0:	fa1f fc8c 	uxth.w	ip, ip
 801dec4:	b2ad      	uxth	r5, r5
 801dec6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801deca:	9a02      	ldr	r2, [sp, #8]
 801decc:	1c6e      	adds	r6, r5, #1
 801dece:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801ded2:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801ded6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801deda:	ea46 0e0e 	orr.w	lr, r6, lr
 801dede:	f10c 0601 	add.w	r6, ip, #1
 801dee2:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801dee6:	0976      	lsrs	r6, r6, #5
 801dee8:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801deec:	ea4e 0e06 	orr.w	lr, lr, r6
 801def0:	f824 e002 	strh.w	lr, [r4, r2]
 801def4:	e7b3      	b.n	801de5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801def6:	f04f 0800 	mov.w	r8, #0
 801defa:	eba3 0208 	sub.w	r2, r3, r8
 801defe:	2a00      	cmp	r2, #0
 801df00:	f77f af35 	ble.w	801dd6e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801df04:	1402      	asrs	r2, r0, #16
 801df06:	9e00      	ldr	r6, [sp, #0]
 801df08:	140d      	asrs	r5, r1, #16
 801df0a:	fb06 2505 	mla	r5, r6, r5, r2
 801df0e:	9e01      	ldr	r6, [sp, #4]
 801df10:	086a      	lsrs	r2, r5, #1
 801df12:	07ed      	lsls	r5, r5, #31
 801df14:	5cb2      	ldrb	r2, [r6, r2]
 801df16:	bf54      	ite	pl
 801df18:	f002 020f 	andpl.w	r2, r2, #15
 801df1c:	1112      	asrmi	r2, r2, #4
 801df1e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801df22:	b2d2      	uxtb	r2, r2
 801df24:	b1c2      	cbz	r2, 801df58 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801df26:	9d04      	ldr	r5, [sp, #16]
 801df28:	436a      	muls	r2, r5
 801df2a:	1c55      	adds	r5, r2, #1
 801df2c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801df30:	4d2d      	ldr	r5, [pc, #180]	@ (801dfe8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801df32:	1212      	asrs	r2, r2, #8
 801df34:	682e      	ldr	r6, [r5, #0]
 801df36:	2aff      	cmp	r2, #255	@ 0xff
 801df38:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801df3c:	d113      	bne.n	801df66 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801df3e:	0972      	lsrs	r2, r6, #5
 801df40:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801df44:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801df48:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801df4c:	f025 0507 	bic.w	r5, r5, #7
 801df50:	4315      	orrs	r5, r2
 801df52:	4335      	orrs	r5, r6
 801df54:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801df58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801df5a:	f108 0801 	add.w	r8, r8, #1
 801df5e:	4410      	add	r0, r2
 801df60:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801df62:	4411      	add	r1, r2
 801df64:	e7c9      	b.n	801defa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801df66:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801df6a:	fa1f fa82 	uxth.w	sl, r2
 801df6e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801df72:	43d2      	mvns	r2, r2
 801df74:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801df78:	fb17 f70a 	smulbb	r7, r7, sl
 801df7c:	b2d2      	uxtb	r2, r2
 801df7e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801df82:	b2f6      	uxtb	r6, r6
 801df84:	b2ed      	uxtb	r5, r5
 801df86:	fb0c 7c02 	mla	ip, ip, r2, r7
 801df8a:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801df8e:	fb16 f60a 	smulbb	r6, r6, sl
 801df92:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801df96:	fa1f fc8c 	uxth.w	ip, ip
 801df9a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801df9e:	fb15 f50a 	smulbb	r5, r5, sl
 801dfa2:	fa5f fe8e 	uxtb.w	lr, lr
 801dfa6:	fb0e 6602 	mla	r6, lr, r2, r6
 801dfaa:	fb07 5702 	mla	r7, r7, r2, r5
 801dfae:	f10c 0201 	add.w	r2, ip, #1
 801dfb2:	b2b6      	uxth	r6, r6
 801dfb4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801dfb8:	1c75      	adds	r5, r6, #1
 801dfba:	b2bf      	uxth	r7, r7
 801dfbc:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801dfc0:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801dfc4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801dfc8:	ea45 0c0c 	orr.w	ip, r5, ip
 801dfcc:	1c7d      	adds	r5, r7, #1
 801dfce:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801dfd2:	096d      	lsrs	r5, r5, #5
 801dfd4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801dfd8:	ea4c 0c05 	orr.w	ip, ip, r5
 801dfdc:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801dfe0:	e7ba      	b.n	801df58 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801dfe2:	b007      	add	sp, #28
 801dfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfe8:	200279e8 	.word	0x200279e8

0801dfec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dff0:	b087      	sub	sp, #28
 801dff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dff6:	f8df 8308 	ldr.w	r8, [pc, #776]	@ 801e300 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801dffa:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801dffc:	9101      	str	r1, [sp, #4]
 801dffe:	9205      	str	r2, [sp, #20]
 801e000:	6841      	ldr	r1, [r0, #4]
 801e002:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801e006:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801e00a:	fb01 2404 	mla	r4, r1, r4, r2
 801e00e:	6802      	ldr	r2, [r0, #0]
 801e010:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e014:	f8db 2008 	ldr.w	r2, [fp, #8]
 801e018:	3201      	adds	r2, #1
 801e01a:	f022 0201 	bic.w	r2, r2, #1
 801e01e:	9202      	str	r2, [sp, #8]
 801e020:	f8db 2000 	ldr.w	r2, [fp]
 801e024:	9203      	str	r2, [sp, #12]
 801e026:	9a01      	ldr	r2, [sp, #4]
 801e028:	2a00      	cmp	r2, #0
 801e02a:	dc03      	bgt.n	801e034 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e02c:	9a05      	ldr	r2, [sp, #20]
 801e02e:	2a00      	cmp	r2, #0
 801e030:	f340 8162 	ble.w	801e2f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801e034:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e036:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801e03a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e03e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e040:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801e044:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e048:	2b00      	cmp	r3, #0
 801e04a:	dd0e      	ble.n	801e06a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e04c:	1402      	asrs	r2, r0, #16
 801e04e:	d405      	bmi.n	801e05c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e050:	42ba      	cmp	r2, r7
 801e052:	da03      	bge.n	801e05c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e054:	140a      	asrs	r2, r1, #16
 801e056:	d401      	bmi.n	801e05c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e058:	42b2      	cmp	r2, r6
 801e05a:	db07      	blt.n	801e06c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e05c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e05e:	3b01      	subs	r3, #1
 801e060:	3402      	adds	r4, #2
 801e062:	4410      	add	r0, r2
 801e064:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e066:	4411      	add	r1, r2
 801e068:	e7ee      	b.n	801e048 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e06a:	d017      	beq.n	801e09c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801e06c:	1e5a      	subs	r2, r3, #1
 801e06e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e070:	fb05 0502 	mla	r5, r5, r2, r0
 801e074:	142d      	asrs	r5, r5, #16
 801e076:	d409      	bmi.n	801e08c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e078:	42bd      	cmp	r5, r7
 801e07a:	da07      	bge.n	801e08c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e07c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e07e:	fb05 1202 	mla	r2, r5, r2, r1
 801e082:	1412      	asrs	r2, r2, #16
 801e084:	d402      	bmi.n	801e08c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e086:	42b2      	cmp	r2, r6
 801e088:	f2c0 80c3 	blt.w	801e212 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801e08c:	2500      	movs	r5, #0
 801e08e:	195a      	adds	r2, r3, r5
 801e090:	2a00      	cmp	r2, #0
 801e092:	dc3f      	bgt.n	801e114 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e094:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e098:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e09c:	9b01      	ldr	r3, [sp, #4]
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	f340 812a 	ble.w	801e2f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801e0a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e0a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e0aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e0ae:	eeb0 6a62 	vmov.f32	s12, s5
 801e0b2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e0b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e0ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e0be:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801e0c2:	eeb0 6a43 	vmov.f32	s12, s6
 801e0c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e0ca:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801e0ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e0d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e0d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e0da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e0de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e0e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e0e6:	ee12 2a90 	vmov	r2, s5
 801e0ea:	eef0 2a47 	vmov.f32	s5, s14
 801e0ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801e0f2:	ee13 2a10 	vmov	r2, s6
 801e0f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e0f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e0fa:	eeb0 3a67 	vmov.f32	s6, s15
 801e0fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801e102:	9314      	str	r3, [sp, #80]	@ 0x50
 801e104:	9b01      	ldr	r3, [sp, #4]
 801e106:	9a05      	ldr	r2, [sp, #20]
 801e108:	3b01      	subs	r3, #1
 801e10a:	9301      	str	r3, [sp, #4]
 801e10c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e10e:	bf08      	it	eq
 801e110:	4613      	moveq	r3, r2
 801e112:	e788      	b.n	801e026 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e114:	1406      	asrs	r6, r0, #16
 801e116:	d42c      	bmi.n	801e172 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e118:	f8db 2008 	ldr.w	r2, [fp, #8]
 801e11c:	42b2      	cmp	r2, r6
 801e11e:	dd28      	ble.n	801e172 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e120:	140f      	asrs	r7, r1, #16
 801e122:	d426      	bmi.n	801e172 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e124:	f8db 200c 	ldr.w	r2, [fp, #12]
 801e128:	42ba      	cmp	r2, r7
 801e12a:	dd22      	ble.n	801e172 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e12c:	9a02      	ldr	r2, [sp, #8]
 801e12e:	fb07 6602 	mla	r6, r7, r2, r6
 801e132:	9f03      	ldr	r7, [sp, #12]
 801e134:	0872      	lsrs	r2, r6, #1
 801e136:	07f6      	lsls	r6, r6, #31
 801e138:	5cba      	ldrb	r2, [r7, r2]
 801e13a:	bf54      	ite	pl
 801e13c:	f002 020f 	andpl.w	r2, r2, #15
 801e140:	1112      	asrmi	r2, r2, #4
 801e142:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e146:	b2d2      	uxtb	r2, r2
 801e148:	2aff      	cmp	r2, #255	@ 0xff
 801e14a:	d118      	bne.n	801e17e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801e14c:	f06f 0601 	mvn.w	r6, #1
 801e150:	f8d8 2000 	ldr.w	r2, [r8]
 801e154:	fb06 f705 	mul.w	r7, r6, r5
 801e158:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 801e15c:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801e160:	0956      	lsrs	r6, r2, #5
 801e162:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e166:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801e16a:	ea4c 0606 	orr.w	r6, ip, r6
 801e16e:	4316      	orrs	r6, r2
 801e170:	53e6      	strh	r6, [r4, r7]
 801e172:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e174:	3d01      	subs	r5, #1
 801e176:	4410      	add	r0, r2
 801e178:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e17a:	4411      	add	r1, r2
 801e17c:	e787      	b.n	801e08e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801e17e:	2a00      	cmp	r2, #0
 801e180:	d0f7      	beq.n	801e172 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e182:	f06f 0601 	mvn.w	r6, #1
 801e186:	f8d8 c000 	ldr.w	ip, [r8]
 801e18a:	fa1f f982 	uxth.w	r9, r2
 801e18e:	43d2      	mvns	r2, r2
 801e190:	436e      	muls	r6, r5
 801e192:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801e196:	b2d2      	uxtb	r2, r2
 801e198:	f834 e006 	ldrh.w	lr, [r4, r6]
 801e19c:	fb1a fa09 	smulbb	sl, sl, r9
 801e1a0:	9604      	str	r6, [sp, #16]
 801e1a2:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801e1a6:	ea4f 272e 	mov.w	r7, lr, asr #8
 801e1aa:	fb16 f609 	smulbb	r6, r6, r9
 801e1ae:	fa5f fc8c 	uxtb.w	ip, ip
 801e1b2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e1b6:	fb1c fc09 	smulbb	ip, ip, r9
 801e1ba:	fb07 6702 	mla	r7, r7, r2, r6
 801e1be:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e1c2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e1c6:	b2bf      	uxth	r7, r7
 801e1c8:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e1cc:	fa5f fe8e 	uxtb.w	lr, lr
 801e1d0:	fb06 a602 	mla	r6, r6, r2, sl
 801e1d4:	fb0e cc02 	mla	ip, lr, r2, ip
 801e1d8:	1c7a      	adds	r2, r7, #1
 801e1da:	b2b6      	uxth	r6, r6
 801e1dc:	fa1f fc8c 	uxth.w	ip, ip
 801e1e0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e1e4:	9a04      	ldr	r2, [sp, #16]
 801e1e6:	f10c 0a01 	add.w	sl, ip, #1
 801e1ea:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801e1ee:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801e1f2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e1f6:	ea4a 0707 	orr.w	r7, sl, r7
 801e1fa:	f106 0a01 	add.w	sl, r6, #1
 801e1fe:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e202:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e206:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e20a:	ea47 070a 	orr.w	r7, r7, sl
 801e20e:	52a7      	strh	r7, [r4, r2]
 801e210:	e7af      	b.n	801e172 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e212:	f04f 0e00 	mov.w	lr, #0
 801e216:	eba3 020e 	sub.w	r2, r3, lr
 801e21a:	2a00      	cmp	r2, #0
 801e21c:	f77f af3a 	ble.w	801e094 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801e220:	1402      	asrs	r2, r0, #16
 801e222:	9e02      	ldr	r6, [sp, #8]
 801e224:	140d      	asrs	r5, r1, #16
 801e226:	fb06 2505 	mla	r5, r6, r5, r2
 801e22a:	9e03      	ldr	r6, [sp, #12]
 801e22c:	086a      	lsrs	r2, r5, #1
 801e22e:	07ed      	lsls	r5, r5, #31
 801e230:	5cb2      	ldrb	r2, [r6, r2]
 801e232:	bf54      	ite	pl
 801e234:	f002 020f 	andpl.w	r2, r2, #15
 801e238:	1112      	asrmi	r2, r2, #4
 801e23a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e23e:	b2d2      	uxtb	r2, r2
 801e240:	2aff      	cmp	r2, #255	@ 0xff
 801e242:	d115      	bne.n	801e270 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801e244:	f8d8 5000 	ldr.w	r5, [r8]
 801e248:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 801e24c:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801e250:	096a      	lsrs	r2, r5, #5
 801e252:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801e256:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801e25a:	4332      	orrs	r2, r6
 801e25c:	432a      	orrs	r2, r5
 801e25e:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801e262:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e264:	f10e 0e01 	add.w	lr, lr, #1
 801e268:	4410      	add	r0, r2
 801e26a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e26c:	4411      	add	r1, r2
 801e26e:	e7d2      	b.n	801e216 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e270:	2a00      	cmp	r2, #0
 801e272:	d0f6      	beq.n	801e262 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e274:	f8d8 7000 	ldr.w	r7, [r8]
 801e278:	fa1f f982 	uxth.w	r9, r2
 801e27c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801e280:	43d2      	mvns	r2, r2
 801e282:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801e286:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801e28a:	ea4f 262c 	mov.w	r6, ip, asr #8
 801e28e:	fb15 f509 	smulbb	r5, r5, r9
 801e292:	b2d2      	uxtb	r2, r2
 801e294:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801e298:	b2ff      	uxtb	r7, r7
 801e29a:	fb1a fa09 	smulbb	sl, sl, r9
 801e29e:	fb06 5602 	mla	r6, r6, r2, r5
 801e2a2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801e2a6:	fb17 f709 	smulbb	r7, r7, r9
 801e2aa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e2ae:	b2b6      	uxth	r6, r6
 801e2b0:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801e2b4:	fa5f fc8c 	uxtb.w	ip, ip
 801e2b8:	fb05 a502 	mla	r5, r5, r2, sl
 801e2bc:	fb0c 7702 	mla	r7, ip, r2, r7
 801e2c0:	1c72      	adds	r2, r6, #1
 801e2c2:	b2ad      	uxth	r5, r5
 801e2c4:	b2bf      	uxth	r7, r7
 801e2c6:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801e2ca:	f107 0a01 	add.w	sl, r7, #1
 801e2ce:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801e2d2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e2d6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e2da:	ea4a 0606 	orr.w	r6, sl, r6
 801e2de:	f105 0a01 	add.w	sl, r5, #1
 801e2e2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e2e6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e2ea:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e2ee:	ea46 060a 	orr.w	r6, r6, sl
 801e2f2:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801e2f6:	e7b4      	b.n	801e262 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e2f8:	b007      	add	sp, #28
 801e2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2fe:	bf00      	nop
 801e300:	200279e8 	.word	0x200279e8

0801e304 <_ZN8touchgfx8LCD16bppD1Ev>:
 801e304:	4770      	bx	lr

0801e306 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801e306:	4770      	bx	lr

0801e308 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801e308:	4770      	bx	lr

0801e30a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801e30a:	4770      	bx	lr

0801e30c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801e30c:	4770      	bx	lr

0801e30e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801e30e:	4770      	bx	lr

0801e310 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801e310:	4770      	bx	lr

0801e312 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801e312:	4770      	bx	lr

0801e314 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e314:	4770      	bx	lr

0801e316 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e316:	4770      	bx	lr

0801e318 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e318:	4770      	bx	lr

0801e31a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e31a:	4770      	bx	lr

0801e31c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e31c:	4770      	bx	lr

0801e31e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801e31e:	4770      	bx	lr

0801e320 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e320:	4770      	bx	lr

0801e322 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e322:	4770      	bx	lr

0801e324 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e324:	4770      	bx	lr

0801e326 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801e326:	4770      	bx	lr

0801e328 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e328:	4770      	bx	lr

0801e32a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e32a:	4770      	bx	lr

0801e32c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e32c:	4770      	bx	lr

0801e32e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e32e:	4770      	bx	lr

0801e330 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e330:	4770      	bx	lr

0801e332 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e332:	4770      	bx	lr

0801e334 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e334:	4770      	bx	lr

0801e336 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e336:	4770      	bx	lr

0801e338 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e338:	4770      	bx	lr

0801e33a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e33a:	4770      	bx	lr

0801e33c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e33c:	4770      	bx	lr

0801e33e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801e33e:	4770      	bx	lr

0801e340 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e340:	4770      	bx	lr

0801e342 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801e342:	4770      	bx	lr

0801e344 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801e344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e348:	b088      	sub	sp, #32
 801e34a:	4606      	mov	r6, r0
 801e34c:	4688      	mov	r8, r1
 801e34e:	4691      	mov	r9, r2
 801e350:	ac08      	add	r4, sp, #32
 801e352:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801e356:	4620      	mov	r0, r4
 801e358:	f7fd fc62 	bl	801bc20 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e35c:	6833      	ldr	r3, [r6, #0]
 801e35e:	4605      	mov	r5, r0
 801e360:	4620      	mov	r0, r4
 801e362:	699f      	ldr	r7, [r3, #24]
 801e364:	f7fd fb6a 	bl	801ba3c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e368:	4682      	mov	sl, r0
 801e36a:	4620      	mov	r0, r4
 801e36c:	f7fd fb9a 	bl	801baa4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e370:	9500      	str	r5, [sp, #0]
 801e372:	464b      	mov	r3, r9
 801e374:	4642      	mov	r2, r8
 801e376:	4631      	mov	r1, r6
 801e378:	e9cd a001 	strd	sl, r0, [sp, #4]
 801e37c:	a806      	add	r0, sp, #24
 801e37e:	47b8      	blx	r7
 801e380:	4628      	mov	r0, r5
 801e382:	b008      	add	sp, #32
 801e384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801e388 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801e388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e38c:	2300      	movs	r3, #0
 801e38e:	9300      	str	r3, [sp, #0]
 801e390:	4b3d      	ldr	r3, [pc, #244]	@ (801e488 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801e392:	781b      	ldrb	r3, [r3, #0]
 801e394:	2b00      	cmp	r3, #0
 801e396:	d137      	bne.n	801e408 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801e398:	4a3c      	ldr	r2, [pc, #240]	@ (801e48c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801e39a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e39e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e3a2:	2b00      	cmp	r3, #0
 801e3a4:	d132      	bne.n	801e40c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801e3a6:	4b3a      	ldr	r3, [pc, #232]	@ (801e490 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801e3a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e3ac:	ac02      	add	r4, sp, #8
 801e3ae:	6808      	ldr	r0, [r1, #0]
 801e3b0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e3b4:	ab02      	add	r3, sp, #8
 801e3b6:	6849      	ldr	r1, [r1, #4]
 801e3b8:	4d36      	ldr	r5, [pc, #216]	@ (801e494 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801e3ba:	c303      	stmia	r3!, {r0, r1}
 801e3bc:	4669      	mov	r1, sp
 801e3be:	4620      	mov	r0, r4
 801e3c0:	f7f9 fdda 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e3c4:	4668      	mov	r0, sp
 801e3c6:	f7f9 fdaf 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e3ca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e3ce:	f8bd 2000 	ldrh.w	r2, [sp]
 801e3d2:	462f      	mov	r7, r5
 801e3d4:	6828      	ldr	r0, [r5, #0]
 801e3d6:	4413      	add	r3, r2
 801e3d8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801e3dc:	f8ad 3008 	strh.w	r3, [sp, #8]
 801e3e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e3e4:	4413      	add	r3, r2
 801e3e6:	f8ad 300a 	strh.w	r3, [sp, #10]
 801e3ea:	6803      	ldr	r3, [r0, #0]
 801e3ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e3ee:	4798      	blx	r3
 801e3f0:	f010 0f01 	tst.w	r0, #1
 801e3f4:	d00c      	beq.n	801e410 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801e3f6:	6828      	ldr	r0, [r5, #0]
 801e3f8:	6803      	ldr	r3, [r0, #0]
 801e3fa:	e894 0006 	ldmia.w	r4, {r1, r2}
 801e3fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e400:	4798      	blx	r3
 801e402:	b004      	add	sp, #16
 801e404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e408:	4a21      	ldr	r2, [pc, #132]	@ (801e490 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801e40a:	e7c6      	b.n	801e39a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801e40c:	4b1f      	ldr	r3, [pc, #124]	@ (801e48c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801e40e:	e7cb      	b.n	801e3a8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801e410:	6838      	ldr	r0, [r7, #0]
 801e412:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801e416:	6803      	ldr	r3, [r0, #0]
 801e418:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801e41c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801e420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e422:	4798      	blx	r3
 801e424:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801e428:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e42c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801e430:	fb16 3602 	smlabb	r6, r6, r2, r3
 801e434:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801e438:	6838      	ldr	r0, [r7, #0]
 801e43a:	6803      	ldr	r3, [r0, #0]
 801e43c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e43e:	4798      	blx	r3
 801e440:	4a12      	ldr	r2, [pc, #72]	@ (801e48c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801e442:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801e446:	8813      	ldrh	r3, [r2, #0]
 801e448:	4691      	mov	r9, r2
 801e44a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801e44e:	435d      	muls	r5, r3
 801e450:	fb03 1404 	mla	r4, r3, r4, r1
 801e454:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e458:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801e45c:	6838      	ldr	r0, [r7, #0]
 801e45e:	42ac      	cmp	r4, r5
 801e460:	6803      	ldr	r3, [r0, #0]
 801e462:	d20e      	bcs.n	801e482 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801e464:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 801e468:	4632      	mov	r2, r6
 801e46a:	4643      	mov	r3, r8
 801e46c:	4621      	mov	r1, r4
 801e46e:	47d0      	blx	sl
 801e470:	f8b9 3000 	ldrh.w	r3, [r9]
 801e474:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e478:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801e47c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801e480:	e7ec      	b.n	801e45c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801e482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e484:	4798      	blx	r3
 801e486:	e7bc      	b.n	801e402 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801e488:	200279d0 	.word	0x200279d0
 801e48c:	200279d2 	.word	0x200279d2
 801e490:	200279d4 	.word	0x200279d4
 801e494:	200279d8 	.word	0x200279d8

0801e498 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801e498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e49c:	b08b      	sub	sp, #44	@ 0x2c
 801e49e:	460f      	mov	r7, r1
 801e4a0:	4616      	mov	r6, r2
 801e4a2:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 801e4a6:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 801e4aa:	f1bb 0f00 	cmp.w	fp, #0
 801e4ae:	d04a      	beq.n	801e546 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801e4b0:	6810      	ldr	r0, [r2, #0]
 801e4b2:	ad06      	add	r5, sp, #24
 801e4b4:	6851      	ldr	r1, [r2, #4]
 801e4b6:	c503      	stmia	r5!, {r0, r1}
 801e4b8:	6818      	ldr	r0, [r3, #0]
 801e4ba:	ad08      	add	r5, sp, #32
 801e4bc:	6859      	ldr	r1, [r3, #4]
 801e4be:	c503      	stmia	r5!, {r0, r1}
 801e4c0:	a806      	add	r0, sp, #24
 801e4c2:	f7f9 fd31 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e4c6:	4631      	mov	r1, r6
 801e4c8:	a808      	add	r0, sp, #32
 801e4ca:	f7f9 fd55 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e4ce:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e4d2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801e4d6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801e4da:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801e4de:	fb16 2103 	smlabb	r1, r6, r3, r2
 801e4e2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801e4e6:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801e4ea:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e4ee:	4f5f      	ldr	r7, [pc, #380]	@ (801e66c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801e4f0:	440a      	add	r2, r1
 801e4f2:	6838      	ldr	r0, [r7, #0]
 801e4f4:	46b9      	mov	r9, r7
 801e4f6:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e4fa:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e4fe:	4413      	add	r3, r2
 801e500:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801e504:	6803      	ldr	r3, [r0, #0]
 801e506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e508:	4798      	blx	r3
 801e50a:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801e50e:	d11d      	bne.n	801e54c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801e510:	b9fc      	cbnz	r4, 801e552 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801e512:	f010 0f01 	tst.w	r0, #1
 801e516:	d01c      	beq.n	801e552 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801e518:	f8d9 0000 	ldr.w	r0, [r9]
 801e51c:	2700      	movs	r7, #0
 801e51e:	b2ad      	uxth	r5, r5
 801e520:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801e524:	6801      	ldr	r1, [r0, #0]
 801e526:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e52a:	f8cd b00c 	str.w	fp, [sp, #12]
 801e52e:	9501      	str	r5, [sp, #4]
 801e530:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801e534:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801e538:	9402      	str	r4, [sp, #8]
 801e53a:	fa1f f488 	uxth.w	r4, r8
 801e53e:	9400      	str	r4, [sp, #0]
 801e540:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 801e542:	4631      	mov	r1, r6
 801e544:	47a0      	blx	r4
 801e546:	b00b      	add	sp, #44	@ 0x2c
 801e548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e54c:	f010 0f04 	tst.w	r0, #4
 801e550:	e7e1      	b.n	801e516 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801e552:	f8d9 0000 	ldr.w	r0, [r9]
 801e556:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801e55a:	6803      	ldr	r3, [r0, #0]
 801e55c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e55e:	4798      	blx	r3
 801e560:	4b43      	ldr	r3, [pc, #268]	@ (801e670 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801e562:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801e566:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801e56a:	881a      	ldrh	r2, [r3, #0]
 801e56c:	469a      	mov	sl, r3
 801e56e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e572:	fb05 f502 	mul.w	r5, r5, r2
 801e576:	fb02 1404 	mla	r4, r2, r4, r1
 801e57a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e57e:	d059      	beq.n	801e634 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801e580:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 801e584:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801e588:	fa1f f28b 	uxth.w	r2, fp
 801e58c:	469e      	mov	lr, r3
 801e58e:	fa1f f989 	uxth.w	r9, r9
 801e592:	42ac      	cmp	r4, r5
 801e594:	d264      	bcs.n	801e660 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801e596:	eb04 0a07 	add.w	sl, r4, r7
 801e59a:	4554      	cmp	r4, sl
 801e59c:	d23d      	bcs.n	801e61a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801e59e:	8821      	ldrh	r1, [r4, #0]
 801e5a0:	f836 3b02 	ldrh.w	r3, [r6], #2
 801e5a4:	1208      	asrs	r0, r1, #8
 801e5a6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801e5aa:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801e5ae:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801e5b2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e5b6:	00c9      	lsls	r1, r1, #3
 801e5b8:	fb10 f009 	smulbb	r0, r0, r9
 801e5bc:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801e5c0:	b2c9      	uxtb	r1, r1
 801e5c2:	fb0c 0c02 	mla	ip, ip, r2, r0
 801e5c6:	10d8      	asrs	r0, r3, #3
 801e5c8:	fb1b fb09 	smulbb	fp, fp, r9
 801e5cc:	00db      	lsls	r3, r3, #3
 801e5ce:	fa1f fc8c 	uxth.w	ip, ip
 801e5d2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801e5d6:	fb11 f109 	smulbb	r1, r1, r9
 801e5da:	b2db      	uxtb	r3, r3
 801e5dc:	fb00 b002 	mla	r0, r0, r2, fp
 801e5e0:	f10c 0b01 	add.w	fp, ip, #1
 801e5e4:	fb03 1302 	mla	r3, r3, r2, r1
 801e5e8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e5ec:	b29b      	uxth	r3, r3
 801e5ee:	b280      	uxth	r0, r0
 801e5f0:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 801e5f4:	f103 0c01 	add.w	ip, r3, #1
 801e5f8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801e5fc:	1c43      	adds	r3, r0, #1
 801e5fe:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e602:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e606:	0940      	lsrs	r0, r0, #5
 801e608:	ea4c 0c0b 	orr.w	ip, ip, fp
 801e60c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801e610:	ea4c 0c00 	orr.w	ip, ip, r0
 801e614:	f824 cb02 	strh.w	ip, [r4], #2
 801e618:	e7bf      	b.n	801e59a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801e61a:	f8be 3000 	ldrh.w	r3, [lr]
 801e61e:	eba3 0308 	sub.w	r3, r3, r8
 801e622:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e626:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e62a:	eba3 0308 	sub.w	r3, r3, r8
 801e62e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801e632:	e7ae      	b.n	801e592 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801e634:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801e638:	f8d9 0000 	ldr.w	r0, [r9]
 801e63c:	42ac      	cmp	r4, r5
 801e63e:	6803      	ldr	r3, [r0, #0]
 801e640:	d20e      	bcs.n	801e660 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801e642:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 801e646:	4632      	mov	r2, r6
 801e648:	463b      	mov	r3, r7
 801e64a:	4621      	mov	r1, r4
 801e64c:	47c0      	blx	r8
 801e64e:	f8ba 3000 	ldrh.w	r3, [sl]
 801e652:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e656:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e65a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801e65e:	e7eb      	b.n	801e638 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801e660:	4b02      	ldr	r3, [pc, #8]	@ (801e66c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801e662:	6818      	ldr	r0, [r3, #0]
 801e664:	6803      	ldr	r3, [r0, #0]
 801e666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e668:	4798      	blx	r3
 801e66a:	e76c      	b.n	801e546 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801e66c:	200279d8 	.word	0x200279d8
 801e670:	200279d2 	.word	0x200279d2

0801e674 <_ZN8touchgfx8LCD16bppD0Ev>:
 801e674:	b510      	push	{r4, lr}
 801e676:	4604      	mov	r4, r0
 801e678:	2188      	movs	r1, #136	@ 0x88
 801e67a:	f00b fb9e 	bl	8029dba <_ZdlPvj>
 801e67e:	4620      	mov	r0, r4
 801e680:	bd10      	pop	{r4, pc}

0801e682 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801e682:	b510      	push	{r4, lr}
 801e684:	4604      	mov	r4, r0
 801e686:	2104      	movs	r1, #4
 801e688:	f00b fb97 	bl	8029dba <_ZdlPvj>
 801e68c:	4620      	mov	r0, r4
 801e68e:	bd10      	pop	{r4, pc}

0801e690 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801e690:	b510      	push	{r4, lr}
 801e692:	4604      	mov	r4, r0
 801e694:	2104      	movs	r1, #4
 801e696:	f00b fb90 	bl	8029dba <_ZdlPvj>
 801e69a:	4620      	mov	r0, r4
 801e69c:	bd10      	pop	{r4, pc}

0801e69e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801e69e:	b510      	push	{r4, lr}
 801e6a0:	4604      	mov	r4, r0
 801e6a2:	f640 0144 	movw	r1, #2116	@ 0x844
 801e6a6:	f00b fb88 	bl	8029dba <_ZdlPvj>
 801e6aa:	4620      	mov	r0, r4
 801e6ac:	bd10      	pop	{r4, pc}

0801e6ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e6ae:	b510      	push	{r4, lr}
 801e6b0:	4604      	mov	r4, r0
 801e6b2:	2104      	movs	r1, #4
 801e6b4:	f00b fb81 	bl	8029dba <_ZdlPvj>
 801e6b8:	4620      	mov	r0, r4
 801e6ba:	bd10      	pop	{r4, pc}

0801e6bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801e6bc:	b510      	push	{r4, lr}
 801e6be:	4604      	mov	r4, r0
 801e6c0:	2104      	movs	r1, #4
 801e6c2:	f00b fb7a 	bl	8029dba <_ZdlPvj>
 801e6c6:	4620      	mov	r0, r4
 801e6c8:	bd10      	pop	{r4, pc}

0801e6ca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e6ca:	b510      	push	{r4, lr}
 801e6cc:	4604      	mov	r4, r0
 801e6ce:	2104      	movs	r1, #4
 801e6d0:	f00b fb73 	bl	8029dba <_ZdlPvj>
 801e6d4:	4620      	mov	r0, r4
 801e6d6:	bd10      	pop	{r4, pc}

0801e6d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801e6d8:	b510      	push	{r4, lr}
 801e6da:	4604      	mov	r4, r0
 801e6dc:	2104      	movs	r1, #4
 801e6de:	f00b fb6c 	bl	8029dba <_ZdlPvj>
 801e6e2:	4620      	mov	r0, r4
 801e6e4:	bd10      	pop	{r4, pc}

0801e6e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e6e6:	b510      	push	{r4, lr}
 801e6e8:	4604      	mov	r4, r0
 801e6ea:	2104      	movs	r1, #4
 801e6ec:	f00b fb65 	bl	8029dba <_ZdlPvj>
 801e6f0:	4620      	mov	r0, r4
 801e6f2:	bd10      	pop	{r4, pc}

0801e6f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801e6f4:	b510      	push	{r4, lr}
 801e6f6:	4604      	mov	r4, r0
 801e6f8:	2104      	movs	r1, #4
 801e6fa:	f00b fb5e 	bl	8029dba <_ZdlPvj>
 801e6fe:	4620      	mov	r0, r4
 801e700:	bd10      	pop	{r4, pc}

0801e702 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e702:	b510      	push	{r4, lr}
 801e704:	4604      	mov	r4, r0
 801e706:	2104      	movs	r1, #4
 801e708:	f00b fb57 	bl	8029dba <_ZdlPvj>
 801e70c:	4620      	mov	r0, r4
 801e70e:	bd10      	pop	{r4, pc}

0801e710 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e710:	b510      	push	{r4, lr}
 801e712:	4604      	mov	r4, r0
 801e714:	2104      	movs	r1, #4
 801e716:	f00b fb50 	bl	8029dba <_ZdlPvj>
 801e71a:	4620      	mov	r0, r4
 801e71c:	bd10      	pop	{r4, pc}

0801e71e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e71e:	b510      	push	{r4, lr}
 801e720:	4604      	mov	r4, r0
 801e722:	2104      	movs	r1, #4
 801e724:	f00b fb49 	bl	8029dba <_ZdlPvj>
 801e728:	4620      	mov	r0, r4
 801e72a:	bd10      	pop	{r4, pc}

0801e72c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e72c:	b510      	push	{r4, lr}
 801e72e:	4604      	mov	r4, r0
 801e730:	2104      	movs	r1, #4
 801e732:	f00b fb42 	bl	8029dba <_ZdlPvj>
 801e736:	4620      	mov	r0, r4
 801e738:	bd10      	pop	{r4, pc}

0801e73a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e73a:	b510      	push	{r4, lr}
 801e73c:	4604      	mov	r4, r0
 801e73e:	2104      	movs	r1, #4
 801e740:	f00b fb3b 	bl	8029dba <_ZdlPvj>
 801e744:	4620      	mov	r0, r4
 801e746:	bd10      	pop	{r4, pc}

0801e748 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e748:	b510      	push	{r4, lr}
 801e74a:	4604      	mov	r4, r0
 801e74c:	2104      	movs	r1, #4
 801e74e:	f00b fb34 	bl	8029dba <_ZdlPvj>
 801e752:	4620      	mov	r0, r4
 801e754:	bd10      	pop	{r4, pc}

0801e756 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e756:	b510      	push	{r4, lr}
 801e758:	4604      	mov	r4, r0
 801e75a:	2104      	movs	r1, #4
 801e75c:	f00b fb2d 	bl	8029dba <_ZdlPvj>
 801e760:	4620      	mov	r0, r4
 801e762:	bd10      	pop	{r4, pc}

0801e764 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801e764:	b510      	push	{r4, lr}
 801e766:	4604      	mov	r4, r0
 801e768:	2104      	movs	r1, #4
 801e76a:	f00b fb26 	bl	8029dba <_ZdlPvj>
 801e76e:	4620      	mov	r0, r4
 801e770:	bd10      	pop	{r4, pc}

0801e772 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e772:	b510      	push	{r4, lr}
 801e774:	4604      	mov	r4, r0
 801e776:	2104      	movs	r1, #4
 801e778:	f00b fb1f 	bl	8029dba <_ZdlPvj>
 801e77c:	4620      	mov	r0, r4
 801e77e:	bd10      	pop	{r4, pc}

0801e780 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e780:	b510      	push	{r4, lr}
 801e782:	4604      	mov	r4, r0
 801e784:	2104      	movs	r1, #4
 801e786:	f00b fb18 	bl	8029dba <_ZdlPvj>
 801e78a:	4620      	mov	r0, r4
 801e78c:	bd10      	pop	{r4, pc}

0801e78e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e78e:	b510      	push	{r4, lr}
 801e790:	4604      	mov	r4, r0
 801e792:	2104      	movs	r1, #4
 801e794:	f00b fb11 	bl	8029dba <_ZdlPvj>
 801e798:	4620      	mov	r0, r4
 801e79a:	bd10      	pop	{r4, pc}

0801e79c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801e79c:	b510      	push	{r4, lr}
 801e79e:	4604      	mov	r4, r0
 801e7a0:	2104      	movs	r1, #4
 801e7a2:	f00b fb0a 	bl	8029dba <_ZdlPvj>
 801e7a6:	4620      	mov	r0, r4
 801e7a8:	bd10      	pop	{r4, pc}

0801e7aa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e7aa:	b510      	push	{r4, lr}
 801e7ac:	4604      	mov	r4, r0
 801e7ae:	2104      	movs	r1, #4
 801e7b0:	f00b fb03 	bl	8029dba <_ZdlPvj>
 801e7b4:	4620      	mov	r0, r4
 801e7b6:	bd10      	pop	{r4, pc}

0801e7b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e7b8:	b510      	push	{r4, lr}
 801e7ba:	4604      	mov	r4, r0
 801e7bc:	2104      	movs	r1, #4
 801e7be:	f00b fafc 	bl	8029dba <_ZdlPvj>
 801e7c2:	4620      	mov	r0, r4
 801e7c4:	bd10      	pop	{r4, pc}

0801e7c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e7c6:	b510      	push	{r4, lr}
 801e7c8:	4604      	mov	r4, r0
 801e7ca:	2104      	movs	r1, #4
 801e7cc:	f00b faf5 	bl	8029dba <_ZdlPvj>
 801e7d0:	4620      	mov	r0, r4
 801e7d2:	bd10      	pop	{r4, pc}

0801e7d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e7d4:	b510      	push	{r4, lr}
 801e7d6:	4604      	mov	r4, r0
 801e7d8:	2104      	movs	r1, #4
 801e7da:	f00b faee 	bl	8029dba <_ZdlPvj>
 801e7de:	4620      	mov	r0, r4
 801e7e0:	bd10      	pop	{r4, pc}

0801e7e2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e7e2:	b510      	push	{r4, lr}
 801e7e4:	4604      	mov	r4, r0
 801e7e6:	2104      	movs	r1, #4
 801e7e8:	f00b fae7 	bl	8029dba <_ZdlPvj>
 801e7ec:	4620      	mov	r0, r4
 801e7ee:	bd10      	pop	{r4, pc}

0801e7f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e7f0:	b510      	push	{r4, lr}
 801e7f2:	4604      	mov	r4, r0
 801e7f4:	2104      	movs	r1, #4
 801e7f6:	f00b fae0 	bl	8029dba <_ZdlPvj>
 801e7fa:	4620      	mov	r0, r4
 801e7fc:	bd10      	pop	{r4, pc}

0801e7fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801e7fe:	b510      	push	{r4, lr}
 801e800:	4604      	mov	r4, r0
 801e802:	2104      	movs	r1, #4
 801e804:	f00b fad9 	bl	8029dba <_ZdlPvj>
 801e808:	4620      	mov	r0, r4
 801e80a:	bd10      	pop	{r4, pc}

0801e80c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801e80c:	b510      	push	{r4, lr}
 801e80e:	4604      	mov	r4, r0
 801e810:	2104      	movs	r1, #4
 801e812:	f00b fad2 	bl	8029dba <_ZdlPvj>
 801e816:	4620      	mov	r0, r4
 801e818:	bd10      	pop	{r4, pc}

0801e81a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801e81a:	b510      	push	{r4, lr}
 801e81c:	4604      	mov	r4, r0
 801e81e:	2104      	movs	r1, #4
 801e820:	f00b facb 	bl	8029dba <_ZdlPvj>
 801e824:	4620      	mov	r0, r4
 801e826:	bd10      	pop	{r4, pc}

0801e828 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801e828:	b510      	push	{r4, lr}
 801e82a:	4604      	mov	r4, r0
 801e82c:	2104      	movs	r1, #4
 801e82e:	f00b fac4 	bl	8029dba <_ZdlPvj>
 801e832:	4620      	mov	r0, r4
 801e834:	bd10      	pop	{r4, pc}
	...

0801e838 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801e838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e83c:	b08f      	sub	sp, #60	@ 0x3c
 801e83e:	461c      	mov	r4, r3
 801e840:	9205      	str	r2, [sp, #20]
 801e842:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801e846:	9100      	str	r1, [sp, #0]
 801e848:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e84a:	9201      	str	r2, [sp, #4]
 801e84c:	2a00      	cmp	r2, #0
 801e84e:	f000 8116 	beq.w	801ea7e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 801e852:	6820      	ldr	r0, [r4, #0]
 801e854:	aa0a      	add	r2, sp, #40	@ 0x28
 801e856:	6861      	ldr	r1, [r4, #4]
 801e858:	c203      	stmia	r2!, {r0, r1}
 801e85a:	6818      	ldr	r0, [r3, #0]
 801e85c:	aa0c      	add	r2, sp, #48	@ 0x30
 801e85e:	6859      	ldr	r1, [r3, #4]
 801e860:	c203      	stmia	r2!, {r0, r1}
 801e862:	a80a      	add	r0, sp, #40	@ 0x28
 801e864:	f7f9 fb60 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e868:	4621      	mov	r1, r4
 801e86a:	a80c      	add	r0, sp, #48	@ 0x30
 801e86c:	f7f9 fb84 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e870:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801e874:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801e878:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e87c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801e880:	bfdb      	ittet	le
 801e882:	b2b3      	uxthle	r3, r6
 801e884:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801e888:	2301      	movgt	r3, #1
 801e88a:	fb92 f3f3 	sdivle	r3, r2, r3
 801e88e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801e892:	441d      	add	r5, r3
 801e894:	fb92 f1f3 	sdiv	r1, r2, r3
 801e898:	fa1f fc81 	uxth.w	ip, r1
 801e89c:	3d01      	subs	r5, #1
 801e89e:	fb0c 2413 	mls	r4, ip, r3, r2
 801e8a2:	4661      	mov	r1, ip
 801e8a4:	fb14 f406 	smulbb	r4, r4, r6
 801e8a8:	4404      	add	r4, r0
 801e8aa:	fb95 f5f3 	sdiv	r5, r5, r3
 801e8ae:	b2a4      	uxth	r4, r4
 801e8b0:	b131      	cbz	r1, 801e8c0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 801e8b2:	9b05      	ldr	r3, [sp, #20]
 801e8b4:	9900      	ldr	r1, [sp, #0]
 801e8b6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801e8ba:	ba1b      	rev	r3, r3
 801e8bc:	4419      	add	r1, r3
 801e8be:	9100      	str	r1, [sp, #0]
 801e8c0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801e8c4:	b2ad      	uxth	r5, r5
 801e8c6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801e8ca:	4418      	add	r0, r3
 801e8cc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801e8d0:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801e8d4:	00ad      	lsls	r5, r5, #2
 801e8d6:	441a      	add	r2, r3
 801e8d8:	4b6a      	ldr	r3, [pc, #424]	@ (801ea84 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801e8da:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801e8de:	6818      	ldr	r0, [r3, #0]
 801e8e0:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801e8e4:	6803      	ldr	r3, [r0, #0]
 801e8e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e8e8:	4798      	blx	r3
 801e8ea:	4967      	ldr	r1, [pc, #412]	@ (801ea88 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 801e8ec:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801e8f0:	2c00      	cmp	r4, #0
 801e8f2:	880b      	ldrh	r3, [r1, #0]
 801e8f4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801e8f8:	bf0c      	ite	eq
 801e8fa:	46c6      	moveq	lr, r8
 801e8fc:	f04f 0e00 	movne.w	lr, #0
 801e900:	9109      	str	r1, [sp, #36]	@ 0x24
 801e902:	fb03 c202 	mla	r2, r3, r2, ip
 801e906:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801e90a:	4373      	muls	r3, r6
 801e90c:	fa1f fe8e 	uxth.w	lr, lr
 801e910:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e914:	9103      	str	r1, [sp, #12]
 801e916:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e91a:	9306      	str	r3, [sp, #24]
 801e91c:	1d2b      	adds	r3, r5, #4
 801e91e:	9307      	str	r3, [sp, #28]
 801e920:	9b01      	ldr	r3, [sp, #4]
 801e922:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 801e926:	2300      	movs	r3, #0
 801e928:	b292      	uxth	r2, r2
 801e92a:	9302      	str	r3, [sp, #8]
 801e92c:	9204      	str	r2, [sp, #16]
 801e92e:	9a06      	ldr	r2, [sp, #24]
 801e930:	4282      	cmp	r2, r0
 801e932:	f240 809f 	bls.w	801ea74 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 801e936:	b963      	cbnz	r3, 801e952 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801e938:	9b00      	ldr	r3, [sp, #0]
 801e93a:	781a      	ldrb	r2, [r3, #0]
 801e93c:	0993      	lsrs	r3, r2, #6
 801e93e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801e942:	9202      	str	r2, [sp, #8]
 801e944:	1e5a      	subs	r2, r3, #1
 801e946:	2a02      	cmp	r2, #2
 801e948:	d815      	bhi.n	801e976 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 801e94a:	9a00      	ldr	r2, [sp, #0]
 801e94c:	b29b      	uxth	r3, r3
 801e94e:	3201      	adds	r2, #1
 801e950:	9200      	str	r2, [sp, #0]
 801e952:	b1b4      	cbz	r4, 801e982 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 801e954:	429c      	cmp	r4, r3
 801e956:	bf91      	iteee	ls
 801e958:	1b1c      	subls	r4, r3, r4
 801e95a:	1ae4      	subhi	r4, r4, r3
 801e95c:	4671      	movhi	r1, lr
 801e95e:	f04f 0a00 	movhi.w	sl, #0
 801e962:	bf9b      	ittet	ls
 801e964:	fa1f fa84 	uxthls.w	sl, r4
 801e968:	2400      	movls	r4, #0
 801e96a:	b2a4      	uxthhi	r4, r4
 801e96c:	fa1f f188 	uxthls.w	r1, r8
 801e970:	4653      	mov	r3, sl
 801e972:	468e      	mov	lr, r1
 801e974:	e7db      	b.n	801e92e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 801e976:	9a00      	ldr	r2, [sp, #0]
 801e978:	9b00      	ldr	r3, [sp, #0]
 801e97a:	3202      	adds	r2, #2
 801e97c:	785b      	ldrb	r3, [r3, #1]
 801e97e:	9200      	str	r2, [sp, #0]
 801e980:	e7e7      	b.n	801e952 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801e982:	2202      	movs	r2, #2
 801e984:	9907      	ldr	r1, [sp, #28]
 801e986:	4573      	cmp	r3, lr
 801e988:	4615      	mov	r5, r2
 801e98a:	9a02      	ldr	r2, [sp, #8]
 801e98c:	bf24      	itt	cs
 801e98e:	eba3 0a0e 	subcs.w	sl, r3, lr
 801e992:	46f1      	movcs	r9, lr
 801e994:	fb15 1202 	smlabb	r2, r5, r2, r1
 801e998:	9905      	ldr	r1, [sp, #20]
 801e99a:	bf34      	ite	cc
 801e99c:	4699      	movcc	r9, r3
 801e99e:	fa1f fa8a 	uxthcs.w	sl, sl
 801e9a2:	f831 c002 	ldrh.w	ip, [r1, r2]
 801e9a6:	bf38      	it	cc
 801e9a8:	ebae 0103 	subcc.w	r1, lr, r3
 801e9ac:	9a01      	ldr	r2, [sp, #4]
 801e9ae:	bf2e      	itee	cs
 801e9b0:	4621      	movcs	r1, r4
 801e9b2:	b289      	uxthcc	r1, r1
 801e9b4:	46a2      	movcc	sl, r4
 801e9b6:	2aff      	cmp	r2, #255	@ 0xff
 801e9b8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801e9bc:	d105      	bne.n	801e9ca <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 801e9be:	4481      	add	r9, r0
 801e9c0:	4581      	cmp	r9, r0
 801e9c2:	d045      	beq.n	801ea50 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801e9c4:	f820 cb02 	strh.w	ip, [r0], #2
 801e9c8:	e7fa      	b.n	801e9c0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 801e9ca:	ea4f 222c 	mov.w	r2, ip, asr #8
 801e9ce:	9d03      	ldr	r5, [sp, #12]
 801e9d0:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801e9d4:	4481      	add	r9, r0
 801e9d6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e9da:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801e9de:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801e9e2:	fa5f fc8c 	uxtb.w	ip, ip
 801e9e6:	436a      	muls	r2, r5
 801e9e8:	fb0b fb05 	mul.w	fp, fp, r5
 801e9ec:	fb0c fc05 	mul.w	ip, ip, r5
 801e9f0:	9208      	str	r2, [sp, #32]
 801e9f2:	4581      	cmp	r9, r0
 801e9f4:	d02c      	beq.n	801ea50 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801e9f6:	8802      	ldrh	r2, [r0, #0]
 801e9f8:	9d04      	ldr	r5, [sp, #16]
 801e9fa:	1216      	asrs	r6, r2, #8
 801e9fc:	9f04      	ldr	r7, [sp, #16]
 801e9fe:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801ea02:	fb16 f605 	smulbb	r6, r6, r5
 801ea06:	9d08      	ldr	r5, [sp, #32]
 801ea08:	442e      	add	r6, r5
 801ea0a:	10d5      	asrs	r5, r2, #3
 801ea0c:	00d2      	lsls	r2, r2, #3
 801ea0e:	b2b6      	uxth	r6, r6
 801ea10:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801ea14:	b2d2      	uxtb	r2, r2
 801ea16:	fb15 f507 	smulbb	r5, r5, r7
 801ea1a:	fb12 f207 	smulbb	r2, r2, r7
 801ea1e:	1c77      	adds	r7, r6, #1
 801ea20:	445d      	add	r5, fp
 801ea22:	4462      	add	r2, ip
 801ea24:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801ea28:	b2ad      	uxth	r5, r5
 801ea2a:	b292      	uxth	r2, r2
 801ea2c:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801ea30:	1c57      	adds	r7, r2, #1
 801ea32:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 801ea36:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ea3a:	4316      	orrs	r6, r2
 801ea3c:	1c6a      	adds	r2, r5, #1
 801ea3e:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801ea42:	096d      	lsrs	r5, r5, #5
 801ea44:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ea48:	432e      	orrs	r6, r5
 801ea4a:	f820 6b02 	strh.w	r6, [r0], #2
 801ea4e:	e7d0      	b.n	801e9f2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 801ea50:	4573      	cmp	r3, lr
 801ea52:	d38d      	bcc.n	801e970 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801ea54:	fa1f f188 	uxth.w	r1, r8
 801ea58:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801ea5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea5e:	1a64      	subs	r4, r4, r1
 801ea60:	881b      	ldrh	r3, [r3, #0]
 801ea62:	b2a4      	uxth	r4, r4
 801ea64:	eba3 0308 	sub.w	r3, r3, r8
 801ea68:	2c00      	cmp	r4, #0
 801ea6a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ea6e:	bf18      	it	ne
 801ea70:	2100      	movne	r1, #0
 801ea72:	e77d      	b.n	801e970 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801ea74:	4b03      	ldr	r3, [pc, #12]	@ (801ea84 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801ea76:	6818      	ldr	r0, [r3, #0]
 801ea78:	6803      	ldr	r3, [r0, #0]
 801ea7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ea7c:	4798      	blx	r3
 801ea7e:	b00f      	add	sp, #60	@ 0x3c
 801ea80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea84:	200279d8 	.word	0x200279d8
 801ea88:	200279d2 	.word	0x200279d2

0801ea8c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801ea8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea90:	b09f      	sub	sp, #124	@ 0x7c
 801ea92:	461d      	mov	r5, r3
 801ea94:	4604      	mov	r4, r0
 801ea96:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ea98:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 801ea9c:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 801eaa0:	9209      	str	r2, [sp, #36]	@ 0x24
 801eaa2:	2a00      	cmp	r2, #0
 801eaa4:	f000 81ed 	beq.w	801ee82 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f6>
 801eaa8:	6828      	ldr	r0, [r5, #0]
 801eaaa:	aa1a      	add	r2, sp, #104	@ 0x68
 801eaac:	6869      	ldr	r1, [r5, #4]
 801eaae:	c203      	stmia	r2!, {r0, r1}
 801eab0:	6818      	ldr	r0, [r3, #0]
 801eab2:	aa1c      	add	r2, sp, #112	@ 0x70
 801eab4:	6859      	ldr	r1, [r3, #4]
 801eab6:	c203      	stmia	r2!, {r0, r1}
 801eab8:	a81a      	add	r0, sp, #104	@ 0x68
 801eaba:	f7f9 fa35 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eabe:	4629      	mov	r1, r5
 801eac0:	a81c      	add	r0, sp, #112	@ 0x70
 801eac2:	f7f9 fa59 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801eac6:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801eaca:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 801eace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ead2:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 801ead6:	bfdb      	ittet	le
 801ead8:	b29a      	uxthle	r2, r3
 801eada:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801eade:	2201      	movgt	r2, #1
 801eae0:	fb91 f2f2 	sdivle	r2, r1, r2
 801eae4:	9202      	str	r2, [sp, #8]
 801eae6:	9802      	ldr	r0, [sp, #8]
 801eae8:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 801eaec:	9902      	ldr	r1, [sp, #8]
 801eaee:	fb92 f0f0 	sdiv	r0, r2, r0
 801eaf2:	b280      	uxth	r0, r0
 801eaf4:	4488      	add	r8, r1
 801eaf6:	9010      	str	r0, [sp, #64]	@ 0x40
 801eaf8:	f108 38ff 	add.w	r8, r8, #4294967295
 801eafc:	9802      	ldr	r0, [sp, #8]
 801eafe:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801eb00:	fb05 2510 	mls	r5, r5, r0, r2
 801eb04:	fb98 f8f1 	sdiv	r8, r8, r1
 801eb08:	fb15 f503 	smulbb	r5, r5, r3
 801eb0c:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 801eb10:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801eb14:	f108 0801 	add.w	r8, r8, #1
 801eb18:	440d      	add	r5, r1
 801eb1a:	4419      	add	r1, r3
 801eb1c:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 801eb20:	fa1f f888 	uxth.w	r8, r8
 801eb24:	441a      	add	r2, r3
 801eb26:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 801eb2a:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 801eb2e:	b2ad      	uxth	r5, r5
 801eb30:	9304      	str	r3, [sp, #16]
 801eb32:	4b94      	ldr	r3, [pc, #592]	@ (801ed84 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801eb34:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 801eb38:	6818      	ldr	r0, [r3, #0]
 801eb3a:	6803      	ldr	r3, [r0, #0]
 801eb3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb3e:	4798      	blx	r3
 801eb40:	4b91      	ldr	r3, [pc, #580]	@ (801ed88 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801eb42:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 801eb46:	2d00      	cmp	r5, #0
 801eb48:	881a      	ldrh	r2, [r3, #0]
 801eb4a:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 801eb4e:	fb02 f606 	mul.w	r6, r2, r6
 801eb52:	fb02 7101 	mla	r1, r2, r1, r7
 801eb56:	9318      	str	r3, [sp, #96]	@ 0x60
 801eb58:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801eb5c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 801eb60:	f04f 0100 	mov.w	r1, #0
 801eb64:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 801eb68:	930f      	str	r3, [sp, #60]	@ 0x3c
 801eb6a:	4b88      	ldr	r3, [pc, #544]	@ (801ed8c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>)
 801eb6c:	920a      	str	r2, [sp, #40]	@ 0x28
 801eb6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801eb70:	eba3 0304 	sub.w	r3, r3, r4
 801eb74:	910d      	str	r1, [sp, #52]	@ 0x34
 801eb76:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801eb7a:	9319      	str	r3, [sp, #100]	@ 0x64
 801eb7c:	f108 0204 	add.w	r2, r8, #4
 801eb80:	9211      	str	r2, [sp, #68]	@ 0x44
 801eb82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eb84:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801eb88:	9215      	str	r2, [sp, #84]	@ 0x54
 801eb8a:	9a04      	ldr	r2, [sp, #16]
 801eb8c:	bf18      	it	ne
 801eb8e:	2200      	movne	r2, #0
 801eb90:	b292      	uxth	r2, r2
 801eb92:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801eb94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eb96:	fa11 f383 	uxtah	r3, r1, r3
 801eb9a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801eb9c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801eba0:	3304      	adds	r3, #4
 801eba2:	9306      	str	r3, [sp, #24]
 801eba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eba6:	4283      	cmp	r3, r0
 801eba8:	f240 8166 	bls.w	801ee78 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ec>
 801ebac:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 801ebb0:	f04f 0a01 	mov.w	sl, #1
 801ebb4:	9902      	ldr	r1, [sp, #8]
 801ebb6:	9e06      	ldr	r6, [sp, #24]
 801ebb8:	46d3      	mov	fp, sl
 801ebba:	4657      	mov	r7, sl
 801ebbc:	7836      	ldrb	r6, [r6, #0]
 801ebbe:	fbb5 f3f3 	udiv	r3, r5, r3
 801ebc2:	1acb      	subs	r3, r1, r3
 801ebc4:	9612      	str	r6, [sp, #72]	@ 0x48
 801ebc6:	3601      	adds	r6, #1
 801ebc8:	b29b      	uxth	r3, r3
 801ebca:	9605      	str	r6, [sp, #20]
 801ebcc:	9316      	str	r3, [sp, #88]	@ 0x58
 801ebce:	9b06      	ldr	r3, [sp, #24]
 801ebd0:	7859      	ldrb	r1, [r3, #1]
 801ebd2:	789b      	ldrb	r3, [r3, #2]
 801ebd4:	021b      	lsls	r3, r3, #8
 801ebd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801ebda:	9906      	ldr	r1, [sp, #24]
 801ebdc:	78c9      	ldrb	r1, [r1, #3]
 801ebde:	430b      	orrs	r3, r1
 801ebe0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ebe2:	4419      	add	r1, r3
 801ebe4:	1c4e      	adds	r6, r1, #1
 801ebe6:	7849      	ldrb	r1, [r1, #1]
 801ebe8:	9603      	str	r6, [sp, #12]
 801ebea:	0209      	lsls	r1, r1, #8
 801ebec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801ebee:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801ebf2:	5cf3      	ldrb	r3, [r6, r3]
 801ebf4:	4319      	orrs	r1, r3
 801ebf6:	b28b      	uxth	r3, r1
 801ebf8:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801ebfc:	930c      	str	r3, [sp, #48]	@ 0x30
 801ebfe:	2300      	movs	r3, #0
 801ec00:	9307      	str	r3, [sp, #28]
 801ec02:	469c      	mov	ip, r3
 801ec04:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801ec08:	930e      	str	r3, [sp, #56]	@ 0x38
 801ec0a:	2d00      	cmp	r5, #0
 801ec0c:	d07e      	beq.n	801ed0c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x280>
 801ec0e:	42af      	cmp	r7, r5
 801ec10:	d26e      	bcs.n	801ecf0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x264>
 801ec12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ec14:	1bed      	subs	r5, r5, r7
 801ec16:	9201      	str	r2, [sp, #4]
 801ec18:	4283      	cmp	r3, r0
 801ec1a:	b2ad      	uxth	r5, r5
 801ec1c:	d802      	bhi.n	801ec24 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x198>
 801ec1e:	e073      	b.n	801ed08 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 801ec20:	2b00      	cmp	r3, #0
 801ec22:	d15f      	bne.n	801ece4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x258>
 801ec24:	9b03      	ldr	r3, [sp, #12]
 801ec26:	f1cb 0207 	rsb	r2, fp, #7
 801ec2a:	785b      	ldrb	r3, [r3, #1]
 801ec2c:	4093      	lsls	r3, r2
 801ec2e:	005b      	lsls	r3, r3, #1
 801ec30:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801ec34:	9b03      	ldr	r3, [sp, #12]
 801ec36:	781b      	ldrb	r3, [r3, #0]
 801ec38:	fa43 f30b 	asr.w	r3, r3, fp
 801ec3c:	b2db      	uxtb	r3, r3
 801ec3e:	4313      	orrs	r3, r2
 801ec40:	f10b 0201 	add.w	r2, fp, #1
 801ec44:	fa5f fb82 	uxtb.w	fp, r2
 801ec48:	9a03      	ldr	r2, [sp, #12]
 801ec4a:	b29f      	uxth	r7, r3
 801ec4c:	f1bb 0f08 	cmp.w	fp, #8
 801ec50:	bf13      	iteet	ne
 801ec52:	3201      	addne	r2, #1
 801ec54:	3202      	addeq	r2, #2
 801ec56:	f04f 0b00 	moveq.w	fp, #0
 801ec5a:	9203      	strne	r2, [sp, #12]
 801ec5c:	bf08      	it	eq
 801ec5e:	9203      	streq	r2, [sp, #12]
 801ec60:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ec62:	42ba      	cmp	r2, r7
 801ec64:	d309      	bcc.n	801ec7a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ee>
 801ec66:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801ec6a:	2301      	movs	r3, #1
 801ec6c:	9a05      	ldr	r2, [sp, #20]
 801ec6e:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801ec72:	d30e      	bcc.n	801ec92 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 801ec74:	469a      	mov	sl, r3
 801ec76:	2600      	movs	r6, #0
 801ec78:	e035      	b.n	801ece6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x25a>
 801ec7a:	9b05      	ldr	r3, [sp, #20]
 801ec7c:	429f      	cmp	r7, r3
 801ec7e:	d318      	bcc.n	801ecb2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x226>
 801ec80:	eb04 030a 	add.w	r3, r4, sl
 801ec84:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801ec88:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801ec8c:	f10a 0301 	add.w	r3, sl, #1
 801ec90:	b29b      	uxth	r3, r3
 801ec92:	9a05      	ldr	r2, [sp, #20]
 801ec94:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801ec98:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ec9c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801ec9e:	7116      	strb	r6, [r2, #4]
 801eca0:	f10a 0601 	add.w	r6, sl, #1
 801eca4:	80d1      	strh	r1, [r2, #6]
 801eca6:	7156      	strb	r6, [r2, #5]
 801eca8:	9a05      	ldr	r2, [sp, #20]
 801ecaa:	3201      	adds	r2, #1
 801ecac:	b292      	uxth	r2, r2
 801ecae:	9205      	str	r2, [sp, #20]
 801ecb0:	e7e0      	b.n	801ec74 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e8>
 801ecb2:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801ecb6:	463a      	mov	r2, r7
 801ecb8:	795b      	ldrb	r3, [r3, #5]
 801ecba:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801ecbe:	4426      	add	r6, r4
 801ecc0:	9919      	ldr	r1, [sp, #100]	@ 0x64
 801ecc2:	eb01 0c06 	add.w	ip, r1, r6
 801ecc6:	f1bc 0f00 	cmp.w	ip, #0
 801ecca:	dd07      	ble.n	801ecdc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>
 801eccc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ecd0:	f892 c004 	ldrb.w	ip, [r2, #4]
 801ecd4:	f806 cd01 	strb.w	ip, [r6, #-1]!
 801ecd8:	88d2      	ldrh	r2, [r2, #6]
 801ecda:	e7f1      	b.n	801ecc0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x234>
 801ecdc:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801ece0:	b29b      	uxth	r3, r3
 801ece2:	e7c3      	b.n	801ec6c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 801ece4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ece6:	970c      	str	r7, [sp, #48]	@ 0x30
 801ece8:	46b4      	mov	ip, r6
 801ecea:	9a01      	ldr	r2, [sp, #4]
 801ecec:	461f      	mov	r7, r3
 801ecee:	e78c      	b.n	801ec0a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17e>
 801ecf0:	1b7b      	subs	r3, r7, r5
 801ecf2:	eb0c 0605 	add.w	r6, ip, r5
 801ecf6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ecfa:	b29b      	uxth	r3, r3
 801ecfc:	b2b6      	uxth	r6, r6
 801ecfe:	9201      	str	r2, [sp, #4]
 801ed00:	2500      	movs	r5, #0
 801ed02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ed04:	4282      	cmp	r2, r0
 801ed06:	d88b      	bhi.n	801ec20 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 801ed08:	9a01      	ldr	r2, [sp, #4]
 801ed0a:	e74b      	b.n	801eba4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 801ed0c:	4297      	cmp	r7, r2
 801ed0e:	d332      	bcc.n	801ed76 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2ea>
 801ed10:	1abb      	subs	r3, r7, r2
 801ed12:	9208      	str	r2, [sp, #32]
 801ed14:	9501      	str	r5, [sp, #4]
 801ed16:	b29b      	uxth	r3, r3
 801ed18:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ed1a:	29ff      	cmp	r1, #255	@ 0xff
 801ed1c:	9908      	ldr	r1, [sp, #32]
 801ed1e:	eb0c 0601 	add.w	r6, ip, r1
 801ed22:	d135      	bne.n	801ed90 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 801ed24:	f1a0 0e02 	sub.w	lr, r0, #2
 801ed28:	b2b6      	uxth	r6, r6
 801ed2a:	45b4      	cmp	ip, r6
 801ed2c:	f040 808c 	bne.w	801ee48 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3bc>
 801ed30:	9908      	ldr	r1, [sp, #32]
 801ed32:	4297      	cmp	r7, r2
 801ed34:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801ed38:	d3e2      	bcc.n	801ed00 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x274>
 801ed3a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ed3c:	9904      	ldr	r1, [sp, #16]
 801ed3e:	8812      	ldrh	r2, [r2, #0]
 801ed40:	1a52      	subs	r2, r2, r1
 801ed42:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801ed44:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ed48:	9a07      	ldr	r2, [sp, #28]
 801ed4a:	3201      	adds	r2, #1
 801ed4c:	428a      	cmp	r2, r1
 801ed4e:	9207      	str	r2, [sp, #28]
 801ed50:	f040 8087 	bne.w	801ee62 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d6>
 801ed54:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 801ed58:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 801ed5c:	9b04      	ldr	r3, [sp, #16]
 801ed5e:	1bed      	subs	r5, r5, r7
 801ed60:	b2ad      	uxth	r5, r5
 801ed62:	2d00      	cmp	r5, #0
 801ed64:	bf08      	it	eq
 801ed66:	461a      	moveq	r2, r3
 801ed68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ed6a:	bf18      	it	ne
 801ed6c:	2200      	movne	r2, #0
 801ed6e:	3301      	adds	r3, #1
 801ed70:	b292      	uxth	r2, r2
 801ed72:	930d      	str	r3, [sp, #52]	@ 0x34
 801ed74:	e70d      	b.n	801eb92 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x106>
 801ed76:	1bd1      	subs	r1, r2, r7
 801ed78:	9708      	str	r7, [sp, #32]
 801ed7a:	b28b      	uxth	r3, r1
 801ed7c:	9301      	str	r3, [sp, #4]
 801ed7e:	462b      	mov	r3, r5
 801ed80:	e7ca      	b.n	801ed18 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>
 801ed82:	bf00      	nop
 801ed84:	200279d8 	.word	0x200279d8
 801ed88:	200279d2 	.word	0x200279d2
 801ed8c:	fffff7fb 	.word	0xfffff7fb
 801ed90:	b2b6      	uxth	r6, r6
 801ed92:	900b      	str	r0, [sp, #44]	@ 0x2c
 801ed94:	45b4      	cmp	ip, r6
 801ed96:	d0cb      	beq.n	801ed30 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a4>
 801ed98:	f10c 0101 	add.w	r1, ip, #1
 801ed9c:	44a4      	add	ip, r4
 801ed9e:	9117      	str	r1, [sp, #92]	@ 0x5c
 801eda0:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 801eda4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801eda6:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801edaa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801edac:	ea4f 2825 	mov.w	r8, r5, asr #8
 801edb0:	f8b1 c000 	ldrh.w	ip, [r1]
 801edb4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801edb6:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801edba:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 801edbe:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801edc2:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801edc6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801edca:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801edce:	fb1e fe01 	smulbb	lr, lr, r1
 801edd2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801edd4:	fa5f fc8c 	uxtb.w	ip, ip
 801edd8:	fb08 e801 	mla	r8, r8, r1, lr
 801eddc:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 801ede0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ede2:	00ed      	lsls	r5, r5, #3
 801ede4:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801ede8:	fa1f f888 	uxth.w	r8, r8
 801edec:	fb19 f901 	smulbb	r9, r9, r1
 801edf0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801edf2:	b2ed      	uxtb	r5, r5
 801edf4:	fb0e 9e01 	mla	lr, lr, r1, r9
 801edf8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801edfa:	fb1c fc01 	smulbb	ip, ip, r1
 801edfe:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801ee00:	fa1f fe8e 	uxth.w	lr, lr
 801ee04:	fb05 c501 	mla	r5, r5, r1, ip
 801ee08:	f108 0c01 	add.w	ip, r8, #1
 801ee0c:	f10e 0901 	add.w	r9, lr, #1
 801ee10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ee12:	b2ad      	uxth	r5, r5
 801ee14:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801ee18:	f105 0c01 	add.w	ip, r5, #1
 801ee1c:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 801ee20:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801ee24:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801ee28:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ee2c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801ee30:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801ee34:	ea4c 0808 	orr.w	r8, ip, r8
 801ee38:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 801ee3c:	ea48 0809 	orr.w	r8, r8, r9
 801ee40:	f821 8b02 	strh.w	r8, [r1], #2
 801ee44:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ee46:	e7a5      	b.n	801ed94 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x308>
 801ee48:	f10c 0801 	add.w	r8, ip, #1
 801ee4c:	44a4      	add	ip, r4
 801ee4e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ee50:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 801ee54:	fa1f fc88 	uxth.w	ip, r8
 801ee58:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801ee5c:	f82e 5f02 	strh.w	r5, [lr, #2]!
 801ee60:	e763      	b.n	801ed2a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29e>
 801ee62:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ee66:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801ee6a:	1aad      	subs	r5, r5, r2
 801ee6c:	b2ad      	uxth	r5, r5
 801ee6e:	2d00      	cmp	r5, #0
 801ee70:	bf18      	it	ne
 801ee72:	2200      	movne	r2, #0
 801ee74:	9201      	str	r2, [sp, #4]
 801ee76:	e744      	b.n	801ed02 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x276>
 801ee78:	4b03      	ldr	r3, [pc, #12]	@ (801ee88 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3fc>)
 801ee7a:	6818      	ldr	r0, [r3, #0]
 801ee7c:	6803      	ldr	r3, [r0, #0]
 801ee7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ee80:	4798      	blx	r3
 801ee82:	b01f      	add	sp, #124	@ 0x7c
 801ee84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee88:	200279d8 	.word	0x200279d8

0801ee8c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801ee8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee90:	b08f      	sub	sp, #60	@ 0x3c
 801ee92:	461c      	mov	r4, r3
 801ee94:	460f      	mov	r7, r1
 801ee96:	9203      	str	r2, [sp, #12]
 801ee98:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ee9c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ee9e:	9202      	str	r2, [sp, #8]
 801eea0:	2a00      	cmp	r2, #0
 801eea2:	f000 8128 	beq.w	801f0f6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801eea6:	6820      	ldr	r0, [r4, #0]
 801eea8:	aa0a      	add	r2, sp, #40	@ 0x28
 801eeaa:	6861      	ldr	r1, [r4, #4]
 801eeac:	c203      	stmia	r2!, {r0, r1}
 801eeae:	6818      	ldr	r0, [r3, #0]
 801eeb0:	aa0c      	add	r2, sp, #48	@ 0x30
 801eeb2:	6859      	ldr	r1, [r3, #4]
 801eeb4:	c203      	stmia	r2!, {r0, r1}
 801eeb6:	a80a      	add	r0, sp, #40	@ 0x28
 801eeb8:	f7f9 f836 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eebc:	4621      	mov	r1, r4
 801eebe:	a80c      	add	r0, sp, #48	@ 0x30
 801eec0:	f7f9 f85a 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801eec4:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801eec8:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801eecc:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801eed0:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801eed4:	bfdb      	ittet	le
 801eed6:	b2b3      	uxthle	r3, r6
 801eed8:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801eedc:	2301      	movgt	r3, #1
 801eede:	fb92 f3f3 	sdivle	r3, r2, r3
 801eee2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801eee6:	441d      	add	r5, r3
 801eee8:	fb92 f1f3 	sdiv	r1, r2, r3
 801eeec:	fa1f fc81 	uxth.w	ip, r1
 801eef0:	3d01      	subs	r5, #1
 801eef2:	fb0c 2413 	mls	r4, ip, r3, r2
 801eef6:	4661      	mov	r1, ip
 801eef8:	fb14 f406 	smulbb	r4, r4, r6
 801eefc:	4404      	add	r4, r0
 801eefe:	fb95 f5f3 	sdiv	r5, r5, r3
 801ef02:	b2a4      	uxth	r4, r4
 801ef04:	b121      	cbz	r1, 801ef10 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 801ef06:	9b03      	ldr	r3, [sp, #12]
 801ef08:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ef0c:	ba1b      	rev	r3, r3
 801ef0e:	441f      	add	r7, r3
 801ef10:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801ef14:	b2ad      	uxth	r5, r5
 801ef16:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801ef1a:	4418      	add	r0, r3
 801ef1c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801ef20:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801ef24:	00ad      	lsls	r5, r5, #2
 801ef26:	441a      	add	r2, r3
 801ef28:	4b74      	ldr	r3, [pc, #464]	@ (801f0fc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801ef2a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801ef2e:	6818      	ldr	r0, [r3, #0]
 801ef30:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801ef34:	6803      	ldr	r3, [r0, #0]
 801ef36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef38:	4798      	blx	r3
 801ef3a:	4a71      	ldr	r2, [pc, #452]	@ (801f100 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801ef3c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801ef40:	2c00      	cmp	r4, #0
 801ef42:	8813      	ldrh	r3, [r2, #0]
 801ef44:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801ef48:	bf0c      	ite	eq
 801ef4a:	46c8      	moveq	r8, r9
 801ef4c:	f04f 0800 	movne.w	r8, #0
 801ef50:	9209      	str	r2, [sp, #36]	@ 0x24
 801ef52:	fb03 c101 	mla	r1, r3, r1, ip
 801ef56:	4373      	muls	r3, r6
 801ef58:	fa1f f888 	uxth.w	r8, r8
 801ef5c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801ef60:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ef64:	9304      	str	r3, [sp, #16]
 801ef66:	1d2b      	adds	r3, r5, #4
 801ef68:	9305      	str	r3, [sp, #20]
 801ef6a:	2300      	movs	r3, #0
 801ef6c:	9301      	str	r3, [sp, #4]
 801ef6e:	9a04      	ldr	r2, [sp, #16]
 801ef70:	4282      	cmp	r2, r0
 801ef72:	f240 80bb 	bls.w	801f0ec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801ef76:	b95b      	cbnz	r3, 801ef90 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x104>
 801ef78:	783a      	ldrb	r2, [r7, #0]
 801ef7a:	0993      	lsrs	r3, r2, #6
 801ef7c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801ef80:	9201      	str	r2, [sp, #4]
 801ef82:	1e5a      	subs	r2, r3, #1
 801ef84:	2a02      	cmp	r2, #2
 801ef86:	bf8d      	iteet	hi
 801ef88:	787b      	ldrbhi	r3, [r7, #1]
 801ef8a:	3701      	addls	r7, #1
 801ef8c:	b29b      	uxthls	r3, r3
 801ef8e:	3702      	addhi	r7, #2
 801ef90:	b184      	cbz	r4, 801efb4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x128>
 801ef92:	429c      	cmp	r4, r3
 801ef94:	bf91      	iteee	ls
 801ef96:	1b1c      	subls	r4, r3, r4
 801ef98:	1ae4      	subhi	r4, r4, r3
 801ef9a:	46c4      	movhi	ip, r8
 801ef9c:	f04f 0a00 	movhi.w	sl, #0
 801efa0:	bf9b      	ittet	ls
 801efa2:	fa1f fa84 	uxthls.w	sl, r4
 801efa6:	2400      	movls	r4, #0
 801efa8:	b2a4      	uxthhi	r4, r4
 801efaa:	fa1f fc89 	uxthls.w	ip, r9
 801efae:	4653      	mov	r3, sl
 801efb0:	46e0      	mov	r8, ip
 801efb2:	e7dc      	b.n	801ef6e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe2>
 801efb4:	2204      	movs	r2, #4
 801efb6:	9905      	ldr	r1, [sp, #20]
 801efb8:	4543      	cmp	r3, r8
 801efba:	4615      	mov	r5, r2
 801efbc:	9a01      	ldr	r2, [sp, #4]
 801efbe:	bf24      	itt	cs
 801efc0:	eba3 0a08 	subcs.w	sl, r3, r8
 801efc4:	46c6      	movcs	lr, r8
 801efc6:	fb15 1202 	smlabb	r2, r5, r2, r1
 801efca:	9903      	ldr	r1, [sp, #12]
 801efcc:	bf3c      	itt	cc
 801efce:	eba8 0c03 	subcc.w	ip, r8, r3
 801efd2:	469e      	movcc	lr, r3
 801efd4:	588a      	ldr	r2, [r1, r2]
 801efd6:	bf26      	itte	cs
 801efd8:	fa1f fa8a 	uxthcs.w	sl, sl
 801efdc:	46a4      	movcs	ip, r4
 801efde:	fa1f fc8c 	uxthcc.w	ip, ip
 801efe2:	ea4f 6112 	mov.w	r1, r2, lsr #24
 801efe6:	bf38      	it	cc
 801efe8:	46a2      	movcc	sl, r4
 801efea:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801efee:	2900      	cmp	r1, #0
 801eff0:	d066      	beq.n	801f0c0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 801eff2:	29ff      	cmp	r1, #255	@ 0xff
 801eff4:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801eff8:	d114      	bne.n	801f024 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801effa:	9d02      	ldr	r5, [sp, #8]
 801effc:	2dff      	cmp	r5, #255	@ 0xff
 801effe:	d111      	bne.n	801f024 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801f000:	0951      	lsrs	r1, r2, #5
 801f002:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801f006:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f00a:	4486      	add	lr, r0
 801f00c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801f010:	f026 0607 	bic.w	r6, r6, #7
 801f014:	430e      	orrs	r6, r1
 801f016:	4316      	orrs	r6, r2
 801f018:	b2b6      	uxth	r6, r6
 801f01a:	4586      	cmp	lr, r0
 801f01c:	d051      	beq.n	801f0c2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801f01e:	f820 6b02 	strh.w	r6, [r0], #2
 801f022:	e7fa      	b.n	801f01a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801f024:	9d02      	ldr	r5, [sp, #8]
 801f026:	b2f6      	uxtb	r6, r6
 801f028:	4486      	add	lr, r0
 801f02a:	4369      	muls	r1, r5
 801f02c:	1c4d      	adds	r5, r1, #1
 801f02e:	eb05 2521 	add.w	r5, r5, r1, asr #8
 801f032:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801f036:	b2d2      	uxtb	r2, r2
 801f038:	122d      	asrs	r5, r5, #8
 801f03a:	ea6f 0b05 	mvn.w	fp, r5
 801f03e:	b2ad      	uxth	r5, r5
 801f040:	fb11 f105 	smulbb	r1, r1, r5
 801f044:	fa5f fb8b 	uxtb.w	fp, fp
 801f048:	fb16 f605 	smulbb	r6, r6, r5
 801f04c:	fb12 f205 	smulbb	r2, r2, r5
 801f050:	b289      	uxth	r1, r1
 801f052:	b2b6      	uxth	r6, r6
 801f054:	b292      	uxth	r2, r2
 801f056:	9106      	str	r1, [sp, #24]
 801f058:	9607      	str	r6, [sp, #28]
 801f05a:	9208      	str	r2, [sp, #32]
 801f05c:	4586      	cmp	lr, r0
 801f05e:	d030      	beq.n	801f0c2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801f060:	8802      	ldrh	r2, [r0, #0]
 801f062:	9906      	ldr	r1, [sp, #24]
 801f064:	1216      	asrs	r6, r2, #8
 801f066:	10d5      	asrs	r5, r2, #3
 801f068:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f06c:	00d2      	lsls	r2, r2, #3
 801f06e:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801f072:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f076:	b2d2      	uxtb	r2, r2
 801f078:	fb06 160b 	mla	r6, r6, fp, r1
 801f07c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801f080:	9907      	ldr	r1, [sp, #28]
 801f082:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f086:	b2b6      	uxth	r6, r6
 801f088:	fb05 150b 	mla	r5, r5, fp, r1
 801f08c:	9908      	ldr	r1, [sp, #32]
 801f08e:	fb02 120b 	mla	r2, r2, fp, r1
 801f092:	1c71      	adds	r1, r6, #1
 801f094:	b2ad      	uxth	r5, r5
 801f096:	b292      	uxth	r2, r2
 801f098:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801f09c:	1c51      	adds	r1, r2, #1
 801f09e:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801f0a2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f0a6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f0aa:	4316      	orrs	r6, r2
 801f0ac:	1c6a      	adds	r2, r5, #1
 801f0ae:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801f0b2:	096d      	lsrs	r5, r5, #5
 801f0b4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f0b8:	432e      	orrs	r6, r5
 801f0ba:	f820 6b02 	strh.w	r6, [r0], #2
 801f0be:	e7cd      	b.n	801f05c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 801f0c0:	4470      	add	r0, lr
 801f0c2:	4543      	cmp	r3, r8
 801f0c4:	f4ff af73 	bcc.w	801efae <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801f0c8:	fa1f fc89 	uxth.w	ip, r9
 801f0cc:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801f0d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f0d2:	eba4 040c 	sub.w	r4, r4, ip
 801f0d6:	881b      	ldrh	r3, [r3, #0]
 801f0d8:	b2a4      	uxth	r4, r4
 801f0da:	eba3 0309 	sub.w	r3, r3, r9
 801f0de:	2c00      	cmp	r4, #0
 801f0e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f0e4:	bf18      	it	ne
 801f0e6:	f04f 0c00 	movne.w	ip, #0
 801f0ea:	e760      	b.n	801efae <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801f0ec:	4b03      	ldr	r3, [pc, #12]	@ (801f0fc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801f0ee:	6818      	ldr	r0, [r3, #0]
 801f0f0:	6803      	ldr	r3, [r0, #0]
 801f0f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0f4:	4798      	blx	r3
 801f0f6:	b00f      	add	sp, #60	@ 0x3c
 801f0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0fc:	200279d8 	.word	0x200279d8
 801f100:	200279d2 	.word	0x200279d2

0801f104 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801f104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f108:	b093      	sub	sp, #76	@ 0x4c
 801f10a:	461c      	mov	r4, r3
 801f10c:	9205      	str	r2, [sp, #20]
 801f10e:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 801f112:	9101      	str	r1, [sp, #4]
 801f114:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f116:	9202      	str	r2, [sp, #8]
 801f118:	2a00      	cmp	r2, #0
 801f11a:	f000 812e 	beq.w	801f37a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 801f11e:	6820      	ldr	r0, [r4, #0]
 801f120:	aa0e      	add	r2, sp, #56	@ 0x38
 801f122:	6861      	ldr	r1, [r4, #4]
 801f124:	c203      	stmia	r2!, {r0, r1}
 801f126:	6818      	ldr	r0, [r3, #0]
 801f128:	aa10      	add	r2, sp, #64	@ 0x40
 801f12a:	6859      	ldr	r1, [r3, #4]
 801f12c:	c203      	stmia	r2!, {r0, r1}
 801f12e:	a80e      	add	r0, sp, #56	@ 0x38
 801f130:	f7f8 fefa 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f134:	4621      	mov	r1, r4
 801f136:	a810      	add	r0, sp, #64	@ 0x40
 801f138:	f7f8 ff1e 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f13c:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 801f140:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801f144:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801f148:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 801f14c:	bfdb      	ittet	le
 801f14e:	b2b3      	uxthle	r3, r6
 801f150:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801f154:	2301      	movgt	r3, #1
 801f156:	fb92 f3f3 	sdivle	r3, r2, r3
 801f15a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801f15e:	441d      	add	r5, r3
 801f160:	fb92 f1f3 	sdiv	r1, r2, r3
 801f164:	fa1f fc81 	uxth.w	ip, r1
 801f168:	3d01      	subs	r5, #1
 801f16a:	fb0c 2413 	mls	r4, ip, r3, r2
 801f16e:	4661      	mov	r1, ip
 801f170:	fb14 f406 	smulbb	r4, r4, r6
 801f174:	4404      	add	r4, r0
 801f176:	fb95 f5f3 	sdiv	r5, r5, r3
 801f17a:	b2a4      	uxth	r4, r4
 801f17c:	b131      	cbz	r1, 801f18c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 801f17e:	9b05      	ldr	r3, [sp, #20]
 801f180:	9901      	ldr	r1, [sp, #4]
 801f182:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f186:	ba1b      	rev	r3, r3
 801f188:	4419      	add	r1, r3
 801f18a:	9101      	str	r1, [sp, #4]
 801f18c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801f190:	b2ad      	uxth	r5, r5
 801f192:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801f196:	4418      	add	r0, r3
 801f198:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801f19c:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 801f1a0:	00ad      	lsls	r5, r5, #2
 801f1a2:	441a      	add	r2, r3
 801f1a4:	4b76      	ldr	r3, [pc, #472]	@ (801f380 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801f1a6:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801f1aa:	6818      	ldr	r0, [r3, #0]
 801f1ac:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 801f1b0:	6803      	ldr	r3, [r0, #0]
 801f1b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f1b4:	4798      	blx	r3
 801f1b6:	4973      	ldr	r1, [pc, #460]	@ (801f384 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 801f1b8:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 801f1bc:	2c00      	cmp	r4, #0
 801f1be:	880b      	ldrh	r3, [r1, #0]
 801f1c0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801f1c4:	910d      	str	r1, [sp, #52]	@ 0x34
 801f1c6:	fb03 c202 	mla	r2, r3, r2, ip
 801f1ca:	bf08      	it	eq
 801f1cc:	46dc      	moveq	ip, fp
 801f1ce:	fb03 f306 	mul.w	r3, r3, r6
 801f1d2:	bf18      	it	ne
 801f1d4:	f04f 0c00 	movne.w	ip, #0
 801f1d8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f1dc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801f1e0:	fa1f fc8c 	uxth.w	ip, ip
 801f1e4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f1e8:	9106      	str	r1, [sp, #24]
 801f1ea:	9308      	str	r3, [sp, #32]
 801f1ec:	1d2b      	adds	r3, r5, #4
 801f1ee:	9309      	str	r3, [sp, #36]	@ 0x24
 801f1f0:	9b02      	ldr	r3, [sp, #8]
 801f1f2:	43da      	mvns	r2, r3
 801f1f4:	2300      	movs	r3, #0
 801f1f6:	b2d2      	uxtb	r2, r2
 801f1f8:	9303      	str	r3, [sp, #12]
 801f1fa:	9207      	str	r2, [sp, #28]
 801f1fc:	9a08      	ldr	r2, [sp, #32]
 801f1fe:	4282      	cmp	r2, r0
 801f200:	f240 80b6 	bls.w	801f370 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 801f204:	b963      	cbnz	r3, 801f220 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801f206:	9b01      	ldr	r3, [sp, #4]
 801f208:	781a      	ldrb	r2, [r3, #0]
 801f20a:	0993      	lsrs	r3, r2, #6
 801f20c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801f210:	9203      	str	r2, [sp, #12]
 801f212:	1e5a      	subs	r2, r3, #1
 801f214:	2a02      	cmp	r2, #2
 801f216:	d815      	bhi.n	801f244 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x140>
 801f218:	9a01      	ldr	r2, [sp, #4]
 801f21a:	b29b      	uxth	r3, r3
 801f21c:	3201      	adds	r2, #1
 801f21e:	9201      	str	r2, [sp, #4]
 801f220:	b1b4      	cbz	r4, 801f250 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14c>
 801f222:	429c      	cmp	r4, r3
 801f224:	bf91      	iteee	ls
 801f226:	1b1c      	subls	r4, r3, r4
 801f228:	1ae4      	subhi	r4, r4, r3
 801f22a:	4666      	movhi	r6, ip
 801f22c:	f04f 0800 	movhi.w	r8, #0
 801f230:	bf9b      	ittet	ls
 801f232:	fa1f f884 	uxthls.w	r8, r4
 801f236:	2400      	movls	r4, #0
 801f238:	b2a4      	uxthhi	r4, r4
 801f23a:	fa1f f68b 	uxthls.w	r6, fp
 801f23e:	4643      	mov	r3, r8
 801f240:	46b4      	mov	ip, r6
 801f242:	e7db      	b.n	801f1fc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf8>
 801f244:	9a01      	ldr	r2, [sp, #4]
 801f246:	9b01      	ldr	r3, [sp, #4]
 801f248:	3202      	adds	r2, #2
 801f24a:	785b      	ldrb	r3, [r3, #1]
 801f24c:	9201      	str	r2, [sp, #4]
 801f24e:	e7e7      	b.n	801f220 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801f250:	2203      	movs	r2, #3
 801f252:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f254:	4563      	cmp	r3, ip
 801f256:	4615      	mov	r5, r2
 801f258:	9a03      	ldr	r2, [sp, #12]
 801f25a:	bf2c      	ite	cs
 801f25c:	eba3 080c 	subcs.w	r8, r3, ip
 801f260:	ebac 0603 	subcc.w	r6, ip, r3
 801f264:	fb15 1202 	smlabb	r2, r5, r2, r1
 801f268:	9905      	ldr	r1, [sp, #20]
 801f26a:	bf24      	itt	cs
 801f26c:	fa1f f888 	uxthcs.w	r8, r8
 801f270:	46e1      	movcs	r9, ip
 801f272:	eb01 0502 	add.w	r5, r1, r2
 801f276:	9902      	ldr	r1, [sp, #8]
 801f278:	bf2f      	iteee	cs
 801f27a:	4626      	movcs	r6, r4
 801f27c:	b2b6      	uxthcc	r6, r6
 801f27e:	4699      	movcc	r9, r3
 801f280:	46a0      	movcc	r8, r4
 801f282:	29ff      	cmp	r1, #255	@ 0xff
 801f284:	d04a      	beq.n	801f31c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 801f286:	9f06      	ldr	r7, [sp, #24]
 801f288:	46ca      	mov	sl, r9
 801f28a:	78a9      	ldrb	r1, [r5, #2]
 801f28c:	9004      	str	r0, [sp, #16]
 801f28e:	4379      	muls	r1, r7
 801f290:	910a      	str	r1, [sp, #40]	@ 0x28
 801f292:	7869      	ldrb	r1, [r5, #1]
 801f294:	4379      	muls	r1, r7
 801f296:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f298:	9905      	ldr	r1, [sp, #20]
 801f29a:	5c8a      	ldrb	r2, [r1, r2]
 801f29c:	437a      	muls	r2, r7
 801f29e:	920c      	str	r2, [sp, #48]	@ 0x30
 801f2a0:	f1ba 0f00 	cmp.w	sl, #0
 801f2a4:	d03d      	beq.n	801f322 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 801f2a6:	9a04      	ldr	r2, [sp, #16]
 801f2a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f2ac:	9f07      	ldr	r7, [sp, #28]
 801f2ae:	8812      	ldrh	r2, [r2, #0]
 801f2b0:	fa1f fa8a 	uxth.w	sl, sl
 801f2b4:	46be      	mov	lr, r7
 801f2b6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801f2b8:	1215      	asrs	r5, r2, #8
 801f2ba:	10d1      	asrs	r1, r2, #3
 801f2bc:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801f2c0:	00d2      	lsls	r2, r2, #3
 801f2c2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801f2c6:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801f2ca:	b2d2      	uxtb	r2, r2
 801f2cc:	fb05 750e 	mla	r5, r5, lr, r7
 801f2d0:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801f2d4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f2d6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f2da:	b2ad      	uxth	r5, r5
 801f2dc:	fb01 710e 	mla	r1, r1, lr, r7
 801f2e0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801f2e2:	fb02 720e 	mla	r2, r2, lr, r7
 801f2e6:	f105 0e01 	add.w	lr, r5, #1
 801f2ea:	b289      	uxth	r1, r1
 801f2ec:	b292      	uxth	r2, r2
 801f2ee:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801f2f2:	f102 0e01 	add.w	lr, r2, #1
 801f2f6:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801f2fa:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801f2fe:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f302:	4315      	orrs	r5, r2
 801f304:	1c4a      	adds	r2, r1, #1
 801f306:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f30a:	9a04      	ldr	r2, [sp, #16]
 801f30c:	0949      	lsrs	r1, r1, #5
 801f30e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801f312:	430d      	orrs	r5, r1
 801f314:	f822 5b02 	strh.w	r5, [r2], #2
 801f318:	9204      	str	r2, [sp, #16]
 801f31a:	e7c1      	b.n	801f2a0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801f31c:	4649      	mov	r1, r9
 801f31e:	4686      	mov	lr, r0
 801f320:	b999      	cbnz	r1, 801f34a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x246>
 801f322:	4563      	cmp	r3, ip
 801f324:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 801f328:	d389      	bcc.n	801f23e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 801f32a:	fa1f f68b 	uxth.w	r6, fp
 801f32e:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 801f332:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f334:	1ba4      	subs	r4, r4, r6
 801f336:	881b      	ldrh	r3, [r3, #0]
 801f338:	b2a4      	uxth	r4, r4
 801f33a:	eba3 030b 	sub.w	r3, r3, fp
 801f33e:	2c00      	cmp	r4, #0
 801f340:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f344:	bf18      	it	ne
 801f346:	2600      	movne	r6, #0
 801f348:	e779      	b.n	801f23e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 801f34a:	78aa      	ldrb	r2, [r5, #2]
 801f34c:	3901      	subs	r1, #1
 801f34e:	4f0e      	ldr	r7, [pc, #56]	@ (801f388 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 801f350:	b289      	uxth	r1, r1
 801f352:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 801f356:	786a      	ldrb	r2, [r5, #1]
 801f358:	00d2      	lsls	r2, r2, #3
 801f35a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f35e:	ea4a 0202 	orr.w	r2, sl, r2
 801f362:	f895 a000 	ldrb.w	sl, [r5]
 801f366:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 801f36a:	f82e 2b02 	strh.w	r2, [lr], #2
 801f36e:	e7d7      	b.n	801f320 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 801f370:	4b03      	ldr	r3, [pc, #12]	@ (801f380 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801f372:	6818      	ldr	r0, [r3, #0]
 801f374:	6803      	ldr	r3, [r0, #0]
 801f376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f378:	4798      	blx	r3
 801f37a:	b013      	add	sp, #76	@ 0x4c
 801f37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f380:	200279d8 	.word	0x200279d8
 801f384:	200279d2 	.word	0x200279d2
 801f388:	fffff800 	.word	0xfffff800

0801f38c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801f38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f390:	b09d      	sub	sp, #116	@ 0x74
 801f392:	461c      	mov	r4, r3
 801f394:	4683      	mov	fp, r0
 801f396:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f398:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 801f39c:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801f3a0:	920e      	str	r2, [sp, #56]	@ 0x38
 801f3a2:	2a00      	cmp	r2, #0
 801f3a4:	f000 81e4 	beq.w	801f770 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>
 801f3a8:	6820      	ldr	r0, [r4, #0]
 801f3aa:	aa18      	add	r2, sp, #96	@ 0x60
 801f3ac:	6861      	ldr	r1, [r4, #4]
 801f3ae:	c203      	stmia	r2!, {r0, r1}
 801f3b0:	6818      	ldr	r0, [r3, #0]
 801f3b2:	aa1a      	add	r2, sp, #104	@ 0x68
 801f3b4:	6859      	ldr	r1, [r3, #4]
 801f3b6:	c203      	stmia	r2!, {r0, r1}
 801f3b8:	a818      	add	r0, sp, #96	@ 0x60
 801f3ba:	f7f8 fdb5 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f3be:	4621      	mov	r1, r4
 801f3c0:	a81a      	add	r0, sp, #104	@ 0x68
 801f3c2:	f7f8 fdd9 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f3c6:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801f3ca:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 801f3ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801f3d2:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801f3d6:	bfdb      	ittet	le
 801f3d8:	b29a      	uxthle	r2, r3
 801f3da:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801f3de:	2201      	movgt	r2, #1
 801f3e0:	fb91 f2f2 	sdivle	r2, r1, r2
 801f3e4:	9202      	str	r2, [sp, #8]
 801f3e6:	9802      	ldr	r0, [sp, #8]
 801f3e8:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801f3ec:	9902      	ldr	r1, [sp, #8]
 801f3ee:	fb92 f0f0 	sdiv	r0, r2, r0
 801f3f2:	b280      	uxth	r0, r0
 801f3f4:	440c      	add	r4, r1
 801f3f6:	900f      	str	r0, [sp, #60]	@ 0x3c
 801f3f8:	3c01      	subs	r4, #1
 801f3fa:	9802      	ldr	r0, [sp, #8]
 801f3fc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801f3fe:	fb05 2510 	mls	r5, r5, r0, r2
 801f402:	fb94 f4f1 	sdiv	r4, r4, r1
 801f406:	fb15 f503 	smulbb	r5, r5, r3
 801f40a:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801f40e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801f412:	3401      	adds	r4, #1
 801f414:	440d      	add	r5, r1
 801f416:	4419      	add	r1, r3
 801f418:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801f41c:	b2a4      	uxth	r4, r4
 801f41e:	441a      	add	r2, r3
 801f420:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801f424:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801f428:	00a4      	lsls	r4, r4, #2
 801f42a:	9306      	str	r3, [sp, #24]
 801f42c:	b2ad      	uxth	r5, r5
 801f42e:	4bb3      	ldr	r3, [pc, #716]	@ (801f6fc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 801f430:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801f434:	6818      	ldr	r0, [r3, #0]
 801f436:	6803      	ldr	r3, [r0, #0]
 801f438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f43a:	4798      	blx	r3
 801f43c:	4bb0      	ldr	r3, [pc, #704]	@ (801f700 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 801f43e:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801f442:	2d00      	cmp	r5, #0
 801f444:	881a      	ldrh	r2, [r3, #0]
 801f446:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 801f44a:	fb02 f606 	mul.w	r6, r2, r6
 801f44e:	fb02 7101 	mla	r1, r2, r1, r7
 801f452:	9316      	str	r3, [sp, #88]	@ 0x58
 801f454:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 801f458:	4baa      	ldr	r3, [pc, #680]	@ (801f704 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>)
 801f45a:	bf18      	it	ne
 801f45c:	2100      	movne	r1, #0
 801f45e:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 801f462:	eba3 030b 	sub.w	r3, r3, fp
 801f466:	920a      	str	r2, [sp, #40]	@ 0x28
 801f468:	f104 0204 	add.w	r2, r4, #4
 801f46c:	9317      	str	r3, [sp, #92]	@ 0x5c
 801f46e:	9213      	str	r2, [sp, #76]	@ 0x4c
 801f470:	9a06      	ldr	r2, [sp, #24]
 801f472:	bf08      	it	eq
 801f474:	4611      	moveq	r1, r2
 801f476:	2200      	movs	r2, #0
 801f478:	b289      	uxth	r1, r1
 801f47a:	920d      	str	r2, [sp, #52]	@ 0x34
 801f47c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f47e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f480:	fa12 f383 	uxtah	r3, r2, r3
 801f484:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f486:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f48a:	3304      	adds	r3, #4
 801f48c:	9308      	str	r3, [sp, #32]
 801f48e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f490:	4543      	cmp	r3, r8
 801f492:	f240 8168 	bls.w	801f766 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3da>
 801f496:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801f49a:	f04f 0e01 	mov.w	lr, #1
 801f49e:	9a02      	ldr	r2, [sp, #8]
 801f4a0:	9808      	ldr	r0, [sp, #32]
 801f4a2:	fbb5 f3f3 	udiv	r3, r5, r3
 801f4a6:	1ad3      	subs	r3, r2, r3
 801f4a8:	7800      	ldrb	r0, [r0, #0]
 801f4aa:	b29b      	uxth	r3, r3
 801f4ac:	9010      	str	r0, [sp, #64]	@ 0x40
 801f4ae:	3001      	adds	r0, #1
 801f4b0:	9314      	str	r3, [sp, #80]	@ 0x50
 801f4b2:	9b08      	ldr	r3, [sp, #32]
 801f4b4:	9007      	str	r0, [sp, #28]
 801f4b6:	785a      	ldrb	r2, [r3, #1]
 801f4b8:	789b      	ldrb	r3, [r3, #2]
 801f4ba:	021b      	lsls	r3, r3, #8
 801f4bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f4c0:	9a08      	ldr	r2, [sp, #32]
 801f4c2:	78d2      	ldrb	r2, [r2, #3]
 801f4c4:	4313      	orrs	r3, r2
 801f4c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f4c8:	441a      	add	r2, r3
 801f4ca:	1c50      	adds	r0, r2, #1
 801f4cc:	7852      	ldrb	r2, [r2, #1]
 801f4ce:	9005      	str	r0, [sp, #20]
 801f4d0:	0212      	lsls	r2, r2, #8
 801f4d2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801f4d4:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801f4d8:	5cc3      	ldrb	r3, [r0, r3]
 801f4da:	431a      	orrs	r2, r3
 801f4dc:	b293      	uxth	r3, r2
 801f4de:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 801f4e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f4e4:	2300      	movs	r3, #0
 801f4e6:	9309      	str	r3, [sp, #36]	@ 0x24
 801f4e8:	2301      	movs	r3, #1
 801f4ea:	9301      	str	r3, [sp, #4]
 801f4ec:	9304      	str	r3, [sp, #16]
 801f4ee:	2300      	movs	r3, #0
 801f4f0:	9303      	str	r3, [sp, #12]
 801f4f2:	2d00      	cmp	r5, #0
 801f4f4:	d07d      	beq.n	801f5f2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801f4f6:	45ae      	cmp	lr, r5
 801f4f8:	d26c      	bcs.n	801f5d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x248>
 801f4fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f4fc:	eba5 050e 	sub.w	r5, r5, lr
 801f500:	460c      	mov	r4, r1
 801f502:	4543      	cmp	r3, r8
 801f504:	b2ad      	uxth	r5, r5
 801f506:	d802      	bhi.n	801f50e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801f508:	e071      	b.n	801f5ee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x262>
 801f50a:	2b00      	cmp	r3, #0
 801f50c:	d15d      	bne.n	801f5ca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23e>
 801f50e:	9b05      	ldr	r3, [sp, #20]
 801f510:	9a04      	ldr	r2, [sp, #16]
 801f512:	785b      	ldrb	r3, [r3, #1]
 801f514:	f1c2 0207 	rsb	r2, r2, #7
 801f518:	9904      	ldr	r1, [sp, #16]
 801f51a:	4093      	lsls	r3, r2
 801f51c:	005b      	lsls	r3, r3, #1
 801f51e:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801f522:	9b05      	ldr	r3, [sp, #20]
 801f524:	781b      	ldrb	r3, [r3, #0]
 801f526:	410b      	asrs	r3, r1
 801f528:	3101      	adds	r1, #1
 801f52a:	b2c9      	uxtb	r1, r1
 801f52c:	b2db      	uxtb	r3, r3
 801f52e:	2908      	cmp	r1, #8
 801f530:	9104      	str	r1, [sp, #16]
 801f532:	9905      	ldr	r1, [sp, #20]
 801f534:	ea43 0302 	orr.w	r3, r3, r2
 801f538:	bf0c      	ite	eq
 801f53a:	3102      	addeq	r1, #2
 801f53c:	3101      	addne	r1, #1
 801f53e:	b29a      	uxth	r2, r3
 801f540:	bf05      	ittet	eq
 801f542:	9105      	streq	r1, [sp, #20]
 801f544:	2100      	moveq	r1, #0
 801f546:	9105      	strne	r1, [sp, #20]
 801f548:	9104      	streq	r1, [sp, #16]
 801f54a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f54c:	4291      	cmp	r1, r2
 801f54e:	d30a      	bcc.n	801f566 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1da>
 801f550:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 801f554:	2301      	movs	r3, #1
 801f556:	9907      	ldr	r1, [sp, #28]
 801f558:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801f55c:	d30f      	bcc.n	801f57e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801f55e:	2100      	movs	r1, #0
 801f560:	9301      	str	r3, [sp, #4]
 801f562:	9103      	str	r1, [sp, #12]
 801f564:	e032      	b.n	801f5cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 801f566:	9b07      	ldr	r3, [sp, #28]
 801f568:	429a      	cmp	r2, r3
 801f56a:	d318      	bcc.n	801f59e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x212>
 801f56c:	9b01      	ldr	r3, [sp, #4]
 801f56e:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 801f572:	445b      	add	r3, fp
 801f574:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801f578:	9b01      	ldr	r3, [sp, #4]
 801f57a:	3301      	adds	r3, #1
 801f57c:	b29b      	uxth	r3, r3
 801f57e:	9907      	ldr	r1, [sp, #28]
 801f580:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 801f584:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801f588:	7108      	strb	r0, [r1, #4]
 801f58a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801f58c:	80c8      	strh	r0, [r1, #6]
 801f58e:	9801      	ldr	r0, [sp, #4]
 801f590:	3001      	adds	r0, #1
 801f592:	7148      	strb	r0, [r1, #5]
 801f594:	9907      	ldr	r1, [sp, #28]
 801f596:	3101      	adds	r1, #1
 801f598:	b289      	uxth	r1, r1
 801f59a:	9107      	str	r1, [sp, #28]
 801f59c:	e7df      	b.n	801f55e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801f59e:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 801f5a2:	4611      	mov	r1, r2
 801f5a4:	795b      	ldrb	r3, [r3, #5]
 801f5a6:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 801f5aa:	4458      	add	r0, fp
 801f5ac:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 801f5ae:	4406      	add	r6, r0
 801f5b0:	2e00      	cmp	r6, #0
 801f5b2:	dd06      	ble.n	801f5c2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801f5b4:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801f5b8:	790e      	ldrb	r6, [r1, #4]
 801f5ba:	f800 6d01 	strb.w	r6, [r0, #-1]!
 801f5be:	88c9      	ldrh	r1, [r1, #6]
 801f5c0:	e7f4      	b.n	801f5ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x220>
 801f5c2:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 801f5c6:	b29b      	uxth	r3, r3
 801f5c8:	e7c5      	b.n	801f556 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 801f5ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f5cc:	4621      	mov	r1, r4
 801f5ce:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f5d0:	469e      	mov	lr, r3
 801f5d2:	e78e      	b.n	801f4f2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x166>
 801f5d4:	9a03      	ldr	r2, [sp, #12]
 801f5d6:	ebae 0305 	sub.w	r3, lr, r5
 801f5da:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801f5de:	442a      	add	r2, r5
 801f5e0:	b29b      	uxth	r3, r3
 801f5e2:	b292      	uxth	r2, r2
 801f5e4:	9203      	str	r2, [sp, #12]
 801f5e6:	2500      	movs	r5, #0
 801f5e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f5ea:	4542      	cmp	r2, r8
 801f5ec:	d88d      	bhi.n	801f50a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17e>
 801f5ee:	4621      	mov	r1, r4
 801f5f0:	e74d      	b.n	801f48e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x102>
 801f5f2:	458e      	cmp	lr, r1
 801f5f4:	f04f 0900 	mov.w	r9, #0
 801f5f8:	bf2b      	itete	cs
 801f5fa:	ebae 0301 	subcs.w	r3, lr, r1
 801f5fe:	eba1 040e 	subcc.w	r4, r1, lr
 801f602:	462c      	movcs	r4, r5
 801f604:	462b      	movcc	r3, r5
 801f606:	bf27      	ittee	cs
 801f608:	b29b      	uxthcs	r3, r3
 801f60a:	910c      	strcs	r1, [sp, #48]	@ 0x30
 801f60c:	b2a4      	uxthcc	r4, r4
 801f60e:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 801f612:	9a03      	ldr	r2, [sp, #12]
 801f614:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801f616:	444a      	add	r2, r9
 801f618:	4548      	cmp	r0, r9
 801f61a:	b292      	uxth	r2, r2
 801f61c:	d074      	beq.n	801f708 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x37c>
 801f61e:	2004      	movs	r0, #4
 801f620:	445a      	add	r2, fp
 801f622:	4605      	mov	r5, r0
 801f624:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801f628:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f62a:	fb15 0202 	smlabb	r2, r5, r2, r0
 801f62e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f630:	5880      	ldr	r0, [r0, r2]
 801f632:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 801f636:	d014      	beq.n	801f662 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 801f638:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801f63c:	ea4f 2510 	mov.w	r5, r0, lsr #8
 801f640:	d112      	bne.n	801f668 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 801f642:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f644:	2aff      	cmp	r2, #255	@ 0xff
 801f646:	d10f      	bne.n	801f668 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 801f648:	0942      	lsrs	r2, r0, #5
 801f64a:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801f64e:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801f652:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f656:	f025 0507 	bic.w	r5, r5, #7
 801f65a:	4315      	orrs	r5, r2
 801f65c:	4305      	orrs	r5, r0
 801f65e:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 801f662:	f109 0901 	add.w	r9, r9, #1
 801f666:	e7d4      	b.n	801f612 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x286>
 801f668:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 801f66c:	b2ed      	uxtb	r5, r5
 801f66e:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801f672:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f676:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 801f67a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f67e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801f682:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f686:	9215      	str	r2, [sp, #84]	@ 0x54
 801f688:	fa5f fc8c 	uxtb.w	ip, ip
 801f68c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f68e:	b2c0      	uxtb	r0, r0
 801f690:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801f694:	fb02 fa0a 	mul.w	sl, r2, sl
 801f698:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801f69c:	f10a 0201 	add.w	r2, sl, #1
 801f6a0:	eb02 222a 	add.w	r2, r2, sl, asr #8
 801f6a4:	1212      	asrs	r2, r2, #8
 801f6a6:	fa1f fa82 	uxth.w	sl, r2
 801f6aa:	43d2      	mvns	r2, r2
 801f6ac:	fb16 f60a 	smulbb	r6, r6, sl
 801f6b0:	b2d2      	uxtb	r2, r2
 801f6b2:	fb10 f00a 	smulbb	r0, r0, sl
 801f6b6:	fb07 6702 	mla	r7, r7, r2, r6
 801f6ba:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801f6bc:	fb0c 0002 	mla	r0, ip, r2, r0
 801f6c0:	fb15 f50a 	smulbb	r5, r5, sl
 801f6c4:	b2bf      	uxth	r7, r7
 801f6c6:	b280      	uxth	r0, r0
 801f6c8:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801f6cc:	fb06 5602 	mla	r6, r6, r2, r5
 801f6d0:	1c7a      	adds	r2, r7, #1
 801f6d2:	1c45      	adds	r5, r0, #1
 801f6d4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f6d8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f6dc:	b2b6      	uxth	r6, r6
 801f6de:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f6e2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f6e6:	432f      	orrs	r7, r5
 801f6e8:	1c75      	adds	r5, r6, #1
 801f6ea:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801f6ee:	096d      	lsrs	r5, r5, #5
 801f6f0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f6f4:	432f      	orrs	r7, r5
 801f6f6:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 801f6fa:	e7b2      	b.n	801f662 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 801f6fc:	200279d8 	.word	0x200279d8
 801f700:	200279d2 	.word	0x200279d2
 801f704:	fffff7fb 	.word	0xfffff7fb
 801f708:	9203      	str	r2, [sp, #12]
 801f70a:	458e      	cmp	lr, r1
 801f70c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f70e:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801f712:	f4ff af68 	bcc.w	801f5e6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 801f716:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f718:	9906      	ldr	r1, [sp, #24]
 801f71a:	8812      	ldrh	r2, [r2, #0]
 801f71c:	1a52      	subs	r2, r2, r1
 801f71e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801f720:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801f724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f726:	3201      	adds	r2, #1
 801f728:	428a      	cmp	r2, r1
 801f72a:	9209      	str	r2, [sp, #36]	@ 0x24
 801f72c:	d111      	bne.n	801f752 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c6>
 801f72e:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801f732:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 801f736:	9b06      	ldr	r3, [sp, #24]
 801f738:	eba5 0509 	sub.w	r5, r5, r9
 801f73c:	b2ad      	uxth	r5, r5
 801f73e:	2d00      	cmp	r5, #0
 801f740:	bf08      	it	eq
 801f742:	4619      	moveq	r1, r3
 801f744:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f746:	bf18      	it	ne
 801f748:	2100      	movne	r1, #0
 801f74a:	3301      	adds	r3, #1
 801f74c:	b289      	uxth	r1, r1
 801f74e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f750:	e694      	b.n	801f47c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf0>
 801f752:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801f756:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801f75a:	1b2d      	subs	r5, r5, r4
 801f75c:	b2ad      	uxth	r5, r5
 801f75e:	2d00      	cmp	r5, #0
 801f760:	bf18      	it	ne
 801f762:	2400      	movne	r4, #0
 801f764:	e740      	b.n	801f5e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25c>
 801f766:	4b04      	ldr	r3, [pc, #16]	@ (801f778 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ec>)
 801f768:	6818      	ldr	r0, [r3, #0]
 801f76a:	6803      	ldr	r3, [r0, #0]
 801f76c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f76e:	4798      	blx	r3
 801f770:	b01d      	add	sp, #116	@ 0x74
 801f772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f776:	bf00      	nop
 801f778:	200279d8 	.word	0x200279d8

0801f77c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801f77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f780:	b09f      	sub	sp, #124	@ 0x7c
 801f782:	461d      	mov	r5, r3
 801f784:	4604      	mov	r4, r0
 801f786:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f788:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 801f78c:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 801f790:	920a      	str	r2, [sp, #40]	@ 0x28
 801f792:	2a00      	cmp	r2, #0
 801f794:	f000 81fe 	beq.w	801fb94 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>
 801f798:	6828      	ldr	r0, [r5, #0]
 801f79a:	aa1a      	add	r2, sp, #104	@ 0x68
 801f79c:	6869      	ldr	r1, [r5, #4]
 801f79e:	c203      	stmia	r2!, {r0, r1}
 801f7a0:	6818      	ldr	r0, [r3, #0]
 801f7a2:	aa1c      	add	r2, sp, #112	@ 0x70
 801f7a4:	6859      	ldr	r1, [r3, #4]
 801f7a6:	c203      	stmia	r2!, {r0, r1}
 801f7a8:	a81a      	add	r0, sp, #104	@ 0x68
 801f7aa:	f7f8 fbbd 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f7ae:	4629      	mov	r1, r5
 801f7b0:	a81c      	add	r0, sp, #112	@ 0x70
 801f7b2:	f7f8 fbe1 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f7b6:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801f7ba:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801f7be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801f7c2:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 801f7c6:	bfdb      	ittet	le
 801f7c8:	b29a      	uxthle	r2, r3
 801f7ca:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801f7ce:	2201      	movgt	r2, #1
 801f7d0:	fb91 f2f2 	sdivle	r2, r1, r2
 801f7d4:	9201      	str	r2, [sp, #4]
 801f7d6:	9801      	ldr	r0, [sp, #4]
 801f7d8:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 801f7dc:	9901      	ldr	r1, [sp, #4]
 801f7de:	fb92 f0f0 	sdiv	r0, r2, r0
 801f7e2:	b280      	uxth	r0, r0
 801f7e4:	440e      	add	r6, r1
 801f7e6:	9010      	str	r0, [sp, #64]	@ 0x40
 801f7e8:	3e01      	subs	r6, #1
 801f7ea:	9801      	ldr	r0, [sp, #4]
 801f7ec:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801f7ee:	fb05 2510 	mls	r5, r5, r0, r2
 801f7f2:	fb96 f6f1 	sdiv	r6, r6, r1
 801f7f6:	fb15 f503 	smulbb	r5, r5, r3
 801f7fa:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 801f7fe:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801f802:	3601      	adds	r6, #1
 801f804:	440d      	add	r5, r1
 801f806:	4419      	add	r1, r3
 801f808:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 801f80c:	b2b6      	uxth	r6, r6
 801f80e:	441a      	add	r2, r3
 801f810:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 801f814:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 801f818:	b2ad      	uxth	r5, r5
 801f81a:	9304      	str	r3, [sp, #16]
 801f81c:	4b96      	ldr	r3, [pc, #600]	@ (801fa78 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801f81e:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 801f822:	6818      	ldr	r0, [r3, #0]
 801f824:	6803      	ldr	r3, [r0, #0]
 801f826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f828:	4798      	blx	r3
 801f82a:	4b94      	ldr	r3, [pc, #592]	@ (801fa7c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 801f82c:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 801f830:	2d00      	cmp	r5, #0
 801f832:	881a      	ldrh	r2, [r3, #0]
 801f834:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 801f838:	fb02 f707 	mul.w	r7, r2, r7
 801f83c:	fb02 c101 	mla	r1, r2, r1, ip
 801f840:	9318      	str	r3, [sp, #96]	@ 0x60
 801f842:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 801f846:	4b8e      	ldr	r3, [pc, #568]	@ (801fa80 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801f848:	bf18      	it	ne
 801f84a:	2100      	movne	r1, #0
 801f84c:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 801f850:	eba3 0304 	sub.w	r3, r3, r4
 801f854:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f856:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f858:	9319      	str	r3, [sp, #100]	@ 0x64
 801f85a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f85e:	f106 0204 	add.w	r2, r6, #4
 801f862:	9206      	str	r2, [sp, #24]
 801f864:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f866:	ea6f 0202 	mvn.w	r2, r2
 801f86a:	b2d2      	uxtb	r2, r2
 801f86c:	9215      	str	r2, [sp, #84]	@ 0x54
 801f86e:	9a04      	ldr	r2, [sp, #16]
 801f870:	bf08      	it	eq
 801f872:	4611      	moveq	r1, r2
 801f874:	2200      	movs	r2, #0
 801f876:	b289      	uxth	r1, r1
 801f878:	920d      	str	r2, [sp, #52]	@ 0x34
 801f87a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f87c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f87e:	fa12 f383 	uxtah	r3, r2, r3
 801f882:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f884:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f888:	3304      	adds	r3, #4
 801f88a:	9307      	str	r3, [sp, #28]
 801f88c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f88e:	455b      	cmp	r3, fp
 801f890:	f240 817b 	bls.w	801fb8a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40e>
 801f894:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 801f898:	f04f 0801 	mov.w	r8, #1
 801f89c:	9a01      	ldr	r2, [sp, #4]
 801f89e:	9807      	ldr	r0, [sp, #28]
 801f8a0:	46c4      	mov	ip, r8
 801f8a2:	f8cd 8008 	str.w	r8, [sp, #8]
 801f8a6:	7800      	ldrb	r0, [r0, #0]
 801f8a8:	fbb5 f3f3 	udiv	r3, r5, r3
 801f8ac:	1ad3      	subs	r3, r2, r3
 801f8ae:	9011      	str	r0, [sp, #68]	@ 0x44
 801f8b0:	3001      	adds	r0, #1
 801f8b2:	b29b      	uxth	r3, r3
 801f8b4:	9005      	str	r0, [sp, #20]
 801f8b6:	9316      	str	r3, [sp, #88]	@ 0x58
 801f8b8:	9b07      	ldr	r3, [sp, #28]
 801f8ba:	785a      	ldrb	r2, [r3, #1]
 801f8bc:	789b      	ldrb	r3, [r3, #2]
 801f8be:	021b      	lsls	r3, r3, #8
 801f8c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f8c4:	9a07      	ldr	r2, [sp, #28]
 801f8c6:	78d2      	ldrb	r2, [r2, #3]
 801f8c8:	4313      	orrs	r3, r2
 801f8ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f8cc:	441a      	add	r2, r3
 801f8ce:	1c50      	adds	r0, r2, #1
 801f8d0:	7852      	ldrb	r2, [r2, #1]
 801f8d2:	9003      	str	r0, [sp, #12]
 801f8d4:	0212      	lsls	r2, r2, #8
 801f8d6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f8d8:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801f8dc:	5cc3      	ldrb	r3, [r0, r3]
 801f8de:	431a      	orrs	r2, r3
 801f8e0:	b293      	uxth	r3, r2
 801f8e2:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801f8e6:	930c      	str	r3, [sp, #48]	@ 0x30
 801f8e8:	2300      	movs	r3, #0
 801f8ea:	9308      	str	r3, [sp, #32]
 801f8ec:	461a      	mov	r2, r3
 801f8ee:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f8f2:	930e      	str	r3, [sp, #56]	@ 0x38
 801f8f4:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801f8f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f8fa:	2d00      	cmp	r5, #0
 801f8fc:	d07d      	beq.n	801f9fa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27e>
 801f8fe:	45ac      	cmp	ip, r5
 801f900:	d26d      	bcs.n	801f9de <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x262>
 801f902:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f904:	eba5 050c 	sub.w	r5, r5, ip
 801f908:	4608      	mov	r0, r1
 801f90a:	455b      	cmp	r3, fp
 801f90c:	b2ad      	uxth	r5, r5
 801f90e:	d802      	bhi.n	801f916 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 801f910:	e071      	b.n	801f9f6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27a>
 801f912:	2b00      	cmp	r3, #0
 801f914:	d15d      	bne.n	801f9d2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 801f916:	9b03      	ldr	r3, [sp, #12]
 801f918:	9a02      	ldr	r2, [sp, #8]
 801f91a:	785b      	ldrb	r3, [r3, #1]
 801f91c:	f1c2 0207 	rsb	r2, r2, #7
 801f920:	9902      	ldr	r1, [sp, #8]
 801f922:	4093      	lsls	r3, r2
 801f924:	005b      	lsls	r3, r3, #1
 801f926:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801f92a:	9b03      	ldr	r3, [sp, #12]
 801f92c:	781b      	ldrb	r3, [r3, #0]
 801f92e:	410b      	asrs	r3, r1
 801f930:	3101      	adds	r1, #1
 801f932:	b2c9      	uxtb	r1, r1
 801f934:	b2db      	uxtb	r3, r3
 801f936:	2908      	cmp	r1, #8
 801f938:	9102      	str	r1, [sp, #8]
 801f93a:	9903      	ldr	r1, [sp, #12]
 801f93c:	ea43 0302 	orr.w	r3, r3, r2
 801f940:	bf0c      	ite	eq
 801f942:	3102      	addeq	r1, #2
 801f944:	3101      	addne	r1, #1
 801f946:	b29a      	uxth	r2, r3
 801f948:	bf05      	ittet	eq
 801f94a:	9103      	streq	r1, [sp, #12]
 801f94c:	2100      	moveq	r1, #0
 801f94e:	9103      	strne	r1, [sp, #12]
 801f950:	9102      	streq	r1, [sp, #8]
 801f952:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f954:	4291      	cmp	r1, r2
 801f956:	d30a      	bcc.n	801f96e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801f958:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801f95c:	2301      	movs	r3, #1
 801f95e:	9905      	ldr	r1, [sp, #20]
 801f960:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801f964:	d30f      	bcc.n	801f986 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801f966:	2100      	movs	r1, #0
 801f968:	4698      	mov	r8, r3
 801f96a:	9100      	str	r1, [sp, #0]
 801f96c:	e032      	b.n	801f9d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x258>
 801f96e:	9b05      	ldr	r3, [sp, #20]
 801f970:	429a      	cmp	r2, r3
 801f972:	d318      	bcc.n	801f9a6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801f974:	eb04 0308 	add.w	r3, r4, r8
 801f978:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801f97c:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801f980:	f108 0301 	add.w	r3, r8, #1
 801f984:	b29b      	uxth	r3, r3
 801f986:	9905      	ldr	r1, [sp, #20]
 801f988:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801f98c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801f990:	710e      	strb	r6, [r1, #4]
 801f992:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801f994:	80ce      	strh	r6, [r1, #6]
 801f996:	f108 0601 	add.w	r6, r8, #1
 801f99a:	714e      	strb	r6, [r1, #5]
 801f99c:	9905      	ldr	r1, [sp, #20]
 801f99e:	3101      	adds	r1, #1
 801f9a0:	b289      	uxth	r1, r1
 801f9a2:	9105      	str	r1, [sp, #20]
 801f9a4:	e7df      	b.n	801f966 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ea>
 801f9a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f9aa:	4611      	mov	r1, r2
 801f9ac:	795b      	ldrb	r3, [r3, #5]
 801f9ae:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801f9b2:	4426      	add	r6, r4
 801f9b4:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801f9b6:	4437      	add	r7, r6
 801f9b8:	2f00      	cmp	r7, #0
 801f9ba:	dd06      	ble.n	801f9ca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24e>
 801f9bc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801f9c0:	790f      	ldrb	r7, [r1, #4]
 801f9c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f9c6:	88c9      	ldrh	r1, [r1, #6]
 801f9c8:	e7f4      	b.n	801f9b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801f9ca:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801f9ce:	b29b      	uxth	r3, r3
 801f9d0:	e7c5      	b.n	801f95e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e2>
 801f9d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f9d4:	920c      	str	r2, [sp, #48]	@ 0x30
 801f9d6:	4601      	mov	r1, r0
 801f9d8:	9a00      	ldr	r2, [sp, #0]
 801f9da:	469c      	mov	ip, r3
 801f9dc:	e78d      	b.n	801f8fa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801f9de:	ebac 0305 	sub.w	r3, ip, r5
 801f9e2:	1957      	adds	r7, r2, r5
 801f9e4:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801f9e8:	b2ba      	uxth	r2, r7
 801f9ea:	b29b      	uxth	r3, r3
 801f9ec:	9200      	str	r2, [sp, #0]
 801f9ee:	2500      	movs	r5, #0
 801f9f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f9f2:	455a      	cmp	r2, fp
 801f9f4:	d88d      	bhi.n	801f912 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 801f9f6:	4601      	mov	r1, r0
 801f9f8:	e748      	b.n	801f88c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x110>
 801f9fa:	458c      	cmp	ip, r1
 801f9fc:	bf27      	ittee	cs
 801f9fe:	ebac 0301 	subcs.w	r3, ip, r1
 801fa02:	4628      	movcs	r0, r5
 801fa04:	eba1 000c 	subcc.w	r0, r1, ip
 801fa08:	462b      	movcc	r3, r5
 801fa0a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801fa0c:	bf27      	ittee	cs
 801fa0e:	b29b      	uxthcs	r3, r3
 801fa10:	9109      	strcs	r1, [sp, #36]	@ 0x24
 801fa12:	b280      	uxthcc	r0, r0
 801fa14:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 801fa18:	2dff      	cmp	r5, #255	@ 0xff
 801fa1a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801fa1c:	eb02 0705 	add.w	r7, r2, r5
 801fa20:	b2bd      	uxth	r5, r7
 801fa22:	9500      	str	r5, [sp, #0]
 801fa24:	d12e      	bne.n	801fa84 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>
 801fa26:	465e      	mov	r6, fp
 801fa28:	9d00      	ldr	r5, [sp, #0]
 801fa2a:	42aa      	cmp	r2, r5
 801fa2c:	f040 8083 	bne.w	801fb36 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801fa30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fa32:	458c      	cmp	ip, r1
 801fa34:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801fa38:	d3d9      	bcc.n	801f9ee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 801fa3a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801fa3c:	9904      	ldr	r1, [sp, #16]
 801fa3e:	8812      	ldrh	r2, [r2, #0]
 801fa40:	1a52      	subs	r2, r2, r1
 801fa42:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801fa44:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801fa48:	9a08      	ldr	r2, [sp, #32]
 801fa4a:	3201      	adds	r2, #1
 801fa4c:	428a      	cmp	r2, r1
 801fa4e:	9208      	str	r2, [sp, #32]
 801fa50:	f040 8091 	bne.w	801fb76 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3fa>
 801fa54:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 801fa58:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 801fa5c:	9b04      	ldr	r3, [sp, #16]
 801fa5e:	eba5 050c 	sub.w	r5, r5, ip
 801fa62:	b2ad      	uxth	r5, r5
 801fa64:	2d00      	cmp	r5, #0
 801fa66:	bf08      	it	eq
 801fa68:	4619      	moveq	r1, r3
 801fa6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fa6c:	bf18      	it	ne
 801fa6e:	2100      	movne	r1, #0
 801fa70:	3301      	adds	r3, #1
 801fa72:	b289      	uxth	r1, r1
 801fa74:	930d      	str	r3, [sp, #52]	@ 0x34
 801fa76:	e700      	b.n	801f87a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfe>
 801fa78:	200279d8 	.word	0x200279d8
 801fa7c:	200279d2 	.word	0x200279d2
 801fa80:	fffff7fb 	.word	0xfffff7fb
 801fa84:	46d9      	mov	r9, fp
 801fa86:	9d00      	ldr	r5, [sp, #0]
 801fa88:	42aa      	cmp	r2, r5
 801fa8a:	d0d1      	beq.n	801fa30 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b4>
 801fa8c:	1c55      	adds	r5, r2, #1
 801fa8e:	4422      	add	r2, r4
 801fa90:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 801fa94:	9a06      	ldr	r2, [sp, #24]
 801fa96:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fa9a:	9517      	str	r5, [sp, #92]	@ 0x5c
 801fa9c:	4472      	add	r2, lr
 801fa9e:	9212      	str	r2, [sp, #72]	@ 0x48
 801faa0:	f8b9 2000 	ldrh.w	r2, [r9]
 801faa4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801faa6:	1216      	asrs	r6, r2, #8
 801faa8:	f897 a002 	ldrb.w	sl, [r7, #2]
 801faac:	10d5      	asrs	r5, r2, #3
 801faae:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801fab0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801fab4:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801fab8:	00d2      	lsls	r2, r2, #3
 801faba:	fb1a fa07 	smulbb	sl, sl, r7
 801fabe:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801fac2:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801fac4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801fac8:	b2d2      	uxtb	r2, r2
 801faca:	fb06 a607 	mla	r6, r6, r7, sl
 801face:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801fad0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801fad4:	f897 a001 	ldrb.w	sl, [r7, #1]
 801fad8:	b2b6      	uxth	r6, r6
 801fada:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801fadc:	fb1a fa07 	smulbb	sl, sl, r7
 801fae0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801fae2:	fb05 a507 	mla	r5, r5, r7, sl
 801fae6:	9f06      	ldr	r7, [sp, #24]
 801fae8:	f106 0a01 	add.w	sl, r6, #1
 801faec:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801faf0:	b2ad      	uxth	r5, r5
 801faf2:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801faf4:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801faf8:	f105 0a01 	add.w	sl, r5, #1
 801fafc:	fb1e fe07 	smulbb	lr, lr, r7
 801fb00:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801fb02:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fb06:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801fb0a:	fb02 e207 	mla	r2, r2, r7, lr
 801fb0e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fb12:	b292      	uxth	r2, r2
 801fb14:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801fb18:	f102 0e01 	add.w	lr, r2, #1
 801fb1c:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801fb20:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 801fb24:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801fb28:	ea4e 0606 	orr.w	r6, lr, r6
 801fb2c:	ea46 060a 	orr.w	r6, r6, sl
 801fb30:	f829 6b02 	strh.w	r6, [r9], #2
 801fb34:	e7a7      	b.n	801fa86 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30a>
 801fb36:	f102 0e01 	add.w	lr, r2, #1
 801fb3a:	4422      	add	r2, r4
 801fb3c:	9f06      	ldr	r7, [sp, #24]
 801fb3e:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 801fb42:	9a06      	ldr	r2, [sp, #24]
 801fb44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fb48:	eb02 0a05 	add.w	sl, r2, r5
 801fb4c:	4a13      	ldr	r2, [pc, #76]	@ (801fb9c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 801fb4e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801fb52:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 801fb56:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801fb5a:	00d2      	lsls	r2, r2, #3
 801fb5c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801fb60:	ea49 0202 	orr.w	r2, r9, r2
 801fb64:	f817 9005 	ldrb.w	r9, [r7, r5]
 801fb68:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 801fb6c:	f826 2b02 	strh.w	r2, [r6], #2
 801fb70:	fa1f f28e 	uxth.w	r2, lr
 801fb74:	e758      	b.n	801fa28 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>
 801fb76:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801fb7a:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801fb7e:	1a2d      	subs	r5, r5, r0
 801fb80:	b2ad      	uxth	r5, r5
 801fb82:	2d00      	cmp	r5, #0
 801fb84:	bf18      	it	ne
 801fb86:	2000      	movne	r0, #0
 801fb88:	e732      	b.n	801f9f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 801fb8a:	4b05      	ldr	r3, [pc, #20]	@ (801fba0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x424>)
 801fb8c:	6818      	ldr	r0, [r3, #0]
 801fb8e:	6803      	ldr	r3, [r0, #0]
 801fb90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb92:	4798      	blx	r3
 801fb94:	b01f      	add	sp, #124	@ 0x7c
 801fb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb9a:	bf00      	nop
 801fb9c:	fffff800 	.word	0xfffff800
 801fba0:	200279d8 	.word	0x200279d8

0801fba4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801fba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fba8:	b091      	sub	sp, #68	@ 0x44
 801fbaa:	469b      	mov	fp, r3
 801fbac:	4616      	mov	r6, r2
 801fbae:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fbb2:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 801fbb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fbba:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 801fbbe:	4604      	mov	r4, r0
 801fbc0:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 801fbc4:	4640      	mov	r0, r8
 801fbc6:	460d      	mov	r5, r1
 801fbc8:	4659      	mov	r1, fp
 801fbca:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801fbce:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801fbd2:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 801fbd6:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 801fbda:	f7f2 f811 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 801fbde:	4631      	mov	r1, r6
 801fbe0:	4640      	mov	r0, r8
 801fbe2:	f7f2 f80d 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 801fbe6:	4b74      	ldr	r3, [pc, #464]	@ (801fdb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801fbe8:	8818      	ldrh	r0, [r3, #0]
 801fbea:	4b74      	ldr	r3, [pc, #464]	@ (801fdbc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801fbec:	b202      	sxth	r2, r0
 801fbee:	8819      	ldrh	r1, [r3, #0]
 801fbf0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801fbf4:	b20e      	sxth	r6, r1
 801fbf6:	2b00      	cmp	r3, #0
 801fbf8:	da07      	bge.n	801fc0a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801fbfa:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801fbfe:	4463      	add	r3, ip
 801fc00:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801fc04:	2300      	movs	r3, #0
 801fc06:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 801fc0a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801fc0e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801fc12:	1ad2      	subs	r2, r2, r3
 801fc14:	4594      	cmp	ip, r2
 801fc16:	bfc4      	itt	gt
 801fc18:	1ac2      	subgt	r2, r0, r3
 801fc1a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 801fc1e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801fc22:	2a00      	cmp	r2, #0
 801fc24:	da07      	bge.n	801fc36 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801fc26:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 801fc2a:	4462      	add	r2, ip
 801fc2c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801fc30:	2200      	movs	r2, #0
 801fc32:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801fc36:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 801fc3a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801fc3e:	eba6 060a 	sub.w	r6, r6, sl
 801fc42:	42b2      	cmp	r2, r6
 801fc44:	bfc4      	itt	gt
 801fc46:	eba1 020a 	subgt.w	r2, r1, sl
 801fc4a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 801fc4e:	4a5c      	ldr	r2, [pc, #368]	@ (801fdc0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801fc50:	7812      	ldrb	r2, [r2, #0]
 801fc52:	b9a2      	cbnz	r2, 801fc7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801fc54:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801fc58:	4286      	cmp	r6, r0
 801fc5a:	4640      	mov	r0, r8
 801fc5c:	9303      	str	r3, [sp, #12]
 801fc5e:	bf14      	ite	ne
 801fc60:	2600      	movne	r6, #0
 801fc62:	2601      	moveq	r6, #1
 801fc64:	f7f2 f80f 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 801fc68:	9b03      	ldr	r3, [sp, #12]
 801fc6a:	b160      	cbz	r0, 801fc86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801fc6c:	2300      	movs	r3, #0
 801fc6e:	8023      	strh	r3, [r4, #0]
 801fc70:	8063      	strh	r3, [r4, #2]
 801fc72:	80a3      	strh	r3, [r4, #4]
 801fc74:	4620      	mov	r0, r4
 801fc76:	80e3      	strh	r3, [r4, #6]
 801fc78:	b011      	add	sp, #68	@ 0x44
 801fc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc7e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 801fc82:	428e      	cmp	r6, r1
 801fc84:	e7e9      	b.n	801fc5a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801fc86:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801fc8a:	a90e      	add	r1, sp, #56	@ 0x38
 801fc8c:	900e      	str	r0, [sp, #56]	@ 0x38
 801fc8e:	a80c      	add	r0, sp, #48	@ 0x30
 801fc90:	9205      	str	r2, [sp, #20]
 801fc92:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801fc96:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 801fc9a:	9206      	str	r2, [sp, #24]
 801fc9c:	f8bb 2000 	ldrh.w	r2, [fp]
 801fca0:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 801fca4:	1a9b      	subs	r3, r3, r2
 801fca6:	b21b      	sxth	r3, r3
 801fca8:	9303      	str	r3, [sp, #12]
 801fcaa:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801fcae:	f8df b118 	ldr.w	fp, [pc, #280]	@ 801fdc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801fcb2:	ebaa 0a03 	sub.w	sl, sl, r3
 801fcb6:	fa0f f38a 	sxth.w	r3, sl
 801fcba:	9304      	str	r3, [sp, #16]
 801fcbc:	9b03      	ldr	r3, [sp, #12]
 801fcbe:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801fcc2:	9b04      	ldr	r3, [sp, #16]
 801fcc4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801fcc8:	9b05      	ldr	r3, [sp, #20]
 801fcca:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801fcce:	9b06      	ldr	r3, [sp, #24]
 801fcd0:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801fcd4:	f7f8 f950 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fcd8:	4640      	mov	r0, r8
 801fcda:	f7f8 f925 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fcde:	a80e      	add	r0, sp, #56	@ 0x38
 801fce0:	f7f8 f922 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fce4:	4b37      	ldr	r3, [pc, #220]	@ (801fdc4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801fce6:	4628      	mov	r0, r5
 801fce8:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 801fcec:	881b      	ldrh	r3, [r3, #0]
 801fcee:	9307      	str	r3, [sp, #28]
 801fcf0:	682b      	ldr	r3, [r5, #0]
 801fcf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fcf4:	4798      	blx	r3
 801fcf6:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 801fcfa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801fcfe:	4681      	mov	r9, r0
 801fd00:	f8db 0000 	ldr.w	r0, [fp]
 801fd04:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801fd08:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801fd0a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801fd0e:	6803      	ldr	r3, [r0, #0]
 801fd10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fd12:	4798      	blx	r3
 801fd14:	4607      	mov	r7, r0
 801fd16:	f8db 0000 	ldr.w	r0, [fp]
 801fd1a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801fd1e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801fd22:	6803      	ldr	r3, [r0, #0]
 801fd24:	9109      	str	r1, [sp, #36]	@ 0x24
 801fd26:	9208      	str	r2, [sp, #32]
 801fd28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fd2a:	4798      	blx	r3
 801fd2c:	f010 0f01 	tst.w	r0, #1
 801fd30:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801fd34:	d012      	beq.n	801fd5c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801fd36:	f8db 0000 	ldr.w	r0, [fp]
 801fd3a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801fd3e:	6803      	ldr	r3, [r0, #0]
 801fd40:	9200      	str	r2, [sp, #0]
 801fd42:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801fd44:	462b      	mov	r3, r5
 801fd46:	e898 0006 	ldmia.w	r8, {r1, r2}
 801fd4a:	47b0      	blx	r6
 801fd4c:	9b03      	ldr	r3, [sp, #12]
 801fd4e:	8023      	strh	r3, [r4, #0]
 801fd50:	9b04      	ldr	r3, [sp, #16]
 801fd52:	8063      	strh	r3, [r4, #2]
 801fd54:	9b05      	ldr	r3, [sp, #20]
 801fd56:	80a3      	strh	r3, [r4, #4]
 801fd58:	9b06      	ldr	r3, [sp, #24]
 801fd5a:	e78b      	b.n	801fc74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801fd5c:	fb09 f202 	mul.w	r2, r9, r2
 801fd60:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 801fd64:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801fd68:	440f      	add	r7, r1
 801fd6a:	b166      	cbz	r6, 801fd86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801fd6c:	9a07      	ldr	r2, [sp, #28]
 801fd6e:	4592      	cmp	sl, r2
 801fd70:	d109      	bne.n	801fd86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801fd72:	f8db 0000 	ldr.w	r0, [fp]
 801fd76:	fb09 f303 	mul.w	r3, r9, r3
 801fd7a:	4629      	mov	r1, r5
 801fd7c:	6802      	ldr	r2, [r0, #0]
 801fd7e:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 801fd80:	463a      	mov	r2, r7
 801fd82:	47b0      	blx	r6
 801fd84:	e7e2      	b.n	801fd4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801fd86:	fb0a f303 	mul.w	r3, sl, r3
 801fd8a:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801fd8e:	f8df b038 	ldr.w	fp, [pc, #56]	@ 801fdc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801fd92:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801fd96:	4545      	cmp	r5, r8
 801fd98:	d2d8      	bcs.n	801fd4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801fd9a:	f8db 0000 	ldr.w	r0, [fp]
 801fd9e:	4629      	mov	r1, r5
 801fda0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801fda4:	4435      	add	r5, r6
 801fda6:	6802      	ldr	r2, [r0, #0]
 801fda8:	005b      	lsls	r3, r3, #1
 801fdaa:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801fdae:	463a      	mov	r2, r7
 801fdb0:	47d0      	blx	sl
 801fdb2:	444f      	add	r7, r9
 801fdb4:	e7ef      	b.n	801fd96 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801fdb6:	bf00      	nop
 801fdb8:	200279cc 	.word	0x200279cc
 801fdbc:	200279ce 	.word	0x200279ce
 801fdc0:	200279d0 	.word	0x200279d0
 801fdc4:	200279d2 	.word	0x200279d2
 801fdc8:	200279d8 	.word	0x200279d8

0801fdcc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801fdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fdce:	4606      	mov	r6, r0
 801fdd0:	b087      	sub	sp, #28
 801fdd2:	460c      	mov	r4, r1
 801fdd4:	4617      	mov	r7, r2
 801fdd6:	461d      	mov	r5, r3
 801fdd8:	b333      	cbz	r3, 801fe28 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801fdda:	4608      	mov	r0, r1
 801fddc:	f7f1 ff53 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 801fde0:	bb10      	cbnz	r0, 801fe28 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801fde2:	6820      	ldr	r0, [r4, #0]
 801fde4:	ab04      	add	r3, sp, #16
 801fde6:	6861      	ldr	r1, [r4, #4]
 801fde8:	4c1b      	ldr	r4, [pc, #108]	@ (801fe58 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801fdea:	c303      	stmia	r3!, {r0, r1}
 801fdec:	a804      	add	r0, sp, #16
 801fdee:	f7f8 f89b 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fdf2:	6820      	ldr	r0, [r4, #0]
 801fdf4:	6803      	ldr	r3, [r0, #0]
 801fdf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fdf8:	4798      	blx	r3
 801fdfa:	2dff      	cmp	r5, #255	@ 0xff
 801fdfc:	d016      	beq.n	801fe2c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801fdfe:	f010 0f08 	tst.w	r0, #8
 801fe02:	6820      	ldr	r0, [r4, #0]
 801fe04:	d015      	beq.n	801fe32 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801fe06:	2400      	movs	r4, #0
 801fe08:	6801      	ldr	r1, [r0, #0]
 801fe0a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801fe0e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801fe12:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801fe16:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801fe1a:	9401      	str	r4, [sp, #4]
 801fe1c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801fe20:	9400      	str	r4, [sp, #0]
 801fe22:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 801fe24:	4639      	mov	r1, r7
 801fe26:	47a0      	blx	r4
 801fe28:	b007      	add	sp, #28
 801fe2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fe2c:	f010 0f02 	tst.w	r0, #2
 801fe30:	e7e7      	b.n	801fe02 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801fe32:	6803      	ldr	r3, [r0, #0]
 801fe34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fe36:	4798      	blx	r3
 801fe38:	4b08      	ldr	r3, [pc, #32]	@ (801fe5c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801fe3a:	4601      	mov	r1, r0
 801fe3c:	4630      	mov	r0, r6
 801fe3e:	881a      	ldrh	r2, [r3, #0]
 801fe40:	6833      	ldr	r3, [r6, #0]
 801fe42:	e9cd 7500 	strd	r7, r5, [sp]
 801fe46:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801fe48:	ab04      	add	r3, sp, #16
 801fe4a:	47a8      	blx	r5
 801fe4c:	6820      	ldr	r0, [r4, #0]
 801fe4e:	6803      	ldr	r3, [r0, #0]
 801fe50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fe52:	4798      	blx	r3
 801fe54:	e7e8      	b.n	801fe28 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801fe56:	bf00      	nop
 801fe58:	200279d8 	.word	0x200279d8
 801fe5c:	200279d2 	.word	0x200279d2

0801fe60 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801fe60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fe64:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 801fe68:	4688      	mov	r8, r1
 801fe6a:	4614      	mov	r4, r2
 801fe6c:	461d      	mov	r5, r3
 801fe6e:	9e08      	ldr	r6, [sp, #32]
 801fe70:	2f00      	cmp	r7, #0
 801fe72:	f000 80ab 	beq.w	801ffcc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801fe76:	4618      	mov	r0, r3
 801fe78:	f7f1 ff05 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 801fe7c:	2800      	cmp	r0, #0
 801fe7e:	f040 80a5 	bne.w	801ffcc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801fe82:	f9b5 1000 	ldrsh.w	r1, [r5]
 801fe86:	2fff      	cmp	r7, #255	@ 0xff
 801fe88:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801fe8c:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801fe90:	fb04 1303 	mla	r3, r4, r3, r1
 801fe94:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801fe98:	eba4 0200 	sub.w	r2, r4, r0
 801fe9c:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801fea0:	fb04 f505 	mul.w	r5, r4, r5
 801fea4:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801fea8:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801feac:	d04a      	beq.n	801ff44 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801feae:	b2bc      	uxth	r4, r7
 801feb0:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 801feb4:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801feb8:	fa5f f788 	uxtb.w	r7, r8
 801febc:	b2f3      	uxtb	r3, r6
 801febe:	0040      	lsls	r0, r0, #1
 801fec0:	fb0e fe04 	mul.w	lr, lr, r4
 801fec4:	4367      	muls	r7, r4
 801fec6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801feca:	4363      	muls	r3, r4
 801fecc:	fa1f fc8c 	uxth.w	ip, ip
 801fed0:	42a9      	cmp	r1, r5
 801fed2:	d27b      	bcs.n	801ffcc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801fed4:	eb01 0900 	add.w	r9, r1, r0
 801fed8:	4549      	cmp	r1, r9
 801feda:	d231      	bcs.n	801ff40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801fedc:	880a      	ldrh	r2, [r1, #0]
 801fede:	1214      	asrs	r4, r2, #8
 801fee0:	10d6      	asrs	r6, r2, #3
 801fee2:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 801fee6:	00d2      	lsls	r2, r2, #3
 801fee8:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801feec:	b2d2      	uxtb	r2, r2
 801feee:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801fef2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801fef6:	fb14 f40c 	smulbb	r4, r4, ip
 801fefa:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801fefe:	fb12 f20c 	smulbb	r2, r2, ip
 801ff02:	fb16 f60c 	smulbb	r6, r6, ip
 801ff06:	4474      	add	r4, lr
 801ff08:	441a      	add	r2, r3
 801ff0a:	b2a4      	uxth	r4, r4
 801ff0c:	443e      	add	r6, r7
 801ff0e:	b292      	uxth	r2, r2
 801ff10:	f104 0a01 	add.w	sl, r4, #1
 801ff14:	b2b6      	uxth	r6, r6
 801ff16:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801ff1a:	f102 0a01 	add.w	sl, r2, #1
 801ff1e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801ff22:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 801ff26:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ff2a:	4322      	orrs	r2, r4
 801ff2c:	1c74      	adds	r4, r6, #1
 801ff2e:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801ff32:	0976      	lsrs	r6, r6, #5
 801ff34:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801ff38:	4332      	orrs	r2, r6
 801ff3a:	f821 2b02 	strh.w	r2, [r1], #2
 801ff3e:	e7cb      	b.n	801fed8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801ff40:	4441      	add	r1, r8
 801ff42:	e7c5      	b.n	801fed0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801ff44:	0973      	lsrs	r3, r6, #5
 801ff46:	4f22      	ldr	r7, [pc, #136]	@ (801ffd0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801ff48:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801ff4c:	ea08 0707 	and.w	r7, r8, r7
 801ff50:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ff54:	433b      	orrs	r3, r7
 801ff56:	07e7      	lsls	r7, r4, #31
 801ff58:	ea43 0306 	orr.w	r3, r3, r6
 801ff5c:	b29b      	uxth	r3, r3
 801ff5e:	d50b      	bpl.n	801ff78 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801ff60:	0040      	lsls	r0, r0, #1
 801ff62:	0052      	lsls	r2, r2, #1
 801ff64:	42a9      	cmp	r1, r5
 801ff66:	d231      	bcs.n	801ffcc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801ff68:	180c      	adds	r4, r1, r0
 801ff6a:	42a1      	cmp	r1, r4
 801ff6c:	d202      	bcs.n	801ff74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801ff6e:	f821 3b02 	strh.w	r3, [r1], #2
 801ff72:	e7fa      	b.n	801ff6a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801ff74:	4411      	add	r1, r2
 801ff76:	e7f5      	b.n	801ff64 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801ff78:	078e      	lsls	r6, r1, #30
 801ff7a:	d008      	beq.n	801ff8e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801ff7c:	0066      	lsls	r6, r4, #1
 801ff7e:	460a      	mov	r2, r1
 801ff80:	42aa      	cmp	r2, r5
 801ff82:	d202      	bcs.n	801ff8a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801ff84:	8013      	strh	r3, [r2, #0]
 801ff86:	4432      	add	r2, r6
 801ff88:	e7fa      	b.n	801ff80 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801ff8a:	3102      	adds	r1, #2
 801ff8c:	3801      	subs	r0, #1
 801ff8e:	07c2      	lsls	r2, r0, #31
 801ff90:	d50b      	bpl.n	801ffaa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801ff92:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 801ff96:	0066      	lsls	r6, r4, #1
 801ff98:	3a01      	subs	r2, #1
 801ff9a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801ff9e:	42aa      	cmp	r2, r5
 801ffa0:	d202      	bcs.n	801ffa8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801ffa2:	8013      	strh	r3, [r2, #0]
 801ffa4:	4432      	add	r2, r6
 801ffa6:	e7fa      	b.n	801ff9e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801ffa8:	3801      	subs	r0, #1
 801ffaa:	b178      	cbz	r0, 801ffcc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801ffac:	1040      	asrs	r0, r0, #1
 801ffae:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801ffb2:	0080      	lsls	r0, r0, #2
 801ffb4:	0064      	lsls	r4, r4, #1
 801ffb6:	42a9      	cmp	r1, r5
 801ffb8:	d208      	bcs.n	801ffcc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801ffba:	180e      	adds	r6, r1, r0
 801ffbc:	460a      	mov	r2, r1
 801ffbe:	42b2      	cmp	r2, r6
 801ffc0:	d202      	bcs.n	801ffc8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801ffc2:	f842 3b04 	str.w	r3, [r2], #4
 801ffc6:	e7fa      	b.n	801ffbe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801ffc8:	4421      	add	r1, r4
 801ffca:	e7f4      	b.n	801ffb6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801ffcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ffd0:	00fff800 	.word	0x00fff800

0801ffd4 <_ZN8touchgfx8LCD16bppC1Ev>:
 801ffd4:	2200      	movs	r2, #0
 801ffd6:	4912      	ldr	r1, [pc, #72]	@ (8020020 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 801ffd8:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801ffdc:	6001      	str	r1, [r0, #0]
 801ffde:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801ffe2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801ffe6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801ffea:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801ffee:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801fff2:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801fff6:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801fffa:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801fffe:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8020002:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8020006:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 802000a:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 802000e:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8020012:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8020016:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 802001a:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
 802001e:	4770      	bx	lr
 8020020:	0802f1d8 	.word	0x0802f1d8

08020024 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8020024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020028:	b08d      	sub	sp, #52	@ 0x34
 802002a:	460d      	mov	r5, r1
 802002c:	4604      	mov	r4, r0
 802002e:	4699      	mov	r9, r3
 8020030:	6808      	ldr	r0, [r1, #0]
 8020032:	ab08      	add	r3, sp, #32
 8020034:	6849      	ldr	r1, [r1, #4]
 8020036:	c303      	stmia	r3!, {r0, r1}
 8020038:	6810      	ldr	r0, [r2, #0]
 802003a:	ab0a      	add	r3, sp, #40	@ 0x28
 802003c:	6851      	ldr	r1, [r2, #4]
 802003e:	c303      	stmia	r3!, {r0, r1}
 8020040:	a808      	add	r0, sp, #32
 8020042:	f7f7 ff71 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020046:	4629      	mov	r1, r5
 8020048:	a80a      	add	r0, sp, #40	@ 0x28
 802004a:	4d67      	ldr	r5, [pc, #412]	@ (80201e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 802004c:	f7f7 ff94 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020050:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8020054:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8020058:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 802005c:	6828      	ldr	r0, [r5, #0]
 802005e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020062:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8020066:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 802006a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802006e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020072:	440a      	add	r2, r1
 8020074:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8020078:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 802007c:	4413      	add	r3, r2
 802007e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8020082:	6803      	ldr	r3, [r0, #0]
 8020084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020086:	4798      	blx	r3
 8020088:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802008c:	d119      	bne.n	80200c2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 802008e:	f010 0f20 	tst.w	r0, #32
 8020092:	6828      	ldr	r0, [r5, #0]
 8020094:	d018      	beq.n	80200c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8020096:	2500      	movs	r5, #0
 8020098:	6801      	ldr	r1, [r0, #0]
 802009a:	b2b6      	uxth	r6, r6
 802009c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80200a0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 80200a4:	9601      	str	r6, [sp, #4]
 80200a6:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80200aa:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 80200ae:	9502      	str	r5, [sp, #8]
 80200b0:	fa1f f588 	uxth.w	r5, r8
 80200b4:	9500      	str	r5, [sp, #0]
 80200b6:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 80200b8:	4621      	mov	r1, r4
 80200ba:	47a8      	blx	r5
 80200bc:	b00d      	add	sp, #52	@ 0x34
 80200be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200c2:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80200c6:	e7e4      	b.n	8020092 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80200c8:	6803      	ldr	r3, [r0, #0]
 80200ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80200cc:	4798      	blx	r3
 80200ce:	4947      	ldr	r1, [pc, #284]	@ (80201ec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 80200d0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80200d4:	880b      	ldrh	r3, [r1, #0]
 80200d6:	468a      	mov	sl, r1
 80200d8:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 80200dc:	fb03 5202 	mla	r2, r3, r2, r5
 80200e0:	4373      	muls	r3, r6
 80200e2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80200e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80200ea:	9307      	str	r3, [sp, #28]
 80200ec:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80200f0:	9306      	str	r3, [sp, #24]
 80200f2:	9b07      	ldr	r3, [sp, #28]
 80200f4:	4298      	cmp	r0, r3
 80200f6:	d270      	bcs.n	80201da <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 80200f8:	9b06      	ldr	r3, [sp, #24]
 80200fa:	4621      	mov	r1, r4
 80200fc:	eb00 0b03 	add.w	fp, r0, r3
 8020100:	4558      	cmp	r0, fp
 8020102:	d25d      	bcs.n	80201c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8020104:	f851 4b04 	ldr.w	r4, [r1], #4
 8020108:	0e23      	lsrs	r3, r4, #24
 802010a:	d014      	beq.n	8020136 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 802010c:	2bff      	cmp	r3, #255	@ 0xff
 802010e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8020112:	d112      	bne.n	802013a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020114:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8020118:	d10f      	bne.n	802013a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 802011a:	0963      	lsrs	r3, r4, #5
 802011c:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8020120:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020124:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020128:	f02c 0c07 	bic.w	ip, ip, #7
 802012c:	ea43 0c0c 	orr.w	ip, r3, ip
 8020130:	ea4c 0404 	orr.w	r4, ip, r4
 8020134:	8004      	strh	r4, [r0, #0]
 8020136:	3002      	adds	r0, #2
 8020138:	e7e2      	b.n	8020100 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 802013a:	fb09 f303 	mul.w	r3, r9, r3
 802013e:	8807      	ldrh	r7, [r0, #0]
 8020140:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8020144:	fa5f fc8c 	uxtb.w	ip, ip
 8020148:	1c5a      	adds	r2, r3, #1
 802014a:	123e      	asrs	r6, r7, #8
 802014c:	10fd      	asrs	r5, r7, #3
 802014e:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8020152:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8020156:	00ff      	lsls	r7, r7, #3
 8020158:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802015c:	1212      	asrs	r2, r2, #8
 802015e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020162:	b293      	uxth	r3, r2
 8020164:	43d2      	mvns	r2, r2
 8020166:	b2ff      	uxtb	r7, r7
 8020168:	fb1e fe03 	smulbb	lr, lr, r3
 802016c:	b2d2      	uxtb	r2, r2
 802016e:	fb1c fc03 	smulbb	ip, ip, r3
 8020172:	b2e4      	uxtb	r4, r4
 8020174:	fb06 e602 	mla	r6, r6, r2, lr
 8020178:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 802017c:	fb14 f403 	smulbb	r4, r4, r3
 8020180:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8020184:	b2b6      	uxth	r6, r6
 8020186:	fb05 c502 	mla	r5, r5, r2, ip
 802018a:	fb07 4702 	mla	r7, r7, r2, r4
 802018e:	f106 0e01 	add.w	lr, r6, #1
 8020192:	b2ad      	uxth	r5, r5
 8020194:	b2bf      	uxth	r7, r7
 8020196:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802019a:	f105 0c01 	add.w	ip, r5, #1
 802019e:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 80201a2:	1c7e      	adds	r6, r7, #1
 80201a4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80201a8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80201ac:	096d      	lsrs	r5, r5, #5
 80201ae:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80201b2:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80201b6:	ea46 060e 	orr.w	r6, r6, lr
 80201ba:	432e      	orrs	r6, r5
 80201bc:	8006      	strh	r6, [r0, #0]
 80201be:	e7ba      	b.n	8020136 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80201c0:	f8ba 3000 	ldrh.w	r3, [sl]
 80201c4:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 80201c8:	eba3 0308 	sub.w	r3, r3, r8
 80201cc:	eba4 0408 	sub.w	r4, r4, r8
 80201d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80201d4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80201d8:	e78b      	b.n	80200f2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 80201da:	4b03      	ldr	r3, [pc, #12]	@ (80201e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80201dc:	6818      	ldr	r0, [r3, #0]
 80201de:	6803      	ldr	r3, [r0, #0]
 80201e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80201e2:	4798      	blx	r3
 80201e4:	e76a      	b.n	80200bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 80201e6:	bf00      	nop
 80201e8:	200279d8 	.word	0x200279d8
 80201ec:	200279d2 	.word	0x200279d2

080201f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 80201f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80201f4:	b085      	sub	sp, #20
 80201f6:	6810      	ldr	r0, [r2, #0]
 80201f8:	460c      	mov	r4, r1
 80201fa:	6851      	ldr	r1, [r2, #4]
 80201fc:	466d      	mov	r5, sp
 80201fe:	4616      	mov	r6, r2
 8020200:	c503      	stmia	r5!, {r0, r1}
 8020202:	6818      	ldr	r0, [r3, #0]
 8020204:	6859      	ldr	r1, [r3, #4]
 8020206:	c503      	stmia	r5!, {r0, r1}
 8020208:	4668      	mov	r0, sp
 802020a:	4d2e      	ldr	r5, [pc, #184]	@ (80202c4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 802020c:	f7f7 fe8c 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020210:	4631      	mov	r1, r6
 8020212:	a802      	add	r0, sp, #8
 8020214:	4e2c      	ldr	r6, [pc, #176]	@ (80202c8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8020216:	f7f7 feaf 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802021a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802021e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8020222:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8020226:	6828      	ldr	r0, [r5, #0]
 8020228:	fb11 2103 	smlabb	r1, r1, r3, r2
 802022c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8020230:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8020234:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020238:	f8bd 1000 	ldrh.w	r1, [sp]
 802023c:	440a      	add	r2, r1
 802023e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8020242:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8020246:	4413      	add	r3, r2
 8020248:	f8ad 300a 	strh.w	r3, [sp, #10]
 802024c:	6803      	ldr	r3, [r0, #0]
 802024e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020250:	4798      	blx	r3
 8020252:	8833      	ldrh	r3, [r6, #0]
 8020254:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8020258:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 802025c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8020260:	f8df e068 	ldr.w	lr, [pc, #104]	@ 80202cc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8020264:	fb03 1202 	mla	r2, r3, r2, r1
 8020268:	fb08 f303 	mul.w	r3, r8, r3
 802026c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020270:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020274:	4298      	cmp	r0, r3
 8020276:	d21d      	bcs.n	80202b4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8020278:	eb00 080c 	add.w	r8, r0, ip
 802027c:	4540      	cmp	r0, r8
 802027e:	d20f      	bcs.n	80202a0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8020280:	f854 1b04 	ldr.w	r1, [r4], #4
 8020284:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8020288:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 802028c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8020290:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8020294:	ea42 0209 	orr.w	r2, r2, r9
 8020298:	430a      	orrs	r2, r1
 802029a:	f820 2b02 	strh.w	r2, [r0], #2
 802029e:	e7ed      	b.n	802027c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80202a0:	8832      	ldrh	r2, [r6, #0]
 80202a2:	1bd2      	subs	r2, r2, r7
 80202a4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80202a8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80202ac:	1bd2      	subs	r2, r2, r7
 80202ae:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80202b2:	e7df      	b.n	8020274 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80202b4:	6828      	ldr	r0, [r5, #0]
 80202b6:	6803      	ldr	r3, [r0, #0]
 80202b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80202ba:	4798      	blx	r3
 80202bc:	b005      	add	sp, #20
 80202be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80202c2:	bf00      	nop
 80202c4:	200279d8 	.word	0x200279d8
 80202c8:	200279d2 	.word	0x200279d2
 80202cc:	fffff800 	.word	0xfffff800

080202d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80202d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202d4:	b08e      	sub	sp, #56	@ 0x38
 80202d6:	460e      	mov	r6, r1
 80202d8:	4604      	mov	r4, r0
 80202da:	461d      	mov	r5, r3
 80202dc:	6808      	ldr	r0, [r1, #0]
 80202de:	ab0a      	add	r3, sp, #40	@ 0x28
 80202e0:	6849      	ldr	r1, [r1, #4]
 80202e2:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 80204b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 80202e6:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 80204bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 80202ea:	c303      	stmia	r3!, {r0, r1}
 80202ec:	6810      	ldr	r0, [r2, #0]
 80202ee:	ab0c      	add	r3, sp, #48	@ 0x30
 80202f0:	6851      	ldr	r1, [r2, #4]
 80202f2:	c303      	stmia	r3!, {r0, r1}
 80202f4:	a80a      	add	r0, sp, #40	@ 0x28
 80202f6:	f7f7 fe17 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80202fa:	4631      	mov	r1, r6
 80202fc:	a80c      	add	r0, sp, #48	@ 0x30
 80202fe:	f7f7 fe3b 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020302:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8020306:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 802030a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 802030e:	f8d8 0000 	ldr.w	r0, [r8]
 8020312:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020316:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 802031a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 802031e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020322:	440c      	add	r4, r1
 8020324:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8020328:	440a      	add	r2, r1
 802032a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802032e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8020332:	4413      	add	r3, r2
 8020334:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8020338:	6803      	ldr	r3, [r0, #0]
 802033a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802033c:	4798      	blx	r3
 802033e:	2dff      	cmp	r5, #255	@ 0xff
 8020340:	d124      	bne.n	802038c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8020342:	f010 0f01 	tst.w	r0, #1
 8020346:	f8d8 0000 	ldr.w	r0, [r8]
 802034a:	d022      	beq.n	8020392 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 802034c:	2100      	movs	r1, #0
 802034e:	f04f 0e01 	mov.w	lr, #1
 8020352:	f8d0 c000 	ldr.w	ip, [r0]
 8020356:	b2b6      	uxth	r6, r6
 8020358:	f8cd e018 	str.w	lr, [sp, #24]
 802035c:	b2bf      	uxth	r7, r7
 802035e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8020362:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8020366:	e9cd 1107 	strd	r1, r1, [sp, #28]
 802036a:	f8b9 e000 	ldrh.w	lr, [r9]
 802036e:	9503      	str	r5, [sp, #12]
 8020370:	9601      	str	r6, [sp, #4]
 8020372:	9700      	str	r7, [sp, #0]
 8020374:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8020378:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 802037c:	9102      	str	r1, [sp, #8]
 802037e:	4621      	mov	r1, r4
 8020380:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 8020384:	47a8      	blx	r5
 8020386:	b00e      	add	sp, #56	@ 0x38
 8020388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802038c:	f010 0f04 	tst.w	r0, #4
 8020390:	e7d9      	b.n	8020346 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8020392:	6803      	ldr	r3, [r0, #0]
 8020394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020396:	4798      	blx	r3
 8020398:	f8b9 3000 	ldrh.w	r3, [r9]
 802039c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80203a0:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80203a4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80203a8:	435e      	muls	r6, r3
 80203aa:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 80203ae:	2dff      	cmp	r5, #255	@ 0xff
 80203b0:	fb03 1202 	mla	r2, r3, r2, r1
 80203b4:	ebac 0c07 	sub.w	ip, ip, r7
 80203b8:	eba3 0707 	sub.w	r7, r3, r7
 80203bc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80203c0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80203c4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80203c8:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80203cc:	d049      	beq.n	8020462 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80203ce:	43eb      	mvns	r3, r5
 80203d0:	fa1f f985 	uxth.w	r9, r5
 80203d4:	b2db      	uxtb	r3, r3
 80203d6:	42b0      	cmp	r0, r6
 80203d8:	d266      	bcs.n	80204a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80203da:	eb00 0a0e 	add.w	sl, r0, lr
 80203de:	4550      	cmp	r0, sl
 80203e0:	4621      	mov	r1, r4
 80203e2:	f104 0403 	add.w	r4, r4, #3
 80203e6:	d25b      	bcs.n	80204a0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80203e8:	8802      	ldrh	r2, [r0, #0]
 80203ea:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80203ee:	ea4f 2822 	mov.w	r8, r2, asr #8
 80203f2:	fb11 f109 	smulbb	r1, r1, r9
 80203f6:	10d5      	asrs	r5, r2, #3
 80203f8:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80203fc:	00d2      	lsls	r2, r2, #3
 80203fe:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8020402:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8020406:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 802040a:	fb08 1803 	mla	r8, r8, r3, r1
 802040e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8020412:	b2d2      	uxtb	r2, r2
 8020414:	fb11 f109 	smulbb	r1, r1, r9
 8020418:	fa1f f888 	uxth.w	r8, r8
 802041c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020420:	fb05 1503 	mla	r5, r5, r3, r1
 8020424:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8020428:	fb11 f109 	smulbb	r1, r1, r9
 802042c:	b2ad      	uxth	r5, r5
 802042e:	fb02 1203 	mla	r2, r2, r3, r1
 8020432:	f108 0101 	add.w	r1, r8, #1
 8020436:	b292      	uxth	r2, r2
 8020438:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 802043c:	1c51      	adds	r1, r2, #1
 802043e:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8020442:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020446:	1c69      	adds	r1, r5, #1
 8020448:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802044c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020450:	096d      	lsrs	r5, r5, #5
 8020452:	ea42 0208 	orr.w	r2, r2, r8
 8020456:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802045a:	432a      	orrs	r2, r5
 802045c:	f820 2b02 	strh.w	r2, [r0], #2
 8020460:	e7bd      	b.n	80203de <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8020462:	4a14      	ldr	r2, [pc, #80]	@ (80204b4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8020464:	42b0      	cmp	r0, r6
 8020466:	d21f      	bcs.n	80204a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8020468:	eb00 050e 	add.w	r5, r0, lr
 802046c:	42a8      	cmp	r0, r5
 802046e:	4621      	mov	r1, r4
 8020470:	f104 0403 	add.w	r4, r4, #3
 8020474:	d210      	bcs.n	8020498 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8020476:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 802047a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802047e:	00db      	lsls	r3, r3, #3
 8020480:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8020484:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020488:	430b      	orrs	r3, r1
 802048a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802048e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8020492:	f820 3b02 	strh.w	r3, [r0], #2
 8020496:	e7e9      	b.n	802046c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8020498:	4438      	add	r0, r7
 802049a:	eb01 040c 	add.w	r4, r1, ip
 802049e:	e7e1      	b.n	8020464 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80204a0:	4438      	add	r0, r7
 80204a2:	eb01 040c 	add.w	r4, r1, ip
 80204a6:	e796      	b.n	80203d6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80204a8:	4b03      	ldr	r3, [pc, #12]	@ (80204b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80204aa:	6818      	ldr	r0, [r3, #0]
 80204ac:	6803      	ldr	r3, [r0, #0]
 80204ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80204b0:	4798      	blx	r3
 80204b2:	e768      	b.n	8020386 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80204b4:	fffff800 	.word	0xfffff800
 80204b8:	200279d8 	.word	0x200279d8
 80204bc:	200279d2 	.word	0x200279d2

080204c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80204c0:	b4f0      	push	{r4, r5, r6, r7}
 80204c2:	4616      	mov	r6, r2
 80204c4:	461c      	mov	r4, r3
 80204c6:	460d      	mov	r5, r1
 80204c8:	9a04      	ldr	r2, [sp, #16]
 80204ca:	2e01      	cmp	r6, #1
 80204cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80204d0:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80204d4:	d012      	beq.n	80204fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80204d6:	d303      	bcc.n	80204e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80204d8:	2e02      	cmp	r6, #2
 80204da:	d00a      	beq.n	80204f2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80204dc:	bcf0      	pop	{r4, r5, r6, r7}
 80204de:	4770      	bx	lr
 80204e0:	6805      	ldr	r5, [r0, #0]
 80204e2:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80204e6:	68ed      	ldr	r5, [r5, #12]
 80204e8:	4613      	mov	r3, r2
 80204ea:	4622      	mov	r2, r4
 80204ec:	46ac      	mov	ip, r5
 80204ee:	bcf0      	pop	{r4, r5, r6, r7}
 80204f0:	4760      	bx	ip
 80204f2:	4621      	mov	r1, r4
 80204f4:	4628      	mov	r0, r5
 80204f6:	bcf0      	pop	{r4, r5, r6, r7}
 80204f8:	f7ff bd94 	b.w	8020024 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80204fc:	4621      	mov	r1, r4
 80204fe:	4628      	mov	r0, r5
 8020500:	bcf0      	pop	{r4, r5, r6, r7}
 8020502:	f7ff bee5 	b.w	80202d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08020508 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8020508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802050c:	b093      	sub	sp, #76	@ 0x4c
 802050e:	4681      	mov	r9, r0
 8020510:	4688      	mov	r8, r1
 8020512:	6810      	ldr	r0, [r2, #0]
 8020514:	6851      	ldr	r1, [r2, #4]
 8020516:	ac0e      	add	r4, sp, #56	@ 0x38
 8020518:	4616      	mov	r6, r2
 802051a:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 802051e:	4f6b      	ldr	r7, [pc, #428]	@ (80206cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8020520:	c403      	stmia	r4!, {r0, r1}
 8020522:	6818      	ldr	r0, [r3, #0]
 8020524:	ac10      	add	r4, sp, #64	@ 0x40
 8020526:	6859      	ldr	r1, [r3, #4]
 8020528:	c403      	stmia	r4!, {r0, r1}
 802052a:	a80e      	add	r0, sp, #56	@ 0x38
 802052c:	f7f7 fcfc 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020530:	4631      	mov	r1, r6
 8020532:	a810      	add	r0, sp, #64	@ 0x40
 8020534:	4e66      	ldr	r6, [pc, #408]	@ (80206d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8020536:	f7f7 fd1f 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802053a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 802053e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8020542:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8020546:	6830      	ldr	r0, [r6, #0]
 8020548:	fb11 2103 	smlabb	r1, r1, r3, r2
 802054c:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8020550:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8020554:	4489      	add	r9, r1
 8020556:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 802055a:	440a      	add	r2, r1
 802055c:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8020560:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8020564:	4413      	add	r3, r2
 8020566:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 802056a:	6803      	ldr	r3, [r0, #0]
 802056c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802056e:	4798      	blx	r3
 8020570:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8020574:	6830      	ldr	r0, [r6, #0]
 8020576:	d01d      	beq.n	80205b4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8020578:	2200      	movs	r2, #0
 802057a:	6801      	ldr	r1, [r0, #0]
 802057c:	b2a4      	uxth	r4, r4
 802057e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8020582:	b2ad      	uxth	r5, r5
 8020584:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8020588:	220b      	movs	r2, #11
 802058a:	9207      	str	r2, [sp, #28]
 802058c:	883a      	ldrh	r2, [r7, #0]
 802058e:	9502      	str	r5, [sp, #8]
 8020590:	9206      	str	r2, [sp, #24]
 8020592:	2201      	movs	r2, #1
 8020594:	9401      	str	r4, [sp, #4]
 8020596:	e9cd a204 	strd	sl, r2, [sp, #16]
 802059a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 802059e:	9203      	str	r2, [sp, #12]
 80205a0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80205a4:	9200      	str	r2, [sp, #0]
 80205a6:	4642      	mov	r2, r8
 80205a8:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 80205aa:	4649      	mov	r1, r9
 80205ac:	47a0      	blx	r4
 80205ae:	b013      	add	sp, #76	@ 0x4c
 80205b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205b4:	6803      	ldr	r3, [r0, #0]
 80205b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80205b8:	4798      	blx	r3
 80205ba:	883b      	ldrh	r3, [r7, #0]
 80205bc:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80205c0:	f04f 0e04 	mov.w	lr, #4
 80205c4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 80205c8:	435d      	muls	r5, r3
 80205ca:	fb03 1202 	mla	r2, r3, r2, r1
 80205ce:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80205d2:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80205d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80205d8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80205dc:	1b12      	subs	r2, r2, r4
 80205de:	920d      	str	r2, [sp, #52]	@ 0x34
 80205e0:	0062      	lsls	r2, r4, #1
 80205e2:	1b1c      	subs	r4, r3, r4
 80205e4:	920a      	str	r2, [sp, #40]	@ 0x28
 80205e6:	0063      	lsls	r3, r4, #1
 80205e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80205ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80205ec:	4298      	cmp	r0, r3
 80205ee:	d266      	bcs.n	80206be <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 80205f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80205f2:	eb00 0b03 	add.w	fp, r0, r3
 80205f6:	4558      	cmp	r0, fp
 80205f8:	d25c      	bcs.n	80206b4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80205fa:	f819 3b01 	ldrb.w	r3, [r9], #1
 80205fe:	fb1e e303 	smlabb	r3, lr, r3, lr
 8020602:	f858 2003 	ldr.w	r2, [r8, r3]
 8020606:	0e11      	lsrs	r1, r2, #24
 8020608:	d012      	beq.n	8020630 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802060a:	29ff      	cmp	r1, #255	@ 0xff
 802060c:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8020610:	d110      	bne.n	8020634 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8020612:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8020616:	d10d      	bne.n	8020634 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8020618:	0953      	lsrs	r3, r2, #5
 802061a:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 802061e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020622:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020626:	f027 0707 	bic.w	r7, r7, #7
 802062a:	431f      	orrs	r7, r3
 802062c:	433a      	orrs	r2, r7
 802062e:	8002      	strh	r2, [r0, #0]
 8020630:	3002      	adds	r0, #2
 8020632:	e7e0      	b.n	80205f6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8020634:	fb0a f101 	mul.w	r1, sl, r1
 8020638:	8806      	ldrh	r6, [r0, #0]
 802063a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 802063e:	b2d2      	uxtb	r2, r2
 8020640:	1c4b      	adds	r3, r1, #1
 8020642:	1235      	asrs	r5, r6, #8
 8020644:	10f4      	asrs	r4, r6, #3
 8020646:	eb03 2321 	add.w	r3, r3, r1, asr #8
 802064a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802064e:	00f6      	lsls	r6, r6, #3
 8020650:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8020654:	121b      	asrs	r3, r3, #8
 8020656:	b2f6      	uxtb	r6, r6
 8020658:	b299      	uxth	r1, r3
 802065a:	43db      	mvns	r3, r3
 802065c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8020660:	fb1c fc01 	smulbb	ip, ip, r1
 8020664:	b2db      	uxtb	r3, r3
 8020666:	fb12 f201 	smulbb	r2, r2, r1
 802066a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802066e:	fb05 c503 	mla	r5, r5, r3, ip
 8020672:	b2ff      	uxtb	r7, r7
 8020674:	fb06 2203 	mla	r2, r6, r3, r2
 8020678:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 802067c:	fb17 f701 	smulbb	r7, r7, r1
 8020680:	b2ad      	uxth	r5, r5
 8020682:	b292      	uxth	r2, r2
 8020684:	fb04 7403 	mla	r4, r4, r3, r7
 8020688:	f105 0c01 	add.w	ip, r5, #1
 802068c:	1c57      	adds	r7, r2, #1
 802068e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020692:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8020696:	b2a4      	uxth	r4, r4
 8020698:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802069c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80206a0:	433d      	orrs	r5, r7
 80206a2:	1c67      	adds	r7, r4, #1
 80206a4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80206a8:	0964      	lsrs	r4, r4, #5
 80206aa:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80206ae:	4325      	orrs	r5, r4
 80206b0:	8005      	strh	r5, [r0, #0]
 80206b2:	e7bd      	b.n	8020630 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80206b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80206b6:	4418      	add	r0, r3
 80206b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80206ba:	4499      	add	r9, r3
 80206bc:	e795      	b.n	80205ea <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80206be:	4b04      	ldr	r3, [pc, #16]	@ (80206d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80206c0:	6818      	ldr	r0, [r3, #0]
 80206c2:	6803      	ldr	r3, [r0, #0]
 80206c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80206c6:	4798      	blx	r3
 80206c8:	e771      	b.n	80205ae <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80206ca:	bf00      	nop
 80206cc:	200279d2 	.word	0x200279d2
 80206d0:	200279d8 	.word	0x200279d8

080206d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80206d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206d8:	b087      	sub	sp, #28
 80206da:	4680      	mov	r8, r0
 80206dc:	460d      	mov	r5, r1
 80206de:	4614      	mov	r4, r2
 80206e0:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 80206e4:	2e00      	cmp	r6, #0
 80206e6:	f000 80b9 	beq.w	802085c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80206ea:	6810      	ldr	r0, [r2, #0]
 80206ec:	af02      	add	r7, sp, #8
 80206ee:	6851      	ldr	r1, [r2, #4]
 80206f0:	c703      	stmia	r7!, {r0, r1}
 80206f2:	6818      	ldr	r0, [r3, #0]
 80206f4:	af04      	add	r7, sp, #16
 80206f6:	6859      	ldr	r1, [r3, #4]
 80206f8:	c703      	stmia	r7!, {r0, r1}
 80206fa:	a802      	add	r0, sp, #8
 80206fc:	f7f7 fc14 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020700:	4621      	mov	r1, r4
 8020702:	a804      	add	r0, sp, #16
 8020704:	f7f7 fc38 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020708:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802070c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020710:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8020714:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8020718:	fb14 2103 	smlabb	r1, r4, r3, r2
 802071c:	eb08 0401 	add.w	r4, r8, r1
 8020720:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020724:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8020728:	440a      	add	r2, r1
 802072a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 802072e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020732:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020736:	4413      	add	r3, r2
 8020738:	f8ad 3012 	strh.w	r3, [sp, #18]
 802073c:	4b49      	ldr	r3, [pc, #292]	@ (8020864 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 802073e:	6818      	ldr	r0, [r3, #0]
 8020740:	6803      	ldr	r3, [r0, #0]
 8020742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020744:	4798      	blx	r3
 8020746:	4b48      	ldr	r3, [pc, #288]	@ (8020868 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8020748:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 802074c:	2eff      	cmp	r6, #255	@ 0xff
 802074e:	881a      	ldrh	r2, [r3, #0]
 8020750:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8020754:	fb02 c101 	mla	r1, r2, r1, ip
 8020758:	fb02 f207 	mul.w	r2, r2, r7
 802075c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020760:	f105 0104 	add.w	r1, r5, #4
 8020764:	461d      	mov	r5, r3
 8020766:	d05a      	beq.n	802081e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8020768:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 802076c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020770:	b2b6      	uxth	r6, r6
 8020772:	9301      	str	r3, [sp, #4]
 8020774:	fa1f fe8e 	uxth.w	lr, lr
 8020778:	4282      	cmp	r2, r0
 802077a:	d96a      	bls.n	8020852 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 802077c:	eb00 0b0a 	add.w	fp, r0, sl
 8020780:	4583      	cmp	fp, r0
 8020782:	d940      	bls.n	8020806 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8020784:	8805      	ldrh	r5, [r0, #0]
 8020786:	f814 3b01 	ldrb.w	r3, [r4], #1
 802078a:	122f      	asrs	r7, r5, #8
 802078c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8020790:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8020794:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8020798:	00ed      	lsls	r5, r5, #3
 802079a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802079e:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 80207a2:	fb17 f70e 	smulbb	r7, r7, lr
 80207a6:	b2ed      	uxtb	r5, r5
 80207a8:	fb19 f90e 	smulbb	r9, r9, lr
 80207ac:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80207b0:	fb15 f50e 	smulbb	r5, r5, lr
 80207b4:	fb0c 7c06 	mla	ip, ip, r6, r7
 80207b8:	10df      	asrs	r7, r3, #3
 80207ba:	00db      	lsls	r3, r3, #3
 80207bc:	fa1f fc8c 	uxth.w	ip, ip
 80207c0:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80207c4:	b2db      	uxtb	r3, r3
 80207c6:	fb07 9706 	mla	r7, r7, r6, r9
 80207ca:	f10c 0901 	add.w	r9, ip, #1
 80207ce:	fb03 5306 	mla	r3, r3, r6, r5
 80207d2:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80207d6:	b29b      	uxth	r3, r3
 80207d8:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 80207dc:	b2bf      	uxth	r7, r7
 80207de:	f103 0c01 	add.w	ip, r3, #1
 80207e2:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80207e6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80207ea:	ea4c 0c09 	orr.w	ip, ip, r9
 80207ee:	f107 0901 	add.w	r9, r7, #1
 80207f2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80207f6:	097f      	lsrs	r7, r7, #5
 80207f8:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80207fc:	ea4c 0c07 	orr.w	ip, ip, r7
 8020800:	f820 cb02 	strh.w	ip, [r0], #2
 8020804:	e7bc      	b.n	8020780 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8020806:	9b01      	ldr	r3, [sp, #4]
 8020808:	881b      	ldrh	r3, [r3, #0]
 802080a:	eba3 0308 	sub.w	r3, r3, r8
 802080e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020812:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8020816:	eba3 0308 	sub.w	r3, r3, r8
 802081a:	441c      	add	r4, r3
 802081c:	e7ac      	b.n	8020778 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 802081e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020822:	4282      	cmp	r2, r0
 8020824:	d915      	bls.n	8020852 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8020826:	eb00 060a 	add.w	r6, r0, sl
 802082a:	4286      	cmp	r6, r0
 802082c:	d906      	bls.n	802083c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 802082e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020832:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8020836:	f820 3b02 	strh.w	r3, [r0], #2
 802083a:	e7f6      	b.n	802082a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 802083c:	882b      	ldrh	r3, [r5, #0]
 802083e:	eba3 0308 	sub.w	r3, r3, r8
 8020842:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020846:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802084a:	eba3 0308 	sub.w	r3, r3, r8
 802084e:	441c      	add	r4, r3
 8020850:	e7e7      	b.n	8020822 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8020852:	4b04      	ldr	r3, [pc, #16]	@ (8020864 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8020854:	6818      	ldr	r0, [r3, #0]
 8020856:	6803      	ldr	r3, [r0, #0]
 8020858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802085a:	4798      	blx	r3
 802085c:	b007      	add	sp, #28
 802085e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020862:	bf00      	nop
 8020864:	200279d8 	.word	0x200279d8
 8020868:	200279d2 	.word	0x200279d2

0802086c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 802086c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020870:	b091      	sub	sp, #68	@ 0x44
 8020872:	4680      	mov	r8, r0
 8020874:	460f      	mov	r7, r1
 8020876:	4614      	mov	r4, r2
 8020878:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 802087c:	2d00      	cmp	r5, #0
 802087e:	d051      	beq.n	8020924 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020880:	6810      	ldr	r0, [r2, #0]
 8020882:	ae0c      	add	r6, sp, #48	@ 0x30
 8020884:	6851      	ldr	r1, [r2, #4]
 8020886:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 8020a88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 802088a:	c603      	stmia	r6!, {r0, r1}
 802088c:	6818      	ldr	r0, [r3, #0]
 802088e:	ae0e      	add	r6, sp, #56	@ 0x38
 8020890:	6859      	ldr	r1, [r3, #4]
 8020892:	c603      	stmia	r6!, {r0, r1}
 8020894:	a80c      	add	r0, sp, #48	@ 0x30
 8020896:	f7f7 fb47 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802089a:	4621      	mov	r1, r4
 802089c:	a80e      	add	r0, sp, #56	@ 0x38
 802089e:	f7f7 fb6b 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80208a2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80208a6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80208aa:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80208ae:	f8d9 0000 	ldr.w	r0, [r9]
 80208b2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80208b6:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 80208ba:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 80208be:	eb08 0401 	add.w	r4, r8, r1
 80208c2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80208c6:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8020a8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 80208ca:	440a      	add	r2, r1
 80208cc:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80208d0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80208d4:	4413      	add	r3, r2
 80208d6:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80208da:	6803      	ldr	r3, [r0, #0]
 80208dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80208de:	4798      	blx	r3
 80208e0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80208e4:	f8d9 0000 	ldr.w	r0, [r9]
 80208e8:	d01f      	beq.n	802092a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80208ea:	2200      	movs	r2, #0
 80208ec:	6801      	ldr	r1, [r0, #0]
 80208ee:	b2b6      	uxth	r6, r6
 80208f0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80208f4:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80208f8:	220b      	movs	r2, #11
 80208fa:	9207      	str	r2, [sp, #28]
 80208fc:	f8b8 2000 	ldrh.w	r2, [r8]
 8020900:	9601      	str	r6, [sp, #4]
 8020902:	9206      	str	r2, [sp, #24]
 8020904:	2201      	movs	r2, #1
 8020906:	e9cd 5204 	strd	r5, r2, [sp, #16]
 802090a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 802090e:	9203      	str	r2, [sp, #12]
 8020910:	fa1f f28a 	uxth.w	r2, sl
 8020914:	9202      	str	r2, [sp, #8]
 8020916:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 802091a:	9200      	str	r2, [sp, #0]
 802091c:	463a      	mov	r2, r7
 802091e:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8020920:	4621      	mov	r1, r4
 8020922:	47a8      	blx	r5
 8020924:	b011      	add	sp, #68	@ 0x44
 8020926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802092a:	6803      	ldr	r3, [r0, #0]
 802092c:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8020930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020932:	4798      	blx	r3
 8020934:	f8b8 2000 	ldrh.w	r2, [r8]
 8020938:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802093c:	2dff      	cmp	r5, #255	@ 0xff
 802093e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8020942:	fb0a fa02 	mul.w	sl, sl, r2
 8020946:	fb02 1303 	mla	r3, r2, r3, r1
 802094a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802094e:	d062      	beq.n	8020a16 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8020950:	ea6f 0c05 	mvn.w	ip, r5
 8020954:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8020958:	b2ad      	uxth	r5, r5
 802095a:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 802095e:	fa5f fc8c 	uxtb.w	ip, ip
 8020962:	930a      	str	r3, [sp, #40]	@ 0x28
 8020964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020966:	4298      	cmp	r0, r3
 8020968:	f080 8085 	bcs.w	8020a76 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 802096c:	eb00 0b09 	add.w	fp, r0, r9
 8020970:	4558      	cmp	r0, fp
 8020972:	d246      	bcs.n	8020a02 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8020974:	f814 eb01 	ldrb.w	lr, [r4], #1
 8020978:	2303      	movs	r3, #3
 802097a:	2204      	movs	r2, #4
 802097c:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8020980:	8803      	ldrh	r3, [r0, #0]
 8020982:	eb07 0a0e 	add.w	sl, r7, lr
 8020986:	1219      	asrs	r1, r3, #8
 8020988:	10da      	asrs	r2, r3, #3
 802098a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802098e:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8020992:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8020996:	00db      	lsls	r3, r3, #3
 8020998:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802099c:	fb18 f805 	smulbb	r8, r8, r5
 80209a0:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80209a4:	fb1e fe05 	smulbb	lr, lr, r5
 80209a8:	b2db      	uxtb	r3, r3
 80209aa:	fb01 810c 	mla	r1, r1, ip, r8
 80209ae:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80209b2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80209b6:	fb18 f805 	smulbb	r8, r8, r5
 80209ba:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80209be:	b289      	uxth	r1, r1
 80209c0:	fb02 820c 	mla	r2, r2, ip, r8
 80209c4:	fb03 e30c 	mla	r3, r3, ip, lr
 80209c8:	f101 0801 	add.w	r8, r1, #1
 80209cc:	b292      	uxth	r2, r2
 80209ce:	b29b      	uxth	r3, r3
 80209d0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80209d4:	f102 0801 	add.w	r8, r2, #1
 80209d8:	f103 0e01 	add.w	lr, r3, #1
 80209dc:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80209e0:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80209e4:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80209e8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80209ec:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80209f0:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80209f4:	ea4e 0101 	orr.w	r1, lr, r1
 80209f8:	ea41 0108 	orr.w	r1, r1, r8
 80209fc:	f820 1b02 	strh.w	r1, [r0], #2
 8020a00:	e7b6      	b.n	8020970 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8020a02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020a04:	881b      	ldrh	r3, [r3, #0]
 8020a06:	1b9b      	subs	r3, r3, r6
 8020a08:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020a0c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8020a10:	1b9b      	subs	r3, r3, r6
 8020a12:	441c      	add	r4, r3
 8020a14:	e7a6      	b.n	8020964 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8020a16:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8020a1a:	2203      	movs	r2, #3
 8020a1c:	2504      	movs	r5, #4
 8020a1e:	4919      	ldr	r1, [pc, #100]	@ (8020a84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8020a20:	4550      	cmp	r0, sl
 8020a22:	d228      	bcs.n	8020a76 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8020a24:	eb00 0c09 	add.w	ip, r0, r9
 8020a28:	4560      	cmp	r0, ip
 8020a2a:	4623      	mov	r3, r4
 8020a2c:	d219      	bcs.n	8020a62 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8020a2e:	f893 e000 	ldrb.w	lr, [r3]
 8020a32:	3401      	adds	r4, #1
 8020a34:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8020a38:	eb07 0b0e 	add.w	fp, r7, lr
 8020a3c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020a40:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8020a44:	f89b b001 	ldrb.w	fp, [fp, #1]
 8020a48:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8020a4c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8020a50:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8020a54:	ea43 030b 	orr.w	r3, r3, fp
 8020a58:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8020a5c:	f820 3b02 	strh.w	r3, [r0], #2
 8020a60:	e7e2      	b.n	8020a28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8020a62:	f8b8 3000 	ldrh.w	r3, [r8]
 8020a66:	1b9b      	subs	r3, r3, r6
 8020a68:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020a6c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8020a70:	1b9b      	subs	r3, r3, r6
 8020a72:	441c      	add	r4, r3
 8020a74:	e7d4      	b.n	8020a20 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8020a76:	4b04      	ldr	r3, [pc, #16]	@ (8020a88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8020a78:	6818      	ldr	r0, [r3, #0]
 8020a7a:	6803      	ldr	r3, [r0, #0]
 8020a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020a7e:	4798      	blx	r3
 8020a80:	e750      	b.n	8020924 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020a82:	bf00      	nop
 8020a84:	fffff800 	.word	0xfffff800
 8020a88:	200279d8 	.word	0x200279d8
 8020a8c:	200279d2 	.word	0x200279d2

08020a90 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8020a90:	b4f0      	push	{r4, r5, r6, r7}
 8020a92:	460c      	mov	r4, r1
 8020a94:	4611      	mov	r1, r2
 8020a96:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8020a9a:	461a      	mov	r2, r3
 8020a9c:	780f      	ldrb	r7, [r1, #0]
 8020a9e:	9b04      	ldr	r3, [sp, #16]
 8020aa0:	2f01      	cmp	r7, #1
 8020aa2:	784e      	ldrb	r6, [r1, #1]
 8020aa4:	d038      	beq.n	8020b18 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 8020aa6:	d31f      	bcc.n	8020ae8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 8020aa8:	2f02      	cmp	r7, #2
 8020aaa:	d14d      	bne.n	8020b48 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8020aac:	2e03      	cmp	r6, #3
 8020aae:	d84b      	bhi.n	8020b48 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8020ab0:	e8df f006 	tbb	[pc, r6]
 8020ab4:	17140702 	.word	0x17140702
 8020ab8:	9504      	str	r5, [sp, #16]
 8020aba:	4620      	mov	r0, r4
 8020abc:	bcf0      	pop	{r4, r5, r6, r7}
 8020abe:	f7ff be09 	b.w	80206d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8020ac2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8020ac4:	2800      	cmp	r0, #0
 8020ac6:	d03f      	beq.n	8020b48 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8020ac8:	6806      	ldr	r6, [r0, #0]
 8020aca:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8020ace:	68b5      	ldr	r5, [r6, #8]
 8020ad0:	4613      	mov	r3, r2
 8020ad2:	46ac      	mov	ip, r5
 8020ad4:	460a      	mov	r2, r1
 8020ad6:	4621      	mov	r1, r4
 8020ad8:	bcf0      	pop	{r4, r5, r6, r7}
 8020ada:	4760      	bx	ip
 8020adc:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8020ae0:	e7f0      	b.n	8020ac4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8020ae2:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8020ae6:	e7ed      	b.n	8020ac4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8020ae8:	2e03      	cmp	r6, #3
 8020aea:	d82d      	bhi.n	8020b48 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8020aec:	e8df f006 	tbb	[pc, r6]
 8020af0:	110e0702 	.word	0x110e0702
 8020af4:	9504      	str	r5, [sp, #16]
 8020af6:	4620      	mov	r0, r4
 8020af8:	bcf0      	pop	{r4, r5, r6, r7}
 8020afa:	f7ff bd05 	b.w	8020508 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8020afe:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8020b00:	b310      	cbz	r0, 8020b48 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8020b02:	6806      	ldr	r6, [r0, #0]
 8020b04:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8020b08:	68f5      	ldr	r5, [r6, #12]
 8020b0a:	e7e1      	b.n	8020ad0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8020b0c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8020b10:	e7f6      	b.n	8020b00 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8020b12:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8020b16:	e7f3      	b.n	8020b00 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8020b18:	2e03      	cmp	r6, #3
 8020b1a:	d815      	bhi.n	8020b48 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8020b1c:	e8df f006 	tbb	[pc, r6]
 8020b20:	110e0702 	.word	0x110e0702
 8020b24:	9504      	str	r5, [sp, #16]
 8020b26:	4620      	mov	r0, r4
 8020b28:	bcf0      	pop	{r4, r5, r6, r7}
 8020b2a:	f7ff be9f 	b.w	802086c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8020b2e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8020b30:	b150      	cbz	r0, 8020b48 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8020b32:	6806      	ldr	r6, [r0, #0]
 8020b34:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8020b38:	6935      	ldr	r5, [r6, #16]
 8020b3a:	e7c9      	b.n	8020ad0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8020b3c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8020b40:	e7f6      	b.n	8020b30 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8020b42:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8020b46:	e7f3      	b.n	8020b30 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8020b48:	bcf0      	pop	{r4, r5, r6, r7}
 8020b4a:	4770      	bx	lr

08020b4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8020b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b50:	b087      	sub	sp, #28
 8020b52:	4604      	mov	r4, r0
 8020b54:	460e      	mov	r6, r1
 8020b56:	6810      	ldr	r0, [r2, #0]
 8020b58:	6851      	ldr	r1, [r2, #4]
 8020b5a:	ad02      	add	r5, sp, #8
 8020b5c:	4617      	mov	r7, r2
 8020b5e:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 8020b62:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 8020d94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8020b66:	c503      	stmia	r5!, {r0, r1}
 8020b68:	6818      	ldr	r0, [r3, #0]
 8020b6a:	ad04      	add	r5, sp, #16
 8020b6c:	6859      	ldr	r1, [r3, #4]
 8020b6e:	c503      	stmia	r5!, {r0, r1}
 8020b70:	a802      	add	r0, sp, #8
 8020b72:	f7f7 f9d9 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b76:	4639      	mov	r1, r7
 8020b78:	a804      	add	r0, sp, #16
 8020b7a:	f7f7 f9fd 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020b7e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020b82:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020b86:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8020b8a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8020b8e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020b92:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8020b96:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8020b9a:	440e      	add	r6, r1
 8020b9c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020ba0:	440a      	add	r2, r1
 8020ba2:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020ba6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020baa:	4413      	add	r3, r2
 8020bac:	f8ad 3012 	strh.w	r3, [sp, #18]
 8020bb0:	4b77      	ldr	r3, [pc, #476]	@ (8020d90 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8020bb2:	6818      	ldr	r0, [r3, #0]
 8020bb4:	6803      	ldr	r3, [r0, #0]
 8020bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020bb8:	4798      	blx	r3
 8020bba:	f8b9 b000 	ldrh.w	fp, [r9]
 8020bbe:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020bc2:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8020bc6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020bca:	fb05 f50b 	mul.w	r5, r5, fp
 8020bce:	fb0b 2303 	mla	r3, fp, r3, r2
 8020bd2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020bd6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020bda:	9300      	str	r3, [sp, #0]
 8020bdc:	d069      	beq.n	8020cb2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8020bde:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8020be2:	4558      	cmp	r0, fp
 8020be4:	f080 80cc 	bcs.w	8020d80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8020be8:	9b00      	ldr	r3, [sp, #0]
 8020bea:	4631      	mov	r1, r6
 8020bec:	18c3      	adds	r3, r0, r3
 8020bee:	9301      	str	r3, [sp, #4]
 8020bf0:	9b01      	ldr	r3, [sp, #4]
 8020bf2:	4298      	cmp	r0, r3
 8020bf4:	d24f      	bcs.n	8020c96 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8020bf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020bfa:	2a00      	cmp	r2, #0
 8020bfc:	d048      	beq.n	8020c90 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8020bfe:	fb0a f202 	mul.w	r2, sl, r2
 8020c02:	1c53      	adds	r3, r2, #1
 8020c04:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020c08:	121b      	asrs	r3, r3, #8
 8020c0a:	d041      	beq.n	8020c90 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8020c0c:	8802      	ldrh	r2, [r0, #0]
 8020c0e:	b29e      	uxth	r6, r3
 8020c10:	f8b4 c000 	ldrh.w	ip, [r4]
 8020c14:	43db      	mvns	r3, r3
 8020c16:	1215      	asrs	r5, r2, #8
 8020c18:	b2db      	uxtb	r3, r3
 8020c1a:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020c1e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8020c22:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8020c26:	fb15 f503 	smulbb	r5, r5, r3
 8020c2a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8020c2e:	00d2      	lsls	r2, r2, #3
 8020c30:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8020c34:	fb07 5706 	mla	r7, r7, r6, r5
 8020c38:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8020c3c:	b2d2      	uxtb	r2, r2
 8020c3e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020c42:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8020c46:	fb1e fe03 	smulbb	lr, lr, r3
 8020c4a:	b2bf      	uxth	r7, r7
 8020c4c:	fb12 f203 	smulbb	r2, r2, r3
 8020c50:	fa5f fc8c 	uxtb.w	ip, ip
 8020c54:	fb05 e506 	mla	r5, r5, r6, lr
 8020c58:	f107 0e01 	add.w	lr, r7, #1
 8020c5c:	fb0c 2c06 	mla	ip, ip, r6, r2
 8020c60:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8020c64:	fa1f fc8c 	uxth.w	ip, ip
 8020c68:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8020c6c:	b2ad      	uxth	r5, r5
 8020c6e:	f10c 0701 	add.w	r7, ip, #1
 8020c72:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020c76:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020c7a:	ea47 070e 	orr.w	r7, r7, lr
 8020c7e:	f105 0e01 	add.w	lr, r5, #1
 8020c82:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8020c86:	096d      	lsrs	r5, r5, #5
 8020c88:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020c8c:	432f      	orrs	r7, r5
 8020c8e:	8007      	strh	r7, [r0, #0]
 8020c90:	3002      	adds	r0, #2
 8020c92:	3402      	adds	r4, #2
 8020c94:	e7ac      	b.n	8020bf0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8020c96:	f8b9 3000 	ldrh.w	r3, [r9]
 8020c9a:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8020c9e:	eba3 0308 	sub.w	r3, r3, r8
 8020ca2:	eba6 0608 	sub.w	r6, r6, r8
 8020ca6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020caa:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8020cae:	440e      	add	r6, r1
 8020cb0:	e797      	b.n	8020be2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8020cb2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8020cb6:	42a8      	cmp	r0, r5
 8020cb8:	d262      	bcs.n	8020d80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8020cba:	9b00      	ldr	r3, [sp, #0]
 8020cbc:	4631      	mov	r1, r6
 8020cbe:	eb00 0b03 	add.w	fp, r0, r3
 8020cc2:	4558      	cmp	r0, fp
 8020cc4:	d24e      	bcs.n	8020d64 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8020cc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020cca:	b12b      	cbz	r3, 8020cd8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8020ccc:	2bff      	cmp	r3, #255	@ 0xff
 8020cce:	f8b4 e000 	ldrh.w	lr, [r4]
 8020cd2:	d104      	bne.n	8020cde <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8020cd4:	f8a0 e000 	strh.w	lr, [r0]
 8020cd8:	3002      	adds	r0, #2
 8020cda:	3402      	adds	r4, #2
 8020cdc:	e7f1      	b.n	8020cc2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8020cde:	8802      	ldrh	r2, [r0, #0]
 8020ce0:	b29f      	uxth	r7, r3
 8020ce2:	43db      	mvns	r3, r3
 8020ce4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020ce8:	1216      	asrs	r6, r2, #8
 8020cea:	b2db      	uxtb	r3, r3
 8020cec:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020cf0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8020cf4:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8020cf8:	00d2      	lsls	r2, r2, #3
 8020cfa:	fb16 f603 	smulbb	r6, r6, r3
 8020cfe:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8020d02:	b2d2      	uxtb	r2, r2
 8020d04:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020d08:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8020d0c:	fb1a fa03 	smulbb	sl, sl, r3
 8020d10:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020d14:	fa1f fc8c 	uxth.w	ip, ip
 8020d18:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8020d1c:	fb12 f303 	smulbb	r3, r2, r3
 8020d20:	fa5f fe8e 	uxtb.w	lr, lr
 8020d24:	fb06 a607 	mla	r6, r6, r7, sl
 8020d28:	f10c 0201 	add.w	r2, ip, #1
 8020d2c:	fb0e 3307 	mla	r3, lr, r7, r3
 8020d30:	b2b6      	uxth	r6, r6
 8020d32:	b29b      	uxth	r3, r3
 8020d34:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020d38:	f106 0a01 	add.w	sl, r6, #1
 8020d3c:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8020d40:	f103 0c01 	add.w	ip, r3, #1
 8020d44:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8020d48:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020d4c:	0976      	lsrs	r6, r6, #5
 8020d4e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020d52:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8020d56:	ea4c 0c02 	orr.w	ip, ip, r2
 8020d5a:	ea4c 0c06 	orr.w	ip, ip, r6
 8020d5e:	f8a0 c000 	strh.w	ip, [r0]
 8020d62:	e7b9      	b.n	8020cd8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8020d64:	f8b9 3000 	ldrh.w	r3, [r9]
 8020d68:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8020d6c:	eba3 0308 	sub.w	r3, r3, r8
 8020d70:	eba6 0608 	sub.w	r6, r6, r8
 8020d74:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020d78:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8020d7c:	440e      	add	r6, r1
 8020d7e:	e79a      	b.n	8020cb6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8020d80:	4b03      	ldr	r3, [pc, #12]	@ (8020d90 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8020d82:	6818      	ldr	r0, [r3, #0]
 8020d84:	6803      	ldr	r3, [r0, #0]
 8020d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020d88:	4798      	blx	r3
 8020d8a:	b007      	add	sp, #28
 8020d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d90:	200279d8 	.word	0x200279d8
 8020d94:	200279d2 	.word	0x200279d2

08020d98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8020d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d9c:	b089      	sub	sp, #36	@ 0x24
 8020d9e:	4682      	mov	sl, r0
 8020da0:	460f      	mov	r7, r1
 8020da2:	4691      	mov	r9, r2
 8020da4:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8020da8:	4698      	mov	r8, r3
 8020daa:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020dac:	2e00      	cmp	r6, #0
 8020dae:	d03d      	beq.n	8020e2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020db0:	4608      	mov	r0, r1
 8020db2:	f7fa fe43 	bl	801ba3c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020db6:	4605      	mov	r5, r0
 8020db8:	4638      	mov	r0, r7
 8020dba:	f7fa fe73 	bl	801baa4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020dbe:	f8ad 000e 	strh.w	r0, [sp, #14]
 8020dc2:	4638      	mov	r0, r7
 8020dc4:	f8ad 9008 	strh.w	r9, [sp, #8]
 8020dc8:	f8ad 500c 	strh.w	r5, [sp, #12]
 8020dcc:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020dd0:	f7fa ff26 	bl	801bc20 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020dd4:	4605      	mov	r5, r0
 8020dd6:	4638      	mov	r0, r7
 8020dd8:	f7fa ff52 	bl	801bc80 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8020ddc:	4681      	mov	r9, r0
 8020dde:	4638      	mov	r0, r7
 8020de0:	f7fa ffa2 	bl	801bd28 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020de4:	280b      	cmp	r0, #11
 8020de6:	d821      	bhi.n	8020e2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020de8:	e8df f000 	tbb	[pc, r0]
 8020dec:	2006aebe 	.word	0x2006aebe
 8020df0:	20202020 	.word	0x20202020
 8020df4:	b5202020 	.word	0xb5202020
 8020df8:	4bb0      	ldr	r3, [pc, #704]	@ (80210bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 8020dfa:	6818      	ldr	r0, [r3, #0]
 8020dfc:	6803      	ldr	r3, [r0, #0]
 8020dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020e00:	4798      	blx	r3
 8020e02:	2eff      	cmp	r6, #255	@ 0xff
 8020e04:	d101      	bne.n	8020e0a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 8020e06:	0683      	lsls	r3, r0, #26
 8020e08:	d506      	bpl.n	8020e18 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x80>
 8020e0a:	4633      	mov	r3, r6
 8020e0c:	4622      	mov	r2, r4
 8020e0e:	a902      	add	r1, sp, #8
 8020e10:	4628      	mov	r0, r5
 8020e12:	f7ff f907 	bl	8020024 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020e16:	e009      	b.n	8020e2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020e18:	4638      	mov	r0, r7
 8020e1a:	f7fa fec9 	bl	801bbb0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8020e1e:	b940      	cbnz	r0, 8020e32 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8020e20:	4623      	mov	r3, r4
 8020e22:	aa02      	add	r2, sp, #8
 8020e24:	4629      	mov	r1, r5
 8020e26:	4650      	mov	r0, sl
 8020e28:	f7ff f9e2 	bl	80201f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8020e2c:	b009      	add	sp, #36	@ 0x24
 8020e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e32:	f10d 0818 	add.w	r8, sp, #24
 8020e36:	4639      	mov	r1, r7
 8020e38:	af04      	add	r7, sp, #16
 8020e3a:	4640      	mov	r0, r8
 8020e3c:	f7fa fe66 	bl	801bb0c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8020e40:	e898 0003 	ldmia.w	r8, {r0, r1}
 8020e44:	e887 0003 	stmia.w	r7, {r0, r1}
 8020e48:	4638      	mov	r0, r7
 8020e4a:	4621      	mov	r1, r4
 8020e4c:	f7f0 fed8 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 8020e50:	4638      	mov	r0, r7
 8020e52:	f7f0 ff18 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020e56:	2800      	cmp	r0, #0
 8020e58:	d1d7      	bne.n	8020e0a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 8020e5a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020e5e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8020e62:	4293      	cmp	r3, r2
 8020e64:	dd12      	ble.n	8020e8c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf4>
 8020e66:	1a9b      	subs	r3, r3, r2
 8020e68:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020e6c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020e70:	f8ad 0018 	strh.w	r0, [sp, #24]
 8020e74:	4628      	mov	r0, r5
 8020e76:	f8ad 201a 	strh.w	r2, [sp, #26]
 8020e7a:	4642      	mov	r2, r8
 8020e7c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020e80:	a902      	add	r1, sp, #8
 8020e82:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020e86:	4633      	mov	r3, r6
 8020e88:	f7ff f8cc 	bl	8020024 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020e8c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8020e90:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020e94:	4293      	cmp	r3, r2
 8020e96:	dd12      	ble.n	8020ebe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x126>
 8020e98:	1a9b      	subs	r3, r3, r2
 8020e9a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8020e9e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8020ea2:	f8ad 2018 	strh.w	r2, [sp, #24]
 8020ea6:	4642      	mov	r2, r8
 8020ea8:	f8ad 001a 	strh.w	r0, [sp, #26]
 8020eac:	4628      	mov	r0, r5
 8020eae:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020eb2:	23ff      	movs	r3, #255	@ 0xff
 8020eb4:	f8ad 101e 	strh.w	r1, [sp, #30]
 8020eb8:	a902      	add	r1, sp, #8
 8020eba:	f7ff f8b3 	bl	8020024 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020ebe:	463b      	mov	r3, r7
 8020ec0:	aa02      	add	r2, sp, #8
 8020ec2:	4629      	mov	r1, r5
 8020ec4:	4650      	mov	r0, sl
 8020ec6:	f7ff f993 	bl	80201f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8020eca:	88a2      	ldrh	r2, [r4, #4]
 8020ecc:	8823      	ldrh	r3, [r4, #0]
 8020ece:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8020ed2:	4413      	add	r3, r2
 8020ed4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020ed8:	440a      	add	r2, r1
 8020eda:	b29b      	uxth	r3, r3
 8020edc:	b292      	uxth	r2, r2
 8020ede:	b218      	sxth	r0, r3
 8020ee0:	b211      	sxth	r1, r2
 8020ee2:	4288      	cmp	r0, r1
 8020ee4:	dd12      	ble.n	8020f0c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8020ee6:	1a9b      	subs	r3, r3, r2
 8020ee8:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8020eec:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8020ef0:	4642      	mov	r2, r8
 8020ef2:	f8ad 1018 	strh.w	r1, [sp, #24]
 8020ef6:	a902      	add	r1, sp, #8
 8020ef8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020efc:	23ff      	movs	r3, #255	@ 0xff
 8020efe:	f8ad 001e 	strh.w	r0, [sp, #30]
 8020f02:	4628      	mov	r0, r5
 8020f04:	f8ad 601a 	strh.w	r6, [sp, #26]
 8020f08:	f7ff f88c 	bl	8020024 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020f0c:	88e2      	ldrh	r2, [r4, #6]
 8020f0e:	8863      	ldrh	r3, [r4, #2]
 8020f10:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8020f14:	4413      	add	r3, r2
 8020f16:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8020f1a:	440a      	add	r2, r1
 8020f1c:	b29b      	uxth	r3, r3
 8020f1e:	b292      	uxth	r2, r2
 8020f20:	b218      	sxth	r0, r3
 8020f22:	b211      	sxth	r1, r2
 8020f24:	4288      	cmp	r0, r1
 8020f26:	dd81      	ble.n	8020e2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020f28:	1a9b      	subs	r3, r3, r2
 8020f2a:	f9b4 6000 	ldrsh.w	r6, [r4]
 8020f2e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8020f32:	4642      	mov	r2, r8
 8020f34:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020f38:	23ff      	movs	r3, #255	@ 0xff
 8020f3a:	f8ad 6018 	strh.w	r6, [sp, #24]
 8020f3e:	f8ad 101a 	strh.w	r1, [sp, #26]
 8020f42:	f8ad 001c 	strh.w	r0, [sp, #28]
 8020f46:	e762      	b.n	8020e0e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8020f48:	4633      	mov	r3, r6
 8020f4a:	4622      	mov	r2, r4
 8020f4c:	a902      	add	r1, sp, #8
 8020f4e:	4628      	mov	r0, r5
 8020f50:	f7ff f9be 	bl	80202d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8020f54:	e76a      	b.n	8020e2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020f56:	e9cd 4600 	strd	r4, r6, [sp]
 8020f5a:	ab02      	add	r3, sp, #8
 8020f5c:	464a      	mov	r2, r9
 8020f5e:	4629      	mov	r1, r5
 8020f60:	4650      	mov	r0, sl
 8020f62:	f7ff fd95 	bl	8020a90 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8020f66:	e761      	b.n	8020e2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020f68:	4638      	mov	r0, r7
 8020f6a:	f7fa fe21 	bl	801bbb0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8020f6e:	b950      	cbnz	r0, 8020f86 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ee>
 8020f70:	f8da 3000 	ldr.w	r3, [sl]
 8020f74:	aa02      	add	r2, sp, #8
 8020f76:	4629      	mov	r1, r5
 8020f78:	e9cd 6000 	strd	r6, r0, [sp]
 8020f7c:	4650      	mov	r0, sl
 8020f7e:	68de      	ldr	r6, [r3, #12]
 8020f80:	4623      	mov	r3, r4
 8020f82:	47b0      	blx	r6
 8020f84:	e752      	b.n	8020e2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020f86:	f10d 0818 	add.w	r8, sp, #24
 8020f8a:	4639      	mov	r1, r7
 8020f8c:	af04      	add	r7, sp, #16
 8020f8e:	4640      	mov	r0, r8
 8020f90:	f7fa fdbc 	bl	801bb0c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8020f94:	e898 0003 	ldmia.w	r8, {r0, r1}
 8020f98:	e887 0003 	stmia.w	r7, {r0, r1}
 8020f9c:	4638      	mov	r0, r7
 8020f9e:	4621      	mov	r1, r4
 8020fa0:	f7f0 fe2e 	bl	8011c00 <_ZN8touchgfx4RectaNERKS0_>
 8020fa4:	4638      	mov	r0, r7
 8020fa6:	f7f0 fe6e 	bl	8011c86 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020faa:	b138      	cbz	r0, 8020fbc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8020fac:	4623      	mov	r3, r4
 8020fae:	9600      	str	r6, [sp, #0]
 8020fb0:	aa02      	add	r2, sp, #8
 8020fb2:	4649      	mov	r1, r9
 8020fb4:	4628      	mov	r0, r5
 8020fb6:	f7ff fdc9 	bl	8020b4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020fba:	e737      	b.n	8020e2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020fbc:	f8da 3000 	ldr.w	r3, [sl]
 8020fc0:	aa02      	add	r2, sp, #8
 8020fc2:	4629      	mov	r1, r5
 8020fc4:	e9cd 6000 	strd	r6, r0, [sp]
 8020fc8:	4650      	mov	r0, sl
 8020fca:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8020fce:	463b      	mov	r3, r7
 8020fd0:	47d8      	blx	fp
 8020fd2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020fd6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8020fda:	4293      	cmp	r3, r2
 8020fdc:	dd13      	ble.n	8021006 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26e>
 8020fde:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020fe2:	1a9b      	subs	r3, r3, r2
 8020fe4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020fe8:	f8ad 0018 	strh.w	r0, [sp, #24]
 8020fec:	4628      	mov	r0, r5
 8020fee:	f8ad 201a 	strh.w	r2, [sp, #26]
 8020ff2:	aa02      	add	r2, sp, #8
 8020ff4:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020ff8:	4649      	mov	r1, r9
 8020ffa:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020ffe:	4643      	mov	r3, r8
 8021000:	9600      	str	r6, [sp, #0]
 8021002:	f7ff fda3 	bl	8020b4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021006:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 802100a:	f9b4 2000 	ldrsh.w	r2, [r4]
 802100e:	4293      	cmp	r3, r2
 8021010:	dd13      	ble.n	802103a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a2>
 8021012:	1a9b      	subs	r3, r3, r2
 8021014:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021018:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802101c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021020:	aa02      	add	r2, sp, #8
 8021022:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021026:	4628      	mov	r0, r5
 8021028:	f8ad 301c 	strh.w	r3, [sp, #28]
 802102c:	4643      	mov	r3, r8
 802102e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021032:	4649      	mov	r1, r9
 8021034:	9600      	str	r6, [sp, #0]
 8021036:	f7ff fd89 	bl	8020b4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802103a:	88a2      	ldrh	r2, [r4, #4]
 802103c:	8823      	ldrh	r3, [r4, #0]
 802103e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021042:	4413      	add	r3, r2
 8021044:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021048:	440a      	add	r2, r1
 802104a:	b29b      	uxth	r3, r3
 802104c:	b292      	uxth	r2, r2
 802104e:	b218      	sxth	r0, r3
 8021050:	b211      	sxth	r1, r2
 8021052:	4288      	cmp	r0, r1
 8021054:	dd13      	ble.n	802107e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e6>
 8021056:	1a9b      	subs	r3, r3, r2
 8021058:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 802105c:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8021060:	aa02      	add	r2, sp, #8
 8021062:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021066:	4649      	mov	r1, r9
 8021068:	f8ad 301c 	strh.w	r3, [sp, #28]
 802106c:	4643      	mov	r3, r8
 802106e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021072:	4628      	mov	r0, r5
 8021074:	9600      	str	r6, [sp, #0]
 8021076:	f8ad 701a 	strh.w	r7, [sp, #26]
 802107a:	f7ff fd67 	bl	8020b4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802107e:	88e2      	ldrh	r2, [r4, #6]
 8021080:	8863      	ldrh	r3, [r4, #2]
 8021082:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021086:	4413      	add	r3, r2
 8021088:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802108c:	440a      	add	r2, r1
 802108e:	b29b      	uxth	r3, r3
 8021090:	b292      	uxth	r2, r2
 8021092:	b218      	sxth	r0, r3
 8021094:	b211      	sxth	r1, r2
 8021096:	4288      	cmp	r0, r1
 8021098:	f77f aec8 	ble.w	8020e2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802109c:	f9b4 7000 	ldrsh.w	r7, [r4]
 80210a0:	1a9b      	subs	r3, r3, r2
 80210a2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80210a6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80210aa:	4643      	mov	r3, r8
 80210ac:	f8ad 7018 	strh.w	r7, [sp, #24]
 80210b0:	f8ad 101a 	strh.w	r1, [sp, #26]
 80210b4:	f8ad 001c 	strh.w	r0, [sp, #28]
 80210b8:	9600      	str	r6, [sp, #0]
 80210ba:	e779      	b.n	8020fb0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x218>
 80210bc:	200279d8 	.word	0x200279d8

080210c0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 80210c0:	b180      	cbz	r0, 80210e4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 80210c2:	2903      	cmp	r1, #3
 80210c4:	d81c      	bhi.n	8021100 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 80210c6:	e8df f001 	tbb	[pc, r1]
 80210ca:	1d02      	.short	0x1d02
 80210cc:	1f08      	.short	0x1f08
 80210ce:	4b10      	ldr	r3, [pc, #64]	@ (8021110 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80210d0:	8818      	ldrh	r0, [r3, #0]
 80210d2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80210d6:	4240      	negs	r0, r0
 80210d8:	4770      	bx	lr
 80210da:	4b0d      	ldr	r3, [pc, #52]	@ (8021110 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80210dc:	8818      	ldrh	r0, [r3, #0]
 80210de:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80210e2:	4770      	bx	lr
 80210e4:	2903      	cmp	r1, #3
 80210e6:	d80b      	bhi.n	8021100 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 80210e8:	a301      	add	r3, pc, #4	@ (adr r3, 80210f0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 80210ea:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80210ee:	bf00      	nop
 80210f0:	08021105 	.word	0x08021105
 80210f4:	080210db 	.word	0x080210db
 80210f8:	08021109 	.word	0x08021109
 80210fc:	080210cf 	.word	0x080210cf
 8021100:	2000      	movs	r0, #0
 8021102:	4770      	bx	lr
 8021104:	2001      	movs	r0, #1
 8021106:	4770      	bx	lr
 8021108:	f04f 30ff 	mov.w	r0, #4294967295
 802110c:	4770      	bx	lr
 802110e:	bf00      	nop
 8021110:	200279d2 	.word	0x200279d2

08021114 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8021114:	b180      	cbz	r0, 8021138 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8021116:	2903      	cmp	r1, #3
 8021118:	d81c      	bhi.n	8021154 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 802111a:	e8df f001 	tbb	[pc, r1]
 802111e:	021d      	.short	0x021d
 8021120:	071f      	.short	0x071f
 8021122:	4b10      	ldr	r3, [pc, #64]	@ (8021164 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8021124:	8818      	ldrh	r0, [r3, #0]
 8021126:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802112a:	4770      	bx	lr
 802112c:	4b0d      	ldr	r3, [pc, #52]	@ (8021164 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 802112e:	8818      	ldrh	r0, [r3, #0]
 8021130:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021134:	4240      	negs	r0, r0
 8021136:	4770      	bx	lr
 8021138:	2903      	cmp	r1, #3
 802113a:	d80b      	bhi.n	8021154 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 802113c:	a301      	add	r3, pc, #4	@ (adr r3, 8021144 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 802113e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021142:	bf00      	nop
 8021144:	08021123 	.word	0x08021123
 8021148:	0802115d 	.word	0x0802115d
 802114c:	0802112d 	.word	0x0802112d
 8021150:	08021159 	.word	0x08021159
 8021154:	2000      	movs	r0, #0
 8021156:	4770      	bx	lr
 8021158:	2001      	movs	r0, #1
 802115a:	4770      	bx	lr
 802115c:	f04f 30ff 	mov.w	r0, #4294967295
 8021160:	4770      	bx	lr
 8021162:	bf00      	nop
 8021164:	200279d2 	.word	0x200279d2

08021168 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802116c:	b099      	sub	sp, #100	@ 0x64
 802116e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021170:	a914      	add	r1, sp, #80	@ 0x50
 8021172:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 8021176:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 802117a:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 802117e:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 8021182:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 8021186:	e881 000c 	stmia.w	r1, {r2, r3}
 802118a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 802118e:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8021192:	9309      	str	r3, [sp, #36]	@ 0x24
 8021194:	f891 900d 	ldrb.w	r9, [r1, #13]
 8021198:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 802119c:	ea4f 1749 	mov.w	r7, r9, lsl #5
 80211a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80211a2:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 80211a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80211a8:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 80211ac:	798f      	ldrb	r7, [r1, #6]
 80211ae:	431f      	orrs	r7, r3
 80211b0:	f000 8195 	beq.w	80214de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80211b4:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80211b8:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 80211bc:	f891 9007 	ldrb.w	r9, [r1, #7]
 80211c0:	ea59 0903 	orrs.w	r9, r9, r3
 80211c4:	f000 818b 	beq.w	80214de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80211c8:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80211cc:	b29b      	uxth	r3, r3
 80211ce:	2d00      	cmp	r5, #0
 80211d0:	f000 812e 	beq.w	8021430 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 80211d4:	1aed      	subs	r5, r5, r3
 80211d6:	b2ad      	uxth	r5, r5
 80211d8:	042b      	lsls	r3, r5, #16
 80211da:	d502      	bpl.n	80211e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80211dc:	1b64      	subs	r4, r4, r5
 80211de:	2500      	movs	r5, #0
 80211e0:	b224      	sxth	r4, r4
 80211e2:	f9b2 1000 	ldrsh.w	r1, [r2]
 80211e6:	a814      	add	r0, sp, #80	@ 0x50
 80211e8:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 80211ec:	428c      	cmp	r4, r1
 80211ee:	b28b      	uxth	r3, r1
 80211f0:	bfbf      	itttt	lt
 80211f2:	18ed      	addlt	r5, r5, r3
 80211f4:	1b2c      	sublt	r4, r5, r4
 80211f6:	b2a5      	uxthlt	r5, r4
 80211f8:	460c      	movlt	r4, r1
 80211fa:	8891      	ldrh	r1, [r2, #4]
 80211fc:	440b      	add	r3, r1
 80211fe:	4621      	mov	r1, r4
 8021200:	b21b      	sxth	r3, r3
 8021202:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021204:	88d3      	ldrh	r3, [r2, #6]
 8021206:	8852      	ldrh	r2, [r2, #2]
 8021208:	4413      	add	r3, r2
 802120a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802120c:	b21b      	sxth	r3, r3
 802120e:	930d      	str	r3, [sp, #52]	@ 0x34
 8021210:	4bbd      	ldr	r3, [pc, #756]	@ (8021508 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8021212:	f893 b000 	ldrb.w	fp, [r3]
 8021216:	f10b 3cff 	add.w	ip, fp, #4294967295
 802121a:	f1dc 0300 	rsbs	r3, ip, #0
 802121e:	eb43 030c 	adc.w	r3, r3, ip
 8021222:	930e      	str	r3, [sp, #56]	@ 0x38
 8021224:	4653      	mov	r3, sl
 8021226:	f7f6 fcf4 	bl	8017c12 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 802122a:	4621      	mov	r1, r4
 802122c:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8021230:	4653      	mov	r3, sl
 8021232:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021234:	a814      	add	r0, sp, #80	@ 0x50
 8021236:	f7f6 fd09 	bl	8017c4c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 802123a:	a918      	add	r1, sp, #96	@ 0x60
 802123c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8021240:	a817      	add	r0, sp, #92	@ 0x5c
 8021242:	f7f6 fe2f 	bl	8017ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8021246:	f1ba 0f00 	cmp.w	sl, #0
 802124a:	f040 80f4 	bne.w	8021436 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 802124e:	f1bb 0f01 	cmp.w	fp, #1
 8021252:	f040 80f8 	bne.w	8021446 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8021256:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021258:	2b00      	cmp	r3, #0
 802125a:	f040 8145 	bne.w	80214e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 802125e:	b2ba      	uxth	r2, r7
 8021260:	b905      	cbnz	r5, 8021264 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8021262:	b16e      	cbz	r6, 8021280 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8021264:	fb06 5302 	mla	r3, r6, r2, r5
 8021268:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 802126a:	4631      	mov	r1, r6
 802126c:	fb08 f303 	mul.w	r3, r8, r3
 8021270:	f003 0607 	and.w	r6, r3, #7
 8021274:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8021278:	9328      	str	r3, [sp, #160]	@ 0xa0
 802127a:	eba9 0301 	sub.w	r3, r9, r1
 802127e:	930a      	str	r3, [sp, #40]	@ 0x28
 8021280:	4651      	mov	r1, sl
 8021282:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8021284:	f7ff ff1c 	bl	80210c0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8021288:	4681      	mov	r9, r0
 802128a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802128c:	f7ff ff42 	bl	8021114 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8021290:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021292:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021294:	4683      	mov	fp, r0
 8021296:	eba3 0a01 	sub.w	sl, r3, r1
 802129a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802129c:	459a      	cmp	sl, r3
 802129e:	bfa8      	it	ge
 80212a0:	469a      	movge	sl, r3
 80212a2:	f1ba 0f00 	cmp.w	sl, #0
 80212a6:	f340 811a 	ble.w	80214de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80212aa:	1b64      	subs	r4, r4, r5
 80212ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80212ae:	1b1c      	subs	r4, r3, r4
 80212b0:	42bc      	cmp	r4, r7
 80212b2:	bfd4      	ite	le
 80212b4:	ebc5 0504 	rsble	r5, r5, r4
 80212b8:	ebc5 0507 	rsbgt	r5, r5, r7
 80212bc:	2d00      	cmp	r5, #0
 80212be:	f340 810e 	ble.w	80214de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80212c2:	1b52      	subs	r2, r2, r5
 80212c4:	fb08 f302 	mul.w	r3, r8, r2
 80212c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80212ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80212cc:	2b00      	cmp	r3, #0
 80212ce:	f040 8116 	bne.w	80214fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 80212d2:	4b8e      	ldr	r3, [pc, #568]	@ (802150c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 80212d4:	6818      	ldr	r0, [r3, #0]
 80212d6:	6803      	ldr	r3, [r0, #0]
 80212d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80212da:	4798      	blx	r3
 80212dc:	2301      	movs	r3, #1
 80212de:	4a8c      	ldr	r2, [pc, #560]	@ (8021510 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 80212e0:	fa03 f308 	lsl.w	r3, r3, r8
 80212e4:	8811      	ldrh	r1, [r2, #0]
 80212e6:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 80212ea:	3b01      	subs	r3, #1
 80212ec:	b2db      	uxtb	r3, r3
 80212ee:	930e      	str	r3, [sp, #56]	@ 0x38
 80212f0:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 80212f4:	fb01 2303 	mla	r3, r1, r3, r2
 80212f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80212fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80212fe:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021300:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8021304:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021306:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021308:	0a19      	lsrs	r1, r3, #8
 802130a:	b2cb      	uxtb	r3, r1
 802130c:	9312      	str	r3, [sp, #72]	@ 0x48
 802130e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021310:	b2db      	uxtb	r3, r3
 8021312:	9311      	str	r3, [sp, #68]	@ 0x44
 8021314:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021316:	095a      	lsrs	r2, r3, #5
 8021318:	4b7e      	ldr	r3, [pc, #504]	@ (8021514 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 802131a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802131e:	400b      	ands	r3, r1
 8021320:	4313      	orrs	r3, r2
 8021322:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8021324:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021328:	4313      	orrs	r3, r2
 802132a:	b29b      	uxth	r3, r3
 802132c:	9310      	str	r3, [sp, #64]	@ 0x40
 802132e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021330:	781a      	ldrb	r2, [r3, #0]
 8021332:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8021336:	fb05 b919 	mls	r9, r5, r9, fp
 802133a:	4132      	asrs	r2, r6
 802133c:	fb03 fb05 	mul.w	fp, r3, r5
 8021340:	930d      	str	r3, [sp, #52]	@ 0x34
 8021342:	b2d2      	uxtb	r2, r2
 8021344:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8021348:	f11a 3aff 	adds.w	sl, sl, #4294967295
 802134c:	f0c0 80f5 	bcc.w	802153a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8021350:	46ae      	mov	lr, r5
 8021352:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 8021356:	f11e 3eff 	adds.w	lr, lr, #4294967295
 802135a:	f0c0 80dd 	bcc.w	8021518 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 802135e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021360:	4013      	ands	r3, r2
 8021362:	d055      	beq.n	8021410 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8021364:	20ff      	movs	r0, #255	@ 0xff
 8021366:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8021368:	fb90 f1f1 	sdiv	r1, r0, r1
 802136c:	434b      	muls	r3, r1
 802136e:	2bfe      	cmp	r3, #254	@ 0xfe
 8021370:	dd03      	ble.n	802137a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 8021372:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8021374:	4281      	cmp	r1, r0
 8021376:	f000 80c4 	beq.w	8021502 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 802137a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802137c:	f8bc 4000 	ldrh.w	r4, [ip]
 8021380:	fb11 f303 	smulbb	r3, r1, r3
 8021384:	1220      	asrs	r0, r4, #8
 8021386:	b29b      	uxth	r3, r3
 8021388:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802138c:	1c59      	adds	r1, r3, #1
 802138e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8021392:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021396:	10e1      	asrs	r1, r4, #3
 8021398:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802139c:	00e4      	lsls	r4, r4, #3
 802139e:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80213a2:	b29f      	uxth	r7, r3
 80213a4:	43db      	mvns	r3, r3
 80213a6:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80213aa:	b2db      	uxtb	r3, r3
 80213ac:	b2e4      	uxtb	r4, r4
 80213ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80213b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80213b2:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80213b6:	fb13 f907 	smulbb	r9, r3, r7
 80213ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213bc:	fb00 9003 	mla	r0, r0, r3, r9
 80213c0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80213c2:	fb13 f907 	smulbb	r9, r3, r7
 80213c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213c8:	b280      	uxth	r0, r0
 80213ca:	fb01 9103 	mla	r1, r1, r3, r9
 80213ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80213d0:	fb13 f707 	smulbb	r7, r3, r7
 80213d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213d6:	b289      	uxth	r1, r1
 80213d8:	fb04 7403 	mla	r4, r4, r3, r7
 80213dc:	1c43      	adds	r3, r0, #1
 80213de:	b2a4      	uxth	r4, r4
 80213e0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80213e4:	f104 0901 	add.w	r9, r4, #1
 80213e8:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 80213ec:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 80213f0:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 80213f4:	ea49 0000 	orr.w	r0, r9, r0
 80213f8:	f101 0901 	add.w	r9, r1, #1
 80213fc:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8021400:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021404:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8021408:	ea40 0009 	orr.w	r0, r0, r9
 802140c:	f8ac 0000 	strh.w	r0, [ip]
 8021410:	4446      	add	r6, r8
 8021412:	b2b6      	uxth	r6, r6
 8021414:	2e07      	cmp	r6, #7
 8021416:	bf89      	itett	hi
 8021418:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 802141a:	fa42 f208 	asrls.w	r2, r2, r8
 802141e:	2600      	movhi	r6, #0
 8021420:	785a      	ldrbhi	r2, [r3, #1]
 8021422:	bf8a      	itet	hi
 8021424:	3301      	addhi	r3, #1
 8021426:	b2d2      	uxtbls	r2, r2
 8021428:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 802142a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802142c:	449c      	add	ip, r3
 802142e:	e792      	b.n	8021356 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8021430:	441c      	add	r4, r3
 8021432:	b224      	sxth	r4, r4
 8021434:	e6d5      	b.n	80211e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8021436:	f1ba 0f01 	cmp.w	sl, #1
 802143a:	f47f af0c 	bne.w	8021256 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802143e:	f1bb 0f01 	cmp.w	fp, #1
 8021442:	f47f af08 	bne.w	8021256 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8021446:	f8df b0c4 	ldr.w	fp, [pc, #196]	@ 802150c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 802144a:	f8db 0000 	ldr.w	r0, [fp]
 802144e:	6803      	ldr	r3, [r0, #0]
 8021450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021452:	4798      	blx	r3
 8021454:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8021458:	465a      	mov	r2, fp
 802145a:	d006      	beq.n	802146a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 802145c:	f1b8 0f04 	cmp.w	r8, #4
 8021460:	d140      	bne.n	80214e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8021462:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021464:	3300      	adds	r3, #0
 8021466:	bf18      	it	ne
 8021468:	2301      	movne	r3, #1
 802146a:	0580      	lsls	r0, r0, #22
 802146c:	d56e      	bpl.n	802154c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 802146e:	f1b8 0f08 	cmp.w	r8, #8
 8021472:	d16b      	bne.n	802154c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8021474:	2b00      	cmp	r3, #0
 8021476:	bf0c      	ite	eq
 8021478:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 802147c:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8021480:	2d00      	cmp	r5, #0
 8021482:	f47f aee8 	bne.w	8021256 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8021486:	2e00      	cmp	r6, #0
 8021488:	f47f aee5 	bne.w	8021256 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802148c:	19e3      	adds	r3, r4, r7
 802148e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8021490:	4283      	cmp	r3, r0
 8021492:	f73f aee0 	bgt.w	8021256 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8021496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021498:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802149a:	444b      	add	r3, r9
 802149c:	4283      	cmp	r3, r0
 802149e:	f73f aeda 	bgt.w	8021256 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80214a2:	b2bf      	uxth	r7, r7
 80214a4:	f1b8 0f08 	cmp.w	r8, #8
 80214a8:	6810      	ldr	r0, [r2, #0]
 80214aa:	f04f 0500 	mov.w	r5, #0
 80214ae:	bf18      	it	ne
 80214b0:	3701      	addne	r7, #1
 80214b2:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 80214b6:	6804      	ldr	r4, [r0, #0]
 80214b8:	bf18      	it	ne
 80214ba:	f027 0701 	bicne.w	r7, r7, #1
 80214be:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80214c2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80214c6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80214c8:	bf18      	it	ne
 80214ca:	b2bf      	uxthne	r7, r7
 80214cc:	9104      	str	r1, [sp, #16]
 80214ce:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80214d0:	e9cd 7900 	strd	r7, r9, [sp]
 80214d4:	e9cd 7102 	strd	r7, r1, [sp, #8]
 80214d8:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80214da:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 80214dc:	47a0      	blx	r4
 80214de:	b019      	add	sp, #100	@ 0x64
 80214e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214e4:	2300      	movs	r3, #0
 80214e6:	e7c0      	b.n	802146a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80214e8:	2208      	movs	r2, #8
 80214ea:	fb92 f3f8 	sdiv	r3, r2, r8
 80214ee:	1e5a      	subs	r2, r3, #1
 80214f0:	443a      	add	r2, r7
 80214f2:	fb92 f2f3 	sdiv	r2, r2, r3
 80214f6:	fb12 f203 	smulbb	r2, r2, r3
 80214fa:	b292      	uxth	r2, r2
 80214fc:	e6b0      	b.n	8021260 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 80214fe:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8021500:	e6ec      	b.n	80212dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8021502:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021504:	e782      	b.n	802140c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8021506:	bf00      	nop
 8021508:	200279d0 	.word	0x200279d0
 802150c:	200279d8 	.word	0x200279d8
 8021510:	200279d2 	.word	0x200279d2
 8021514:	00fff800 	.word	0x00fff800
 8021518:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802151a:	b153      	cbz	r3, 8021532 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 802151c:	441e      	add	r6, r3
 802151e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021520:	b2b6      	uxth	r6, r6
 8021522:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 8021526:	f006 0607 	and.w	r6, r6, #7
 802152a:	781a      	ldrb	r2, [r3, #0]
 802152c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802152e:	4132      	asrs	r2, r6
 8021530:	b2d2      	uxtb	r2, r2
 8021532:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021534:	445b      	add	r3, fp
 8021536:	930a      	str	r3, [sp, #40]	@ 0x28
 8021538:	e706      	b.n	8021348 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 802153a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802153c:	2b00      	cmp	r3, #0
 802153e:	d1ce      	bne.n	80214de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021540:	4b05      	ldr	r3, [pc, #20]	@ (8021558 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 8021542:	6818      	ldr	r0, [r3, #0]
 8021544:	6803      	ldr	r3, [r0, #0]
 8021546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021548:	4798      	blx	r3
 802154a:	e7c8      	b.n	80214de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 802154c:	2b00      	cmp	r3, #0
 802154e:	f43f ae82 	beq.w	8021256 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8021552:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8021556:	e793      	b.n	8021480 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8021558:	200279d8 	.word	0x200279d8

0802155c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 802155c:	b538      	push	{r3, r4, r5, lr}
 802155e:	4c15      	ldr	r4, [pc, #84]	@ (80215b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8021560:	4605      	mov	r5, r0
 8021562:	7823      	ldrb	r3, [r4, #0]
 8021564:	f3bf 8f5b 	dmb	ish
 8021568:	07da      	lsls	r2, r3, #31
 802156a:	d40b      	bmi.n	8021584 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 802156c:	4620      	mov	r0, r4
 802156e:	f008 fc26 	bl	8029dbe <__cxa_guard_acquire>
 8021572:	b138      	cbz	r0, 8021584 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021574:	4620      	mov	r0, r4
 8021576:	f008 fc2e 	bl	8029dd6 <__cxa_guard_release>
 802157a:	4a0f      	ldr	r2, [pc, #60]	@ (80215b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 802157c:	490f      	ldr	r1, [pc, #60]	@ (80215bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 802157e:	4810      	ldr	r0, [pc, #64]	@ (80215c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8021580:	f008 fc16 	bl	8029db0 <__aeabi_atexit>
 8021584:	4c0f      	ldr	r4, [pc, #60]	@ (80215c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8021586:	7823      	ldrb	r3, [r4, #0]
 8021588:	f3bf 8f5b 	dmb	ish
 802158c:	07db      	lsls	r3, r3, #31
 802158e:	d40b      	bmi.n	80215a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021590:	4620      	mov	r0, r4
 8021592:	f008 fc14 	bl	8029dbe <__cxa_guard_acquire>
 8021596:	b138      	cbz	r0, 80215a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021598:	4620      	mov	r0, r4
 802159a:	f008 fc1c 	bl	8029dd6 <__cxa_guard_release>
 802159e:	4a06      	ldr	r2, [pc, #24]	@ (80215b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80215a0:	4909      	ldr	r1, [pc, #36]	@ (80215c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80215a2:	480a      	ldr	r0, [pc, #40]	@ (80215cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80215a4:	f008 fc04 	bl	8029db0 <__aeabi_atexit>
 80215a8:	4b05      	ldr	r3, [pc, #20]	@ (80215c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80215aa:	616b      	str	r3, [r5, #20]
 80215ac:	4b07      	ldr	r3, [pc, #28]	@ (80215cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80215ae:	61ab      	str	r3, [r5, #24]
 80215b0:	bd38      	pop	{r3, r4, r5, pc}
 80215b2:	bf00      	nop
 80215b4:	20027ab8 	.word	0x20027ab8
 80215b8:	20000000 	.word	0x20000000
 80215bc:	0801e33f 	.word	0x0801e33f
 80215c0:	200000bc 	.word	0x200000bc
 80215c4:	20027abc 	.word	0x20027abc
 80215c8:	0801e33d 	.word	0x0801e33d
 80215cc:	200000c0 	.word	0x200000c0

080215d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 80215d0:	b538      	push	{r3, r4, r5, lr}
 80215d2:	4c15      	ldr	r4, [pc, #84]	@ (8021628 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80215d4:	4605      	mov	r5, r0
 80215d6:	7823      	ldrb	r3, [r4, #0]
 80215d8:	f3bf 8f5b 	dmb	ish
 80215dc:	07da      	lsls	r2, r3, #31
 80215de:	d40b      	bmi.n	80215f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80215e0:	4620      	mov	r0, r4
 80215e2:	f008 fbec 	bl	8029dbe <__cxa_guard_acquire>
 80215e6:	b138      	cbz	r0, 80215f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80215e8:	4620      	mov	r0, r4
 80215ea:	f008 fbf4 	bl	8029dd6 <__cxa_guard_release>
 80215ee:	4a0f      	ldr	r2, [pc, #60]	@ (802162c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80215f0:	490f      	ldr	r1, [pc, #60]	@ (8021630 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80215f2:	4810      	ldr	r0, [pc, #64]	@ (8021634 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80215f4:	f008 fbdc 	bl	8029db0 <__aeabi_atexit>
 80215f8:	4c0f      	ldr	r4, [pc, #60]	@ (8021638 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80215fa:	7823      	ldrb	r3, [r4, #0]
 80215fc:	f3bf 8f5b 	dmb	ish
 8021600:	07db      	lsls	r3, r3, #31
 8021602:	d40b      	bmi.n	802161c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8021604:	4620      	mov	r0, r4
 8021606:	f008 fbda 	bl	8029dbe <__cxa_guard_acquire>
 802160a:	b138      	cbz	r0, 802161c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 802160c:	4620      	mov	r0, r4
 802160e:	f008 fbe2 	bl	8029dd6 <__cxa_guard_release>
 8021612:	4a06      	ldr	r2, [pc, #24]	@ (802162c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8021614:	4909      	ldr	r1, [pc, #36]	@ (802163c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8021616:	480a      	ldr	r0, [pc, #40]	@ (8021640 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8021618:	f008 fbca 	bl	8029db0 <__aeabi_atexit>
 802161c:	4b05      	ldr	r3, [pc, #20]	@ (8021634 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802161e:	60eb      	str	r3, [r5, #12]
 8021620:	4b07      	ldr	r3, [pc, #28]	@ (8021640 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8021622:	612b      	str	r3, [r5, #16]
 8021624:	bd38      	pop	{r3, r4, r5, pc}
 8021626:	bf00      	nop
 8021628:	20027a90 	.word	0x20027a90
 802162c:	20000000 	.word	0x20000000
 8021630:	0801e343 	.word	0x0801e343
 8021634:	20000094 	.word	0x20000094
 8021638:	20027a94 	.word	0x20027a94
 802163c:	0801e341 	.word	0x0801e341
 8021640:	20000098 	.word	0x20000098

08021644 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8021644:	b510      	push	{r4, lr}
 8021646:	4604      	mov	r4, r0
 8021648:	f7ff ff88 	bl	802155c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 802164c:	4620      	mov	r0, r4
 802164e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021652:	f7ff bfbd 	b.w	80215d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08021658 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8021658:	b538      	push	{r3, r4, r5, lr}
 802165a:	4c15      	ldr	r4, [pc, #84]	@ (80216b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 802165c:	4605      	mov	r5, r0
 802165e:	7823      	ldrb	r3, [r4, #0]
 8021660:	f3bf 8f5b 	dmb	ish
 8021664:	07da      	lsls	r2, r3, #31
 8021666:	d40b      	bmi.n	8021680 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021668:	4620      	mov	r0, r4
 802166a:	f008 fba8 	bl	8029dbe <__cxa_guard_acquire>
 802166e:	b138      	cbz	r0, 8021680 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021670:	4620      	mov	r0, r4
 8021672:	f008 fbb0 	bl	8029dd6 <__cxa_guard_release>
 8021676:	4a0f      	ldr	r2, [pc, #60]	@ (80216b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021678:	490f      	ldr	r1, [pc, #60]	@ (80216b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802167a:	4810      	ldr	r0, [pc, #64]	@ (80216bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802167c:	f008 fb98 	bl	8029db0 <__aeabi_atexit>
 8021680:	4c0f      	ldr	r4, [pc, #60]	@ (80216c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8021682:	7823      	ldrb	r3, [r4, #0]
 8021684:	f3bf 8f5b 	dmb	ish
 8021688:	07db      	lsls	r3, r3, #31
 802168a:	d40b      	bmi.n	80216a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 802168c:	4620      	mov	r0, r4
 802168e:	f008 fb96 	bl	8029dbe <__cxa_guard_acquire>
 8021692:	b138      	cbz	r0, 80216a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021694:	4620      	mov	r0, r4
 8021696:	f008 fb9e 	bl	8029dd6 <__cxa_guard_release>
 802169a:	4a06      	ldr	r2, [pc, #24]	@ (80216b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802169c:	4909      	ldr	r1, [pc, #36]	@ (80216c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802169e:	480a      	ldr	r0, [pc, #40]	@ (80216c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80216a0:	f008 fb86 	bl	8029db0 <__aeabi_atexit>
 80216a4:	4b05      	ldr	r3, [pc, #20]	@ (80216bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80216a6:	626b      	str	r3, [r5, #36]	@ 0x24
 80216a8:	4b07      	ldr	r3, [pc, #28]	@ (80216c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80216aa:	62ab      	str	r3, [r5, #40]	@ 0x28
 80216ac:	bd38      	pop	{r3, r4, r5, pc}
 80216ae:	bf00      	nop
 80216b0:	20027ac0 	.word	0x20027ac0
 80216b4:	20000000 	.word	0x20000000
 80216b8:	0801e337 	.word	0x0801e337
 80216bc:	200000c4 	.word	0x200000c4
 80216c0:	20027ac4 	.word	0x20027ac4
 80216c4:	0801e335 	.word	0x0801e335
 80216c8:	200000c8 	.word	0x200000c8

080216cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80216cc:	b538      	push	{r3, r4, r5, lr}
 80216ce:	4c15      	ldr	r4, [pc, #84]	@ (8021724 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80216d0:	4605      	mov	r5, r0
 80216d2:	7823      	ldrb	r3, [r4, #0]
 80216d4:	f3bf 8f5b 	dmb	ish
 80216d8:	07da      	lsls	r2, r3, #31
 80216da:	d40b      	bmi.n	80216f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80216dc:	4620      	mov	r0, r4
 80216de:	f008 fb6e 	bl	8029dbe <__cxa_guard_acquire>
 80216e2:	b138      	cbz	r0, 80216f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80216e4:	4620      	mov	r0, r4
 80216e6:	f008 fb76 	bl	8029dd6 <__cxa_guard_release>
 80216ea:	4a0f      	ldr	r2, [pc, #60]	@ (8021728 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80216ec:	490f      	ldr	r1, [pc, #60]	@ (802172c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80216ee:	4810      	ldr	r0, [pc, #64]	@ (8021730 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80216f0:	f008 fb5e 	bl	8029db0 <__aeabi_atexit>
 80216f4:	4c0f      	ldr	r4, [pc, #60]	@ (8021734 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80216f6:	7823      	ldrb	r3, [r4, #0]
 80216f8:	f3bf 8f5b 	dmb	ish
 80216fc:	07db      	lsls	r3, r3, #31
 80216fe:	d40b      	bmi.n	8021718 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021700:	4620      	mov	r0, r4
 8021702:	f008 fb5c 	bl	8029dbe <__cxa_guard_acquire>
 8021706:	b138      	cbz	r0, 8021718 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021708:	4620      	mov	r0, r4
 802170a:	f008 fb64 	bl	8029dd6 <__cxa_guard_release>
 802170e:	4a06      	ldr	r2, [pc, #24]	@ (8021728 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021710:	4909      	ldr	r1, [pc, #36]	@ (8021738 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8021712:	480a      	ldr	r0, [pc, #40]	@ (802173c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021714:	f008 fb4c 	bl	8029db0 <__aeabi_atexit>
 8021718:	4b05      	ldr	r3, [pc, #20]	@ (8021730 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802171a:	61eb      	str	r3, [r5, #28]
 802171c:	4b07      	ldr	r3, [pc, #28]	@ (802173c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802171e:	622b      	str	r3, [r5, #32]
 8021720:	bd38      	pop	{r3, r4, r5, pc}
 8021722:	bf00      	nop
 8021724:	20027a98 	.word	0x20027a98
 8021728:	20000000 	.word	0x20000000
 802172c:	0801e33b 	.word	0x0801e33b
 8021730:	2000009c 	.word	0x2000009c
 8021734:	20027a9c 	.word	0x20027a9c
 8021738:	0801e339 	.word	0x0801e339
 802173c:	200000a0 	.word	0x200000a0

08021740 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8021740:	b510      	push	{r4, lr}
 8021742:	4604      	mov	r4, r0
 8021744:	f7ff ff88 	bl	8021658 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8021748:	4620      	mov	r0, r4
 802174a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802174e:	f7ff bfbd 	b.w	80216cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021754 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021754:	b538      	push	{r3, r4, r5, lr}
 8021756:	4c15      	ldr	r4, [pc, #84]	@ (80217ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8021758:	4605      	mov	r5, r0
 802175a:	7823      	ldrb	r3, [r4, #0]
 802175c:	f3bf 8f5b 	dmb	ish
 8021760:	07da      	lsls	r2, r3, #31
 8021762:	d40b      	bmi.n	802177c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021764:	4620      	mov	r0, r4
 8021766:	f008 fb2a 	bl	8029dbe <__cxa_guard_acquire>
 802176a:	b138      	cbz	r0, 802177c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 802176c:	4620      	mov	r0, r4
 802176e:	f008 fb32 	bl	8029dd6 <__cxa_guard_release>
 8021772:	4a0f      	ldr	r2, [pc, #60]	@ (80217b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021774:	490f      	ldr	r1, [pc, #60]	@ (80217b4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8021776:	4810      	ldr	r0, [pc, #64]	@ (80217b8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021778:	f008 fb1a 	bl	8029db0 <__aeabi_atexit>
 802177c:	4c0f      	ldr	r4, [pc, #60]	@ (80217bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 802177e:	7823      	ldrb	r3, [r4, #0]
 8021780:	f3bf 8f5b 	dmb	ish
 8021784:	07db      	lsls	r3, r3, #31
 8021786:	d40b      	bmi.n	80217a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021788:	4620      	mov	r0, r4
 802178a:	f008 fb18 	bl	8029dbe <__cxa_guard_acquire>
 802178e:	b138      	cbz	r0, 80217a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021790:	4620      	mov	r0, r4
 8021792:	f008 fb20 	bl	8029dd6 <__cxa_guard_release>
 8021796:	4a06      	ldr	r2, [pc, #24]	@ (80217b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021798:	4909      	ldr	r1, [pc, #36]	@ (80217c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802179a:	480a      	ldr	r0, [pc, #40]	@ (80217c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802179c:	f008 fb08 	bl	8029db0 <__aeabi_atexit>
 80217a0:	4b05      	ldr	r3, [pc, #20]	@ (80217b8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80217a2:	636b      	str	r3, [r5, #52]	@ 0x34
 80217a4:	4b07      	ldr	r3, [pc, #28]	@ (80217c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80217a6:	63ab      	str	r3, [r5, #56]	@ 0x38
 80217a8:	bd38      	pop	{r3, r4, r5, pc}
 80217aa:	bf00      	nop
 80217ac:	20027ad0 	.word	0x20027ad0
 80217b0:	20000000 	.word	0x20000000
 80217b4:	0801e32f 	.word	0x0801e32f
 80217b8:	200000d4 	.word	0x200000d4
 80217bc:	20027ad4 	.word	0x20027ad4
 80217c0:	0801e32d 	.word	0x0801e32d
 80217c4:	200000d8 	.word	0x200000d8

080217c8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80217c8:	b538      	push	{r3, r4, r5, lr}
 80217ca:	4c15      	ldr	r4, [pc, #84]	@ (8021820 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80217cc:	4605      	mov	r5, r0
 80217ce:	7823      	ldrb	r3, [r4, #0]
 80217d0:	f3bf 8f5b 	dmb	ish
 80217d4:	07da      	lsls	r2, r3, #31
 80217d6:	d40b      	bmi.n	80217f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80217d8:	4620      	mov	r0, r4
 80217da:	f008 faf0 	bl	8029dbe <__cxa_guard_acquire>
 80217de:	b138      	cbz	r0, 80217f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80217e0:	4620      	mov	r0, r4
 80217e2:	f008 faf8 	bl	8029dd6 <__cxa_guard_release>
 80217e6:	4a0f      	ldr	r2, [pc, #60]	@ (8021824 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80217e8:	490f      	ldr	r1, [pc, #60]	@ (8021828 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80217ea:	4810      	ldr	r0, [pc, #64]	@ (802182c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80217ec:	f008 fae0 	bl	8029db0 <__aeabi_atexit>
 80217f0:	4c0f      	ldr	r4, [pc, #60]	@ (8021830 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80217f2:	7823      	ldrb	r3, [r4, #0]
 80217f4:	f3bf 8f5b 	dmb	ish
 80217f8:	07db      	lsls	r3, r3, #31
 80217fa:	d40b      	bmi.n	8021814 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80217fc:	4620      	mov	r0, r4
 80217fe:	f008 fade 	bl	8029dbe <__cxa_guard_acquire>
 8021802:	b138      	cbz	r0, 8021814 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021804:	4620      	mov	r0, r4
 8021806:	f008 fae6 	bl	8029dd6 <__cxa_guard_release>
 802180a:	4a06      	ldr	r2, [pc, #24]	@ (8021824 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 802180c:	4909      	ldr	r1, [pc, #36]	@ (8021834 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 802180e:	480a      	ldr	r0, [pc, #40]	@ (8021838 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021810:	f008 face 	bl	8029db0 <__aeabi_atexit>
 8021814:	4b05      	ldr	r3, [pc, #20]	@ (802182c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021816:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8021818:	4b07      	ldr	r3, [pc, #28]	@ (8021838 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 802181a:	632b      	str	r3, [r5, #48]	@ 0x30
 802181c:	bd38      	pop	{r3, r4, r5, pc}
 802181e:	bf00      	nop
 8021820:	20027aa0 	.word	0x20027aa0
 8021824:	20000000 	.word	0x20000000
 8021828:	0801e333 	.word	0x0801e333
 802182c:	200000a4 	.word	0x200000a4
 8021830:	20027aa4 	.word	0x20027aa4
 8021834:	0801e331 	.word	0x0801e331
 8021838:	200000a8 	.word	0x200000a8

0802183c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 802183c:	b510      	push	{r4, lr}
 802183e:	4604      	mov	r4, r0
 8021840:	f7ff ff88 	bl	8021754 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8021844:	4620      	mov	r0, r4
 8021846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802184a:	f7ff bfbd 	b.w	80217c8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021850 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8021850:	b538      	push	{r3, r4, r5, lr}
 8021852:	4c15      	ldr	r4, [pc, #84]	@ (80218a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8021854:	4605      	mov	r5, r0
 8021856:	7823      	ldrb	r3, [r4, #0]
 8021858:	f3bf 8f5b 	dmb	ish
 802185c:	07da      	lsls	r2, r3, #31
 802185e:	d40b      	bmi.n	8021878 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021860:	4620      	mov	r0, r4
 8021862:	f008 faac 	bl	8029dbe <__cxa_guard_acquire>
 8021866:	b138      	cbz	r0, 8021878 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021868:	4620      	mov	r0, r4
 802186a:	f008 fab4 	bl	8029dd6 <__cxa_guard_release>
 802186e:	4a0f      	ldr	r2, [pc, #60]	@ (80218ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021870:	490f      	ldr	r1, [pc, #60]	@ (80218b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8021872:	4810      	ldr	r0, [pc, #64]	@ (80218b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021874:	f008 fa9c 	bl	8029db0 <__aeabi_atexit>
 8021878:	4c0f      	ldr	r4, [pc, #60]	@ (80218b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 802187a:	7823      	ldrb	r3, [r4, #0]
 802187c:	f3bf 8f5b 	dmb	ish
 8021880:	07db      	lsls	r3, r3, #31
 8021882:	d40b      	bmi.n	802189c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021884:	4620      	mov	r0, r4
 8021886:	f008 fa9a 	bl	8029dbe <__cxa_guard_acquire>
 802188a:	b138      	cbz	r0, 802189c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 802188c:	4620      	mov	r0, r4
 802188e:	f008 faa2 	bl	8029dd6 <__cxa_guard_release>
 8021892:	4a06      	ldr	r2, [pc, #24]	@ (80218ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021894:	4909      	ldr	r1, [pc, #36]	@ (80218bc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8021896:	480a      	ldr	r0, [pc, #40]	@ (80218c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021898:	f008 fa8a 	bl	8029db0 <__aeabi_atexit>
 802189c:	4b05      	ldr	r3, [pc, #20]	@ (80218b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802189e:	656b      	str	r3, [r5, #84]	@ 0x54
 80218a0:	4b07      	ldr	r3, [pc, #28]	@ (80218c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80218a2:	65ab      	str	r3, [r5, #88]	@ 0x58
 80218a4:	bd38      	pop	{r3, r4, r5, pc}
 80218a6:	bf00      	nop
 80218a8:	20027ad8 	.word	0x20027ad8
 80218ac:	20000000 	.word	0x20000000
 80218b0:	0801e31f 	.word	0x0801e31f
 80218b4:	200000dc 	.word	0x200000dc
 80218b8:	20027adc 	.word	0x20027adc
 80218bc:	0801e31d 	.word	0x0801e31d
 80218c0:	200000e0 	.word	0x200000e0

080218c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80218c4:	b538      	push	{r3, r4, r5, lr}
 80218c6:	4c15      	ldr	r4, [pc, #84]	@ (802191c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80218c8:	4605      	mov	r5, r0
 80218ca:	7823      	ldrb	r3, [r4, #0]
 80218cc:	f3bf 8f5b 	dmb	ish
 80218d0:	07da      	lsls	r2, r3, #31
 80218d2:	d40b      	bmi.n	80218ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80218d4:	4620      	mov	r0, r4
 80218d6:	f008 fa72 	bl	8029dbe <__cxa_guard_acquire>
 80218da:	b138      	cbz	r0, 80218ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80218dc:	4620      	mov	r0, r4
 80218de:	f008 fa7a 	bl	8029dd6 <__cxa_guard_release>
 80218e2:	4a0f      	ldr	r2, [pc, #60]	@ (8021920 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80218e4:	490f      	ldr	r1, [pc, #60]	@ (8021924 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80218e6:	4810      	ldr	r0, [pc, #64]	@ (8021928 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80218e8:	f008 fa62 	bl	8029db0 <__aeabi_atexit>
 80218ec:	4c0f      	ldr	r4, [pc, #60]	@ (802192c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80218ee:	7823      	ldrb	r3, [r4, #0]
 80218f0:	f3bf 8f5b 	dmb	ish
 80218f4:	07db      	lsls	r3, r3, #31
 80218f6:	d40b      	bmi.n	8021910 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80218f8:	4620      	mov	r0, r4
 80218fa:	f008 fa60 	bl	8029dbe <__cxa_guard_acquire>
 80218fe:	b138      	cbz	r0, 8021910 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8021900:	4620      	mov	r0, r4
 8021902:	f008 fa68 	bl	8029dd6 <__cxa_guard_release>
 8021906:	4a06      	ldr	r2, [pc, #24]	@ (8021920 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8021908:	4909      	ldr	r1, [pc, #36]	@ (8021930 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 802190a:	480a      	ldr	r0, [pc, #40]	@ (8021934 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 802190c:	f008 fa50 	bl	8029db0 <__aeabi_atexit>
 8021910:	4b05      	ldr	r3, [pc, #20]	@ (8021928 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8021912:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8021914:	4b07      	ldr	r3, [pc, #28]	@ (8021934 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8021916:	652b      	str	r3, [r5, #80]	@ 0x50
 8021918:	bd38      	pop	{r3, r4, r5, pc}
 802191a:	bf00      	nop
 802191c:	20027ae0 	.word	0x20027ae0
 8021920:	20000000 	.word	0x20000000
 8021924:	0801e323 	.word	0x0801e323
 8021928:	200000e4 	.word	0x200000e4
 802192c:	20027ae4 	.word	0x20027ae4
 8021930:	0801e321 	.word	0x0801e321
 8021934:	200000e8 	.word	0x200000e8

08021938 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8021938:	b538      	push	{r3, r4, r5, lr}
 802193a:	4c15      	ldr	r4, [pc, #84]	@ (8021990 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 802193c:	4605      	mov	r5, r0
 802193e:	7823      	ldrb	r3, [r4, #0]
 8021940:	f3bf 8f5b 	dmb	ish
 8021944:	07da      	lsls	r2, r3, #31
 8021946:	d40b      	bmi.n	8021960 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021948:	4620      	mov	r0, r4
 802194a:	f008 fa38 	bl	8029dbe <__cxa_guard_acquire>
 802194e:	b138      	cbz	r0, 8021960 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021950:	4620      	mov	r0, r4
 8021952:	f008 fa40 	bl	8029dd6 <__cxa_guard_release>
 8021956:	4a0f      	ldr	r2, [pc, #60]	@ (8021994 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021958:	490f      	ldr	r1, [pc, #60]	@ (8021998 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 802195a:	4810      	ldr	r0, [pc, #64]	@ (802199c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802195c:	f008 fa28 	bl	8029db0 <__aeabi_atexit>
 8021960:	4c0f      	ldr	r4, [pc, #60]	@ (80219a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8021962:	7823      	ldrb	r3, [r4, #0]
 8021964:	f3bf 8f5b 	dmb	ish
 8021968:	07db      	lsls	r3, r3, #31
 802196a:	d40b      	bmi.n	8021984 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 802196c:	4620      	mov	r0, r4
 802196e:	f008 fa26 	bl	8029dbe <__cxa_guard_acquire>
 8021972:	b138      	cbz	r0, 8021984 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021974:	4620      	mov	r0, r4
 8021976:	f008 fa2e 	bl	8029dd6 <__cxa_guard_release>
 802197a:	4a06      	ldr	r2, [pc, #24]	@ (8021994 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 802197c:	4909      	ldr	r1, [pc, #36]	@ (80219a4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 802197e:	480a      	ldr	r0, [pc, #40]	@ (80219a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021980:	f008 fa16 	bl	8029db0 <__aeabi_atexit>
 8021984:	4b05      	ldr	r3, [pc, #20]	@ (802199c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021986:	646b      	str	r3, [r5, #68]	@ 0x44
 8021988:	4b07      	ldr	r3, [pc, #28]	@ (80219a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802198a:	64ab      	str	r3, [r5, #72]	@ 0x48
 802198c:	bd38      	pop	{r3, r4, r5, pc}
 802198e:	bf00      	nop
 8021990:	20027aa8 	.word	0x20027aa8
 8021994:	20000000 	.word	0x20000000
 8021998:	0801e327 	.word	0x0801e327
 802199c:	200000ac 	.word	0x200000ac
 80219a0:	20027aac 	.word	0x20027aac
 80219a4:	0801e325 	.word	0x0801e325
 80219a8:	200000b0 	.word	0x200000b0

080219ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80219ac:	b538      	push	{r3, r4, r5, lr}
 80219ae:	4c15      	ldr	r4, [pc, #84]	@ (8021a04 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80219b0:	4605      	mov	r5, r0
 80219b2:	7823      	ldrb	r3, [r4, #0]
 80219b4:	f3bf 8f5b 	dmb	ish
 80219b8:	07da      	lsls	r2, r3, #31
 80219ba:	d40b      	bmi.n	80219d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80219bc:	4620      	mov	r0, r4
 80219be:	f008 f9fe 	bl	8029dbe <__cxa_guard_acquire>
 80219c2:	b138      	cbz	r0, 80219d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80219c4:	4620      	mov	r0, r4
 80219c6:	f008 fa06 	bl	8029dd6 <__cxa_guard_release>
 80219ca:	4a0f      	ldr	r2, [pc, #60]	@ (8021a08 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80219cc:	490f      	ldr	r1, [pc, #60]	@ (8021a0c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80219ce:	4810      	ldr	r0, [pc, #64]	@ (8021a10 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80219d0:	f008 f9ee 	bl	8029db0 <__aeabi_atexit>
 80219d4:	4c0f      	ldr	r4, [pc, #60]	@ (8021a14 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80219d6:	7823      	ldrb	r3, [r4, #0]
 80219d8:	f3bf 8f5b 	dmb	ish
 80219dc:	07db      	lsls	r3, r3, #31
 80219de:	d40b      	bmi.n	80219f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80219e0:	4620      	mov	r0, r4
 80219e2:	f008 f9ec 	bl	8029dbe <__cxa_guard_acquire>
 80219e6:	b138      	cbz	r0, 80219f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80219e8:	4620      	mov	r0, r4
 80219ea:	f008 f9f4 	bl	8029dd6 <__cxa_guard_release>
 80219ee:	4a06      	ldr	r2, [pc, #24]	@ (8021a08 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80219f0:	4909      	ldr	r1, [pc, #36]	@ (8021a18 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80219f2:	480a      	ldr	r0, [pc, #40]	@ (8021a1c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80219f4:	f008 f9dc 	bl	8029db0 <__aeabi_atexit>
 80219f8:	4b05      	ldr	r3, [pc, #20]	@ (8021a10 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80219fa:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80219fc:	4b07      	ldr	r3, [pc, #28]	@ (8021a1c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80219fe:	642b      	str	r3, [r5, #64]	@ 0x40
 8021a00:	bd38      	pop	{r3, r4, r5, pc}
 8021a02:	bf00      	nop
 8021a04:	20027ac8 	.word	0x20027ac8
 8021a08:	20000000 	.word	0x20000000
 8021a0c:	0801e32b 	.word	0x0801e32b
 8021a10:	200000cc 	.word	0x200000cc
 8021a14:	20027acc 	.word	0x20027acc
 8021a18:	0801e329 	.word	0x0801e329
 8021a1c:	200000d0 	.word	0x200000d0

08021a20 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8021a20:	b510      	push	{r4, lr}
 8021a22:	4604      	mov	r4, r0
 8021a24:	f7ff ff14 	bl	8021850 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8021a28:	4620      	mov	r0, r4
 8021a2a:	f7ff ff85 	bl	8021938 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8021a2e:	4620      	mov	r0, r4
 8021a30:	f7ff ff48 	bl	80218c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8021a34:	4620      	mov	r0, r4
 8021a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a3a:	f7ff bfb7 	b.w	80219ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08021a40 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8021a40:	b538      	push	{r3, r4, r5, lr}
 8021a42:	4c15      	ldr	r4, [pc, #84]	@ (8021a98 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8021a44:	4605      	mov	r5, r0
 8021a46:	7823      	ldrb	r3, [r4, #0]
 8021a48:	f3bf 8f5b 	dmb	ish
 8021a4c:	07da      	lsls	r2, r3, #31
 8021a4e:	d40b      	bmi.n	8021a68 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021a50:	4620      	mov	r0, r4
 8021a52:	f008 f9b4 	bl	8029dbe <__cxa_guard_acquire>
 8021a56:	b138      	cbz	r0, 8021a68 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021a58:	4620      	mov	r0, r4
 8021a5a:	f008 f9bc 	bl	8029dd6 <__cxa_guard_release>
 8021a5e:	4a0f      	ldr	r2, [pc, #60]	@ (8021a9c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021a60:	490f      	ldr	r1, [pc, #60]	@ (8021aa0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021a62:	4810      	ldr	r0, [pc, #64]	@ (8021aa4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021a64:	f008 f9a4 	bl	8029db0 <__aeabi_atexit>
 8021a68:	4c0f      	ldr	r4, [pc, #60]	@ (8021aa8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8021a6a:	7823      	ldrb	r3, [r4, #0]
 8021a6c:	f3bf 8f5b 	dmb	ish
 8021a70:	07db      	lsls	r3, r3, #31
 8021a72:	d40b      	bmi.n	8021a8c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021a74:	4620      	mov	r0, r4
 8021a76:	f008 f9a2 	bl	8029dbe <__cxa_guard_acquire>
 8021a7a:	b138      	cbz	r0, 8021a8c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021a7c:	4620      	mov	r0, r4
 8021a7e:	f008 f9aa 	bl	8029dd6 <__cxa_guard_release>
 8021a82:	4a06      	ldr	r2, [pc, #24]	@ (8021a9c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021a84:	4909      	ldr	r1, [pc, #36]	@ (8021aac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8021a86:	480a      	ldr	r0, [pc, #40]	@ (8021ab0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021a88:	f008 f992 	bl	8029db0 <__aeabi_atexit>
 8021a8c:	4b05      	ldr	r3, [pc, #20]	@ (8021aa4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021a8e:	666b      	str	r3, [r5, #100]	@ 0x64
 8021a90:	4b07      	ldr	r3, [pc, #28]	@ (8021ab0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021a92:	66ab      	str	r3, [r5, #104]	@ 0x68
 8021a94:	bd38      	pop	{r3, r4, r5, pc}
 8021a96:	bf00      	nop
 8021a98:	20027ab0 	.word	0x20027ab0
 8021a9c:	20000000 	.word	0x20000000
 8021aa0:	0801e317 	.word	0x0801e317
 8021aa4:	200000b4 	.word	0x200000b4
 8021aa8:	20027ab4 	.word	0x20027ab4
 8021aac:	0801e315 	.word	0x0801e315
 8021ab0:	200000b8 	.word	0x200000b8

08021ab4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8021ab4:	b538      	push	{r3, r4, r5, lr}
 8021ab6:	4c15      	ldr	r4, [pc, #84]	@ (8021b0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8021ab8:	4605      	mov	r5, r0
 8021aba:	7823      	ldrb	r3, [r4, #0]
 8021abc:	f3bf 8f5b 	dmb	ish
 8021ac0:	07da      	lsls	r2, r3, #31
 8021ac2:	d40b      	bmi.n	8021adc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021ac4:	4620      	mov	r0, r4
 8021ac6:	f008 f97a 	bl	8029dbe <__cxa_guard_acquire>
 8021aca:	b138      	cbz	r0, 8021adc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021acc:	4620      	mov	r0, r4
 8021ace:	f008 f982 	bl	8029dd6 <__cxa_guard_release>
 8021ad2:	4a0f      	ldr	r2, [pc, #60]	@ (8021b10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021ad4:	490f      	ldr	r1, [pc, #60]	@ (8021b14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8021ad6:	4810      	ldr	r0, [pc, #64]	@ (8021b18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021ad8:	f008 f96a 	bl	8029db0 <__aeabi_atexit>
 8021adc:	4c0f      	ldr	r4, [pc, #60]	@ (8021b1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8021ade:	7823      	ldrb	r3, [r4, #0]
 8021ae0:	f3bf 8f5b 	dmb	ish
 8021ae4:	07db      	lsls	r3, r3, #31
 8021ae6:	d40b      	bmi.n	8021b00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021ae8:	4620      	mov	r0, r4
 8021aea:	f008 f968 	bl	8029dbe <__cxa_guard_acquire>
 8021aee:	b138      	cbz	r0, 8021b00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021af0:	4620      	mov	r0, r4
 8021af2:	f008 f970 	bl	8029dd6 <__cxa_guard_release>
 8021af6:	4a06      	ldr	r2, [pc, #24]	@ (8021b10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021af8:	4909      	ldr	r1, [pc, #36]	@ (8021b20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8021afa:	480a      	ldr	r0, [pc, #40]	@ (8021b24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021afc:	f008 f958 	bl	8029db0 <__aeabi_atexit>
 8021b00:	4b05      	ldr	r3, [pc, #20]	@ (8021b18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021b02:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8021b04:	4b07      	ldr	r3, [pc, #28]	@ (8021b24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021b06:	662b      	str	r3, [r5, #96]	@ 0x60
 8021b08:	bd38      	pop	{r3, r4, r5, pc}
 8021b0a:	bf00      	nop
 8021b0c:	20027a88 	.word	0x20027a88
 8021b10:	20000000 	.word	0x20000000
 8021b14:	0801e31b 	.word	0x0801e31b
 8021b18:	2000008c 	.word	0x2000008c
 8021b1c:	20027a8c 	.word	0x20027a8c
 8021b20:	0801e319 	.word	0x0801e319
 8021b24:	20000090 	.word	0x20000090

08021b28 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8021b28:	b510      	push	{r4, lr}
 8021b2a:	4604      	mov	r4, r0
 8021b2c:	f7ff ff88 	bl	8021a40 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8021b30:	4620      	mov	r0, r4
 8021b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021b36:	f7ff bfbd 	b.w	8021ab4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08021b3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8021b3c:	b538      	push	{r3, r4, r5, lr}
 8021b3e:	4c15      	ldr	r4, [pc, #84]	@ (8021b94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8021b40:	4605      	mov	r5, r0
 8021b42:	7823      	ldrb	r3, [r4, #0]
 8021b44:	f3bf 8f5b 	dmb	ish
 8021b48:	07da      	lsls	r2, r3, #31
 8021b4a:	d40b      	bmi.n	8021b64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021b4c:	4620      	mov	r0, r4
 8021b4e:	f008 f936 	bl	8029dbe <__cxa_guard_acquire>
 8021b52:	b138      	cbz	r0, 8021b64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021b54:	4620      	mov	r0, r4
 8021b56:	f008 f93e 	bl	8029dd6 <__cxa_guard_release>
 8021b5a:	4a0f      	ldr	r2, [pc, #60]	@ (8021b98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021b5c:	490f      	ldr	r1, [pc, #60]	@ (8021b9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8021b5e:	4810      	ldr	r0, [pc, #64]	@ (8021ba0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021b60:	f008 f926 	bl	8029db0 <__aeabi_atexit>
 8021b64:	4c0f      	ldr	r4, [pc, #60]	@ (8021ba4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8021b66:	7823      	ldrb	r3, [r4, #0]
 8021b68:	f3bf 8f5b 	dmb	ish
 8021b6c:	07db      	lsls	r3, r3, #31
 8021b6e:	d40b      	bmi.n	8021b88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021b70:	4620      	mov	r0, r4
 8021b72:	f008 f924 	bl	8029dbe <__cxa_guard_acquire>
 8021b76:	b138      	cbz	r0, 8021b88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021b78:	4620      	mov	r0, r4
 8021b7a:	f008 f92c 	bl	8029dd6 <__cxa_guard_release>
 8021b7e:	4a06      	ldr	r2, [pc, #24]	@ (8021b98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021b80:	4909      	ldr	r1, [pc, #36]	@ (8021ba8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021b82:	480a      	ldr	r0, [pc, #40]	@ (8021bac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021b84:	f008 f914 	bl	8029db0 <__aeabi_atexit>
 8021b88:	4b05      	ldr	r3, [pc, #20]	@ (8021ba0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021b8a:	676b      	str	r3, [r5, #116]	@ 0x74
 8021b8c:	4b07      	ldr	r3, [pc, #28]	@ (8021bac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021b8e:	67ab      	str	r3, [r5, #120]	@ 0x78
 8021b90:	bd38      	pop	{r3, r4, r5, pc}
 8021b92:	bf00      	nop
 8021b94:	20027a80 	.word	0x20027a80
 8021b98:	20000000 	.word	0x20000000
 8021b9c:	0801e30f 	.word	0x0801e30f
 8021ba0:	20000084 	.word	0x20000084
 8021ba4:	20027a84 	.word	0x20027a84
 8021ba8:	0801e30d 	.word	0x0801e30d
 8021bac:	20000088 	.word	0x20000088

08021bb0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021bb0:	b538      	push	{r3, r4, r5, lr}
 8021bb2:	4c15      	ldr	r4, [pc, #84]	@ (8021c08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8021bb4:	4605      	mov	r5, r0
 8021bb6:	7823      	ldrb	r3, [r4, #0]
 8021bb8:	f3bf 8f5b 	dmb	ish
 8021bbc:	07da      	lsls	r2, r3, #31
 8021bbe:	d40b      	bmi.n	8021bd8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021bc0:	4620      	mov	r0, r4
 8021bc2:	f008 f8fc 	bl	8029dbe <__cxa_guard_acquire>
 8021bc6:	b138      	cbz	r0, 8021bd8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021bc8:	4620      	mov	r0, r4
 8021bca:	f008 f904 	bl	8029dd6 <__cxa_guard_release>
 8021bce:	4a0f      	ldr	r2, [pc, #60]	@ (8021c0c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021bd0:	490f      	ldr	r1, [pc, #60]	@ (8021c10 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8021bd2:	4810      	ldr	r0, [pc, #64]	@ (8021c14 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021bd4:	f008 f8ec 	bl	8029db0 <__aeabi_atexit>
 8021bd8:	4c0f      	ldr	r4, [pc, #60]	@ (8021c18 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8021bda:	7823      	ldrb	r3, [r4, #0]
 8021bdc:	f3bf 8f5b 	dmb	ish
 8021be0:	07db      	lsls	r3, r3, #31
 8021be2:	d40b      	bmi.n	8021bfc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021be4:	4620      	mov	r0, r4
 8021be6:	f008 f8ea 	bl	8029dbe <__cxa_guard_acquire>
 8021bea:	b138      	cbz	r0, 8021bfc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021bec:	4620      	mov	r0, r4
 8021bee:	f008 f8f2 	bl	8029dd6 <__cxa_guard_release>
 8021bf2:	4a06      	ldr	r2, [pc, #24]	@ (8021c0c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021bf4:	4909      	ldr	r1, [pc, #36]	@ (8021c1c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8021bf6:	480a      	ldr	r0, [pc, #40]	@ (8021c20 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021bf8:	f008 f8da 	bl	8029db0 <__aeabi_atexit>
 8021bfc:	4b05      	ldr	r3, [pc, #20]	@ (8021c14 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021bfe:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8021c00:	4b07      	ldr	r3, [pc, #28]	@ (8021c20 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021c02:	672b      	str	r3, [r5, #112]	@ 0x70
 8021c04:	bd38      	pop	{r3, r4, r5, pc}
 8021c06:	bf00      	nop
 8021c08:	20027a78 	.word	0x20027a78
 8021c0c:	20000000 	.word	0x20000000
 8021c10:	0801e313 	.word	0x0801e313
 8021c14:	2000007c 	.word	0x2000007c
 8021c18:	20027a7c 	.word	0x20027a7c
 8021c1c:	0801e311 	.word	0x0801e311
 8021c20:	20000080 	.word	0x20000080

08021c24 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8021c24:	b510      	push	{r4, lr}
 8021c26:	4604      	mov	r4, r0
 8021c28:	f7ff ff88 	bl	8021b3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8021c2c:	4620      	mov	r0, r4
 8021c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021c32:	f7ff bfbd 	b.w	8021bb0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08021c36 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8021c36:	b510      	push	{r4, lr}
 8021c38:	4604      	mov	r4, r0
 8021c3a:	f7ff fff3 	bl	8021c24 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8021c3e:	4620      	mov	r0, r4
 8021c40:	f7ff ff72 	bl	8021b28 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8021c44:	4620      	mov	r0, r4
 8021c46:	f7ff fdf9 	bl	802183c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8021c4a:	4620      	mov	r0, r4
 8021c4c:	f7ff fcfa 	bl	8021644 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8021c50:	4620      	mov	r0, r4
 8021c52:	f7ff fd75 	bl	8021740 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8021c56:	4620      	mov	r0, r4
 8021c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021c5c:	f7ff bee0 	b.w	8021a20 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08021c60 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8021c60:	b538      	push	{r3, r4, r5, lr}
 8021c62:	4c0b      	ldr	r4, [pc, #44]	@ (8021c90 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8021c64:	4605      	mov	r5, r0
 8021c66:	7823      	ldrb	r3, [r4, #0]
 8021c68:	f3bf 8f5b 	dmb	ish
 8021c6c:	07db      	lsls	r3, r3, #31
 8021c6e:	d40b      	bmi.n	8021c88 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8021c70:	4620      	mov	r0, r4
 8021c72:	f008 f8a4 	bl	8029dbe <__cxa_guard_acquire>
 8021c76:	b138      	cbz	r0, 8021c88 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8021c78:	4620      	mov	r0, r4
 8021c7a:	f008 f8ac 	bl	8029dd6 <__cxa_guard_release>
 8021c7e:	4a05      	ldr	r2, [pc, #20]	@ (8021c94 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8021c80:	4905      	ldr	r1, [pc, #20]	@ (8021c98 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8021c82:	4806      	ldr	r0, [pc, #24]	@ (8021c9c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8021c84:	f008 f894 	bl	8029db0 <__aeabi_atexit>
 8021c88:	4b04      	ldr	r3, [pc, #16]	@ (8021c9c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8021c8a:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8021c8c:	bd38      	pop	{r3, r4, r5, pc}
 8021c8e:	bf00      	nop
 8021c90:	20027a6c 	.word	0x20027a6c
 8021c94:	20000000 	.word	0x20000000
 8021c98:	0801e30b 	.word	0x0801e30b
 8021c9c:	20000074 	.word	0x20000074

08021ca0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 8021ca0:	b538      	push	{r3, r4, r5, lr}
 8021ca2:	4c0b      	ldr	r4, [pc, #44]	@ (8021cd0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 8021ca4:	4605      	mov	r5, r0
 8021ca6:	7823      	ldrb	r3, [r4, #0]
 8021ca8:	f3bf 8f5b 	dmb	ish
 8021cac:	07db      	lsls	r3, r3, #31
 8021cae:	d40b      	bmi.n	8021cc8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8021cb0:	4620      	mov	r0, r4
 8021cb2:	f008 f884 	bl	8029dbe <__cxa_guard_acquire>
 8021cb6:	b138      	cbz	r0, 8021cc8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8021cb8:	4620      	mov	r0, r4
 8021cba:	f008 f88c 	bl	8029dd6 <__cxa_guard_release>
 8021cbe:	4a05      	ldr	r2, [pc, #20]	@ (8021cd4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8021cc0:	4905      	ldr	r1, [pc, #20]	@ (8021cd8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 8021cc2:	4806      	ldr	r0, [pc, #24]	@ (8021cdc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8021cc4:	f008 f874 	bl	8029db0 <__aeabi_atexit>
 8021cc8:	4b04      	ldr	r3, [pc, #16]	@ (8021cdc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8021cca:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 8021cce:	bd38      	pop	{r3, r4, r5, pc}
 8021cd0:	20027a70 	.word	0x20027a70
 8021cd4:	20000000 	.word	0x20000000
 8021cd8:	0801e309 	.word	0x0801e309
 8021cdc:	20000078 	.word	0x20000078

08021ce0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8021ce0:	b570      	push	{r4, r5, r6, lr}
 8021ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8021d18 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8021ce4:	4606      	mov	r6, r0
 8021ce6:	4c0d      	ldr	r4, [pc, #52]	@ (8021d1c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8021ce8:	782b      	ldrb	r3, [r5, #0]
 8021cea:	f3bf 8f5b 	dmb	ish
 8021cee:	f013 0f01 	tst.w	r3, #1
 8021cf2:	d10d      	bne.n	8021d10 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8021cf4:	4628      	mov	r0, r5
 8021cf6:	f008 f862 	bl	8029dbe <__cxa_guard_acquire>
 8021cfa:	b148      	cbz	r0, 8021d10 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8021cfc:	4b08      	ldr	r3, [pc, #32]	@ (8021d20 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8021cfe:	4628      	mov	r0, r5
 8021d00:	6023      	str	r3, [r4, #0]
 8021d02:	f008 f868 	bl	8029dd6 <__cxa_guard_release>
 8021d06:	4a07      	ldr	r2, [pc, #28]	@ (8021d24 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8021d08:	4620      	mov	r0, r4
 8021d0a:	4907      	ldr	r1, [pc, #28]	@ (8021d28 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 8021d0c:	f008 f850 	bl	8029db0 <__aeabi_atexit>
 8021d10:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 8021d14:	bd70      	pop	{r4, r5, r6, pc}
 8021d16:	bf00      	nop
 8021d18:	20027a74 	.word	0x20027a74
 8021d1c:	20027ae8 	.word	0x20027ae8
 8021d20:	0802ef8c 	.word	0x0802ef8c
 8021d24:	20000000 	.word	0x20000000
 8021d28:	0801e307 	.word	0x0801e307

08021d2c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8021d2c:	b510      	push	{r4, lr}
 8021d2e:	4604      	mov	r4, r0
 8021d30:	f7ff ff96 	bl	8021c60 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8021d34:	4620      	mov	r0, r4
 8021d36:	f7ff ffb3 	bl	8021ca0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 8021d3a:	4620      	mov	r0, r4
 8021d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021d40:	f7ff bfce 	b.w	8021ce0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08021d44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8021d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d48:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 8021d4c:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 8021d50:	2d00      	cmp	r5, #0
 8021d52:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 8021d56:	fb05 4c0e 	mla	ip, r5, lr, r4
 8021d5a:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 8021d5e:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 8021d62:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8021d66:	eb02 0a0c 	add.w	sl, r2, ip
 8021d6a:	8808      	ldrh	r0, [r1, #0]
 8021d6c:	f2c0 80b0 	blt.w	8021ed0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8021d70:	45ab      	cmp	fp, r5
 8021d72:	f340 80ad 	ble.w	8021ed0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8021d76:	2c00      	cmp	r4, #0
 8021d78:	f2c0 80a8 	blt.w	8021ecc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8021d7c:	45a6      	cmp	lr, r4
 8021d7e:	f340 80a5 	ble.w	8021ecc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8021d82:	f812 200c 	ldrb.w	r2, [r2, ip]
 8021d86:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8021d8a:	1c62      	adds	r2, r4, #1
 8021d8c:	f100 80a3 	bmi.w	8021ed6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8021d90:	4596      	cmp	lr, r2
 8021d92:	f340 80a0 	ble.w	8021ed6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8021d96:	f1b9 0f00 	cmp.w	r9, #0
 8021d9a:	f000 809c 	beq.w	8021ed6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8021d9e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021da2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8021da6:	3501      	adds	r5, #1
 8021da8:	f100 8099 	bmi.w	8021ede <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8021dac:	45ab      	cmp	fp, r5
 8021dae:	f340 8096 	ble.w	8021ede <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8021db2:	2f00      	cmp	r7, #0
 8021db4:	f000 8093 	beq.w	8021ede <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8021db8:	2c00      	cmp	r4, #0
 8021dba:	f2c0 808e 	blt.w	8021eda <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8021dbe:	45a6      	cmp	lr, r4
 8021dc0:	f340 808b 	ble.w	8021eda <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8021dc4:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8021dc8:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8021dcc:	3401      	adds	r4, #1
 8021dce:	f100 8089 	bmi.w	8021ee4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8021dd2:	45a6      	cmp	lr, r4
 8021dd4:	f340 8086 	ble.w	8021ee4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8021dd8:	f1b9 0f00 	cmp.w	r9, #0
 8021ddc:	f000 8082 	beq.w	8021ee4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8021de0:	44d6      	add	lr, sl
 8021de2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8021de6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021dea:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8021dee:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8021df2:	fb19 fe07 	smulbb	lr, r9, r7
 8021df6:	f1c7 0210 	rsb	r2, r7, #16
 8021dfa:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8021dfe:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8021e02:	eba2 0209 	sub.w	r2, r2, r9
 8021e06:	ea44 0808 	orr.w	r8, r4, r8
 8021e0a:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8021e0e:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8021e12:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8021e16:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8021e1a:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8021e1e:	ea44 0c0c 	orr.w	ip, r4, ip
 8021e22:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8021e26:	fb04 f40c 	mul.w	r4, r4, ip
 8021e2a:	fb02 4808 	mla	r8, r2, r8, r4
 8021e2e:	041a      	lsls	r2, r3, #16
 8021e30:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8021e34:	b2b4      	uxth	r4, r6
 8021e36:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8021e3a:	43f6      	mvns	r6, r6
 8021e3c:	4313      	orrs	r3, r2
 8021e3e:	042a      	lsls	r2, r5, #16
 8021e40:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8021e44:	b2f6      	uxtb	r6, r6
 8021e46:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8021e4a:	fb0e 8303 	mla	r3, lr, r3, r8
 8021e4e:	432a      	orrs	r2, r5
 8021e50:	fb07 3202 	mla	r2, r7, r2, r3
 8021e54:	10c7      	asrs	r7, r0, #3
 8021e56:	0d53      	lsrs	r3, r2, #21
 8021e58:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8021e5c:	0952      	lsrs	r2, r2, #5
 8021e5e:	fb17 f706 	smulbb	r7, r7, r6
 8021e62:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021e66:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8021e6a:	431a      	orrs	r2, r3
 8021e6c:	b293      	uxth	r3, r2
 8021e6e:	1202      	asrs	r2, r0, #8
 8021e70:	121d      	asrs	r5, r3, #8
 8021e72:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8021e76:	00c0      	lsls	r0, r0, #3
 8021e78:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8021e7c:	fb12 f206 	smulbb	r2, r2, r6
 8021e80:	b2c0      	uxtb	r0, r0
 8021e82:	fb05 2504 	mla	r5, r5, r4, r2
 8021e86:	10da      	asrs	r2, r3, #3
 8021e88:	fb10 f006 	smulbb	r0, r0, r6
 8021e8c:	00db      	lsls	r3, r3, #3
 8021e8e:	b2ad      	uxth	r5, r5
 8021e90:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8021e94:	b2db      	uxtb	r3, r3
 8021e96:	fb02 7204 	mla	r2, r2, r4, r7
 8021e9a:	fb03 0004 	mla	r0, r3, r4, r0
 8021e9e:	1c6b      	adds	r3, r5, #1
 8021ea0:	b292      	uxth	r2, r2
 8021ea2:	b280      	uxth	r0, r0
 8021ea4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021ea8:	1c43      	adds	r3, r0, #1
 8021eaa:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8021eae:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021eb2:	1c50      	adds	r0, r2, #1
 8021eb4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021eb8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021ebc:	0952      	lsrs	r2, r2, #5
 8021ebe:	432b      	orrs	r3, r5
 8021ec0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021ec4:	4313      	orrs	r3, r2
 8021ec6:	800b      	strh	r3, [r1, #0]
 8021ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ecc:	4680      	mov	r8, r0
 8021ece:	e75c      	b.n	8021d8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8021ed0:	4684      	mov	ip, r0
 8021ed2:	4680      	mov	r8, r0
 8021ed4:	e767      	b.n	8021da6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8021ed6:	4684      	mov	ip, r0
 8021ed8:	e765      	b.n	8021da6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8021eda:	4605      	mov	r5, r0
 8021edc:	e776      	b.n	8021dcc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8021ede:	4603      	mov	r3, r0
 8021ee0:	4605      	mov	r5, r0
 8021ee2:	e782      	b.n	8021dea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8021ee4:	4603      	mov	r3, r0
 8021ee6:	e780      	b.n	8021dea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08021ee8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021eec:	b099      	sub	sp, #100	@ 0x64
 8021eee:	9215      	str	r2, [sp, #84]	@ 0x54
 8021ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8021ef2:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8021ef4:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8021ef8:	9016      	str	r0, [sp, #88]	@ 0x58
 8021efa:	930d      	str	r3, [sp, #52]	@ 0x34
 8021efc:	6850      	ldr	r0, [r2, #4]
 8021efe:	910c      	str	r1, [sp, #48]	@ 0x30
 8021f00:	6812      	ldr	r2, [r2, #0]
 8021f02:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8021f06:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 8021f0a:	fb00 1303 	mla	r3, r0, r3, r1
 8021f0e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8021f12:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021f14:	681b      	ldr	r3, [r3, #0]
 8021f16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021f18:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021f1a:	685e      	ldr	r6, [r3, #4]
 8021f1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021f1e:	3604      	adds	r6, #4
 8021f20:	43db      	mvns	r3, r3
 8021f22:	b2db      	uxtb	r3, r3
 8021f24:	930a      	str	r3, [sp, #40]	@ 0x28
 8021f26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021f28:	2b00      	cmp	r3, #0
 8021f2a:	dc03      	bgt.n	8021f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021f2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021f2e:	2b00      	cmp	r3, #0
 8021f30:	f340 8225 	ble.w	802237e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8021f34:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021f36:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021f3a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021f3e:	1e48      	subs	r0, r1, #1
 8021f40:	1e57      	subs	r7, r2, #1
 8021f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021f44:	2b00      	cmp	r3, #0
 8021f46:	f340 80e3 	ble.w	8022110 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8021f4a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8021f4e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021f52:	d406      	bmi.n	8021f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021f54:	4584      	cmp	ip, r0
 8021f56:	da04      	bge.n	8021f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021f58:	2b00      	cmp	r3, #0
 8021f5a:	db02      	blt.n	8021f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021f5c:	42bb      	cmp	r3, r7
 8021f5e:	f2c0 80d8 	blt.w	8022112 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8021f62:	f11c 0c01 	adds.w	ip, ip, #1
 8021f66:	f100 80c9 	bmi.w	80220fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021f6a:	4561      	cmp	r1, ip
 8021f6c:	f2c0 80c6 	blt.w	80220fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021f70:	3301      	adds	r3, #1
 8021f72:	f100 80c3 	bmi.w	80220fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021f76:	429a      	cmp	r2, r3
 8021f78:	f2c0 80c0 	blt.w	80220fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021f7c:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8021f80:	4647      	mov	r7, r8
 8021f82:	f1bb 0f00 	cmp.w	fp, #0
 8021f86:	f340 80e3 	ble.w	8022150 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8021f8a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8021f8c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021f90:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021f92:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8021f96:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021f9a:	ea5f 422a 	movs.w	r2, sl, asr #16
 8021f9e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021fa2:	689b      	ldr	r3, [r3, #8]
 8021fa4:	f100 8121 	bmi.w	80221ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8021fa8:	f103 39ff 	add.w	r9, r3, #4294967295
 8021fac:	454a      	cmp	r2, r9
 8021fae:	f280 811c 	bge.w	80221ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8021fb2:	f1bc 0f00 	cmp.w	ip, #0
 8021fb6:	f2c0 8118 	blt.w	80221ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8021fba:	f10e 39ff 	add.w	r9, lr, #4294967295
 8021fbe:	45cc      	cmp	ip, r9
 8021fc0:	f280 8113 	bge.w	80221ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8021fc4:	b21b      	sxth	r3, r3
 8021fc6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021fc8:	fb0c 2203 	mla	r2, ip, r3, r2
 8021fcc:	eb04 0902 	add.w	r9, r4, r2
 8021fd0:	5ca2      	ldrb	r2, [r4, r2]
 8021fd2:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8021fd6:	2800      	cmp	r0, #0
 8021fd8:	f000 80fe 	beq.w	80221d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8021fdc:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021fe0:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8021fe4:	9211      	str	r2, [sp, #68]	@ 0x44
 8021fe6:	b151      	cbz	r1, 8021ffe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021fe8:	eb09 0203 	add.w	r2, r9, r3
 8021fec:	f819 3003 	ldrb.w	r3, [r9, r3]
 8021ff0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021ff4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021ff6:	7853      	ldrb	r3, [r2, #1]
 8021ff8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021ffc:	9312      	str	r3, [sp, #72]	@ 0x48
 8021ffe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022000:	fb10 f201 	smulbb	r2, r0, r1
 8022004:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022006:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802200a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802200e:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8022012:	10d2      	asrs	r2, r2, #3
 8022014:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8022018:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 802201c:	ea4c 0c03 	orr.w	ip, ip, r3
 8022020:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022022:	041b      	lsls	r3, r3, #16
 8022024:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022028:	4323      	orrs	r3, r4
 802202a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802202c:	4353      	muls	r3, r2
 802202e:	fb09 330c 	mla	r3, r9, ip, r3
 8022032:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022036:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802203a:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802203e:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022042:	f1c1 0c10 	rsb	ip, r1, #16
 8022046:	ebac 0c00 	sub.w	ip, ip, r0
 802204a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802204e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8022052:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022056:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022058:	0418      	lsls	r0, r3, #16
 802205a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802205e:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8022062:	4318      	orrs	r0, r3
 8022064:	fb02 c200 	mla	r2, r2, r0, ip
 8022068:	8838      	ldrh	r0, [r7, #0]
 802206a:	0d53      	lsrs	r3, r2, #21
 802206c:	0952      	lsrs	r2, r2, #5
 802206e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022072:	1201      	asrs	r1, r0, #8
 8022074:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8022078:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802207c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8022080:	00c0      	lsls	r0, r0, #3
 8022082:	431a      	orrs	r2, r3
 8022084:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8022088:	fb11 f104 	smulbb	r1, r1, r4
 802208c:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8022090:	b292      	uxth	r2, r2
 8022092:	fb1e fe04 	smulbb	lr, lr, r4
 8022096:	b2c0      	uxtb	r0, r0
 8022098:	ea4f 2c22 	mov.w	ip, r2, asr #8
 802209c:	fb10 f004 	smulbb	r0, r0, r4
 80220a0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80220a4:	fb0c 1c03 	mla	ip, ip, r3, r1
 80220a8:	10d1      	asrs	r1, r2, #3
 80220aa:	00d2      	lsls	r2, r2, #3
 80220ac:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80220b0:	fa1f fc8c 	uxth.w	ip, ip
 80220b4:	b2d2      	uxtb	r2, r2
 80220b6:	fb01 e103 	mla	r1, r1, r3, lr
 80220ba:	fb02 0303 	mla	r3, r2, r3, r0
 80220be:	b289      	uxth	r1, r1
 80220c0:	b29a      	uxth	r2, r3
 80220c2:	f10c 0301 	add.w	r3, ip, #1
 80220c6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80220ca:	1c53      	adds	r3, r2, #1
 80220cc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80220d0:	1c4a      	adds	r2, r1, #1
 80220d2:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80220d6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80220da:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80220de:	0949      	lsrs	r1, r1, #5
 80220e0:	ea43 030c 	orr.w	r3, r3, ip
 80220e4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80220e8:	430b      	orrs	r3, r1
 80220ea:	803b      	strh	r3, [r7, #0]
 80220ec:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80220ee:	3702      	adds	r7, #2
 80220f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80220f4:	449a      	add	sl, r3
 80220f6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80220f8:	441d      	add	r5, r3
 80220fa:	e742      	b.n	8021f82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80220fc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80220fe:	f108 0802 	add.w	r8, r8, #2
 8022102:	449a      	add	sl, r3
 8022104:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022106:	441d      	add	r5, r3
 8022108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802210a:	3b01      	subs	r3, #1
 802210c:	9309      	str	r3, [sp, #36]	@ 0x24
 802210e:	e718      	b.n	8021f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022110:	d023      	beq.n	802215a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8022112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022114:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8022116:	3b01      	subs	r3, #1
 8022118:	fb00 a003 	mla	r0, r0, r3, sl
 802211c:	1400      	asrs	r0, r0, #16
 802211e:	f53f af2d 	bmi.w	8021f7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022122:	3901      	subs	r1, #1
 8022124:	4288      	cmp	r0, r1
 8022126:	f6bf af29 	bge.w	8021f7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802212a:	9926      	ldr	r1, [sp, #152]	@ 0x98
 802212c:	fb01 5303 	mla	r3, r1, r3, r5
 8022130:	141b      	asrs	r3, r3, #16
 8022132:	f53f af23 	bmi.w	8021f7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022136:	3a01      	subs	r2, #1
 8022138:	4293      	cmp	r3, r2
 802213a:	f6bf af1f 	bge.w	8021f7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802213e:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8022142:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 8022146:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 802214a:	f1be 0f00 	cmp.w	lr, #0
 802214e:	dc6c      	bgt.n	802222a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8022150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022152:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022156:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 802215a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802215c:	2b00      	cmp	r3, #0
 802215e:	f340 810e 	ble.w	802237e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8022162:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022166:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022168:	ee30 0a04 	vadd.f32	s0, s0, s8
 802216c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022170:	eef0 6a62 	vmov.f32	s13, s5
 8022174:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022178:	ee31 1a05 	vadd.f32	s2, s2, s10
 802217c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022180:	ee16 aa90 	vmov	sl, s13
 8022184:	eef0 6a43 	vmov.f32	s13, s6
 8022188:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802218c:	ee16 5a90 	vmov	r5, s13
 8022190:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022194:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022198:	ee77 2a62 	vsub.f32	s5, s14, s5
 802219c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80221a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80221a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80221a8:	ee12 2a90 	vmov	r2, s5
 80221ac:	eef0 2a47 	vmov.f32	s5, s14
 80221b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80221b4:	ee13 2a10 	vmov	r2, s6
 80221b8:	9325      	str	r3, [sp, #148]	@ 0x94
 80221ba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80221bc:	eeb0 3a67 	vmov.f32	s6, s15
 80221c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80221c4:	9326      	str	r3, [sp, #152]	@ 0x98
 80221c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80221c8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80221ca:	3b01      	subs	r3, #1
 80221cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80221ce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80221d0:	bf08      	it	eq
 80221d2:	4613      	moveq	r3, r2
 80221d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80221d6:	e6a6      	b.n	8021f26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80221d8:	2900      	cmp	r1, #0
 80221da:	f43f af10 	beq.w	8021ffe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80221de:	f819 3003 	ldrb.w	r3, [r9, r3]
 80221e2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80221e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80221e8:	e709      	b.n	8021ffe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80221ea:	f112 0901 	adds.w	r9, r2, #1
 80221ee:	f53f af7d 	bmi.w	80220ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80221f2:	454b      	cmp	r3, r9
 80221f4:	f6ff af7a 	blt.w	80220ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80221f8:	f11c 0901 	adds.w	r9, ip, #1
 80221fc:	f53f af76 	bmi.w	80220ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022200:	45ce      	cmp	lr, r9
 8022202:	f6ff af73 	blt.w	80220ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022206:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022208:	b21b      	sxth	r3, r3
 802220a:	9202      	str	r2, [sp, #8]
 802220c:	fa0f f28e 	sxth.w	r2, lr
 8022210:	9300      	str	r3, [sp, #0]
 8022212:	4633      	mov	r3, r6
 8022214:	9201      	str	r2, [sp, #4]
 8022216:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022218:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802221c:	e9cd c003 	strd	ip, r0, [sp, #12]
 8022220:	4639      	mov	r1, r7
 8022222:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8022224:	f7ff fd8e 	bl	8021d44 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8022228:	e760      	b.n	80220ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802222a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802222c:	ea4f 422a 	mov.w	r2, sl, asr #16
 8022230:	1429      	asrs	r1, r5, #16
 8022232:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022234:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022238:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 802223c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022240:	fb03 2101 	mla	r1, r3, r1, r2
 8022244:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022246:	440a      	add	r2, r1
 8022248:	5c61      	ldrb	r1, [r4, r1]
 802224a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802224e:	f1bc 0f00 	cmp.w	ip, #0
 8022252:	f000 808c 	beq.w	802236e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8022256:	7857      	ldrb	r7, [r2, #1]
 8022258:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 802225c:	9413      	str	r4, [sp, #76]	@ 0x4c
 802225e:	b140      	cbz	r0, 8022272 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8022260:	18d7      	adds	r7, r2, r3
 8022262:	5cd3      	ldrb	r3, [r2, r3]
 8022264:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022268:	9310      	str	r3, [sp, #64]	@ 0x40
 802226a:	787b      	ldrb	r3, [r7, #1]
 802226c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022270:	9314      	str	r3, [sp, #80]	@ 0x50
 8022272:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022274:	fb1c f200 	smulbb	r2, ip, r0
 8022278:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802227a:	f10e 3eff 	add.w	lr, lr, #4294967295
 802227e:	041f      	lsls	r7, r3, #16
 8022280:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8022284:	10d2      	asrs	r2, r2, #3
 8022286:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 802228a:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 802228e:	431f      	orrs	r7, r3
 8022290:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8022294:	9317      	str	r3, [sp, #92]	@ 0x5c
 8022296:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022298:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802229a:	041b      	lsls	r3, r3, #16
 802229c:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80222a0:	ea43 030b 	orr.w	r3, r3, fp
 80222a4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80222a8:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80222ac:	4353      	muls	r3, r2
 80222ae:	fb04 3707 	mla	r7, r4, r7, r3
 80222b2:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 80222b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80222b8:	ea43 0b01 	orr.w	fp, r3, r1
 80222bc:	f1c0 0110 	rsb	r1, r0, #16
 80222c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80222c2:	eba1 0c0c 	sub.w	ip, r1, ip
 80222c6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80222ca:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80222ce:	fb0c 770b 	mla	r7, ip, fp, r7
 80222d2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80222d6:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 80222da:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80222de:	ea4c 0c0b 	orr.w	ip, ip, fp
 80222e2:	fb02 770c 	mla	r7, r2, ip, r7
 80222e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80222e8:	0d79      	lsrs	r1, r7, #21
 80222ea:	8812      	ldrh	r2, [r2, #0]
 80222ec:	097f      	lsrs	r7, r7, #5
 80222ee:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80222f2:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80222f6:	430f      	orrs	r7, r1
 80222f8:	1211      	asrs	r1, r2, #8
 80222fa:	b2bb      	uxth	r3, r7
 80222fc:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8022300:	10d7      	asrs	r7, r2, #3
 8022302:	fb11 f104 	smulbb	r1, r1, r4
 8022306:	1218      	asrs	r0, r3, #8
 8022308:	00d2      	lsls	r2, r2, #3
 802230a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802230e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8022312:	fb17 f704 	smulbb	r7, r7, r4
 8022316:	b2d2      	uxtb	r2, r2
 8022318:	fb00 1009 	mla	r0, r0, r9, r1
 802231c:	10d9      	asrs	r1, r3, #3
 802231e:	fb12 f204 	smulbb	r2, r2, r4
 8022322:	00db      	lsls	r3, r3, #3
 8022324:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8022328:	b280      	uxth	r0, r0
 802232a:	b2db      	uxtb	r3, r3
 802232c:	fb01 7109 	mla	r1, r1, r9, r7
 8022330:	fb03 2309 	mla	r3, r3, r9, r2
 8022334:	1c42      	adds	r2, r0, #1
 8022336:	b289      	uxth	r1, r1
 8022338:	b29b      	uxth	r3, r3
 802233a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802233e:	1c4f      	adds	r7, r1, #1
 8022340:	1c5a      	adds	r2, r3, #1
 8022342:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8022346:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802234a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802234e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022350:	0949      	lsrs	r1, r1, #5
 8022352:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022356:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802235a:	4310      	orrs	r0, r2
 802235c:	4308      	orrs	r0, r1
 802235e:	f823 0b02 	strh.w	r0, [r3], #2
 8022362:	930e      	str	r3, [sp, #56]	@ 0x38
 8022364:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022366:	449a      	add	sl, r3
 8022368:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802236a:	441d      	add	r5, r3
 802236c:	e6ed      	b.n	802214a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 802236e:	2800      	cmp	r0, #0
 8022370:	f43f af7f 	beq.w	8022272 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8022374:	5cd3      	ldrb	r3, [r2, r3]
 8022376:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802237a:	9310      	str	r3, [sp, #64]	@ 0x40
 802237c:	e779      	b.n	8022272 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802237e:	b019      	add	sp, #100	@ 0x64
 8022380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022384 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8022384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022388:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 802238c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8022390:	f1b8 0f00 	cmp.w	r8, #0
 8022394:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 8022398:	fb08 470e 	mla	r7, r8, lr, r4
 802239c:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 80223a0:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 80223a4:	eb02 0907 	add.w	r9, r2, r7
 80223a8:	8808      	ldrh	r0, [r1, #0]
 80223aa:	db67      	blt.n	802247c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80223ac:	45c2      	cmp	sl, r8
 80223ae:	dd65      	ble.n	802247c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80223b0:	2c00      	cmp	r4, #0
 80223b2:	db61      	blt.n	8022478 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 80223b4:	45a6      	cmp	lr, r4
 80223b6:	dd5f      	ble.n	8022478 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 80223b8:	5dd2      	ldrb	r2, [r2, r7]
 80223ba:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80223be:	1c62      	adds	r2, r4, #1
 80223c0:	d45f      	bmi.n	8022482 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80223c2:	4596      	cmp	lr, r2
 80223c4:	dd5d      	ble.n	8022482 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80223c6:	2d00      	cmp	r5, #0
 80223c8:	d05b      	beq.n	8022482 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80223ca:	f899 2001 	ldrb.w	r2, [r9, #1]
 80223ce:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80223d2:	f118 0801 	adds.w	r8, r8, #1
 80223d6:	d458      	bmi.n	802248a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80223d8:	45c2      	cmp	sl, r8
 80223da:	dd56      	ble.n	802248a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80223dc:	2e00      	cmp	r6, #0
 80223de:	d054      	beq.n	802248a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80223e0:	2c00      	cmp	r4, #0
 80223e2:	db50      	blt.n	8022486 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 80223e4:	45a6      	cmp	lr, r4
 80223e6:	dd4e      	ble.n	8022486 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 80223e8:	f819 200e 	ldrb.w	r2, [r9, lr]
 80223ec:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80223f0:	3401      	adds	r4, #1
 80223f2:	d407      	bmi.n	8022404 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80223f4:	45a6      	cmp	lr, r4
 80223f6:	dd05      	ble.n	8022404 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80223f8:	b125      	cbz	r5, 8022404 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80223fa:	44ce      	add	lr, r9
 80223fc:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8022400:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8022404:	fb15 f406 	smulbb	r4, r5, r6
 8022408:	ea4f 430c 	mov.w	r3, ip, lsl #16
 802240c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8022410:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8022414:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022418:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 802241c:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8022420:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8022424:	ea43 0c0c 	orr.w	ip, r3, ip
 8022428:	f1c6 0310 	rsb	r3, r6, #16
 802242c:	ea4e 0707 	orr.w	r7, lr, r7
 8022430:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8022434:	1b5b      	subs	r3, r3, r5
 8022436:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802243a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802243e:	437d      	muls	r5, r7
 8022440:	fb03 5c0c 	mla	ip, r3, ip, r5
 8022444:	0403      	lsls	r3, r0, #16
 8022446:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802244a:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802244e:	4318      	orrs	r0, r3
 8022450:	0413      	lsls	r3, r2, #16
 8022452:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8022456:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802245a:	fb04 c000 	mla	r0, r4, r0, ip
 802245e:	4313      	orrs	r3, r2
 8022460:	fb06 0003 	mla	r0, r6, r3, r0
 8022464:	0d43      	lsrs	r3, r0, #21
 8022466:	0940      	lsrs	r0, r0, #5
 8022468:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802246c:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8022470:	4318      	orrs	r0, r3
 8022472:	8008      	strh	r0, [r1, #0]
 8022474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022478:	4684      	mov	ip, r0
 802247a:	e7a0      	b.n	80223be <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 802247c:	4607      	mov	r7, r0
 802247e:	4684      	mov	ip, r0
 8022480:	e7a7      	b.n	80223d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8022482:	4607      	mov	r7, r0
 8022484:	e7a5      	b.n	80223d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8022486:	4602      	mov	r2, r0
 8022488:	e7b2      	b.n	80223f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 802248a:	4602      	mov	r2, r0
 802248c:	e7ba      	b.n	8022404 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0802248e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802248e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022492:	b093      	sub	sp, #76	@ 0x4c
 8022494:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022498:	920f      	str	r2, [sp, #60]	@ 0x3c
 802249a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802249c:	9010      	str	r0, [sp, #64]	@ 0x40
 802249e:	9108      	str	r1, [sp, #32]
 80224a0:	6850      	ldr	r0, [r2, #4]
 80224a2:	9306      	str	r3, [sp, #24]
 80224a4:	6812      	ldr	r2, [r2, #0]
 80224a6:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80224aa:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 80224ae:	fb00 1303 	mla	r3, r0, r3, r1
 80224b2:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80224b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80224b8:	681b      	ldr	r3, [r3, #0]
 80224ba:	9307      	str	r3, [sp, #28]
 80224bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80224be:	685f      	ldr	r7, [r3, #4]
 80224c0:	3704      	adds	r7, #4
 80224c2:	9b08      	ldr	r3, [sp, #32]
 80224c4:	2b00      	cmp	r3, #0
 80224c6:	dc03      	bgt.n	80224d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80224c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80224ca:	2b00      	cmp	r3, #0
 80224cc:	f340 81b2 	ble.w	8022834 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80224d0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80224d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80224d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80224da:	1e48      	subs	r0, r1, #1
 80224dc:	f102 3cff 	add.w	ip, r2, #4294967295
 80224e0:	9b06      	ldr	r3, [sp, #24]
 80224e2:	2b00      	cmp	r3, #0
 80224e4:	f340 80a9 	ble.w	802263a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80224e8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80224ec:	ea4f 4326 	mov.w	r3, r6, asr #16
 80224f0:	d406      	bmi.n	8022500 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80224f2:	4586      	cmp	lr, r0
 80224f4:	da04      	bge.n	8022500 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80224f6:	2b00      	cmp	r3, #0
 80224f8:	db02      	blt.n	8022500 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80224fa:	4563      	cmp	r3, ip
 80224fc:	f2c0 809e 	blt.w	802263c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8022500:	f11e 0e01 	adds.w	lr, lr, #1
 8022504:	f100 808f 	bmi.w	8022626 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8022508:	4571      	cmp	r1, lr
 802250a:	f2c0 808c 	blt.w	8022626 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802250e:	3301      	adds	r3, #1
 8022510:	f100 8089 	bmi.w	8022626 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8022514:	429a      	cmp	r2, r3
 8022516:	f2c0 8086 	blt.w	8022626 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802251a:	f8dd b018 	ldr.w	fp, [sp, #24]
 802251e:	46c8      	mov	r8, r9
 8022520:	f1bb 0f00 	cmp.w	fp, #0
 8022524:	f340 80a6 	ble.w	8022674 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022528:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802252a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802252e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022530:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022534:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022538:	1422      	asrs	r2, r4, #16
 802253a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802253e:	689b      	ldr	r3, [r3, #8]
 8022540:	f100 80e3 	bmi.w	802270a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022544:	f103 3aff 	add.w	sl, r3, #4294967295
 8022548:	4552      	cmp	r2, sl
 802254a:	f280 80de 	bge.w	802270a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802254e:	f1bc 0f00 	cmp.w	ip, #0
 8022552:	f2c0 80da 	blt.w	802270a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022556:	f10e 3aff 	add.w	sl, lr, #4294967295
 802255a:	45d4      	cmp	ip, sl
 802255c:	f280 80d5 	bge.w	802270a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022560:	b21b      	sxth	r3, r3
 8022562:	9d07      	ldr	r5, [sp, #28]
 8022564:	fb0c 2203 	mla	r2, ip, r3, r2
 8022568:	eb05 0a02 	add.w	sl, r5, r2
 802256c:	5caa      	ldrb	r2, [r5, r2]
 802256e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8022572:	2800      	cmp	r0, #0
 8022574:	f000 80c0 	beq.w	80226f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8022578:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802257c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022580:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022582:	b151      	cbz	r1, 802259a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8022584:	eb0a 0203 	add.w	r2, sl, r3
 8022588:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802258c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022590:	9309      	str	r3, [sp, #36]	@ 0x24
 8022592:	7853      	ldrb	r3, [r2, #1]
 8022594:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022598:	930c      	str	r3, [sp, #48]	@ 0x30
 802259a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802259c:	fb10 f201 	smulbb	r2, r0, r1
 80225a0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80225a2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80225a6:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80225aa:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80225ae:	10d2      	asrs	r2, r2, #3
 80225b0:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80225b4:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 80225b8:	ea4c 0c03 	orr.w	ip, ip, r3
 80225bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80225be:	041b      	lsls	r3, r3, #16
 80225c0:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80225c4:	432b      	orrs	r3, r5
 80225c6:	4353      	muls	r3, r2
 80225c8:	fb0a 330c 	mla	r3, sl, ip, r3
 80225cc:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80225d0:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80225d4:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80225d8:	ea4c 0e0e 	orr.w	lr, ip, lr
 80225dc:	f1c1 0c10 	rsb	ip, r1, #16
 80225e0:	ebac 0c00 	sub.w	ip, ip, r0
 80225e4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80225e8:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80225ec:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80225f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80225f2:	0418      	lsls	r0, r3, #16
 80225f4:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80225f8:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80225fc:	4318      	orrs	r0, r3
 80225fe:	fb02 c200 	mla	r2, r2, r0, ip
 8022602:	0d53      	lsrs	r3, r2, #21
 8022604:	0952      	lsrs	r2, r2, #5
 8022606:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802260a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802260e:	431a      	orrs	r2, r3
 8022610:	f8a8 2000 	strh.w	r2, [r8]
 8022614:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022616:	f108 0802 	add.w	r8, r8, #2
 802261a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802261e:	441c      	add	r4, r3
 8022620:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022622:	441e      	add	r6, r3
 8022624:	e77c      	b.n	8022520 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022626:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022628:	f109 0902 	add.w	r9, r9, #2
 802262c:	441c      	add	r4, r3
 802262e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022630:	441e      	add	r6, r3
 8022632:	9b06      	ldr	r3, [sp, #24]
 8022634:	3b01      	subs	r3, #1
 8022636:	9306      	str	r3, [sp, #24]
 8022638:	e752      	b.n	80224e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802263a:	d020      	beq.n	802267e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802263c:	9b06      	ldr	r3, [sp, #24]
 802263e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8022640:	3b01      	subs	r3, #1
 8022642:	fb00 4003 	mla	r0, r0, r3, r4
 8022646:	1400      	asrs	r0, r0, #16
 8022648:	f53f af67 	bmi.w	802251a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802264c:	3901      	subs	r1, #1
 802264e:	4288      	cmp	r0, r1
 8022650:	f6bf af63 	bge.w	802251a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022654:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8022656:	fb01 6303 	mla	r3, r1, r3, r6
 802265a:	141b      	asrs	r3, r3, #16
 802265c:	f53f af5d 	bmi.w	802251a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022660:	3a01      	subs	r2, #1
 8022662:	4293      	cmp	r3, r2
 8022664:	f6bf af59 	bge.w	802251a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022668:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802266c:	46ca      	mov	sl, r9
 802266e:	f1b8 0f00 	cmp.w	r8, #0
 8022672:	dc67      	bgt.n	8022744 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8022674:	9b06      	ldr	r3, [sp, #24]
 8022676:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802267a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802267e:	9b08      	ldr	r3, [sp, #32]
 8022680:	2b00      	cmp	r3, #0
 8022682:	f340 80d7 	ble.w	8022834 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8022686:	ee30 0a04 	vadd.f32	s0, s0, s8
 802268a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802268c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022690:	eeb0 6a62 	vmov.f32	s12, s5
 8022694:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022698:	ee31 1a05 	vadd.f32	s2, s2, s10
 802269c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80226a0:	ee16 4a10 	vmov	r4, s12
 80226a4:	eeb0 6a43 	vmov.f32	s12, s6
 80226a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80226ac:	ee16 6a10 	vmov	r6, s12
 80226b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80226b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80226b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80226bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80226c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80226c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80226c8:	ee12 2a90 	vmov	r2, s5
 80226cc:	eef0 2a47 	vmov.f32	s5, s14
 80226d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80226d4:	ee13 2a10 	vmov	r2, s6
 80226d8:	931f      	str	r3, [sp, #124]	@ 0x7c
 80226da:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80226dc:	eeb0 3a67 	vmov.f32	s6, s15
 80226e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80226e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80226e6:	9b08      	ldr	r3, [sp, #32]
 80226e8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80226ea:	3b01      	subs	r3, #1
 80226ec:	9308      	str	r3, [sp, #32]
 80226ee:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80226f0:	bf08      	it	eq
 80226f2:	4613      	moveq	r3, r2
 80226f4:	9306      	str	r3, [sp, #24]
 80226f6:	e6e4      	b.n	80224c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80226f8:	2900      	cmp	r1, #0
 80226fa:	f43f af4e 	beq.w	802259a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80226fe:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8022702:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022706:	9309      	str	r3, [sp, #36]	@ 0x24
 8022708:	e747      	b.n	802259a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802270a:	f112 0a01 	adds.w	sl, r2, #1
 802270e:	d481      	bmi.n	8022614 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022710:	4553      	cmp	r3, sl
 8022712:	f6ff af7f 	blt.w	8022614 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022716:	f11c 0a01 	adds.w	sl, ip, #1
 802271a:	f53f af7b 	bmi.w	8022614 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802271e:	45d6      	cmp	lr, sl
 8022720:	f6ff af78 	blt.w	8022614 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022724:	b21b      	sxth	r3, r3
 8022726:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 802272a:	fa0f f28e 	sxth.w	r2, lr
 802272e:	9300      	str	r3, [sp, #0]
 8022730:	463b      	mov	r3, r7
 8022732:	9201      	str	r2, [sp, #4]
 8022734:	9a07      	ldr	r2, [sp, #28]
 8022736:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802273a:	4641      	mov	r1, r8
 802273c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802273e:	f7ff fe21 	bl	8022384 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8022742:	e767      	b.n	8022614 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022744:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022746:	1422      	asrs	r2, r4, #16
 8022748:	1431      	asrs	r1, r6, #16
 802274a:	9d07      	ldr	r5, [sp, #28]
 802274c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022750:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8022754:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022758:	fb03 2101 	mla	r1, r3, r1, r2
 802275c:	9a07      	ldr	r2, [sp, #28]
 802275e:	440a      	add	r2, r1
 8022760:	5c69      	ldrb	r1, [r5, r1]
 8022762:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8022766:	f1be 0f00 	cmp.w	lr, #0
 802276a:	d05c      	beq.n	8022826 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 802276c:	f892 c001 	ldrb.w	ip, [r2, #1]
 8022770:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8022774:	950d      	str	r5, [sp, #52]	@ 0x34
 8022776:	b150      	cbz	r0, 802278e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8022778:	eb02 0c03 	add.w	ip, r2, r3
 802277c:	5cd3      	ldrb	r3, [r2, r3]
 802277e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022782:	930a      	str	r3, [sp, #40]	@ 0x28
 8022784:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022788:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802278c:	930e      	str	r3, [sp, #56]	@ 0x38
 802278e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022790:	fb1e f200 	smulbb	r2, lr, r0
 8022794:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8022796:	f108 38ff 	add.w	r8, r8, #4294967295
 802279a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802279e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80227a2:	10d2      	asrs	r2, r2, #3
 80227a4:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 80227a8:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80227ac:	ea4c 0c03 	orr.w	ip, ip, r3
 80227b0:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80227b4:	9311      	str	r3, [sp, #68]	@ 0x44
 80227b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80227b8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80227ba:	041b      	lsls	r3, r3, #16
 80227bc:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80227c0:	ea43 030b 	orr.w	r3, r3, fp
 80227c4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80227c8:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80227cc:	4353      	muls	r3, r2
 80227ce:	fb05 3c0c 	mla	ip, r5, ip, r3
 80227d2:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 80227d6:	ea43 0b01 	orr.w	fp, r3, r1
 80227da:	f1c0 0110 	rsb	r1, r0, #16
 80227de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80227e0:	eba1 0e0e 	sub.w	lr, r1, lr
 80227e4:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80227e8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80227ec:	fb0e cc0b 	mla	ip, lr, fp, ip
 80227f0:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80227f4:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 80227f8:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80227fc:	ea4b 0e0e 	orr.w	lr, fp, lr
 8022800:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022804:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8022808:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802280c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022810:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8022814:	ea43 0c0c 	orr.w	ip, r3, ip
 8022818:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802281a:	441c      	add	r4, r3
 802281c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802281e:	f82a cb02 	strh.w	ip, [sl], #2
 8022822:	441e      	add	r6, r3
 8022824:	e723      	b.n	802266e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8022826:	2800      	cmp	r0, #0
 8022828:	d0b1      	beq.n	802278e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802282a:	5cd3      	ldrb	r3, [r2, r3]
 802282c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022830:	930a      	str	r3, [sp, #40]	@ 0x28
 8022832:	e7ac      	b.n	802278e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8022834:	b013      	add	sp, #76	@ 0x4c
 8022836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802283a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802283a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802283e:	880d      	ldrh	r5, [r1, #0]
 8022840:	b087      	sub	sp, #28
 8022842:	10ef      	asrs	r7, r5, #3
 8022844:	9103      	str	r1, [sp, #12]
 8022846:	ea4f 2a25 	mov.w	sl, r5, asr #8
 802284a:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 802284e:	00ed      	lsls	r5, r5, #3
 8022850:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8022854:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 8022858:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 802285c:	b2ed      	uxtb	r5, r5
 802285e:	9701      	str	r7, [sp, #4]
 8022860:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8022864:	9502      	str	r5, [sp, #8]
 8022866:	9d01      	ldr	r5, [sp, #4]
 8022868:	9902      	ldr	r1, [sp, #8]
 802286a:	022d      	lsls	r5, r5, #8
 802286c:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 8022870:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 8022874:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8022878:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 802287c:	430d      	orrs	r5, r1
 802287e:	fb06 0709 	mla	r7, r6, r9, r0
 8022882:	2e00      	cmp	r6, #0
 8022884:	9505      	str	r5, [sp, #20]
 8022886:	eb02 0c07 	add.w	ip, r2, r7
 802288a:	f2c0 80b6 	blt.w	80229fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 802288e:	45b3      	cmp	fp, r6
 8022890:	f340 80b3 	ble.w	80229fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8022894:	2800      	cmp	r0, #0
 8022896:	f2c0 80ae 	blt.w	80229f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 802289a:	4581      	cmp	r9, r0
 802289c:	f340 80ab 	ble.w	80229f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80228a0:	5dd7      	ldrb	r7, [r2, r7]
 80228a2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80228a6:	441f      	add	r7, r3
 80228a8:	1c42      	adds	r2, r0, #1
 80228aa:	f100 80a9 	bmi.w	8022a00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80228ae:	4591      	cmp	r9, r2
 80228b0:	f340 80a6 	ble.w	8022a00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80228b4:	2c00      	cmp	r4, #0
 80228b6:	f000 80a3 	beq.w	8022a00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80228ba:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80228be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80228c2:	441d      	add	r5, r3
 80228c4:	3601      	adds	r6, #1
 80228c6:	f100 809f 	bmi.w	8022a08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80228ca:	45b3      	cmp	fp, r6
 80228cc:	f340 809c 	ble.w	8022a08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80228d0:	f1be 0f00 	cmp.w	lr, #0
 80228d4:	f000 8098 	beq.w	8022a08 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80228d8:	2800      	cmp	r0, #0
 80228da:	f2c0 8093 	blt.w	8022a04 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80228de:	4581      	cmp	r9, r0
 80228e0:	f340 8090 	ble.w	8022a04 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80228e4:	f81c 6009 	ldrb.w	r6, [ip, r9]
 80228e8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80228ec:	441e      	add	r6, r3
 80228ee:	3001      	adds	r0, #1
 80228f0:	f100 808d 	bmi.w	8022a0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80228f4:	4581      	cmp	r9, r0
 80228f6:	f340 808a 	ble.w	8022a0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80228fa:	2c00      	cmp	r4, #0
 80228fc:	f000 8087 	beq.w	8022a0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8022900:	44e1      	add	r9, ip
 8022902:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022906:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802290a:	4413      	add	r3, r2
 802290c:	b2a4      	uxth	r4, r4
 802290e:	f897 c002 	ldrb.w	ip, [r7, #2]
 8022912:	fa1f fe8e 	uxth.w	lr, lr
 8022916:	9901      	ldr	r1, [sp, #4]
 8022918:	fb04 fb0e 	mul.w	fp, r4, lr
 802291c:	0124      	lsls	r4, r4, #4
 802291e:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8022922:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 8022926:	eba4 040b 	sub.w	r4, r4, fp
 802292a:	fa1f f08e 	uxth.w	r0, lr
 802292e:	b2a2      	uxth	r2, r4
 8022930:	78ac      	ldrb	r4, [r5, #2]
 8022932:	eba9 0900 	sub.w	r9, r9, r0
 8022936:	fa1f fe88 	uxth.w	lr, r8
 802293a:	4354      	muls	r4, r2
 802293c:	ea6f 0808 	mvn.w	r8, r8
 8022940:	fa1f f989 	uxth.w	r9, r9
 8022944:	fa5f f888 	uxtb.w	r8, r8
 8022948:	fb09 440c 	mla	r4, r9, ip, r4
 802294c:	f896 c002 	ldrb.w	ip, [r6, #2]
 8022950:	fb1a fa08 	smulbb	sl, sl, r8
 8022954:	fb00 440c 	mla	r4, r0, ip, r4
 8022958:	f893 c002 	ldrb.w	ip, [r3, #2]
 802295c:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8022960:	787c      	ldrb	r4, [r7, #1]
 8022962:	783f      	ldrb	r7, [r7, #0]
 8022964:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022968:	fb0c ac0e 	mla	ip, ip, lr, sl
 802296c:	f895 a001 	ldrb.w	sl, [r5, #1]
 8022970:	782d      	ldrb	r5, [r5, #0]
 8022972:	fb02 fa0a 	mul.w	sl, r2, sl
 8022976:	fa1f fc8c 	uxth.w	ip, ip
 802297a:	436a      	muls	r2, r5
 802297c:	7835      	ldrb	r5, [r6, #0]
 802297e:	fb09 aa04 	mla	sl, r9, r4, sl
 8022982:	7874      	ldrb	r4, [r6, #1]
 8022984:	fb09 2207 	mla	r2, r9, r7, r2
 8022988:	fb00 aa04 	mla	sl, r0, r4, sl
 802298c:	785c      	ldrb	r4, [r3, #1]
 802298e:	fb00 2005 	mla	r0, r0, r5, r2
 8022992:	781b      	ldrb	r3, [r3, #0]
 8022994:	fb0b a404 	mla	r4, fp, r4, sl
 8022998:	fb11 fa08 	smulbb	sl, r1, r8
 802299c:	fb0b 0b03 	mla	fp, fp, r3, r0
 80229a0:	9b02      	ldr	r3, [sp, #8]
 80229a2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80229a6:	fb13 f808 	smulbb	r8, r3, r8
 80229aa:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80229ae:	fb04 a40e 	mla	r4, r4, lr, sl
 80229b2:	f10c 0301 	add.w	r3, ip, #1
 80229b6:	fb0b 8e0e 	mla	lr, fp, lr, r8
 80229ba:	b2a4      	uxth	r4, r4
 80229bc:	fa1f fe8e 	uxth.w	lr, lr
 80229c0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80229c4:	f104 0a01 	add.w	sl, r4, #1
 80229c8:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 80229cc:	f10e 0c01 	add.w	ip, lr, #1
 80229d0:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80229d4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80229d8:	0964      	lsrs	r4, r4, #5
 80229da:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80229de:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80229e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80229e6:	9b03      	ldr	r3, [sp, #12]
 80229e8:	ea4c 0c04 	orr.w	ip, ip, r4
 80229ec:	f8a3 c000 	strh.w	ip, [r3]
 80229f0:	b007      	add	sp, #28
 80229f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229f6:	af05      	add	r7, sp, #20
 80229f8:	e756      	b.n	80228a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 80229fa:	ad05      	add	r5, sp, #20
 80229fc:	462f      	mov	r7, r5
 80229fe:	e761      	b.n	80228c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8022a00:	ad05      	add	r5, sp, #20
 8022a02:	e75f      	b.n	80228c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8022a04:	ae05      	add	r6, sp, #20
 8022a06:	e772      	b.n	80228ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8022a08:	ab05      	add	r3, sp, #20
 8022a0a:	461e      	mov	r6, r3
 8022a0c:	e77e      	b.n	802290c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8022a0e:	ab05      	add	r3, sp, #20
 8022a10:	e77c      	b.n	802290c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08022a12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022a12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a16:	b095      	sub	sp, #84	@ 0x54
 8022a18:	9212      	str	r2, [sp, #72]	@ 0x48
 8022a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8022a1c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8022a1e:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8022a22:	9013      	str	r0, [sp, #76]	@ 0x4c
 8022a24:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022a26:	6850      	ldr	r0, [r2, #4]
 8022a28:	910e      	str	r1, [sp, #56]	@ 0x38
 8022a2a:	6812      	ldr	r2, [r2, #0]
 8022a2c:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 8022a30:	fb00 1303 	mla	r3, r0, r3, r1
 8022a34:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022a38:	930a      	str	r3, [sp, #40]	@ 0x28
 8022a3a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022a3c:	681b      	ldr	r3, [r3, #0]
 8022a3e:	930d      	str	r3, [sp, #52]	@ 0x34
 8022a40:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022a42:	685c      	ldr	r4, [r3, #4]
 8022a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022a46:	3404      	adds	r4, #4
 8022a48:	43db      	mvns	r3, r3
 8022a4a:	b2db      	uxtb	r3, r3
 8022a4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022a4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022a50:	2b00      	cmp	r3, #0
 8022a52:	dc03      	bgt.n	8022a5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022a54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022a56:	2b00      	cmp	r3, #0
 8022a58:	f340 8255 	ble.w	8022f06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8022a5c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022a5e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022a62:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022a66:	1e48      	subs	r0, r1, #1
 8022a68:	1e55      	subs	r5, r2, #1
 8022a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022a6c:	2b00      	cmp	r3, #0
 8022a6e:	f340 80f9 	ble.w	8022c64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8022a72:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8022a74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022a76:	1436      	asrs	r6, r6, #16
 8022a78:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022a7c:	d406      	bmi.n	8022a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022a7e:	4286      	cmp	r6, r0
 8022a80:	da04      	bge.n	8022a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022a82:	2b00      	cmp	r3, #0
 8022a84:	db02      	blt.n	8022a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022a86:	42ab      	cmp	r3, r5
 8022a88:	f2c0 80ed 	blt.w	8022c66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8022a8c:	3601      	adds	r6, #1
 8022a8e:	f100 80da 	bmi.w	8022c46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022a92:	42b1      	cmp	r1, r6
 8022a94:	f2c0 80d7 	blt.w	8022c46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022a98:	3301      	adds	r3, #1
 8022a9a:	f100 80d4 	bmi.w	8022c46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022a9e:	429a      	cmp	r2, r3
 8022aa0:	f2c0 80d1 	blt.w	8022c46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022aa6:	9311      	str	r3, [sp, #68]	@ 0x44
 8022aa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022aaa:	930c      	str	r3, [sp, #48]	@ 0x30
 8022aac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022aae:	2b00      	cmp	r3, #0
 8022ab0:	f340 80fa 	ble.w	8022ca8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8022ab4:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8022ab6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022ab8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022aba:	68c6      	ldr	r6, [r0, #12]
 8022abc:	141d      	asrs	r5, r3, #16
 8022abe:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8022ac0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022ac4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022ac6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022ac8:	1400      	asrs	r0, r0, #16
 8022aca:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022ace:	6892      	ldr	r2, [r2, #8]
 8022ad0:	f100 813e 	bmi.w	8022d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022ad4:	1e57      	subs	r7, r2, #1
 8022ad6:	42b8      	cmp	r0, r7
 8022ad8:	f280 813a 	bge.w	8022d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022adc:	2d00      	cmp	r5, #0
 8022ade:	f2c0 8137 	blt.w	8022d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022ae2:	1e77      	subs	r7, r6, #1
 8022ae4:	42bd      	cmp	r5, r7
 8022ae6:	f280 8133 	bge.w	8022d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022aea:	b212      	sxth	r2, r2
 8022aec:	fb05 0002 	mla	r0, r5, r2, r0
 8022af0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8022af2:	f815 a000 	ldrb.w	sl, [r5, r0]
 8022af6:	182e      	adds	r6, r5, r0
 8022af8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8022afc:	eb04 050a 	add.w	r5, r4, sl
 8022b00:	2b00      	cmp	r3, #0
 8022b02:	f000 8117 	beq.w	8022d34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022b06:	f896 c001 	ldrb.w	ip, [r6, #1]
 8022b0a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022b0e:	44a4      	add	ip, r4
 8022b10:	2900      	cmp	r1, #0
 8022b12:	f000 8117 	beq.w	8022d44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022b16:	18b0      	adds	r0, r6, r2
 8022b18:	5cb2      	ldrb	r2, [r6, r2]
 8022b1a:	7840      	ldrb	r0, [r0, #1]
 8022b1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022b20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022b24:	4422      	add	r2, r4
 8022b26:	4420      	add	r0, r4
 8022b28:	b29b      	uxth	r3, r3
 8022b2a:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8022b2e:	b289      	uxth	r1, r1
 8022b30:	f895 b002 	ldrb.w	fp, [r5, #2]
 8022b34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022b36:	fb03 f901 	mul.w	r9, r3, r1
 8022b3a:	011b      	lsls	r3, r3, #4
 8022b3c:	f8b6 e000 	ldrh.w	lr, [r6]
 8022b40:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022b44:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8022b48:	eba3 0309 	sub.w	r3, r3, r9
 8022b4c:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 8022b50:	b289      	uxth	r1, r1
 8022b52:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8022b56:	b29b      	uxth	r3, r3
 8022b58:	eba8 0801 	sub.w	r8, r8, r1
 8022b5c:	435f      	muls	r7, r3
 8022b5e:	fa1f f888 	uxth.w	r8, r8
 8022b62:	9310      	str	r3, [sp, #64]	@ 0x40
 8022b64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022b66:	fb08 770b 	mla	r7, r8, fp, r7
 8022b6a:	f892 b002 	ldrb.w	fp, [r2, #2]
 8022b6e:	fb01 770b 	mla	r7, r1, fp, r7
 8022b72:	f890 b002 	ldrb.w	fp, [r0, #2]
 8022b76:	fb09 770b 	mla	r7, r9, fp, r7
 8022b7a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8022b7e:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8022b82:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022b86:	fb1b fb03 	smulbb	fp, fp, r3
 8022b8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022b8c:	fb07 b706 	mla	r7, r7, r6, fp
 8022b90:	f895 b001 	ldrb.w	fp, [r5, #1]
 8022b94:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8022b98:	f89c c000 	ldrb.w	ip, [ip]
 8022b9c:	b2bf      	uxth	r7, r7
 8022b9e:	435d      	muls	r5, r3
 8022ba0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022ba2:	fb08 550b 	mla	r5, r8, fp, r5
 8022ba6:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022baa:	fb01 550b 	mla	r5, r1, fp, r5
 8022bae:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022bb2:	fb09 550b 	mla	r5, r9, fp, r5
 8022bb6:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8022bba:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022bbe:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8022bc2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022bc6:	fa5f fe8e 	uxtb.w	lr, lr
 8022bca:	fb1b fb03 	smulbb	fp, fp, r3
 8022bce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022bd0:	fb03 f30c 	mul.w	r3, r3, ip
 8022bd4:	f892 c000 	ldrb.w	ip, [r2]
 8022bd8:	fb05 b506 	mla	r5, r5, r6, fp
 8022bdc:	fb08 330a 	mla	r3, r8, sl, r3
 8022be0:	b2ad      	uxth	r5, r5
 8022be2:	fb01 330c 	mla	r3, r1, ip, r3
 8022be6:	f890 c000 	ldrb.w	ip, [r0]
 8022bea:	f105 0b01 	add.w	fp, r5, #1
 8022bee:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022bf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022bf4:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022bf8:	fb1e fe03 	smulbb	lr, lr, r3
 8022bfc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022c00:	1c7b      	adds	r3, r7, #1
 8022c02:	096d      	lsrs	r5, r5, #5
 8022c04:	fb0c e606 	mla	r6, ip, r6, lr
 8022c08:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8022c0c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022c10:	b2b6      	uxth	r6, r6
 8022c12:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 8022c16:	1c77      	adds	r7, r6, #1
 8022c18:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8022c1c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022c20:	431f      	orrs	r7, r3
 8022c22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022c24:	433d      	orrs	r5, r7
 8022c26:	801d      	strh	r5, [r3, #0]
 8022c28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022c2a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8022c2c:	3302      	adds	r3, #2
 8022c2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8022c30:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022c32:	4413      	add	r3, r2
 8022c34:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8022c36:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022c38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022c3a:	4413      	add	r3, r2
 8022c3c:	9320      	str	r3, [sp, #128]	@ 0x80
 8022c3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022c40:	3b01      	subs	r3, #1
 8022c42:	9311      	str	r3, [sp, #68]	@ 0x44
 8022c44:	e732      	b.n	8022aac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022c46:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022c48:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8022c4a:	4433      	add	r3, r6
 8022c4c:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8022c4e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022c50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022c52:	4433      	add	r3, r6
 8022c54:	9320      	str	r3, [sp, #128]	@ 0x80
 8022c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022c58:	3b01      	subs	r3, #1
 8022c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8022c5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022c5e:	3302      	adds	r3, #2
 8022c60:	930a      	str	r3, [sp, #40]	@ 0x28
 8022c62:	e702      	b.n	8022a6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022c64:	d027      	beq.n	8022cb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8022c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022c68:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8022c6a:	3b01      	subs	r3, #1
 8022c6c:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8022c6e:	fb00 5003 	mla	r0, r0, r3, r5
 8022c72:	1400      	asrs	r0, r0, #16
 8022c74:	f53f af16 	bmi.w	8022aa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022c78:	3901      	subs	r1, #1
 8022c7a:	4288      	cmp	r0, r1
 8022c7c:	f6bf af12 	bge.w	8022aa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022c80:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8022c82:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8022c84:	fb01 0303 	mla	r3, r1, r3, r0
 8022c88:	141b      	asrs	r3, r3, #16
 8022c8a:	f53f af0b 	bmi.w	8022aa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022c8e:	3a01      	subs	r2, #1
 8022c90:	4293      	cmp	r3, r2
 8022c92:	f6bf af07 	bge.w	8022aa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022c98:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 8022c9c:	9311      	str	r3, [sp, #68]	@ 0x44
 8022c9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022ca0:	930c      	str	r3, [sp, #48]	@ 0x30
 8022ca2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022ca4:	2b00      	cmp	r3, #0
 8022ca6:	dc70      	bgt.n	8022d8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8022ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022caa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022cac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022cb0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022cb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8022cb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022cb8:	2b00      	cmp	r3, #0
 8022cba:	f340 8124 	ble.w	8022f06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8022cbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022cc2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022cc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022cc8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022ccc:	eef0 6a62 	vmov.f32	s13, s5
 8022cd0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022cd4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022cd8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022cdc:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8022ce0:	eef0 6a43 	vmov.f32	s13, s6
 8022ce4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ce8:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 8022cec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022cf0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022cf4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022cf8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022cfc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022d00:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022d04:	ee12 2a90 	vmov	r2, s5
 8022d08:	eef0 2a47 	vmov.f32	s5, s14
 8022d0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d10:	ee13 2a10 	vmov	r2, s6
 8022d14:	9321      	str	r3, [sp, #132]	@ 0x84
 8022d16:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022d18:	eeb0 3a67 	vmov.f32	s6, s15
 8022d1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d20:	9322      	str	r3, [sp, #136]	@ 0x88
 8022d22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022d24:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022d26:	3b01      	subs	r3, #1
 8022d28:	930e      	str	r3, [sp, #56]	@ 0x38
 8022d2a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022d2c:	bf08      	it	eq
 8022d2e:	4613      	moveq	r3, r2
 8022d30:	9309      	str	r3, [sp, #36]	@ 0x24
 8022d32:	e68c      	b.n	8022a4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022d34:	b149      	cbz	r1, 8022d4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8022d36:	5cb2      	ldrb	r2, [r6, r2]
 8022d38:	4628      	mov	r0, r5
 8022d3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022d3e:	4422      	add	r2, r4
 8022d40:	46ac      	mov	ip, r5
 8022d42:	e6f1      	b.n	8022b28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022d44:	4628      	mov	r0, r5
 8022d46:	462a      	mov	r2, r5
 8022d48:	e6ee      	b.n	8022b28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022d4a:	4628      	mov	r0, r5
 8022d4c:	462a      	mov	r2, r5
 8022d4e:	e7f7      	b.n	8022d40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8022d50:	1c47      	adds	r7, r0, #1
 8022d52:	f53f af69 	bmi.w	8022c28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022d56:	42ba      	cmp	r2, r7
 8022d58:	f6ff af66 	blt.w	8022c28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022d5c:	1c6f      	adds	r7, r5, #1
 8022d5e:	f53f af63 	bmi.w	8022c28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022d62:	42be      	cmp	r6, r7
 8022d64:	f6ff af60 	blt.w	8022c28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022d68:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8022d6a:	b236      	sxth	r6, r6
 8022d6c:	b212      	sxth	r2, r2
 8022d6e:	9002      	str	r0, [sp, #8]
 8022d70:	9601      	str	r6, [sp, #4]
 8022d72:	9200      	str	r2, [sp, #0]
 8022d74:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8022d76:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8022d7a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8022d7e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 8022d82:	4623      	mov	r3, r4
 8022d84:	f7ff fd59 	bl	802283a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8022d88:	e74e      	b.n	8022c28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022d8a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022d8c:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8022d8e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022d92:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8022d94:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022d96:	1400      	asrs	r0, r0, #16
 8022d98:	142d      	asrs	r5, r5, #16
 8022d9a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022d9c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022da0:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022da4:	fb02 5000 	mla	r0, r2, r0, r5
 8022da8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8022daa:	f815 9000 	ldrb.w	r9, [r5, r0]
 8022dae:	182e      	adds	r6, r5, r0
 8022db0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8022db4:	eb04 0509 	add.w	r5, r4, r9
 8022db8:	2b00      	cmp	r3, #0
 8022dba:	f000 8096 	beq.w	8022eea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8022dbe:	7877      	ldrb	r7, [r6, #1]
 8022dc0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022dc4:	4427      	add	r7, r4
 8022dc6:	2900      	cmp	r1, #0
 8022dc8:	f000 8097 	beq.w	8022efa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8022dcc:	18b0      	adds	r0, r6, r2
 8022dce:	5cb2      	ldrb	r2, [r6, r2]
 8022dd0:	7840      	ldrb	r0, [r0, #1]
 8022dd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022dd6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022dda:	4422      	add	r2, r4
 8022ddc:	4420      	add	r0, r4
 8022dde:	b29b      	uxth	r3, r3
 8022de0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022de2:	b289      	uxth	r1, r1
 8022de4:	f895 b002 	ldrb.w	fp, [r5, #2]
 8022de8:	f8b6 c000 	ldrh.w	ip, [r6]
 8022dec:	fb03 f801 	mul.w	r8, r3, r1
 8022df0:	011b      	lsls	r3, r3, #4
 8022df2:	78be      	ldrb	r6, [r7, #2]
 8022df4:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8022df8:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8022dfc:	eba3 0308 	sub.w	r3, r3, r8
 8022e00:	f814 9009 	ldrb.w	r9, [r4, r9]
 8022e04:	b289      	uxth	r1, r1
 8022e06:	b29b      	uxth	r3, r3
 8022e08:	ebae 0e01 	sub.w	lr, lr, r1
 8022e0c:	435e      	muls	r6, r3
 8022e0e:	fa1f fe8e 	uxth.w	lr, lr
 8022e12:	9310      	str	r3, [sp, #64]	@ 0x40
 8022e14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022e16:	fb0e 660b 	mla	r6, lr, fp, r6
 8022e1a:	f892 b002 	ldrb.w	fp, [r2, #2]
 8022e1e:	fb01 660b 	mla	r6, r1, fp, r6
 8022e22:	f890 b002 	ldrb.w	fp, [r0, #2]
 8022e26:	fb08 660b 	mla	r6, r8, fp, r6
 8022e2a:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8022e2e:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8022e32:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022e36:	fb1b fb03 	smulbb	fp, fp, r3
 8022e3a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022e3c:	fb06 b60a 	mla	r6, r6, sl, fp
 8022e40:	f895 b001 	ldrb.w	fp, [r5, #1]
 8022e44:	787d      	ldrb	r5, [r7, #1]
 8022e46:	783f      	ldrb	r7, [r7, #0]
 8022e48:	b2b6      	uxth	r6, r6
 8022e4a:	435d      	muls	r5, r3
 8022e4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022e4e:	fb0e 550b 	mla	r5, lr, fp, r5
 8022e52:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022e56:	fb01 550b 	mla	r5, r1, fp, r5
 8022e5a:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022e5e:	fb08 550b 	mla	r5, r8, fp, r5
 8022e62:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8022e66:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022e6a:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8022e6e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022e72:	fa5f fc8c 	uxtb.w	ip, ip
 8022e76:	fb1b fb03 	smulbb	fp, fp, r3
 8022e7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022e7c:	437b      	muls	r3, r7
 8022e7e:	7817      	ldrb	r7, [r2, #0]
 8022e80:	fb05 b50a 	mla	r5, r5, sl, fp
 8022e84:	fb0e 3309 	mla	r3, lr, r9, r3
 8022e88:	b2ad      	uxth	r5, r5
 8022e8a:	fb01 3307 	mla	r3, r1, r7, r3
 8022e8e:	7807      	ldrb	r7, [r0, #0]
 8022e90:	f105 0b01 	add.w	fp, r5, #1
 8022e94:	fb08 3707 	mla	r7, r8, r7, r3
 8022e98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022e9a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022e9e:	fb1c fc03 	smulbb	ip, ip, r3
 8022ea2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022ea6:	1c73      	adds	r3, r6, #1
 8022ea8:	096d      	lsrs	r5, r5, #5
 8022eaa:	fb07 c70a 	mla	r7, r7, sl, ip
 8022eae:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8022eb2:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022eb6:	b2bf      	uxth	r7, r7
 8022eb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022eba:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8022ebe:	1c7a      	adds	r2, r7, #1
 8022ec0:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8022ec4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022ec8:	4316      	orrs	r6, r2
 8022eca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8022ecc:	432e      	orrs	r6, r5
 8022ece:	f823 6b02 	strh.w	r6, [r3], #2
 8022ed2:	930c      	str	r3, [sp, #48]	@ 0x30
 8022ed4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022ed6:	4413      	add	r3, r2
 8022ed8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8022eda:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022edc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022ede:	4413      	add	r3, r2
 8022ee0:	9320      	str	r3, [sp, #128]	@ 0x80
 8022ee2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022ee4:	3b01      	subs	r3, #1
 8022ee6:	9311      	str	r3, [sp, #68]	@ 0x44
 8022ee8:	e6db      	b.n	8022ca2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8022eea:	b149      	cbz	r1, 8022f00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8022eec:	5cb2      	ldrb	r2, [r6, r2]
 8022eee:	4628      	mov	r0, r5
 8022ef0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022ef4:	4422      	add	r2, r4
 8022ef6:	462f      	mov	r7, r5
 8022ef8:	e771      	b.n	8022dde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022efa:	4628      	mov	r0, r5
 8022efc:	462a      	mov	r2, r5
 8022efe:	e76e      	b.n	8022dde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022f00:	4628      	mov	r0, r5
 8022f02:	462a      	mov	r2, r5
 8022f04:	e7f7      	b.n	8022ef6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8022f06:	b015      	add	sp, #84	@ 0x54
 8022f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022f0c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8022f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f10:	880f      	ldrh	r7, [r1, #0]
 8022f12:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8022f16:	023c      	lsls	r4, r7, #8
 8022f18:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8022f1c:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 8022f20:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 8022f24:	017c      	lsls	r4, r7, #5
 8022f26:	00ff      	lsls	r7, r7, #3
 8022f28:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8022f2c:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 8022f30:	b2ff      	uxtb	r7, r7
 8022f32:	ea4b 0404 	orr.w	r4, fp, r4
 8022f36:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 8022f3a:	4327      	orrs	r7, r4
 8022f3c:	fb05 ca0e 	mla	sl, r5, lr, ip
 8022f40:	2d00      	cmp	r5, #0
 8022f42:	9701      	str	r7, [sp, #4]
 8022f44:	eb02 080a 	add.w	r8, r2, sl
 8022f48:	db7e      	blt.n	8023048 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8022f4a:	45a9      	cmp	r9, r5
 8022f4c:	dd7c      	ble.n	8023048 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8022f4e:	f1bc 0f00 	cmp.w	ip, #0
 8022f52:	db77      	blt.n	8023044 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8022f54:	45e6      	cmp	lr, ip
 8022f56:	dd75      	ble.n	8023044 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8022f58:	f812 700a 	ldrb.w	r7, [r2, sl]
 8022f5c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022f60:	441f      	add	r7, r3
 8022f62:	f11c 0201 	adds.w	r2, ip, #1
 8022f66:	d472      	bmi.n	802304e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8022f68:	4596      	cmp	lr, r2
 8022f6a:	dd70      	ble.n	802304e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8022f6c:	2800      	cmp	r0, #0
 8022f6e:	d06e      	beq.n	802304e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8022f70:	f898 4001 	ldrb.w	r4, [r8, #1]
 8022f74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022f78:	441c      	add	r4, r3
 8022f7a:	3501      	adds	r5, #1
 8022f7c:	d46b      	bmi.n	8023056 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8022f7e:	45a9      	cmp	r9, r5
 8022f80:	dd69      	ble.n	8023056 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8022f82:	2e00      	cmp	r6, #0
 8022f84:	d067      	beq.n	8023056 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8022f86:	f1bc 0f00 	cmp.w	ip, #0
 8022f8a:	db62      	blt.n	8023052 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8022f8c:	45e6      	cmp	lr, ip
 8022f8e:	dd60      	ble.n	8023052 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8022f90:	f818 500e 	ldrb.w	r5, [r8, lr]
 8022f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022f98:	441d      	add	r5, r3
 8022f9a:	f11c 0201 	adds.w	r2, ip, #1
 8022f9e:	d45d      	bmi.n	802305c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8022fa0:	4596      	cmp	lr, r2
 8022fa2:	dd5b      	ble.n	802305c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8022fa4:	2800      	cmp	r0, #0
 8022fa6:	d059      	beq.n	802305c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8022fa8:	44c6      	add	lr, r8
 8022faa:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022fae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022fb2:	4413      	add	r3, r2
 8022fb4:	b280      	uxth	r0, r0
 8022fb6:	f897 e002 	ldrb.w	lr, [r7, #2]
 8022fba:	b2b2      	uxth	r2, r6
 8022fbc:	f897 9000 	ldrb.w	r9, [r7]
 8022fc0:	787f      	ldrb	r7, [r7, #1]
 8022fc2:	fb00 f602 	mul.w	r6, r0, r2
 8022fc6:	0100      	lsls	r0, r0, #4
 8022fc8:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8022fcc:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 8022fd0:	1b80      	subs	r0, r0, r6
 8022fd2:	fa1f fc82 	uxth.w	ip, r2
 8022fd6:	b282      	uxth	r2, r0
 8022fd8:	78a0      	ldrb	r0, [r4, #2]
 8022fda:	eba8 080c 	sub.w	r8, r8, ip
 8022fde:	4350      	muls	r0, r2
 8022fe0:	fa1f f888 	uxth.w	r8, r8
 8022fe4:	fb08 0e0e 	mla	lr, r8, lr, r0
 8022fe8:	78a8      	ldrb	r0, [r5, #2]
 8022fea:	fb0c e000 	mla	r0, ip, r0, lr
 8022fee:	f893 e002 	ldrb.w	lr, [r3, #2]
 8022ff2:	fb06 0e0e 	mla	lr, r6, lr, r0
 8022ff6:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 8022ffa:	f894 e000 	ldrb.w	lr, [r4]
 8022ffe:	fb02 fe0e 	mul.w	lr, r2, lr
 8023002:	fb08 e909 	mla	r9, r8, r9, lr
 8023006:	f895 e000 	ldrb.w	lr, [r5]
 802300a:	fb0c 990e 	mla	r9, ip, lr, r9
 802300e:	f893 e000 	ldrb.w	lr, [r3]
 8023012:	785b      	ldrb	r3, [r3, #1]
 8023014:	fb06 9e0e 	mla	lr, r6, lr, r9
 8023018:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802301c:	ea4e 0e00 	orr.w	lr, lr, r0
 8023020:	7860      	ldrb	r0, [r4, #1]
 8023022:	4350      	muls	r0, r2
 8023024:	786a      	ldrb	r2, [r5, #1]
 8023026:	fb08 0007 	mla	r0, r8, r7, r0
 802302a:	fb0c 0202 	mla	r2, ip, r2, r0
 802302e:	fb06 2303 	mla	r3, r6, r3, r2
 8023032:	095b      	lsrs	r3, r3, #5
 8023034:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023038:	ea4e 0303 	orr.w	r3, lr, r3
 802303c:	800b      	strh	r3, [r1, #0]
 802303e:	b003      	add	sp, #12
 8023040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023044:	af01      	add	r7, sp, #4
 8023046:	e78c      	b.n	8022f62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8023048:	ac01      	add	r4, sp, #4
 802304a:	4627      	mov	r7, r4
 802304c:	e795      	b.n	8022f7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802304e:	ac01      	add	r4, sp, #4
 8023050:	e793      	b.n	8022f7a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023052:	ad01      	add	r5, sp, #4
 8023054:	e7a1      	b.n	8022f9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8023056:	ab01      	add	r3, sp, #4
 8023058:	461d      	mov	r5, r3
 802305a:	e7ab      	b.n	8022fb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 802305c:	ab01      	add	r3, sp, #4
 802305e:	e7a9      	b.n	8022fb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08023060 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023064:	b08f      	sub	sp, #60	@ 0x3c
 8023066:	920c      	str	r2, [sp, #48]	@ 0x30
 8023068:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 802306a:	900d      	str	r0, [sp, #52]	@ 0x34
 802306c:	910a      	str	r1, [sp, #40]	@ 0x28
 802306e:	6850      	ldr	r0, [r2, #4]
 8023070:	9306      	str	r3, [sp, #24]
 8023072:	6812      	ldr	r2, [r2, #0]
 8023074:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 8023078:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 802307c:	fb00 1303 	mla	r3, r0, r3, r1
 8023080:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023084:	9307      	str	r3, [sp, #28]
 8023086:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023088:	681b      	ldr	r3, [r3, #0]
 802308a:	9308      	str	r3, [sp, #32]
 802308c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802308e:	685c      	ldr	r4, [r3, #4]
 8023090:	3404      	adds	r4, #4
 8023092:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023094:	2b00      	cmp	r3, #0
 8023096:	dc03      	bgt.n	80230a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8023098:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802309a:	2b00      	cmp	r3, #0
 802309c:	f340 81d5 	ble.w	802344a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80230a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80230a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80230a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80230aa:	1e48      	subs	r0, r1, #1
 80230ac:	1e56      	subs	r6, r2, #1
 80230ae:	9b06      	ldr	r3, [sp, #24]
 80230b0:	2b00      	cmp	r3, #0
 80230b2:	f340 80b6 	ble.w	8023222 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80230b6:	ea5f 472b 	movs.w	r7, fp, asr #16
 80230ba:	ea4f 4325 	mov.w	r3, r5, asr #16
 80230be:	d406      	bmi.n	80230ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80230c0:	4287      	cmp	r7, r0
 80230c2:	da04      	bge.n	80230ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80230c4:	2b00      	cmp	r3, #0
 80230c6:	db02      	blt.n	80230ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80230c8:	42b3      	cmp	r3, r6
 80230ca:	f2c0 80ab 	blt.w	8023224 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 80230ce:	3701      	adds	r7, #1
 80230d0:	f100 809c 	bmi.w	802320c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80230d4:	42b9      	cmp	r1, r7
 80230d6:	f2c0 8099 	blt.w	802320c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80230da:	3301      	adds	r3, #1
 80230dc:	f100 8096 	bmi.w	802320c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80230e0:	429a      	cmp	r2, r3
 80230e2:	f2c0 8093 	blt.w	802320c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80230e6:	9b06      	ldr	r3, [sp, #24]
 80230e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80230ea:	9b07      	ldr	r3, [sp, #28]
 80230ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80230ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80230f0:	2b00      	cmp	r3, #0
 80230f2:	f340 80b4 	ble.w	802325e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80230f6:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80230f8:	142e      	asrs	r6, r5, #16
 80230fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80230fc:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023100:	68c7      	ldr	r7, [r0, #12]
 8023102:	ea5f 402b 	movs.w	r0, fp, asr #16
 8023106:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802310a:	6892      	ldr	r2, [r2, #8]
 802310c:	f100 80fb 	bmi.w	8023306 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023110:	f102 3cff 	add.w	ip, r2, #4294967295
 8023114:	4560      	cmp	r0, ip
 8023116:	f280 80f6 	bge.w	8023306 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802311a:	2e00      	cmp	r6, #0
 802311c:	f2c0 80f3 	blt.w	8023306 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023120:	f107 3cff 	add.w	ip, r7, #4294967295
 8023124:	4566      	cmp	r6, ip
 8023126:	f280 80ee 	bge.w	8023306 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802312a:	b212      	sxth	r2, r2
 802312c:	fb06 0002 	mla	r0, r6, r2, r0
 8023130:	9e08      	ldr	r6, [sp, #32]
 8023132:	1837      	adds	r7, r6, r0
 8023134:	5c30      	ldrb	r0, [r6, r0]
 8023136:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 802313a:	eb04 0c08 	add.w	ip, r4, r8
 802313e:	2b00      	cmp	r3, #0
 8023140:	f000 80d3 	beq.w	80232ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8023144:	787e      	ldrb	r6, [r7, #1]
 8023146:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802314a:	4426      	add	r6, r4
 802314c:	2900      	cmp	r1, #0
 802314e:	f000 80d4 	beq.w	80232fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8023152:	18b8      	adds	r0, r7, r2
 8023154:	5cba      	ldrb	r2, [r7, r2]
 8023156:	7840      	ldrb	r0, [r0, #1]
 8023158:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802315c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023160:	4422      	add	r2, r4
 8023162:	4420      	add	r0, r4
 8023164:	b29b      	uxth	r3, r3
 8023166:	78b7      	ldrb	r7, [r6, #2]
 8023168:	b289      	uxth	r1, r1
 802316a:	f89c a002 	ldrb.w	sl, [ip, #2]
 802316e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023172:	fb03 f901 	mul.w	r9, r3, r1
 8023176:	011b      	lsls	r3, r3, #4
 8023178:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802317c:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8023180:	eba3 0309 	sub.w	r3, r3, r9
 8023184:	b289      	uxth	r1, r1
 8023186:	b29b      	uxth	r3, r3
 8023188:	ebae 0e01 	sub.w	lr, lr, r1
 802318c:	435f      	muls	r7, r3
 802318e:	fa1f fe8e 	uxth.w	lr, lr
 8023192:	fb0e 770a 	mla	r7, lr, sl, r7
 8023196:	f892 a002 	ldrb.w	sl, [r2, #2]
 802319a:	fb01 770a 	mla	r7, r1, sl, r7
 802319e:	f890 a002 	ldrb.w	sl, [r0, #2]
 80231a2:	fb09 7a0a 	mla	sl, r9, sl, r7
 80231a6:	f814 7008 	ldrb.w	r7, [r4, r8]
 80231aa:	f896 8000 	ldrb.w	r8, [r6]
 80231ae:	7876      	ldrb	r6, [r6, #1]
 80231b0:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 80231b4:	fb03 f808 	mul.w	r8, r3, r8
 80231b8:	4373      	muls	r3, r6
 80231ba:	fb0e 8807 	mla	r8, lr, r7, r8
 80231be:	7817      	ldrb	r7, [r2, #0]
 80231c0:	fb0e 330c 	mla	r3, lr, ip, r3
 80231c4:	fb01 8807 	mla	r8, r1, r7, r8
 80231c8:	7807      	ldrb	r7, [r0, #0]
 80231ca:	fb09 8707 	mla	r7, r9, r7, r8
 80231ce:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80231d2:	ea47 070a 	orr.w	r7, r7, sl
 80231d6:	f892 a001 	ldrb.w	sl, [r2, #1]
 80231da:	fb01 310a 	mla	r1, r1, sl, r3
 80231de:	f890 a001 	ldrb.w	sl, [r0, #1]
 80231e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231e4:	fb09 1a0a 	mla	sl, r9, sl, r1
 80231e8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80231ec:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80231f0:	ea47 070a 	orr.w	r7, r7, sl
 80231f4:	801f      	strh	r7, [r3, #0]
 80231f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231f8:	3302      	adds	r3, #2
 80231fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80231fc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80231fe:	449b      	add	fp, r3
 8023200:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023202:	441d      	add	r5, r3
 8023204:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023206:	3b01      	subs	r3, #1
 8023208:	930b      	str	r3, [sp, #44]	@ 0x2c
 802320a:	e770      	b.n	80230ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802320c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802320e:	449b      	add	fp, r3
 8023210:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023212:	441d      	add	r5, r3
 8023214:	9b06      	ldr	r3, [sp, #24]
 8023216:	3b01      	subs	r3, #1
 8023218:	9306      	str	r3, [sp, #24]
 802321a:	9b07      	ldr	r3, [sp, #28]
 802321c:	3302      	adds	r3, #2
 802321e:	9307      	str	r3, [sp, #28]
 8023220:	e745      	b.n	80230ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8023222:	d023      	beq.n	802326c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8023224:	9b06      	ldr	r3, [sp, #24]
 8023226:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8023228:	3b01      	subs	r3, #1
 802322a:	fb00 b003 	mla	r0, r0, r3, fp
 802322e:	1400      	asrs	r0, r0, #16
 8023230:	f53f af59 	bmi.w	80230e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023234:	3901      	subs	r1, #1
 8023236:	4288      	cmp	r0, r1
 8023238:	f6bf af55 	bge.w	80230e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802323c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 802323e:	fb01 5303 	mla	r3, r1, r3, r5
 8023242:	141b      	asrs	r3, r3, #16
 8023244:	f53f af4f 	bmi.w	80230e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023248:	3a01      	subs	r2, #1
 802324a:	4293      	cmp	r3, r2
 802324c:	f6bf af4b 	bge.w	80230e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023250:	9b06      	ldr	r3, [sp, #24]
 8023252:	9309      	str	r3, [sp, #36]	@ 0x24
 8023254:	9b07      	ldr	r3, [sp, #28]
 8023256:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802325a:	2b00      	cmp	r3, #0
 802325c:	dc70      	bgt.n	8023340 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802325e:	9b06      	ldr	r3, [sp, #24]
 8023260:	9a07      	ldr	r2, [sp, #28]
 8023262:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023266:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802326a:	9307      	str	r3, [sp, #28]
 802326c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802326e:	2b00      	cmp	r3, #0
 8023270:	f340 80eb 	ble.w	802344a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8023274:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023278:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802327a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802327e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023282:	eef0 6a62 	vmov.f32	s13, s5
 8023286:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802328a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802328e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023292:	ee16 ba90 	vmov	fp, s13
 8023296:	eef0 6a43 	vmov.f32	s13, s6
 802329a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802329e:	ee16 5a90 	vmov	r5, s13
 80232a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80232a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80232aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80232ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80232b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80232b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80232ba:	ee12 2a90 	vmov	r2, s5
 80232be:	eef0 2a47 	vmov.f32	s5, s14
 80232c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80232c6:	ee13 2a10 	vmov	r2, s6
 80232ca:	931b      	str	r3, [sp, #108]	@ 0x6c
 80232cc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80232ce:	eeb0 3a67 	vmov.f32	s6, s15
 80232d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80232d6:	931c      	str	r3, [sp, #112]	@ 0x70
 80232d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80232da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80232dc:	3b01      	subs	r3, #1
 80232de:	930a      	str	r3, [sp, #40]	@ 0x28
 80232e0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80232e2:	bf08      	it	eq
 80232e4:	4613      	moveq	r3, r2
 80232e6:	9306      	str	r3, [sp, #24]
 80232e8:	e6d3      	b.n	8023092 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80232ea:	b149      	cbz	r1, 8023300 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80232ec:	5cba      	ldrb	r2, [r7, r2]
 80232ee:	4660      	mov	r0, ip
 80232f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80232f4:	4422      	add	r2, r4
 80232f6:	4666      	mov	r6, ip
 80232f8:	e734      	b.n	8023164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 80232fa:	4660      	mov	r0, ip
 80232fc:	4662      	mov	r2, ip
 80232fe:	e731      	b.n	8023164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8023300:	4660      	mov	r0, ip
 8023302:	4662      	mov	r2, ip
 8023304:	e7f7      	b.n	80232f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8023306:	f110 0c01 	adds.w	ip, r0, #1
 802330a:	f53f af74 	bmi.w	80231f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802330e:	4562      	cmp	r2, ip
 8023310:	f6ff af71 	blt.w	80231f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023314:	f116 0c01 	adds.w	ip, r6, #1
 8023318:	f53f af6d 	bmi.w	80231f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802331c:	4567      	cmp	r7, ip
 802331e:	f6ff af6a 	blt.w	80231f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023322:	b23f      	sxth	r7, r7
 8023324:	b212      	sxth	r2, r2
 8023326:	9701      	str	r7, [sp, #4]
 8023328:	9200      	str	r2, [sp, #0]
 802332a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802332e:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8023332:	4623      	mov	r3, r4
 8023334:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023336:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802333a:	f7ff fde7 	bl	8022f0c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 802333e:	e75a      	b.n	80231f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023340:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8023342:	ea4f 462b 	mov.w	r6, fp, asr #16
 8023346:	1428      	asrs	r0, r5, #16
 8023348:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802334c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023350:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023354:	fb02 6000 	mla	r0, r2, r0, r6
 8023358:	9e08      	ldr	r6, [sp, #32]
 802335a:	f816 8000 	ldrb.w	r8, [r6, r0]
 802335e:	1837      	adds	r7, r6, r0
 8023360:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023364:	eb04 0c08 	add.w	ip, r4, r8
 8023368:	2b00      	cmp	r3, #0
 802336a:	d060      	beq.n	802342e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 802336c:	787e      	ldrb	r6, [r7, #1]
 802336e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023372:	4426      	add	r6, r4
 8023374:	2900      	cmp	r1, #0
 8023376:	d062      	beq.n	802343e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8023378:	18b8      	adds	r0, r7, r2
 802337a:	5cba      	ldrb	r2, [r7, r2]
 802337c:	7840      	ldrb	r0, [r0, #1]
 802337e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023382:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023386:	4422      	add	r2, r4
 8023388:	4420      	add	r0, r4
 802338a:	b29b      	uxth	r3, r3
 802338c:	78b7      	ldrb	r7, [r6, #2]
 802338e:	b289      	uxth	r1, r1
 8023390:	f89c a002 	ldrb.w	sl, [ip, #2]
 8023394:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023398:	fb03 f901 	mul.w	r9, r3, r1
 802339c:	011b      	lsls	r3, r3, #4
 802339e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80233a2:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80233a6:	eba3 0309 	sub.w	r3, r3, r9
 80233aa:	b289      	uxth	r1, r1
 80233ac:	b29b      	uxth	r3, r3
 80233ae:	ebae 0e01 	sub.w	lr, lr, r1
 80233b2:	435f      	muls	r7, r3
 80233b4:	fa1f fe8e 	uxth.w	lr, lr
 80233b8:	fb0e 770a 	mla	r7, lr, sl, r7
 80233bc:	f892 a002 	ldrb.w	sl, [r2, #2]
 80233c0:	fb01 770a 	mla	r7, r1, sl, r7
 80233c4:	f890 a002 	ldrb.w	sl, [r0, #2]
 80233c8:	fb09 7a0a 	mla	sl, r9, sl, r7
 80233cc:	f814 7008 	ldrb.w	r7, [r4, r8]
 80233d0:	f896 8000 	ldrb.w	r8, [r6]
 80233d4:	7876      	ldrb	r6, [r6, #1]
 80233d6:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 80233da:	fb03 f808 	mul.w	r8, r3, r8
 80233de:	4373      	muls	r3, r6
 80233e0:	7856      	ldrb	r6, [r2, #1]
 80233e2:	fb0e 8807 	mla	r8, lr, r7, r8
 80233e6:	7817      	ldrb	r7, [r2, #0]
 80233e8:	fb0e 330c 	mla	r3, lr, ip, r3
 80233ec:	fb01 8807 	mla	r8, r1, r7, r8
 80233f0:	7807      	ldrb	r7, [r0, #0]
 80233f2:	fb01 3306 	mla	r3, r1, r6, r3
 80233f6:	fb09 8707 	mla	r7, r9, r7, r8
 80233fa:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80233fe:	ea47 070a 	orr.w	r7, r7, sl
 8023402:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023406:	fb09 3a0a 	mla	sl, r9, sl, r3
 802340a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802340c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023410:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8023414:	ea47 070a 	orr.w	r7, r7, sl
 8023418:	f823 7b02 	strh.w	r7, [r3], #2
 802341c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802341e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023420:	449b      	add	fp, r3
 8023422:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023424:	441d      	add	r5, r3
 8023426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023428:	3b01      	subs	r3, #1
 802342a:	9309      	str	r3, [sp, #36]	@ 0x24
 802342c:	e714      	b.n	8023258 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802342e:	b149      	cbz	r1, 8023444 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8023430:	5cba      	ldrb	r2, [r7, r2]
 8023432:	4660      	mov	r0, ip
 8023434:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023438:	4422      	add	r2, r4
 802343a:	4666      	mov	r6, ip
 802343c:	e7a5      	b.n	802338a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802343e:	4660      	mov	r0, ip
 8023440:	4662      	mov	r2, ip
 8023442:	e7a2      	b.n	802338a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8023444:	4660      	mov	r0, ip
 8023446:	4662      	mov	r2, ip
 8023448:	e7f7      	b.n	802343a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 802344a:	b00f      	add	sp, #60	@ 0x3c
 802344c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023450 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8023450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023454:	b085      	sub	sp, #20
 8023456:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 802345a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 802345e:	9102      	str	r1, [sp, #8]
 8023460:	2c00      	cmp	r4, #0
 8023462:	fb04 710c 	mla	r1, r4, ip, r7
 8023466:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 802346a:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 802346e:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8023472:	eb02 0e01 	add.w	lr, r2, r1
 8023476:	f2c0 8122 	blt.w	80236be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802347a:	45a0      	cmp	r8, r4
 802347c:	f340 811f 	ble.w	80236be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8023480:	2f00      	cmp	r7, #0
 8023482:	f2c0 811a 	blt.w	80236ba <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8023486:	45bc      	cmp	ip, r7
 8023488:	f340 8117 	ble.w	80236ba <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 802348c:	5c52      	ldrb	r2, [r2, r1]
 802348e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8023492:	1c7a      	adds	r2, r7, #1
 8023494:	f100 8116 	bmi.w	80236c4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8023498:	4594      	cmp	ip, r2
 802349a:	f340 8113 	ble.w	80236c4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 802349e:	2e00      	cmp	r6, #0
 80234a0:	f000 8112 	beq.w	80236c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 80234a4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80234a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80234ac:	3401      	adds	r4, #1
 80234ae:	f100 810f 	bmi.w	80236d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80234b2:	45a0      	cmp	r8, r4
 80234b4:	f340 810c 	ble.w	80236d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80234b8:	2800      	cmp	r0, #0
 80234ba:	f000 810c 	beq.w	80236d6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 80234be:	2f00      	cmp	r7, #0
 80234c0:	f2c0 8104 	blt.w	80236cc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80234c4:	45bc      	cmp	ip, r7
 80234c6:	f340 8101 	ble.w	80236cc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80234ca:	f81e 200c 	ldrb.w	r2, [lr, ip]
 80234ce:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80234d2:	3701      	adds	r7, #1
 80234d4:	f100 8102 	bmi.w	80236dc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80234d8:	45bc      	cmp	ip, r7
 80234da:	f340 80ff 	ble.w	80236dc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80234de:	2e00      	cmp	r6, #0
 80234e0:	f000 80fe 	beq.w	80236e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 80234e4:	44f4      	add	ip, lr
 80234e6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80234ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80234ee:	b2b6      	uxth	r6, r6
 80234f0:	b280      	uxth	r0, r0
 80234f2:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80234f6:	fb00 fe06 	mul.w	lr, r0, r6
 80234fa:	0136      	lsls	r6, r6, #4
 80234fc:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8023500:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8023504:	eba6 070e 	sub.w	r7, r6, lr
 8023508:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 802350c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023510:	b280      	uxth	r0, r0
 8023512:	b2bf      	uxth	r7, r7
 8023514:	1a1b      	subs	r3, r3, r0
 8023516:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802351a:	fb0a f607 	mul.w	r6, sl, r7
 802351e:	b29b      	uxth	r3, r3
 8023520:	fb0b 6603 	mla	r6, fp, r3, r6
 8023524:	fb00 6609 	mla	r6, r0, r9, r6
 8023528:	fb0e 6608 	mla	r6, lr, r8, r6
 802352c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023530:	9600      	str	r6, [sp, #0]
 8023532:	2e00      	cmp	r6, #0
 8023534:	f000 80be 	beq.w	80236b4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8023538:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802353c:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8023540:	9e02      	ldr	r6, [sp, #8]
 8023542:	fb0b fc0c 	mul.w	ip, fp, ip
 8023546:	fb0b f505 	mul.w	r5, fp, r5
 802354a:	8836      	ldrh	r6, [r6, #0]
 802354c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023550:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023554:	9501      	str	r5, [sp, #4]
 8023556:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802355a:	44dc      	add	ip, fp
 802355c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023560:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8023564:	9503      	str	r5, [sp, #12]
 8023566:	9d01      	ldr	r5, [sp, #4]
 8023568:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 802356c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023570:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8023574:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8023578:	fb0a fc0c 	mul.w	ip, sl, ip
 802357c:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8023580:	fb0a fa01 	mul.w	sl, sl, r1
 8023584:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8023588:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802358c:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8023590:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023594:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8023598:	4465      	add	r5, ip
 802359a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802359e:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80235a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80235a6:	fb09 fc0c 	mul.w	ip, r9, ip
 80235aa:	0a2d      	lsrs	r5, r5, #8
 80235ac:	fb09 f904 	mul.w	r9, r9, r4
 80235b0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80235b4:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80235b8:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80235bc:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80235c0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80235c4:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80235c8:	437d      	muls	r5, r7
 80235ca:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80235ce:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 80235d2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80235d6:	4461      	add	r1, ip
 80235d8:	fb08 f404 	mul.w	r4, r8, r4
 80235dc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80235e0:	fb08 f802 	mul.w	r8, r8, r2
 80235e4:	0a09      	lsrs	r1, r1, #8
 80235e6:	0a22      	lsrs	r2, r4, #8
 80235e8:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80235ec:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80235f0:	fb07 f70a 	mul.w	r7, r7, sl
 80235f4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80235f8:	4414      	add	r4, r2
 80235fa:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80235fe:	0a24      	lsrs	r4, r4, #8
 8023600:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023604:	9a03      	ldr	r2, [sp, #12]
 8023606:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802360a:	fb02 5503 	mla	r5, r2, r3, r5
 802360e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023612:	9a00      	ldr	r2, [sp, #0]
 8023614:	fb04 540e 	mla	r4, r4, lr, r5
 8023618:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802361c:	1235      	asrs	r5, r6, #8
 802361e:	fb01 4100 	mla	r1, r1, r0, r4
 8023622:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8023626:	0a09      	lsrs	r1, r1, #8
 8023628:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 802362c:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8023630:	fb03 7101 	mla	r1, r3, r1, r7
 8023634:	fb0e 1e08 	mla	lr, lr, r8, r1
 8023638:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 802363c:	fb00 e101 	mla	r1, r0, r1, lr
 8023640:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8023644:	b287      	uxth	r7, r0
 8023646:	0a09      	lsrs	r1, r1, #8
 8023648:	437a      	muls	r2, r7
 802364a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802364e:	1c53      	adds	r3, r2, #1
 8023650:	4321      	orrs	r1, r4
 8023652:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023656:	0c0a      	lsrs	r2, r1, #16
 8023658:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802365c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8023660:	b2c8      	uxtb	r0, r1
 8023662:	fb12 f207 	smulbb	r2, r2, r7
 8023666:	fb14 f407 	smulbb	r4, r4, r7
 802366a:	b2db      	uxtb	r3, r3
 802366c:	fb10 f007 	smulbb	r0, r0, r7
 8023670:	fb05 2503 	mla	r5, r5, r3, r2
 8023674:	10f2      	asrs	r2, r6, #3
 8023676:	00f6      	lsls	r6, r6, #3
 8023678:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802367c:	b2ad      	uxth	r5, r5
 802367e:	b2f6      	uxtb	r6, r6
 8023680:	fb02 4203 	mla	r2, r2, r3, r4
 8023684:	fb06 0303 	mla	r3, r6, r3, r0
 8023688:	b294      	uxth	r4, r2
 802368a:	b299      	uxth	r1, r3
 802368c:	1c6b      	adds	r3, r5, #1
 802368e:	1c62      	adds	r2, r4, #1
 8023690:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023694:	1c4b      	adds	r3, r1, #1
 8023696:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802369a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802369e:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80236a2:	0952      	lsrs	r2, r2, #5
 80236a4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80236a8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80236ac:	432b      	orrs	r3, r5
 80236ae:	4313      	orrs	r3, r2
 80236b0:	9a02      	ldr	r2, [sp, #8]
 80236b2:	8013      	strh	r3, [r2, #0]
 80236b4:	b005      	add	sp, #20
 80236b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236ba:	2500      	movs	r5, #0
 80236bc:	e6e9      	b.n	8023492 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 80236be:	2100      	movs	r1, #0
 80236c0:	460d      	mov	r5, r1
 80236c2:	e6f3      	b.n	80234ac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80236c4:	2100      	movs	r1, #0
 80236c6:	e6f1      	b.n	80234ac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80236c8:	4631      	mov	r1, r6
 80236ca:	e6ef      	b.n	80234ac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80236cc:	2400      	movs	r4, #0
 80236ce:	e700      	b.n	80234d2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80236d0:	2200      	movs	r2, #0
 80236d2:	4614      	mov	r4, r2
 80236d4:	e70b      	b.n	80234ee <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80236d6:	4602      	mov	r2, r0
 80236d8:	4604      	mov	r4, r0
 80236da:	e708      	b.n	80234ee <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80236dc:	2200      	movs	r2, #0
 80236de:	e706      	b.n	80234ee <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80236e0:	4632      	mov	r2, r6
 80236e2:	e704      	b.n	80234ee <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

080236e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80236e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236e8:	b09f      	sub	sp, #124	@ 0x7c
 80236ea:	921b      	str	r2, [sp, #108]	@ 0x6c
 80236ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80236ee:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80236f0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 80236f4:	901d      	str	r0, [sp, #116]	@ 0x74
 80236f6:	931c      	str	r3, [sp, #112]	@ 0x70
 80236f8:	6850      	ldr	r0, [r2, #4]
 80236fa:	9119      	str	r1, [sp, #100]	@ 0x64
 80236fc:	6812      	ldr	r2, [r2, #0]
 80236fe:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8023700:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8023704:	fb00 1303 	mla	r3, r0, r3, r1
 8023708:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802370c:	930c      	str	r3, [sp, #48]	@ 0x30
 802370e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023710:	681b      	ldr	r3, [r3, #0]
 8023712:	9312      	str	r3, [sp, #72]	@ 0x48
 8023714:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023716:	685e      	ldr	r6, [r3, #4]
 8023718:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 802371c:	3604      	adds	r6, #4
 802371e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023720:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023722:	2b00      	cmp	r3, #0
 8023724:	dc03      	bgt.n	802372e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8023726:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023728:	2b00      	cmp	r3, #0
 802372a:	f340 8387 	ble.w	8023e3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 802372e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023730:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023734:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023738:	1e48      	subs	r0, r1, #1
 802373a:	1e57      	subs	r7, r2, #1
 802373c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802373e:	2b00      	cmp	r3, #0
 8023740:	f340 8194 	ble.w	8023a6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8023744:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8023746:	142b      	asrs	r3, r5, #16
 8023748:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802374c:	d406      	bmi.n	802375c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802374e:	4584      	cmp	ip, r0
 8023750:	da04      	bge.n	802375c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023752:	2b00      	cmp	r3, #0
 8023754:	db02      	blt.n	802375c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023756:	42bb      	cmp	r3, r7
 8023758:	f2c0 8189 	blt.w	8023a6e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802375c:	f11c 0c01 	adds.w	ip, ip, #1
 8023760:	f100 8177 	bmi.w	8023a52 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023764:	4561      	cmp	r1, ip
 8023766:	f2c0 8174 	blt.w	8023a52 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802376a:	3301      	adds	r3, #1
 802376c:	f100 8171 	bmi.w	8023a52 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023770:	429a      	cmp	r2, r3
 8023772:	f2c0 816e 	blt.w	8023a52 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023778:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802377a:	931a      	str	r3, [sp, #104]	@ 0x68
 802377c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802377e:	2b00      	cmp	r3, #0
 8023780:	f340 8193 	ble.w	8023aaa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8023784:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8023786:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802378a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802378e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023792:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023794:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8023798:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802379a:	141b      	asrs	r3, r3, #16
 802379c:	f100 81d6 	bmi.w	8023b4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80237a0:	f100 38ff 	add.w	r8, r0, #4294967295
 80237a4:	4543      	cmp	r3, r8
 80237a6:	f280 81d1 	bge.w	8023b4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80237aa:	f1bc 0f00 	cmp.w	ip, #0
 80237ae:	f2c0 81cd 	blt.w	8023b4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80237b2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80237b6:	45c4      	cmp	ip, r8
 80237b8:	f280 81c8 	bge.w	8023b4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80237bc:	b200      	sxth	r0, r0
 80237be:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80237c0:	fb0c 3300 	mla	r3, ip, r0, r3
 80237c4:	eb04 0803 	add.w	r8, r4, r3
 80237c8:	5ce3      	ldrb	r3, [r4, r3]
 80237ca:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80237ce:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80237d2:	2a00      	cmp	r2, #0
 80237d4:	f000 81af 	beq.w	8023b36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80237d8:	f898 c001 	ldrb.w	ip, [r8, #1]
 80237dc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80237e0:	940e      	str	r4, [sp, #56]	@ 0x38
 80237e2:	0e24      	lsrs	r4, r4, #24
 80237e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80237e6:	b179      	cbz	r1, 8023808 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80237e8:	eb08 0c00 	add.w	ip, r8, r0
 80237ec:	f818 0000 	ldrb.w	r0, [r8, r0]
 80237f0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80237f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80237f6:	0e00      	lsrs	r0, r0, #24
 80237f8:	9013      	str	r0, [sp, #76]	@ 0x4c
 80237fa:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80237fe:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023802:	900f      	str	r0, [sp, #60]	@ 0x3c
 8023804:	0e00      	lsrs	r0, r0, #24
 8023806:	9016      	str	r0, [sp, #88]	@ 0x58
 8023808:	b292      	uxth	r2, r2
 802380a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802380c:	b289      	uxth	r1, r1
 802380e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023810:	fb02 f901 	mul.w	r9, r2, r1
 8023814:	0112      	lsls	r2, r2, #4
 8023816:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802381a:	eba2 0809 	sub.w	r8, r2, r9
 802381e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8023822:	b289      	uxth	r1, r1
 8023824:	fa1f f888 	uxth.w	r8, r8
 8023828:	1a52      	subs	r2, r2, r1
 802382a:	fb08 f000 	mul.w	r0, r8, r0
 802382e:	b292      	uxth	r2, r2
 8023830:	fb02 000e 	mla	r0, r2, lr, r0
 8023834:	fb01 0004 	mla	r0, r1, r4, r0
 8023838:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802383a:	fb09 0004 	mla	r0, r9, r4, r0
 802383e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023842:	2800      	cmp	r0, #0
 8023844:	f000 80fa 	beq.w	8023a3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023848:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802384c:	d01b      	beq.n	8023886 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802384e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8023852:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023856:	fb0e fa0a 	mul.w	sl, lr, sl
 802385a:	fb0e fe03 	mul.w	lr, lr, r3
 802385e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023862:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8023866:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802386a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802386e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023872:	4453      	add	r3, sl
 8023874:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023878:	0a1b      	lsrs	r3, r3, #8
 802387a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802387e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023882:	ea43 030c 	orr.w	r3, r3, ip
 8023886:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023888:	2cff      	cmp	r4, #255	@ 0xff
 802388a:	d021      	beq.n	80238d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802388c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802388e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023892:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023894:	fb04 fb0b 	mul.w	fp, r4, fp
 8023898:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802389a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802389e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80238a0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80238a4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80238a8:	fb04 fa0a 	mul.w	sl, r4, sl
 80238ac:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80238b0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80238b4:	44de      	add	lr, fp
 80238b6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80238ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80238be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80238c2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80238c6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80238ca:	ea4e 040a 	orr.w	r4, lr, sl
 80238ce:	940e      	str	r4, [sp, #56]	@ 0x38
 80238d0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80238d2:	2cff      	cmp	r4, #255	@ 0xff
 80238d4:	d021      	beq.n	802391a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80238d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80238d8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80238dc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80238de:	fb04 fb0b 	mul.w	fp, r4, fp
 80238e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80238e4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80238e8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80238ea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80238ee:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80238f2:	fb04 fa0a 	mul.w	sl, r4, sl
 80238f6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80238fa:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80238fe:	44de      	add	lr, fp
 8023900:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023904:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023908:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802390c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023910:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023914:	ea4e 040a 	orr.w	r4, lr, sl
 8023918:	940a      	str	r4, [sp, #40]	@ 0x28
 802391a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802391c:	2cff      	cmp	r4, #255	@ 0xff
 802391e:	d021      	beq.n	8023964 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8023920:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023922:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023926:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8023928:	fb04 fb0b 	mul.w	fp, r4, fp
 802392c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802392e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023932:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8023934:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023938:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802393c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023940:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023944:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023948:	44de      	add	lr, fp
 802394a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802394e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023952:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023956:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802395a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802395e:	ea4e 040a 	orr.w	r4, lr, sl
 8023962:	940f      	str	r4, [sp, #60]	@ 0x3c
 8023964:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023966:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802396a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802396e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023972:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023974:	fb08 fc0c 	mul.w	ip, r8, ip
 8023978:	fb02 cc0e 	mla	ip, r2, lr, ip
 802397c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023980:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023982:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023986:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802398a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802398c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023990:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8023994:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023996:	fb08 f80e 	mul.w	r8, r8, lr
 802399a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802399e:	fb02 8303 	mla	r3, r2, r3, r8
 80239a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80239a4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80239a8:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80239ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80239ae:	fb01 330a 	mla	r3, r1, sl, r3
 80239b2:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 80239b6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80239b8:	fb09 3901 	mla	r9, r9, r1, r3
 80239bc:	883b      	ldrh	r3, [r7, #0]
 80239be:	4342      	muls	r2, r0
 80239c0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80239c4:	1c50      	adds	r0, r2, #1
 80239c6:	1219      	asrs	r1, r3, #8
 80239c8:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80239cc:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80239d0:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80239d4:	ea4c 0c09 	orr.w	ip, ip, r9
 80239d8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80239dc:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80239e0:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80239e4:	b2c0      	uxtb	r0, r0
 80239e6:	fb12 f204 	smulbb	r2, r2, r4
 80239ea:	fa5f fc8c 	uxtb.w	ip, ip
 80239ee:	fb1e fe04 	smulbb	lr, lr, r4
 80239f2:	fb01 2100 	mla	r1, r1, r0, r2
 80239f6:	10da      	asrs	r2, r3, #3
 80239f8:	fb1c fc04 	smulbb	ip, ip, r4
 80239fc:	00db      	lsls	r3, r3, #3
 80239fe:	b289      	uxth	r1, r1
 8023a00:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023a04:	b2db      	uxtb	r3, r3
 8023a06:	fb02 e200 	mla	r2, r2, r0, lr
 8023a0a:	fb03 c300 	mla	r3, r3, r0, ip
 8023a0e:	b292      	uxth	r2, r2
 8023a10:	fa1f fc83 	uxth.w	ip, r3
 8023a14:	1c4b      	adds	r3, r1, #1
 8023a16:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023a1a:	f10c 0301 	add.w	r3, ip, #1
 8023a1e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023a22:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8023a26:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023a2a:	430b      	orrs	r3, r1
 8023a2c:	1c51      	adds	r1, r2, #1
 8023a2e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023a32:	0952      	lsrs	r2, r2, #5
 8023a34:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023a38:	4313      	orrs	r3, r2
 8023a3a:	803b      	strh	r3, [r7, #0]
 8023a3c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8023a3e:	3702      	adds	r7, #2
 8023a40:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8023a42:	441a      	add	r2, r3
 8023a44:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023a46:	441d      	add	r5, r3
 8023a48:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8023a4a:	9229      	str	r2, [sp, #164]	@ 0xa4
 8023a4c:	3b01      	subs	r3, #1
 8023a4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8023a50:	e694      	b.n	802377c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023a52:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8023a54:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8023a56:	441c      	add	r4, r3
 8023a58:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023a5a:	441d      	add	r5, r3
 8023a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023a5e:	9429      	str	r4, [sp, #164]	@ 0xa4
 8023a60:	3b01      	subs	r3, #1
 8023a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8023a64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023a66:	3302      	adds	r3, #2
 8023a68:	930c      	str	r3, [sp, #48]	@ 0x30
 8023a6a:	e667      	b.n	802373c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023a6c:	d024      	beq.n	8023ab8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8023a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023a70:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8023a72:	3b01      	subs	r3, #1
 8023a74:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8023a76:	fb00 4003 	mla	r0, r0, r3, r4
 8023a7a:	1400      	asrs	r0, r0, #16
 8023a7c:	f53f ae7b 	bmi.w	8023776 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023a80:	3901      	subs	r1, #1
 8023a82:	4288      	cmp	r0, r1
 8023a84:	f6bf ae77 	bge.w	8023776 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023a88:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8023a8a:	fb01 5303 	mla	r3, r1, r3, r5
 8023a8e:	141b      	asrs	r3, r3, #16
 8023a90:	f53f ae71 	bmi.w	8023776 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023a94:	3a01      	subs	r2, #1
 8023a96:	4293      	cmp	r3, r2
 8023a98:	f6bf ae6d 	bge.w	8023776 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023a9c:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8023aa0:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8023aa4:	f1bb 0f00 	cmp.w	fp, #0
 8023aa8:	dc70      	bgt.n	8023b8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8023aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023aac:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023ab0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023ab2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023ab6:	930c      	str	r3, [sp, #48]	@ 0x30
 8023ab8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023aba:	2b00      	cmp	r3, #0
 8023abc:	f340 81be 	ble.w	8023e3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8023ac0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023ac4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023ac6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023aca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023ace:	eef0 6a62 	vmov.f32	s13, s5
 8023ad2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023ad6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023ada:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023ade:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8023ae2:	eef0 6a43 	vmov.f32	s13, s6
 8023ae6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023aea:	ee16 5a90 	vmov	r5, s13
 8023aee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023af2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023af6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023afa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023afe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023b02:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023b06:	ee12 2a90 	vmov	r2, s5
 8023b0a:	eef0 2a47 	vmov.f32	s5, s14
 8023b0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b12:	ee13 2a10 	vmov	r2, s6
 8023b16:	932b      	str	r3, [sp, #172]	@ 0xac
 8023b18:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023b1a:	eeb0 3a67 	vmov.f32	s6, s15
 8023b1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b22:	932c      	str	r3, [sp, #176]	@ 0xb0
 8023b24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023b26:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8023b28:	3b01      	subs	r3, #1
 8023b2a:	9319      	str	r3, [sp, #100]	@ 0x64
 8023b2c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023b2e:	bf08      	it	eq
 8023b30:	4613      	moveq	r3, r2
 8023b32:	9309      	str	r3, [sp, #36]	@ 0x24
 8023b34:	e5f4      	b.n	8023720 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023b36:	2900      	cmp	r1, #0
 8023b38:	f43f ae66 	beq.w	8023808 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8023b3c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023b40:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023b44:	900a      	str	r0, [sp, #40]	@ 0x28
 8023b46:	0e00      	lsrs	r0, r0, #24
 8023b48:	9013      	str	r0, [sp, #76]	@ 0x4c
 8023b4a:	e65d      	b.n	8023808 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8023b4c:	f113 0801 	adds.w	r8, r3, #1
 8023b50:	f53f af74 	bmi.w	8023a3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023b54:	4540      	cmp	r0, r8
 8023b56:	f6ff af71 	blt.w	8023a3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023b5a:	f11c 0801 	adds.w	r8, ip, #1
 8023b5e:	f53f af6d 	bmi.w	8023a3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023b62:	45c6      	cmp	lr, r8
 8023b64:	f6ff af6a 	blt.w	8023a3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023b68:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8023b6a:	b200      	sxth	r0, r0
 8023b6c:	9302      	str	r3, [sp, #8]
 8023b6e:	fa0f f38e 	sxth.w	r3, lr
 8023b72:	9000      	str	r0, [sp, #0]
 8023b74:	9301      	str	r3, [sp, #4]
 8023b76:	4633      	mov	r3, r6
 8023b78:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8023b7a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023b7e:	e9cd c203 	strd	ip, r2, [sp, #12]
 8023b82:	4639      	mov	r1, r7
 8023b84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8023b86:	f7ff fc63 	bl	8023450 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8023b8a:	e757      	b.n	8023a3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023b8c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8023b8e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023b92:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8023b94:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023b98:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023b9a:	1427      	asrs	r7, r4, #16
 8023b9c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023b9e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023ba2:	142b      	asrs	r3, r5, #16
 8023ba4:	fb01 7303 	mla	r3, r1, r3, r7
 8023ba8:	18e7      	adds	r7, r4, r3
 8023baa:	5ce3      	ldrb	r3, [r4, r3]
 8023bac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023bb0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023bb4:	2a00      	cmp	r2, #0
 8023bb6:	f000 8137 	beq.w	8023e28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8023bba:	f897 e001 	ldrb.w	lr, [r7, #1]
 8023bbe:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8023bc2:	9410      	str	r4, [sp, #64]	@ 0x40
 8023bc4:	0e24      	lsrs	r4, r4, #24
 8023bc6:	9417      	str	r4, [sp, #92]	@ 0x5c
 8023bc8:	b170      	cbz	r0, 8023be8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8023bca:	eb07 0e01 	add.w	lr, r7, r1
 8023bce:	5c79      	ldrb	r1, [r7, r1]
 8023bd0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023bd4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023bd6:	0e09      	lsrs	r1, r1, #24
 8023bd8:	9114      	str	r1, [sp, #80]	@ 0x50
 8023bda:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8023bde:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023be2:	9111      	str	r1, [sp, #68]	@ 0x44
 8023be4:	0e09      	lsrs	r1, r1, #24
 8023be6:	9118      	str	r1, [sp, #96]	@ 0x60
 8023be8:	b292      	uxth	r2, r2
 8023bea:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8023bec:	b280      	uxth	r0, r0
 8023bee:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023bf0:	fb02 f800 	mul.w	r8, r2, r0
 8023bf4:	0112      	lsls	r2, r2, #4
 8023bf6:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023bfa:	eba2 0e08 	sub.w	lr, r2, r8
 8023bfe:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8023c02:	b280      	uxth	r0, r0
 8023c04:	fa1f fe8e 	uxth.w	lr, lr
 8023c08:	1a12      	subs	r2, r2, r0
 8023c0a:	fb0e f101 	mul.w	r1, lr, r1
 8023c0e:	b292      	uxth	r2, r2
 8023c10:	fb02 110c 	mla	r1, r2, ip, r1
 8023c14:	fb00 1104 	mla	r1, r0, r4, r1
 8023c18:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8023c1a:	fb08 1104 	mla	r1, r8, r4, r1
 8023c1e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023c22:	2900      	cmp	r1, #0
 8023c24:	f000 80f5 	beq.w	8023e12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8023c28:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8023c2c:	d019      	beq.n	8023c62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8023c2e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8023c32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023c36:	fb0c fa0a 	mul.w	sl, ip, sl
 8023c3a:	fb0c fc03 	mul.w	ip, ip, r3
 8023c3e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023c42:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8023c46:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8023c4a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023c4e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023c52:	4453      	add	r3, sl
 8023c54:	0a3f      	lsrs	r7, r7, #8
 8023c56:	0a1b      	lsrs	r3, r3, #8
 8023c58:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8023c5c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023c60:	433b      	orrs	r3, r7
 8023c62:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8023c64:	2cff      	cmp	r4, #255	@ 0xff
 8023c66:	d020      	beq.n	8023caa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8023c68:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023c6a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023c6e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8023c70:	4367      	muls	r7, r4
 8023c72:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023c74:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023c78:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023c7c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8023c7e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023c82:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023c86:	fb04 fa0a 	mul.w	sl, r4, sl
 8023c8a:	44bc      	add	ip, r7
 8023c8c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023c90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c94:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023c98:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023c9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023ca0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023ca4:	ea4c 040a 	orr.w	r4, ip, sl
 8023ca8:	9410      	str	r4, [sp, #64]	@ 0x40
 8023caa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023cac:	2cff      	cmp	r4, #255	@ 0xff
 8023cae:	d020      	beq.n	8023cf2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8023cb0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023cb2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023cb6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023cb8:	4367      	muls	r7, r4
 8023cba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023cbc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023cc0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023cc4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023cc6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023cca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023cce:	fb04 fa0a 	mul.w	sl, r4, sl
 8023cd2:	44bc      	add	ip, r7
 8023cd4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023cd8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023cdc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023ce0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023ce4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023ce8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023cec:	ea4c 040a 	orr.w	r4, ip, sl
 8023cf0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023cf2:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8023cf4:	2cff      	cmp	r4, #255	@ 0xff
 8023cf6:	d020      	beq.n	8023d3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8023cf8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023cfa:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023cfe:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8023d00:	4367      	muls	r7, r4
 8023d02:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023d04:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023d08:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023d0c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8023d0e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023d12:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023d16:	fb04 fa0a 	mul.w	sl, r4, sl
 8023d1a:	44bc      	add	ip, r7
 8023d1c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023d20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d24:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023d28:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023d2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023d30:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023d34:	ea4c 040a 	orr.w	r4, ip, sl
 8023d38:	9411      	str	r4, [sp, #68]	@ 0x44
 8023d3a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023d3c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8023d40:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023d44:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023d48:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023d4a:	fb0e f707 	mul.w	r7, lr, r7
 8023d4e:	fb02 770c 	mla	r7, r2, ip, r7
 8023d52:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023d56:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023d58:	fb00 770c 	mla	r7, r0, ip, r7
 8023d5c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023d60:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023d62:	fb08 770c 	mla	r7, r8, ip, r7
 8023d66:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8023d6a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023d6c:	fb0e fe0c 	mul.w	lr, lr, ip
 8023d70:	0a3f      	lsrs	r7, r7, #8
 8023d72:	fb02 e303 	mla	r3, r2, r3, lr
 8023d76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023d78:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8023d7c:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8023d80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023d82:	fb00 330a 	mla	r3, r0, sl, r3
 8023d86:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8023d8a:	f8b9 0000 	ldrh.w	r0, [r9]
 8023d8e:	fb08 3c0c 	mla	ip, r8, ip, r3
 8023d92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023d94:	1202      	asrs	r2, r0, #8
 8023d96:	434b      	muls	r3, r1
 8023d98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d9c:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8023da0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023da4:	1c59      	adds	r1, r3, #1
 8023da6:	ea47 070c 	orr.w	r7, r7, ip
 8023daa:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023dae:	0c3b      	lsrs	r3, r7, #16
 8023db0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023db4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8023db8:	b2ff      	uxtb	r7, r7
 8023dba:	fb13 f304 	smulbb	r3, r3, r4
 8023dbe:	b2c9      	uxtb	r1, r1
 8023dc0:	fb1c fc04 	smulbb	ip, ip, r4
 8023dc4:	fb02 3201 	mla	r2, r2, r1, r3
 8023dc8:	10c3      	asrs	r3, r0, #3
 8023dca:	fb17 f704 	smulbb	r7, r7, r4
 8023dce:	00c0      	lsls	r0, r0, #3
 8023dd0:	b292      	uxth	r2, r2
 8023dd2:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8023dd6:	b2c0      	uxtb	r0, r0
 8023dd8:	fb03 c301 	mla	r3, r3, r1, ip
 8023ddc:	f102 0c01 	add.w	ip, r2, #1
 8023de0:	fb00 7001 	mla	r0, r0, r1, r7
 8023de4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023de8:	b280      	uxth	r0, r0
 8023dea:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 8023dee:	b29b      	uxth	r3, r3
 8023df0:	1c42      	adds	r2, r0, #1
 8023df2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023df6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023dfa:	ea42 020c 	orr.w	r2, r2, ip
 8023dfe:	f103 0c01 	add.w	ip, r3, #1
 8023e02:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8023e06:	095b      	lsrs	r3, r3, #5
 8023e08:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023e0c:	431a      	orrs	r2, r3
 8023e0e:	f8a9 2000 	strh.w	r2, [r9]
 8023e12:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8023e14:	f109 0902 	add.w	r9, r9, #2
 8023e18:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8023e1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023e1e:	441a      	add	r2, r3
 8023e20:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023e22:	9229      	str	r2, [sp, #164]	@ 0xa4
 8023e24:	441d      	add	r5, r3
 8023e26:	e63d      	b.n	8023aa4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023e28:	2800      	cmp	r0, #0
 8023e2a:	f43f aedd 	beq.w	8023be8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8023e2e:	5c79      	ldrb	r1, [r7, r1]
 8023e30:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023e34:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023e36:	0e09      	lsrs	r1, r1, #24
 8023e38:	9114      	str	r1, [sp, #80]	@ 0x50
 8023e3a:	e6d5      	b.n	8023be8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8023e3c:	b01f      	add	sp, #124	@ 0x7c
 8023e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023e42 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8023e42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e46:	b089      	sub	sp, #36	@ 0x24
 8023e48:	9101      	str	r1, [sp, #4]
 8023e4a:	9801      	ldr	r0, [sp, #4]
 8023e4c:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 8023e50:	8800      	ldrh	r0, [r0, #0]
 8023e52:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 8023e56:	1206      	asrs	r6, r0, #8
 8023e58:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8023e5c:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 8023e60:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8023e64:	9602      	str	r6, [sp, #8]
 8023e66:	10c6      	asrs	r6, r0, #3
 8023e68:	00c0      	lsls	r0, r0, #3
 8023e6a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8023e6e:	b2c0      	uxtb	r0, r0
 8023e70:	9603      	str	r6, [sp, #12]
 8023e72:	9004      	str	r0, [sp, #16]
 8023e74:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 8023e78:	fb07 100c 	mla	r0, r7, ip, r1
 8023e7c:	2f00      	cmp	r7, #0
 8023e7e:	eb02 0e00 	add.w	lr, r2, r0
 8023e82:	f2c0 810a 	blt.w	802409a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8023e86:	45b8      	cmp	r8, r7
 8023e88:	f340 8107 	ble.w	802409a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8023e8c:	2900      	cmp	r1, #0
 8023e8e:	f2c0 8102 	blt.w	8024096 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8023e92:	458c      	cmp	ip, r1
 8023e94:	f340 80ff 	ble.w	8024096 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8023e98:	5c12      	ldrb	r2, [r2, r0]
 8023e9a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023e9e:	1c4a      	adds	r2, r1, #1
 8023ea0:	f100 80fe 	bmi.w	80240a0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8023ea4:	4594      	cmp	ip, r2
 8023ea6:	f340 80fb 	ble.w	80240a0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8023eaa:	2d00      	cmp	r5, #0
 8023eac:	f000 80fa 	beq.w	80240a4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8023eb0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023eb4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8023eb8:	3701      	adds	r7, #1
 8023eba:	f100 80f7 	bmi.w	80240ac <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8023ebe:	45b8      	cmp	r8, r7
 8023ec0:	f340 80f4 	ble.w	80240ac <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8023ec4:	2c00      	cmp	r4, #0
 8023ec6:	f000 80f4 	beq.w	80240b2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8023eca:	2900      	cmp	r1, #0
 8023ecc:	eb0e 020c 	add.w	r2, lr, ip
 8023ed0:	f2c0 80ea 	blt.w	80240a8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8023ed4:	458c      	cmp	ip, r1
 8023ed6:	f340 80e7 	ble.w	80240a8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8023eda:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8023ede:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8023ee2:	3101      	adds	r1, #1
 8023ee4:	f100 80e8 	bmi.w	80240b8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8023ee8:	458c      	cmp	ip, r1
 8023eea:	f340 80e5 	ble.w	80240b8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8023eee:	2d00      	cmp	r5, #0
 8023ef0:	f000 80e4 	beq.w	80240bc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8023ef4:	7852      	ldrb	r2, [r2, #1]
 8023ef6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023efa:	0e0b      	lsrs	r3, r1, #24
 8023efc:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 8023f00:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8023f04:	9300      	str	r3, [sp, #0]
 8023f06:	b2a4      	uxth	r4, r4
 8023f08:	b2ab      	uxth	r3, r5
 8023f0a:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8023f0e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8023f12:	fb03 f904 	mul.w	r9, r3, r4
 8023f16:	011b      	lsls	r3, r3, #4
 8023f18:	fb0a f505 	mul.w	r5, sl, r5
 8023f1c:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8023f20:	eba3 0e09 	sub.w	lr, r3, r9
 8023f24:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 8023f28:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 8023f2c:	0a28      	lsrs	r0, r5, #8
 8023f2e:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8023f32:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8023f36:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023f3a:	fb0a f303 	mul.w	r3, sl, r3
 8023f3e:	fb08 f707 	mul.w	r7, r8, r7
 8023f42:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8023f46:	4405      	add	r5, r0
 8023f48:	fb08 fc0c 	mul.w	ip, r8, ip
 8023f4c:	b2a4      	uxth	r4, r4
 8023f4e:	0a2d      	lsrs	r5, r5, #8
 8023f50:	fa1f fe8e 	uxth.w	lr, lr
 8023f54:	1b12      	subs	r2, r2, r4
 8023f56:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 8023f5a:	b292      	uxth	r2, r2
 8023f5c:	9005      	str	r0, [sp, #20]
 8023f5e:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8023f62:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023f66:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8023f6a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023f6e:	0a1b      	lsrs	r3, r3, #8
 8023f70:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023f74:	9306      	str	r3, [sp, #24]
 8023f76:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 8023f7a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8023f7e:	4460      	add	r0, ip
 8023f80:	fb0b f303 	mul.w	r3, fp, r3
 8023f84:	fb0b f606 	mul.w	r6, fp, r6
 8023f88:	0a00      	lsrs	r0, r0, #8
 8023f8a:	0a1d      	lsrs	r5, r3, #8
 8023f8c:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8023f90:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023f94:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023f98:	441d      	add	r5, r3
 8023f9a:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 8023f9e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023fa2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8023fa6:	0a2d      	lsrs	r5, r5, #8
 8023fa8:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8023fac:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 8023fb0:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023fb4:	0a36      	lsrs	r6, r6, #8
 8023fb6:	0a1b      	lsrs	r3, r3, #8
 8023fb8:	fb05 f50e 	mul.w	r5, r5, lr
 8023fbc:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8023fc0:	9307      	str	r3, [sp, #28]
 8023fc2:	0e0b      	lsrs	r3, r1, #24
 8023fc4:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8023fc8:	fb0e f606 	mul.w	r6, lr, r6
 8023fcc:	435f      	muls	r7, r3
 8023fce:	4359      	muls	r1, r3
 8023fd0:	9b05      	ldr	r3, [sp, #20]
 8023fd2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023fd6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023fda:	fb03 5502 	mla	r5, r3, r2, r5
 8023fde:	9b06      	ldr	r3, [sp, #24]
 8023fe0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023fe4:	fb0e fe0b 	mul.w	lr, lr, fp
 8023fe8:	44bc      	add	ip, r7
 8023fea:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 8023fee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023ff2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8023ff6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023ffa:	0a09      	lsrs	r1, r1, #8
 8023ffc:	fb0c 5509 	mla	r5, ip, r9, r5
 8024000:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8024004:	fb00 5504 	mla	r5, r0, r4, r5
 8024008:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 802400c:	9b07      	ldr	r3, [sp, #28]
 802400e:	fb02 6000 	mla	r0, r2, r0, r6
 8024012:	0a2d      	lsrs	r5, r5, #8
 8024014:	fb02 e20a 	mla	r2, r2, sl, lr
 8024018:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802401c:	fb09 0001 	mla	r0, r9, r1, r0
 8024020:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8024024:	fb04 0003 	mla	r0, r4, r3, r0
 8024028:	9b00      	ldr	r3, [sp, #0]
 802402a:	fb04 2408 	mla	r4, r4, r8, r2
 802402e:	9a04      	ldr	r2, [sp, #16]
 8024030:	0a00      	lsrs	r0, r0, #8
 8024032:	fb09 4903 	mla	r9, r9, r3, r4
 8024036:	9b02      	ldr	r3, [sp, #8]
 8024038:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802403c:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8024040:	4305      	orrs	r5, r0
 8024042:	fa5f f989 	uxtb.w	r9, r9
 8024046:	fb03 f109 	mul.w	r1, r3, r9
 802404a:	9b03      	ldr	r3, [sp, #12]
 802404c:	fb03 f309 	mul.w	r3, r3, r9
 8024050:	fb02 f909 	mul.w	r9, r2, r9
 8024054:	1c4a      	adds	r2, r1, #1
 8024056:	1c58      	adds	r0, r3, #1
 8024058:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802405c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024060:	0c2a      	lsrs	r2, r5, #16
 8024062:	0a2b      	lsrs	r3, r5, #8
 8024064:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8024068:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802406c:	0212      	lsls	r2, r2, #8
 802406e:	00db      	lsls	r3, r3, #3
 8024070:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8024074:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024078:	4313      	orrs	r3, r2
 802407a:	f109 0201 	add.w	r2, r9, #1
 802407e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8024082:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8024086:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802408a:	431d      	orrs	r5, r3
 802408c:	9b01      	ldr	r3, [sp, #4]
 802408e:	801d      	strh	r5, [r3, #0]
 8024090:	b009      	add	sp, #36	@ 0x24
 8024092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024096:	2000      	movs	r0, #0
 8024098:	e701      	b.n	8023e9e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 802409a:	2600      	movs	r6, #0
 802409c:	4630      	mov	r0, r6
 802409e:	e70b      	b.n	8023eb8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80240a0:	2600      	movs	r6, #0
 80240a2:	e709      	b.n	8023eb8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80240a4:	462e      	mov	r6, r5
 80240a6:	e707      	b.n	8023eb8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80240a8:	2700      	movs	r7, #0
 80240aa:	e71a      	b.n	8023ee2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 80240ac:	2100      	movs	r1, #0
 80240ae:	460f      	mov	r7, r1
 80240b0:	e723      	b.n	8023efa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80240b2:	4621      	mov	r1, r4
 80240b4:	4627      	mov	r7, r4
 80240b6:	e720      	b.n	8023efa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80240b8:	2100      	movs	r1, #0
 80240ba:	e71e      	b.n	8023efa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80240bc:	4629      	mov	r1, r5
 80240be:	e71c      	b.n	8023efa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

080240c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80240c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240c4:	b09b      	sub	sp, #108	@ 0x6c
 80240c6:	9218      	str	r2, [sp, #96]	@ 0x60
 80240c8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80240ca:	9019      	str	r0, [sp, #100]	@ 0x64
 80240cc:	9116      	str	r1, [sp, #88]	@ 0x58
 80240ce:	6850      	ldr	r0, [r2, #4]
 80240d0:	9307      	str	r3, [sp, #28]
 80240d2:	6812      	ldr	r2, [r2, #0]
 80240d4:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 80240d6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80240da:	fb00 1303 	mla	r3, r0, r3, r1
 80240de:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80240e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80240e4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80240e6:	681b      	ldr	r3, [r3, #0]
 80240e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80240ea:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80240ec:	685e      	ldr	r6, [r3, #4]
 80240ee:	3604      	adds	r6, #4
 80240f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80240f2:	2b00      	cmp	r3, #0
 80240f4:	dc03      	bgt.n	80240fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80240f6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80240f8:	2b00      	cmp	r3, #0
 80240fa:	f340 8373 	ble.w	80247e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80240fe:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024100:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024104:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024108:	1e48      	subs	r0, r1, #1
 802410a:	1e57      	subs	r7, r2, #1
 802410c:	9b07      	ldr	r3, [sp, #28]
 802410e:	2b00      	cmp	r3, #0
 8024110:	f340 818f 	ble.w	8024432 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8024114:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8024116:	142b      	asrs	r3, r5, #16
 8024118:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802411c:	d406      	bmi.n	802412c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802411e:	4584      	cmp	ip, r0
 8024120:	da04      	bge.n	802412c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024122:	2b00      	cmp	r3, #0
 8024124:	db02      	blt.n	802412c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024126:	42bb      	cmp	r3, r7
 8024128:	f2c0 8184 	blt.w	8024434 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802412c:	f11c 0c01 	adds.w	ip, ip, #1
 8024130:	f100 8172 	bmi.w	8024418 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024134:	4561      	cmp	r1, ip
 8024136:	f2c0 816f 	blt.w	8024418 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802413a:	3301      	adds	r3, #1
 802413c:	f100 816c 	bmi.w	8024418 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024140:	429a      	cmp	r2, r3
 8024142:	f2c0 8169 	blt.w	8024418 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024146:	9b07      	ldr	r3, [sp, #28]
 8024148:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802414a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802414c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802414e:	2b00      	cmp	r3, #0
 8024150:	f340 818e 	ble.w	8024470 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8024154:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024156:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802415a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802415e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024162:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024164:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8024168:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802416a:	141b      	asrs	r3, r3, #16
 802416c:	f100 81d1 	bmi.w	8024512 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024170:	f101 38ff 	add.w	r8, r1, #4294967295
 8024174:	4543      	cmp	r3, r8
 8024176:	f280 81cc 	bge.w	8024512 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802417a:	f1bc 0f00 	cmp.w	ip, #0
 802417e:	f2c0 81c8 	blt.w	8024512 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024182:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024186:	45c4      	cmp	ip, r8
 8024188:	f280 81c3 	bge.w	8024512 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802418c:	b209      	sxth	r1, r1
 802418e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024190:	fb0c 3301 	mla	r3, ip, r1, r3
 8024194:	eb04 0803 	add.w	r8, r4, r3
 8024198:	5ce3      	ldrb	r3, [r4, r3]
 802419a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802419e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80241a2:	2a00      	cmp	r2, #0
 80241a4:	f000 81aa 	beq.w	80244fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 80241a8:	f898 c001 	ldrb.w	ip, [r8, #1]
 80241ac:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80241b0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80241b2:	0e24      	lsrs	r4, r4, #24
 80241b4:	9412      	str	r4, [sp, #72]	@ 0x48
 80241b6:	b178      	cbz	r0, 80241d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80241b8:	eb08 0c01 	add.w	ip, r8, r1
 80241bc:	f818 1001 	ldrb.w	r1, [r8, r1]
 80241c0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80241c4:	9108      	str	r1, [sp, #32]
 80241c6:	0e09      	lsrs	r1, r1, #24
 80241c8:	9110      	str	r1, [sp, #64]	@ 0x40
 80241ca:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80241ce:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80241d2:	910c      	str	r1, [sp, #48]	@ 0x30
 80241d4:	0e09      	lsrs	r1, r1, #24
 80241d6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80241d8:	b292      	uxth	r2, r2
 80241da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80241dc:	b280      	uxth	r0, r0
 80241de:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80241e0:	fb02 f900 	mul.w	r9, r2, r0
 80241e4:	0112      	lsls	r2, r2, #4
 80241e6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80241ea:	eba2 0809 	sub.w	r8, r2, r9
 80241ee:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80241f2:	b280      	uxth	r0, r0
 80241f4:	fa1f f888 	uxth.w	r8, r8
 80241f8:	1a12      	subs	r2, r2, r0
 80241fa:	fb08 f101 	mul.w	r1, r8, r1
 80241fe:	b292      	uxth	r2, r2
 8024200:	fb02 110e 	mla	r1, r2, lr, r1
 8024204:	fb00 1104 	mla	r1, r0, r4, r1
 8024208:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802420a:	fb09 1104 	mla	r1, r9, r4, r1
 802420e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024212:	2900      	cmp	r1, #0
 8024214:	f000 80f5 	beq.w	8024402 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024218:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802421c:	d01b      	beq.n	8024256 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802421e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8024222:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024226:	fb0e fa0a 	mul.w	sl, lr, sl
 802422a:	fb0e fe03 	mul.w	lr, lr, r3
 802422e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024232:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8024236:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802423a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802423e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024242:	4453      	add	r3, sl
 8024244:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024248:	0a1b      	lsrs	r3, r3, #8
 802424a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802424e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024252:	ea43 030c 	orr.w	r3, r3, ip
 8024256:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024258:	2cff      	cmp	r4, #255	@ 0xff
 802425a:	d021      	beq.n	80242a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 802425c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802425e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024262:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024264:	fb04 fb0b 	mul.w	fp, r4, fp
 8024268:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802426a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802426e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024270:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024274:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024278:	fb04 fa0a 	mul.w	sl, r4, sl
 802427c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024280:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024284:	44de      	add	lr, fp
 8024286:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802428a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802428e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024292:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024296:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802429a:	ea4e 040a 	orr.w	r4, lr, sl
 802429e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80242a0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80242a2:	2cff      	cmp	r4, #255	@ 0xff
 80242a4:	d021      	beq.n	80242ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80242a6:	9c08      	ldr	r4, [sp, #32]
 80242a8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80242ac:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80242ae:	fb04 fb0b 	mul.w	fp, r4, fp
 80242b2:	9c08      	ldr	r4, [sp, #32]
 80242b4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80242b8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80242ba:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80242be:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80242c2:	fb04 fa0a 	mul.w	sl, r4, sl
 80242c6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80242ca:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80242ce:	44de      	add	lr, fp
 80242d0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80242d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80242d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80242dc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80242e0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80242e4:	ea4e 040a 	orr.w	r4, lr, sl
 80242e8:	9408      	str	r4, [sp, #32]
 80242ea:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80242ec:	2cff      	cmp	r4, #255	@ 0xff
 80242ee:	d021      	beq.n	8024334 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80242f0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80242f2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80242f6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80242f8:	fb04 fb0b 	mul.w	fp, r4, fp
 80242fc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80242fe:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024302:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024304:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024308:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802430c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024310:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024314:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024318:	44de      	add	lr, fp
 802431a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802431e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024322:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024326:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802432a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802432e:	ea4e 040a 	orr.w	r4, lr, sl
 8024332:	940c      	str	r4, [sp, #48]	@ 0x30
 8024334:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024336:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802433a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802433e:	43c9      	mvns	r1, r1
 8024340:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024344:	9c08      	ldr	r4, [sp, #32]
 8024346:	fb08 fc0c 	mul.w	ip, r8, ip
 802434a:	fb02 cc0e 	mla	ip, r2, lr, ip
 802434e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8024352:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024354:	fb00 cc0e 	mla	ip, r0, lr, ip
 8024358:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802435c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802435e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024362:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8024366:	fb08 f80e 	mul.w	r8, r8, lr
 802436a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802436e:	fa5f fe81 	uxtb.w	lr, r1
 8024372:	fb02 8303 	mla	r3, r2, r3, r8
 8024376:	9a08      	ldr	r2, [sp, #32]
 8024378:	f8b7 8000 	ldrh.w	r8, [r7]
 802437c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024380:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8024384:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024386:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802438a:	fb00 330a 	mla	r3, r0, sl, r3
 802438e:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8024392:	ea4f 2228 	mov.w	r2, r8, asr #8
 8024396:	fb09 3900 	mla	r9, r9, r0, r3
 802439a:	ea4f 00e8 	mov.w	r0, r8, asr #3
 802439e:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80243a2:	b2c9      	uxtb	r1, r1
 80243a4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80243a8:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80243ac:	fb02 f20e 	mul.w	r2, r2, lr
 80243b0:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80243b4:	fb00 f00e 	mul.w	r0, r0, lr
 80243b8:	1c53      	adds	r3, r2, #1
 80243ba:	fb01 f10e 	mul.w	r1, r1, lr
 80243be:	ea4c 0c09 	orr.w	ip, ip, r9
 80243c2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80243c6:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80243ca:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80243ce:	4a60      	ldr	r2, [pc, #384]	@ (8024550 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 80243d0:	b2db      	uxtb	r3, r3
 80243d2:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 80243d6:	1c43      	adds	r3, r0, #1
 80243d8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80243dc:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80243e0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80243e4:	00db      	lsls	r3, r3, #3
 80243e6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80243ea:	4313      	orrs	r3, r2
 80243ec:	1c4a      	adds	r2, r1, #1
 80243ee:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80243f2:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80243f6:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80243fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80243fe:	f8a7 c000 	strh.w	ip, [r7]
 8024402:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024404:	3702      	adds	r7, #2
 8024406:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8024408:	441a      	add	r2, r3
 802440a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802440c:	441d      	add	r5, r3
 802440e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024410:	9225      	str	r2, [sp, #148]	@ 0x94
 8024412:	3b01      	subs	r3, #1
 8024414:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024416:	e699      	b.n	802414c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024418:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802441a:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802441c:	441c      	add	r4, r3
 802441e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024420:	441d      	add	r5, r3
 8024422:	9b07      	ldr	r3, [sp, #28]
 8024424:	9425      	str	r4, [sp, #148]	@ 0x94
 8024426:	3b01      	subs	r3, #1
 8024428:	9307      	str	r3, [sp, #28]
 802442a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802442c:	3302      	adds	r3, #2
 802442e:	930a      	str	r3, [sp, #40]	@ 0x28
 8024430:	e66c      	b.n	802410c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024432:	d024      	beq.n	802447e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8024434:	9b07      	ldr	r3, [sp, #28]
 8024436:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8024438:	3b01      	subs	r3, #1
 802443a:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802443c:	fb00 4003 	mla	r0, r0, r3, r4
 8024440:	1400      	asrs	r0, r0, #16
 8024442:	f53f ae80 	bmi.w	8024146 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024446:	3901      	subs	r1, #1
 8024448:	4288      	cmp	r0, r1
 802444a:	f6bf ae7c 	bge.w	8024146 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802444e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8024450:	fb01 5303 	mla	r3, r1, r3, r5
 8024454:	141b      	asrs	r3, r3, #16
 8024456:	f53f ae76 	bmi.w	8024146 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802445a:	3a01      	subs	r2, #1
 802445c:	4293      	cmp	r3, r2
 802445e:	f6bf ae72 	bge.w	8024146 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024462:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024466:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802446a:	f1bb 0f00 	cmp.w	fp, #0
 802446e:	dc71      	bgt.n	8024554 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8024470:	9b07      	ldr	r3, [sp, #28]
 8024472:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024476:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024478:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802447c:	930a      	str	r3, [sp, #40]	@ 0x28
 802447e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024480:	2b00      	cmp	r3, #0
 8024482:	f340 81af 	ble.w	80247e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8024486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802448a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802448c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024490:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024494:	eef0 6a62 	vmov.f32	s13, s5
 8024498:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802449c:	ee31 1a05 	vadd.f32	s2, s2, s10
 80244a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80244a4:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 80244a8:	eef0 6a43 	vmov.f32	s13, s6
 80244ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80244b0:	ee16 5a90 	vmov	r5, s13
 80244b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80244b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80244bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80244c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80244c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80244c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80244cc:	ee12 2a90 	vmov	r2, s5
 80244d0:	eef0 2a47 	vmov.f32	s5, s14
 80244d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80244d8:	ee13 2a10 	vmov	r2, s6
 80244dc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80244de:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80244e0:	eeb0 3a67 	vmov.f32	s6, s15
 80244e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80244e8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80244ea:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80244ec:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80244ee:	3b01      	subs	r3, #1
 80244f0:	9316      	str	r3, [sp, #88]	@ 0x58
 80244f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80244f4:	bf08      	it	eq
 80244f6:	4613      	moveq	r3, r2
 80244f8:	9307      	str	r3, [sp, #28]
 80244fa:	e5f9      	b.n	80240f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80244fc:	2800      	cmp	r0, #0
 80244fe:	f43f ae6b 	beq.w	80241d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024502:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024506:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802450a:	9108      	str	r1, [sp, #32]
 802450c:	0e09      	lsrs	r1, r1, #24
 802450e:	9110      	str	r1, [sp, #64]	@ 0x40
 8024510:	e662      	b.n	80241d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024512:	f113 0801 	adds.w	r8, r3, #1
 8024516:	f53f af74 	bmi.w	8024402 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802451a:	4541      	cmp	r1, r8
 802451c:	f6ff af71 	blt.w	8024402 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024520:	f11c 0801 	adds.w	r8, ip, #1
 8024524:	f53f af6d 	bmi.w	8024402 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024528:	45c6      	cmp	lr, r8
 802452a:	f6ff af6a 	blt.w	8024402 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802452e:	b209      	sxth	r1, r1
 8024530:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8024534:	fa0f f38e 	sxth.w	r3, lr
 8024538:	9100      	str	r1, [sp, #0]
 802453a:	4639      	mov	r1, r7
 802453c:	9301      	str	r3, [sp, #4]
 802453e:	4633      	mov	r3, r6
 8024540:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8024544:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024546:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8024548:	f7ff fc7b 	bl	8023e42 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 802454c:	e759      	b.n	8024402 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802454e:	bf00      	nop
 8024550:	fffff800 	.word	0xfffff800
 8024554:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024556:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802455a:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802455c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024560:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024562:	1427      	asrs	r7, r4, #16
 8024564:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024566:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802456a:	142b      	asrs	r3, r5, #16
 802456c:	fb01 7303 	mla	r3, r1, r3, r7
 8024570:	18e7      	adds	r7, r4, r3
 8024572:	5ce3      	ldrb	r3, [r4, r3]
 8024574:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024578:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802457c:	2a00      	cmp	r2, #0
 802457e:	f000 8127 	beq.w	80247d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8024582:	f897 e001 	ldrb.w	lr, [r7, #1]
 8024586:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802458a:	940d      	str	r4, [sp, #52]	@ 0x34
 802458c:	0e24      	lsrs	r4, r4, #24
 802458e:	9414      	str	r4, [sp, #80]	@ 0x50
 8024590:	b170      	cbz	r0, 80245b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024592:	eb07 0e01 	add.w	lr, r7, r1
 8024596:	5c79      	ldrb	r1, [r7, r1]
 8024598:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802459c:	9109      	str	r1, [sp, #36]	@ 0x24
 802459e:	0e09      	lsrs	r1, r1, #24
 80245a0:	9111      	str	r1, [sp, #68]	@ 0x44
 80245a2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80245a6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80245aa:	910e      	str	r1, [sp, #56]	@ 0x38
 80245ac:	0e09      	lsrs	r1, r1, #24
 80245ae:	9115      	str	r1, [sp, #84]	@ 0x54
 80245b0:	b292      	uxth	r2, r2
 80245b2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80245b4:	b280      	uxth	r0, r0
 80245b6:	fb02 f800 	mul.w	r8, r2, r0
 80245ba:	0112      	lsls	r2, r2, #4
 80245bc:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80245c0:	eba2 0e08 	sub.w	lr, r2, r8
 80245c4:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80245c8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80245ca:	b280      	uxth	r0, r0
 80245cc:	fa1f fe8e 	uxth.w	lr, lr
 80245d0:	1a09      	subs	r1, r1, r0
 80245d2:	fb0e f202 	mul.w	r2, lr, r2
 80245d6:	b289      	uxth	r1, r1
 80245d8:	fb01 220c 	mla	r2, r1, ip, r2
 80245dc:	fb00 2204 	mla	r2, r0, r4, r2
 80245e0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80245e2:	fb08 2204 	mla	r2, r8, r4, r2
 80245e6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80245ea:	2a00      	cmp	r2, #0
 80245ec:	f000 80e5 	beq.w	80247ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80245f0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80245f4:	d019      	beq.n	802462a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 80245f6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80245fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80245fe:	fb0c fa0a 	mul.w	sl, ip, sl
 8024602:	fb0c fc03 	mul.w	ip, ip, r3
 8024606:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802460a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802460e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8024612:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024616:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802461a:	4453      	add	r3, sl
 802461c:	0a3f      	lsrs	r7, r7, #8
 802461e:	0a1b      	lsrs	r3, r3, #8
 8024620:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8024624:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024628:	433b      	orrs	r3, r7
 802462a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802462c:	2cff      	cmp	r4, #255	@ 0xff
 802462e:	d020      	beq.n	8024672 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8024630:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024632:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024636:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024638:	4367      	muls	r7, r4
 802463a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802463c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024640:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024644:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024646:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802464a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802464e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024652:	44bc      	add	ip, r7
 8024654:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8024658:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802465c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024660:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024664:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024668:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802466c:	ea4c 040a 	orr.w	r4, ip, sl
 8024670:	940d      	str	r4, [sp, #52]	@ 0x34
 8024672:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024674:	2cff      	cmp	r4, #255	@ 0xff
 8024676:	d020      	beq.n	80246ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8024678:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802467a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802467e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024680:	4367      	muls	r7, r4
 8024682:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8024684:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024688:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802468c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802468e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024692:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024696:	fb04 fa0a 	mul.w	sl, r4, sl
 802469a:	44bc      	add	ip, r7
 802469c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80246a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80246a4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80246a8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80246ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246b0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80246b4:	ea4c 040a 	orr.w	r4, ip, sl
 80246b8:	9409      	str	r4, [sp, #36]	@ 0x24
 80246ba:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80246bc:	2cff      	cmp	r4, #255	@ 0xff
 80246be:	d020      	beq.n	8024702 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 80246c0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80246c2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80246c6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80246c8:	4367      	muls	r7, r4
 80246ca:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80246cc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80246d0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80246d4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80246d6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80246da:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80246de:	fb04 fa0a 	mul.w	sl, r4, sl
 80246e2:	44bc      	add	ip, r7
 80246e4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80246e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80246ec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80246f0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80246f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246f8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80246fc:	ea4c 040a 	orr.w	r4, ip, sl
 8024700:	940e      	str	r4, [sp, #56]	@ 0x38
 8024702:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024704:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8024708:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802470c:	43d2      	mvns	r2, r2
 802470e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024712:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8024714:	b2d2      	uxtb	r2, r2
 8024716:	fb0e f707 	mul.w	r7, lr, r7
 802471a:	fb01 770c 	mla	r7, r1, ip, r7
 802471e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024722:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024724:	fb00 770c 	mla	r7, r0, ip, r7
 8024728:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802472c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802472e:	fb08 770c 	mla	r7, r8, ip, r7
 8024732:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8024736:	fb0e fe0c 	mul.w	lr, lr, ip
 802473a:	0a3f      	lsrs	r7, r7, #8
 802473c:	fb01 e303 	mla	r3, r1, r3, lr
 8024740:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024742:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8024746:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802474a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802474c:	fb00 330a 	mla	r3, r0, sl, r3
 8024750:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8024754:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024758:	f8b9 3000 	ldrh.w	r3, [r9]
 802475c:	1218      	asrs	r0, r3, #8
 802475e:	10d9      	asrs	r1, r3, #3
 8024760:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024764:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8024768:	00db      	lsls	r3, r3, #3
 802476a:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802476e:	4350      	muls	r0, r2
 8024770:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8024774:	b2db      	uxtb	r3, r3
 8024776:	4351      	muls	r1, r2
 8024778:	ea47 070c 	orr.w	r7, r7, ip
 802477c:	4353      	muls	r3, r2
 802477e:	1c42      	adds	r2, r0, #1
 8024780:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024784:	0c3a      	lsrs	r2, r7, #16
 8024786:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802478a:	4a18      	ldr	r2, [pc, #96]	@ (80247ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 802478c:	b2c0      	uxtb	r0, r0
 802478e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8024792:	1c4a      	adds	r2, r1, #1
 8024794:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024798:	0a3a      	lsrs	r2, r7, #8
 802479a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802479e:	00c9      	lsls	r1, r1, #3
 80247a0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80247a4:	4301      	orrs	r1, r0
 80247a6:	1c58      	adds	r0, r3, #1
 80247a8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80247ac:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80247b0:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 80247b4:	4308      	orrs	r0, r1
 80247b6:	f8a9 0000 	strh.w	r0, [r9]
 80247ba:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80247bc:	f109 0902 	add.w	r9, r9, #2
 80247c0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80247c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80247c6:	441a      	add	r2, r3
 80247c8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80247ca:	9225      	str	r2, [sp, #148]	@ 0x94
 80247cc:	441d      	add	r5, r3
 80247ce:	e64c      	b.n	802446a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80247d0:	2800      	cmp	r0, #0
 80247d2:	f43f aeed 	beq.w	80245b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80247d6:	5c79      	ldrb	r1, [r7, r1]
 80247d8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80247dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80247de:	0e09      	lsrs	r1, r1, #24
 80247e0:	9111      	str	r1, [sp, #68]	@ 0x44
 80247e2:	e6e5      	b.n	80245b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80247e4:	b01b      	add	sp, #108	@ 0x6c
 80247e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247ea:	bf00      	nop
 80247ec:	fffff800 	.word	0xfffff800

080247f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80247f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247f4:	b085      	sub	sp, #20
 80247f6:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80247fa:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 80247fe:	2800      	cmp	r0, #0
 8024800:	9103      	str	r1, [sp, #12]
 8024802:	fb00 7406 	mla	r4, r0, r6, r7
 8024806:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 802480a:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 802480e:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8024812:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 8024816:	eb03 0904 	add.w	r9, r3, r4
 802481a:	9501      	str	r5, [sp, #4]
 802481c:	f2c0 8150 	blt.w	8024ac0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8024820:	4583      	cmp	fp, r0
 8024822:	f340 814d 	ble.w	8024ac0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8024826:	2f00      	cmp	r7, #0
 8024828:	f2c0 8146 	blt.w	8024ab8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 802482c:	42be      	cmp	r6, r7
 802482e:	f340 8143 	ble.w	8024ab8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8024832:	f813 c004 	ldrb.w	ip, [r3, r4]
 8024836:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 802483a:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 802483e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024842:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 8024846:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802484a:	4355      	muls	r5, r2
 802484c:	fb0c f203 	mul.w	r2, ip, r3
 8024850:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8024854:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8024858:	441d      	add	r5, r3
 802485a:	f102 0320 	add.w	r3, r2, #32
 802485e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024862:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8024866:	0a1b      	lsrs	r3, r3, #8
 8024868:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802486c:	431c      	orrs	r4, r3
 802486e:	1c7b      	adds	r3, r7, #1
 8024870:	f100 812b 	bmi.w	8024aca <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8024874:	429e      	cmp	r6, r3
 8024876:	f340 8128 	ble.w	8024aca <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 802487a:	2900      	cmp	r1, #0
 802487c:	f000 8128 	beq.w	8024ad0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8024880:	9a01      	ldr	r2, [sp, #4]
 8024882:	f899 3001 	ldrb.w	r3, [r9, #1]
 8024886:	8855      	ldrh	r5, [r2, #2]
 8024888:	ea4f 08e3 	mov.w	r8, r3, asr #3
 802488c:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8024890:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024894:	fb08 f802 	mul.w	r8, r8, r2
 8024898:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 802489c:	435d      	muls	r5, r3
 802489e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80248a2:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80248a6:	44d0      	add	r8, sl
 80248a8:	f105 0a20 	add.w	sl, r5, #32
 80248ac:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80248b0:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80248b4:	0a2d      	lsrs	r5, r5, #8
 80248b6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80248ba:	432a      	orrs	r2, r5
 80248bc:	3001      	adds	r0, #1
 80248be:	f100 810d 	bmi.w	8024adc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80248c2:	4583      	cmp	fp, r0
 80248c4:	f340 810a 	ble.w	8024adc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80248c8:	f1be 0f00 	cmp.w	lr, #0
 80248cc:	f000 810b 	beq.w	8024ae6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 80248d0:	2f00      	cmp	r7, #0
 80248d2:	f2c0 8100 	blt.w	8024ad6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80248d6:	42be      	cmp	r6, r7
 80248d8:	f340 80fd 	ble.w	8024ad6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80248dc:	9801      	ldr	r0, [sp, #4]
 80248de:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80248e2:	f819 5006 	ldrb.w	r5, [r9, r6]
 80248e6:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80248ea:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80248ee:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 80248f2:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80248f6:	fb0a fa00 	mul.w	sl, sl, r0
 80248fa:	fb05 f808 	mul.w	r8, r5, r8
 80248fe:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8024902:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 8024906:	4482      	add	sl, r0
 8024908:	f108 0020 	add.w	r0, r8, #32
 802490c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024910:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8024914:	0a00      	lsrs	r0, r0, #8
 8024916:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802491a:	ea4b 0b00 	orr.w	fp, fp, r0
 802491e:	3701      	adds	r7, #1
 8024920:	f100 80e6 	bmi.w	8024af0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8024924:	42be      	cmp	r6, r7
 8024926:	f340 80e3 	ble.w	8024af0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802492a:	2900      	cmp	r1, #0
 802492c:	f000 80e3 	beq.w	8024af6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8024930:	3601      	adds	r6, #1
 8024932:	9801      	ldr	r0, [sp, #4]
 8024934:	f819 7006 	ldrb.w	r7, [r9, r6]
 8024938:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 802493c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8024940:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8024944:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024948:	fb09 f906 	mul.w	r9, r9, r6
 802494c:	fb07 f800 	mul.w	r8, r7, r0
 8024950:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8024954:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8024958:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 802495c:	44d1      	add	r9, sl
 802495e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8024962:	f108 0020 	add.w	r0, r8, #32
 8024966:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802496a:	0a00      	lsrs	r0, r0, #8
 802496c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024970:	4330      	orrs	r0, r6
 8024972:	b28e      	uxth	r6, r1
 8024974:	fa1f f98e 	uxth.w	r9, lr
 8024978:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 802497c:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8024980:	fb06 f809 	mul.w	r8, r6, r9
 8024984:	0136      	lsls	r6, r6, #4
 8024986:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802498a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802498e:	9601      	str	r6, [sp, #4]
 8024990:	ea4a 0404 	orr.w	r4, sl, r4
 8024994:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024998:	fa1f f689 	uxth.w	r6, r9
 802499c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80249a0:	fb11 f90e 	smulbb	r9, r1, lr
 80249a4:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80249a8:	9602      	str	r6, [sp, #8]
 80249aa:	4626      	mov	r6, r4
 80249ac:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80249b0:	f1ce 0410 	rsb	r4, lr, #16
 80249b4:	ea4a 0202 	orr.w	r2, sl, r2
 80249b8:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80249bc:	1a64      	subs	r4, r4, r1
 80249be:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80249c2:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80249c6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80249ca:	434a      	muls	r2, r1
 80249cc:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80249d0:	ea4a 0000 	orr.w	r0, sl, r0
 80249d4:	9903      	ldr	r1, [sp, #12]
 80249d6:	fb04 2406 	mla	r4, r4, r6, r2
 80249da:	9e02      	ldr	r6, [sp, #8]
 80249dc:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80249e0:	fb09 4200 	mla	r2, r9, r0, r4
 80249e4:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80249e8:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80249ec:	8808      	ldrh	r0, [r1, #0]
 80249ee:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80249f2:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 80249f6:	ea44 0b0b 	orr.w	fp, r4, fp
 80249fa:	9c01      	ldr	r4, [sp, #4]
 80249fc:	b289      	uxth	r1, r1
 80249fe:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 8024a02:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8024a06:	1ba4      	subs	r4, r4, r6
 8024a08:	9e01      	ldr	r6, [sp, #4]
 8024a0a:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8024a0e:	eba6 0608 	sub.w	r6, r6, r8
 8024a12:	b2a4      	uxth	r4, r4
 8024a14:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024a18:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024a1c:	b2b6      	uxth	r6, r6
 8024a1e:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8024a22:	4373      	muls	r3, r6
 8024a24:	ea42 0e0e 	orr.w	lr, r2, lr
 8024a28:	fb0c 3304 	mla	r3, ip, r4, r3
 8024a2c:	9c02      	ldr	r4, [sp, #8]
 8024a2e:	fa1f f28e 	uxth.w	r2, lr
 8024a32:	fb04 3505 	mla	r5, r4, r5, r3
 8024a36:	10d4      	asrs	r4, r2, #3
 8024a38:	fb08 5707 	mla	r7, r8, r7, r5
 8024a3c:	1215      	asrs	r5, r2, #8
 8024a3e:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8024a42:	00d2      	lsls	r2, r2, #3
 8024a44:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024a48:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8024a4c:	b2d2      	uxtb	r2, r2
 8024a4e:	434f      	muls	r7, r1
 8024a50:	1c7b      	adds	r3, r7, #1
 8024a52:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024a56:	1203      	asrs	r3, r0, #8
 8024a58:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8024a5c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8024a60:	b2ff      	uxtb	r7, r7
 8024a62:	fb13 f307 	smulbb	r3, r3, r7
 8024a66:	fb05 3501 	mla	r5, r5, r1, r3
 8024a6a:	10c3      	asrs	r3, r0, #3
 8024a6c:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8024a70:	b2ad      	uxth	r5, r5
 8024a72:	fb13 f307 	smulbb	r3, r3, r7
 8024a76:	fb04 3401 	mla	r4, r4, r1, r3
 8024a7a:	00c3      	lsls	r3, r0, #3
 8024a7c:	b2db      	uxtb	r3, r3
 8024a7e:	b2a4      	uxth	r4, r4
 8024a80:	fb13 f307 	smulbb	r3, r3, r7
 8024a84:	fb02 3101 	mla	r1, r2, r1, r3
 8024a88:	1c6b      	adds	r3, r5, #1
 8024a8a:	1c62      	adds	r2, r4, #1
 8024a8c:	b289      	uxth	r1, r1
 8024a8e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024a92:	1c4b      	adds	r3, r1, #1
 8024a94:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8024a98:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8024a9c:	9a03      	ldr	r2, [sp, #12]
 8024a9e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024aa2:	0964      	lsrs	r4, r4, #5
 8024aa4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024aa8:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8024aac:	432b      	orrs	r3, r5
 8024aae:	4323      	orrs	r3, r4
 8024ab0:	8013      	strh	r3, [r2, #0]
 8024ab2:	b005      	add	sp, #20
 8024ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ab8:	f04f 0c00 	mov.w	ip, #0
 8024abc:	4664      	mov	r4, ip
 8024abe:	e6d6      	b.n	802486e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8024ac0:	2300      	movs	r3, #0
 8024ac2:	469c      	mov	ip, r3
 8024ac4:	461a      	mov	r2, r3
 8024ac6:	461c      	mov	r4, r3
 8024ac8:	e6f8      	b.n	80248bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8024aca:	2300      	movs	r3, #0
 8024acc:	461a      	mov	r2, r3
 8024ace:	e6f5      	b.n	80248bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8024ad0:	460b      	mov	r3, r1
 8024ad2:	460a      	mov	r2, r1
 8024ad4:	e6f2      	b.n	80248bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8024ad6:	2500      	movs	r5, #0
 8024ad8:	46ab      	mov	fp, r5
 8024ada:	e720      	b.n	802491e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8024adc:	2700      	movs	r7, #0
 8024ade:	463d      	mov	r5, r7
 8024ae0:	4638      	mov	r0, r7
 8024ae2:	46bb      	mov	fp, r7
 8024ae4:	e745      	b.n	8024972 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8024ae6:	4677      	mov	r7, lr
 8024ae8:	4675      	mov	r5, lr
 8024aea:	4670      	mov	r0, lr
 8024aec:	46f3      	mov	fp, lr
 8024aee:	e740      	b.n	8024972 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8024af0:	2700      	movs	r7, #0
 8024af2:	4638      	mov	r0, r7
 8024af4:	e73d      	b.n	8024972 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8024af6:	460f      	mov	r7, r1
 8024af8:	4608      	mov	r0, r1
 8024afa:	e73a      	b.n	8024972 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08024afc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b00:	b097      	sub	sp, #92	@ 0x5c
 8024b02:	9214      	str	r2, [sp, #80]	@ 0x50
 8024b04:	9308      	str	r3, [sp, #32]
 8024b06:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8024b08:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8024b0c:	9015      	str	r0, [sp, #84]	@ 0x54
 8024b0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8024b10:	6850      	ldr	r0, [r2, #4]
 8024b12:	9111      	str	r1, [sp, #68]	@ 0x44
 8024b14:	6812      	ldr	r2, [r2, #0]
 8024b16:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8024b1a:	fb00 1303 	mla	r3, r0, r3, r1
 8024b1e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024b22:	9309      	str	r3, [sp, #36]	@ 0x24
 8024b24:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024b26:	681b      	ldr	r3, [r3, #0]
 8024b28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024b2a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024b2c:	685b      	ldr	r3, [r3, #4]
 8024b2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8024b30:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8024b34:	930a      	str	r3, [sp, #40]	@ 0x28
 8024b36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024b38:	2b00      	cmp	r3, #0
 8024b3a:	dc03      	bgt.n	8024b44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8024b3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024b3e:	2b00      	cmp	r3, #0
 8024b40:	f340 83cd 	ble.w	80252de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8024b44:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024b46:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024b4a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024b4e:	1e48      	subs	r0, r1, #1
 8024b50:	1e55      	subs	r5, r2, #1
 8024b52:	9b08      	ldr	r3, [sp, #32]
 8024b54:	2b00      	cmp	r3, #0
 8024b56:	f340 81a5 	ble.w	8024ea4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8024b5a:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8024b5c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024b5e:	1436      	asrs	r6, r6, #16
 8024b60:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024b64:	d406      	bmi.n	8024b74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024b66:	4286      	cmp	r6, r0
 8024b68:	da04      	bge.n	8024b74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024b6a:	2b00      	cmp	r3, #0
 8024b6c:	db02      	blt.n	8024b74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024b6e:	42ab      	cmp	r3, r5
 8024b70:	f2c0 8199 	blt.w	8024ea6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8024b74:	3601      	adds	r6, #1
 8024b76:	f100 8186 	bmi.w	8024e86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024b7a:	42b1      	cmp	r1, r6
 8024b7c:	f2c0 8183 	blt.w	8024e86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024b80:	3301      	adds	r3, #1
 8024b82:	f100 8180 	bmi.w	8024e86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024b86:	429a      	cmp	r2, r3
 8024b88:	f2c0 817d 	blt.w	8024e86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024b8c:	9b08      	ldr	r3, [sp, #32]
 8024b8e:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8024b92:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8024b94:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024b96:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024b98:	2b00      	cmp	r3, #0
 8024b9a:	f340 81a6 	ble.w	8024eea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8024b9e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024ba0:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8024ba2:	1418      	asrs	r0, r3, #16
 8024ba4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024ba6:	142d      	asrs	r5, r5, #16
 8024ba8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8024bac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024bae:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8024bb2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024bb4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024bb8:	f100 81fa 	bmi.w	8024fb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024bbc:	f102 3eff 	add.w	lr, r2, #4294967295
 8024bc0:	4575      	cmp	r5, lr
 8024bc2:	f280 81f5 	bge.w	8024fb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024bc6:	2800      	cmp	r0, #0
 8024bc8:	f2c0 81f2 	blt.w	8024fb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024bcc:	f103 3eff 	add.w	lr, r3, #4294967295
 8024bd0:	4570      	cmp	r0, lr
 8024bd2:	f280 81ed 	bge.w	8024fb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024bd6:	b212      	sxth	r2, r2
 8024bd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024bda:	fa1f fe81 	uxth.w	lr, r1
 8024bde:	fb00 5002 	mla	r0, r0, r2, r5
 8024be2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8024be6:	eb03 0a00 	add.w	sl, r3, r0
 8024bea:	f813 9000 	ldrb.w	r9, [r3, r0]
 8024bee:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8024bf2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024bf6:	b29b      	uxth	r3, r3
 8024bf8:	f1bc 0f00 	cmp.w	ip, #0
 8024bfc:	f000 81bb 	beq.w	8024f76 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8024c00:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8024c04:	eb0a 0b02 	add.w	fp, sl, r2
 8024c08:	fa1f fa8c 	uxth.w	sl, ip
 8024c0c:	940d      	str	r4, [sp, #52]	@ 0x34
 8024c0e:	fb0a fe0e 	mul.w	lr, sl, lr
 8024c12:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024c16:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8024c1a:	eba5 050e 	sub.w	r5, r5, lr
 8024c1e:	940e      	str	r4, [sp, #56]	@ 0x38
 8024c20:	fa1f fa8a 	uxth.w	sl, sl
 8024c24:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024c26:	b2ad      	uxth	r5, r5
 8024c28:	eba3 030a 	sub.w	r3, r3, sl
 8024c2c:	fb08 f505 	mul.w	r5, r8, r5
 8024c30:	b29b      	uxth	r3, r3
 8024c32:	fb09 5303 	mla	r3, r9, r3, r5
 8024c36:	fb0a 3304 	mla	r3, sl, r4, r3
 8024c3a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024c3c:	fb0e 3304 	mla	r3, lr, r4, r3
 8024c40:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024c44:	2b00      	cmp	r3, #0
 8024c46:	f000 8111 	beq.w	8024e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024c4a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024c4c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8024c50:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8024c54:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8024c58:	f000 8192 	beq.w	8024f80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8024c5c:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8024c60:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024c64:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024c68:	fb0a fe0e 	mul.w	lr, sl, lr
 8024c6c:	fb09 f000 	mul.w	r0, r9, r0
 8024c70:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8024c74:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8024c78:	f100 0b20 	add.w	fp, r0, #32
 8024c7c:	44ce      	add	lr, r9
 8024c7e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8024c82:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8024c86:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024c8a:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8024c8e:	ea4e 0909 	orr.w	r9, lr, r9
 8024c92:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8024c96:	8868      	ldrh	r0, [r5, #2]
 8024c98:	d019      	beq.n	8024cce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024c9a:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8024c9e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8024ca2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024ca6:	fb0a fe0e 	mul.w	lr, sl, lr
 8024caa:	fb08 f800 	mul.w	r8, r8, r0
 8024cae:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8024cb2:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8024cb6:	f108 0b20 	add.w	fp, r8, #32
 8024cba:	4486      	add	lr, r0
 8024cbc:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8024cc0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8024cc4:	0a00      	lsrs	r0, r0, #8
 8024cc6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024cca:	ea4e 0000 	orr.w	r0, lr, r0
 8024cce:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8024cd2:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8024cd6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8024cda:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8024cde:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8024ce2:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8024ce6:	ea4e 0909 	orr.w	r9, lr, r9
 8024cea:	ea4a 0000 	orr.w	r0, sl, r0
 8024cee:	f1bc 0f00 	cmp.w	ip, #0
 8024cf2:	f000 8147 	beq.w	8024f84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8024cf6:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8024cfa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024cfc:	3a01      	subs	r2, #1
 8024cfe:	2cff      	cmp	r4, #255	@ 0xff
 8024d00:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024d04:	f102 0202 	add.w	r2, r2, #2
 8024d08:	eb05 0e02 	add.w	lr, r5, r2
 8024d0c:	5aaa      	ldrh	r2, [r5, r2]
 8024d0e:	d018      	beq.n	8024d42 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8024d10:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8024d14:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024d18:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024d1c:	fb04 fa02 	mul.w	sl, r4, r2
 8024d20:	fb08 f805 	mul.w	r8, r8, r5
 8024d24:	f10a 0520 	add.w	r5, sl, #32
 8024d28:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8024d2c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8024d30:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8024d34:	4442      	add	r2, r8
 8024d36:	0a2d      	lsrs	r5, r5, #8
 8024d38:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8024d3c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024d40:	432a      	orrs	r2, r5
 8024d42:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024d44:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8024d48:	2cff      	cmp	r4, #255	@ 0xff
 8024d4a:	d01a      	beq.n	8024d82 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8024d4c:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8024d50:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024d54:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024d58:	fb04 fa05 	mul.w	sl, r4, r5
 8024d5c:	fb08 f80e 	mul.w	r8, r8, lr
 8024d60:	f10a 0e20 	add.w	lr, sl, #32
 8024d64:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8024d68:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8024d6c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8024d70:	4445      	add	r5, r8
 8024d72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024d76:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8024d7a:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8024d7e:	ea45 050e 	orr.w	r5, r5, lr
 8024d82:	fb1c fe01 	smulbb	lr, ip, r1
 8024d86:	f1cc 0810 	rsb	r8, ip, #16
 8024d8a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024d8e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024d92:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8024d96:	eba8 0801 	sub.w	r8, r8, r1
 8024d9a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8024d9e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8024da2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8024da6:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8024daa:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8024dae:	ea4a 0202 	orr.w	r2, sl, r2
 8024db2:	4341      	muls	r1, r0
 8024db4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8024db8:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8024dbc:	fb09 1108 	mla	r1, r9, r8, r1
 8024dc0:	ea4b 0505 	orr.w	r5, fp, r5
 8024dc4:	fb0c 1102 	mla	r1, ip, r2, r1
 8024dc8:	fb0e 1e05 	mla	lr, lr, r5, r1
 8024dcc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8024dd0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024dd4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024dd8:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8024ddc:	ea42 0e0e 	orr.w	lr, r2, lr
 8024de0:	fa1f f28e 	uxth.w	r2, lr
 8024de4:	2bff      	cmp	r3, #255	@ 0xff
 8024de6:	d103      	bne.n	8024df0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024de8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8024dea:	29ff      	cmp	r1, #255	@ 0xff
 8024dec:	f000 80de 	beq.w	8024fac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8024df0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024df2:	1215      	asrs	r5, r2, #8
 8024df4:	8838      	ldrh	r0, [r7, #0]
 8024df6:	434b      	muls	r3, r1
 8024df8:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8024dfc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024dfe:	f103 0c01 	add.w	ip, r3, #1
 8024e02:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8024e06:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8024e0a:	fa5f fc83 	uxtb.w	ip, r3
 8024e0e:	1203      	asrs	r3, r0, #8
 8024e10:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8024e14:	fb13 f30c 	smulbb	r3, r3, ip
 8024e18:	fb05 3501 	mla	r5, r5, r1, r3
 8024e1c:	10c3      	asrs	r3, r0, #3
 8024e1e:	10d1      	asrs	r1, r2, #3
 8024e20:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8024e24:	00d2      	lsls	r2, r2, #3
 8024e26:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8024e2a:	b2ad      	uxth	r5, r5
 8024e2c:	fb13 f30c 	smulbb	r3, r3, ip
 8024e30:	b2d2      	uxtb	r2, r2
 8024e32:	fb01 3104 	mla	r1, r1, r4, r3
 8024e36:	00c3      	lsls	r3, r0, #3
 8024e38:	b2db      	uxtb	r3, r3
 8024e3a:	b289      	uxth	r1, r1
 8024e3c:	fb13 f30c 	smulbb	r3, r3, ip
 8024e40:	fb02 3304 	mla	r3, r2, r4, r3
 8024e44:	b29a      	uxth	r2, r3
 8024e46:	1c6b      	adds	r3, r5, #1
 8024e48:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024e4c:	1c53      	adds	r3, r2, #1
 8024e4e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024e52:	1c4a      	adds	r2, r1, #1
 8024e54:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8024e58:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024e5c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024e60:	0949      	lsrs	r1, r1, #5
 8024e62:	432b      	orrs	r3, r5
 8024e64:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024e68:	430b      	orrs	r3, r1
 8024e6a:	803b      	strh	r3, [r7, #0]
 8024e6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024e6e:	3702      	adds	r7, #2
 8024e70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8024e72:	4413      	add	r3, r2
 8024e74:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8024e76:	9321      	str	r3, [sp, #132]	@ 0x84
 8024e78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024e7a:	441a      	add	r2, r3
 8024e7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024e7e:	3b01      	subs	r3, #1
 8024e80:	9222      	str	r2, [sp, #136]	@ 0x88
 8024e82:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024e84:	e687      	b.n	8024b96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024e86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024e88:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8024e8a:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8024e8c:	4433      	add	r3, r6
 8024e8e:	9321      	str	r3, [sp, #132]	@ 0x84
 8024e90:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024e92:	441c      	add	r4, r3
 8024e94:	9b08      	ldr	r3, [sp, #32]
 8024e96:	3b01      	subs	r3, #1
 8024e98:	9422      	str	r4, [sp, #136]	@ 0x88
 8024e9a:	9308      	str	r3, [sp, #32]
 8024e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e9e:	3302      	adds	r3, #2
 8024ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8024ea2:	e656      	b.n	8024b52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8024ea4:	d028      	beq.n	8024ef8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8024ea6:	9b08      	ldr	r3, [sp, #32]
 8024ea8:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8024eaa:	3b01      	subs	r3, #1
 8024eac:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8024eae:	fb00 5003 	mla	r0, r0, r3, r5
 8024eb2:	1400      	asrs	r0, r0, #16
 8024eb4:	f53f ae6a 	bmi.w	8024b8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024eb8:	3901      	subs	r1, #1
 8024eba:	4288      	cmp	r0, r1
 8024ebc:	f6bf ae66 	bge.w	8024b8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024ec0:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8024ec2:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8024ec4:	fb01 0303 	mla	r3, r1, r3, r0
 8024ec8:	141b      	asrs	r3, r3, #16
 8024eca:	f53f ae5f 	bmi.w	8024b8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024ece:	3a01      	subs	r2, #1
 8024ed0:	4293      	cmp	r3, r2
 8024ed2:	f6bf ae5b 	bge.w	8024b8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024ed6:	9b08      	ldr	r3, [sp, #32]
 8024ed8:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8024edc:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8024ee0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024ee2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024ee4:	2b00      	cmp	r3, #0
 8024ee6:	f300 8082 	bgt.w	8024fee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8024eea:	9b08      	ldr	r3, [sp, #32]
 8024eec:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024ef2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8024ef8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024efa:	2b00      	cmp	r3, #0
 8024efc:	f340 81ef 	ble.w	80252de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8024f00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024f04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024f06:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024f0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024f0e:	eef0 6a62 	vmov.f32	s13, s5
 8024f12:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024f16:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024f1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f1e:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 8024f22:	eef0 6a43 	vmov.f32	s13, s6
 8024f26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f2a:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 8024f2e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024f32:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024f36:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024f3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024f3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024f42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024f46:	ee12 2a90 	vmov	r2, s5
 8024f4a:	eef0 2a47 	vmov.f32	s5, s14
 8024f4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f52:	ee13 2a10 	vmov	r2, s6
 8024f56:	9323      	str	r3, [sp, #140]	@ 0x8c
 8024f58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024f5a:	eeb0 3a67 	vmov.f32	s6, s15
 8024f5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f62:	9324      	str	r3, [sp, #144]	@ 0x90
 8024f64:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024f66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024f68:	3b01      	subs	r3, #1
 8024f6a:	9311      	str	r3, [sp, #68]	@ 0x44
 8024f6c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024f6e:	bf08      	it	eq
 8024f70:	4613      	moveq	r3, r2
 8024f72:	9308      	str	r3, [sp, #32]
 8024f74:	e5df      	b.n	8024b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024f76:	fb08 f505 	mul.w	r5, r8, r5
 8024f7a:	fb09 5303 	mla	r3, r9, r3, r5
 8024f7e:	e65f      	b.n	8024c40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8024f80:	4681      	mov	r9, r0
 8024f82:	e686      	b.n	8024c92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8024f84:	f1c1 0210 	rsb	r2, r1, #16
 8024f88:	4341      	muls	r1, r0
 8024f8a:	fb09 1902 	mla	r9, r9, r2, r1
 8024f8e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8024f92:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8024f96:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8024f9a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024f9e:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8024fa2:	ea42 0909 	orr.w	r9, r2, r9
 8024fa6:	fa1f f289 	uxth.w	r2, r9
 8024faa:	e71b      	b.n	8024de4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8024fac:	803a      	strh	r2, [r7, #0]
 8024fae:	e75d      	b.n	8024e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024fb0:	f115 0e01 	adds.w	lr, r5, #1
 8024fb4:	f53f af5a 	bmi.w	8024e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024fb8:	4572      	cmp	r2, lr
 8024fba:	f6ff af57 	blt.w	8024e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024fbe:	f110 0e01 	adds.w	lr, r0, #1
 8024fc2:	f53f af53 	bmi.w	8024e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024fc6:	4573      	cmp	r3, lr
 8024fc8:	f6ff af50 	blt.w	8024e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024fcc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024fce:	b21b      	sxth	r3, r3
 8024fd0:	b212      	sxth	r2, r2
 8024fd2:	9502      	str	r5, [sp, #8]
 8024fd4:	9301      	str	r3, [sp, #4]
 8024fd6:	9200      	str	r2, [sp, #0]
 8024fd8:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8024fdc:	e9cd c405 	strd	ip, r4, [sp, #20]
 8024fe0:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8024fe4:	4639      	mov	r1, r7
 8024fe6:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8024fe8:	f7ff fc02 	bl	80247f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8024fec:	e73e      	b.n	8024e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024fee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024ff0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024ff4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024ff6:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8024ffa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024ffc:	fa1f fc82 	uxth.w	ip, r2
 8025000:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025004:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025006:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802500a:	141f      	asrs	r7, r3, #16
 802500c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802500e:	141b      	asrs	r3, r3, #16
 8025010:	fb01 3707 	mla	r7, r1, r7, r3
 8025014:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025016:	eb03 0a07 	add.w	sl, r3, r7
 802501a:	f813 9007 	ldrb.w	r9, [r3, r7]
 802501e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8025022:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025026:	b29b      	uxth	r3, r3
 8025028:	2d00      	cmp	r5, #0
 802502a:	f000 813d 	beq.w	80252a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 802502e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025032:	eb0a 0b01 	add.w	fp, sl, r1
 8025036:	fa1f fa85 	uxth.w	sl, r5
 802503a:	940f      	str	r4, [sp, #60]	@ 0x3c
 802503c:	fb0a fc0c 	mul.w	ip, sl, ip
 8025040:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025044:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025048:	eba0 000c 	sub.w	r0, r0, ip
 802504c:	9410      	str	r4, [sp, #64]	@ 0x40
 802504e:	fa1f fa8a 	uxth.w	sl, sl
 8025052:	b280      	uxth	r0, r0
 8025054:	eba3 030a 	sub.w	r3, r3, sl
 8025058:	fb08 f000 	mul.w	r0, r8, r0
 802505c:	b29b      	uxth	r3, r3
 802505e:	fb09 0303 	mla	r3, r9, r3, r0
 8025062:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8025064:	fb0a 3300 	mla	r3, sl, r0, r3
 8025068:	fb0c 3304 	mla	r3, ip, r4, r3
 802506c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025070:	2b00      	cmp	r3, #0
 8025072:	f000 810b 	beq.w	802528c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8025076:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8025078:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802507c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802507e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8025082:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8025086:	f000 8114 	beq.w	80252b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 802508a:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 802508e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025092:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8025096:	fb0a fc0c 	mul.w	ip, sl, ip
 802509a:	fb09 f707 	mul.w	r7, r9, r7
 802509e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80250a2:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80250a6:	f107 0b20 	add.w	fp, r7, #32
 80250aa:	44cc      	add	ip, r9
 80250ac:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80250b0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80250b4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80250b8:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80250bc:	ea4c 0909 	orr.w	r9, ip, r9
 80250c0:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80250c4:	8847      	ldrh	r7, [r0, #2]
 80250c6:	d019      	beq.n	80250fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 80250c8:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 80250cc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80250d0:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80250d4:	fb0a fc0c 	mul.w	ip, sl, ip
 80250d8:	fb08 f807 	mul.w	r8, r8, r7
 80250dc:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80250e0:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80250e4:	f108 0b20 	add.w	fp, r8, #32
 80250e8:	44bc      	add	ip, r7
 80250ea:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80250ee:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80250f2:	0a3f      	lsrs	r7, r7, #8
 80250f4:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80250f8:	ea4c 0707 	orr.w	r7, ip, r7
 80250fc:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025100:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8025104:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8025108:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 802510c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025110:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025114:	ea4c 0909 	orr.w	r9, ip, r9
 8025118:	ea4a 0707 	orr.w	r7, sl, r7
 802511c:	2d00      	cmp	r5, #0
 802511e:	f000 80ca 	beq.w	80252b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 8025122:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8025126:	3901      	subs	r1, #1
 8025128:	0049      	lsls	r1, r1, #1
 802512a:	3102      	adds	r1, #2
 802512c:	eb00 0c01 	add.w	ip, r0, r1
 8025130:	5a41      	ldrh	r1, [r0, r1]
 8025132:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8025134:	28ff      	cmp	r0, #255	@ 0xff
 8025136:	d019      	beq.n	802516c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8025138:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 802513c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802513e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025142:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025146:	fb04 fa01 	mul.w	sl, r4, r1
 802514a:	fb08 f800 	mul.w	r8, r8, r0
 802514e:	f10a 0020 	add.w	r0, sl, #32
 8025152:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8025156:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802515a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802515e:	4441      	add	r1, r8
 8025160:	0a00      	lsrs	r0, r0, #8
 8025162:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8025166:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802516a:	4301      	orrs	r1, r0
 802516c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802516e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8025172:	2cff      	cmp	r4, #255	@ 0xff
 8025174:	d01a      	beq.n	80251ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8025176:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 802517a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802517e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025182:	fb04 fa00 	mul.w	sl, r4, r0
 8025186:	fb08 f80c 	mul.w	r8, r8, ip
 802518a:	f10a 0c20 	add.w	ip, sl, #32
 802518e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8025192:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025196:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802519a:	4440      	add	r0, r8
 802519c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80251a0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80251a4:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80251a8:	ea40 000c 	orr.w	r0, r0, ip
 80251ac:	fb15 fc02 	smulbb	ip, r5, r2
 80251b0:	f1c5 0810 	rsb	r8, r5, #16
 80251b4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80251b8:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80251bc:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80251c0:	eba8 0802 	sub.w	r8, r8, r2
 80251c4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80251c8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80251cc:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80251d0:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80251d4:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80251d8:	ea4a 0101 	orr.w	r1, sl, r1
 80251dc:	437a      	muls	r2, r7
 80251de:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80251e2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80251e6:	fb09 2208 	mla	r2, r9, r8, r2
 80251ea:	ea4b 0000 	orr.w	r0, fp, r0
 80251ee:	fb05 2201 	mla	r2, r5, r1, r2
 80251f2:	fb0c 2200 	mla	r2, ip, r0, r2
 80251f6:	0d57      	lsrs	r7, r2, #21
 80251f8:	0952      	lsrs	r2, r2, #5
 80251fa:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80251fe:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025202:	433a      	orrs	r2, r7
 8025204:	2bff      	cmp	r3, #255	@ 0xff
 8025206:	b292      	uxth	r2, r2
 8025208:	d102      	bne.n	8025210 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 802520a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802520c:	29ff      	cmp	r1, #255	@ 0xff
 802520e:	d063      	beq.n	80252d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8025210:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025212:	1215      	asrs	r5, r2, #8
 8025214:	f8be 1000 	ldrh.w	r1, [lr]
 8025218:	4343      	muls	r3, r0
 802521a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802521c:	10cf      	asrs	r7, r1, #3
 802521e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8025222:	1c58      	adds	r0, r3, #1
 8025224:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8025228:	eb00 2323 	add.w	r3, r0, r3, asr #8
 802522c:	1208      	asrs	r0, r1, #8
 802522e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8025232:	00c9      	lsls	r1, r1, #3
 8025234:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8025238:	b2db      	uxtb	r3, r3
 802523a:	b2c9      	uxtb	r1, r1
 802523c:	fb10 f003 	smulbb	r0, r0, r3
 8025240:	fb11 f103 	smulbb	r1, r1, r3
 8025244:	fb05 0504 	mla	r5, r5, r4, r0
 8025248:	10d0      	asrs	r0, r2, #3
 802524a:	fb17 f703 	smulbb	r7, r7, r3
 802524e:	00d2      	lsls	r2, r2, #3
 8025250:	b2ad      	uxth	r5, r5
 8025252:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8025256:	b2d2      	uxtb	r2, r2
 8025258:	fb00 7004 	mla	r0, r0, r4, r7
 802525c:	1c6b      	adds	r3, r5, #1
 802525e:	fb02 1204 	mla	r2, r2, r4, r1
 8025262:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025266:	b292      	uxth	r2, r2
 8025268:	b280      	uxth	r0, r0
 802526a:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802526e:	1c57      	adds	r7, r2, #1
 8025270:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8025274:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025278:	433d      	orrs	r5, r7
 802527a:	1c47      	adds	r7, r0, #1
 802527c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8025280:	097f      	lsrs	r7, r7, #5
 8025282:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8025286:	433d      	orrs	r5, r7
 8025288:	f8ae 5000 	strh.w	r5, [lr]
 802528c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802528e:	f10e 0e02 	add.w	lr, lr, #2
 8025292:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025294:	4413      	add	r3, r2
 8025296:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8025298:	9321      	str	r3, [sp, #132]	@ 0x84
 802529a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802529c:	441a      	add	r2, r3
 802529e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80252a0:	3b01      	subs	r3, #1
 80252a2:	9222      	str	r2, [sp, #136]	@ 0x88
 80252a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80252a6:	e61c      	b.n	8024ee2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80252a8:	fb08 f000 	mul.w	r0, r8, r0
 80252ac:	fb09 0303 	mla	r3, r9, r3, r0
 80252b0:	e6dc      	b.n	802506c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 80252b2:	46b9      	mov	r9, r7
 80252b4:	e704      	b.n	80250c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 80252b6:	f1c2 0110 	rsb	r1, r2, #16
 80252ba:	437a      	muls	r2, r7
 80252bc:	fb09 2901 	mla	r9, r9, r1, r2
 80252c0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80252c4:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80252c8:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80252cc:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80252d0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80252d4:	4302      	orrs	r2, r0
 80252d6:	e795      	b.n	8025204 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 80252d8:	f8ae 2000 	strh.w	r2, [lr]
 80252dc:	e7d6      	b.n	802528c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 80252de:	b017      	add	sp, #92	@ 0x5c
 80252e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080252e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80252e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80252e8:	b085      	sub	sp, #20
 80252ea:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80252ee:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 80252f2:	2800      	cmp	r0, #0
 80252f4:	9103      	str	r1, [sp, #12]
 80252f6:	fb00 7406 	mla	r4, r0, r6, r7
 80252fa:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 80252fe:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 8025302:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8025306:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 802530a:	eb02 0904 	add.w	r9, r2, r4
 802530e:	9501      	str	r5, [sp, #4]
 8025310:	f2c0 8141 	blt.w	8025596 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8025314:	4583      	cmp	fp, r0
 8025316:	f340 813e 	ble.w	8025596 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802531a:	2f00      	cmp	r7, #0
 802531c:	f2c0 8137 	blt.w	802558e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8025320:	42be      	cmp	r6, r7
 8025322:	f340 8134 	ble.w	802558e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8025326:	f812 c004 	ldrb.w	ip, [r2, r4]
 802532a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 802532e:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8025332:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025336:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 802533a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802533e:	4355      	muls	r5, r2
 8025340:	fb0c f203 	mul.w	r2, ip, r3
 8025344:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8025348:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 802534c:	441d      	add	r5, r3
 802534e:	f102 0320 	add.w	r3, r2, #32
 8025352:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025356:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802535a:	0a1b      	lsrs	r3, r3, #8
 802535c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025360:	431c      	orrs	r4, r3
 8025362:	1c7b      	adds	r3, r7, #1
 8025364:	f100 811c 	bmi.w	80255a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8025368:	429e      	cmp	r6, r3
 802536a:	f340 8119 	ble.w	80255a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 802536e:	2900      	cmp	r1, #0
 8025370:	f000 8119 	beq.w	80255a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8025374:	9a01      	ldr	r2, [sp, #4]
 8025376:	f899 3001 	ldrb.w	r3, [r9, #1]
 802537a:	8855      	ldrh	r5, [r2, #2]
 802537c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8025380:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8025384:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8025388:	fb08 f802 	mul.w	r8, r8, r2
 802538c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8025390:	435d      	muls	r5, r3
 8025392:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8025396:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802539a:	44d0      	add	r8, sl
 802539c:	f105 0a20 	add.w	sl, r5, #32
 80253a0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80253a4:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80253a8:	0a2d      	lsrs	r5, r5, #8
 80253aa:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80253ae:	432a      	orrs	r2, r5
 80253b0:	3001      	adds	r0, #1
 80253b2:	f100 80fe 	bmi.w	80255b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80253b6:	4583      	cmp	fp, r0
 80253b8:	f340 80fb 	ble.w	80255b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80253bc:	f1be 0f00 	cmp.w	lr, #0
 80253c0:	f000 80fc 	beq.w	80255bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 80253c4:	2f00      	cmp	r7, #0
 80253c6:	f2c0 80f1 	blt.w	80255ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80253ca:	42be      	cmp	r6, r7
 80253cc:	f340 80ee 	ble.w	80255ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80253d0:	9801      	ldr	r0, [sp, #4]
 80253d2:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80253d6:	f819 5006 	ldrb.w	r5, [r9, r6]
 80253da:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80253de:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80253e2:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 80253e6:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80253ea:	fb0a fa00 	mul.w	sl, sl, r0
 80253ee:	fb05 f808 	mul.w	r8, r5, r8
 80253f2:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80253f6:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 80253fa:	4482      	add	sl, r0
 80253fc:	f108 0020 	add.w	r0, r8, #32
 8025400:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025404:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8025408:	0a00      	lsrs	r0, r0, #8
 802540a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802540e:	ea4b 0b00 	orr.w	fp, fp, r0
 8025412:	3701      	adds	r7, #1
 8025414:	f100 80d7 	bmi.w	80255c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8025418:	42be      	cmp	r6, r7
 802541a:	f340 80d4 	ble.w	80255c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802541e:	2900      	cmp	r1, #0
 8025420:	f000 80d4 	beq.w	80255cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8025424:	3601      	adds	r6, #1
 8025426:	9801      	ldr	r0, [sp, #4]
 8025428:	f819 7006 	ldrb.w	r7, [r9, r6]
 802542c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8025430:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8025434:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8025438:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802543c:	fb09 f906 	mul.w	r9, r9, r6
 8025440:	fb07 f800 	mul.w	r8, r7, r0
 8025444:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8025448:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 802544c:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8025450:	44d1      	add	r9, sl
 8025452:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8025456:	f108 0020 	add.w	r0, r8, #32
 802545a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802545e:	0a00      	lsrs	r0, r0, #8
 8025460:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025464:	4330      	orrs	r0, r6
 8025466:	b28e      	uxth	r6, r1
 8025468:	fa1f f98e 	uxth.w	r9, lr
 802546c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8025470:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8025474:	fb06 f809 	mul.w	r8, r6, r9
 8025478:	0136      	lsls	r6, r6, #4
 802547a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802547e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8025482:	9601      	str	r6, [sp, #4]
 8025484:	ea4a 0404 	orr.w	r4, sl, r4
 8025488:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802548c:	fa1f f689 	uxth.w	r6, r9
 8025490:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025494:	fb11 f90e 	smulbb	r9, r1, lr
 8025498:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802549c:	9602      	str	r6, [sp, #8]
 802549e:	4626      	mov	r6, r4
 80254a0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80254a4:	f1ce 0410 	rsb	r4, lr, #16
 80254a8:	ea4a 0202 	orr.w	r2, sl, r2
 80254ac:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80254b0:	1a64      	subs	r4, r4, r1
 80254b2:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80254b6:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80254ba:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80254be:	434a      	muls	r2, r1
 80254c0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80254c4:	ea4a 0000 	orr.w	r0, sl, r0
 80254c8:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80254cc:	fb04 2406 	mla	r4, r4, r6, r2
 80254d0:	9903      	ldr	r1, [sp, #12]
 80254d2:	fb09 4200 	mla	r2, r9, r0, r4
 80254d6:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80254da:	9801      	ldr	r0, [sp, #4]
 80254dc:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80254e0:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80254e4:	8809      	ldrh	r1, [r1, #0]
 80254e6:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 80254ea:	ea44 0b0b 	orr.w	fp, r4, fp
 80254ee:	9c02      	ldr	r4, [sp, #8]
 80254f0:	1b00      	subs	r0, r0, r4
 80254f2:	9c01      	ldr	r4, [sp, #4]
 80254f4:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80254f8:	eba4 0608 	sub.w	r6, r4, r8
 80254fc:	b280      	uxth	r0, r0
 80254fe:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025502:	b2b6      	uxth	r6, r6
 8025504:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025508:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802550c:	4373      	muls	r3, r6
 802550e:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8025512:	fb0c 3300 	mla	r3, ip, r0, r3
 8025516:	9802      	ldr	r0, [sp, #8]
 8025518:	ea42 0e0e 	orr.w	lr, r2, lr
 802551c:	fb00 3505 	mla	r5, r0, r5, r3
 8025520:	120b      	asrs	r3, r1, #8
 8025522:	10c8      	asrs	r0, r1, #3
 8025524:	fb08 5707 	mla	r7, r8, r7, r5
 8025528:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802552c:	00c9      	lsls	r1, r1, #3
 802552e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8025532:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8025536:	fa1f f28e 	uxth.w	r2, lr
 802553a:	b2c9      	uxtb	r1, r1
 802553c:	b2ff      	uxtb	r7, r7
 802553e:	437b      	muls	r3, r7
 8025540:	4378      	muls	r0, r7
 8025542:	434f      	muls	r7, r1
 8025544:	1c59      	adds	r1, r3, #1
 8025546:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802554a:	1213      	asrs	r3, r2, #8
 802554c:	f023 0307 	bic.w	r3, r3, #7
 8025550:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025554:	1c41      	adds	r1, r0, #1
 8025556:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802555a:	10d1      	asrs	r1, r2, #3
 802555c:	021b      	lsls	r3, r3, #8
 802555e:	f021 0103 	bic.w	r1, r1, #3
 8025562:	00d2      	lsls	r2, r2, #3
 8025564:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8025568:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802556c:	00c9      	lsls	r1, r1, #3
 802556e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025572:	430b      	orrs	r3, r1
 8025574:	1c79      	adds	r1, r7, #1
 8025576:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802557a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802557e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025582:	431a      	orrs	r2, r3
 8025584:	9b03      	ldr	r3, [sp, #12]
 8025586:	801a      	strh	r2, [r3, #0]
 8025588:	b005      	add	sp, #20
 802558a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802558e:	f04f 0c00 	mov.w	ip, #0
 8025592:	4664      	mov	r4, ip
 8025594:	e6e5      	b.n	8025362 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8025596:	2300      	movs	r3, #0
 8025598:	469c      	mov	ip, r3
 802559a:	461a      	mov	r2, r3
 802559c:	461c      	mov	r4, r3
 802559e:	e707      	b.n	80253b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80255a0:	2300      	movs	r3, #0
 80255a2:	461a      	mov	r2, r3
 80255a4:	e704      	b.n	80253b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80255a6:	460b      	mov	r3, r1
 80255a8:	460a      	mov	r2, r1
 80255aa:	e701      	b.n	80253b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80255ac:	2500      	movs	r5, #0
 80255ae:	46ab      	mov	fp, r5
 80255b0:	e72f      	b.n	8025412 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 80255b2:	2700      	movs	r7, #0
 80255b4:	463d      	mov	r5, r7
 80255b6:	4638      	mov	r0, r7
 80255b8:	46bb      	mov	fp, r7
 80255ba:	e754      	b.n	8025466 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80255bc:	4677      	mov	r7, lr
 80255be:	4675      	mov	r5, lr
 80255c0:	4670      	mov	r0, lr
 80255c2:	46f3      	mov	fp, lr
 80255c4:	e74f      	b.n	8025466 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80255c6:	2700      	movs	r7, #0
 80255c8:	4638      	mov	r0, r7
 80255ca:	e74c      	b.n	8025466 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80255cc:	460f      	mov	r7, r1
 80255ce:	4608      	mov	r0, r1
 80255d0:	e749      	b.n	8025466 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

080255d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80255d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255d8:	b093      	sub	sp, #76	@ 0x4c
 80255da:	9210      	str	r2, [sp, #64]	@ 0x40
 80255dc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80255de:	9011      	str	r0, [sp, #68]	@ 0x44
 80255e0:	910e      	str	r1, [sp, #56]	@ 0x38
 80255e2:	6850      	ldr	r0, [r2, #4]
 80255e4:	9306      	str	r3, [sp, #24]
 80255e6:	6812      	ldr	r2, [r2, #0]
 80255e8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80255ec:	fb00 1303 	mla	r3, r0, r3, r1
 80255f0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80255f4:	9307      	str	r3, [sp, #28]
 80255f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80255f8:	681b      	ldr	r3, [r3, #0]
 80255fa:	9308      	str	r3, [sp, #32]
 80255fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80255fe:	685b      	ldr	r3, [r3, #4]
 8025600:	9309      	str	r3, [sp, #36]	@ 0x24
 8025602:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025604:	2b00      	cmp	r3, #0
 8025606:	dc03      	bgt.n	8025610 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025608:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802560a:	2b00      	cmp	r3, #0
 802560c:	f340 83b6 	ble.w	8025d7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8025610:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025612:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025616:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802561a:	1e48      	subs	r0, r1, #1
 802561c:	1e55      	subs	r5, r2, #1
 802561e:	9b06      	ldr	r3, [sp, #24]
 8025620:	2b00      	cmp	r3, #0
 8025622:	f340 8165 	ble.w	80258f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8025626:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8025628:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802562a:	1436      	asrs	r6, r6, #16
 802562c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025630:	d406      	bmi.n	8025640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025632:	4286      	cmp	r6, r0
 8025634:	da04      	bge.n	8025640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025636:	2b00      	cmp	r3, #0
 8025638:	db02      	blt.n	8025640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802563a:	42ab      	cmp	r3, r5
 802563c:	f2c0 8159 	blt.w	80258f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8025640:	3601      	adds	r6, #1
 8025642:	f100 8146 	bmi.w	80258d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025646:	42b1      	cmp	r1, r6
 8025648:	f2c0 8143 	blt.w	80258d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802564c:	3301      	adds	r3, #1
 802564e:	f100 8140 	bmi.w	80258d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025652:	429a      	cmp	r2, r3
 8025654:	f2c0 813d 	blt.w	80258d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025658:	9b06      	ldr	r3, [sp, #24]
 802565a:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 802565e:	9f07      	ldr	r7, [sp, #28]
 8025660:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025662:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025664:	2b00      	cmp	r3, #0
 8025666:	f340 8166 	ble.w	8025936 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802566a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802566c:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802566e:	1418      	asrs	r0, r3, #16
 8025670:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025672:	142d      	asrs	r5, r5, #16
 8025674:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025678:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802567a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802567e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025680:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025684:	f100 81f0 	bmi.w	8025a68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8025688:	f102 3eff 	add.w	lr, r2, #4294967295
 802568c:	4575      	cmp	r5, lr
 802568e:	f280 81eb 	bge.w	8025a68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8025692:	2800      	cmp	r0, #0
 8025694:	f2c0 81e8 	blt.w	8025a68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8025698:	f103 3eff 	add.w	lr, r3, #4294967295
 802569c:	4570      	cmp	r0, lr
 802569e:	f280 81e3 	bge.w	8025a68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80256a2:	b212      	sxth	r2, r2
 80256a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80256a6:	fa1f fe81 	uxth.w	lr, r1
 80256aa:	fb00 5002 	mla	r0, r0, r2, r5
 80256ae:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80256b2:	eb03 0a00 	add.w	sl, r3, r0
 80256b6:	f813 9000 	ldrb.w	r9, [r3, r0]
 80256ba:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 80256be:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80256c2:	b29b      	uxth	r3, r3
 80256c4:	f1bc 0f00 	cmp.w	ip, #0
 80256c8:	f000 817b 	beq.w	80259c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80256cc:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80256d0:	eb0a 0b02 	add.w	fp, sl, r2
 80256d4:	fa1f fa8c 	uxth.w	sl, ip
 80256d8:	940a      	str	r4, [sp, #40]	@ 0x28
 80256da:	fb0a fe0e 	mul.w	lr, sl, lr
 80256de:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80256e2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80256e6:	eba5 050e 	sub.w	r5, r5, lr
 80256ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 80256ec:	fa1f fa8a 	uxth.w	sl, sl
 80256f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80256f2:	b2ad      	uxth	r5, r5
 80256f4:	eba3 030a 	sub.w	r3, r3, sl
 80256f8:	fb08 f505 	mul.w	r5, r8, r5
 80256fc:	b29b      	uxth	r3, r3
 80256fe:	fb09 5303 	mla	r3, r9, r3, r5
 8025702:	fb0a 3304 	mla	r3, sl, r4, r3
 8025706:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025708:	fb0e 3304 	mla	r3, lr, r4, r3
 802570c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025710:	2b00      	cmp	r3, #0
 8025712:	f000 80d1 	beq.w	80258b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025716:	9c08      	ldr	r4, [sp, #32]
 8025718:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802571c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8025720:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025724:	f000 8152 	beq.w	80259cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8025728:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802572c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025730:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025734:	fb0a fe0e 	mul.w	lr, sl, lr
 8025738:	fb09 f000 	mul.w	r0, r9, r0
 802573c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8025740:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8025744:	f100 0b20 	add.w	fp, r0, #32
 8025748:	44ce      	add	lr, r9
 802574a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802574e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025752:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025756:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802575a:	ea4e 0909 	orr.w	r9, lr, r9
 802575e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8025762:	8868      	ldrh	r0, [r5, #2]
 8025764:	d019      	beq.n	802579a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025766:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802576a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802576e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025772:	fb0a fe0e 	mul.w	lr, sl, lr
 8025776:	fb08 f800 	mul.w	r8, r8, r0
 802577a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802577e:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8025782:	f108 0b20 	add.w	fp, r8, #32
 8025786:	4486      	add	lr, r0
 8025788:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802578c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025790:	0a00      	lsrs	r0, r0, #8
 8025792:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025796:	ea4e 0000 	orr.w	r0, lr, r0
 802579a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802579e:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80257a2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80257a6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80257aa:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80257ae:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80257b2:	ea4e 0909 	orr.w	r9, lr, r9
 80257b6:	ea4a 0000 	orr.w	r0, sl, r0
 80257ba:	f1bc 0f00 	cmp.w	ip, #0
 80257be:	f000 8107 	beq.w	80259d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 80257c2:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80257c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80257c8:	3a01      	subs	r2, #1
 80257ca:	2cff      	cmp	r4, #255	@ 0xff
 80257cc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80257d0:	f102 0202 	add.w	r2, r2, #2
 80257d4:	eb05 0e02 	add.w	lr, r5, r2
 80257d8:	5aaa      	ldrh	r2, [r5, r2]
 80257da:	d018      	beq.n	802580e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80257dc:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 80257e0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80257e4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80257e8:	fb04 fa02 	mul.w	sl, r4, r2
 80257ec:	fb08 f805 	mul.w	r8, r8, r5
 80257f0:	f10a 0520 	add.w	r5, sl, #32
 80257f4:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80257f8:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80257fc:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025800:	4442      	add	r2, r8
 8025802:	0a2d      	lsrs	r5, r5, #8
 8025804:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8025808:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802580c:	432a      	orrs	r2, r5
 802580e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025810:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025814:	2cff      	cmp	r4, #255	@ 0xff
 8025816:	d01a      	beq.n	802584e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8025818:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 802581c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8025820:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025824:	fb04 fa05 	mul.w	sl, r4, r5
 8025828:	fb08 f80e 	mul.w	r8, r8, lr
 802582c:	f10a 0e20 	add.w	lr, sl, #32
 8025830:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025834:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025838:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802583c:	4445      	add	r5, r8
 802583e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025842:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8025846:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802584a:	ea45 050e 	orr.w	r5, r5, lr
 802584e:	fb1c fe01 	smulbb	lr, ip, r1
 8025852:	f1cc 0810 	rsb	r8, ip, #16
 8025856:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802585a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802585e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025862:	eba8 0801 	sub.w	r8, r8, r1
 8025866:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802586a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802586e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025872:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8025876:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802587a:	ea4a 0202 	orr.w	r2, sl, r2
 802587e:	4341      	muls	r1, r0
 8025880:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025884:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8025888:	fb09 1108 	mla	r1, r9, r8, r1
 802588c:	ea4b 0505 	orr.w	r5, fp, r5
 8025890:	fb0c 1102 	mla	r1, ip, r2, r1
 8025894:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025898:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802589c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80258a0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80258a4:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80258a8:	ea42 0e0e 	orr.w	lr, r2, lr
 80258ac:	fa1f f28e 	uxth.w	r2, lr
 80258b0:	2bff      	cmp	r3, #255	@ 0xff
 80258b2:	f040 80a1 	bne.w	80259f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80258b6:	803a      	strh	r2, [r7, #0]
 80258b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80258ba:	3702      	adds	r7, #2
 80258bc:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80258be:	4413      	add	r3, r2
 80258c0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80258c2:	931d      	str	r3, [sp, #116]	@ 0x74
 80258c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80258c6:	441a      	add	r2, r3
 80258c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80258ca:	3b01      	subs	r3, #1
 80258cc:	921e      	str	r2, [sp, #120]	@ 0x78
 80258ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80258d0:	e6c7      	b.n	8025662 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80258d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80258d4:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 80258d6:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 80258d8:	4433      	add	r3, r6
 80258da:	931d      	str	r3, [sp, #116]	@ 0x74
 80258dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80258de:	441c      	add	r4, r3
 80258e0:	9b06      	ldr	r3, [sp, #24]
 80258e2:	3b01      	subs	r3, #1
 80258e4:	941e      	str	r4, [sp, #120]	@ 0x78
 80258e6:	9306      	str	r3, [sp, #24]
 80258e8:	9b07      	ldr	r3, [sp, #28]
 80258ea:	3302      	adds	r3, #2
 80258ec:	9307      	str	r3, [sp, #28]
 80258ee:	e696      	b.n	802561e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80258f0:	d028      	beq.n	8025944 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80258f2:	9b06      	ldr	r3, [sp, #24]
 80258f4:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80258f6:	3b01      	subs	r3, #1
 80258f8:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80258fa:	fb00 5003 	mla	r0, r0, r3, r5
 80258fe:	1400      	asrs	r0, r0, #16
 8025900:	f53f aeaa 	bmi.w	8025658 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025904:	3901      	subs	r1, #1
 8025906:	4288      	cmp	r0, r1
 8025908:	f6bf aea6 	bge.w	8025658 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802590c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802590e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8025910:	fb01 0303 	mla	r3, r1, r3, r0
 8025914:	141b      	asrs	r3, r3, #16
 8025916:	f53f ae9f 	bmi.w	8025658 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802591a:	3a01      	subs	r2, #1
 802591c:	4293      	cmp	r3, r2
 802591e:	f6bf ae9b 	bge.w	8025658 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025922:	9b06      	ldr	r3, [sp, #24]
 8025924:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8025928:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802592c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802592e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025930:	2b00      	cmp	r3, #0
 8025932:	f300 80b6 	bgt.w	8025aa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8025936:	9b06      	ldr	r3, [sp, #24]
 8025938:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802593c:	9b07      	ldr	r3, [sp, #28]
 802593e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025942:	9307      	str	r3, [sp, #28]
 8025944:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025946:	2b00      	cmp	r3, #0
 8025948:	f340 8218 	ble.w	8025d7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 802594c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025950:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025952:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025956:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802595a:	eef0 6a62 	vmov.f32	s13, s5
 802595e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025962:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025966:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802596a:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 802596e:	eef0 6a43 	vmov.f32	s13, s6
 8025972:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025976:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 802597a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802597e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025982:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025986:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802598a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802598e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025992:	ee12 2a90 	vmov	r2, s5
 8025996:	eef0 2a47 	vmov.f32	s5, s14
 802599a:	fb92 f3f3 	sdiv	r3, r2, r3
 802599e:	ee13 2a10 	vmov	r2, s6
 80259a2:	931f      	str	r3, [sp, #124]	@ 0x7c
 80259a4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80259a6:	eeb0 3a67 	vmov.f32	s6, s15
 80259aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80259ae:	9320      	str	r3, [sp, #128]	@ 0x80
 80259b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80259b2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80259b4:	3b01      	subs	r3, #1
 80259b6:	930e      	str	r3, [sp, #56]	@ 0x38
 80259b8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80259ba:	bf08      	it	eq
 80259bc:	4613      	moveq	r3, r2
 80259be:	9306      	str	r3, [sp, #24]
 80259c0:	e61f      	b.n	8025602 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80259c2:	fb08 f505 	mul.w	r5, r8, r5
 80259c6:	fb09 5303 	mla	r3, r9, r3, r5
 80259ca:	e69f      	b.n	802570c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80259cc:	4681      	mov	r9, r0
 80259ce:	e6c6      	b.n	802575e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80259d0:	f1c1 0210 	rsb	r2, r1, #16
 80259d4:	4341      	muls	r1, r0
 80259d6:	fb09 1902 	mla	r9, r9, r2, r1
 80259da:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80259de:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80259e2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80259e6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80259ea:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80259ee:	ea42 0909 	orr.w	r9, r2, r9
 80259f2:	fa1f f289 	uxth.w	r2, r9
 80259f6:	e75b      	b.n	80258b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 80259f8:	f8b7 c000 	ldrh.w	ip, [r7]
 80259fc:	43db      	mvns	r3, r3
 80259fe:	ea4f 202c 	mov.w	r0, ip, asr #8
 8025a02:	fa5f fe83 	uxtb.w	lr, r3
 8025a06:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8025a0a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8025a0e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8025a12:	fb00 f00e 	mul.w	r0, r0, lr
 8025a16:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8025a1a:	b2db      	uxtb	r3, r3
 8025a1c:	1c41      	adds	r1, r0, #1
 8025a1e:	fb05 f50e 	mul.w	r5, r5, lr
 8025a22:	fb03 f30e 	mul.w	r3, r3, lr
 8025a26:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8025a2a:	1211      	asrs	r1, r2, #8
 8025a2c:	f021 0107 	bic.w	r1, r1, #7
 8025a30:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025a34:	48d3      	ldr	r0, [pc, #844]	@ (8025d84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8025a36:	b2c9      	uxtb	r1, r1
 8025a38:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8025a3c:	1c69      	adds	r1, r5, #1
 8025a3e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8025a42:	10d1      	asrs	r1, r2, #3
 8025a44:	00d2      	lsls	r2, r2, #3
 8025a46:	f021 0103 	bic.w	r1, r1, #3
 8025a4a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8025a4e:	00c9      	lsls	r1, r1, #3
 8025a50:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025a54:	4301      	orrs	r1, r0
 8025a56:	1c58      	adds	r0, r3, #1
 8025a58:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025a5c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025a60:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025a64:	430a      	orrs	r2, r1
 8025a66:	e726      	b.n	80258b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8025a68:	f115 0e01 	adds.w	lr, r5, #1
 8025a6c:	f53f af24 	bmi.w	80258b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025a70:	4572      	cmp	r2, lr
 8025a72:	f6ff af21 	blt.w	80258b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025a76:	f110 0e01 	adds.w	lr, r0, #1
 8025a7a:	f53f af1d 	bmi.w	80258b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025a7e:	4573      	cmp	r3, lr
 8025a80:	f6ff af1a 	blt.w	80258b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025a84:	b21b      	sxth	r3, r3
 8025a86:	b212      	sxth	r2, r2
 8025a88:	9301      	str	r3, [sp, #4]
 8025a8a:	9200      	str	r2, [sp, #0]
 8025a8c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8025a90:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8025a94:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8025a98:	4639      	mov	r1, r7
 8025a9a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8025a9c:	f7ff fc22 	bl	80252e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8025aa0:	e70a      	b.n	80258b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025aa2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025aa4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025aa8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025aaa:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8025aae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025ab0:	fa1f fc82 	uxth.w	ip, r2
 8025ab4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025ab8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025aba:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8025abe:	141f      	asrs	r7, r3, #16
 8025ac0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025ac2:	141b      	asrs	r3, r3, #16
 8025ac4:	fb01 3707 	mla	r7, r1, r7, r3
 8025ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025aca:	eb03 0a07 	add.w	sl, r3, r7
 8025ace:	f813 9007 	ldrb.w	r9, [r3, r7]
 8025ad2:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8025ad6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025ada:	b29b      	uxth	r3, r3
 8025adc:	2d00      	cmp	r5, #0
 8025ade:	f000 80fe 	beq.w	8025cde <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8025ae2:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025ae6:	eb0a 0b01 	add.w	fp, sl, r1
 8025aea:	fa1f fa85 	uxth.w	sl, r5
 8025aee:	940c      	str	r4, [sp, #48]	@ 0x30
 8025af0:	fb0a fc0c 	mul.w	ip, sl, ip
 8025af4:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025af8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025afc:	eba0 000c 	sub.w	r0, r0, ip
 8025b00:	940d      	str	r4, [sp, #52]	@ 0x34
 8025b02:	fa1f fa8a 	uxth.w	sl, sl
 8025b06:	b280      	uxth	r0, r0
 8025b08:	eba3 030a 	sub.w	r3, r3, sl
 8025b0c:	fb08 f000 	mul.w	r0, r8, r0
 8025b10:	b29b      	uxth	r3, r3
 8025b12:	fb09 0303 	mla	r3, r9, r3, r0
 8025b16:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8025b18:	fb0a 3300 	mla	r3, sl, r0, r3
 8025b1c:	fb0c 3304 	mla	r3, ip, r4, r3
 8025b20:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025b24:	2b00      	cmp	r3, #0
 8025b26:	f000 80cc 	beq.w	8025cc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8025b2a:	9808      	ldr	r0, [sp, #32]
 8025b2c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8025b30:	9c08      	ldr	r4, [sp, #32]
 8025b32:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8025b36:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8025b3a:	f000 80d5 	beq.w	8025ce8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8025b3e:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8025b42:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025b46:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8025b4a:	fb0a fc0c 	mul.w	ip, sl, ip
 8025b4e:	fb09 f707 	mul.w	r7, r9, r7
 8025b52:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8025b56:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8025b5a:	f107 0b20 	add.w	fp, r7, #32
 8025b5e:	44cc      	add	ip, r9
 8025b60:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8025b64:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025b68:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025b6c:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8025b70:	ea4c 0909 	orr.w	r9, ip, r9
 8025b74:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8025b78:	8847      	ldrh	r7, [r0, #2]
 8025b7a:	d019      	beq.n	8025bb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8025b7c:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8025b80:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025b84:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8025b88:	fb0a fc0c 	mul.w	ip, sl, ip
 8025b8c:	fb08 f807 	mul.w	r8, r8, r7
 8025b90:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025b94:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8025b98:	f108 0b20 	add.w	fp, r8, #32
 8025b9c:	44bc      	add	ip, r7
 8025b9e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8025ba2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025ba6:	0a3f      	lsrs	r7, r7, #8
 8025ba8:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8025bac:	ea4c 0707 	orr.w	r7, ip, r7
 8025bb0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025bb4:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8025bb8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8025bbc:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8025bc0:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025bc4:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025bc8:	ea4c 0909 	orr.w	r9, ip, r9
 8025bcc:	ea4a 0707 	orr.w	r7, sl, r7
 8025bd0:	2d00      	cmp	r5, #0
 8025bd2:	f000 808b 	beq.w	8025cec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8025bd6:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8025bda:	3901      	subs	r1, #1
 8025bdc:	0049      	lsls	r1, r1, #1
 8025bde:	3102      	adds	r1, #2
 8025be0:	eb00 0c01 	add.w	ip, r0, r1
 8025be4:	5a41      	ldrh	r1, [r0, r1]
 8025be6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8025be8:	28ff      	cmp	r0, #255	@ 0xff
 8025bea:	d019      	beq.n	8025c20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8025bec:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8025bf0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025bf2:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025bf6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025bfa:	fb04 fa01 	mul.w	sl, r4, r1
 8025bfe:	fb08 f800 	mul.w	r8, r8, r0
 8025c02:	f10a 0020 	add.w	r0, sl, #32
 8025c06:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8025c0a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025c0e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025c12:	4441      	add	r1, r8
 8025c14:	0a00      	lsrs	r0, r0, #8
 8025c16:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8025c1a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025c1e:	4301      	orrs	r1, r0
 8025c20:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025c22:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8025c26:	2cff      	cmp	r4, #255	@ 0xff
 8025c28:	d01a      	beq.n	8025c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 8025c2a:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8025c2e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025c32:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025c36:	fb04 fa00 	mul.w	sl, r4, r0
 8025c3a:	fb08 f80c 	mul.w	r8, r8, ip
 8025c3e:	f10a 0c20 	add.w	ip, sl, #32
 8025c42:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8025c46:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025c4a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8025c4e:	4440      	add	r0, r8
 8025c50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025c54:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8025c58:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8025c5c:	ea40 000c 	orr.w	r0, r0, ip
 8025c60:	fb15 fc02 	smulbb	ip, r5, r2
 8025c64:	f1c5 0810 	rsb	r8, r5, #16
 8025c68:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025c6c:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8025c70:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025c74:	eba8 0802 	sub.w	r8, r8, r2
 8025c78:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025c7c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025c80:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8025c84:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8025c88:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8025c8c:	ea4a 0101 	orr.w	r1, sl, r1
 8025c90:	437a      	muls	r2, r7
 8025c92:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8025c96:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8025c9a:	fb09 2208 	mla	r2, r9, r8, r2
 8025c9e:	ea4b 0000 	orr.w	r0, fp, r0
 8025ca2:	fb05 2201 	mla	r2, r5, r1, r2
 8025ca6:	fb0c 2200 	mla	r2, ip, r0, r2
 8025caa:	0d57      	lsrs	r7, r2, #21
 8025cac:	0952      	lsrs	r2, r2, #5
 8025cae:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8025cb2:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025cb6:	433a      	orrs	r2, r7
 8025cb8:	2bff      	cmp	r3, #255	@ 0xff
 8025cba:	b292      	uxth	r2, r2
 8025cbc:	d127      	bne.n	8025d0e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8025cbe:	f8ae 2000 	strh.w	r2, [lr]
 8025cc2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025cc4:	f10e 0e02 	add.w	lr, lr, #2
 8025cc8:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8025cca:	4413      	add	r3, r2
 8025ccc:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8025cce:	931d      	str	r3, [sp, #116]	@ 0x74
 8025cd0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025cd2:	441a      	add	r2, r3
 8025cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025cd6:	3b01      	subs	r3, #1
 8025cd8:	921e      	str	r2, [sp, #120]	@ 0x78
 8025cda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025cdc:	e627      	b.n	802592e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8025cde:	fb08 f000 	mul.w	r0, r8, r0
 8025ce2:	fb09 0303 	mla	r3, r9, r3, r0
 8025ce6:	e71b      	b.n	8025b20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8025ce8:	46b9      	mov	r9, r7
 8025cea:	e743      	b.n	8025b74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8025cec:	f1c2 0110 	rsb	r1, r2, #16
 8025cf0:	437a      	muls	r2, r7
 8025cf2:	fb09 2901 	mla	r9, r9, r1, r2
 8025cf6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025cfa:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8025cfe:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8025d02:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025d06:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025d0a:	4302      	orrs	r2, r0
 8025d0c:	e7d4      	b.n	8025cb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8025d0e:	f8be 7000 	ldrh.w	r7, [lr]
 8025d12:	43db      	mvns	r3, r3
 8025d14:	4c1b      	ldr	r4, [pc, #108]	@ (8025d84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8025d16:	1238      	asrs	r0, r7, #8
 8025d18:	fa5f fc83 	uxtb.w	ip, r3
 8025d1c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8025d20:	10fd      	asrs	r5, r7, #3
 8025d22:	00fb      	lsls	r3, r7, #3
 8025d24:	fb00 f00c 	mul.w	r0, r0, ip
 8025d28:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8025d2c:	b2db      	uxtb	r3, r3
 8025d2e:	fb05 f10c 	mul.w	r1, r5, ip
 8025d32:	1c45      	adds	r5, r0, #1
 8025d34:	fb03 f30c 	mul.w	r3, r3, ip
 8025d38:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025d3c:	1215      	asrs	r5, r2, #8
 8025d3e:	f025 0507 	bic.w	r5, r5, #7
 8025d42:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025d46:	1c4d      	adds	r5, r1, #1
 8025d48:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8025d4c:	10d1      	asrs	r1, r2, #3
 8025d4e:	b2c0      	uxtb	r0, r0
 8025d50:	f021 0103 	bic.w	r1, r1, #3
 8025d54:	00d2      	lsls	r2, r2, #3
 8025d56:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8025d5a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8025d5e:	00c9      	lsls	r1, r1, #3
 8025d60:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025d64:	4308      	orrs	r0, r1
 8025d66:	1c59      	adds	r1, r3, #1
 8025d68:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025d6c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025d70:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8025d74:	4318      	orrs	r0, r3
 8025d76:	f8ae 0000 	strh.w	r0, [lr]
 8025d7a:	e7a2      	b.n	8025cc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8025d7c:	b013      	add	sp, #76	@ 0x4c
 8025d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025d82:	bf00      	nop
 8025d84:	fffff800 	.word	0xfffff800

08025d88 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8025d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025d8c:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 8025d90:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8025d94:	fb05 4c03 	mla	ip, r5, r3, r4
 8025d98:	2d00      	cmp	r5, #0
 8025d9a:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8025d9e:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8025da2:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8025da6:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8025daa:	8808      	ldrh	r0, [r1, #0]
 8025dac:	f2c0 80a7 	blt.w	8025efe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8025db0:	45aa      	cmp	sl, r5
 8025db2:	f340 80a4 	ble.w	8025efe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8025db6:	2c00      	cmp	r4, #0
 8025db8:	f2c0 809f 	blt.w	8025efa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8025dbc:	42a3      	cmp	r3, r4
 8025dbe:	f340 809c 	ble.w	8025efa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8025dc2:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8025dc6:	1c62      	adds	r2, r4, #1
 8025dc8:	f100 809c 	bmi.w	8025f04 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8025dcc:	4293      	cmp	r3, r2
 8025dce:	f340 8099 	ble.w	8025f04 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8025dd2:	f1b9 0f00 	cmp.w	r9, #0
 8025dd6:	f000 8095 	beq.w	8025f04 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8025dda:	f8be c002 	ldrh.w	ip, [lr, #2]
 8025dde:	3501      	adds	r5, #1
 8025de0:	f100 8094 	bmi.w	8025f0c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8025de4:	45aa      	cmp	sl, r5
 8025de6:	f340 8091 	ble.w	8025f0c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8025dea:	2f00      	cmp	r7, #0
 8025dec:	f000 808e 	beq.w	8025f0c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8025df0:	2c00      	cmp	r4, #0
 8025df2:	f2c0 8089 	blt.w	8025f08 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8025df6:	42a3      	cmp	r3, r4
 8025df8:	f340 8086 	ble.w	8025f08 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8025dfc:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8025e00:	3401      	adds	r4, #1
 8025e02:	f100 8086 	bmi.w	8025f12 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8025e06:	42a3      	cmp	r3, r4
 8025e08:	f340 8083 	ble.w	8025f12 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8025e0c:	f1b9 0f00 	cmp.w	r9, #0
 8025e10:	d07f      	beq.n	8025f12 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8025e12:	3301      	adds	r3, #1
 8025e14:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8025e18:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8025e1c:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8025e20:	fb19 fe07 	smulbb	lr, r9, r7
 8025e24:	f1c7 0210 	rsb	r2, r7, #16
 8025e28:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8025e2c:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8025e30:	eba2 0209 	sub.w	r2, r2, r9
 8025e34:	ea44 0808 	orr.w	r8, r4, r8
 8025e38:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8025e3c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8025e40:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8025e44:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8025e48:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8025e4c:	ea44 0c0c 	orr.w	ip, r4, ip
 8025e50:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8025e54:	fb04 f40c 	mul.w	r4, r4, ip
 8025e58:	fb02 4808 	mla	r8, r2, r8, r4
 8025e5c:	041a      	lsls	r2, r3, #16
 8025e5e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8025e62:	b2b4      	uxth	r4, r6
 8025e64:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8025e68:	43f6      	mvns	r6, r6
 8025e6a:	4313      	orrs	r3, r2
 8025e6c:	042a      	lsls	r2, r5, #16
 8025e6e:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8025e72:	b2f6      	uxtb	r6, r6
 8025e74:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8025e78:	fb0e 8303 	mla	r3, lr, r3, r8
 8025e7c:	432a      	orrs	r2, r5
 8025e7e:	fb07 3202 	mla	r2, r7, r2, r3
 8025e82:	10c7      	asrs	r7, r0, #3
 8025e84:	0d53      	lsrs	r3, r2, #21
 8025e86:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8025e8a:	0952      	lsrs	r2, r2, #5
 8025e8c:	fb17 f706 	smulbb	r7, r7, r6
 8025e90:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025e94:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025e98:	431a      	orrs	r2, r3
 8025e9a:	b293      	uxth	r3, r2
 8025e9c:	1202      	asrs	r2, r0, #8
 8025e9e:	121d      	asrs	r5, r3, #8
 8025ea0:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8025ea4:	00c0      	lsls	r0, r0, #3
 8025ea6:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8025eaa:	fb12 f206 	smulbb	r2, r2, r6
 8025eae:	b2c0      	uxtb	r0, r0
 8025eb0:	fb05 2504 	mla	r5, r5, r4, r2
 8025eb4:	10da      	asrs	r2, r3, #3
 8025eb6:	fb10 f006 	smulbb	r0, r0, r6
 8025eba:	00db      	lsls	r3, r3, #3
 8025ebc:	b2ad      	uxth	r5, r5
 8025ebe:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025ec2:	b2db      	uxtb	r3, r3
 8025ec4:	fb02 7204 	mla	r2, r2, r4, r7
 8025ec8:	fb03 0004 	mla	r0, r3, r4, r0
 8025ecc:	1c6b      	adds	r3, r5, #1
 8025ece:	b292      	uxth	r2, r2
 8025ed0:	b280      	uxth	r0, r0
 8025ed2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025ed6:	1c43      	adds	r3, r0, #1
 8025ed8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8025edc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025ee0:	1c50      	adds	r0, r2, #1
 8025ee2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025ee6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025eea:	0952      	lsrs	r2, r2, #5
 8025eec:	432b      	orrs	r3, r5
 8025eee:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025ef2:	4313      	orrs	r3, r2
 8025ef4:	800b      	strh	r3, [r1, #0]
 8025ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025efa:	4680      	mov	r8, r0
 8025efc:	e763      	b.n	8025dc6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8025efe:	4684      	mov	ip, r0
 8025f00:	4680      	mov	r8, r0
 8025f02:	e76c      	b.n	8025dde <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8025f04:	4684      	mov	ip, r0
 8025f06:	e76a      	b.n	8025dde <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8025f08:	4605      	mov	r5, r0
 8025f0a:	e779      	b.n	8025e00 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8025f0c:	4603      	mov	r3, r0
 8025f0e:	4605      	mov	r5, r0
 8025f10:	e782      	b.n	8025e18 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8025f12:	4603      	mov	r3, r0
 8025f14:	e780      	b.n	8025e18 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08025f16 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025f16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f1a:	b093      	sub	sp, #76	@ 0x4c
 8025f1c:	461d      	mov	r5, r3
 8025f1e:	9210      	str	r2, [sp, #64]	@ 0x40
 8025f20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8025f22:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8025f26:	910a      	str	r1, [sp, #40]	@ 0x28
 8025f28:	920b      	str	r2, [sp, #44]	@ 0x2c
 8025f2a:	6859      	ldr	r1, [r3, #4]
 8025f2c:	681b      	ldr	r3, [r3, #0]
 8025f2e:	9011      	str	r0, [sp, #68]	@ 0x44
 8025f30:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 8025f34:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8025f38:	fb01 2707 	mla	r7, r1, r7, r2
 8025f3c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8025f40:	9307      	str	r3, [sp, #28]
 8025f42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025f44:	681b      	ldr	r3, [r3, #0]
 8025f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8025f48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025f4a:	43db      	mvns	r3, r3
 8025f4c:	b2db      	uxtb	r3, r3
 8025f4e:	9308      	str	r3, [sp, #32]
 8025f50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025f52:	2b00      	cmp	r3, #0
 8025f54:	dc03      	bgt.n	8025f5e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025f56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025f58:	2b00      	cmp	r3, #0
 8025f5a:	f340 8205 	ble.w	8026368 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025f5e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025f60:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025f64:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025f68:	1e48      	subs	r0, r1, #1
 8025f6a:	f102 3cff 	add.w	ip, r2, #4294967295
 8025f6e:	2d00      	cmp	r5, #0
 8025f70:	f340 80da 	ble.w	8026128 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025f74:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025f78:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025f7c:	d406      	bmi.n	8025f8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025f7e:	4586      	cmp	lr, r0
 8025f80:	da04      	bge.n	8025f8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025f82:	2b00      	cmp	r3, #0
 8025f84:	db02      	blt.n	8025f8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025f86:	4563      	cmp	r3, ip
 8025f88:	f2c0 80cf 	blt.w	802612a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8025f8c:	f11e 0e01 	adds.w	lr, lr, #1
 8025f90:	f100 80c1 	bmi.w	8026116 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025f94:	4571      	cmp	r1, lr
 8025f96:	f2c0 80be 	blt.w	8026116 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025f9a:	3301      	adds	r3, #1
 8025f9c:	f100 80bb 	bmi.w	8026116 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025fa0:	429a      	cmp	r2, r3
 8025fa2:	f2c0 80b8 	blt.w	8026116 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025fa6:	46a9      	mov	r9, r5
 8025fa8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8025fac:	f1b9 0f00 	cmp.w	r9, #0
 8025fb0:	f340 80d8 	ble.w	8026164 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8025fb4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025fb6:	1421      	asrs	r1, r4, #16
 8025fb8:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025fbc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025fc0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025fc4:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025fc8:	f100 8112 	bmi.w	80261f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025fcc:	f10e 3aff 	add.w	sl, lr, #4294967295
 8025fd0:	4551      	cmp	r1, sl
 8025fd2:	f280 810d 	bge.w	80261f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025fd6:	2800      	cmp	r0, #0
 8025fd8:	f2c0 810a 	blt.w	80261f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025fdc:	f103 3aff 	add.w	sl, r3, #4294967295
 8025fe0:	4550      	cmp	r0, sl
 8025fe2:	f280 8105 	bge.w	80261f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025fe6:	fa0f f38e 	sxth.w	r3, lr
 8025fea:	fb00 1103 	mla	r1, r0, r3, r1
 8025fee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025ff0:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8025ff4:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8025ff8:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8025ffc:	f1bc 0f00 	cmp.w	ip, #0
 8026000:	d007      	beq.n	8026012 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8026002:	005b      	lsls	r3, r3, #1
 8026004:	eb0a 0003 	add.w	r0, sl, r3
 8026008:	f83a 3003 	ldrh.w	r3, [sl, r3]
 802600c:	930c      	str	r3, [sp, #48]	@ 0x30
 802600e:	8843      	ldrh	r3, [r0, #2]
 8026010:	930d      	str	r3, [sp, #52]	@ 0x34
 8026012:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8026016:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802601a:	fb12 f30c 	smulbb	r3, r2, ip
 802601e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026022:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8026026:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802602a:	10db      	asrs	r3, r3, #3
 802602c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026030:	ea40 000e 	orr.w	r0, r0, lr
 8026034:	f1cc 0e10 	rsb	lr, ip, #16
 8026038:	ea4a 0101 	orr.w	r1, sl, r1
 802603c:	9f08      	ldr	r7, [sp, #32]
 802603e:	ebae 0e02 	sub.w	lr, lr, r2
 8026042:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026046:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802604a:	4351      	muls	r1, r2
 802604c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802604e:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026052:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8026054:	0410      	lsls	r0, r2, #16
 8026056:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802605a:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802605e:	4310      	orrs	r0, r2
 8026060:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026062:	0412      	lsls	r2, r2, #16
 8026064:	fb03 e000 	mla	r0, r3, r0, lr
 8026068:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 802606c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026070:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8026074:	ea42 020e 	orr.w	r2, r2, lr
 8026078:	fb03 0302 	mla	r3, r3, r2, r0
 802607c:	f8b8 0000 	ldrh.w	r0, [r8]
 8026080:	0d5a      	lsrs	r2, r3, #21
 8026082:	095b      	lsrs	r3, r3, #5
 8026084:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026088:	1201      	asrs	r1, r0, #8
 802608a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802608e:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8026092:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8026096:	00c0      	lsls	r0, r0, #3
 8026098:	4313      	orrs	r3, r2
 802609a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 802609e:	fb11 f107 	smulbb	r1, r1, r7
 80260a2:	b2c0      	uxtb	r0, r0
 80260a4:	b29b      	uxth	r3, r3
 80260a6:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80260aa:	fb10 f007 	smulbb	r0, r0, r7
 80260ae:	fb1e fe07 	smulbb	lr, lr, r7
 80260b2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80260b6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80260ba:	fb0c 1c02 	mla	ip, ip, r2, r1
 80260be:	10d9      	asrs	r1, r3, #3
 80260c0:	00db      	lsls	r3, r3, #3
 80260c2:	fa1f fc8c 	uxth.w	ip, ip
 80260c6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80260ca:	b2db      	uxtb	r3, r3
 80260cc:	fb01 e102 	mla	r1, r1, r2, lr
 80260d0:	fb03 0302 	mla	r3, r3, r2, r0
 80260d4:	b289      	uxth	r1, r1
 80260d6:	b29a      	uxth	r2, r3
 80260d8:	f10c 0301 	add.w	r3, ip, #1
 80260dc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80260e0:	1c53      	adds	r3, r2, #1
 80260e2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80260e6:	1c4a      	adds	r2, r1, #1
 80260e8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80260ec:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80260f0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80260f4:	0949      	lsrs	r1, r1, #5
 80260f6:	ea43 030c 	orr.w	r3, r3, ip
 80260fa:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80260fe:	430b      	orrs	r3, r1
 8026100:	f8a8 3000 	strh.w	r3, [r8]
 8026104:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026106:	f108 0802 	add.w	r8, r8, #2
 802610a:	f109 39ff 	add.w	r9, r9, #4294967295
 802610e:	441c      	add	r4, r3
 8026110:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026112:	441e      	add	r6, r3
 8026114:	e74a      	b.n	8025fac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026116:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8026118:	3d01      	subs	r5, #1
 802611a:	441c      	add	r4, r3
 802611c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802611e:	441e      	add	r6, r3
 8026120:	9b07      	ldr	r3, [sp, #28]
 8026122:	3302      	adds	r3, #2
 8026124:	9307      	str	r3, [sp, #28]
 8026126:	e722      	b.n	8025f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8026128:	d022      	beq.n	8026170 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802612a:	1e6b      	subs	r3, r5, #1
 802612c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802612e:	fb00 4003 	mla	r0, r0, r3, r4
 8026132:	1400      	asrs	r0, r0, #16
 8026134:	f53f af37 	bmi.w	8025fa6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026138:	3901      	subs	r1, #1
 802613a:	4288      	cmp	r0, r1
 802613c:	f6bf af33 	bge.w	8025fa6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026140:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8026142:	fb01 6303 	mla	r3, r1, r3, r6
 8026146:	141b      	asrs	r3, r3, #16
 8026148:	f53f af2d 	bmi.w	8025fa6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802614c:	3a01      	subs	r2, #1
 802614e:	4293      	cmp	r3, r2
 8026150:	f6bf af29 	bge.w	8025fa6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026154:	46a8      	mov	r8, r5
 8026156:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802615a:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 802615e:	f1b8 0f00 	cmp.w	r8, #0
 8026162:	dc60      	bgt.n	8026226 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8026164:	9b07      	ldr	r3, [sp, #28]
 8026166:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802616a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802616e:	9307      	str	r3, [sp, #28]
 8026170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026172:	2b00      	cmp	r3, #0
 8026174:	f340 80f8 	ble.w	8026368 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026178:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802617c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802617e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026182:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026186:	eef0 6a62 	vmov.f32	s13, s5
 802618a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802618e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026192:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026196:	ee16 4a90 	vmov	r4, s13
 802619a:	eef0 6a43 	vmov.f32	s13, s6
 802619e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80261a2:	ee16 6a90 	vmov	r6, s13
 80261a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80261aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80261ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80261b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80261b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80261ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80261be:	ee12 2a90 	vmov	r2, s5
 80261c2:	eef0 2a47 	vmov.f32	s5, s14
 80261c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80261ca:	ee13 2a10 	vmov	r2, s6
 80261ce:	931f      	str	r3, [sp, #124]	@ 0x7c
 80261d0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80261d2:	eeb0 3a67 	vmov.f32	s6, s15
 80261d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80261da:	9320      	str	r3, [sp, #128]	@ 0x80
 80261dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80261de:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80261e0:	3b01      	subs	r3, #1
 80261e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80261e4:	bf08      	it	eq
 80261e6:	4615      	moveq	r5, r2
 80261e8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80261ea:	bf18      	it	ne
 80261ec:	461d      	movne	r5, r3
 80261ee:	e6af      	b.n	8025f50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80261f0:	f111 0a01 	adds.w	sl, r1, #1
 80261f4:	d486      	bmi.n	8026104 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80261f6:	45d6      	cmp	lr, sl
 80261f8:	db84      	blt.n	8026104 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80261fa:	f110 0a01 	adds.w	sl, r0, #1
 80261fe:	d481      	bmi.n	8026104 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026200:	4553      	cmp	r3, sl
 8026202:	f6ff af7f 	blt.w	8026104 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026206:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026208:	b21b      	sxth	r3, r3
 802620a:	9101      	str	r1, [sp, #4]
 802620c:	4641      	mov	r1, r8
 802620e:	9300      	str	r3, [sp, #0]
 8026210:	fa0f f38e 	sxth.w	r3, lr
 8026214:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8026218:	e9cd c704 	strd	ip, r7, [sp, #16]
 802621c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802621e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8026220:	f7ff fdb2 	bl	8025d88 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8026224:	e76e      	b.n	8026104 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026226:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8026228:	1430      	asrs	r0, r6, #16
 802622a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802622c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8026230:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026234:	1423      	asrs	r3, r4, #16
 8026236:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802623a:	fb01 3000 	mla	r0, r1, r0, r3
 802623e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026240:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8026244:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8026248:	8858      	ldrh	r0, [r3, #2]
 802624a:	f1be 0f00 	cmp.w	lr, #0
 802624e:	d00b      	beq.n	8026268 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8026250:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8026254:	3901      	subs	r1, #1
 8026256:	0049      	lsls	r1, r1, #1
 8026258:	3102      	adds	r1, #2
 802625a:	eb03 0b01 	add.w	fp, r3, r1
 802625e:	5a5b      	ldrh	r3, [r3, r1]
 8026260:	930e      	str	r3, [sp, #56]	@ 0x38
 8026262:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026266:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026268:	ea4f 410c 	mov.w	r1, ip, lsl #16
 802626c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8026270:	fb12 f30e 	smulbb	r3, r2, lr
 8026274:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026278:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 802627c:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026280:	10db      	asrs	r3, r3, #3
 8026282:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026286:	ea41 010c 	orr.w	r1, r1, ip
 802628a:	f1ce 0c10 	rsb	ip, lr, #16
 802628e:	ea4b 0000 	orr.w	r0, fp, r0
 8026292:	9f08      	ldr	r7, [sp, #32]
 8026294:	ebac 0c02 	sub.w	ip, ip, r2
 8026298:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802629c:	f108 38ff 	add.w	r8, r8, #4294967295
 80262a0:	4350      	muls	r0, r2
 80262a2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80262a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80262a8:	fb0c 0c01 	mla	ip, ip, r1, r0
 80262ac:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80262ae:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80262b2:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 80262b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80262b8:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80262bc:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80262c0:	0412      	lsls	r2, r2, #16
 80262c2:	ea4b 0101 	orr.w	r1, fp, r1
 80262c6:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80262ca:	fb03 c101 	mla	r1, r3, r1, ip
 80262ce:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80262d2:	4302      	orrs	r2, r0
 80262d4:	fb03 1202 	mla	r2, r3, r2, r1
 80262d8:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80262dc:	0952      	lsrs	r2, r2, #5
 80262de:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80262e2:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 80262e6:	f8b9 2000 	ldrh.w	r2, [r9]
 80262ea:	ea4b 0303 	orr.w	r3, fp, r3
 80262ee:	1211      	asrs	r1, r2, #8
 80262f0:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80262f4:	b29b      	uxth	r3, r3
 80262f6:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80262fa:	00d2      	lsls	r2, r2, #3
 80262fc:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8026300:	fb11 f107 	smulbb	r1, r1, r7
 8026304:	1218      	asrs	r0, r3, #8
 8026306:	fb1c fc07 	smulbb	ip, ip, r7
 802630a:	b2d2      	uxtb	r2, r2
 802630c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026310:	fb12 f207 	smulbb	r2, r2, r7
 8026314:	fb00 100a 	mla	r0, r0, sl, r1
 8026318:	10d9      	asrs	r1, r3, #3
 802631a:	00db      	lsls	r3, r3, #3
 802631c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026320:	b280      	uxth	r0, r0
 8026322:	b2db      	uxtb	r3, r3
 8026324:	fb01 c10a 	mla	r1, r1, sl, ip
 8026328:	fb03 230a 	mla	r3, r3, sl, r2
 802632c:	1c42      	adds	r2, r0, #1
 802632e:	b289      	uxth	r1, r1
 8026330:	b29b      	uxth	r3, r3
 8026332:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026336:	f101 0c01 	add.w	ip, r1, #1
 802633a:	1c5a      	adds	r2, r3, #1
 802633c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8026340:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8026344:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026348:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802634a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802634e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026352:	441c      	add	r4, r3
 8026354:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8026358:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802635a:	4310      	orrs	r0, r2
 802635c:	441e      	add	r6, r3
 802635e:	ea40 000c 	orr.w	r0, r0, ip
 8026362:	f829 0b02 	strh.w	r0, [r9], #2
 8026366:	e6fa      	b.n	802615e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8026368:	b013      	add	sp, #76	@ 0x4c
 802636a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802636e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 802636e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026372:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8026376:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 802637a:	fb0e 4703 	mla	r7, lr, r3, r4
 802637e:	f1be 0f00 	cmp.w	lr, #0
 8026382:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8026386:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 802638a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 802638e:	8808      	ldrh	r0, [r1, #0]
 8026390:	db60      	blt.n	8026454 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8026392:	45f1      	cmp	r9, lr
 8026394:	dd5e      	ble.n	8026454 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8026396:	2c00      	cmp	r4, #0
 8026398:	db5a      	blt.n	8026450 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802639a:	42a3      	cmp	r3, r4
 802639c:	dd58      	ble.n	8026450 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802639e:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 80263a2:	1c62      	adds	r2, r4, #1
 80263a4:	d459      	bmi.n	802645a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80263a6:	4293      	cmp	r3, r2
 80263a8:	dd57      	ble.n	802645a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80263aa:	2d00      	cmp	r5, #0
 80263ac:	d055      	beq.n	802645a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80263ae:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 80263b2:	f11e 0e01 	adds.w	lr, lr, #1
 80263b6:	d454      	bmi.n	8026462 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80263b8:	45f1      	cmp	r9, lr
 80263ba:	dd52      	ble.n	8026462 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80263bc:	2e00      	cmp	r6, #0
 80263be:	d050      	beq.n	8026462 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80263c0:	2c00      	cmp	r4, #0
 80263c2:	db4c      	blt.n	802645e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80263c4:	42a3      	cmp	r3, r4
 80263c6:	dd4a      	ble.n	802645e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80263c8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 80263cc:	3401      	adds	r4, #1
 80263ce:	d405      	bmi.n	80263dc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80263d0:	42a3      	cmp	r3, r4
 80263d2:	dd03      	ble.n	80263dc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80263d4:	b115      	cbz	r5, 80263dc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80263d6:	3301      	adds	r3, #1
 80263d8:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 80263dc:	fb15 f406 	smulbb	r4, r5, r6
 80263e0:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80263e4:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80263e8:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80263ec:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80263f0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80263f4:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80263f8:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80263fc:	ea43 0c0c 	orr.w	ip, r3, ip
 8026400:	f1c6 0310 	rsb	r3, r6, #16
 8026404:	ea4e 0707 	orr.w	r7, lr, r7
 8026408:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 802640c:	1b5b      	subs	r3, r3, r5
 802640e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8026412:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8026416:	437d      	muls	r5, r7
 8026418:	fb03 5c0c 	mla	ip, r3, ip, r5
 802641c:	0403      	lsls	r3, r0, #16
 802641e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026422:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8026426:	4318      	orrs	r0, r3
 8026428:	0413      	lsls	r3, r2, #16
 802642a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802642e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8026432:	fb04 c000 	mla	r0, r4, r0, ip
 8026436:	4313      	orrs	r3, r2
 8026438:	fb06 0003 	mla	r0, r6, r3, r0
 802643c:	0d43      	lsrs	r3, r0, #21
 802643e:	0940      	lsrs	r0, r0, #5
 8026440:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026444:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026448:	4318      	orrs	r0, r3
 802644a:	8008      	strh	r0, [r1, #0]
 802644c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026450:	4684      	mov	ip, r0
 8026452:	e7a6      	b.n	80263a2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8026454:	4607      	mov	r7, r0
 8026456:	4684      	mov	ip, r0
 8026458:	e7ab      	b.n	80263b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802645a:	4607      	mov	r7, r0
 802645c:	e7a9      	b.n	80263b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802645e:	4602      	mov	r2, r0
 8026460:	e7b4      	b.n	80263cc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8026462:	4602      	mov	r2, r0
 8026464:	e7ba      	b.n	80263dc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08026466 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026466:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802646a:	b08f      	sub	sp, #60	@ 0x3c
 802646c:	461d      	mov	r5, r3
 802646e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026470:	9107      	str	r1, [sp, #28]
 8026472:	920c      	str	r2, [sp, #48]	@ 0x30
 8026474:	6859      	ldr	r1, [r3, #4]
 8026476:	681b      	ldr	r3, [r3, #0]
 8026478:	900d      	str	r0, [sp, #52]	@ 0x34
 802647a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 802647e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 8026482:	fb01 2707 	mla	r7, r1, r7, r2
 8026486:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802648a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802648c:	f8d3 8000 	ldr.w	r8, [r3]
 8026490:	9b07      	ldr	r3, [sp, #28]
 8026492:	2b00      	cmp	r3, #0
 8026494:	dc03      	bgt.n	802649e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8026496:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026498:	2b00      	cmp	r3, #0
 802649a:	f340 8182 	ble.w	80267a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 802649e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80264a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80264a4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80264a8:	1e48      	subs	r0, r1, #1
 80264aa:	f102 3cff 	add.w	ip, r2, #4294967295
 80264ae:	2d00      	cmp	r5, #0
 80264b0:	f340 809b 	ble.w	80265ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 80264b4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80264b8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80264bc:	d406      	bmi.n	80264cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80264be:	4586      	cmp	lr, r0
 80264c0:	da04      	bge.n	80264cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80264c2:	2b00      	cmp	r3, #0
 80264c4:	db02      	blt.n	80264cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80264c6:	4563      	cmp	r3, ip
 80264c8:	f2c0 8090 	blt.w	80265ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80264cc:	f11e 0e01 	adds.w	lr, lr, #1
 80264d0:	f100 8084 	bmi.w	80265dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80264d4:	4571      	cmp	r1, lr
 80264d6:	f2c0 8081 	blt.w	80265dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80264da:	3301      	adds	r3, #1
 80264dc:	d47e      	bmi.n	80265dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80264de:	429a      	cmp	r2, r3
 80264e0:	db7c      	blt.n	80265dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80264e2:	46aa      	mov	sl, r5
 80264e4:	46b9      	mov	r9, r7
 80264e6:	f1ba 0f00 	cmp.w	sl, #0
 80264ea:	f340 8099 	ble.w	8026620 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80264ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80264f0:	1421      	asrs	r1, r4, #16
 80264f2:	ea4f 4026 	mov.w	r0, r6, asr #16
 80264f6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80264fa:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80264fe:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026502:	f100 80d1 	bmi.w	80266a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8026506:	f10e 3bff 	add.w	fp, lr, #4294967295
 802650a:	4559      	cmp	r1, fp
 802650c:	f280 80cc 	bge.w	80266a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8026510:	2800      	cmp	r0, #0
 8026512:	f2c0 80c9 	blt.w	80266a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8026516:	f103 3bff 	add.w	fp, r3, #4294967295
 802651a:	4558      	cmp	r0, fp
 802651c:	f280 80c4 	bge.w	80266a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8026520:	fa0f fe8e 	sxth.w	lr, lr
 8026524:	fb00 110e 	mla	r1, r0, lr, r1
 8026528:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802652c:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8026530:	8841      	ldrh	r1, [r0, #2]
 8026532:	f1bc 0f00 	cmp.w	ip, #0
 8026536:	d00b      	beq.n	8026550 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8026538:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 802653c:	3b01      	subs	r3, #1
 802653e:	005b      	lsls	r3, r3, #1
 8026540:	3302      	adds	r3, #2
 8026542:	eb00 0e03 	add.w	lr, r0, r3
 8026546:	5ac3      	ldrh	r3, [r0, r3]
 8026548:	9308      	str	r3, [sp, #32]
 802654a:	f8be 3002 	ldrh.w	r3, [lr, #2]
 802654e:	9309      	str	r3, [sp, #36]	@ 0x24
 8026550:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8026554:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8026558:	fb12 f30c 	smulbb	r3, r2, ip
 802655c:	f1cc 0e10 	rsb	lr, ip, #16
 8026560:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8026564:	10db      	asrs	r3, r3, #3
 8026566:	ebae 0e02 	sub.w	lr, lr, r2
 802656a:	ea40 000b 	orr.w	r0, r0, fp
 802656e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026572:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8026576:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802657a:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802657e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026582:	ea4b 0101 	orr.w	r1, fp, r1
 8026586:	4351      	muls	r1, r2
 8026588:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802658a:	fb0e 1e00 	mla	lr, lr, r0, r1
 802658e:	0410      	lsls	r0, r2, #16
 8026590:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026594:	9908      	ldr	r1, [sp, #32]
 8026596:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802659a:	4310      	orrs	r0, r2
 802659c:	9a08      	ldr	r2, [sp, #32]
 802659e:	0412      	lsls	r2, r2, #16
 80265a0:	fb03 e000 	mla	r0, r3, r0, lr
 80265a4:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 80265a8:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80265ac:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80265b0:	ea42 020e 	orr.w	r2, r2, lr
 80265b4:	fb03 0302 	mla	r3, r3, r2, r0
 80265b8:	0d5a      	lsrs	r2, r3, #21
 80265ba:	095b      	lsrs	r3, r3, #5
 80265bc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80265c0:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80265c4:	4313      	orrs	r3, r2
 80265c6:	f8a9 3000 	strh.w	r3, [r9]
 80265ca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80265cc:	f109 0902 	add.w	r9, r9, #2
 80265d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80265d4:	441c      	add	r4, r3
 80265d6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80265d8:	441e      	add	r6, r3
 80265da:	e784      	b.n	80264e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80265dc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80265de:	3d01      	subs	r5, #1
 80265e0:	3702      	adds	r7, #2
 80265e2:	441c      	add	r4, r3
 80265e4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80265e6:	441e      	add	r6, r3
 80265e8:	e761      	b.n	80264ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80265ea:	d01d      	beq.n	8026628 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80265ec:	1e6b      	subs	r3, r5, #1
 80265ee:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80265f0:	fb00 4003 	mla	r0, r0, r3, r4
 80265f4:	1400      	asrs	r0, r0, #16
 80265f6:	f53f af74 	bmi.w	80264e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80265fa:	3901      	subs	r1, #1
 80265fc:	4288      	cmp	r0, r1
 80265fe:	f6bf af70 	bge.w	80264e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026602:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8026604:	fb01 6303 	mla	r3, r1, r3, r6
 8026608:	141b      	asrs	r3, r3, #16
 802660a:	f53f af6a 	bmi.w	80264e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802660e:	3a01      	subs	r2, #1
 8026610:	4293      	cmp	r3, r2
 8026612:	f6bf af66 	bge.w	80264e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026616:	46a9      	mov	r9, r5
 8026618:	46ba      	mov	sl, r7
 802661a:	f1b9 0f00 	cmp.w	r9, #0
 802661e:	dc5b      	bgt.n	80266d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8026620:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026624:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8026628:	9b07      	ldr	r3, [sp, #28]
 802662a:	2b00      	cmp	r3, #0
 802662c:	f340 80b9 	ble.w	80267a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8026630:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026634:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026636:	ee30 0a04 	vadd.f32	s0, s0, s8
 802663a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802663e:	eef0 6a62 	vmov.f32	s13, s5
 8026642:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026646:	ee31 1a05 	vadd.f32	s2, s2, s10
 802664a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802664e:	ee16 4a90 	vmov	r4, s13
 8026652:	eef0 6a43 	vmov.f32	s13, s6
 8026656:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802665a:	ee16 6a90 	vmov	r6, s13
 802665e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026662:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026666:	ee77 2a62 	vsub.f32	s5, s14, s5
 802666a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802666e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026672:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026676:	ee12 2a90 	vmov	r2, s5
 802667a:	eef0 2a47 	vmov.f32	s5, s14
 802667e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026682:	ee13 2a10 	vmov	r2, s6
 8026686:	931b      	str	r3, [sp, #108]	@ 0x6c
 8026688:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802668a:	eeb0 3a67 	vmov.f32	s6, s15
 802668e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026692:	931c      	str	r3, [sp, #112]	@ 0x70
 8026694:	9b07      	ldr	r3, [sp, #28]
 8026696:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026698:	3b01      	subs	r3, #1
 802669a:	9307      	str	r3, [sp, #28]
 802669c:	bf08      	it	eq
 802669e:	4615      	moveq	r5, r2
 80266a0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80266a2:	bf18      	it	ne
 80266a4:	461d      	movne	r5, r3
 80266a6:	e6f3      	b.n	8026490 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80266a8:	f111 0b01 	adds.w	fp, r1, #1
 80266ac:	d48d      	bmi.n	80265ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80266ae:	45de      	cmp	lr, fp
 80266b0:	db8b      	blt.n	80265ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80266b2:	f110 0b01 	adds.w	fp, r0, #1
 80266b6:	d488      	bmi.n	80265ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80266b8:	455b      	cmp	r3, fp
 80266ba:	db86      	blt.n	80265ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80266bc:	b21b      	sxth	r3, r3
 80266be:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80266c2:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80266c6:	9300      	str	r3, [sp, #0]
 80266c8:	4642      	mov	r2, r8
 80266ca:	fa0f f38e 	sxth.w	r3, lr
 80266ce:	4649      	mov	r1, r9
 80266d0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80266d2:	f7ff fe4c 	bl	802636e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80266d6:	e778      	b.n	80265ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80266d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80266da:	1420      	asrs	r0, r4, #16
 80266dc:	1431      	asrs	r1, r6, #16
 80266de:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80266e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80266e6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80266ea:	fb03 0101 	mla	r1, r3, r1, r0
 80266ee:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80266f2:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80266f6:	8841      	ldrh	r1, [r0, #2]
 80266f8:	f1be 0f00 	cmp.w	lr, #0
 80266fc:	d00b      	beq.n	8026716 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80266fe:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8026702:	3b01      	subs	r3, #1
 8026704:	005b      	lsls	r3, r3, #1
 8026706:	3302      	adds	r3, #2
 8026708:	eb00 0b03 	add.w	fp, r0, r3
 802670c:	5ac3      	ldrh	r3, [r0, r3]
 802670e:	930a      	str	r3, [sp, #40]	@ 0x28
 8026710:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026714:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026716:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802671a:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802671e:	fb12 f30e 	smulbb	r3, r2, lr
 8026722:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026726:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802672a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802672e:	10db      	asrs	r3, r3, #3
 8026730:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026734:	ea40 000c 	orr.w	r0, r0, ip
 8026738:	f1ce 0c10 	rsb	ip, lr, #16
 802673c:	ea4b 0101 	orr.w	r1, fp, r1
 8026740:	f109 39ff 	add.w	r9, r9, #4294967295
 8026744:	ebac 0c02 	sub.w	ip, ip, r2
 8026748:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802674c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026750:	4351      	muls	r1, r2
 8026752:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026754:	fb0c 1c00 	mla	ip, ip, r0, r1
 8026758:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802675a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802675e:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 8026762:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026764:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026768:	0412      	lsls	r2, r2, #16
 802676a:	ea4b 0000 	orr.w	r0, fp, r0
 802676e:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 8026772:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8026776:	fb03 c000 	mla	r0, r3, r0, ip
 802677a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802677e:	ea42 0b0b 	orr.w	fp, r2, fp
 8026782:	fb03 000b 	mla	r0, r3, fp, r0
 8026786:	0d43      	lsrs	r3, r0, #21
 8026788:	0940      	lsrs	r0, r0, #5
 802678a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802678e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026792:	4318      	orrs	r0, r3
 8026794:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026796:	441c      	add	r4, r3
 8026798:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802679a:	f82a 0b02 	strh.w	r0, [sl], #2
 802679e:	441e      	add	r6, r3
 80267a0:	e73b      	b.n	802661a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80267a2:	b00f      	add	sp, #60	@ 0x3c
 80267a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080267a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80267a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267ac:	b085      	sub	sp, #20
 80267ae:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 80267b2:	9102      	str	r1, [sp, #8]
 80267b4:	2c00      	cmp	r4, #0
 80267b6:	fb04 7103 	mla	r1, r4, r3, r7
 80267ba:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 80267be:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 80267c2:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80267c6:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 80267ca:	f2c0 811b 	blt.w	8026a04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80267ce:	45a6      	cmp	lr, r4
 80267d0:	f340 8118 	ble.w	8026a04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80267d4:	2f00      	cmp	r7, #0
 80267d6:	f2c0 8113 	blt.w	8026a00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80267da:	42bb      	cmp	r3, r7
 80267dc:	f340 8110 	ble.w	8026a00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80267e0:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80267e4:	1c7a      	adds	r2, r7, #1
 80267e6:	f100 8110 	bmi.w	8026a0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80267ea:	4293      	cmp	r3, r2
 80267ec:	f340 810d 	ble.w	8026a0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80267f0:	2e00      	cmp	r6, #0
 80267f2:	f000 810c 	beq.w	8026a0e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80267f6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80267fa:	3401      	adds	r4, #1
 80267fc:	f100 810b 	bmi.w	8026a16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8026800:	45a6      	cmp	lr, r4
 8026802:	f340 8108 	ble.w	8026a16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8026806:	2800      	cmp	r0, #0
 8026808:	f000 8108 	beq.w	8026a1c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 802680c:	2f00      	cmp	r7, #0
 802680e:	f2c0 8100 	blt.w	8026a12 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8026812:	42bb      	cmp	r3, r7
 8026814:	f340 80fd 	ble.w	8026a12 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8026818:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802681c:	3701      	adds	r7, #1
 802681e:	f100 8100 	bmi.w	8026a22 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8026822:	42bb      	cmp	r3, r7
 8026824:	f340 80fd 	ble.w	8026a22 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8026828:	2e00      	cmp	r6, #0
 802682a:	f000 80fc 	beq.w	8026a26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 802682e:	3301      	adds	r3, #1
 8026830:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8026834:	b2b6      	uxth	r6, r6
 8026836:	b280      	uxth	r0, r0
 8026838:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802683c:	fb00 fe06 	mul.w	lr, r0, r6
 8026840:	0136      	lsls	r6, r6, #4
 8026842:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026846:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802684a:	eba6 070e 	sub.w	r7, r6, lr
 802684e:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8026852:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026856:	b280      	uxth	r0, r0
 8026858:	b2bf      	uxth	r7, r7
 802685a:	1a1b      	subs	r3, r3, r0
 802685c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8026860:	fb0a f607 	mul.w	r6, sl, r7
 8026864:	b29b      	uxth	r3, r3
 8026866:	fb0b 6603 	mla	r6, fp, r3, r6
 802686a:	fb00 6609 	mla	r6, r0, r9, r6
 802686e:	fb0e 6608 	mla	r6, lr, r8, r6
 8026872:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026876:	9600      	str	r6, [sp, #0]
 8026878:	2e00      	cmp	r6, #0
 802687a:	f000 80be 	beq.w	80269fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 802687e:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026882:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8026886:	9e02      	ldr	r6, [sp, #8]
 8026888:	fb0b fc0c 	mul.w	ip, fp, ip
 802688c:	fb0b f505 	mul.w	r5, fp, r5
 8026890:	8836      	ldrh	r6, [r6, #0]
 8026892:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026896:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802689a:	9501      	str	r5, [sp, #4]
 802689c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80268a0:	44dc      	add	ip, fp
 80268a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80268a6:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 80268aa:	9503      	str	r5, [sp, #12]
 80268ac:	9d01      	ldr	r5, [sp, #4]
 80268ae:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 80268b2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80268b6:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 80268ba:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80268be:	fb0a fc0c 	mul.w	ip, sl, ip
 80268c2:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80268c6:	fb0a fa01 	mul.w	sl, sl, r1
 80268ca:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80268ce:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80268d2:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 80268d6:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80268da:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80268de:	4465      	add	r5, ip
 80268e0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80268e4:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80268e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80268ec:	fb09 fc0c 	mul.w	ip, r9, ip
 80268f0:	0a2d      	lsrs	r5, r5, #8
 80268f2:	fb09 f904 	mul.w	r9, r9, r4
 80268f6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80268fa:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80268fe:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026902:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8026906:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802690a:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802690e:	437d      	muls	r5, r7
 8026910:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8026914:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8026918:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802691c:	4461      	add	r1, ip
 802691e:	fb08 f404 	mul.w	r4, r8, r4
 8026922:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026926:	fb08 f802 	mul.w	r8, r8, r2
 802692a:	0a09      	lsrs	r1, r1, #8
 802692c:	0a22      	lsrs	r2, r4, #8
 802692e:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8026932:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8026936:	fb07 f70a 	mul.w	r7, r7, sl
 802693a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802693e:	4414      	add	r4, r2
 8026940:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8026944:	0a24      	lsrs	r4, r4, #8
 8026946:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802694a:	9a03      	ldr	r2, [sp, #12]
 802694c:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8026950:	fb02 5503 	mla	r5, r2, r3, r5
 8026954:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026958:	9a00      	ldr	r2, [sp, #0]
 802695a:	fb04 540e 	mla	r4, r4, lr, r5
 802695e:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8026962:	1235      	asrs	r5, r6, #8
 8026964:	fb01 4100 	mla	r1, r1, r0, r4
 8026968:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802696c:	0a09      	lsrs	r1, r1, #8
 802696e:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8026972:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8026976:	fb03 7101 	mla	r1, r3, r1, r7
 802697a:	fb0e 1e08 	mla	lr, lr, r8, r1
 802697e:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8026982:	fb00 e101 	mla	r1, r0, r1, lr
 8026986:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 802698a:	b287      	uxth	r7, r0
 802698c:	0a09      	lsrs	r1, r1, #8
 802698e:	437a      	muls	r2, r7
 8026990:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8026994:	1c53      	adds	r3, r2, #1
 8026996:	4321      	orrs	r1, r4
 8026998:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802699c:	0c0a      	lsrs	r2, r1, #16
 802699e:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80269a2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80269a6:	b2c8      	uxtb	r0, r1
 80269a8:	fb12 f207 	smulbb	r2, r2, r7
 80269ac:	fb14 f407 	smulbb	r4, r4, r7
 80269b0:	b2db      	uxtb	r3, r3
 80269b2:	fb10 f007 	smulbb	r0, r0, r7
 80269b6:	fb05 2503 	mla	r5, r5, r3, r2
 80269ba:	10f2      	asrs	r2, r6, #3
 80269bc:	00f6      	lsls	r6, r6, #3
 80269be:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80269c2:	b2ad      	uxth	r5, r5
 80269c4:	b2f6      	uxtb	r6, r6
 80269c6:	fb02 4203 	mla	r2, r2, r3, r4
 80269ca:	fb06 0303 	mla	r3, r6, r3, r0
 80269ce:	b294      	uxth	r4, r2
 80269d0:	b299      	uxth	r1, r3
 80269d2:	1c6b      	adds	r3, r5, #1
 80269d4:	1c62      	adds	r2, r4, #1
 80269d6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80269da:	1c4b      	adds	r3, r1, #1
 80269dc:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80269e0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80269e4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80269e8:	0952      	lsrs	r2, r2, #5
 80269ea:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80269ee:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80269f2:	432b      	orrs	r3, r5
 80269f4:	4313      	orrs	r3, r2
 80269f6:	9a02      	ldr	r2, [sp, #8]
 80269f8:	8013      	strh	r3, [r2, #0]
 80269fa:	b005      	add	sp, #20
 80269fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a00:	2500      	movs	r5, #0
 8026a02:	e6ef      	b.n	80267e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8026a04:	2100      	movs	r1, #0
 8026a06:	460d      	mov	r5, r1
 8026a08:	e6f7      	b.n	80267fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8026a0a:	2100      	movs	r1, #0
 8026a0c:	e6f5      	b.n	80267fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8026a0e:	4631      	mov	r1, r6
 8026a10:	e6f3      	b.n	80267fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8026a12:	2400      	movs	r4, #0
 8026a14:	e702      	b.n	802681c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8026a16:	2200      	movs	r2, #0
 8026a18:	4614      	mov	r4, r2
 8026a1a:	e70b      	b.n	8026834 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8026a1c:	4602      	mov	r2, r0
 8026a1e:	4604      	mov	r4, r0
 8026a20:	e708      	b.n	8026834 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8026a22:	2200      	movs	r2, #0
 8026a24:	e706      	b.n	8026834 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8026a26:	4632      	mov	r2, r6
 8026a28:	e704      	b.n	8026834 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08026a2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026a2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a2e:	b09d      	sub	sp, #116	@ 0x74
 8026a30:	9219      	str	r2, [sp, #100]	@ 0x64
 8026a32:	9307      	str	r3, [sp, #28]
 8026a34:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8026a36:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8026a3a:	901b      	str	r0, [sp, #108]	@ 0x6c
 8026a3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8026a3e:	6850      	ldr	r0, [r2, #4]
 8026a40:	9117      	str	r1, [sp, #92]	@ 0x5c
 8026a42:	6812      	ldr	r2, [r2, #0]
 8026a44:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8026a48:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 8026a4c:	fb00 1303 	mla	r3, r0, r3, r1
 8026a50:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026a54:	930a      	str	r3, [sp, #40]	@ 0x28
 8026a56:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026a58:	681b      	ldr	r3, [r3, #0]
 8026a5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8026a5c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8026a60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026a62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026a64:	2b00      	cmp	r3, #0
 8026a66:	dc03      	bgt.n	8026a70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8026a68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026a6a:	2b00      	cmp	r3, #0
 8026a6c:	f340 8375 	ble.w	802715a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8026a70:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026a72:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026a76:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026a7a:	1e48      	subs	r0, r1, #1
 8026a7c:	1e57      	subs	r7, r2, #1
 8026a7e:	9b07      	ldr	r3, [sp, #28]
 8026a80:	2b00      	cmp	r3, #0
 8026a82:	f340 818e 	ble.w	8026da2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8026a86:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026a8a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026a8e:	d406      	bmi.n	8026a9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026a90:	4584      	cmp	ip, r0
 8026a92:	da04      	bge.n	8026a9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026a94:	2b00      	cmp	r3, #0
 8026a96:	db02      	blt.n	8026a9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026a98:	42bb      	cmp	r3, r7
 8026a9a:	f2c0 8183 	blt.w	8026da4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8026a9e:	f11c 0c01 	adds.w	ip, ip, #1
 8026aa2:	f100 8173 	bmi.w	8026d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026aa6:	4561      	cmp	r1, ip
 8026aa8:	f2c0 8170 	blt.w	8026d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026aac:	3301      	adds	r3, #1
 8026aae:	f100 816d 	bmi.w	8026d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026ab2:	429a      	cmp	r2, r3
 8026ab4:	f2c0 816a 	blt.w	8026d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026ab8:	9b07      	ldr	r3, [sp, #28]
 8026aba:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8026abc:	9318      	str	r3, [sp, #96]	@ 0x60
 8026abe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026ac0:	2b00      	cmp	r3, #0
 8026ac2:	f340 818c 	ble.w	8026dde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8026ac6:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8026ac8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8026acc:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026ace:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8026ad2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026ad6:	1422      	asrs	r2, r4, #16
 8026ad8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026adc:	689b      	ldr	r3, [r3, #8]
 8026ade:	f100 81cd 	bmi.w	8026e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026ae2:	f103 38ff 	add.w	r8, r3, #4294967295
 8026ae6:	4542      	cmp	r2, r8
 8026ae8:	f280 81c8 	bge.w	8026e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026aec:	f1bc 0f00 	cmp.w	ip, #0
 8026af0:	f2c0 81c4 	blt.w	8026e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026af4:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026af8:	45c4      	cmp	ip, r8
 8026afa:	f280 81bf 	bge.w	8026e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026afe:	b21b      	sxth	r3, r3
 8026b00:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8026b02:	fb0c 2203 	mla	r2, ip, r3, r2
 8026b06:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8026b0a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8026b0e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026b12:	2800      	cmp	r0, #0
 8026b14:	f000 81a9 	beq.w	8026e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8026b18:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026b1c:	950c      	str	r5, [sp, #48]	@ 0x30
 8026b1e:	0e2d      	lsrs	r5, r5, #24
 8026b20:	9513      	str	r5, [sp, #76]	@ 0x4c
 8026b22:	b181      	cbz	r1, 8026b46 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026b24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8026b28:	3b01      	subs	r3, #1
 8026b2a:	009b      	lsls	r3, r3, #2
 8026b2c:	3304      	adds	r3, #4
 8026b2e:	eb08 0c03 	add.w	ip, r8, r3
 8026b32:	f858 3003 	ldr.w	r3, [r8, r3]
 8026b36:	9308      	str	r3, [sp, #32]
 8026b38:	0e1b      	lsrs	r3, r3, #24
 8026b3a:	9311      	str	r3, [sp, #68]	@ 0x44
 8026b3c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026b40:	930d      	str	r3, [sp, #52]	@ 0x34
 8026b42:	0e1b      	lsrs	r3, r3, #24
 8026b44:	9314      	str	r3, [sp, #80]	@ 0x50
 8026b46:	b280      	uxth	r0, r0
 8026b48:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026b4a:	b289      	uxth	r1, r1
 8026b4c:	fb00 f901 	mul.w	r9, r0, r1
 8026b50:	0100      	lsls	r0, r0, #4
 8026b52:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026b56:	eba0 0809 	sub.w	r8, r0, r9
 8026b5a:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8026b5e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8026b60:	b289      	uxth	r1, r1
 8026b62:	fa1f f888 	uxth.w	r8, r8
 8026b66:	1a5b      	subs	r3, r3, r1
 8026b68:	fb08 f000 	mul.w	r0, r8, r0
 8026b6c:	b29b      	uxth	r3, r3
 8026b6e:	fb03 000e 	mla	r0, r3, lr, r0
 8026b72:	fb01 0005 	mla	r0, r1, r5, r0
 8026b76:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8026b78:	fb09 0005 	mla	r0, r9, r5, r0
 8026b7c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026b80:	2800      	cmp	r0, #0
 8026b82:	f000 80fa 	beq.w	8026d7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026b86:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026b8a:	d01b      	beq.n	8026bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8026b8c:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8026b90:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026b94:	fb0e fa0a 	mul.w	sl, lr, sl
 8026b98:	fb0e fe02 	mul.w	lr, lr, r2
 8026b9c:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8026ba0:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026ba4:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8026ba8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026bac:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026bb0:	4452      	add	r2, sl
 8026bb2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026bb6:	0a12      	lsrs	r2, r2, #8
 8026bb8:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026bbc:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026bc0:	ea42 020c 	orr.w	r2, r2, ip
 8026bc4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8026bc6:	2dff      	cmp	r5, #255	@ 0xff
 8026bc8:	d021      	beq.n	8026c0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8026bca:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8026bcc:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8026bd0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8026bd2:	fb05 fb0b 	mul.w	fp, r5, fp
 8026bd6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8026bd8:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026bdc:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8026bde:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026be2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026be6:	fb05 fa0a 	mul.w	sl, r5, sl
 8026bea:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026bee:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026bf2:	44de      	add	lr, fp
 8026bf4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026bf8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026bfc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c00:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026c04:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026c08:	ea4e 050a 	orr.w	r5, lr, sl
 8026c0c:	950c      	str	r5, [sp, #48]	@ 0x30
 8026c0e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026c10:	2dff      	cmp	r5, #255	@ 0xff
 8026c12:	d021      	beq.n	8026c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8026c14:	9d08      	ldr	r5, [sp, #32]
 8026c16:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8026c1a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026c1c:	fb05 fb0b 	mul.w	fp, r5, fp
 8026c20:	9d08      	ldr	r5, [sp, #32]
 8026c22:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026c26:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026c28:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026c2c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026c30:	fb05 fa0a 	mul.w	sl, r5, sl
 8026c34:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026c38:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026c3c:	44de      	add	lr, fp
 8026c3e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026c42:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026c46:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c4a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026c4e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026c52:	ea4e 050a 	orr.w	r5, lr, sl
 8026c56:	9508      	str	r5, [sp, #32]
 8026c58:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8026c5a:	2dff      	cmp	r5, #255	@ 0xff
 8026c5c:	d021      	beq.n	8026ca2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8026c5e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8026c60:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8026c64:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8026c66:	fb05 fb0b 	mul.w	fp, r5, fp
 8026c6a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8026c6c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026c70:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8026c72:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026c76:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026c7a:	fb05 fa0a 	mul.w	sl, r5, sl
 8026c7e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026c82:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026c86:	44de      	add	lr, fp
 8026c88:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026c8c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026c90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c94:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026c98:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026c9c:	ea4e 050a 	orr.w	r5, lr, sl
 8026ca0:	950d      	str	r5, [sp, #52]	@ 0x34
 8026ca2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8026ca4:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8026ca8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026cac:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026cb0:	9d08      	ldr	r5, [sp, #32]
 8026cb2:	fb08 fc0c 	mul.w	ip, r8, ip
 8026cb6:	fb03 cc0e 	mla	ip, r3, lr, ip
 8026cba:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8026cbe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8026cc0:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026cc4:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8026cc8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8026cca:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026cce:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8026cd2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8026cd4:	fb08 f80e 	mul.w	r8, r8, lr
 8026cd8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026cdc:	fb03 8202 	mla	r2, r3, r2, r8
 8026ce0:	9b08      	ldr	r3, [sp, #32]
 8026ce2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026ce6:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8026cea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026cec:	fb01 220a 	mla	r2, r1, sl, r2
 8026cf0:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8026cf4:	883b      	ldrh	r3, [r7, #0]
 8026cf6:	fb09 2901 	mla	r9, r9, r1, r2
 8026cfa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026cfc:	1219      	asrs	r1, r3, #8
 8026cfe:	4342      	muls	r2, r0
 8026d00:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026d04:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8026d08:	1c50      	adds	r0, r2, #1
 8026d0a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8026d0e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026d12:	ea4c 0c09 	orr.w	ip, ip, r9
 8026d16:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8026d1a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8026d1e:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8026d22:	fa5f fc8c 	uxtb.w	ip, ip
 8026d26:	fb12 f205 	smulbb	r2, r2, r5
 8026d2a:	b2c0      	uxtb	r0, r0
 8026d2c:	fb1c fc05 	smulbb	ip, ip, r5
 8026d30:	fb01 2100 	mla	r1, r1, r0, r2
 8026d34:	10da      	asrs	r2, r3, #3
 8026d36:	fb1e fe05 	smulbb	lr, lr, r5
 8026d3a:	00db      	lsls	r3, r3, #3
 8026d3c:	b289      	uxth	r1, r1
 8026d3e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8026d42:	b2db      	uxtb	r3, r3
 8026d44:	fb02 e200 	mla	r2, r2, r0, lr
 8026d48:	fb03 c300 	mla	r3, r3, r0, ip
 8026d4c:	b292      	uxth	r2, r2
 8026d4e:	fa1f fc83 	uxth.w	ip, r3
 8026d52:	1c4b      	adds	r3, r1, #1
 8026d54:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026d58:	f10c 0301 	add.w	r3, ip, #1
 8026d5c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8026d60:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8026d64:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026d68:	430b      	orrs	r3, r1
 8026d6a:	1c51      	adds	r1, r2, #1
 8026d6c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026d70:	0952      	lsrs	r2, r2, #5
 8026d72:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026d76:	4313      	orrs	r3, r2
 8026d78:	803b      	strh	r3, [r7, #0]
 8026d7a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026d7c:	3702      	adds	r7, #2
 8026d7e:	441c      	add	r4, r3
 8026d80:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026d82:	441e      	add	r6, r3
 8026d84:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026d86:	3b01      	subs	r3, #1
 8026d88:	9318      	str	r3, [sp, #96]	@ 0x60
 8026d8a:	e698      	b.n	8026abe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026d8c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026d8e:	441c      	add	r4, r3
 8026d90:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026d92:	441e      	add	r6, r3
 8026d94:	9b07      	ldr	r3, [sp, #28]
 8026d96:	3b01      	subs	r3, #1
 8026d98:	9307      	str	r3, [sp, #28]
 8026d9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026d9c:	3302      	adds	r3, #2
 8026d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8026da0:	e66d      	b.n	8026a7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8026da2:	d023      	beq.n	8026dec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8026da4:	9b07      	ldr	r3, [sp, #28]
 8026da6:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8026da8:	3b01      	subs	r3, #1
 8026daa:	fb00 4003 	mla	r0, r0, r3, r4
 8026dae:	1400      	asrs	r0, r0, #16
 8026db0:	f53f ae82 	bmi.w	8026ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026db4:	3901      	subs	r1, #1
 8026db6:	4288      	cmp	r0, r1
 8026db8:	f6bf ae7e 	bge.w	8026ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026dbc:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8026dbe:	fb01 6303 	mla	r3, r1, r3, r6
 8026dc2:	141b      	asrs	r3, r3, #16
 8026dc4:	f53f ae78 	bmi.w	8026ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026dc8:	3a01      	subs	r2, #1
 8026dca:	4293      	cmp	r3, r2
 8026dcc:	f6bf ae74 	bge.w	8026ab8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026dd0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026dd4:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8026dd8:	f1bb 0f00 	cmp.w	fp, #0
 8026ddc:	dc6c      	bgt.n	8026eb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8026dde:	9b07      	ldr	r3, [sp, #28]
 8026de0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8026de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026de6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8026dea:	930a      	str	r3, [sp, #40]	@ 0x28
 8026dec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026dee:	2b00      	cmp	r3, #0
 8026df0:	f340 81b3 	ble.w	802715a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8026df4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026df8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026dfa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026dfe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026e02:	eef0 6a62 	vmov.f32	s13, s5
 8026e06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026e0a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026e0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e12:	ee16 4a90 	vmov	r4, s13
 8026e16:	eef0 6a43 	vmov.f32	s13, s6
 8026e1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e1e:	ee16 6a90 	vmov	r6, s13
 8026e22:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026e26:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026e2a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026e2e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026e32:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026e36:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026e3a:	ee12 2a90 	vmov	r2, s5
 8026e3e:	eef0 2a47 	vmov.f32	s5, s14
 8026e42:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e46:	ee13 2a10 	vmov	r2, s6
 8026e4a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8026e4c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026e4e:	eeb0 3a67 	vmov.f32	s6, s15
 8026e52:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e56:	932a      	str	r3, [sp, #168]	@ 0xa8
 8026e58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026e5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8026e5c:	3b01      	subs	r3, #1
 8026e5e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8026e60:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026e62:	bf08      	it	eq
 8026e64:	4613      	moveq	r3, r2
 8026e66:	9307      	str	r3, [sp, #28]
 8026e68:	e5fb      	b.n	8026a62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8026e6a:	2900      	cmp	r1, #0
 8026e6c:	f43f ae6b 	beq.w	8026b46 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026e70:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8026e74:	9308      	str	r3, [sp, #32]
 8026e76:	0e1b      	lsrs	r3, r3, #24
 8026e78:	9311      	str	r3, [sp, #68]	@ 0x44
 8026e7a:	e664      	b.n	8026b46 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026e7c:	f112 0801 	adds.w	r8, r2, #1
 8026e80:	f53f af7b 	bmi.w	8026d7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026e84:	4543      	cmp	r3, r8
 8026e86:	f6ff af78 	blt.w	8026d7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026e8a:	f11c 0801 	adds.w	r8, ip, #1
 8026e8e:	f53f af74 	bmi.w	8026d7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026e92:	45c6      	cmp	lr, r8
 8026e94:	f6ff af71 	blt.w	8026d7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026e98:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8026e9a:	b21b      	sxth	r3, r3
 8026e9c:	9201      	str	r2, [sp, #4]
 8026e9e:	fa0f f28e 	sxth.w	r2, lr
 8026ea2:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8026ea6:	e9cd c002 	strd	ip, r0, [sp, #8]
 8026eaa:	9200      	str	r2, [sp, #0]
 8026eac:	4639      	mov	r1, r7
 8026eae:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8026eb0:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8026eb2:	f7ff fc79 	bl	80267a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8026eb6:	e760      	b.n	8026d7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026eb8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026eba:	1427      	asrs	r7, r4, #16
 8026ebc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8026ebe:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026ec2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026ec6:	1433      	asrs	r3, r6, #16
 8026ec8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026ecc:	fb01 7303 	mla	r3, r1, r3, r7
 8026ed0:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8026ed4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8026ed8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026edc:	2a00      	cmp	r2, #0
 8026ede:	f000 8133 	beq.w	8027148 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8026ee2:	687d      	ldr	r5, [r7, #4]
 8026ee4:	950e      	str	r5, [sp, #56]	@ 0x38
 8026ee6:	0e2d      	lsrs	r5, r5, #24
 8026ee8:	9515      	str	r5, [sp, #84]	@ 0x54
 8026eea:	b178      	cbz	r0, 8026f0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8026eec:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8026ef0:	3901      	subs	r1, #1
 8026ef2:	0089      	lsls	r1, r1, #2
 8026ef4:	3104      	adds	r1, #4
 8026ef6:	eb07 0e01 	add.w	lr, r7, r1
 8026efa:	5879      	ldr	r1, [r7, r1]
 8026efc:	9109      	str	r1, [sp, #36]	@ 0x24
 8026efe:	0e09      	lsrs	r1, r1, #24
 8026f00:	9112      	str	r1, [sp, #72]	@ 0x48
 8026f02:	f8de 1004 	ldr.w	r1, [lr, #4]
 8026f06:	910f      	str	r1, [sp, #60]	@ 0x3c
 8026f08:	0e09      	lsrs	r1, r1, #24
 8026f0a:	9116      	str	r1, [sp, #88]	@ 0x58
 8026f0c:	b292      	uxth	r2, r2
 8026f0e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8026f10:	b280      	uxth	r0, r0
 8026f12:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026f14:	fb02 f800 	mul.w	r8, r2, r0
 8026f18:	0112      	lsls	r2, r2, #4
 8026f1a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026f1e:	eba2 0e08 	sub.w	lr, r2, r8
 8026f22:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8026f26:	b280      	uxth	r0, r0
 8026f28:	fa1f fe8e 	uxth.w	lr, lr
 8026f2c:	1a12      	subs	r2, r2, r0
 8026f2e:	fb0e f101 	mul.w	r1, lr, r1
 8026f32:	b292      	uxth	r2, r2
 8026f34:	fb02 110c 	mla	r1, r2, ip, r1
 8026f38:	fb00 1105 	mla	r1, r0, r5, r1
 8026f3c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8026f3e:	fb08 1105 	mla	r1, r8, r5, r1
 8026f42:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026f46:	2900      	cmp	r1, #0
 8026f48:	f000 80f5 	beq.w	8027136 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8026f4c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8026f50:	d019      	beq.n	8026f86 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8026f52:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026f56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026f5a:	fb0c fa0a 	mul.w	sl, ip, sl
 8026f5e:	fb0c fc03 	mul.w	ip, ip, r3
 8026f62:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026f66:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026f6a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8026f6e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026f72:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026f76:	4453      	add	r3, sl
 8026f78:	0a3f      	lsrs	r7, r7, #8
 8026f7a:	0a1b      	lsrs	r3, r3, #8
 8026f7c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026f80:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026f84:	433b      	orrs	r3, r7
 8026f86:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8026f88:	2dff      	cmp	r5, #255	@ 0xff
 8026f8a:	d020      	beq.n	8026fce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8026f8c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8026f8e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026f92:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8026f94:	436f      	muls	r7, r5
 8026f96:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8026f98:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026f9c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026fa0:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8026fa2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026fa6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026faa:	fb05 fa0a 	mul.w	sl, r5, sl
 8026fae:	44bc      	add	ip, r7
 8026fb0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026fb4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026fb8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026fbc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026fc0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026fc4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026fc8:	ea4c 050a 	orr.w	r5, ip, sl
 8026fcc:	950e      	str	r5, [sp, #56]	@ 0x38
 8026fce:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026fd0:	2dff      	cmp	r5, #255	@ 0xff
 8026fd2:	d020      	beq.n	8027016 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8026fd4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8026fd6:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026fda:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026fdc:	436f      	muls	r7, r5
 8026fde:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8026fe0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026fe4:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026fe8:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026fea:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026fee:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026ff2:	fb05 fa0a 	mul.w	sl, r5, sl
 8026ff6:	44bc      	add	ip, r7
 8026ff8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026ffc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027000:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027004:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027008:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802700c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027010:	ea4c 050a 	orr.w	r5, ip, sl
 8027014:	9509      	str	r5, [sp, #36]	@ 0x24
 8027016:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8027018:	2dff      	cmp	r5, #255	@ 0xff
 802701a:	d020      	beq.n	802705e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 802701c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802701e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8027022:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8027024:	436f      	muls	r7, r5
 8027026:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027028:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802702c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8027030:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8027032:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027036:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802703a:	fb05 fa0a 	mul.w	sl, r5, sl
 802703e:	44bc      	add	ip, r7
 8027040:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027044:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027048:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802704c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027050:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027054:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027058:	ea4c 050a 	orr.w	r5, ip, sl
 802705c:	950f      	str	r5, [sp, #60]	@ 0x3c
 802705e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8027060:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8027064:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027068:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802706c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802706e:	fb0e f707 	mul.w	r7, lr, r7
 8027072:	fb02 770c 	mla	r7, r2, ip, r7
 8027076:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802707a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802707c:	fb00 770c 	mla	r7, r0, ip, r7
 8027080:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027084:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8027086:	fb08 770c 	mla	r7, r8, ip, r7
 802708a:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 802708e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027090:	fb0e fe0c 	mul.w	lr, lr, ip
 8027094:	0a3f      	lsrs	r7, r7, #8
 8027096:	fb02 e303 	mla	r3, r2, r3, lr
 802709a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802709c:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80270a0:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80270a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80270a6:	fb00 330a 	mla	r3, r0, sl, r3
 80270aa:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 80270ae:	f8b9 0000 	ldrh.w	r0, [r9]
 80270b2:	fb08 3c0c 	mla	ip, r8, ip, r3
 80270b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80270b8:	1202      	asrs	r2, r0, #8
 80270ba:	4359      	muls	r1, r3
 80270bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80270c0:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80270c4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80270c8:	1c4b      	adds	r3, r1, #1
 80270ca:	ea47 070c 	orr.w	r7, r7, ip
 80270ce:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80270d2:	0c3b      	lsrs	r3, r7, #16
 80270d4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80270d8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80270dc:	b2ff      	uxtb	r7, r7
 80270de:	fb13 f305 	smulbb	r3, r3, r5
 80270e2:	b2c9      	uxtb	r1, r1
 80270e4:	fb17 f705 	smulbb	r7, r7, r5
 80270e8:	fb02 3201 	mla	r2, r2, r1, r3
 80270ec:	10c3      	asrs	r3, r0, #3
 80270ee:	fb1c fc05 	smulbb	ip, ip, r5
 80270f2:	00c0      	lsls	r0, r0, #3
 80270f4:	b292      	uxth	r2, r2
 80270f6:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80270fa:	b2c0      	uxtb	r0, r0
 80270fc:	fb03 c301 	mla	r3, r3, r1, ip
 8027100:	fb00 7001 	mla	r0, r0, r1, r7
 8027104:	1c51      	adds	r1, r2, #1
 8027106:	b29b      	uxth	r3, r3
 8027108:	b280      	uxth	r0, r0
 802710a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802710e:	f100 0c01 	add.w	ip, r0, #1
 8027112:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8027116:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802711a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802711e:	ea4c 0202 	orr.w	r2, ip, r2
 8027122:	f103 0c01 	add.w	ip, r3, #1
 8027126:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802712a:	095b      	lsrs	r3, r3, #5
 802712c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027130:	431a      	orrs	r2, r3
 8027132:	f8a9 2000 	strh.w	r2, [r9]
 8027136:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8027138:	f109 0902 	add.w	r9, r9, #2
 802713c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027140:	441c      	add	r4, r3
 8027142:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027144:	441e      	add	r6, r3
 8027146:	e647      	b.n	8026dd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8027148:	2800      	cmp	r0, #0
 802714a:	f43f aedf 	beq.w	8026f0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802714e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8027152:	9109      	str	r1, [sp, #36]	@ 0x24
 8027154:	0e09      	lsrs	r1, r1, #24
 8027156:	9112      	str	r1, [sp, #72]	@ 0x48
 8027158:	e6d8      	b.n	8026f0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802715a:	b01d      	add	sp, #116	@ 0x74
 802715c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027160 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8027160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027164:	b085      	sub	sp, #20
 8027166:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 802716a:	9102      	str	r1, [sp, #8]
 802716c:	2c00      	cmp	r4, #0
 802716e:	fb04 7103 	mla	r1, r4, r3, r7
 8027172:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8027176:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 802717a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802717e:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8027182:	f2c0 810c 	blt.w	802739e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8027186:	45a6      	cmp	lr, r4
 8027188:	f340 8109 	ble.w	802739e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802718c:	2f00      	cmp	r7, #0
 802718e:	f2c0 8104 	blt.w	802739a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8027192:	42bb      	cmp	r3, r7
 8027194:	f340 8101 	ble.w	802739a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8027198:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802719c:	1c7a      	adds	r2, r7, #1
 802719e:	f100 8101 	bmi.w	80273a4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80271a2:	4293      	cmp	r3, r2
 80271a4:	f340 80fe 	ble.w	80273a4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80271a8:	2e00      	cmp	r6, #0
 80271aa:	f000 80fd 	beq.w	80273a8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 80271ae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80271b2:	3401      	adds	r4, #1
 80271b4:	f100 80fc 	bmi.w	80273b0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80271b8:	45a6      	cmp	lr, r4
 80271ba:	f340 80f9 	ble.w	80273b0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80271be:	2800      	cmp	r0, #0
 80271c0:	f000 80f9 	beq.w	80273b6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 80271c4:	2f00      	cmp	r7, #0
 80271c6:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 80271ca:	f2c0 80ef 	blt.w	80273ac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80271ce:	42bb      	cmp	r3, r7
 80271d0:	f340 80ec 	ble.w	80273ac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80271d4:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80271d8:	3701      	adds	r7, #1
 80271da:	f100 80ef 	bmi.w	80273bc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80271de:	42bb      	cmp	r3, r7
 80271e0:	f340 80ec 	ble.w	80273bc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80271e4:	2e00      	cmp	r6, #0
 80271e6:	f000 80eb 	beq.w	80273c0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 80271ea:	6852      	ldr	r2, [r2, #4]
 80271ec:	b2b6      	uxth	r6, r6
 80271ee:	b280      	uxth	r0, r0
 80271f0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80271f4:	fb00 fe06 	mul.w	lr, r0, r6
 80271f8:	0136      	lsls	r6, r6, #4
 80271fa:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80271fe:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8027202:	eba6 070e 	sub.w	r7, r6, lr
 8027206:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 802720a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802720e:	b280      	uxth	r0, r0
 8027210:	b2bf      	uxth	r7, r7
 8027212:	1a1b      	subs	r3, r3, r0
 8027214:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8027218:	fb07 f60a 	mul.w	r6, r7, sl
 802721c:	b29b      	uxth	r3, r3
 802721e:	fb0b 6603 	mla	r6, fp, r3, r6
 8027222:	fb00 6609 	mla	r6, r0, r9, r6
 8027226:	fb0e 6608 	mla	r6, lr, r8, r6
 802722a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802722e:	9600      	str	r6, [sp, #0]
 8027230:	2e00      	cmp	r6, #0
 8027232:	f000 80af 	beq.w	8027394 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8027236:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802723a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802723e:	9e02      	ldr	r6, [sp, #8]
 8027240:	fb0b fc0c 	mul.w	ip, fp, ip
 8027244:	fb0b f505 	mul.w	r5, fp, r5
 8027248:	8836      	ldrh	r6, [r6, #0]
 802724a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802724e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027252:	9501      	str	r5, [sp, #4]
 8027254:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8027258:	44dc      	add	ip, fp
 802725a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802725e:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8027262:	9503      	str	r5, [sp, #12]
 8027264:	9d01      	ldr	r5, [sp, #4]
 8027266:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 802726a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802726e:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8027272:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8027276:	fb0a fc0c 	mul.w	ip, sl, ip
 802727a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802727e:	fb0a fa01 	mul.w	sl, sl, r1
 8027282:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8027286:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802728a:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 802728e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8027292:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8027296:	4465      	add	r5, ip
 8027298:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802729c:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80272a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80272a4:	fb09 fc0c 	mul.w	ip, r9, ip
 80272a8:	0a2d      	lsrs	r5, r5, #8
 80272aa:	fb09 f904 	mul.w	r9, r9, r4
 80272ae:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80272b2:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80272b6:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80272ba:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80272be:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80272c2:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80272c6:	437d      	muls	r5, r7
 80272c8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80272cc:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 80272d0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80272d4:	4461      	add	r1, ip
 80272d6:	fb08 f404 	mul.w	r4, r8, r4
 80272da:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80272de:	fb08 f802 	mul.w	r8, r8, r2
 80272e2:	0a09      	lsrs	r1, r1, #8
 80272e4:	0a22      	lsrs	r2, r4, #8
 80272e6:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80272ea:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80272ee:	fb07 f70a 	mul.w	r7, r7, sl
 80272f2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80272f6:	4414      	add	r4, r2
 80272f8:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80272fc:	0a24      	lsrs	r4, r4, #8
 80272fe:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8027302:	9a03      	ldr	r2, [sp, #12]
 8027304:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8027308:	fb02 5503 	mla	r5, r2, r3, r5
 802730c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027310:	fb04 540e 	mla	r4, r4, lr, r5
 8027314:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8027318:	fb01 4100 	mla	r1, r1, r0, r4
 802731c:	0a09      	lsrs	r1, r1, #8
 802731e:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8027322:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8027326:	fb03 7101 	mla	r1, r3, r1, r7
 802732a:	9b00      	ldr	r3, [sp, #0]
 802732c:	fb0e 1e08 	mla	lr, lr, r8, r1
 8027330:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8027334:	43da      	mvns	r2, r3
 8027336:	1233      	asrs	r3, r6, #8
 8027338:	fb00 e101 	mla	r1, r0, r1, lr
 802733c:	10f0      	asrs	r0, r6, #3
 802733e:	b2d2      	uxtb	r2, r2
 8027340:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8027344:	0a09      	lsrs	r1, r1, #8
 8027346:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802734a:	00f6      	lsls	r6, r6, #3
 802734c:	4353      	muls	r3, r2
 802734e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8027352:	4350      	muls	r0, r2
 8027354:	b2f6      	uxtb	r6, r6
 8027356:	4321      	orrs	r1, r4
 8027358:	4356      	muls	r6, r2
 802735a:	1c5a      	adds	r2, r3, #1
 802735c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027360:	0c0b      	lsrs	r3, r1, #16
 8027362:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027366:	1c42      	adds	r2, r0, #1
 8027368:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802736c:	0a0a      	lsrs	r2, r1, #8
 802736e:	021b      	lsls	r3, r3, #8
 8027370:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8027374:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8027378:	00d2      	lsls	r2, r2, #3
 802737a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802737e:	4313      	orrs	r3, r2
 8027380:	1c72      	adds	r2, r6, #1
 8027382:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8027386:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 802738a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802738e:	4319      	orrs	r1, r3
 8027390:	9b02      	ldr	r3, [sp, #8]
 8027392:	8019      	strh	r1, [r3, #0]
 8027394:	b005      	add	sp, #20
 8027396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802739a:	2500      	movs	r5, #0
 802739c:	e6fe      	b.n	802719c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 802739e:	2100      	movs	r1, #0
 80273a0:	460d      	mov	r5, r1
 80273a2:	e706      	b.n	80271b2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80273a4:	2100      	movs	r1, #0
 80273a6:	e704      	b.n	80271b2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80273a8:	4631      	mov	r1, r6
 80273aa:	e702      	b.n	80271b2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80273ac:	2400      	movs	r4, #0
 80273ae:	e713      	b.n	80271d8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 80273b0:	2200      	movs	r2, #0
 80273b2:	4614      	mov	r4, r2
 80273b4:	e71a      	b.n	80271ec <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80273b6:	4602      	mov	r2, r0
 80273b8:	4604      	mov	r4, r0
 80273ba:	e717      	b.n	80271ec <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80273bc:	2200      	movs	r2, #0
 80273be:	e715      	b.n	80271ec <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80273c0:	4632      	mov	r2, r6
 80273c2:	e713      	b.n	80271ec <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

080273c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80273c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80273c8:	b09b      	sub	sp, #108	@ 0x6c
 80273ca:	9218      	str	r2, [sp, #96]	@ 0x60
 80273cc:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80273ce:	9019      	str	r0, [sp, #100]	@ 0x64
 80273d0:	9116      	str	r1, [sp, #88]	@ 0x58
 80273d2:	6850      	ldr	r0, [r2, #4]
 80273d4:	9307      	str	r3, [sp, #28]
 80273d6:	6812      	ldr	r2, [r2, #0]
 80273d8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80273dc:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 80273e0:	fb00 1303 	mla	r3, r0, r3, r1
 80273e4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80273e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80273ea:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80273ec:	681b      	ldr	r3, [r3, #0]
 80273ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80273f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80273f2:	2b00      	cmp	r3, #0
 80273f4:	dc03      	bgt.n	80273fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80273f6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80273f8:	2b00      	cmp	r3, #0
 80273fa:	f340 8387 	ble.w	8027b0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80273fe:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027400:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027404:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027408:	1e48      	subs	r0, r1, #1
 802740a:	1e57      	subs	r7, r2, #1
 802740c:	9b07      	ldr	r3, [sp, #28]
 802740e:	2b00      	cmp	r3, #0
 8027410:	f340 8166 	ble.w	80276e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8027414:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027418:	ea4f 4326 	mov.w	r3, r6, asr #16
 802741c:	d406      	bmi.n	802742c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802741e:	4584      	cmp	ip, r0
 8027420:	da04      	bge.n	802742c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8027422:	2b00      	cmp	r3, #0
 8027424:	db02      	blt.n	802742c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8027426:	42bb      	cmp	r3, r7
 8027428:	f2c0 815b 	blt.w	80276e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802742c:	f11c 0c01 	adds.w	ip, ip, #1
 8027430:	f100 814b 	bmi.w	80276ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8027434:	4561      	cmp	r1, ip
 8027436:	f2c0 8148 	blt.w	80276ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802743a:	3301      	adds	r3, #1
 802743c:	f100 8145 	bmi.w	80276ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8027440:	429a      	cmp	r2, r3
 8027442:	f2c0 8142 	blt.w	80276ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8027446:	9b07      	ldr	r3, [sp, #28]
 8027448:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802744a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802744c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802744e:	2b00      	cmp	r3, #0
 8027450:	f340 8165 	ble.w	802771e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8027454:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8027456:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802745a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802745c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027460:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027464:	1422      	asrs	r2, r4, #16
 8027466:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802746a:	689b      	ldr	r3, [r3, #8]
 802746c:	f100 81d5 	bmi.w	802781a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8027470:	f103 38ff 	add.w	r8, r3, #4294967295
 8027474:	4542      	cmp	r2, r8
 8027476:	f280 81d0 	bge.w	802781a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802747a:	f1bc 0f00 	cmp.w	ip, #0
 802747e:	f2c0 81cc 	blt.w	802781a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8027482:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027486:	45c4      	cmp	ip, r8
 8027488:	f280 81c7 	bge.w	802781a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802748c:	b21b      	sxth	r3, r3
 802748e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027490:	fb0c 2203 	mla	r2, ip, r3, r2
 8027494:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027498:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802749c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80274a0:	2900      	cmp	r1, #0
 80274a2:	f000 8182 	beq.w	80277aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80274a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80274aa:	950b      	str	r5, [sp, #44]	@ 0x2c
 80274ac:	0e2d      	lsrs	r5, r5, #24
 80274ae:	9512      	str	r5, [sp, #72]	@ 0x48
 80274b0:	b180      	cbz	r0, 80274d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80274b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80274b6:	3b01      	subs	r3, #1
 80274b8:	009b      	lsls	r3, r3, #2
 80274ba:	3304      	adds	r3, #4
 80274bc:	eb08 0c03 	add.w	ip, r8, r3
 80274c0:	f858 3003 	ldr.w	r3, [r8, r3]
 80274c4:	9308      	str	r3, [sp, #32]
 80274c6:	0e1b      	lsrs	r3, r3, #24
 80274c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80274ca:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80274ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80274d0:	0e1b      	lsrs	r3, r3, #24
 80274d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80274d4:	b289      	uxth	r1, r1
 80274d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80274d8:	b280      	uxth	r0, r0
 80274da:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80274dc:	fb01 f900 	mul.w	r9, r1, r0
 80274e0:	0109      	lsls	r1, r1, #4
 80274e2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80274e6:	eba1 0809 	sub.w	r8, r1, r9
 80274ea:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80274ee:	b280      	uxth	r0, r0
 80274f0:	fa1f f888 	uxth.w	r8, r8
 80274f4:	1a09      	subs	r1, r1, r0
 80274f6:	fb08 f303 	mul.w	r3, r8, r3
 80274fa:	b289      	uxth	r1, r1
 80274fc:	fb01 330e 	mla	r3, r1, lr, r3
 8027500:	fb00 3305 	mla	r3, r0, r5, r3
 8027504:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027506:	fb09 3305 	mla	r3, r9, r5, r3
 802750a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802750e:	2b00      	cmp	r3, #0
 8027510:	f000 80d2 	beq.w	80276b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027514:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8027518:	d01b      	beq.n	8027552 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802751a:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802751e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027522:	fb0e fa0a 	mul.w	sl, lr, sl
 8027526:	fb0e fe02 	mul.w	lr, lr, r2
 802752a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802752e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8027532:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8027536:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802753a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802753e:	4452      	add	r2, sl
 8027540:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027544:	0a12      	lsrs	r2, r2, #8
 8027546:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802754a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802754e:	ea42 020c 	orr.w	r2, r2, ip
 8027552:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027554:	2dff      	cmp	r5, #255	@ 0xff
 8027556:	d021      	beq.n	802759c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8027558:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802755a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802755e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027560:	fb05 fb0b 	mul.w	fp, r5, fp
 8027564:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027566:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802756a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802756c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027570:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027574:	fb05 fa0a 	mul.w	sl, r5, sl
 8027578:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802757c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027580:	44de      	add	lr, fp
 8027582:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027586:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802758a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802758e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027592:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027596:	ea4e 050a 	orr.w	r5, lr, sl
 802759a:	950b      	str	r5, [sp, #44]	@ 0x2c
 802759c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802759e:	2dff      	cmp	r5, #255	@ 0xff
 80275a0:	d021      	beq.n	80275e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80275a2:	9d08      	ldr	r5, [sp, #32]
 80275a4:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80275a8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80275aa:	fb05 fb0b 	mul.w	fp, r5, fp
 80275ae:	9d08      	ldr	r5, [sp, #32]
 80275b0:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80275b4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80275b6:	fb05 fa0e 	mul.w	sl, r5, lr
 80275ba:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80275be:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80275c2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80275c6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80275ca:	44de      	add	lr, fp
 80275cc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80275d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80275d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80275d8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80275dc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80275e0:	ea4e 050a 	orr.w	r5, lr, sl
 80275e4:	9508      	str	r5, [sp, #32]
 80275e6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80275e8:	2dff      	cmp	r5, #255	@ 0xff
 80275ea:	d021      	beq.n	8027630 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80275ec:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80275ee:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80275f2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80275f4:	fb05 fb0b 	mul.w	fp, r5, fp
 80275f8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80275fa:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80275fe:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027600:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027604:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027608:	fb05 fa0a 	mul.w	sl, r5, sl
 802760c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027610:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027614:	44de      	add	lr, fp
 8027616:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802761a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802761e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027622:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027626:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802762a:	ea4e 050a 	orr.w	r5, lr, sl
 802762e:	950c      	str	r5, [sp, #48]	@ 0x30
 8027630:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027632:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8027636:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802763a:	2bff      	cmp	r3, #255	@ 0xff
 802763c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027640:	9d08      	ldr	r5, [sp, #32]
 8027642:	fb08 fc0c 	mul.w	ip, r8, ip
 8027646:	fb01 cc0e 	mla	ip, r1, lr, ip
 802764a:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802764e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8027650:	fb00 cc0e 	mla	ip, r0, lr, ip
 8027654:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8027658:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802765a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802765e:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8027662:	fb08 f80e 	mul.w	r8, r8, lr
 8027666:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802766a:	fb01 8202 	mla	r2, r1, r2, r8
 802766e:	9908      	ldr	r1, [sp, #32]
 8027670:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027674:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8027678:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802767a:	fb00 220a 	mla	r2, r0, sl, r2
 802767e:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8027682:	fb09 2900 	mla	r9, r9, r0, r2
 8027686:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802768a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802768e:	ea4c 0c09 	orr.w	ip, ip, r9
 8027692:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8027696:	f040 8091 	bne.w	80277bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802769a:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802769e:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 80276a2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80276a6:	f022 0207 	bic.w	r2, r2, #7
 80276aa:	431a      	orrs	r2, r3
 80276ac:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80276b0:	ea4c 0c02 	orr.w	ip, ip, r2
 80276b4:	f8a7 c000 	strh.w	ip, [r7]
 80276b8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80276ba:	3702      	adds	r7, #2
 80276bc:	441c      	add	r4, r3
 80276be:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80276c0:	441e      	add	r6, r3
 80276c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80276c4:	3b01      	subs	r3, #1
 80276c6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80276c8:	e6c0      	b.n	802744c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80276ca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80276cc:	441c      	add	r4, r3
 80276ce:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80276d0:	441e      	add	r6, r3
 80276d2:	9b07      	ldr	r3, [sp, #28]
 80276d4:	3b01      	subs	r3, #1
 80276d6:	9307      	str	r3, [sp, #28]
 80276d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80276da:	3302      	adds	r3, #2
 80276dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80276de:	e695      	b.n	802740c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80276e0:	d024      	beq.n	802772c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80276e2:	9b07      	ldr	r3, [sp, #28]
 80276e4:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80276e6:	3b01      	subs	r3, #1
 80276e8:	fb00 4003 	mla	r0, r0, r3, r4
 80276ec:	1400      	asrs	r0, r0, #16
 80276ee:	f53f aeaa 	bmi.w	8027446 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80276f2:	3901      	subs	r1, #1
 80276f4:	4288      	cmp	r0, r1
 80276f6:	f6bf aea6 	bge.w	8027446 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80276fa:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80276fc:	fb01 6303 	mla	r3, r1, r3, r6
 8027700:	141b      	asrs	r3, r3, #16
 8027702:	f53f aea0 	bmi.w	8027446 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027706:	3a01      	subs	r2, #1
 8027708:	4293      	cmp	r3, r2
 802770a:	f6bf ae9c 	bge.w	8027446 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802770e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027712:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8027716:	f1bb 0f00 	cmp.w	fp, #0
 802771a:	f300 809a 	bgt.w	8027852 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802771e:	9b07      	ldr	r3, [sp, #28]
 8027720:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027726:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802772a:	930a      	str	r3, [sp, #40]	@ 0x28
 802772c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802772e:	2b00      	cmp	r3, #0
 8027730:	f340 81ec 	ble.w	8027b0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8027734:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027738:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802773a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802773e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027742:	eef0 6a62 	vmov.f32	s13, s5
 8027746:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802774a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802774e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027752:	ee16 4a90 	vmov	r4, s13
 8027756:	eef0 6a43 	vmov.f32	s13, s6
 802775a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802775e:	ee16 6a90 	vmov	r6, s13
 8027762:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027766:	ee61 7a27 	vmul.f32	s15, s2, s15
 802776a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802776e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027772:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027776:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802777a:	ee12 2a90 	vmov	r2, s5
 802777e:	eef0 2a47 	vmov.f32	s5, s14
 8027782:	fb92 f3f3 	sdiv	r3, r2, r3
 8027786:	ee13 2a10 	vmov	r2, s6
 802778a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802778c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802778e:	eeb0 3a67 	vmov.f32	s6, s15
 8027792:	fb92 f3f3 	sdiv	r3, r2, r3
 8027796:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027798:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802779a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802779c:	3b01      	subs	r3, #1
 802779e:	9316      	str	r3, [sp, #88]	@ 0x58
 80277a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80277a2:	bf08      	it	eq
 80277a4:	4613      	moveq	r3, r2
 80277a6:	9307      	str	r3, [sp, #28]
 80277a8:	e622      	b.n	80273f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80277aa:	2800      	cmp	r0, #0
 80277ac:	f43f ae92 	beq.w	80274d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80277b0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80277b4:	9308      	str	r3, [sp, #32]
 80277b6:	0e1b      	lsrs	r3, r3, #24
 80277b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80277ba:	e68b      	b.n	80274d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80277bc:	8839      	ldrh	r1, [r7, #0]
 80277be:	43db      	mvns	r3, r3
 80277c0:	4dd4      	ldr	r5, [pc, #848]	@ (8027b14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80277c2:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80277c6:	fa5f f883 	uxtb.w	r8, r3
 80277ca:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80277ce:	10c8      	asrs	r0, r1, #3
 80277d0:	00cb      	lsls	r3, r1, #3
 80277d2:	fb0e fe08 	mul.w	lr, lr, r8
 80277d6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80277da:	b2db      	uxtb	r3, r3
 80277dc:	f10e 0101 	add.w	r1, lr, #1
 80277e0:	fb00 f008 	mul.w	r0, r0, r8
 80277e4:	fb03 f308 	mul.w	r3, r3, r8
 80277e8:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80277ec:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80277f0:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80277f4:	f100 0e01 	add.w	lr, r0, #1
 80277f8:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80277fc:	b2c9      	uxtb	r1, r1
 80277fe:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8027802:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8027806:	00d2      	lsls	r2, r2, #3
 8027808:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802780c:	430a      	orrs	r2, r1
 802780e:	1c59      	adds	r1, r3, #1
 8027810:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027814:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8027818:	e748      	b.n	80276ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802781a:	f112 0801 	adds.w	r8, r2, #1
 802781e:	f53f af4b 	bmi.w	80276b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027822:	4543      	cmp	r3, r8
 8027824:	f6ff af48 	blt.w	80276b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027828:	f11c 0801 	adds.w	r8, ip, #1
 802782c:	f53f af44 	bmi.w	80276b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027830:	45c6      	cmp	lr, r8
 8027832:	f6ff af41 	blt.w	80276b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027836:	b21b      	sxth	r3, r3
 8027838:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802783c:	fa0f f28e 	sxth.w	r2, lr
 8027840:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027844:	9200      	str	r2, [sp, #0]
 8027846:	4639      	mov	r1, r7
 8027848:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802784a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802784c:	f7ff fc88 	bl	8027160 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8027850:	e732      	b.n	80276b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027852:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027854:	1421      	asrs	r1, r4, #16
 8027856:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027858:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802785c:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8027860:	1433      	asrs	r3, r6, #16
 8027862:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027866:	fb07 1303 	mla	r3, r7, r3, r1
 802786a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802786c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8027870:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027874:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027878:	2a00      	cmp	r2, #0
 802787a:	f000 8108 	beq.w	8027a8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802787e:	684d      	ldr	r5, [r1, #4]
 8027880:	950d      	str	r5, [sp, #52]	@ 0x34
 8027882:	0e2d      	lsrs	r5, r5, #24
 8027884:	9514      	str	r5, [sp, #80]	@ 0x50
 8027886:	b178      	cbz	r0, 80278a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8027888:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 802788c:	3f01      	subs	r7, #1
 802788e:	00bf      	lsls	r7, r7, #2
 8027890:	3704      	adds	r7, #4
 8027892:	eb01 0e07 	add.w	lr, r1, r7
 8027896:	59c9      	ldr	r1, [r1, r7]
 8027898:	9109      	str	r1, [sp, #36]	@ 0x24
 802789a:	0e09      	lsrs	r1, r1, #24
 802789c:	9111      	str	r1, [sp, #68]	@ 0x44
 802789e:	f8de 1004 	ldr.w	r1, [lr, #4]
 80278a2:	910e      	str	r1, [sp, #56]	@ 0x38
 80278a4:	0e09      	lsrs	r1, r1, #24
 80278a6:	9115      	str	r1, [sp, #84]	@ 0x54
 80278a8:	b292      	uxth	r2, r2
 80278aa:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80278ac:	b280      	uxth	r0, r0
 80278ae:	fb02 f900 	mul.w	r9, r2, r0
 80278b2:	0112      	lsls	r2, r2, #4
 80278b4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80278b8:	eba2 0e09 	sub.w	lr, r2, r9
 80278bc:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80278c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80278c2:	b280      	uxth	r0, r0
 80278c4:	fa1f fe8e 	uxth.w	lr, lr
 80278c8:	1a09      	subs	r1, r1, r0
 80278ca:	fb0e f202 	mul.w	r2, lr, r2
 80278ce:	b289      	uxth	r1, r1
 80278d0:	fb01 220c 	mla	r2, r1, ip, r2
 80278d4:	fb00 2205 	mla	r2, r0, r5, r2
 80278d8:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80278da:	fb09 2205 	mla	r2, r9, r5, r2
 80278de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80278e2:	2a00      	cmp	r2, #0
 80278e4:	f000 80ca 	beq.w	8027a7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80278e8:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80278ec:	d019      	beq.n	8027922 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 80278ee:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80278f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80278f6:	fb0c fa0a 	mul.w	sl, ip, sl
 80278fa:	fb0c fc03 	mul.w	ip, ip, r3
 80278fe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027902:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8027906:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802790a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802790e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027912:	4453      	add	r3, sl
 8027914:	0a3f      	lsrs	r7, r7, #8
 8027916:	0a1b      	lsrs	r3, r3, #8
 8027918:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802791c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027920:	433b      	orrs	r3, r7
 8027922:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027924:	2dff      	cmp	r5, #255	@ 0xff
 8027926:	d020      	beq.n	802796a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8027928:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802792a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802792e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027930:	436f      	muls	r7, r5
 8027932:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8027934:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027938:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802793c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802793e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027942:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027946:	fb05 fa0a 	mul.w	sl, r5, sl
 802794a:	44bc      	add	ip, r7
 802794c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027950:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027954:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027958:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802795c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027960:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027964:	ea4c 050a 	orr.w	r5, ip, sl
 8027968:	950d      	str	r5, [sp, #52]	@ 0x34
 802796a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802796c:	2dff      	cmp	r5, #255	@ 0xff
 802796e:	d020      	beq.n	80279b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8027970:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8027972:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8027976:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8027978:	436f      	muls	r7, r5
 802797a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802797c:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8027980:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8027982:	fb05 fa0c 	mul.w	sl, r5, ip
 8027986:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802798a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802798e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027992:	44bc      	add	ip, r7
 8027994:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027998:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802799c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80279a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80279a4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80279a8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80279ac:	ea4c 050a 	orr.w	r5, ip, sl
 80279b0:	9509      	str	r5, [sp, #36]	@ 0x24
 80279b2:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80279b4:	2dff      	cmp	r5, #255	@ 0xff
 80279b6:	d020      	beq.n	80279fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80279b8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80279ba:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80279be:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80279c0:	436f      	muls	r7, r5
 80279c2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80279c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80279c8:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80279cc:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80279ce:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80279d2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80279d6:	fb05 fa0a 	mul.w	sl, r5, sl
 80279da:	44bc      	add	ip, r7
 80279dc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80279e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80279e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80279e8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80279ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80279f0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80279f4:	ea4c 050a 	orr.w	r5, ip, sl
 80279f8:	950e      	str	r5, [sp, #56]	@ 0x38
 80279fa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80279fc:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8027a00:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027a04:	2aff      	cmp	r2, #255	@ 0xff
 8027a06:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8027a0a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8027a0c:	fb0e f707 	mul.w	r7, lr, r7
 8027a10:	fb01 770c 	mla	r7, r1, ip, r7
 8027a14:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027a18:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8027a1a:	fb00 770c 	mla	r7, r0, ip, r7
 8027a1e:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027a22:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8027a24:	fb09 770c 	mla	r7, r9, ip, r7
 8027a28:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8027a2c:	fb0e fe0c 	mul.w	lr, lr, ip
 8027a30:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8027a34:	fb01 e303 	mla	r3, r1, r3, lr
 8027a38:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8027a3a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8027a3e:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8027a42:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8027a44:	fb00 330a 	mla	r3, r0, sl, r3
 8027a48:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8027a4c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8027a50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027a54:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027a58:	ea47 070c 	orr.w	r7, r7, ip
 8027a5c:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8027a60:	d11e      	bne.n	8027aa0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8027a62:	097a      	lsrs	r2, r7, #5
 8027a64:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8027a68:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8027a6c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027a70:	f023 0307 	bic.w	r3, r3, #7
 8027a74:	4313      	orrs	r3, r2
 8027a76:	431f      	orrs	r7, r3
 8027a78:	f8a8 7000 	strh.w	r7, [r8]
 8027a7c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027a7e:	f108 0802 	add.w	r8, r8, #2
 8027a82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027a86:	441c      	add	r4, r3
 8027a88:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027a8a:	441e      	add	r6, r3
 8027a8c:	e643      	b.n	8027716 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8027a8e:	2800      	cmp	r0, #0
 8027a90:	f43f af0a 	beq.w	80278a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8027a94:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8027a98:	9109      	str	r1, [sp, #36]	@ 0x24
 8027a9a:	0e09      	lsrs	r1, r1, #24
 8027a9c:	9111      	str	r1, [sp, #68]	@ 0x44
 8027a9e:	e703      	b.n	80278a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8027aa0:	f8b8 1000 	ldrh.w	r1, [r8]
 8027aa4:	43d2      	mvns	r2, r2
 8027aa6:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8027aaa:	fa5f fe82 	uxtb.w	lr, r2
 8027aae:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8027ab2:	10c8      	asrs	r0, r1, #3
 8027ab4:	00ca      	lsls	r2, r1, #3
 8027ab6:	fb0c fc0e 	mul.w	ip, ip, lr
 8027aba:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8027abe:	b2d2      	uxtb	r2, r2
 8027ac0:	f10c 0101 	add.w	r1, ip, #1
 8027ac4:	fb00 f00e 	mul.w	r0, r0, lr
 8027ac8:	fb02 f20e 	mul.w	r2, r2, lr
 8027acc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027ad0:	0c39      	lsrs	r1, r7, #16
 8027ad2:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027ad6:	490f      	ldr	r1, [pc, #60]	@ (8027b14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8027ad8:	fa5f fc8c 	uxtb.w	ip, ip
 8027adc:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8027ae0:	1c41      	adds	r1, r0, #1
 8027ae2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027ae6:	1c51      	adds	r1, r2, #1
 8027ae8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027aec:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027af0:	00c0      	lsls	r0, r0, #3
 8027af2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027af6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027afa:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8027afe:	ea4c 0c00 	orr.w	ip, ip, r0
 8027b02:	ea47 0c0c 	orr.w	ip, r7, ip
 8027b06:	f8a8 c000 	strh.w	ip, [r8]
 8027b0a:	e7b7      	b.n	8027a7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8027b0c:	b01b      	add	sp, #108	@ 0x6c
 8027b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b12:	bf00      	nop
 8027b14:	fffff800 	.word	0xfffff800

08027b18 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8027b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027b1c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8027b20:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8027b24:	2d00      	cmp	r5, #0
 8027b26:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8027b2a:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8027b2e:	fb05 0e03 	mla	lr, r5, r3, r0
 8027b32:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8027b36:	f2c0 808c 	blt.w	8027c52 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8027b3a:	45a9      	cmp	r9, r5
 8027b3c:	f340 8089 	ble.w	8027c52 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8027b40:	2800      	cmp	r0, #0
 8027b42:	f2c0 8084 	blt.w	8027c4e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8027b46:	4580      	cmp	r8, r0
 8027b48:	f340 8081 	ble.w	8027c4e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8027b4c:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8027b50:	f01e 0f01 	tst.w	lr, #1
 8027b54:	5d16      	ldrb	r6, [r2, r4]
 8027b56:	bf0c      	ite	eq
 8027b58:	f006 060f 	andeq.w	r6, r6, #15
 8027b5c:	1136      	asrne	r6, r6, #4
 8027b5e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027b62:	b2f6      	uxtb	r6, r6
 8027b64:	1c44      	adds	r4, r0, #1
 8027b66:	d477      	bmi.n	8027c58 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8027b68:	45a0      	cmp	r8, r4
 8027b6a:	dd75      	ble.n	8027c58 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8027b6c:	2f00      	cmp	r7, #0
 8027b6e:	d075      	beq.n	8027c5c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8027b70:	f10e 0a01 	add.w	sl, lr, #1
 8027b74:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8027b78:	f01a 0f01 	tst.w	sl, #1
 8027b7c:	5d14      	ldrb	r4, [r2, r4]
 8027b7e:	bf0c      	ite	eq
 8027b80:	f004 040f 	andeq.w	r4, r4, #15
 8027b84:	1124      	asrne	r4, r4, #4
 8027b86:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027b8a:	b2e4      	uxtb	r4, r4
 8027b8c:	3501      	adds	r5, #1
 8027b8e:	d469      	bmi.n	8027c64 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8027b90:	45a9      	cmp	r9, r5
 8027b92:	dd67      	ble.n	8027c64 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8027b94:	f1bc 0f00 	cmp.w	ip, #0
 8027b98:	d067      	beq.n	8027c6a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8027b9a:	2800      	cmp	r0, #0
 8027b9c:	db60      	blt.n	8027c60 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8027b9e:	4580      	cmp	r8, r0
 8027ba0:	dd5e      	ble.n	8027c60 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8027ba2:	eb03 090e 	add.w	r9, r3, lr
 8027ba6:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8027baa:	f019 0f01 	tst.w	r9, #1
 8027bae:	5d55      	ldrb	r5, [r2, r5]
 8027bb0:	bf0c      	ite	eq
 8027bb2:	f005 050f 	andeq.w	r5, r5, #15
 8027bb6:	112d      	asrne	r5, r5, #4
 8027bb8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8027bbc:	b2ed      	uxtb	r5, r5
 8027bbe:	3001      	adds	r0, #1
 8027bc0:	d456      	bmi.n	8027c70 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8027bc2:	4580      	cmp	r8, r0
 8027bc4:	dd54      	ble.n	8027c70 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8027bc6:	2f00      	cmp	r7, #0
 8027bc8:	d054      	beq.n	8027c74 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8027bca:	3301      	adds	r3, #1
 8027bcc:	449e      	add	lr, r3
 8027bce:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027bd2:	f01e 0f01 	tst.w	lr, #1
 8027bd6:	5cd0      	ldrb	r0, [r2, r3]
 8027bd8:	bf0c      	ite	eq
 8027bda:	f000 000f 	andeq.w	r0, r0, #15
 8027bde:	1100      	asrne	r0, r0, #4
 8027be0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027be4:	b2c3      	uxtb	r3, r0
 8027be6:	b2ba      	uxth	r2, r7
 8027be8:	fa1f fc8c 	uxth.w	ip, ip
 8027bec:	fb02 f00c 	mul.w	r0, r2, ip
 8027bf0:	0112      	lsls	r2, r2, #4
 8027bf2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8027bf6:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8027bfa:	1a12      	subs	r2, r2, r0
 8027bfc:	fa1f fc8c 	uxth.w	ip, ip
 8027c00:	b292      	uxth	r2, r2
 8027c02:	eba7 070c 	sub.w	r7, r7, ip
 8027c06:	4362      	muls	r2, r4
 8027c08:	b2bf      	uxth	r7, r7
 8027c0a:	fb06 2207 	mla	r2, r6, r7, r2
 8027c0e:	fb0c 2505 	mla	r5, ip, r5, r2
 8027c12:	fb00 5303 	mla	r3, r0, r3, r5
 8027c16:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c1a:	b1b3      	cbz	r3, 8027c4a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8027c1c:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 8027c20:	435a      	muls	r2, r3
 8027c22:	1c53      	adds	r3, r2, #1
 8027c24:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027c28:	4a2d      	ldr	r2, [pc, #180]	@ (8027ce0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8027c2a:	121b      	asrs	r3, r3, #8
 8027c2c:	6812      	ldr	r2, [r2, #0]
 8027c2e:	2bff      	cmp	r3, #255	@ 0xff
 8027c30:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8027c34:	d120      	bne.n	8027c78 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8027c36:	0950      	lsrs	r0, r2, #5
 8027c38:	4b2a      	ldr	r3, [pc, #168]	@ (8027ce4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8027c3a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027c3e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027c42:	4033      	ands	r3, r6
 8027c44:	4318      	orrs	r0, r3
 8027c46:	4302      	orrs	r2, r0
 8027c48:	800a      	strh	r2, [r1, #0]
 8027c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027c4e:	2600      	movs	r6, #0
 8027c50:	e788      	b.n	8027b64 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8027c52:	2400      	movs	r4, #0
 8027c54:	4626      	mov	r6, r4
 8027c56:	e799      	b.n	8027b8c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8027c58:	2400      	movs	r4, #0
 8027c5a:	e797      	b.n	8027b8c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8027c5c:	463c      	mov	r4, r7
 8027c5e:	e795      	b.n	8027b8c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8027c60:	2500      	movs	r5, #0
 8027c62:	e7ac      	b.n	8027bbe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8027c64:	2300      	movs	r3, #0
 8027c66:	461d      	mov	r5, r3
 8027c68:	e7bd      	b.n	8027be6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027c6a:	4663      	mov	r3, ip
 8027c6c:	4665      	mov	r5, ip
 8027c6e:	e7ba      	b.n	8027be6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027c70:	2300      	movs	r3, #0
 8027c72:	e7b8      	b.n	8027be6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027c74:	463b      	mov	r3, r7
 8027c76:	e7b6      	b.n	8027be6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027c78:	880d      	ldrh	r5, [r1, #0]
 8027c7a:	b29f      	uxth	r7, r3
 8027c7c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8027c80:	43db      	mvns	r3, r3
 8027c82:	122c      	asrs	r4, r5, #8
 8027c84:	fb10 f007 	smulbb	r0, r0, r7
 8027c88:	b2db      	uxtb	r3, r3
 8027c8a:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8027c8e:	b2f6      	uxtb	r6, r6
 8027c90:	b2d2      	uxtb	r2, r2
 8027c92:	fb04 0403 	mla	r4, r4, r3, r0
 8027c96:	10e8      	asrs	r0, r5, #3
 8027c98:	fb12 f207 	smulbb	r2, r2, r7
 8027c9c:	00ed      	lsls	r5, r5, #3
 8027c9e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8027ca2:	b2a4      	uxth	r4, r4
 8027ca4:	fb16 f607 	smulbb	r6, r6, r7
 8027ca8:	b2ed      	uxtb	r5, r5
 8027caa:	fb00 6603 	mla	r6, r0, r3, r6
 8027cae:	fb05 2303 	mla	r3, r5, r3, r2
 8027cb2:	b2b0      	uxth	r0, r6
 8027cb4:	b29a      	uxth	r2, r3
 8027cb6:	1c63      	adds	r3, r4, #1
 8027cb8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8027cbc:	1c53      	adds	r3, r2, #1
 8027cbe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027cc2:	1c42      	adds	r2, r0, #1
 8027cc4:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8027cc8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027ccc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027cd0:	0940      	lsrs	r0, r0, #5
 8027cd2:	4323      	orrs	r3, r4
 8027cd4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027cd8:	4303      	orrs	r3, r0
 8027cda:	800b      	strh	r3, [r1, #0]
 8027cdc:	e7b5      	b.n	8027c4a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8027cde:	bf00      	nop
 8027ce0:	200279e8 	.word	0x200279e8
 8027ce4:	00fff800 	.word	0x00fff800

08027ce8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027cec:	b097      	sub	sp, #92	@ 0x5c
 8027cee:	9214      	str	r2, [sp, #80]	@ 0x50
 8027cf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8027cf2:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8027cf4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8027cf8:	9015      	str	r0, [sp, #84]	@ 0x54
 8027cfa:	910d      	str	r1, [sp, #52]	@ 0x34
 8027cfc:	6850      	ldr	r0, [r2, #4]
 8027cfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027d00:	6812      	ldr	r2, [r2, #0]
 8027d02:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8027d06:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 8027d0a:	fb00 1303 	mla	r3, r0, r3, r1
 8027d0e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8027d12:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027d14:	689b      	ldr	r3, [r3, #8]
 8027d16:	3301      	adds	r3, #1
 8027d18:	f023 0301 	bic.w	r3, r3, #1
 8027d1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8027d1e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027d20:	681f      	ldr	r7, [r3, #0]
 8027d22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027d24:	2b00      	cmp	r3, #0
 8027d26:	dc03      	bgt.n	8027d30 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027d28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027d2a:	2b00      	cmp	r3, #0
 8027d2c:	f340 8289 	ble.w	8028242 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8027d30:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027d32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027d36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027d3a:	1e48      	subs	r0, r1, #1
 8027d3c:	f102 3cff 	add.w	ip, r2, #4294967295
 8027d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027d42:	2b00      	cmp	r3, #0
 8027d44:	f340 80c5 	ble.w	8027ed2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027d48:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027d4c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027d50:	d406      	bmi.n	8027d60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027d52:	4586      	cmp	lr, r0
 8027d54:	da04      	bge.n	8027d60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027d56:	2b00      	cmp	r3, #0
 8027d58:	db02      	blt.n	8027d60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027d5a:	4563      	cmp	r3, ip
 8027d5c:	f2c0 80ba 	blt.w	8027ed4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8027d60:	f11e 0e01 	adds.w	lr, lr, #1
 8027d64:	f100 80ab 	bmi.w	8027ebe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027d68:	4571      	cmp	r1, lr
 8027d6a:	f2c0 80a8 	blt.w	8027ebe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027d6e:	3301      	adds	r3, #1
 8027d70:	f100 80a5 	bmi.w	8027ebe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027d74:	429a      	cmp	r2, r3
 8027d76:	f2c0 80a2 	blt.w	8027ebe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027d7c:	46c8      	mov	r8, r9
 8027d7e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 8027d82:	930e      	str	r3, [sp, #56]	@ 0x38
 8027d84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027d86:	2b00      	cmp	r3, #0
 8027d88:	f340 80c4 	ble.w	8027f14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8027d8c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027d8e:	1430      	asrs	r0, r6, #16
 8027d90:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027d94:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027d98:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8027d9c:	1423      	asrs	r3, r4, #16
 8027d9e:	f100 814f 	bmi.w	8028040 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8027da2:	f10c 3bff 	add.w	fp, ip, #4294967295
 8027da6:	455b      	cmp	r3, fp
 8027da8:	f280 814a 	bge.w	8028040 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8027dac:	2800      	cmp	r0, #0
 8027dae:	f2c0 8147 	blt.w	8028040 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8027db2:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027db6:	4558      	cmp	r0, fp
 8027db8:	f280 8142 	bge.w	8028040 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8027dbc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8027dbe:	fb00 3305 	mla	r3, r0, r5, r3
 8027dc2:	0858      	lsrs	r0, r3, #1
 8027dc4:	07dd      	lsls	r5, r3, #31
 8027dc6:	f817 c000 	ldrb.w	ip, [r7, r0]
 8027dca:	bf54      	ite	pl
 8027dcc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027dd0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027dd4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027dd8:	fa5f fc8c 	uxtb.w	ip, ip
 8027ddc:	2a00      	cmp	r2, #0
 8027dde:	f000 80dd 	beq.w	8027f9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8027de2:	1c58      	adds	r0, r3, #1
 8027de4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027de8:	07c0      	lsls	r0, r0, #31
 8027dea:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8027dee:	bf54      	ite	pl
 8027df0:	f00e 0e0f 	andpl.w	lr, lr, #15
 8027df4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027df8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027dfc:	fa5f f08e 	uxtb.w	r0, lr
 8027e00:	9010      	str	r0, [sp, #64]	@ 0x40
 8027e02:	b1d9      	cbz	r1, 8027e3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8027e04:	4453      	add	r3, sl
 8027e06:	0858      	lsrs	r0, r3, #1
 8027e08:	07dd      	lsls	r5, r3, #31
 8027e0a:	f103 0301 	add.w	r3, r3, #1
 8027e0e:	5c38      	ldrb	r0, [r7, r0]
 8027e10:	bf54      	ite	pl
 8027e12:	f000 000f 	andpl.w	r0, r0, #15
 8027e16:	1100      	asrmi	r0, r0, #4
 8027e18:	07dd      	lsls	r5, r3, #31
 8027e1a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027e1e:	b2c0      	uxtb	r0, r0
 8027e20:	900b      	str	r0, [sp, #44]	@ 0x2c
 8027e22:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8027e26:	f817 e000 	ldrb.w	lr, [r7, r0]
 8027e2a:	bf54      	ite	pl
 8027e2c:	f00e 030f 	andpl.w	r3, lr, #15
 8027e30:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8027e34:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027e38:	b2db      	uxtb	r3, r3
 8027e3a:	9311      	str	r3, [sp, #68]	@ 0x44
 8027e3c:	b292      	uxth	r2, r2
 8027e3e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8027e40:	b289      	uxth	r1, r1
 8027e42:	fb02 f301 	mul.w	r3, r2, r1
 8027e46:	0112      	lsls	r2, r2, #4
 8027e48:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027e4c:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8027e50:	1ad2      	subs	r2, r2, r3
 8027e52:	b289      	uxth	r1, r1
 8027e54:	b292      	uxth	r2, r2
 8027e56:	1a40      	subs	r0, r0, r1
 8027e58:	436a      	muls	r2, r5
 8027e5a:	b280      	uxth	r0, r0
 8027e5c:	fb0c 2c00 	mla	ip, ip, r0, r2
 8027e60:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027e62:	fb01 c102 	mla	r1, r1, r2, ip
 8027e66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8027e68:	fb03 1302 	mla	r3, r3, r2, r1
 8027e6c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027e70:	b1db      	cbz	r3, 8027eaa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027e72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027e74:	4353      	muls	r3, r2
 8027e76:	1c5a      	adds	r2, r3, #1
 8027e78:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027e7c:	4ac6      	ldr	r2, [pc, #792]	@ (8028198 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027e7e:	121b      	asrs	r3, r3, #8
 8027e80:	6812      	ldr	r2, [r2, #0]
 8027e82:	2bff      	cmp	r3, #255	@ 0xff
 8027e84:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8027e88:	f040 8099 	bne.w	8027fbe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8027e8c:	0953      	lsrs	r3, r2, #5
 8027e8e:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8027e92:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027e96:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027e9a:	f02c 0c07 	bic.w	ip, ip, #7
 8027e9e:	ea43 0c0c 	orr.w	ip, r3, ip
 8027ea2:	ea4c 0202 	orr.w	r2, ip, r2
 8027ea6:	f8a8 2000 	strh.w	r2, [r8]
 8027eaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027eac:	f108 0802 	add.w	r8, r8, #2
 8027eb0:	441c      	add	r4, r3
 8027eb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027eb4:	441e      	add	r6, r3
 8027eb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027eb8:	3b01      	subs	r3, #1
 8027eba:	930e      	str	r3, [sp, #56]	@ 0x38
 8027ebc:	e762      	b.n	8027d84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027ebe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027ec0:	f109 0902 	add.w	r9, r9, #2
 8027ec4:	441c      	add	r4, r3
 8027ec6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027ec8:	441e      	add	r6, r3
 8027eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027ecc:	3b01      	subs	r3, #1
 8027ece:	9309      	str	r3, [sp, #36]	@ 0x24
 8027ed0:	e736      	b.n	8027d40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8027ed2:	d024      	beq.n	8027f1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8027ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027ed6:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8027ed8:	3b01      	subs	r3, #1
 8027eda:	fb00 4003 	mla	r0, r0, r3, r4
 8027ede:	1400      	asrs	r0, r0, #16
 8027ee0:	f53f af4b 	bmi.w	8027d7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027ee4:	3901      	subs	r1, #1
 8027ee6:	4288      	cmp	r0, r1
 8027ee8:	f6bf af47 	bge.w	8027d7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027eec:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8027eee:	fb01 6303 	mla	r3, r1, r3, r6
 8027ef2:	141b      	asrs	r3, r3, #16
 8027ef4:	f53f af41 	bmi.w	8027d7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027ef8:	3a01      	subs	r2, #1
 8027efa:	4293      	cmp	r3, r2
 8027efc:	f6bf af3d 	bge.w	8027d7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027f00:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8027f04:	46c8      	mov	r8, r9
 8027f06:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8027f0a:	930e      	str	r3, [sp, #56]	@ 0x38
 8027f0c:	f1bb 0f00 	cmp.w	fp, #0
 8027f10:	f300 80b7 	bgt.w	8028082 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8027f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027f16:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027f1a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8027f1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027f20:	2b00      	cmp	r3, #0
 8027f22:	f340 818e 	ble.w	8028242 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8027f26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027f2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027f2c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027f30:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027f34:	eef0 6a62 	vmov.f32	s13, s5
 8027f38:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027f3c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027f40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f44:	ee16 4a90 	vmov	r4, s13
 8027f48:	eef0 6a43 	vmov.f32	s13, s6
 8027f4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f50:	ee16 6a90 	vmov	r6, s13
 8027f54:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027f58:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027f5c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027f60:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027f64:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027f68:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027f6c:	ee12 2a90 	vmov	r2, s5
 8027f70:	eef0 2a47 	vmov.f32	s5, s14
 8027f74:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f78:	ee13 2a10 	vmov	r2, s6
 8027f7c:	9323      	str	r3, [sp, #140]	@ 0x8c
 8027f7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027f80:	eeb0 3a67 	vmov.f32	s6, s15
 8027f84:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f88:	9324      	str	r3, [sp, #144]	@ 0x90
 8027f8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027f8c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027f8e:	3b01      	subs	r3, #1
 8027f90:	930d      	str	r3, [sp, #52]	@ 0x34
 8027f92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027f94:	bf08      	it	eq
 8027f96:	4613      	moveq	r3, r2
 8027f98:	9309      	str	r3, [sp, #36]	@ 0x24
 8027f9a:	e6c2      	b.n	8027d22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027f9c:	2900      	cmp	r1, #0
 8027f9e:	f43f af4d 	beq.w	8027e3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8027fa2:	eb0a 0003 	add.w	r0, sl, r3
 8027fa6:	0843      	lsrs	r3, r0, #1
 8027fa8:	07c0      	lsls	r0, r0, #31
 8027faa:	5cfb      	ldrb	r3, [r7, r3]
 8027fac:	bf54      	ite	pl
 8027fae:	f003 030f 	andpl.w	r3, r3, #15
 8027fb2:	111b      	asrmi	r3, r3, #4
 8027fb4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027fb8:	b2db      	uxtb	r3, r3
 8027fba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027fbc:	e73e      	b.n	8027e3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8027fbe:	f8b8 e000 	ldrh.w	lr, [r8]
 8027fc2:	fa1f fb83 	uxth.w	fp, r3
 8027fc6:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8027fca:	43db      	mvns	r3, r3
 8027fcc:	ea4f 202e 	mov.w	r0, lr, asr #8
 8027fd0:	fb11 f10b 	smulbb	r1, r1, fp
 8027fd4:	b2db      	uxtb	r3, r3
 8027fd6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027fda:	fa5f fc8c 	uxtb.w	ip, ip
 8027fde:	b2d2      	uxtb	r2, r2
 8027fe0:	fb00 1003 	mla	r0, r0, r3, r1
 8027fe4:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8027fe8:	fb1c fc0b 	smulbb	ip, ip, fp
 8027fec:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8027ff0:	b280      	uxth	r0, r0
 8027ff2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027ff6:	fb12 fb0b 	smulbb	fp, r2, fp
 8027ffa:	fa5f fe8e 	uxtb.w	lr, lr
 8027ffe:	fb01 cc03 	mla	ip, r1, r3, ip
 8028002:	fb0e bb03 	mla	fp, lr, r3, fp
 8028006:	1c43      	adds	r3, r0, #1
 8028008:	fa1f fc8c 	uxth.w	ip, ip
 802800c:	fa1f fb8b 	uxth.w	fp, fp
 8028010:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028014:	f10c 0101 	add.w	r1, ip, #1
 8028018:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 802801c:	f10b 0001 	add.w	r0, fp, #1
 8028020:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028024:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028028:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802802c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028030:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8028034:	4318      	orrs	r0, r3
 8028036:	ea40 000c 	orr.w	r0, r0, ip
 802803a:	f8a8 0000 	strh.w	r0, [r8]
 802803e:	e734      	b.n	8027eaa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028040:	f113 0b01 	adds.w	fp, r3, #1
 8028044:	f53f af31 	bmi.w	8027eaa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028048:	45dc      	cmp	ip, fp
 802804a:	f6ff af2e 	blt.w	8027eaa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802804e:	f110 0b01 	adds.w	fp, r0, #1
 8028052:	f53f af2a 	bmi.w	8027eaa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028056:	45de      	cmp	lr, fp
 8028058:	f6ff af27 	blt.w	8027eaa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802805c:	9302      	str	r3, [sp, #8]
 802805e:	fa0f f38e 	sxth.w	r3, lr
 8028062:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8028064:	9301      	str	r3, [sp, #4]
 8028066:	fa0f f38c 	sxth.w	r3, ip
 802806a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802806e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8028072:	9300      	str	r3, [sp, #0]
 8028074:	463a      	mov	r2, r7
 8028076:	4653      	mov	r3, sl
 8028078:	4641      	mov	r1, r8
 802807a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802807c:	f7ff fd4c 	bl	8027b18 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8028080:	e713      	b.n	8027eaa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028082:	1422      	asrs	r2, r4, #16
 8028084:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8028086:	1433      	asrs	r3, r6, #16
 8028088:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802808c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028090:	fb05 2303 	mla	r3, r5, r3, r2
 8028094:	085a      	lsrs	r2, r3, #1
 8028096:	07dd      	lsls	r5, r3, #31
 8028098:	5cba      	ldrb	r2, [r7, r2]
 802809a:	bf54      	ite	pl
 802809c:	f002 020f 	andpl.w	r2, r2, #15
 80280a0:	1112      	asrmi	r2, r2, #4
 80280a2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80280a6:	b2d2      	uxtb	r2, r2
 80280a8:	2900      	cmp	r1, #0
 80280aa:	d077      	beq.n	802819c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80280ac:	f103 0e01 	add.w	lr, r3, #1
 80280b0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80280b4:	f01e 0f01 	tst.w	lr, #1
 80280b8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80280bc:	bf0c      	ite	eq
 80280be:	f00c 0c0f 	andeq.w	ip, ip, #15
 80280c2:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80280c6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80280ca:	fa5f f58c 	uxtb.w	r5, ip
 80280ce:	9512      	str	r5, [sp, #72]	@ 0x48
 80280d0:	b308      	cbz	r0, 8028116 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 80280d2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80280d4:	442b      	add	r3, r5
 80280d6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80280da:	07dd      	lsls	r5, r3, #31
 80280dc:	f103 0301 	add.w	r3, r3, #1
 80280e0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80280e4:	bf54      	ite	pl
 80280e6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80280ea:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80280ee:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80280f2:	fa5f f58c 	uxtb.w	r5, ip
 80280f6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80280fa:	950c      	str	r5, [sp, #48]	@ 0x30
 80280fc:	07dd      	lsls	r5, r3, #31
 80280fe:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028102:	bf54      	ite	pl
 8028104:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028108:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802810c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028110:	fa5f f38c 	uxtb.w	r3, ip
 8028114:	9313      	str	r3, [sp, #76]	@ 0x4c
 8028116:	b289      	uxth	r1, r1
 8028118:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802811a:	b280      	uxth	r0, r0
 802811c:	fb01 f300 	mul.w	r3, r1, r0
 8028120:	0109      	lsls	r1, r1, #4
 8028122:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8028126:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 802812a:	1ac9      	subs	r1, r1, r3
 802812c:	b280      	uxth	r0, r0
 802812e:	b289      	uxth	r1, r1
 8028130:	ebac 0c00 	sub.w	ip, ip, r0
 8028134:	4369      	muls	r1, r5
 8028136:	fa1f fc8c 	uxth.w	ip, ip
 802813a:	fb02 120c 	mla	r2, r2, ip, r1
 802813e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8028140:	fb00 2001 	mla	r0, r0, r1, r2
 8028144:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8028146:	fb03 0302 	mla	r3, r3, r2, r0
 802814a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802814e:	b1d3      	cbz	r3, 8028186 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8028150:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028152:	4353      	muls	r3, r2
 8028154:	1c5a      	adds	r2, r3, #1
 8028156:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802815a:	4a0f      	ldr	r2, [pc, #60]	@ (8028198 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802815c:	121b      	asrs	r3, r3, #8
 802815e:	6812      	ldr	r2, [r2, #0]
 8028160:	2bff      	cmp	r3, #255	@ 0xff
 8028162:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8028166:	d12d      	bne.n	80281c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8028168:	0953      	lsrs	r3, r2, #5
 802816a:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 802816e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028172:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028176:	f02c 0c07 	bic.w	ip, ip, #7
 802817a:	ea43 0c0c 	orr.w	ip, r3, ip
 802817e:	ea4c 0202 	orr.w	r2, ip, r2
 8028182:	f8a8 2000 	strh.w	r2, [r8]
 8028186:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8028188:	f108 0802 	add.w	r8, r8, #2
 802818c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028190:	441c      	add	r4, r3
 8028192:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028194:	441e      	add	r6, r3
 8028196:	e6b9      	b.n	8027f0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028198:	200279e8 	.word	0x200279e8
 802819c:	2800      	cmp	r0, #0
 802819e:	d0ba      	beq.n	8028116 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 80281a0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80281a2:	442b      	add	r3, r5
 80281a4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80281a8:	07db      	lsls	r3, r3, #31
 80281aa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80281ae:	bf54      	ite	pl
 80281b0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80281b4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80281b8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80281bc:	fa5f f38c 	uxtb.w	r3, ip
 80281c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80281c2:	e7a8      	b.n	8028116 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 80281c4:	f8b8 e000 	ldrh.w	lr, [r8]
 80281c8:	fa1f fa83 	uxth.w	sl, r3
 80281cc:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80281d0:	43db      	mvns	r3, r3
 80281d2:	ea4f 202e 	mov.w	r0, lr, asr #8
 80281d6:	fb11 f10a 	smulbb	r1, r1, sl
 80281da:	b2db      	uxtb	r3, r3
 80281dc:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80281e0:	b2d2      	uxtb	r2, r2
 80281e2:	fa5f fc8c 	uxtb.w	ip, ip
 80281e6:	fb00 1003 	mla	r0, r0, r3, r1
 80281ea:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80281ee:	fb12 f20a 	smulbb	r2, r2, sl
 80281f2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80281f6:	b280      	uxth	r0, r0
 80281f8:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80281fc:	fb1c fc0a 	smulbb	ip, ip, sl
 8028200:	fa5f fe8e 	uxtb.w	lr, lr
 8028204:	fb0e 2203 	mla	r2, lr, r3, r2
 8028208:	fb01 cc03 	mla	ip, r1, r3, ip
 802820c:	1c43      	adds	r3, r0, #1
 802820e:	b292      	uxth	r2, r2
 8028210:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028214:	1c51      	adds	r1, r2, #1
 8028216:	fa1f fc8c 	uxth.w	ip, ip
 802821a:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802821e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8028222:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8028226:	4308      	orrs	r0, r1
 8028228:	f10c 0101 	add.w	r1, ip, #1
 802822c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028230:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028234:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8028238:	ea40 000c 	orr.w	r0, r0, ip
 802823c:	f8a8 0000 	strh.w	r0, [r8]
 8028240:	e7a1      	b.n	8028186 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8028242:	b017      	add	sp, #92	@ 0x5c
 8028244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028248 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8028248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802824c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8028250:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8028254:	2d00      	cmp	r5, #0
 8028256:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802825a:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802825e:	fb05 0e03 	mla	lr, r5, r3, r0
 8028262:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8028266:	f2c0 80b0 	blt.w	80283ca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802826a:	45a9      	cmp	r9, r5
 802826c:	f340 80ad 	ble.w	80283ca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8028270:	2800      	cmp	r0, #0
 8028272:	f2c0 80a8 	blt.w	80283c6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8028276:	4580      	cmp	r8, r0
 8028278:	f340 80a5 	ble.w	80283c6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802827c:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8028280:	f01e 0f01 	tst.w	lr, #1
 8028284:	5d16      	ldrb	r6, [r2, r4]
 8028286:	bf0c      	ite	eq
 8028288:	f006 060f 	andeq.w	r6, r6, #15
 802828c:	1136      	asrne	r6, r6, #4
 802828e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028292:	b2f6      	uxtb	r6, r6
 8028294:	1c44      	adds	r4, r0, #1
 8028296:	f100 809b 	bmi.w	80283d0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802829a:	45a0      	cmp	r8, r4
 802829c:	f340 8098 	ble.w	80283d0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 80282a0:	2f00      	cmp	r7, #0
 80282a2:	f000 8097 	beq.w	80283d4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 80282a6:	f10e 0a01 	add.w	sl, lr, #1
 80282aa:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80282ae:	f01a 0f01 	tst.w	sl, #1
 80282b2:	5d14      	ldrb	r4, [r2, r4]
 80282b4:	bf0c      	ite	eq
 80282b6:	f004 040f 	andeq.w	r4, r4, #15
 80282ba:	1124      	asrne	r4, r4, #4
 80282bc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80282c0:	b2e4      	uxtb	r4, r4
 80282c2:	3501      	adds	r5, #1
 80282c4:	f100 808a 	bmi.w	80283dc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 80282c8:	45a9      	cmp	r9, r5
 80282ca:	f340 8087 	ble.w	80283dc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 80282ce:	f1bc 0f00 	cmp.w	ip, #0
 80282d2:	f000 8086 	beq.w	80283e2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 80282d6:	2800      	cmp	r0, #0
 80282d8:	db7e      	blt.n	80283d8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 80282da:	4580      	cmp	r8, r0
 80282dc:	dd7c      	ble.n	80283d8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 80282de:	eb03 090e 	add.w	r9, r3, lr
 80282e2:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80282e6:	f019 0f01 	tst.w	r9, #1
 80282ea:	5d55      	ldrb	r5, [r2, r5]
 80282ec:	bf0c      	ite	eq
 80282ee:	f005 050f 	andeq.w	r5, r5, #15
 80282f2:	112d      	asrne	r5, r5, #4
 80282f4:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80282f8:	b2ed      	uxtb	r5, r5
 80282fa:	3001      	adds	r0, #1
 80282fc:	d474      	bmi.n	80283e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80282fe:	4580      	cmp	r8, r0
 8028300:	dd72      	ble.n	80283e8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8028302:	2f00      	cmp	r7, #0
 8028304:	d072      	beq.n	80283ec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8028306:	3301      	adds	r3, #1
 8028308:	449e      	add	lr, r3
 802830a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802830e:	f01e 0f01 	tst.w	lr, #1
 8028312:	5cd0      	ldrb	r0, [r2, r3]
 8028314:	bf0c      	ite	eq
 8028316:	f000 000f 	andeq.w	r0, r0, #15
 802831a:	1100      	asrne	r0, r0, #4
 802831c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028320:	b2c3      	uxtb	r3, r0
 8028322:	b2ba      	uxth	r2, r7
 8028324:	fa1f fc8c 	uxth.w	ip, ip
 8028328:	fb02 f00c 	mul.w	r0, r2, ip
 802832c:	0112      	lsls	r2, r2, #4
 802832e:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8028332:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8028336:	1a12      	subs	r2, r2, r0
 8028338:	fa1f fc8c 	uxth.w	ip, ip
 802833c:	b292      	uxth	r2, r2
 802833e:	eba7 070c 	sub.w	r7, r7, ip
 8028342:	4362      	muls	r2, r4
 8028344:	b2bf      	uxth	r7, r7
 8028346:	fb06 2207 	mla	r2, r6, r7, r2
 802834a:	fb0c 2505 	mla	r5, ip, r5, r2
 802834e:	fb00 5303 	mla	r3, r0, r3, r5
 8028352:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028356:	b3a3      	cbz	r3, 80283c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8028358:	4a25      	ldr	r2, [pc, #148]	@ (80283f0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 802835a:	880e      	ldrh	r6, [r1, #0]
 802835c:	6815      	ldr	r5, [r2, #0]
 802835e:	b29a      	uxth	r2, r3
 8028360:	1234      	asrs	r4, r6, #8
 8028362:	43db      	mvns	r3, r3
 8028364:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8028368:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802836c:	b2db      	uxtb	r3, r3
 802836e:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8028372:	fb10 f002 	smulbb	r0, r0, r2
 8028376:	b2ed      	uxtb	r5, r5
 8028378:	fb17 f702 	smulbb	r7, r7, r2
 802837c:	fb04 0403 	mla	r4, r4, r3, r0
 8028380:	10f0      	asrs	r0, r6, #3
 8028382:	fb15 f202 	smulbb	r2, r5, r2
 8028386:	00f6      	lsls	r6, r6, #3
 8028388:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802838c:	b2a4      	uxth	r4, r4
 802838e:	b2f6      	uxtb	r6, r6
 8028390:	fb00 7003 	mla	r0, r0, r3, r7
 8028394:	fb06 2303 	mla	r3, r6, r3, r2
 8028398:	b280      	uxth	r0, r0
 802839a:	b29a      	uxth	r2, r3
 802839c:	1c63      	adds	r3, r4, #1
 802839e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80283a2:	1c53      	adds	r3, r2, #1
 80283a4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80283a8:	1c42      	adds	r2, r0, #1
 80283aa:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 80283ae:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80283b2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80283b6:	0940      	lsrs	r0, r0, #5
 80283b8:	4323      	orrs	r3, r4
 80283ba:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80283be:	4303      	orrs	r3, r0
 80283c0:	800b      	strh	r3, [r1, #0]
 80283c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80283c6:	2600      	movs	r6, #0
 80283c8:	e764      	b.n	8028294 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 80283ca:	2400      	movs	r4, #0
 80283cc:	4626      	mov	r6, r4
 80283ce:	e778      	b.n	80282c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80283d0:	2400      	movs	r4, #0
 80283d2:	e776      	b.n	80282c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80283d4:	463c      	mov	r4, r7
 80283d6:	e774      	b.n	80282c2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 80283d8:	2500      	movs	r5, #0
 80283da:	e78e      	b.n	80282fa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 80283dc:	2300      	movs	r3, #0
 80283de:	461d      	mov	r5, r3
 80283e0:	e79f      	b.n	8028322 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80283e2:	4663      	mov	r3, ip
 80283e4:	4665      	mov	r5, ip
 80283e6:	e79c      	b.n	8028322 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80283e8:	2300      	movs	r3, #0
 80283ea:	e79a      	b.n	8028322 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80283ec:	463b      	mov	r3, r7
 80283ee:	e798      	b.n	8028322 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 80283f0:	200279e8 	.word	0x200279e8

080283f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80283f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80283f8:	b093      	sub	sp, #76	@ 0x4c
 80283fa:	461d      	mov	r5, r3
 80283fc:	920c      	str	r2, [sp, #48]	@ 0x30
 80283fe:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8028400:	9011      	str	r0, [sp, #68]	@ 0x44
 8028402:	9107      	str	r1, [sp, #28]
 8028404:	6850      	ldr	r0, [r2, #4]
 8028406:	6812      	ldr	r2, [r2, #0]
 8028408:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802840c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8028410:	fb00 1303 	mla	r3, r0, r3, r1
 8028414:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8028418:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802841a:	689b      	ldr	r3, [r3, #8]
 802841c:	3301      	adds	r3, #1
 802841e:	f023 0301 	bic.w	r3, r3, #1
 8028422:	9306      	str	r3, [sp, #24]
 8028424:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028426:	681f      	ldr	r7, [r3, #0]
 8028428:	9b07      	ldr	r3, [sp, #28]
 802842a:	2b00      	cmp	r3, #0
 802842c:	dc03      	bgt.n	8028436 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802842e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028430:	2b00      	cmp	r3, #0
 8028432:	f340 8267 	ble.w	8028904 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8028436:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028438:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802843c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028440:	1e48      	subs	r0, r1, #1
 8028442:	f102 3cff 	add.w	ip, r2, #4294967295
 8028446:	2d00      	cmp	r5, #0
 8028448:	f340 80b7 	ble.w	80285ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802844c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028450:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028454:	d406      	bmi.n	8028464 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8028456:	4586      	cmp	lr, r0
 8028458:	da04      	bge.n	8028464 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802845a:	2b00      	cmp	r3, #0
 802845c:	db02      	blt.n	8028464 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802845e:	4563      	cmp	r3, ip
 8028460:	f2c0 80ac 	blt.w	80285bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8028464:	f11e 0e01 	adds.w	lr, lr, #1
 8028468:	f100 809f 	bmi.w	80285aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802846c:	4571      	cmp	r1, lr
 802846e:	f2c0 809c 	blt.w	80285aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8028472:	3301      	adds	r3, #1
 8028474:	f100 8099 	bmi.w	80285aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8028478:	429a      	cmp	r2, r3
 802847a:	f2c0 8096 	blt.w	80285aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802847e:	46c8      	mov	r8, r9
 8028480:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8028484:	9509      	str	r5, [sp, #36]	@ 0x24
 8028486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028488:	2b00      	cmp	r3, #0
 802848a:	f340 80b5 	ble.w	80285f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802848e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8028492:	1430      	asrs	r0, r6, #16
 8028494:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028498:	9308      	str	r3, [sp, #32]
 802849a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802849c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80284a0:	1423      	asrs	r3, r4, #16
 80284a2:	f100 813f 	bmi.w	8028724 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80284a6:	f10c 3bff 	add.w	fp, ip, #4294967295
 80284aa:	455b      	cmp	r3, fp
 80284ac:	f280 813a 	bge.w	8028724 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80284b0:	2800      	cmp	r0, #0
 80284b2:	f2c0 8137 	blt.w	8028724 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80284b6:	f10e 3bff 	add.w	fp, lr, #4294967295
 80284ba:	4558      	cmp	r0, fp
 80284bc:	f280 8132 	bge.w	8028724 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80284c0:	9a06      	ldr	r2, [sp, #24]
 80284c2:	fb00 3302 	mla	r3, r0, r2, r3
 80284c6:	0858      	lsrs	r0, r3, #1
 80284c8:	07da      	lsls	r2, r3, #31
 80284ca:	9a08      	ldr	r2, [sp, #32]
 80284cc:	f817 c000 	ldrb.w	ip, [r7, r0]
 80284d0:	bf54      	ite	pl
 80284d2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80284d6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80284da:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80284de:	fa5f fc8c 	uxtb.w	ip, ip
 80284e2:	2a00      	cmp	r2, #0
 80284e4:	f000 80cc 	beq.w	8028680 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80284e8:	1c58      	adds	r0, r3, #1
 80284ea:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80284ee:	07c0      	lsls	r0, r0, #31
 80284f0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80284f4:	bf54      	ite	pl
 80284f6:	f00e 0e0f 	andpl.w	lr, lr, #15
 80284fa:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80284fe:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028502:	fa5f fe8e 	uxtb.w	lr, lr
 8028506:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802850a:	b1b9      	cbz	r1, 802853c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802850c:	4453      	add	r3, sl
 802850e:	0858      	lsrs	r0, r3, #1
 8028510:	07da      	lsls	r2, r3, #31
 8028512:	5c38      	ldrb	r0, [r7, r0]
 8028514:	bf54      	ite	pl
 8028516:	f000 000f 	andpl.w	r0, r0, #15
 802851a:	1100      	asrmi	r0, r0, #4
 802851c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028520:	b2c0      	uxtb	r0, r0
 8028522:	900a      	str	r0, [sp, #40]	@ 0x28
 8028524:	1c58      	adds	r0, r3, #1
 8028526:	0843      	lsrs	r3, r0, #1
 8028528:	07c2      	lsls	r2, r0, #31
 802852a:	5cfb      	ldrb	r3, [r7, r3]
 802852c:	bf54      	ite	pl
 802852e:	f003 030f 	andpl.w	r3, r3, #15
 8028532:	111b      	asrmi	r3, r3, #4
 8028534:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028538:	b2db      	uxtb	r3, r3
 802853a:	930e      	str	r3, [sp, #56]	@ 0x38
 802853c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8028540:	b289      	uxth	r1, r1
 8028542:	fb02 f301 	mul.w	r3, r2, r1
 8028546:	0112      	lsls	r2, r2, #4
 8028548:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802854c:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8028550:	1ad2      	subs	r2, r2, r3
 8028552:	b289      	uxth	r1, r1
 8028554:	b292      	uxth	r2, r2
 8028556:	1a40      	subs	r0, r0, r1
 8028558:	fa1f fe80 	uxth.w	lr, r0
 802855c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802855e:	4342      	muls	r2, r0
 8028560:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8028564:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028566:	fb01 c102 	mla	r1, r1, r2, ip
 802856a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802856c:	fb03 1302 	mla	r3, r3, r2, r1
 8028570:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028574:	2bff      	cmp	r3, #255	@ 0xff
 8028576:	f040 8094 	bne.w	80286a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802857a:	4bbf      	ldr	r3, [pc, #764]	@ (8028878 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802857c:	681a      	ldr	r2, [r3, #0]
 802857e:	4bbf      	ldr	r3, [pc, #764]	@ (802887c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8028580:	0951      	lsrs	r1, r2, #5
 8028582:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8028586:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802858a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802858e:	430b      	orrs	r3, r1
 8028590:	4313      	orrs	r3, r2
 8028592:	f8a8 3000 	strh.w	r3, [r8]
 8028596:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028598:	f108 0802 	add.w	r8, r8, #2
 802859c:	441c      	add	r4, r3
 802859e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80285a0:	441e      	add	r6, r3
 80285a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80285a4:	3b01      	subs	r3, #1
 80285a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80285a8:	e76d      	b.n	8028486 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80285aa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80285ac:	3d01      	subs	r5, #1
 80285ae:	f109 0902 	add.w	r9, r9, #2
 80285b2:	441c      	add	r4, r3
 80285b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80285b6:	441e      	add	r6, r3
 80285b8:	e745      	b.n	8028446 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80285ba:	d021      	beq.n	8028600 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80285bc:	1e6b      	subs	r3, r5, #1
 80285be:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80285c0:	fb00 4003 	mla	r0, r0, r3, r4
 80285c4:	1400      	asrs	r0, r0, #16
 80285c6:	f53f af5a 	bmi.w	802847e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80285ca:	3901      	subs	r1, #1
 80285cc:	4288      	cmp	r0, r1
 80285ce:	f6bf af56 	bge.w	802847e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80285d2:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80285d4:	fb01 6303 	mla	r3, r1, r3, r6
 80285d8:	141b      	asrs	r3, r3, #16
 80285da:	f53f af50 	bmi.w	802847e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80285de:	3a01      	subs	r2, #1
 80285e0:	4293      	cmp	r3, r2
 80285e2:	f6bf af4c 	bge.w	802847e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80285e6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80285ea:	46a8      	mov	r8, r5
 80285ec:	46ce      	mov	lr, r9
 80285ee:	9308      	str	r3, [sp, #32]
 80285f0:	f1b8 0f00 	cmp.w	r8, #0
 80285f4:	f300 80b6 	bgt.w	8028764 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80285f8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80285fc:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8028600:	9b07      	ldr	r3, [sp, #28]
 8028602:	2b00      	cmp	r3, #0
 8028604:	f340 817e 	ble.w	8028904 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8028608:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802860c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802860e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028612:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028616:	eef0 6a62 	vmov.f32	s13, s5
 802861a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802861e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028622:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028626:	ee16 4a90 	vmov	r4, s13
 802862a:	eef0 6a43 	vmov.f32	s13, s6
 802862e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028632:	ee16 6a90 	vmov	r6, s13
 8028636:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802863a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802863e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028642:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028646:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802864a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802864e:	ee12 2a90 	vmov	r2, s5
 8028652:	eef0 2a47 	vmov.f32	s5, s14
 8028656:	fb92 f3f3 	sdiv	r3, r2, r3
 802865a:	ee13 2a10 	vmov	r2, s6
 802865e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8028660:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028662:	eeb0 3a67 	vmov.f32	s6, s15
 8028666:	fb92 f3f3 	sdiv	r3, r2, r3
 802866a:	9320      	str	r3, [sp, #128]	@ 0x80
 802866c:	9b07      	ldr	r3, [sp, #28]
 802866e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8028670:	3b01      	subs	r3, #1
 8028672:	9307      	str	r3, [sp, #28]
 8028674:	bf08      	it	eq
 8028676:	4615      	moveq	r5, r2
 8028678:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802867a:	bf18      	it	ne
 802867c:	461d      	movne	r5, r3
 802867e:	e6d3      	b.n	8028428 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8028680:	2900      	cmp	r1, #0
 8028682:	f43f af5b 	beq.w	802853c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8028686:	eb0a 0003 	add.w	r0, sl, r3
 802868a:	0843      	lsrs	r3, r0, #1
 802868c:	07c0      	lsls	r0, r0, #31
 802868e:	5cfb      	ldrb	r3, [r7, r3]
 8028690:	bf54      	ite	pl
 8028692:	f003 030f 	andpl.w	r3, r3, #15
 8028696:	111b      	asrmi	r3, r3, #4
 8028698:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802869c:	b2db      	uxtb	r3, r3
 802869e:	930a      	str	r3, [sp, #40]	@ 0x28
 80286a0:	e74c      	b.n	802853c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80286a2:	2b00      	cmp	r3, #0
 80286a4:	f43f af77 	beq.w	8028596 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80286a8:	4a73      	ldr	r2, [pc, #460]	@ (8028878 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80286aa:	fa1f fe83 	uxth.w	lr, r3
 80286ae:	f8b8 c000 	ldrh.w	ip, [r8]
 80286b2:	43db      	mvns	r3, r3
 80286b4:	6810      	ldr	r0, [r2, #0]
 80286b6:	ea4f 212c 	mov.w	r1, ip, asr #8
 80286ba:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80286be:	b2db      	uxtb	r3, r3
 80286c0:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80286c4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80286c8:	fb12 f20e 	smulbb	r2, r2, lr
 80286cc:	b2c0      	uxtb	r0, r0
 80286ce:	fb1b fb0e 	smulbb	fp, fp, lr
 80286d2:	fb01 2103 	mla	r1, r1, r3, r2
 80286d6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80286da:	fb10 fe0e 	smulbb	lr, r0, lr
 80286de:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80286e2:	b289      	uxth	r1, r1
 80286e4:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80286e8:	fa5f fc8c 	uxtb.w	ip, ip
 80286ec:	fb02 b203 	mla	r2, r2, r3, fp
 80286f0:	1c48      	adds	r0, r1, #1
 80286f2:	fb0c e303 	mla	r3, ip, r3, lr
 80286f6:	b292      	uxth	r2, r2
 80286f8:	b29b      	uxth	r3, r3
 80286fa:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80286fe:	f102 0b01 	add.w	fp, r2, #1
 8028702:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 8028706:	1c59      	adds	r1, r3, #1
 8028708:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802870c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8028710:	0952      	lsrs	r2, r2, #5
 8028712:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8028716:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802871a:	4301      	orrs	r1, r0
 802871c:	4311      	orrs	r1, r2
 802871e:	f8a8 1000 	strh.w	r1, [r8]
 8028722:	e738      	b.n	8028596 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028724:	f113 0b01 	adds.w	fp, r3, #1
 8028728:	f53f af35 	bmi.w	8028596 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802872c:	45dc      	cmp	ip, fp
 802872e:	f6ff af32 	blt.w	8028596 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028732:	f110 0b01 	adds.w	fp, r0, #1
 8028736:	f53f af2e 	bmi.w	8028596 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802873a:	45de      	cmp	lr, fp
 802873c:	f6ff af2b 	blt.w	8028596 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028740:	9302      	str	r3, [sp, #8]
 8028742:	fa0f f38e 	sxth.w	r3, lr
 8028746:	9a08      	ldr	r2, [sp, #32]
 8028748:	9301      	str	r3, [sp, #4]
 802874a:	fa0f f38c 	sxth.w	r3, ip
 802874e:	9105      	str	r1, [sp, #20]
 8028750:	4641      	mov	r1, r8
 8028752:	9300      	str	r3, [sp, #0]
 8028754:	4653      	mov	r3, sl
 8028756:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802875a:	463a      	mov	r2, r7
 802875c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802875e:	f7ff fd73 	bl	8028248 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8028762:	e718      	b.n	8028596 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028764:	1422      	asrs	r2, r4, #16
 8028766:	9906      	ldr	r1, [sp, #24]
 8028768:	1433      	asrs	r3, r6, #16
 802876a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802876e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028772:	fb01 2303 	mla	r3, r1, r3, r2
 8028776:	085a      	lsrs	r2, r3, #1
 8028778:	07d9      	lsls	r1, r3, #31
 802877a:	5cba      	ldrb	r2, [r7, r2]
 802877c:	bf54      	ite	pl
 802877e:	f002 020f 	andpl.w	r2, r2, #15
 8028782:	1112      	asrmi	r2, r2, #4
 8028784:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028788:	b2d2      	uxtb	r2, r2
 802878a:	2800      	cmp	r0, #0
 802878c:	d063      	beq.n	8028856 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 802878e:	f103 0a01 	add.w	sl, r3, #1
 8028792:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8028796:	f01a 0f01 	tst.w	sl, #1
 802879a:	5c79      	ldrb	r1, [r7, r1]
 802879c:	bf0c      	ite	eq
 802879e:	f001 010f 	andeq.w	r1, r1, #15
 80287a2:	1109      	asrne	r1, r1, #4
 80287a4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80287a8:	b2c9      	uxtb	r1, r1
 80287aa:	910f      	str	r1, [sp, #60]	@ 0x3c
 80287ac:	f1bc 0f00 	cmp.w	ip, #0
 80287b0:	d01a      	beq.n	80287e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80287b2:	9908      	ldr	r1, [sp, #32]
 80287b4:	440b      	add	r3, r1
 80287b6:	0859      	lsrs	r1, r3, #1
 80287b8:	f013 0f01 	tst.w	r3, #1
 80287bc:	f103 0301 	add.w	r3, r3, #1
 80287c0:	5c79      	ldrb	r1, [r7, r1]
 80287c2:	bf0c      	ite	eq
 80287c4:	f001 010f 	andeq.w	r1, r1, #15
 80287c8:	1109      	asrne	r1, r1, #4
 80287ca:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80287ce:	b2c9      	uxtb	r1, r1
 80287d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80287d2:	0859      	lsrs	r1, r3, #1
 80287d4:	07db      	lsls	r3, r3, #31
 80287d6:	5c79      	ldrb	r1, [r7, r1]
 80287d8:	bf54      	ite	pl
 80287da:	f001 010f 	andpl.w	r1, r1, #15
 80287de:	1109      	asrmi	r1, r1, #4
 80287e0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80287e4:	b2c9      	uxtb	r1, r1
 80287e6:	9110      	str	r1, [sp, #64]	@ 0x40
 80287e8:	b280      	uxth	r0, r0
 80287ea:	fa1f fc8c 	uxth.w	ip, ip
 80287ee:	fb00 f30c 	mul.w	r3, r0, ip
 80287f2:	0100      	lsls	r0, r0, #4
 80287f4:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80287f8:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 80287fc:	1ac0      	subs	r0, r0, r3
 80287fe:	fa1f fc8c 	uxth.w	ip, ip
 8028802:	b280      	uxth	r0, r0
 8028804:	eba1 010c 	sub.w	r1, r1, ip
 8028808:	fa1f fa81 	uxth.w	sl, r1
 802880c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802880e:	4348      	muls	r0, r1
 8028810:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028812:	fb02 020a 	mla	r2, r2, sl, r0
 8028816:	fb0c 2c01 	mla	ip, ip, r1, r2
 802881a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802881c:	fb03 c302 	mla	r3, r3, r2, ip
 8028820:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028824:	2bff      	cmp	r3, #255	@ 0xff
 8028826:	d12b      	bne.n	8028880 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8028828:	4b13      	ldr	r3, [pc, #76]	@ (8028878 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802882a:	681a      	ldr	r2, [r3, #0]
 802882c:	4b13      	ldr	r3, [pc, #76]	@ (802887c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802882e:	0951      	lsrs	r1, r2, #5
 8028830:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8028834:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028838:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802883c:	430b      	orrs	r3, r1
 802883e:	4313      	orrs	r3, r2
 8028840:	f8ae 3000 	strh.w	r3, [lr]
 8028844:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028846:	f10e 0e02 	add.w	lr, lr, #2
 802884a:	f108 38ff 	add.w	r8, r8, #4294967295
 802884e:	441c      	add	r4, r3
 8028850:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028852:	441e      	add	r6, r3
 8028854:	e6cc      	b.n	80285f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8028856:	f1bc 0f00 	cmp.w	ip, #0
 802885a:	d0c5      	beq.n	80287e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802885c:	9908      	ldr	r1, [sp, #32]
 802885e:	440b      	add	r3, r1
 8028860:	0859      	lsrs	r1, r3, #1
 8028862:	07db      	lsls	r3, r3, #31
 8028864:	5c79      	ldrb	r1, [r7, r1]
 8028866:	bf54      	ite	pl
 8028868:	f001 010f 	andpl.w	r1, r1, #15
 802886c:	1109      	asrmi	r1, r1, #4
 802886e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028872:	b2c9      	uxtb	r1, r1
 8028874:	910b      	str	r1, [sp, #44]	@ 0x2c
 8028876:	e7b7      	b.n	80287e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8028878:	200279e8 	.word	0x200279e8
 802887c:	fffff800 	.word	0xfffff800
 8028880:	2b00      	cmp	r3, #0
 8028882:	d0df      	beq.n	8028844 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8028884:	4a21      	ldr	r2, [pc, #132]	@ (802890c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 8028886:	fa1f fa83 	uxth.w	sl, r3
 802888a:	f8be c000 	ldrh.w	ip, [lr]
 802888e:	43db      	mvns	r3, r3
 8028890:	6810      	ldr	r0, [r2, #0]
 8028892:	ea4f 212c 	mov.w	r1, ip, asr #8
 8028896:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802889a:	b2db      	uxtb	r3, r3
 802889c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80288a0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80288a4:	fb12 f20a 	smulbb	r2, r2, sl
 80288a8:	b2c0      	uxtb	r0, r0
 80288aa:	fb1b fb0a 	smulbb	fp, fp, sl
 80288ae:	fb01 2103 	mla	r1, r1, r3, r2
 80288b2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80288b6:	fb10 f00a 	smulbb	r0, r0, sl
 80288ba:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80288be:	b289      	uxth	r1, r1
 80288c0:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80288c4:	fa5f fc8c 	uxtb.w	ip, ip
 80288c8:	fb02 b203 	mla	r2, r2, r3, fp
 80288cc:	fb0c 0003 	mla	r0, ip, r3, r0
 80288d0:	1c4b      	adds	r3, r1, #1
 80288d2:	b292      	uxth	r2, r2
 80288d4:	b280      	uxth	r0, r0
 80288d6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80288da:	f100 0b01 	add.w	fp, r0, #1
 80288de:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80288e2:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80288e6:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80288ea:	ea4b 0101 	orr.w	r1, fp, r1
 80288ee:	f102 0b01 	add.w	fp, r2, #1
 80288f2:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80288f6:	0952      	lsrs	r2, r2, #5
 80288f8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80288fc:	4311      	orrs	r1, r2
 80288fe:	f8ae 1000 	strh.w	r1, [lr]
 8028902:	e79f      	b.n	8028844 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8028904:	b013      	add	sp, #76	@ 0x4c
 8028906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802890a:	bf00      	nop
 802890c:	200279e8 	.word	0x200279e8

08028910 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 8028910:	b570      	push	{r4, r5, r6, lr}
 8028912:	1208      	asrs	r0, r1, #8
 8028914:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8028918:	b29e      	uxth	r6, r3
 802891a:	1213      	asrs	r3, r2, #8
 802891c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8028920:	10cc      	asrs	r4, r1, #3
 8028922:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8028926:	00c9      	lsls	r1, r1, #3
 8028928:	fb10 f006 	smulbb	r0, r0, r6
 802892c:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8028930:	fb13 f305 	smulbb	r3, r3, r5
 8028934:	fb14 f406 	smulbb	r4, r4, r6
 8028938:	4418      	add	r0, r3
 802893a:	10d3      	asrs	r3, r2, #3
 802893c:	00d2      	lsls	r2, r2, #3
 802893e:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8028942:	b280      	uxth	r0, r0
 8028944:	b2d2      	uxtb	r2, r2
 8028946:	fb13 f305 	smulbb	r3, r3, r5
 802894a:	fb12 f205 	smulbb	r2, r2, r5
 802894e:	441c      	add	r4, r3
 8028950:	b2cb      	uxtb	r3, r1
 8028952:	fb13 f306 	smulbb	r3, r3, r6
 8028956:	b2a4      	uxth	r4, r4
 8028958:	4413      	add	r3, r2
 802895a:	1c42      	adds	r2, r0, #1
 802895c:	b29b      	uxth	r3, r3
 802895e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028962:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 8028966:	1c58      	adds	r0, r3, #1
 8028968:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802896c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028970:	4310      	orrs	r0, r2
 8028972:	1c62      	adds	r2, r4, #1
 8028974:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8028978:	0964      	lsrs	r4, r4, #5
 802897a:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802897e:	4320      	orrs	r0, r4
 8028980:	bd70      	pop	{r4, r5, r6, pc}
	...

08028984 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8028984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028988:	b08f      	sub	sp, #60	@ 0x3c
 802898a:	461c      	mov	r4, r3
 802898c:	460d      	mov	r5, r1
 802898e:	4616      	mov	r6, r2
 8028990:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8028994:	9004      	str	r0, [sp, #16]
 8028996:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028998:	2f00      	cmp	r7, #0
 802899a:	f000 80f6 	beq.w	8028b8a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 802899e:	6820      	ldr	r0, [r4, #0]
 80289a0:	aa0a      	add	r2, sp, #40	@ 0x28
 80289a2:	6861      	ldr	r1, [r4, #4]
 80289a4:	f04f 0802 	mov.w	r8, #2
 80289a8:	3604      	adds	r6, #4
 80289aa:	c203      	stmia	r2!, {r0, r1}
 80289ac:	6818      	ldr	r0, [r3, #0]
 80289ae:	aa0c      	add	r2, sp, #48	@ 0x30
 80289b0:	6859      	ldr	r1, [r3, #4]
 80289b2:	c203      	stmia	r2!, {r0, r1}
 80289b4:	a80a      	add	r0, sp, #40	@ 0x28
 80289b6:	f7ef fab7 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80289ba:	4621      	mov	r1, r4
 80289bc:	a80c      	add	r0, sp, #48	@ 0x30
 80289be:	f7ef fadb 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80289c2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80289c6:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 80289ca:	f002 0301 	and.w	r3, r2, #1
 80289ce:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 80289d2:	9306      	str	r3, [sp, #24]
 80289d4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80289d8:	f003 0101 	and.w	r1, r3, #1
 80289dc:	9105      	str	r1, [sp, #20]
 80289de:	9805      	ldr	r0, [sp, #20]
 80289e0:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80289e4:	4403      	add	r3, r0
 80289e6:	fb01 2303 	mla	r3, r1, r3, r2
 80289ea:	fb93 f3f8 	sdiv	r3, r3, r8
 80289ee:	441d      	add	r5, r3
 80289f0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80289f4:	441a      	add	r2, r3
 80289f6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80289fa:	4419      	add	r1, r3
 80289fc:	4b64      	ldr	r3, [pc, #400]	@ (8028b90 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 80289fe:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8028a02:	6818      	ldr	r0, [r3, #0]
 8028a04:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8028a08:	6803      	ldr	r3, [r0, #0]
 8028a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028a0c:	4798      	blx	r3
 8028a0e:	4a61      	ldr	r2, [pc, #388]	@ (8028b94 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 8028a10:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8028a14:	2fff      	cmp	r7, #255	@ 0xff
 8028a16:	8813      	ldrh	r3, [r2, #0]
 8028a18:	4611      	mov	r1, r2
 8028a1a:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 8028a1e:	fb03 fb0b 	mul.w	fp, r3, fp
 8028a22:	fb03 a404 	mla	r4, r3, r4, sl
 8028a26:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8028a2a:	d06b      	beq.n	8028b04 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 8028a2c:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 8028a30:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8028a34:	9303      	str	r3, [sp, #12]
 8028a36:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8028a3a:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8028a3e:	9b07      	ldr	r3, [sp, #28]
 8028a40:	42a3      	cmp	r3, r4
 8028a42:	f240 809d 	bls.w	8028b80 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8028a46:	9b06      	ldr	r3, [sp, #24]
 8028a48:	2b00      	cmp	r3, #0
 8028a4a:	d039      	beq.n	8028ac0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 8028a4c:	782b      	ldrb	r3, [r5, #0]
 8028a4e:	f105 0801 	add.w	r8, r5, #1
 8028a52:	f109 3bff 	add.w	fp, r9, #4294967295
 8028a56:	8822      	ldrh	r2, [r4, #0]
 8028a58:	f003 030f 	and.w	r3, r3, #15
 8028a5c:	9804      	ldr	r0, [sp, #16]
 8028a5e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8028a62:	9b03      	ldr	r3, [sp, #12]
 8028a64:	9300      	str	r3, [sp, #0]
 8028a66:	463b      	mov	r3, r7
 8028a68:	f7ff ff52 	bl	8028910 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8028a6c:	f824 0b02 	strh.w	r0, [r4], #2
 8028a70:	f1bb 0f01 	cmp.w	fp, #1
 8028a74:	46a2      	mov	sl, r4
 8028a76:	f104 0404 	add.w	r4, r4, #4
 8028a7a:	dd24      	ble.n	8028ac6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 8028a7c:	f898 3000 	ldrb.w	r3, [r8]
 8028a80:	f1ab 0b02 	sub.w	fp, fp, #2
 8028a84:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8028a88:	091b      	lsrs	r3, r3, #4
 8028a8a:	9804      	ldr	r0, [sp, #16]
 8028a8c:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8028a90:	9b03      	ldr	r3, [sp, #12]
 8028a92:	9300      	str	r3, [sp, #0]
 8028a94:	463b      	mov	r3, r7
 8028a96:	f7ff ff3b 	bl	8028910 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8028a9a:	f824 0c04 	strh.w	r0, [r4, #-4]
 8028a9e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8028aa2:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8028aa6:	f003 030f 	and.w	r3, r3, #15
 8028aaa:	9804      	ldr	r0, [sp, #16]
 8028aac:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8028ab0:	9b03      	ldr	r3, [sp, #12]
 8028ab2:	9300      	str	r3, [sp, #0]
 8028ab4:	463b      	mov	r3, r7
 8028ab6:	f7ff ff2b 	bl	8028910 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8028aba:	f824 0c02 	strh.w	r0, [r4, #-2]
 8028abe:	e7d7      	b.n	8028a70 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 8028ac0:	46a8      	mov	r8, r5
 8028ac2:	46cb      	mov	fp, r9
 8028ac4:	e7d4      	b.n	8028a70 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 8028ac6:	d10e      	bne.n	8028ae6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 8028ac8:	f898 3000 	ldrb.w	r3, [r8]
 8028acc:	f8ba 2000 	ldrh.w	r2, [sl]
 8028ad0:	091b      	lsrs	r3, r3, #4
 8028ad2:	9804      	ldr	r0, [sp, #16]
 8028ad4:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8028ad8:	9b03      	ldr	r3, [sp, #12]
 8028ada:	9300      	str	r3, [sp, #0]
 8028adc:	463b      	mov	r3, r7
 8028ade:	f7ff ff17 	bl	8028910 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8028ae2:	f82a 0b02 	strh.w	r0, [sl], #2
 8028ae6:	9b08      	ldr	r3, [sp, #32]
 8028ae8:	9a05      	ldr	r2, [sp, #20]
 8028aea:	881c      	ldrh	r4, [r3, #0]
 8028aec:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028af0:	eba4 0409 	sub.w	r4, r4, r9
 8028af4:	4413      	add	r3, r2
 8028af6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028af8:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8028afc:	fb93 f3f2 	sdiv	r3, r3, r2
 8028b00:	441d      	add	r5, r3
 8028b02:	e79c      	b.n	8028a3e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 8028b04:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8028b08:	45a3      	cmp	fp, r4
 8028b0a:	d939      	bls.n	8028b80 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8028b0c:	9b06      	ldr	r3, [sp, #24]
 8028b0e:	b1fb      	cbz	r3, 8028b50 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 8028b10:	782b      	ldrb	r3, [r5, #0]
 8028b12:	1c6a      	adds	r2, r5, #1
 8028b14:	f109 30ff 	add.w	r0, r9, #4294967295
 8028b18:	3402      	adds	r4, #2
 8028b1a:	f003 030f 	and.w	r3, r3, #15
 8028b1e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8028b22:	f824 3c02 	strh.w	r3, [r4, #-2]
 8028b26:	2801      	cmp	r0, #1
 8028b28:	4623      	mov	r3, r4
 8028b2a:	f104 0404 	add.w	r4, r4, #4
 8028b2e:	dd12      	ble.n	8028b56 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 8028b30:	7813      	ldrb	r3, [r2, #0]
 8028b32:	3802      	subs	r0, #2
 8028b34:	091b      	lsrs	r3, r3, #4
 8028b36:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8028b3a:	f824 3c04 	strh.w	r3, [r4, #-4]
 8028b3e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8028b42:	f003 030f 	and.w	r3, r3, #15
 8028b46:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8028b4a:	f824 3c02 	strh.w	r3, [r4, #-2]
 8028b4e:	e7ea      	b.n	8028b26 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8028b50:	462a      	mov	r2, r5
 8028b52:	4648      	mov	r0, r9
 8028b54:	e7e7      	b.n	8028b26 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8028b56:	d106      	bne.n	8028b66 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8028b58:	7812      	ldrb	r2, [r2, #0]
 8028b5a:	3302      	adds	r3, #2
 8028b5c:	0912      	lsrs	r2, r2, #4
 8028b5e:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8028b62:	f823 2c02 	strh.w	r2, [r3, #-2]
 8028b66:	880c      	ldrh	r4, [r1, #0]
 8028b68:	9a05      	ldr	r2, [sp, #20]
 8028b6a:	eba4 0409 	sub.w	r4, r4, r9
 8028b6e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8028b72:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028b76:	4413      	add	r3, r2
 8028b78:	fb93 f3f8 	sdiv	r3, r3, r8
 8028b7c:	441d      	add	r5, r3
 8028b7e:	e7c3      	b.n	8028b08 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 8028b80:	4b03      	ldr	r3, [pc, #12]	@ (8028b90 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8028b82:	6818      	ldr	r0, [r3, #0]
 8028b84:	6803      	ldr	r3, [r0, #0]
 8028b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028b88:	4798      	blx	r3
 8028b8a:	b00f      	add	sp, #60	@ 0x3c
 8028b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028b90:	200279d8 	.word	0x200279d8
 8028b94:	200279d2 	.word	0x200279d2

08028b98 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8028b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028b9a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8028b9e:	0a0f      	lsrs	r7, r1, #8
 8028ba0:	2dff      	cmp	r5, #255	@ 0xff
 8028ba2:	d10c      	bne.n	8028bbe <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8028ba4:	2bff      	cmp	r3, #255	@ 0xff
 8028ba6:	d10a      	bne.n	8028bbe <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8028ba8:	0948      	lsrs	r0, r1, #5
 8028baa:	4b25      	ldr	r3, [pc, #148]	@ (8028c40 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 8028bac:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8028bb0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028bb4:	403b      	ands	r3, r7
 8028bb6:	4318      	orrs	r0, r3
 8028bb8:	4308      	orrs	r0, r1
 8028bba:	b280      	uxth	r0, r0
 8028bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028bbe:	fb15 f503 	smulbb	r5, r5, r3
 8028bc2:	1214      	asrs	r4, r2, #8
 8028bc4:	10d6      	asrs	r6, r2, #3
 8028bc6:	b2ab      	uxth	r3, r5
 8028bc8:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8028bcc:	00d0      	lsls	r0, r2, #3
 8028bce:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8028bd2:	1c5d      	adds	r5, r3, #1
 8028bd4:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8028bd8:	b2c0      	uxtb	r0, r0
 8028bda:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8028bde:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8028be2:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8028be6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8028bea:	fa1f fc85 	uxth.w	ip, r5
 8028bee:	43ed      	mvns	r5, r5
 8028bf0:	fb12 f20c 	smulbb	r2, r2, ip
 8028bf4:	b2eb      	uxtb	r3, r5
 8028bf6:	b2fd      	uxtb	r5, r7
 8028bf8:	fb04 2403 	mla	r4, r4, r3, r2
 8028bfc:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8028c00:	fb15 f50c 	smulbb	r5, r5, ip
 8028c04:	b2c8      	uxtb	r0, r1
 8028c06:	b2a4      	uxth	r4, r4
 8028c08:	fb10 f00c 	smulbb	r0, r0, ip
 8028c0c:	fb06 5503 	mla	r5, r6, r3, r5
 8028c10:	fb02 0003 	mla	r0, r2, r3, r0
 8028c14:	b2ad      	uxth	r5, r5
 8028c16:	b283      	uxth	r3, r0
 8028c18:	1c60      	adds	r0, r4, #1
 8028c1a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8028c1e:	1c58      	adds	r0, r3, #1
 8028c20:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028c24:	1c6b      	adds	r3, r5, #1
 8028c26:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8028c2a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028c2e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028c32:	096d      	lsrs	r5, r5, #5
 8028c34:	4320      	orrs	r0, r4
 8028c36:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8028c3a:	4328      	orrs	r0, r5
 8028c3c:	e7be      	b.n	8028bbc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 8028c3e:	bf00      	nop
 8028c40:	00fff800 	.word	0x00fff800

08028c44 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8028c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c48:	461c      	mov	r4, r3
 8028c4a:	b08d      	sub	sp, #52	@ 0x34
 8028c4c:	460d      	mov	r5, r1
 8028c4e:	4616      	mov	r6, r2
 8028c50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8028c52:	4680      	mov	r8, r0
 8028c54:	6861      	ldr	r1, [r4, #4]
 8028c56:	aa08      	add	r2, sp, #32
 8028c58:	6820      	ldr	r0, [r4, #0]
 8028c5a:	f04f 0a02 	mov.w	sl, #2
 8028c5e:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 8028c62:	3604      	adds	r6, #4
 8028c64:	c203      	stmia	r2!, {r0, r1}
 8028c66:	6818      	ldr	r0, [r3, #0]
 8028c68:	aa0a      	add	r2, sp, #40	@ 0x28
 8028c6a:	6859      	ldr	r1, [r3, #4]
 8028c6c:	c203      	stmia	r2!, {r0, r1}
 8028c6e:	a808      	add	r0, sp, #32
 8028c70:	f7ef f95a 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028c74:	4621      	mov	r1, r4
 8028c76:	a80a      	add	r0, sp, #40	@ 0x28
 8028c78:	f7ef f97e 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028c7c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8028c80:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 8028c84:	f002 0301 	and.w	r3, r2, #1
 8028c88:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 8028c8c:	9303      	str	r3, [sp, #12]
 8028c8e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8028c92:	f003 0101 	and.w	r1, r3, #1
 8028c96:	9102      	str	r1, [sp, #8]
 8028c98:	9802      	ldr	r0, [sp, #8]
 8028c9a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8028c9e:	4403      	add	r3, r0
 8028ca0:	fb01 2303 	mla	r3, r1, r3, r2
 8028ca4:	fb93 f3fa 	sdiv	r3, r3, sl
 8028ca8:	441d      	add	r5, r3
 8028caa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8028cae:	441a      	add	r2, r3
 8028cb0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8028cb4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8028cb8:	4419      	add	r1, r3
 8028cba:	4a3e      	ldr	r2, [pc, #248]	@ (8028db4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8028cbc:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 8028cc0:	6810      	ldr	r0, [r2, #0]
 8028cc2:	9205      	str	r2, [sp, #20]
 8028cc4:	6803      	ldr	r3, [r0, #0]
 8028cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028cc8:	4798      	blx	r3
 8028cca:	4b3b      	ldr	r3, [pc, #236]	@ (8028db8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8028ccc:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 8028cd0:	8819      	ldrh	r1, [r3, #0]
 8028cd2:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 8028cd6:	434f      	muls	r7, r1
 8028cd8:	fb01 c404 	mla	r4, r1, r4, ip
 8028cdc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8028ce0:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8028ce4:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8028ce8:	9204      	str	r2, [sp, #16]
 8028cea:	9b04      	ldr	r3, [sp, #16]
 8028cec:	429c      	cmp	r4, r3
 8028cee:	d258      	bcs.n	8028da2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8028cf0:	9b03      	ldr	r3, [sp, #12]
 8028cf2:	2b00      	cmp	r3, #0
 8028cf4:	d034      	beq.n	8028d60 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8028cf6:	782b      	ldrb	r3, [r5, #0]
 8028cf8:	1c6f      	adds	r7, r5, #1
 8028cfa:	f003 030f 	and.w	r3, r3, #15
 8028cfe:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8028d02:	0e0b      	lsrs	r3, r1, #24
 8028d04:	d006      	beq.n	8028d14 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8028d06:	8822      	ldrh	r2, [r4, #0]
 8028d08:	4640      	mov	r0, r8
 8028d0a:	9300      	str	r3, [sp, #0]
 8028d0c:	464b      	mov	r3, r9
 8028d0e:	f7ff ff43 	bl	8028b98 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8028d12:	8020      	strh	r0, [r4, #0]
 8028d14:	3402      	adds	r4, #2
 8028d16:	f10b 3aff 	add.w	sl, fp, #4294967295
 8028d1a:	f1ba 0f01 	cmp.w	sl, #1
 8028d1e:	dd22      	ble.n	8028d66 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8028d20:	783b      	ldrb	r3, [r7, #0]
 8028d22:	091b      	lsrs	r3, r3, #4
 8028d24:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8028d28:	0e0b      	lsrs	r3, r1, #24
 8028d2a:	d006      	beq.n	8028d3a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8028d2c:	8822      	ldrh	r2, [r4, #0]
 8028d2e:	4640      	mov	r0, r8
 8028d30:	9300      	str	r3, [sp, #0]
 8028d32:	464b      	mov	r3, r9
 8028d34:	f7ff ff30 	bl	8028b98 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8028d38:	8020      	strh	r0, [r4, #0]
 8028d3a:	f817 3b01 	ldrb.w	r3, [r7], #1
 8028d3e:	f003 030f 	and.w	r3, r3, #15
 8028d42:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8028d46:	0e0b      	lsrs	r3, r1, #24
 8028d48:	d006      	beq.n	8028d58 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8028d4a:	8862      	ldrh	r2, [r4, #2]
 8028d4c:	4640      	mov	r0, r8
 8028d4e:	9300      	str	r3, [sp, #0]
 8028d50:	464b      	mov	r3, r9
 8028d52:	f7ff ff21 	bl	8028b98 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8028d56:	8060      	strh	r0, [r4, #2]
 8028d58:	3404      	adds	r4, #4
 8028d5a:	f1aa 0a02 	sub.w	sl, sl, #2
 8028d5e:	e7dc      	b.n	8028d1a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8028d60:	462f      	mov	r7, r5
 8028d62:	46da      	mov	sl, fp
 8028d64:	e7d9      	b.n	8028d1a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8028d66:	d10d      	bne.n	8028d84 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8028d68:	783b      	ldrb	r3, [r7, #0]
 8028d6a:	091b      	lsrs	r3, r3, #4
 8028d6c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8028d70:	0e0b      	lsrs	r3, r1, #24
 8028d72:	d006      	beq.n	8028d82 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8028d74:	8822      	ldrh	r2, [r4, #0]
 8028d76:	4640      	mov	r0, r8
 8028d78:	9300      	str	r3, [sp, #0]
 8028d7a:	464b      	mov	r3, r9
 8028d7c:	f7ff ff0c 	bl	8028b98 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8028d80:	8020      	strh	r0, [r4, #0]
 8028d82:	3402      	adds	r4, #2
 8028d84:	9b06      	ldr	r3, [sp, #24]
 8028d86:	9a02      	ldr	r2, [sp, #8]
 8028d88:	881b      	ldrh	r3, [r3, #0]
 8028d8a:	eba3 030b 	sub.w	r3, r3, fp
 8028d8e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8028d92:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8028d96:	4413      	add	r3, r2
 8028d98:	9a07      	ldr	r2, [sp, #28]
 8028d9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8028d9e:	441d      	add	r5, r3
 8028da0:	e7a3      	b.n	8028cea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 8028da2:	9b05      	ldr	r3, [sp, #20]
 8028da4:	6818      	ldr	r0, [r3, #0]
 8028da6:	6803      	ldr	r3, [r0, #0]
 8028da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028daa:	4798      	blx	r3
 8028dac:	b00d      	add	sp, #52	@ 0x34
 8028dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028db2:	bf00      	nop
 8028db4:	200279d8 	.word	0x200279d8
 8028db8:	200279d2 	.word	0x200279d2

08028dbc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 8028dbc:	b570      	push	{r4, r5, r6, lr}
 8028dbe:	1214      	asrs	r4, r2, #8
 8028dc0:	788d      	ldrb	r5, [r1, #2]
 8028dc2:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8028dc6:	10d0      	asrs	r0, r2, #3
 8028dc8:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8028dcc:	00d2      	lsls	r2, r2, #3
 8028dce:	fb15 f503 	smulbb	r5, r5, r3
 8028dd2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8028dd6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8028dda:	b2d2      	uxtb	r2, r2
 8028ddc:	fb04 5506 	mla	r5, r4, r6, r5
 8028de0:	784c      	ldrb	r4, [r1, #1]
 8028de2:	7809      	ldrb	r1, [r1, #0]
 8028de4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8028de8:	fb14 f403 	smulbb	r4, r4, r3
 8028dec:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8028df0:	fb11 f303 	smulbb	r3, r1, r3
 8028df4:	b2ad      	uxth	r5, r5
 8028df6:	fb00 4406 	mla	r4, r0, r6, r4
 8028dfa:	fb02 3306 	mla	r3, r2, r6, r3
 8028dfe:	1c68      	adds	r0, r5, #1
 8028e00:	b2a4      	uxth	r4, r4
 8028e02:	b29b      	uxth	r3, r3
 8028e04:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8028e08:	1c62      	adds	r2, r4, #1
 8028e0a:	1c58      	adds	r0, r3, #1
 8028e0c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8028e10:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8028e14:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028e18:	0964      	lsrs	r4, r4, #5
 8028e1a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028e1e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8028e22:	4328      	orrs	r0, r5
 8028e24:	4320      	orrs	r0, r4
 8028e26:	bd70      	pop	{r4, r5, r6, pc}

08028e28 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8028e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e2c:	b08f      	sub	sp, #60	@ 0x3c
 8028e2e:	461c      	mov	r4, r3
 8028e30:	4682      	mov	sl, r0
 8028e32:	460e      	mov	r6, r1
 8028e34:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8028e38:	4615      	mov	r5, r2
 8028e3a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028e3c:	2f00      	cmp	r7, #0
 8028e3e:	f000 8141 	beq.w	80290c4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 8028e42:	6820      	ldr	r0, [r4, #0]
 8028e44:	aa0a      	add	r2, sp, #40	@ 0x28
 8028e46:	6861      	ldr	r1, [r4, #4]
 8028e48:	f04f 0802 	mov.w	r8, #2
 8028e4c:	3504      	adds	r5, #4
 8028e4e:	c203      	stmia	r2!, {r0, r1}
 8028e50:	6818      	ldr	r0, [r3, #0]
 8028e52:	aa0c      	add	r2, sp, #48	@ 0x30
 8028e54:	6859      	ldr	r1, [r3, #4]
 8028e56:	c203      	stmia	r2!, {r0, r1}
 8028e58:	a80a      	add	r0, sp, #40	@ 0x28
 8028e5a:	f7ef f865 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028e5e:	4621      	mov	r1, r4
 8028e60:	a80c      	add	r0, sp, #48	@ 0x30
 8028e62:	f7ef f889 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028e66:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8028e6a:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8028e6e:	f002 0301 	and.w	r3, r2, #1
 8028e72:	9306      	str	r3, [sp, #24]
 8028e74:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028e78:	f003 0101 	and.w	r1, r3, #1
 8028e7c:	9105      	str	r1, [sp, #20]
 8028e7e:	9805      	ldr	r0, [sp, #20]
 8028e80:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8028e84:	4403      	add	r3, r0
 8028e86:	fb01 2303 	mla	r3, r1, r3, r2
 8028e8a:	fb93 f3f8 	sdiv	r3, r3, r8
 8028e8e:	441e      	add	r6, r3
 8028e90:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8028e94:	441a      	add	r2, r3
 8028e96:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8028e9a:	4419      	add	r1, r3
 8028e9c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8028ea0:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8028ea4:	9303      	str	r3, [sp, #12]
 8028ea6:	4b89      	ldr	r3, [pc, #548]	@ (80290cc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8028ea8:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8028eac:	6818      	ldr	r0, [r3, #0]
 8028eae:	6803      	ldr	r3, [r0, #0]
 8028eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028eb2:	4798      	blx	r3
 8028eb4:	4a86      	ldr	r2, [pc, #536]	@ (80290d0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8028eb6:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8028eba:	2fff      	cmp	r7, #255	@ 0xff
 8028ebc:	8813      	ldrh	r3, [r2, #0]
 8028ebe:	4694      	mov	ip, r2
 8028ec0:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8028ec4:	fb03 9404 	mla	r4, r3, r4, r9
 8028ec8:	fb03 f30b 	mul.w	r3, r3, fp
 8028ecc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8028ed0:	d071      	beq.n	8028fb6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 8028ed2:	43f9      	mvns	r1, r7
 8028ed4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8028ed8:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8028edc:	b2c9      	uxtb	r1, r1
 8028ede:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8028ee2:	9104      	str	r1, [sp, #16]
 8028ee4:	9b07      	ldr	r3, [sp, #28]
 8028ee6:	42a3      	cmp	r3, r4
 8028ee8:	f240 80e7 	bls.w	80290ba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8028eec:	9b06      	ldr	r3, [sp, #24]
 8028eee:	2b00      	cmp	r3, #0
 8028ef0:	d03d      	beq.n	8028f6e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 8028ef2:	7831      	ldrb	r1, [r6, #0]
 8028ef4:	4650      	mov	r0, sl
 8028ef6:	9b04      	ldr	r3, [sp, #16]
 8028ef8:	f106 0801 	add.w	r8, r6, #1
 8028efc:	f001 010f 	and.w	r1, r1, #15
 8028f00:	8822      	ldrh	r2, [r4, #0]
 8028f02:	9300      	str	r3, [sp, #0]
 8028f04:	463b      	mov	r3, r7
 8028f06:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028f0a:	4429      	add	r1, r5
 8028f0c:	f7ff ff56 	bl	8028dbc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8028f10:	9b03      	ldr	r3, [sp, #12]
 8028f12:	f824 0b02 	strh.w	r0, [r4], #2
 8028f16:	f103 3bff 	add.w	fp, r3, #4294967295
 8028f1a:	f1bb 0f01 	cmp.w	fp, #1
 8028f1e:	46a1      	mov	r9, r4
 8028f20:	f104 0404 	add.w	r4, r4, #4
 8028f24:	dd27      	ble.n	8028f76 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 8028f26:	f898 1000 	ldrb.w	r1, [r8]
 8028f2a:	4650      	mov	r0, sl
 8028f2c:	9b04      	ldr	r3, [sp, #16]
 8028f2e:	f1ab 0b02 	sub.w	fp, fp, #2
 8028f32:	0909      	lsrs	r1, r1, #4
 8028f34:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8028f38:	9300      	str	r3, [sp, #0]
 8028f3a:	463b      	mov	r3, r7
 8028f3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028f40:	4429      	add	r1, r5
 8028f42:	f7ff ff3b 	bl	8028dbc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8028f46:	f824 0c04 	strh.w	r0, [r4, #-4]
 8028f4a:	f818 1b01 	ldrb.w	r1, [r8], #1
 8028f4e:	4650      	mov	r0, sl
 8028f50:	9b04      	ldr	r3, [sp, #16]
 8028f52:	f001 010f 	and.w	r1, r1, #15
 8028f56:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8028f5a:	9300      	str	r3, [sp, #0]
 8028f5c:	463b      	mov	r3, r7
 8028f5e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028f62:	4429      	add	r1, r5
 8028f64:	f7ff ff2a 	bl	8028dbc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8028f68:	f824 0c02 	strh.w	r0, [r4, #-2]
 8028f6c:	e7d5      	b.n	8028f1a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8028f6e:	46b0      	mov	r8, r6
 8028f70:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8028f74:	e7d1      	b.n	8028f1a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8028f76:	d10f      	bne.n	8028f98 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 8028f78:	f898 1000 	ldrb.w	r1, [r8]
 8028f7c:	4650      	mov	r0, sl
 8028f7e:	9b04      	ldr	r3, [sp, #16]
 8028f80:	0909      	lsrs	r1, r1, #4
 8028f82:	f8b9 2000 	ldrh.w	r2, [r9]
 8028f86:	9300      	str	r3, [sp, #0]
 8028f88:	463b      	mov	r3, r7
 8028f8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028f8e:	4429      	add	r1, r5
 8028f90:	f7ff ff14 	bl	8028dbc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8028f94:	f829 0b02 	strh.w	r0, [r9], #2
 8028f98:	9b08      	ldr	r3, [sp, #32]
 8028f9a:	9a05      	ldr	r2, [sp, #20]
 8028f9c:	881c      	ldrh	r4, [r3, #0]
 8028f9e:	9b03      	ldr	r3, [sp, #12]
 8028fa0:	1ae4      	subs	r4, r4, r3
 8028fa2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028fa6:	4413      	add	r3, r2
 8028fa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028faa:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8028fae:	fb93 f3f2 	sdiv	r3, r3, r2
 8028fb2:	441e      	add	r6, r3
 8028fb4:	e796      	b.n	8028ee4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 8028fb6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8028fba:	4f46      	ldr	r7, [pc, #280]	@ (80290d4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8028fbc:	42a3      	cmp	r3, r4
 8028fbe:	d97c      	bls.n	80290ba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8028fc0:	9a06      	ldr	r2, [sp, #24]
 8028fc2:	2a00      	cmp	r2, #0
 8028fc4:	d054      	beq.n	8029070 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 8028fc6:	7830      	ldrb	r0, [r6, #0]
 8028fc8:	1c71      	adds	r1, r6, #1
 8028fca:	f000 000f 	and.w	r0, r0, #15
 8028fce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028fd2:	eb05 0e00 	add.w	lr, r5, r0
 8028fd6:	5c28      	ldrb	r0, [r5, r0]
 8028fd8:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8028fdc:	f89e e001 	ldrb.w	lr, [lr, #1]
 8028fe0:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8028fe4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028fe8:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8028fec:	ea42 020e 	orr.w	r2, r2, lr
 8028ff0:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8028ff4:	f824 2b02 	strh.w	r2, [r4], #2
 8028ff8:	9a03      	ldr	r2, [sp, #12]
 8028ffa:	f102 3eff 	add.w	lr, r2, #4294967295
 8028ffe:	f1be 0f01 	cmp.w	lr, #1
 8029002:	4620      	mov	r0, r4
 8029004:	f104 0404 	add.w	r4, r4, #4
 8029008:	dd36      	ble.n	8029078 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 802900a:	7808      	ldrb	r0, [r1, #0]
 802900c:	f1ae 0e02 	sub.w	lr, lr, #2
 8029010:	0900      	lsrs	r0, r0, #4
 8029012:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8029016:	eb05 0a00 	add.w	sl, r5, r0
 802901a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802901e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8029022:	00d2      	lsls	r2, r2, #3
 8029024:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8029028:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802902c:	ea49 0202 	orr.w	r2, r9, r2
 8029030:	f815 9000 	ldrb.w	r9, [r5, r0]
 8029034:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8029038:	f824 2c04 	strh.w	r2, [r4, #-4]
 802903c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8029040:	f000 000f 	and.w	r0, r0, #15
 8029044:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8029048:	eb05 0a00 	add.w	sl, r5, r0
 802904c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8029050:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8029054:	00d2      	lsls	r2, r2, #3
 8029056:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802905a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802905e:	ea49 0202 	orr.w	r2, r9, r2
 8029062:	f815 9000 	ldrb.w	r9, [r5, r0]
 8029066:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802906a:	f824 2c02 	strh.w	r2, [r4, #-2]
 802906e:	e7c6      	b.n	8028ffe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8029070:	4631      	mov	r1, r6
 8029072:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8029076:	e7c2      	b.n	8028ffe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8029078:	d111      	bne.n	802909e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 802907a:	7809      	ldrb	r1, [r1, #0]
 802907c:	0909      	lsrs	r1, r1, #4
 802907e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029082:	186c      	adds	r4, r5, r1
 8029084:	5c69      	ldrb	r1, [r5, r1]
 8029086:	78a2      	ldrb	r2, [r4, #2]
 8029088:	7864      	ldrb	r4, [r4, #1]
 802908a:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802908e:	00e4      	lsls	r4, r4, #3
 8029090:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8029094:	4322      	orrs	r2, r4
 8029096:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 802909a:	f820 2b02 	strh.w	r2, [r0], #2
 802909e:	9a03      	ldr	r2, [sp, #12]
 80290a0:	f8bc 4000 	ldrh.w	r4, [ip]
 80290a4:	9905      	ldr	r1, [sp, #20]
 80290a6:	1aa4      	subs	r4, r4, r2
 80290a8:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80290ac:	440a      	add	r2, r1
 80290ae:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80290b2:	fb92 f2f8 	sdiv	r2, r2, r8
 80290b6:	4416      	add	r6, r2
 80290b8:	e780      	b.n	8028fbc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 80290ba:	4b04      	ldr	r3, [pc, #16]	@ (80290cc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 80290bc:	6818      	ldr	r0, [r3, #0]
 80290be:	6803      	ldr	r3, [r0, #0]
 80290c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80290c2:	4798      	blx	r3
 80290c4:	b00f      	add	sp, #60	@ 0x3c
 80290c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80290ca:	bf00      	nop
 80290cc:	200279d8 	.word	0x200279d8
 80290d0:	200279d2 	.word	0x200279d2
 80290d4:	fffff800 	.word	0xfffff800

080290d8 <CRC_Lock>:
 80290d8:	4a2d      	ldr	r2, [pc, #180]	@ (8029190 <CRC_Lock+0xb8>)
 80290da:	b530      	push	{r4, r5, lr}
 80290dc:	6813      	ldr	r3, [r2, #0]
 80290de:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80290e2:	f023 0301 	bic.w	r3, r3, #1
 80290e6:	6013      	str	r3, [r2, #0]
 80290e8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80290ec:	4b29      	ldr	r3, [pc, #164]	@ (8029194 <CRC_Lock+0xbc>)
 80290ee:	681c      	ldr	r4, [r3, #0]
 80290f0:	4014      	ands	r4, r2
 80290f2:	42ac      	cmp	r4, r5
 80290f4:	d005      	beq.n	8029102 <CRC_Lock+0x2a>
 80290f6:	681c      	ldr	r4, [r3, #0]
 80290f8:	f24c 2570 	movw	r5, #49776	@ 0xc270
 80290fc:	4014      	ands	r4, r2
 80290fe:	42ac      	cmp	r4, r5
 8029100:	d125      	bne.n	802914e <CRC_Lock+0x76>
 8029102:	4b25      	ldr	r3, [pc, #148]	@ (8029198 <CRC_Lock+0xc0>)
 8029104:	681b      	ldr	r3, [r3, #0]
 8029106:	2b00      	cmp	r3, #0
 8029108:	d139      	bne.n	802917e <CRC_Lock+0xa6>
 802910a:	4b24      	ldr	r3, [pc, #144]	@ (802919c <CRC_Lock+0xc4>)
 802910c:	681a      	ldr	r2, [r3, #0]
 802910e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029112:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8029116:	d00d      	beq.n	8029134 <CRC_Lock+0x5c>
 8029118:	681a      	ldr	r2, [r3, #0]
 802911a:	f240 4483 	movw	r4, #1155	@ 0x483
 802911e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029122:	42a2      	cmp	r2, r4
 8029124:	d006      	beq.n	8029134 <CRC_Lock+0x5c>
 8029126:	681b      	ldr	r3, [r3, #0]
 8029128:	f240 4285 	movw	r2, #1157	@ 0x485
 802912c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029130:	4293      	cmp	r3, r2
 8029132:	d124      	bne.n	802917e <CRC_Lock+0xa6>
 8029134:	4b1a      	ldr	r3, [pc, #104]	@ (80291a0 <CRC_Lock+0xc8>)
 8029136:	2201      	movs	r2, #1
 8029138:	601a      	str	r2, [r3, #0]
 802913a:	681a      	ldr	r2, [r3, #0]
 802913c:	2a00      	cmp	r2, #0
 802913e:	d1fc      	bne.n	802913a <CRC_Lock+0x62>
 8029140:	4b18      	ldr	r3, [pc, #96]	@ (80291a4 <CRC_Lock+0xcc>)
 8029142:	6018      	str	r0, [r3, #0]
 8029144:	6818      	ldr	r0, [r3, #0]
 8029146:	1a43      	subs	r3, r0, r1
 8029148:	4258      	negs	r0, r3
 802914a:	4158      	adcs	r0, r3
 802914c:	e00e      	b.n	802916c <CRC_Lock+0x94>
 802914e:	681b      	ldr	r3, [r3, #0]
 8029150:	4013      	ands	r3, r2
 8029152:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8029156:	4293      	cmp	r3, r2
 8029158:	d111      	bne.n	802917e <CRC_Lock+0xa6>
 802915a:	4b13      	ldr	r3, [pc, #76]	@ (80291a8 <CRC_Lock+0xd0>)
 802915c:	f240 4286 	movw	r2, #1158	@ 0x486
 8029160:	681b      	ldr	r3, [r3, #0]
 8029162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029166:	4293      	cmp	r3, r2
 8029168:	d001      	beq.n	802916e <CRC_Lock+0x96>
 802916a:	2000      	movs	r0, #0
 802916c:	bd30      	pop	{r4, r5, pc}
 802916e:	4b0f      	ldr	r3, [pc, #60]	@ (80291ac <CRC_Lock+0xd4>)
 8029170:	2201      	movs	r2, #1
 8029172:	601a      	str	r2, [r3, #0]
 8029174:	681a      	ldr	r2, [r3, #0]
 8029176:	2a00      	cmp	r2, #0
 8029178:	d1fc      	bne.n	8029174 <CRC_Lock+0x9c>
 802917a:	4b0d      	ldr	r3, [pc, #52]	@ (80291b0 <CRC_Lock+0xd8>)
 802917c:	e7e1      	b.n	8029142 <CRC_Lock+0x6a>
 802917e:	4b0d      	ldr	r3, [pc, #52]	@ (80291b4 <CRC_Lock+0xdc>)
 8029180:	2201      	movs	r2, #1
 8029182:	601a      	str	r2, [r3, #0]
 8029184:	681a      	ldr	r2, [r3, #0]
 8029186:	2a00      	cmp	r2, #0
 8029188:	d1fc      	bne.n	8029184 <CRC_Lock+0xac>
 802918a:	4b0b      	ldr	r3, [pc, #44]	@ (80291b8 <CRC_Lock+0xe0>)
 802918c:	e7d9      	b.n	8029142 <CRC_Lock+0x6a>
 802918e:	bf00      	nop
 8029190:	e0002000 	.word	0xe0002000
 8029194:	e000ed00 	.word	0xe000ed00
 8029198:	e0042000 	.word	0xe0042000
 802919c:	5c001000 	.word	0x5c001000
 80291a0:	58024c08 	.word	0x58024c08
 80291a4:	58024c00 	.word	0x58024c00
 80291a8:	46008ff0 	.word	0x46008ff0
 80291ac:	46024c08 	.word	0x46024c08
 80291b0:	46024c00 	.word	0x46024c00
 80291b4:	40023008 	.word	0x40023008
 80291b8:	40023000 	.word	0x40023000

080291bc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80291bc:	6101      	str	r1, [r0, #16]
 80291be:	4770      	bx	lr

080291c0 <_ZN8touchgfx8Gestures4tickEv>:
 80291c0:	7b83      	ldrb	r3, [r0, #14]
 80291c2:	b14b      	cbz	r3, 80291d8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80291c4:	8903      	ldrh	r3, [r0, #8]
 80291c6:	3301      	adds	r3, #1
 80291c8:	b29b      	uxth	r3, r3
 80291ca:	2b07      	cmp	r3, #7
 80291cc:	8103      	strh	r3, [r0, #8]
 80291ce:	bf81      	itttt	hi
 80291d0:	2300      	movhi	r3, #0
 80291d2:	8143      	strhhi	r3, [r0, #10]
 80291d4:	8183      	strhhi	r3, [r0, #12]
 80291d6:	7383      	strbhi	r3, [r0, #14]
 80291d8:	4770      	bx	lr
	...

080291dc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80291dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80291e0:	4698      	mov	r8, r3
 80291e2:	8883      	ldrh	r3, [r0, #4]
 80291e4:	4604      	mov	r4, r0
 80291e6:	4617      	mov	r7, r2
 80291e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80291ec:	eba8 0303 	sub.w	r3, r8, r3
 80291f0:	4a19      	ldr	r2, [pc, #100]	@ (8029258 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80291f2:	460e      	mov	r6, r1
 80291f4:	b21b      	sxth	r3, r3
 80291f6:	88c1      	ldrh	r1, [r0, #6]
 80291f8:	9200      	str	r2, [sp, #0]
 80291fa:	2000      	movs	r0, #0
 80291fc:	2b00      	cmp	r3, #0
 80291fe:	8aa2      	ldrh	r2, [r4, #20]
 8029200:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8029204:	bfb8      	it	lt
 8029206:	425b      	neglt	r3, r3
 8029208:	f88d 0004 	strb.w	r0, [sp, #4]
 802920c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8029210:	b21b      	sxth	r3, r3
 8029212:	f8ad 800a 	strh.w	r8, [sp, #10]
 8029216:	f8ad 500c 	strh.w	r5, [sp, #12]
 802921a:	4293      	cmp	r3, r2
 802921c:	dc07      	bgt.n	802922e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802921e:	1a69      	subs	r1, r5, r1
 8029220:	b209      	sxth	r1, r1
 8029222:	2900      	cmp	r1, #0
 8029224:	bfb8      	it	lt
 8029226:	4249      	neglt	r1, r1
 8029228:	b209      	sxth	r1, r1
 802922a:	428a      	cmp	r2, r1
 802922c:	da10      	bge.n	8029250 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802922e:	6920      	ldr	r0, [r4, #16]
 8029230:	4669      	mov	r1, sp
 8029232:	eba8 0606 	sub.w	r6, r8, r6
 8029236:	1bef      	subs	r7, r5, r7
 8029238:	6803      	ldr	r3, [r0, #0]
 802923a:	685b      	ldr	r3, [r3, #4]
 802923c:	4798      	blx	r3
 802923e:	2300      	movs	r3, #0
 8029240:	2001      	movs	r0, #1
 8029242:	8166      	strh	r6, [r4, #10]
 8029244:	8123      	strh	r3, [r4, #8]
 8029246:	81a7      	strh	r7, [r4, #12]
 8029248:	f8a4 8004 	strh.w	r8, [r4, #4]
 802924c:	80e5      	strh	r5, [r4, #6]
 802924e:	73a0      	strb	r0, [r4, #14]
 8029250:	b004      	add	sp, #16
 8029252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029256:	bf00      	nop
 8029258:	0802eef8 	.word	0x0802eef8

0802925c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802925c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802925e:	461e      	mov	r6, r3
 8029260:	1e4b      	subs	r3, r1, #1
 8029262:	b085      	sub	sp, #20
 8029264:	4604      	mov	r4, r0
 8029266:	2b01      	cmp	r3, #1
 8029268:	460d      	mov	r5, r1
 802926a:	4617      	mov	r7, r2
 802926c:	d84b      	bhi.n	8029306 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802926e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8029272:	1cd3      	adds	r3, r2, #3
 8029274:	b29b      	uxth	r3, r3
 8029276:	2b06      	cmp	r3, #6
 8029278:	d916      	bls.n	80292a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802927a:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802931c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802927e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029282:	f8cd c004 	str.w	ip, [sp, #4]
 8029286:	f04f 0c00 	mov.w	ip, #0
 802928a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802928e:	6900      	ldr	r0, [r0, #16]
 8029290:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029294:	a901      	add	r1, sp, #4
 8029296:	f88d c008 	strb.w	ip, [sp, #8]
 802929a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802929e:	f8ad 300e 	strh.w	r3, [sp, #14]
 80292a2:	6803      	ldr	r3, [r0, #0]
 80292a4:	689b      	ldr	r3, [r3, #8]
 80292a6:	4798      	blx	r3
 80292a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80292ac:	1cd3      	adds	r3, r2, #3
 80292ae:	b29b      	uxth	r3, r3
 80292b0:	2b06      	cmp	r3, #6
 80292b2:	d916      	bls.n	80292e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80292b4:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802931c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80292b8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80292bc:	f8cd c004 	str.w	ip, [sp, #4]
 80292c0:	f04f 0c01 	mov.w	ip, #1
 80292c4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80292c8:	6920      	ldr	r0, [r4, #16]
 80292ca:	f8ad 100c 	strh.w	r1, [sp, #12]
 80292ce:	a901      	add	r1, sp, #4
 80292d0:	f88d c008 	strb.w	ip, [sp, #8]
 80292d4:	f8ad 200a 	strh.w	r2, [sp, #10]
 80292d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80292dc:	6803      	ldr	r3, [r0, #0]
 80292de:	689b      	ldr	r3, [r3, #8]
 80292e0:	4798      	blx	r3
 80292e2:	4b0d      	ldr	r3, [pc, #52]	@ (8029318 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80292e4:	a901      	add	r1, sp, #4
 80292e6:	6920      	ldr	r0, [r4, #16]
 80292e8:	9301      	str	r3, [sp, #4]
 80292ea:	2300      	movs	r3, #0
 80292ec:	f88d 5008 	strb.w	r5, [sp, #8]
 80292f0:	f8ad 700a 	strh.w	r7, [sp, #10]
 80292f4:	f8ad 600c 	strh.w	r6, [sp, #12]
 80292f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80292fc:	6803      	ldr	r3, [r0, #0]
 80292fe:	681b      	ldr	r3, [r3, #0]
 8029300:	4798      	blx	r3
 8029302:	b005      	add	sp, #20
 8029304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029306:	2900      	cmp	r1, #0
 8029308:	d1eb      	bne.n	80292e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802930a:	80a2      	strh	r2, [r4, #4]
 802930c:	80c6      	strh	r6, [r0, #6]
 802930e:	60a1      	str	r1, [r4, #8]
 8029310:	81a1      	strh	r1, [r4, #12]
 8029312:	73a1      	strb	r1, [r4, #14]
 8029314:	e7e5      	b.n	80292e2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029316:	bf00      	nop
 8029318:	0802eee4 	.word	0x0802eee4
 802931c:	0802ef0c 	.word	0x0802ef0c

08029320 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8029320:	10c9      	asrs	r1, r1, #3
 8029322:	2900      	cmp	r1, #0
 8029324:	bfb8      	it	lt
 8029326:	4249      	neglt	r1, r1
 8029328:	2801      	cmp	r0, #1
 802932a:	d108      	bne.n	802933e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802932c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8029330:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8029334:	4601      	mov	r1, r0
 8029336:	dd02      	ble.n	802933e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8029338:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 802933c:	4770      	bx	lr
 802933e:	29ff      	cmp	r1, #255	@ 0xff
 8029340:	bfa8      	it	ge
 8029342:	21ff      	movge	r1, #255	@ 0xff
 8029344:	4608      	mov	r0, r1
 8029346:	4770      	bx	lr

08029348 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8029348:	b410      	push	{r4}
 802934a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802934e:	429c      	cmp	r4, r3
 8029350:	d803      	bhi.n	802935a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8029352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029356:	f7ed b90d 	b.w	8016574 <_ZN8touchgfx7Outline6lineToEii>
 802935a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802935e:	4770      	bx	lr

08029360 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8029360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029364:	b08b      	sub	sp, #44	@ 0x2c
 8029366:	4606      	mov	r6, r0
 8029368:	468a      	mov	sl, r1
 802936a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802936e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8029372:	9308      	str	r3, [sp, #32]
 8029374:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8029378:	9309      	str	r3, [sp, #36]	@ 0x24
 802937a:	f7ed fa66 	bl	801684a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802937e:	68b5      	ldr	r5, [r6, #8]
 8029380:	4604      	mov	r4, r0
 8029382:	2d00      	cmp	r5, #0
 8029384:	d044      	beq.n	8029410 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8029386:	6873      	ldr	r3, [r6, #4]
 8029388:	42ab      	cmp	r3, r5
 802938a:	d33d      	bcc.n	8029408 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802938c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8029390:	f04f 0800 	mov.w	r8, #0
 8029394:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8029398:	eb02 0b03 	add.w	fp, r2, r3
 802939c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80293a0:	fb02 1203 	mla	r2, r2, r3, r1
 80293a4:	9205      	str	r2, [sp, #20]
 80293a6:	1e6a      	subs	r2, r5, #1
 80293a8:	9204      	str	r2, [sp, #16]
 80293aa:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 80293ae:	f9b4 7000 	ldrsh.w	r7, [r4]
 80293b2:	454b      	cmp	r3, r9
 80293b4:	463a      	mov	r2, r7
 80293b6:	d008      	beq.n	80293ca <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 80293b8:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 80293bc:	eb03 0b09 	add.w	fp, r3, r9
 80293c0:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80293c4:	fb03 1309 	mla	r3, r3, r9, r1
 80293c8:	9305      	str	r3, [sp, #20]
 80293ca:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80293ce:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80293d2:	4498      	add	r8, r3
 80293d4:	9b04      	ldr	r3, [sp, #16]
 80293d6:	3b01      	subs	r3, #1
 80293d8:	9304      	str	r3, [sp, #16]
 80293da:	9b04      	ldr	r3, [sp, #16]
 80293dc:	3301      	adds	r3, #1
 80293de:	d015      	beq.n	802940c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 80293e0:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 80293e4:	42bb      	cmp	r3, r7
 80293e6:	d117      	bne.n	8029418 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 80293e8:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80293ec:	9b04      	ldr	r3, [sp, #16]
 80293ee:	4548      	cmp	r0, r9
 80293f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80293f4:	d17d      	bne.n	80294f2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 80293f6:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80293fa:	4401      	add	r1, r0
 80293fc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8029400:	4480      	add	r8, r0
 8029402:	e7e9      	b.n	80293d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8029404:	461f      	mov	r7, r3
 8029406:	e042      	b.n	802948e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8029408:	2000      	movs	r0, #0
 802940a:	e002      	b.n	8029412 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802940c:	2900      	cmp	r1, #0
 802940e:	d16d      	bne.n	80294ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8029410:	2001      	movs	r0, #1
 8029412:	b00b      	add	sp, #44	@ 0x2c
 8029414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029418:	b379      	cbz	r1, 802947a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802941a:	2f00      	cmp	r7, #0
 802941c:	db29      	blt.n	8029472 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802941e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8029422:	42bb      	cmp	r3, r7
 8029424:	dd25      	ble.n	8029472 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8029426:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802942a:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802942e:	f7ff ff77 	bl	8029320 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8029432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029434:	fb10 f003 	smulbb	r0, r0, r3
 8029438:	b280      	uxth	r0, r0
 802943a:	1c41      	adds	r1, r0, #1
 802943c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8029440:	1209      	asrs	r1, r1, #8
 8029442:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8029446:	d014      	beq.n	8029472 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8029448:	b2c9      	uxtb	r1, r1
 802944a:	9808      	ldr	r0, [sp, #32]
 802944c:	b2ba      	uxth	r2, r7
 802944e:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8029450:	9102      	str	r1, [sp, #8]
 8029452:	2101      	movs	r1, #1
 8029454:	4413      	add	r3, r2
 8029456:	4402      	add	r2, r0
 8029458:	9101      	str	r1, [sp, #4]
 802945a:	fa0f f18b 	sxth.w	r1, fp
 802945e:	f8da 0000 	ldr.w	r0, [sl]
 8029462:	b21b      	sxth	r3, r3
 8029464:	9100      	str	r1, [sp, #0]
 8029466:	b212      	sxth	r2, r2
 8029468:	6941      	ldr	r1, [r0, #20]
 802946a:	4650      	mov	r0, sl
 802946c:	460d      	mov	r5, r1
 802946e:	9905      	ldr	r1, [sp, #20]
 8029470:	47a8      	blx	r5
 8029472:	9b04      	ldr	r3, [sp, #16]
 8029474:	1c7a      	adds	r2, r7, #1
 8029476:	3301      	adds	r3, #1
 8029478:	d0ca      	beq.n	8029410 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802947a:	f9b4 7000 	ldrsh.w	r7, [r4]
 802947e:	1abb      	subs	r3, r7, r2
 8029480:	2b00      	cmp	r3, #0
 8029482:	dd31      	ble.n	80294e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029484:	2a00      	cmp	r2, #0
 8029486:	dabd      	bge.n	8029404 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8029488:	2f00      	cmp	r7, #0
 802948a:	dd2d      	ble.n	80294e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802948c:	2200      	movs	r2, #0
 802948e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8029492:	19d1      	adds	r1, r2, r7
 8029494:	4299      	cmp	r1, r3
 8029496:	db02      	blt.n	802949e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8029498:	1a9f      	subs	r7, r3, r2
 802949a:	2f00      	cmp	r7, #0
 802949c:	dd24      	ble.n	80294e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802949e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80294a2:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 80294a6:	f7ff ff3b 	bl	8029320 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 80294aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80294ac:	fb10 f003 	smulbb	r0, r0, r3
 80294b0:	b280      	uxth	r0, r0
 80294b2:	1c41      	adds	r1, r0, #1
 80294b4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80294b8:	1209      	asrs	r1, r1, #8
 80294ba:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80294be:	d013      	beq.n	80294e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80294c0:	b292      	uxth	r2, r2
 80294c2:	9808      	ldr	r0, [sp, #32]
 80294c4:	b2c9      	uxtb	r1, r1
 80294c6:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80294c8:	b23f      	sxth	r7, r7
 80294ca:	4413      	add	r3, r2
 80294cc:	9102      	str	r1, [sp, #8]
 80294ce:	4402      	add	r2, r0
 80294d0:	fa0f f18b 	sxth.w	r1, fp
 80294d4:	f8da 0000 	ldr.w	r0, [sl]
 80294d8:	b21b      	sxth	r3, r3
 80294da:	9100      	str	r1, [sp, #0]
 80294dc:	b212      	sxth	r2, r2
 80294de:	9701      	str	r7, [sp, #4]
 80294e0:	9905      	ldr	r1, [sp, #20]
 80294e2:	6947      	ldr	r7, [r0, #20]
 80294e4:	4650      	mov	r0, sl
 80294e6:	47b8      	blx	r7
 80294e8:	464b      	mov	r3, r9
 80294ea:	e75e      	b.n	80293aa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 80294ec:	2f00      	cmp	r7, #0
 80294ee:	da96      	bge.n	802941e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 80294f0:	e78e      	b.n	8029410 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80294f2:	2900      	cmp	r1, #0
 80294f4:	d0f8      	beq.n	80294e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80294f6:	e790      	b.n	802941a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

080294f8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 80294f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80294fc:	461e      	mov	r6, r3
 80294fe:	4b36      	ldr	r3, [pc, #216]	@ (80295d8 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8029500:	2500      	movs	r5, #0
 8029502:	f100 0814 	add.w	r8, r0, #20
 8029506:	4604      	mov	r4, r0
 8029508:	4617      	mov	r7, r2
 802950a:	e9c0 3100 	strd	r3, r1, [r0]
 802950e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8029512:	8185      	strh	r5, [r0, #12]
 8029514:	8103      	strh	r3, [r0, #8]
 8029516:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802951a:	81c5      	strh	r5, [r0, #14]
 802951c:	7283      	strb	r3, [r0, #10]
 802951e:	8205      	strh	r5, [r0, #16]
 8029520:	8245      	strh	r5, [r0, #18]
 8029522:	4640      	mov	r0, r8
 8029524:	f7ec fb6c 	bl	8015c00 <_ZN8touchgfx7OutlineC1Ev>
 8029528:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 802952c:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8029530:	466b      	mov	r3, sp
 8029532:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8029536:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802953a:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802953e:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8029542:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8029546:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802954a:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802954e:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8029552:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8029556:	6830      	ldr	r0, [r6, #0]
 8029558:	6871      	ldr	r1, [r6, #4]
 802955a:	8872      	ldrh	r2, [r6, #2]
 802955c:	8835      	ldrh	r5, [r6, #0]
 802955e:	c303      	stmia	r3!, {r0, r1}
 8029560:	887b      	ldrh	r3, [r7, #2]
 8029562:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8029566:	4413      	add	r3, r2
 8029568:	883a      	ldrh	r2, [r7, #0]
 802956a:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802956e:	442a      	add	r2, r5
 8029570:	81e3      	strh	r3, [r4, #14]
 8029572:	8220      	strh	r0, [r4, #16]
 8029574:	4668      	mov	r0, sp
 8029576:	81a2      	strh	r2, [r4, #12]
 8029578:	8261      	strh	r1, [r4, #18]
 802957a:	4639      	mov	r1, r7
 802957c:	f7ee fcfc 	bl	8017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029580:	f104 000c 	add.w	r0, r4, #12
 8029584:	f7ee fcd0 	bl	8017f28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029588:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802958c:	f8bd 2000 	ldrh.w	r2, [sp]
 8029590:	4640      	mov	r0, r8
 8029592:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8029596:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802959a:	f7ec fb15 	bl	8015bc8 <_ZN8touchgfx7Outline5resetEv>
 802959e:	f9bd 3000 	ldrsh.w	r3, [sp]
 80295a2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80295a6:	4620      	mov	r0, r4
 80295a8:	015b      	lsls	r3, r3, #5
 80295aa:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80295ac:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80295b0:	015b      	lsls	r3, r3, #5
 80295b2:	6523      	str	r3, [r4, #80]	@ 0x50
 80295b4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80295b8:	015b      	lsls	r3, r3, #5
 80295ba:	6563      	str	r3, [r4, #84]	@ 0x54
 80295bc:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80295c0:	015b      	lsls	r3, r3, #5
 80295c2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80295c4:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80295c8:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 80295cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80295d0:	b002      	add	sp, #8
 80295d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80295d6:	bf00      	nop
 80295d8:	0802f230 	.word	0x0802f230

080295dc <_ZN8touchgfx6Canvas5closeEv>:
 80295dc:	b538      	push	{r3, r4, r5, lr}
 80295de:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80295e2:	4604      	mov	r4, r0
 80295e4:	b193      	cbz	r3, 802960c <_ZN8touchgfx6Canvas5closeEv+0x30>
 80295e6:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 80295ea:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 80295ee:	4213      	tst	r3, r2
 80295f0:	d10c      	bne.n	802960c <_ZN8touchgfx6Canvas5closeEv+0x30>
 80295f2:	f100 0514 	add.w	r5, r0, #20
 80295f6:	b123      	cbz	r3, 8029602 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80295f8:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 80295fc:	4628      	mov	r0, r5
 80295fe:	f7ff fea3 	bl	8029348 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029602:	4628      	mov	r0, r5
 8029604:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8029608:	f7ff fe9e 	bl	8029348 <_ZN8touchgfx10Rasterizer6lineToEii>
 802960c:	2300      	movs	r3, #0
 802960e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8029612:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8029616:	4298      	cmp	r0, r3
 8029618:	bf34      	ite	cc
 802961a:	2000      	movcc	r0, #0
 802961c:	2001      	movcs	r0, #1
 802961e:	bd38      	pop	{r3, r4, r5, pc}

08029620 <_ZN8touchgfx6Canvas6renderEh>:
 8029620:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8029624:	7a85      	ldrb	r5, [r0, #10]
 8029626:	4604      	mov	r4, r0
 8029628:	4369      	muls	r1, r5
 802962a:	1c4d      	adds	r5, r1, #1
 802962c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8029630:	122d      	asrs	r5, r5, #8
 8029632:	f000 8098 	beq.w	8029766 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8029636:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802963a:	2b00      	cmp	r3, #0
 802963c:	f000 8093 	beq.w	8029766 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8029640:	f7ff ffcc 	bl	80295dc <_ZN8touchgfx6Canvas5closeEv>
 8029644:	4607      	mov	r7, r0
 8029646:	2800      	cmp	r0, #0
 8029648:	d045      	beq.n	80296d6 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802964a:	6860      	ldr	r0, [r4, #4]
 802964c:	4e47      	ldr	r6, [pc, #284]	@ (802976c <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802964e:	6803      	ldr	r3, [r0, #0]
 8029650:	6837      	ldr	r7, [r6, #0]
 8029652:	689b      	ldr	r3, [r3, #8]
 8029654:	4798      	blx	r3
 8029656:	4601      	mov	r1, r0
 8029658:	4638      	mov	r0, r7
 802965a:	f7e9 f9e5 	bl	8012a28 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802965e:	4607      	mov	r7, r0
 8029660:	f7db fb5e 	bl	8004d20 <_ZN8touchgfx3HAL3lcdEv>
 8029664:	6803      	ldr	r3, [r0, #0]
 8029666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029668:	4798      	blx	r3
 802966a:	4680      	mov	r8, r0
 802966c:	f7db fb58 	bl	8004d20 <_ZN8touchgfx3HAL3lcdEv>
 8029670:	6803      	ldr	r3, [r0, #0]
 8029672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029674:	4798      	blx	r3
 8029676:	280b      	cmp	r0, #11
 8029678:	d85a      	bhi.n	8029730 <_ZN8touchgfx6Canvas6renderEh+0x110>
 802967a:	e8df f000 	tbb	[pc, r0]
 802967e:	5b50      	.short	0x5b50
 8029680:	3059066b 	.word	0x3059066b
 8029684:	64646440 	.word	0x64646440
 8029688:	6464      	.short	0x6464
 802968a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802968e:	2208      	movs	r2, #8
 8029690:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029694:	fb91 f2f2 	sdiv	r2, r1, r2
 8029698:	fb08 2303 	mla	r3, r8, r3, r2
 802969c:	441f      	add	r7, r3
 802969e:	424b      	negs	r3, r1
 80296a0:	f001 0107 	and.w	r1, r1, #7
 80296a4:	f003 0307 	and.w	r3, r3, #7
 80296a8:	bf58      	it	pl
 80296aa:	4259      	negpl	r1, r3
 80296ac:	b2c9      	uxtb	r1, r1
 80296ae:	b2ed      	uxtb	r5, r5
 80296b0:	463a      	mov	r2, r7
 80296b2:	fa0f f388 	sxth.w	r3, r8
 80296b6:	f104 0014 	add.w	r0, r4, #20
 80296ba:	e9cd 1500 	strd	r1, r5, [sp]
 80296be:	6861      	ldr	r1, [r4, #4]
 80296c0:	f7ff fe4e 	bl	8029360 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80296c4:	4607      	mov	r7, r0
 80296c6:	6860      	ldr	r0, [r4, #4]
 80296c8:	6803      	ldr	r3, [r0, #0]
 80296ca:	691b      	ldr	r3, [r3, #16]
 80296cc:	4798      	blx	r3
 80296ce:	6830      	ldr	r0, [r6, #0]
 80296d0:	6803      	ldr	r3, [r0, #0]
 80296d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80296d4:	4798      	blx	r3
 80296d6:	4638      	mov	r0, r7
 80296d8:	b002      	add	sp, #8
 80296da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80296de:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80296e2:	2204      	movs	r2, #4
 80296e4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80296e8:	fb91 f2f2 	sdiv	r2, r1, r2
 80296ec:	fb08 2303 	mla	r3, r8, r3, r2
 80296f0:	441f      	add	r7, r3
 80296f2:	424b      	negs	r3, r1
 80296f4:	f001 0103 	and.w	r1, r1, #3
 80296f8:	f003 0303 	and.w	r3, r3, #3
 80296fc:	e7d4      	b.n	80296a8 <_ZN8touchgfx6Canvas6renderEh+0x88>
 80296fe:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8029702:	2202      	movs	r2, #2
 8029704:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029708:	2900      	cmp	r1, #0
 802970a:	fb91 f2f2 	sdiv	r2, r1, r2
 802970e:	f001 0101 	and.w	r1, r1, #1
 8029712:	fb08 2303 	mla	r3, r8, r3, r2
 8029716:	bfb8      	it	lt
 8029718:	4249      	neglt	r1, r1
 802971a:	441f      	add	r7, r3
 802971c:	e7c6      	b.n	80296ac <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802971e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029722:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029726:	fb08 f303 	mul.w	r3, r8, r3
 802972a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802972e:	441f      	add	r7, r3
 8029730:	2100      	movs	r1, #0
 8029732:	e7bc      	b.n	80296ae <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8029734:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029738:	2103      	movs	r1, #3
 802973a:	fb08 f203 	mul.w	r2, r8, r3
 802973e:	89a3      	ldrh	r3, [r4, #12]
 8029740:	fb13 2301 	smlabb	r3, r3, r1, r2
 8029744:	e7f3      	b.n	802972e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8029746:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802974a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802974e:	fb08 2303 	mla	r3, r8, r3, r2
 8029752:	e7ec      	b.n	802972e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8029754:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8029758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802975c:	fb08 f303 	mul.w	r3, r8, r3
 8029760:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8029764:	e7e3      	b.n	802972e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8029766:	2701      	movs	r7, #1
 8029768:	e7b5      	b.n	80296d6 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802976a:	bf00      	nop
 802976c:	200279d8 	.word	0x200279d8

08029770 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8029770:	4b06      	ldr	r3, [pc, #24]	@ (802978c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 8029772:	b510      	push	{r4, lr}
 8029774:	781b      	ldrb	r3, [r3, #0]
 8029776:	2b01      	cmp	r3, #1
 8029778:	d107      	bne.n	802978a <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802977a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802977e:	680b      	ldr	r3, [r1, #0]
 8029780:	6814      	ldr	r4, [r2, #0]
 8029782:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8029786:	6013      	str	r3, [r2, #0]
 8029788:	600c      	str	r4, [r1, #0]
 802978a:	bd10      	pop	{r4, pc}
 802978c:	200279d0 	.word	0x200279d0

08029790 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8029790:	b513      	push	{r0, r1, r4, lr}
 8029792:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8029796:	4604      	mov	r4, r0
 8029798:	e9cd 2100 	strd	r2, r1, [sp]
 802979c:	b9a3      	cbnz	r3, 80297c8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802979e:	466a      	mov	r2, sp
 80297a0:	a901      	add	r1, sp, #4
 80297a2:	4620      	mov	r0, r4
 80297a4:	f7ff ffe4 	bl	8029770 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80297a8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80297aa:	9901      	ldr	r1, [sp, #4]
 80297ac:	9a00      	ldr	r2, [sp, #0]
 80297ae:	1ac9      	subs	r1, r1, r3
 80297b0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80297b2:	1ad2      	subs	r2, r2, r3
 80297b4:	9101      	str	r1, [sp, #4]
 80297b6:	2a00      	cmp	r2, #0
 80297b8:	9200      	str	r2, [sp, #0]
 80297ba:	da0b      	bge.n	80297d4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80297bc:	2301      	movs	r3, #1
 80297be:	2900      	cmp	r1, #0
 80297c0:	da0e      	bge.n	80297e0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80297c2:	f043 0304 	orr.w	r3, r3, #4
 80297c6:	e013      	b.n	80297f0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80297c8:	f7ff ff08 	bl	80295dc <_ZN8touchgfx6Canvas5closeEv>
 80297cc:	2800      	cmp	r0, #0
 80297ce:	d1e6      	bne.n	802979e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80297d0:	b002      	add	sp, #8
 80297d2:	bd10      	pop	{r4, pc}
 80297d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80297d6:	429a      	cmp	r2, r3
 80297d8:	bfac      	ite	ge
 80297da:	2302      	movge	r3, #2
 80297dc:	2300      	movlt	r3, #0
 80297de:	e7ee      	b.n	80297be <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80297e0:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80297e2:	4281      	cmp	r1, r0
 80297e4:	bfac      	ite	ge
 80297e6:	2008      	movge	r0, #8
 80297e8:	2000      	movlt	r0, #0
 80297ea:	4318      	orrs	r0, r3
 80297ec:	b2c3      	uxtb	r3, r0
 80297ee:	b158      	cbz	r0, 8029808 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 80297f0:	2200      	movs	r2, #0
 80297f2:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 80297f6:	9901      	ldr	r1, [sp, #4]
 80297f8:	9a00      	ldr	r2, [sp, #0]
 80297fa:	66e1      	str	r1, [r4, #108]	@ 0x6c
 80297fc:	6722      	str	r2, [r4, #112]	@ 0x70
 80297fe:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8029802:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8029806:	e7e3      	b.n	80297d0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8029808:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802980c:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8029810:	4298      	cmp	r0, r3
 8029812:	d803      	bhi.n	802981c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8029814:	f104 0014 	add.w	r0, r4, #20
 8029818:	f7ec fec6 	bl	80165a8 <_ZN8touchgfx7Outline6moveToEii>
 802981c:	2301      	movs	r3, #1
 802981e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8029822:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8029826:	2300      	movs	r3, #0
 8029828:	e7e5      	b.n	80297f6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802982a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802982a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802982c:	ab02      	add	r3, sp, #8
 802982e:	4604      	mov	r4, r0
 8029830:	9101      	str	r1, [sp, #4]
 8029832:	a901      	add	r1, sp, #4
 8029834:	f843 2d08 	str.w	r2, [r3, #-8]!
 8029838:	461a      	mov	r2, r3
 802983a:	f7ff ff99 	bl	8029770 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802983e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8029840:	9901      	ldr	r1, [sp, #4]
 8029842:	9a00      	ldr	r2, [sp, #0]
 8029844:	1ac9      	subs	r1, r1, r3
 8029846:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8029848:	1ad2      	subs	r2, r2, r3
 802984a:	9101      	str	r1, [sp, #4]
 802984c:	2a00      	cmp	r2, #0
 802984e:	9200      	str	r2, [sp, #0]
 8029850:	db1c      	blt.n	802988c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8029852:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8029854:	429a      	cmp	r2, r3
 8029856:	bfac      	ite	ge
 8029858:	2002      	movge	r0, #2
 802985a:	2000      	movlt	r0, #0
 802985c:	2900      	cmp	r1, #0
 802985e:	db17      	blt.n	8029890 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8029860:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8029862:	4299      	cmp	r1, r3
 8029864:	bfac      	ite	ge
 8029866:	2308      	movge	r3, #8
 8029868:	2300      	movlt	r3, #0
 802986a:	4303      	orrs	r3, r0
 802986c:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8029870:	b2dd      	uxtb	r5, r3
 8029872:	b978      	cbnz	r0, 8029894 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8029874:	f104 0014 	add.w	r0, r4, #20
 8029878:	f7ff fd66 	bl	8029348 <_ZN8touchgfx10Rasterizer6lineToEii>
 802987c:	9b01      	ldr	r3, [sp, #4]
 802987e:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8029882:	6623      	str	r3, [r4, #96]	@ 0x60
 8029884:	9b00      	ldr	r3, [sp, #0]
 8029886:	6663      	str	r3, [r4, #100]	@ 0x64
 8029888:	b002      	add	sp, #8
 802988a:	bd70      	pop	{r4, r5, r6, pc}
 802988c:	2001      	movs	r0, #1
 802988e:	e7e5      	b.n	802985c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8029890:	2304      	movs	r3, #4
 8029892:	e7ea      	b.n	802986a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8029894:	b113      	cbz	r3, 802989c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8029896:	ea10 0305 	ands.w	r3, r0, r5
 802989a:	d11c      	bne.n	80298d6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802989c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80298a0:	f104 0614 	add.w	r6, r4, #20
 80298a4:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 80298a8:	b98b      	cbnz	r3, 80298ce <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 80298aa:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 80298ae:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80298b2:	4298      	cmp	r0, r3
 80298b4:	d802      	bhi.n	80298bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 80298b6:	4630      	mov	r0, r6
 80298b8:	f7ec fe76 	bl	80165a8 <_ZN8touchgfx7Outline6moveToEii>
 80298bc:	2301      	movs	r3, #1
 80298be:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80298c2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80298c6:	4630      	mov	r0, r6
 80298c8:	e9dd 2100 	ldrd	r2, r1, [sp]
 80298cc:	e7d4      	b.n	8029878 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 80298ce:	4630      	mov	r0, r6
 80298d0:	f7ff fd3a 	bl	8029348 <_ZN8touchgfx10Rasterizer6lineToEii>
 80298d4:	e7f7      	b.n	80298c6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 80298d6:	461d      	mov	r5, r3
 80298d8:	e7d0      	b.n	802987c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

080298dc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 80298dc:	b538      	push	{r3, r4, r5, lr}
 80298de:	ed2d 8b10 	vpush	{d8-d15}
 80298e2:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 80298e6:	4605      	mov	r5, r0
 80298e8:	eeb0 ca40 	vmov.f32	s24, s0
 80298ec:	460c      	mov	r4, r1
 80298ee:	eef0 ca60 	vmov.f32	s25, s1
 80298f2:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8029a50 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 80298f6:	eeb0 da41 	vmov.f32	s26, s2
 80298fa:	eef0 da61 	vmov.f32	s27, s3
 80298fe:	eeb0 ea42 	vmov.f32	s28, s4
 8029902:	eef0 ea62 	vmov.f32	s29, s5
 8029906:	eef0 aa6b 	vmov.f32	s21, s23
 802990a:	2c08      	cmp	r4, #8
 802990c:	d86e      	bhi.n	80299ec <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 802990e:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8029912:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8029916:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 802991a:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802991e:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8029922:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8029926:	ee7c faad 	vadd.f32	s31, s25, s27
 802992a:	eee6 7a07 	vfma.f32	s15, s12, s14
 802992e:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8029932:	ee3d aaae 	vadd.f32	s20, s27, s29
 8029936:	ee2f fa2b 	vmul.f32	s30, s30, s23
 802993a:	ee6f faab 	vmul.f32	s31, s31, s23
 802993e:	ee69 9aab 	vmul.f32	s19, s19, s23
 8029942:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8029946:	ee2a aa2b 	vmul.f32	s20, s20, s23
 802994a:	ee7f 8a29 	vadd.f32	s17, s30, s19
 802994e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029952:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8029956:	ee68 8aab 	vmul.f32	s17, s17, s23
 802995a:	bf48      	it	mi
 802995c:	eef1 7a67 	vnegmi.f32	s15, s15
 8029960:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8029964:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8029968:	eef4 7acb 	vcmpe.f32	s15, s22
 802996c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029970:	dd3f      	ble.n	80299f2 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 8029972:	ee27 7a07 	vmul.f32	s14, s14, s14
 8029976:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802997a:	eea6 7aa6 	vfma.f32	s14, s13, s13
 802997e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8029982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8029986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802998a:	d847      	bhi.n	8029a1c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802998c:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8029990:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8029994:	f000 fa39 	bl	8029e0a <atan2f>
 8029998:	eeb0 8a40 	vmov.f32	s16, s0
 802999c:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 80299a0:	ee3d 0aec 	vsub.f32	s0, s27, s25
 80299a4:	f000 fa31 	bl	8029e0a <atan2f>
 80299a8:	ee38 0a40 	vsub.f32	s0, s16, s0
 80299ac:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8029a54 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 80299b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80299b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80299b8:	bf48      	it	mi
 80299ba:	eeb1 0a40 	vnegmi.f32	s0, s0
 80299be:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80299c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80299c6:	bfa4      	itt	ge
 80299c8:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8029a58 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 80299cc:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 80299d0:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8029a5c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 80299d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80299d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80299dc:	d51e      	bpl.n	8029a1c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 80299de:	eef0 0a49 	vmov.f32	s1, s18
 80299e2:	4628      	mov	r0, r5
 80299e4:	eeb0 0a68 	vmov.f32	s0, s17
 80299e8:	f7ea f990 	bl	8013d0c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80299ec:	ecbd 8b10 	vpop	{d8-d15}
 80299f0:	bd38      	pop	{r3, r4, r5, pc}
 80299f2:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 80299f6:	eeb0 7a68 	vmov.f32	s14, s17
 80299fa:	eef0 6a49 	vmov.f32	s13, s18
 80299fe:	eea7 7aea 	vfms.f32	s14, s15, s21
 8029a02:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8029a06:	eee7 6aea 	vfms.f32	s13, s15, s21
 8029a0a:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8029a0e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8029a12:	eef4 7ac6 	vcmpe.f32	s15, s12
 8029a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029a1a:	d9e0      	bls.n	80299de <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8029a1c:	3401      	adds	r4, #1
 8029a1e:	eef0 0a6c 	vmov.f32	s1, s25
 8029a22:	eeb0 0a4c 	vmov.f32	s0, s24
 8029a26:	4628      	mov	r0, r5
 8029a28:	4621      	mov	r1, r4
 8029a2a:	eef0 2a49 	vmov.f32	s5, s18
 8029a2e:	eeb0 2a68 	vmov.f32	s4, s17
 8029a32:	eef0 1a6f 	vmov.f32	s3, s31
 8029a36:	eeb0 1a4f 	vmov.f32	s2, s30
 8029a3a:	f7ff ff4f 	bl	80298dc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8029a3e:	eef0 da4a 	vmov.f32	s27, s20
 8029a42:	eeb0 da69 	vmov.f32	s26, s19
 8029a46:	eef0 ca49 	vmov.f32	s25, s18
 8029a4a:	eeb0 ca68 	vmov.f32	s24, s17
 8029a4e:	e75c      	b.n	802990a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8029a50:	2edbe6ff 	.word	0x2edbe6ff
 8029a54:	40490fdb 	.word	0x40490fdb
 8029a58:	40c90fdb 	.word	0x40c90fdb
 8029a5c:	3dcccccd 	.word	0x3dcccccd

08029a60 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 8029a60:	b530      	push	{r4, r5, lr}
 8029a62:	ed2d 8b10 	vpush	{d8-d15}
 8029a66:	eef0 8a40 	vmov.f32	s17, s0
 8029a6a:	b085      	sub	sp, #20
 8029a6c:	eef0 9a60 	vmov.f32	s19, s1
 8029a70:	4604      	mov	r4, r0
 8029a72:	eef0 fa41 	vmov.f32	s31, s2
 8029a76:	460d      	mov	r5, r1
 8029a78:	eeb0 fa61 	vmov.f32	s30, s3
 8029a7c:	eef0 ba42 	vmov.f32	s23, s4
 8029a80:	eeb0 ca62 	vmov.f32	s24, s5
 8029a84:	eef0 aa43 	vmov.f32	s21, s6
 8029a88:	eeb0 ba63 	vmov.f32	s22, s7
 8029a8c:	2d08      	cmp	r5, #8
 8029a8e:	f200 8113 	bhi.w	8029cb8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8029a92:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8029a96:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 8029a9a:	ee7f 6aab 	vadd.f32	s13, s31, s23
 8029a9e:	ee38 daaf 	vadd.f32	s26, s17, s31
 8029aa2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8029aa6:	ee7c ca0b 	vadd.f32	s25, s24, s22
 8029aaa:	ee2d da27 	vmul.f32	s26, s26, s15
 8029aae:	ed8d 6a01 	vstr	s12, [sp, #4]
 8029ab2:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8029ab6:	ee6c caa7 	vmul.f32	s25, s25, s15
 8029aba:	eeb0 ea4d 	vmov.f32	s28, s26
 8029abe:	ee79 da8f 	vadd.f32	s27, s19, s30
 8029ac2:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 8029ac6:	eea6 eaa7 	vfma.f32	s28, s13, s15
 8029aca:	ee66 6a27 	vmul.f32	s13, s12, s15
 8029ace:	ee6d daa7 	vmul.f32	s27, s27, s15
 8029ad2:	edcd 6a03 	vstr	s13, [sp, #12]
 8029ad6:	eef0 6a6c 	vmov.f32	s13, s25
 8029ada:	eef0 ea6d 	vmov.f32	s29, s27
 8029ade:	ee2e ea27 	vmul.f32	s28, s28, s15
 8029ae2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8029ae6:	eee7 ea27 	vfma.f32	s29, s14, s15
 8029aea:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8029aee:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8029af2:	eef0 6a67 	vmov.f32	s13, s15
 8029af6:	ed8d 7a02 	vstr	s14, [sp, #8]
 8029afa:	ed9d 7a03 	vldr	s14, [sp, #12]
 8029afe:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8029b02:	ed9d 7a02 	vldr	s14, [sp, #8]
 8029b06:	ee3e aa87 	vadd.f32	s20, s29, s14
 8029b0a:	ee29 9a27 	vmul.f32	s18, s18, s15
 8029b0e:	ee2a aa27 	vmul.f32	s20, s20, s15
 8029b12:	2d00      	cmp	r5, #0
 8029b14:	f000 810b 	beq.w	8029d2e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8029b18:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8029b1c:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8029d74 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8029b20:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8029b24:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8029b28:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8029b2c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8029b30:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8029b34:	eea6 7a27 	vfma.f32	s14, s12, s15
 8029b38:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8029b3c:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8029b40:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8029b44:	eea5 6a27 	vfma.f32	s12, s10, s15
 8029b48:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8029b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029b50:	bf48      	it	mi
 8029b52:	eeb1 7a47 	vnegmi.f32	s14, s14
 8029b56:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8029b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029b5e:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8029b62:	bf48      	it	mi
 8029b64:	eeb1 6a46 	vnegmi.f32	s12, s12
 8029b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029b6c:	f340 80a8 	ble.w	8029cc0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 8029b70:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8029b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029b78:	dd5a      	ble.n	8029c30 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 8029b7a:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8029b7e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8029b82:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8029b86:	ee27 7a07 	vmul.f32	s14, s14, s14
 8029b8a:	ee65 7a85 	vmul.f32	s15, s11, s10
 8029b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8029b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029b96:	f200 80ca 	bhi.w	8029d2e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8029b9a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8029b9e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8029ba2:	f000 f932 	bl	8029e0a <atan2f>
 8029ba6:	eeb0 8a40 	vmov.f32	s16, s0
 8029baa:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8029bae:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8029bb2:	f000 f92a 	bl	8029e0a <atan2f>
 8029bb6:	ee38 fa40 	vsub.f32	s30, s16, s0
 8029bba:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8029bbe:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8029bc2:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8029bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029bca:	bf48      	it	mi
 8029bcc:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8029bd0:	f000 f91b 	bl	8029e0a <atan2f>
 8029bd4:	ee30 0a48 	vsub.f32	s0, s0, s16
 8029bd8:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8029d78 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8029bdc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8029be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029be4:	eeb4 fae7 	vcmpe.f32	s30, s15
 8029be8:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8029d78 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8029bec:	bf48      	it	mi
 8029bee:	eeb1 0a40 	vnegmi.f32	s0, s0
 8029bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029bf6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8029bfa:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8029d7c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8029bfe:	bfa4      	itt	ge
 8029c00:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8029d80 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8029c04:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8029c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029c0c:	bfa4      	itt	ge
 8029c0e:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8029d80 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8029c12:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8029c16:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8029c1a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8029c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029c22:	f140 8084 	bpl.w	8029d2e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8029c26:	eef0 0a4a 	vmov.f32	s1, s20
 8029c2a:	eeb0 0a49 	vmov.f32	s0, s18
 8029c2e:	e040      	b.n	8029cb2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8029c30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8029c34:	ee27 7a07 	vmul.f32	s14, s14, s14
 8029c38:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8029c3c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8029c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8029c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029c48:	d871      	bhi.n	8029d2e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8029c4a:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8029c4e:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8029c52:	f000 f8da 	bl	8029e0a <atan2f>
 8029c56:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8029c5a:	eeb0 8a40 	vmov.f32	s16, s0
 8029c5e:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8029c62:	f000 f8d2 	bl	8029e0a <atan2f>
 8029c66:	ee38 0a40 	vsub.f32	s0, s16, s0
 8029c6a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8029d78 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8029c6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8029c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029c76:	bf48      	it	mi
 8029c78:	eeb1 0a40 	vnegmi.f32	s0, s0
 8029c7c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8029c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029c84:	bfa4      	itt	ge
 8029c86:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8029d80 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8029c8a:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8029c8e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8029d7c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8029c92:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8029c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029c9a:	d548      	bpl.n	8029d2e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8029c9c:	eef0 0a4f 	vmov.f32	s1, s30
 8029ca0:	4620      	mov	r0, r4
 8029ca2:	eeb0 0a6f 	vmov.f32	s0, s31
 8029ca6:	f7ea f831 	bl	8013d0c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8029caa:	eef0 0a4c 	vmov.f32	s1, s24
 8029cae:	eeb0 0a6b 	vmov.f32	s0, s23
 8029cb2:	4620      	mov	r0, r4
 8029cb4:	f7ea f82a 	bl	8013d0c <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8029cb8:	b005      	add	sp, #20
 8029cba:	ecbd 8b10 	vpop	{d8-d15}
 8029cbe:	bd30      	pop	{r4, r5, pc}
 8029cc0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8029d74 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8029cc4:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8029cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029ccc:	dd19      	ble.n	8029d02 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8029cce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8029cd2:	ee26 7a06 	vmul.f32	s14, s12, s12
 8029cd6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8029cda:	ee67 7a85 	vmul.f32	s15, s15, s10
 8029cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8029ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029ce6:	d822      	bhi.n	8029d2e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8029ce8:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8029cec:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8029cf0:	f000 f88b 	bl	8029e0a <atan2f>
 8029cf4:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8029cf8:	eeb0 8a40 	vmov.f32	s16, s0
 8029cfc:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8029d00:	e7af      	b.n	8029c62 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8029d02:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8029d06:	eeb0 7a49 	vmov.f32	s14, s18
 8029d0a:	eeb0 6a4a 	vmov.f32	s12, s20
 8029d0e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8029d12:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8029d16:	eea7 6ae6 	vfms.f32	s12, s15, s13
 8029d1a:	ee66 7a06 	vmul.f32	s15, s12, s12
 8029d1e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8029d22:	eef4 7ac5 	vcmpe.f32	s15, s10
 8029d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029d2a:	f67f af7c 	bls.w	8029c26 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8029d2e:	3501      	adds	r5, #1
 8029d30:	eef0 0a69 	vmov.f32	s1, s19
 8029d34:	eeb0 0a68 	vmov.f32	s0, s17
 8029d38:	4620      	mov	r0, r4
 8029d3a:	4629      	mov	r1, r5
 8029d3c:	eef0 3a4a 	vmov.f32	s7, s20
 8029d40:	eeb0 3a49 	vmov.f32	s6, s18
 8029d44:	eef0 2a6e 	vmov.f32	s5, s29
 8029d48:	eeb0 2a4e 	vmov.f32	s4, s28
 8029d4c:	eef0 1a6d 	vmov.f32	s3, s27
 8029d50:	eeb0 1a4d 	vmov.f32	s2, s26
 8029d54:	f7ff fe84 	bl	8029a60 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8029d58:	eeb0 ca6c 	vmov.f32	s24, s25
 8029d5c:	eddd ba01 	vldr	s23, [sp, #4]
 8029d60:	eef0 9a4a 	vmov.f32	s19, s20
 8029d64:	ed9d fa02 	vldr	s30, [sp, #8]
 8029d68:	eef0 8a49 	vmov.f32	s17, s18
 8029d6c:	eddd fa03 	vldr	s31, [sp, #12]
 8029d70:	e68c      	b.n	8029a8c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8029d72:	bf00      	nop
 8029d74:	2edbe6ff 	.word	0x2edbe6ff
 8029d78:	40490fdb 	.word	0x40490fdb
 8029d7c:	3dcccccd 	.word	0x3dcccccd
 8029d80:	40c90fdb 	.word	0x40c90fdb

08029d84 <_ZN8touchgfx6CanvasD1Ev>:
 8029d84:	4b04      	ldr	r3, [pc, #16]	@ (8029d98 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8029d86:	b510      	push	{r4, lr}
 8029d88:	4604      	mov	r4, r0
 8029d8a:	f840 3b14 	str.w	r3, [r0], #20
 8029d8e:	f7eb ff13 	bl	8015bb8 <_ZN8touchgfx7OutlineD1Ev>
 8029d92:	4620      	mov	r0, r4
 8029d94:	bd10      	pop	{r4, pc}
 8029d96:	bf00      	nop
 8029d98:	0802f230 	.word	0x0802f230

08029d9c <_ZN8touchgfx6CanvasD0Ev>:
 8029d9c:	b510      	push	{r4, lr}
 8029d9e:	4604      	mov	r4, r0
 8029da0:	f7ff fff0 	bl	8029d84 <_ZN8touchgfx6CanvasD1Ev>
 8029da4:	2174      	movs	r1, #116	@ 0x74
 8029da6:	4620      	mov	r0, r4
 8029da8:	f000 f807 	bl	8029dba <_ZdlPvj>
 8029dac:	4620      	mov	r0, r4
 8029dae:	bd10      	pop	{r4, pc}

08029db0 <__aeabi_atexit>:
 8029db0:	460b      	mov	r3, r1
 8029db2:	4601      	mov	r1, r0
 8029db4:	4618      	mov	r0, r3
 8029db6:	f000 bc59 	b.w	802a66c <__cxa_atexit>

08029dba <_ZdlPvj>:
 8029dba:	f000 b812 	b.w	8029de2 <_ZdlPv>

08029dbe <__cxa_guard_acquire>:
 8029dbe:	6802      	ldr	r2, [r0, #0]
 8029dc0:	07d2      	lsls	r2, r2, #31
 8029dc2:	4603      	mov	r3, r0
 8029dc4:	d405      	bmi.n	8029dd2 <__cxa_guard_acquire+0x14>
 8029dc6:	7842      	ldrb	r2, [r0, #1]
 8029dc8:	b102      	cbz	r2, 8029dcc <__cxa_guard_acquire+0xe>
 8029dca:	deff      	udf	#255	@ 0xff
 8029dcc:	2001      	movs	r0, #1
 8029dce:	7058      	strb	r0, [r3, #1]
 8029dd0:	4770      	bx	lr
 8029dd2:	2000      	movs	r0, #0
 8029dd4:	4770      	bx	lr

08029dd6 <__cxa_guard_release>:
 8029dd6:	2301      	movs	r3, #1
 8029dd8:	6003      	str	r3, [r0, #0]
 8029dda:	4770      	bx	lr

08029ddc <__cxa_pure_virtual>:
 8029ddc:	b508      	push	{r3, lr}
 8029dde:	f000 f80f 	bl	8029e00 <_ZSt9terminatev>

08029de2 <_ZdlPv>:
 8029de2:	f000 bb8d 	b.w	802a500 <free>

08029de6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8029de6:	b508      	push	{r3, lr}
 8029de8:	4780      	blx	r0
 8029dea:	f000 fb56 	bl	802a49a <abort>
	...

08029df0 <_ZSt13get_terminatev>:
 8029df0:	4b02      	ldr	r3, [pc, #8]	@ (8029dfc <_ZSt13get_terminatev+0xc>)
 8029df2:	6818      	ldr	r0, [r3, #0]
 8029df4:	f3bf 8f5b 	dmb	ish
 8029df8:	4770      	bx	lr
 8029dfa:	bf00      	nop
 8029dfc:	200000ec 	.word	0x200000ec

08029e00 <_ZSt9terminatev>:
 8029e00:	b508      	push	{r3, lr}
 8029e02:	f7ff fff5 	bl	8029df0 <_ZSt13get_terminatev>
 8029e06:	f7ff ffee 	bl	8029de6 <_ZN10__cxxabiv111__terminateEPFvvE>

08029e0a <atan2f>:
 8029e0a:	f000 b9cd 	b.w	802a1a8 <__ieee754_atan2f>
	...

08029e10 <sqrtf>:
 8029e10:	b508      	push	{r3, lr}
 8029e12:	ed2d 8b02 	vpush	{d8}
 8029e16:	eeb0 8a40 	vmov.f32	s16, s0
 8029e1a:	f000 f9c2 	bl	802a1a2 <__ieee754_sqrtf>
 8029e1e:	eeb4 8a48 	vcmp.f32	s16, s16
 8029e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029e26:	d60c      	bvs.n	8029e42 <sqrtf+0x32>
 8029e28:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8029e48 <sqrtf+0x38>
 8029e2c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8029e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029e34:	d505      	bpl.n	8029e42 <sqrtf+0x32>
 8029e36:	f000 fe87 	bl	802ab48 <__errno>
 8029e3a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8029e3e:	2321      	movs	r3, #33	@ 0x21
 8029e40:	6003      	str	r3, [r0, #0]
 8029e42:	ecbd 8b02 	vpop	{d8}
 8029e46:	bd08      	pop	{r3, pc}
 8029e48:	00000000 	.word	0x00000000

08029e4c <sinf_poly>:
 8029e4c:	07cb      	lsls	r3, r1, #31
 8029e4e:	d412      	bmi.n	8029e76 <sinf_poly+0x2a>
 8029e50:	ee21 5b00 	vmul.f64	d5, d1, d0
 8029e54:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8029e58:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8029e5c:	eea6 7b01 	vfma.f64	d7, d6, d1
 8029e60:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8029e64:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029e68:	eea6 0b05 	vfma.f64	d0, d6, d5
 8029e6c:	eea7 0b01 	vfma.f64	d0, d7, d1
 8029e70:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029e74:	4770      	bx	lr
 8029e76:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8029e7a:	ee21 5b01 	vmul.f64	d5, d1, d1
 8029e7e:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8029e82:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8029e86:	eea1 7b06 	vfma.f64	d7, d1, d6
 8029e8a:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8029e8e:	eea1 0b06 	vfma.f64	d0, d1, d6
 8029e92:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8029e96:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029e9a:	eea5 0b06 	vfma.f64	d0, d5, d6
 8029e9e:	e7e5      	b.n	8029e6c <sinf_poly+0x20>

08029ea0 <sinf>:
 8029ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029ea2:	ee10 4a10 	vmov	r4, s0
 8029ea6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8029eaa:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8029eae:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8029eb2:	eef0 7a40 	vmov.f32	s15, s0
 8029eb6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8029eba:	d218      	bcs.n	8029eee <sinf+0x4e>
 8029ebc:	ee26 1b06 	vmul.f64	d1, d6, d6
 8029ec0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8029ec4:	d20a      	bcs.n	8029edc <sinf+0x3c>
 8029ec6:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8029eca:	d103      	bne.n	8029ed4 <sinf+0x34>
 8029ecc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8029ed0:	ed8d 1a01 	vstr	s2, [sp, #4]
 8029ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8029ed8:	b003      	add	sp, #12
 8029eda:	bd30      	pop	{r4, r5, pc}
 8029edc:	483a      	ldr	r0, [pc, #232]	@ (8029fc8 <sinf+0x128>)
 8029ede:	eeb0 0b46 	vmov.f64	d0, d6
 8029ee2:	2100      	movs	r1, #0
 8029ee4:	b003      	add	sp, #12
 8029ee6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029eea:	f7ff bfaf 	b.w	8029e4c <sinf_poly>
 8029eee:	f240 422e 	movw	r2, #1070	@ 0x42e
 8029ef2:	4293      	cmp	r3, r2
 8029ef4:	d824      	bhi.n	8029f40 <sinf+0xa0>
 8029ef6:	4b34      	ldr	r3, [pc, #208]	@ (8029fc8 <sinf+0x128>)
 8029ef8:	ed93 7b08 	vldr	d7, [r3, #32]
 8029efc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8029f00:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8029f04:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029f08:	ee17 1a90 	vmov	r1, s15
 8029f0c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8029f10:	1609      	asrs	r1, r1, #24
 8029f12:	ee07 1a90 	vmov	s15, r1
 8029f16:	f001 0203 	and.w	r2, r1, #3
 8029f1a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8029f1e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8029f22:	ed92 0b00 	vldr	d0, [r2]
 8029f26:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8029f2a:	f011 0f02 	tst.w	r1, #2
 8029f2e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8029f32:	bf08      	it	eq
 8029f34:	4618      	moveq	r0, r3
 8029f36:	ee26 1b06 	vmul.f64	d1, d6, d6
 8029f3a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8029f3e:	e7d1      	b.n	8029ee4 <sinf+0x44>
 8029f40:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8029f44:	d237      	bcs.n	8029fb6 <sinf+0x116>
 8029f46:	4921      	ldr	r1, [pc, #132]	@ (8029fcc <sinf+0x12c>)
 8029f48:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8029f4c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8029f50:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8029f54:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8029f58:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8029f5c:	6a10      	ldr	r0, [r2, #32]
 8029f5e:	6912      	ldr	r2, [r2, #16]
 8029f60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8029f64:	40ab      	lsls	r3, r5
 8029f66:	fba0 5003 	umull	r5, r0, r0, r3
 8029f6a:	4359      	muls	r1, r3
 8029f6c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8029f70:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8029f74:	0f9d      	lsrs	r5, r3, #30
 8029f76:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8029f7a:	1ac9      	subs	r1, r1, r3
 8029f7c:	f7d6 fb3e 	bl	80005fc <__aeabi_l2d>
 8029f80:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8029f84:	4b10      	ldr	r3, [pc, #64]	@ (8029fc8 <sinf+0x128>)
 8029f86:	f004 0203 	and.w	r2, r4, #3
 8029f8a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8029f8e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8029fc0 <sinf+0x120>
 8029f92:	ed92 0b00 	vldr	d0, [r2]
 8029f96:	ec41 0b17 	vmov	d7, r0, r1
 8029f9a:	f014 0f02 	tst.w	r4, #2
 8029f9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8029fa2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029fa6:	4629      	mov	r1, r5
 8029fa8:	bf08      	it	eq
 8029faa:	4618      	moveq	r0, r3
 8029fac:	ee27 1b07 	vmul.f64	d1, d7, d7
 8029fb0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8029fb4:	e796      	b.n	8029ee4 <sinf+0x44>
 8029fb6:	b003      	add	sp, #12
 8029fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029fbc:	f000 b8e2 	b.w	802a184 <__math_invalidf>
 8029fc0:	54442d18 	.word	0x54442d18
 8029fc4:	3c1921fb 	.word	0x3c1921fb
 8029fc8:	0802f2a0 	.word	0x0802f2a0
 8029fcc:	0802f23c 	.word	0x0802f23c

08029fd0 <sinf_poly>:
 8029fd0:	07cb      	lsls	r3, r1, #31
 8029fd2:	d412      	bmi.n	8029ffa <sinf_poly+0x2a>
 8029fd4:	ee21 5b00 	vmul.f64	d5, d1, d0
 8029fd8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8029fdc:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8029fe0:	eea6 7b01 	vfma.f64	d7, d6, d1
 8029fe4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8029fe8:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029fec:	eea6 0b05 	vfma.f64	d0, d6, d5
 8029ff0:	eea7 0b01 	vfma.f64	d0, d7, d1
 8029ff4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029ff8:	4770      	bx	lr
 8029ffa:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8029ffe:	ee21 5b01 	vmul.f64	d5, d1, d1
 802a002:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802a006:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 802a00a:	eea1 7b06 	vfma.f64	d7, d1, d6
 802a00e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802a012:	eea1 0b06 	vfma.f64	d0, d1, d6
 802a016:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 802a01a:	ee21 1b05 	vmul.f64	d1, d1, d5
 802a01e:	eea5 0b06 	vfma.f64	d0, d5, d6
 802a022:	e7e5      	b.n	8029ff0 <sinf_poly+0x20>
 802a024:	0000      	movs	r0, r0
	...

0802a028 <cosf>:
 802a028:	b538      	push	{r3, r4, r5, lr}
 802a02a:	ee10 4a10 	vmov	r4, s0
 802a02e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802a032:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802a036:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 802a03a:	d21f      	bcs.n	802a07c <cosf+0x54>
 802a03c:	ee27 7b07 	vmul.f64	d7, d7, d7
 802a040:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802a044:	f0c0 8082 	bcc.w	802a14c <cosf+0x124>
 802a048:	ee27 4b07 	vmul.f64	d4, d7, d7
 802a04c:	4b44      	ldr	r3, [pc, #272]	@ (802a160 <cosf+0x138>)
 802a04e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 802a052:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 802a056:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 802a05a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802a05e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 802a062:	eea7 0b05 	vfma.f64	d0, d7, d5
 802a066:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 802a06a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802a06e:	eea4 0b05 	vfma.f64	d0, d4, d5
 802a072:	eea6 0b07 	vfma.f64	d0, d6, d7
 802a076:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802a07a:	bd38      	pop	{r3, r4, r5, pc}
 802a07c:	f240 422e 	movw	r2, #1070	@ 0x42e
 802a080:	4293      	cmp	r3, r2
 802a082:	d829      	bhi.n	802a0d8 <cosf+0xb0>
 802a084:	4b36      	ldr	r3, [pc, #216]	@ (802a160 <cosf+0x138>)
 802a086:	ed93 6b08 	vldr	d6, [r3, #32]
 802a08a:	ee27 6b06 	vmul.f64	d6, d7, d6
 802a08e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 802a092:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802a096:	ee16 1a90 	vmov	r1, s13
 802a09a:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 802a09e:	1609      	asrs	r1, r1, #24
 802a0a0:	ee06 1a90 	vmov	s13, r1
 802a0a4:	f001 0203 	and.w	r2, r1, #3
 802a0a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802a0ac:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 802a0b0:	ed92 0b00 	vldr	d0, [r2]
 802a0b4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 802a0b8:	f011 0f02 	tst.w	r1, #2
 802a0bc:	f081 0101 	eor.w	r1, r1, #1
 802a0c0:	eea5 7b46 	vfms.f64	d7, d5, d6
 802a0c4:	bf08      	it	eq
 802a0c6:	4618      	moveq	r0, r3
 802a0c8:	ee27 1b07 	vmul.f64	d1, d7, d7
 802a0cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a0d0:	ee20 0b07 	vmul.f64	d0, d0, d7
 802a0d4:	f7ff bf7c 	b.w	8029fd0 <sinf_poly>
 802a0d8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 802a0dc:	d232      	bcs.n	802a144 <cosf+0x11c>
 802a0de:	4921      	ldr	r1, [pc, #132]	@ (802a164 <cosf+0x13c>)
 802a0e0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 802a0e4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 802a0e8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802a0ec:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 802a0f0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802a0f4:	6a10      	ldr	r0, [r2, #32]
 802a0f6:	6912      	ldr	r2, [r2, #16]
 802a0f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802a0fc:	40ab      	lsls	r3, r5
 802a0fe:	fba0 5003 	umull	r5, r0, r0, r3
 802a102:	4359      	muls	r1, r3
 802a104:	fbe3 0102 	umlal	r0, r1, r3, r2
 802a108:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802a10c:	0f9d      	lsrs	r5, r3, #30
 802a10e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802a112:	1ac9      	subs	r1, r1, r3
 802a114:	f7d6 fa72 	bl	80005fc <__aeabi_l2d>
 802a118:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802a11c:	4b10      	ldr	r3, [pc, #64]	@ (802a160 <cosf+0x138>)
 802a11e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 802a158 <cosf+0x130>
 802a122:	ec41 0b17 	vmov	d7, r0, r1
 802a126:	f004 0203 	and.w	r2, r4, #3
 802a12a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802a12e:	ed92 0b00 	vldr	d0, [r2]
 802a132:	ee27 7b06 	vmul.f64	d7, d7, d6
 802a136:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802a13a:	f014 0f02 	tst.w	r4, #2
 802a13e:	f085 0101 	eor.w	r1, r5, #1
 802a142:	e7bf      	b.n	802a0c4 <cosf+0x9c>
 802a144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a148:	f000 b81c 	b.w	802a184 <__math_invalidf>
 802a14c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802a150:	e793      	b.n	802a07a <cosf+0x52>
 802a152:	bf00      	nop
 802a154:	f3af 8000 	nop.w
 802a158:	54442d18 	.word	0x54442d18
 802a15c:	3c1921fb 	.word	0x3c1921fb
 802a160:	0802f2a0 	.word	0x0802f2a0
 802a164:	0802f23c 	.word	0x0802f23c

0802a168 <with_errnof>:
 802a168:	b510      	push	{r4, lr}
 802a16a:	ed2d 8b02 	vpush	{d8}
 802a16e:	eeb0 8a40 	vmov.f32	s16, s0
 802a172:	4604      	mov	r4, r0
 802a174:	f000 fce8 	bl	802ab48 <__errno>
 802a178:	eeb0 0a48 	vmov.f32	s0, s16
 802a17c:	ecbd 8b02 	vpop	{d8}
 802a180:	6004      	str	r4, [r0, #0]
 802a182:	bd10      	pop	{r4, pc}

0802a184 <__math_invalidf>:
 802a184:	eef0 7a40 	vmov.f32	s15, s0
 802a188:	ee30 7a40 	vsub.f32	s14, s0, s0
 802a18c:	eef4 7a67 	vcmp.f32	s15, s15
 802a190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a194:	ee87 0a07 	vdiv.f32	s0, s14, s14
 802a198:	d602      	bvs.n	802a1a0 <__math_invalidf+0x1c>
 802a19a:	2021      	movs	r0, #33	@ 0x21
 802a19c:	f7ff bfe4 	b.w	802a168 <with_errnof>
 802a1a0:	4770      	bx	lr

0802a1a2 <__ieee754_sqrtf>:
 802a1a2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802a1a6:	4770      	bx	lr

0802a1a8 <__ieee754_atan2f>:
 802a1a8:	ee10 2a90 	vmov	r2, s1
 802a1ac:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 802a1b0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802a1b4:	b510      	push	{r4, lr}
 802a1b6:	eef0 7a40 	vmov.f32	s15, s0
 802a1ba:	d806      	bhi.n	802a1ca <__ieee754_atan2f+0x22>
 802a1bc:	ee10 0a10 	vmov	r0, s0
 802a1c0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 802a1c4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802a1c8:	d904      	bls.n	802a1d4 <__ieee754_atan2f+0x2c>
 802a1ca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802a1ce:	eeb0 0a67 	vmov.f32	s0, s15
 802a1d2:	bd10      	pop	{r4, pc}
 802a1d4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 802a1d8:	d103      	bne.n	802a1e2 <__ieee754_atan2f+0x3a>
 802a1da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a1de:	f000 b881 	b.w	802a2e4 <atanf>
 802a1e2:	1794      	asrs	r4, r2, #30
 802a1e4:	f004 0402 	and.w	r4, r4, #2
 802a1e8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802a1ec:	b93b      	cbnz	r3, 802a1fe <__ieee754_atan2f+0x56>
 802a1ee:	2c02      	cmp	r4, #2
 802a1f0:	d05c      	beq.n	802a2ac <__ieee754_atan2f+0x104>
 802a1f2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 802a2c0 <__ieee754_atan2f+0x118>
 802a1f6:	2c03      	cmp	r4, #3
 802a1f8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802a1fc:	e7e7      	b.n	802a1ce <__ieee754_atan2f+0x26>
 802a1fe:	b939      	cbnz	r1, 802a210 <__ieee754_atan2f+0x68>
 802a200:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802a2c4 <__ieee754_atan2f+0x11c>
 802a204:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802a2c8 <__ieee754_atan2f+0x120>
 802a208:	2800      	cmp	r0, #0
 802a20a:	fe67 7a87 	vselge.f32	s15, s15, s14
 802a20e:	e7de      	b.n	802a1ce <__ieee754_atan2f+0x26>
 802a210:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802a214:	d110      	bne.n	802a238 <__ieee754_atan2f+0x90>
 802a216:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802a21a:	f104 34ff 	add.w	r4, r4, #4294967295
 802a21e:	d107      	bne.n	802a230 <__ieee754_atan2f+0x88>
 802a220:	2c02      	cmp	r4, #2
 802a222:	d846      	bhi.n	802a2b2 <__ieee754_atan2f+0x10a>
 802a224:	4b29      	ldr	r3, [pc, #164]	@ (802a2cc <__ieee754_atan2f+0x124>)
 802a226:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802a22a:	edd3 7a00 	vldr	s15, [r3]
 802a22e:	e7ce      	b.n	802a1ce <__ieee754_atan2f+0x26>
 802a230:	2c02      	cmp	r4, #2
 802a232:	d841      	bhi.n	802a2b8 <__ieee754_atan2f+0x110>
 802a234:	4b26      	ldr	r3, [pc, #152]	@ (802a2d0 <__ieee754_atan2f+0x128>)
 802a236:	e7f6      	b.n	802a226 <__ieee754_atan2f+0x7e>
 802a238:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802a23c:	d0e0      	beq.n	802a200 <__ieee754_atan2f+0x58>
 802a23e:	1a5b      	subs	r3, r3, r1
 802a240:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802a244:	ea4f 51e3 	mov.w	r1, r3, asr #23
 802a248:	da1a      	bge.n	802a280 <__ieee754_atan2f+0xd8>
 802a24a:	2a00      	cmp	r2, #0
 802a24c:	da01      	bge.n	802a252 <__ieee754_atan2f+0xaa>
 802a24e:	313c      	adds	r1, #60	@ 0x3c
 802a250:	db19      	blt.n	802a286 <__ieee754_atan2f+0xde>
 802a252:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802a256:	f000 f919 	bl	802a48c <fabsf>
 802a25a:	f000 f843 	bl	802a2e4 <atanf>
 802a25e:	eef0 7a40 	vmov.f32	s15, s0
 802a262:	2c01      	cmp	r4, #1
 802a264:	d012      	beq.n	802a28c <__ieee754_atan2f+0xe4>
 802a266:	2c02      	cmp	r4, #2
 802a268:	d017      	beq.n	802a29a <__ieee754_atan2f+0xf2>
 802a26a:	2c00      	cmp	r4, #0
 802a26c:	d0af      	beq.n	802a1ce <__ieee754_atan2f+0x26>
 802a26e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802a2d4 <__ieee754_atan2f+0x12c>
 802a272:	ee77 7a87 	vadd.f32	s15, s15, s14
 802a276:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 802a2d8 <__ieee754_atan2f+0x130>
 802a27a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a27e:	e7a6      	b.n	802a1ce <__ieee754_atan2f+0x26>
 802a280:	eddf 7a10 	vldr	s15, [pc, #64]	@ 802a2c4 <__ieee754_atan2f+0x11c>
 802a284:	e7ed      	b.n	802a262 <__ieee754_atan2f+0xba>
 802a286:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802a2dc <__ieee754_atan2f+0x134>
 802a28a:	e7ea      	b.n	802a262 <__ieee754_atan2f+0xba>
 802a28c:	ee17 3a90 	vmov	r3, s15
 802a290:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802a294:	ee07 3a90 	vmov	s15, r3
 802a298:	e799      	b.n	802a1ce <__ieee754_atan2f+0x26>
 802a29a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802a2d4 <__ieee754_atan2f+0x12c>
 802a29e:	ee77 7a87 	vadd.f32	s15, s15, s14
 802a2a2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 802a2d8 <__ieee754_atan2f+0x130>
 802a2a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 802a2aa:	e790      	b.n	802a1ce <__ieee754_atan2f+0x26>
 802a2ac:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 802a2d8 <__ieee754_atan2f+0x130>
 802a2b0:	e78d      	b.n	802a1ce <__ieee754_atan2f+0x26>
 802a2b2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 802a2e0 <__ieee754_atan2f+0x138>
 802a2b6:	e78a      	b.n	802a1ce <__ieee754_atan2f+0x26>
 802a2b8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802a2dc <__ieee754_atan2f+0x134>
 802a2bc:	e787      	b.n	802a1ce <__ieee754_atan2f+0x26>
 802a2be:	bf00      	nop
 802a2c0:	c0490fdb 	.word	0xc0490fdb
 802a2c4:	3fc90fdb 	.word	0x3fc90fdb
 802a2c8:	bfc90fdb 	.word	0xbfc90fdb
 802a2cc:	0802f38c 	.word	0x0802f38c
 802a2d0:	0802f380 	.word	0x0802f380
 802a2d4:	33bbbd2e 	.word	0x33bbbd2e
 802a2d8:	40490fdb 	.word	0x40490fdb
 802a2dc:	00000000 	.word	0x00000000
 802a2e0:	3f490fdb 	.word	0x3f490fdb

0802a2e4 <atanf>:
 802a2e4:	b538      	push	{r3, r4, r5, lr}
 802a2e6:	ee10 5a10 	vmov	r5, s0
 802a2ea:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802a2ee:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802a2f2:	eef0 7a40 	vmov.f32	s15, s0
 802a2f6:	d30f      	bcc.n	802a318 <atanf+0x34>
 802a2f8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802a2fc:	d904      	bls.n	802a308 <atanf+0x24>
 802a2fe:	ee70 7a00 	vadd.f32	s15, s0, s0
 802a302:	eeb0 0a67 	vmov.f32	s0, s15
 802a306:	bd38      	pop	{r3, r4, r5, pc}
 802a308:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 802a440 <atanf+0x15c>
 802a30c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802a444 <atanf+0x160>
 802a310:	2d00      	cmp	r5, #0
 802a312:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802a316:	e7f4      	b.n	802a302 <atanf+0x1e>
 802a318:	4b4b      	ldr	r3, [pc, #300]	@ (802a448 <atanf+0x164>)
 802a31a:	429c      	cmp	r4, r3
 802a31c:	d810      	bhi.n	802a340 <atanf+0x5c>
 802a31e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802a322:	d20a      	bcs.n	802a33a <atanf+0x56>
 802a324:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802a44c <atanf+0x168>
 802a328:	ee30 7a07 	vadd.f32	s14, s0, s14
 802a32c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802a330:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802a334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a338:	dce3      	bgt.n	802a302 <atanf+0x1e>
 802a33a:	f04f 33ff 	mov.w	r3, #4294967295
 802a33e:	e013      	b.n	802a368 <atanf+0x84>
 802a340:	f000 f8a4 	bl	802a48c <fabsf>
 802a344:	4b42      	ldr	r3, [pc, #264]	@ (802a450 <atanf+0x16c>)
 802a346:	429c      	cmp	r4, r3
 802a348:	d84f      	bhi.n	802a3ea <atanf+0x106>
 802a34a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802a34e:	429c      	cmp	r4, r3
 802a350:	d841      	bhi.n	802a3d6 <atanf+0xf2>
 802a352:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802a356:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802a35a:	eea0 7a27 	vfma.f32	s14, s0, s15
 802a35e:	2300      	movs	r3, #0
 802a360:	ee30 0a27 	vadd.f32	s0, s0, s15
 802a364:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a368:	1c5a      	adds	r2, r3, #1
 802a36a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802a36e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 802a454 <atanf+0x170>
 802a372:	eddf 5a39 	vldr	s11, [pc, #228]	@ 802a458 <atanf+0x174>
 802a376:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 802a45c <atanf+0x178>
 802a37a:	ee66 6a06 	vmul.f32	s13, s12, s12
 802a37e:	eee6 5a87 	vfma.f32	s11, s13, s14
 802a382:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 802a460 <atanf+0x17c>
 802a386:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802a38a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 802a464 <atanf+0x180>
 802a38e:	eee7 5a26 	vfma.f32	s11, s14, s13
 802a392:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 802a468 <atanf+0x184>
 802a396:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802a39a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802a46c <atanf+0x188>
 802a39e:	eee7 5a26 	vfma.f32	s11, s14, s13
 802a3a2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 802a470 <atanf+0x18c>
 802a3a6:	eea6 5a87 	vfma.f32	s10, s13, s14
 802a3aa:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802a474 <atanf+0x190>
 802a3ae:	eea5 7a26 	vfma.f32	s14, s10, s13
 802a3b2:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 802a478 <atanf+0x194>
 802a3b6:	eea7 5a26 	vfma.f32	s10, s14, s13
 802a3ba:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802a47c <atanf+0x198>
 802a3be:	eea5 7a26 	vfma.f32	s14, s10, s13
 802a3c2:	ee27 7a26 	vmul.f32	s14, s14, s13
 802a3c6:	eea5 7a86 	vfma.f32	s14, s11, s12
 802a3ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 802a3ce:	d121      	bne.n	802a414 <atanf+0x130>
 802a3d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a3d4:	e795      	b.n	802a302 <atanf+0x1e>
 802a3d6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802a3da:	ee30 7a67 	vsub.f32	s14, s0, s15
 802a3de:	ee30 0a27 	vadd.f32	s0, s0, s15
 802a3e2:	2301      	movs	r3, #1
 802a3e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a3e8:	e7be      	b.n	802a368 <atanf+0x84>
 802a3ea:	4b25      	ldr	r3, [pc, #148]	@ (802a480 <atanf+0x19c>)
 802a3ec:	429c      	cmp	r4, r3
 802a3ee:	d80b      	bhi.n	802a408 <atanf+0x124>
 802a3f0:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802a3f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a3f8:	eea0 7a27 	vfma.f32	s14, s0, s15
 802a3fc:	2302      	movs	r3, #2
 802a3fe:	ee70 6a67 	vsub.f32	s13, s0, s15
 802a402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802a406:	e7af      	b.n	802a368 <atanf+0x84>
 802a408:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802a40c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a410:	2303      	movs	r3, #3
 802a412:	e7a9      	b.n	802a368 <atanf+0x84>
 802a414:	4a1b      	ldr	r2, [pc, #108]	@ (802a484 <atanf+0x1a0>)
 802a416:	491c      	ldr	r1, [pc, #112]	@ (802a488 <atanf+0x1a4>)
 802a418:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802a41c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802a420:	edd3 6a00 	vldr	s13, [r3]
 802a424:	ee37 7a66 	vsub.f32	s14, s14, s13
 802a428:	2d00      	cmp	r5, #0
 802a42a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802a42e:	edd2 7a00 	vldr	s15, [r2]
 802a432:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802a436:	bfb8      	it	lt
 802a438:	eef1 7a67 	vneglt.f32	s15, s15
 802a43c:	e761      	b.n	802a302 <atanf+0x1e>
 802a43e:	bf00      	nop
 802a440:	bfc90fdb 	.word	0xbfc90fdb
 802a444:	3fc90fdb 	.word	0x3fc90fdb
 802a448:	3edfffff 	.word	0x3edfffff
 802a44c:	7149f2ca 	.word	0x7149f2ca
 802a450:	3f97ffff 	.word	0x3f97ffff
 802a454:	3c8569d7 	.word	0x3c8569d7
 802a458:	3d4bda59 	.word	0x3d4bda59
 802a45c:	bd6ef16b 	.word	0xbd6ef16b
 802a460:	3d886b35 	.word	0x3d886b35
 802a464:	3dba2e6e 	.word	0x3dba2e6e
 802a468:	3e124925 	.word	0x3e124925
 802a46c:	3eaaaaab 	.word	0x3eaaaaab
 802a470:	bd15a221 	.word	0xbd15a221
 802a474:	bd9d8795 	.word	0xbd9d8795
 802a478:	bde38e38 	.word	0xbde38e38
 802a47c:	be4ccccd 	.word	0xbe4ccccd
 802a480:	401bffff 	.word	0x401bffff
 802a484:	0802f3a8 	.word	0x0802f3a8
 802a488:	0802f398 	.word	0x0802f398

0802a48c <fabsf>:
 802a48c:	ee10 3a10 	vmov	r3, s0
 802a490:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802a494:	ee00 3a10 	vmov	s0, r3
 802a498:	4770      	bx	lr

0802a49a <abort>:
 802a49a:	b508      	push	{r3, lr}
 802a49c:	2006      	movs	r0, #6
 802a49e:	f000 fae1 	bl	802aa64 <raise>
 802a4a2:	2001      	movs	r0, #1
 802a4a4:	f7da fa8e 	bl	80049c4 <_exit>

0802a4a8 <__assert_func>:
 802a4a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a4aa:	4614      	mov	r4, r2
 802a4ac:	461a      	mov	r2, r3
 802a4ae:	4b09      	ldr	r3, [pc, #36]	@ (802a4d4 <__assert_func+0x2c>)
 802a4b0:	681b      	ldr	r3, [r3, #0]
 802a4b2:	4605      	mov	r5, r0
 802a4b4:	68d8      	ldr	r0, [r3, #12]
 802a4b6:	b954      	cbnz	r4, 802a4ce <__assert_func+0x26>
 802a4b8:	4b07      	ldr	r3, [pc, #28]	@ (802a4d8 <__assert_func+0x30>)
 802a4ba:	461c      	mov	r4, r3
 802a4bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a4c0:	9100      	str	r1, [sp, #0]
 802a4c2:	462b      	mov	r3, r5
 802a4c4:	4905      	ldr	r1, [pc, #20]	@ (802a4dc <__assert_func+0x34>)
 802a4c6:	f000 f983 	bl	802a7d0 <fiprintf>
 802a4ca:	f7ff ffe6 	bl	802a49a <abort>
 802a4ce:	4b04      	ldr	r3, [pc, #16]	@ (802a4e0 <__assert_func+0x38>)
 802a4d0:	e7f4      	b.n	802a4bc <__assert_func+0x14>
 802a4d2:	bf00      	nop
 802a4d4:	200000fc 	.word	0x200000fc
 802a4d8:	0802f3f3 	.word	0x0802f3f3
 802a4dc:	0802f3c5 	.word	0x0802f3c5
 802a4e0:	0802f3b8 	.word	0x0802f3b8

0802a4e4 <atexit>:
 802a4e4:	2300      	movs	r3, #0
 802a4e6:	4601      	mov	r1, r0
 802a4e8:	461a      	mov	r2, r3
 802a4ea:	4618      	mov	r0, r3
 802a4ec:	f000 bb68 	b.w	802abc0 <__register_exitproc>

0802a4f0 <malloc>:
 802a4f0:	4b02      	ldr	r3, [pc, #8]	@ (802a4fc <malloc+0xc>)
 802a4f2:	4601      	mov	r1, r0
 802a4f4:	6818      	ldr	r0, [r3, #0]
 802a4f6:	f000 b82d 	b.w	802a554 <_malloc_r>
 802a4fa:	bf00      	nop
 802a4fc:	200000fc 	.word	0x200000fc

0802a500 <free>:
 802a500:	4b02      	ldr	r3, [pc, #8]	@ (802a50c <free+0xc>)
 802a502:	4601      	mov	r1, r0
 802a504:	6818      	ldr	r0, [r3, #0]
 802a506:	f000 bbb7 	b.w	802ac78 <_free_r>
 802a50a:	bf00      	nop
 802a50c:	200000fc 	.word	0x200000fc

0802a510 <sbrk_aligned>:
 802a510:	b570      	push	{r4, r5, r6, lr}
 802a512:	4e0f      	ldr	r6, [pc, #60]	@ (802a550 <sbrk_aligned+0x40>)
 802a514:	460c      	mov	r4, r1
 802a516:	6831      	ldr	r1, [r6, #0]
 802a518:	4605      	mov	r5, r0
 802a51a:	b911      	cbnz	r1, 802a522 <sbrk_aligned+0x12>
 802a51c:	f000 faf2 	bl	802ab04 <_sbrk_r>
 802a520:	6030      	str	r0, [r6, #0]
 802a522:	4621      	mov	r1, r4
 802a524:	4628      	mov	r0, r5
 802a526:	f000 faed 	bl	802ab04 <_sbrk_r>
 802a52a:	1c43      	adds	r3, r0, #1
 802a52c:	d103      	bne.n	802a536 <sbrk_aligned+0x26>
 802a52e:	f04f 34ff 	mov.w	r4, #4294967295
 802a532:	4620      	mov	r0, r4
 802a534:	bd70      	pop	{r4, r5, r6, pc}
 802a536:	1cc4      	adds	r4, r0, #3
 802a538:	f024 0403 	bic.w	r4, r4, #3
 802a53c:	42a0      	cmp	r0, r4
 802a53e:	d0f8      	beq.n	802a532 <sbrk_aligned+0x22>
 802a540:	1a21      	subs	r1, r4, r0
 802a542:	4628      	mov	r0, r5
 802a544:	f000 fade 	bl	802ab04 <_sbrk_r>
 802a548:	3001      	adds	r0, #1
 802a54a:	d1f2      	bne.n	802a532 <sbrk_aligned+0x22>
 802a54c:	e7ef      	b.n	802a52e <sbrk_aligned+0x1e>
 802a54e:	bf00      	nop
 802a550:	2002832c 	.word	0x2002832c

0802a554 <_malloc_r>:
 802a554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a558:	1ccd      	adds	r5, r1, #3
 802a55a:	f025 0503 	bic.w	r5, r5, #3
 802a55e:	3508      	adds	r5, #8
 802a560:	2d0c      	cmp	r5, #12
 802a562:	bf38      	it	cc
 802a564:	250c      	movcc	r5, #12
 802a566:	2d00      	cmp	r5, #0
 802a568:	4606      	mov	r6, r0
 802a56a:	db01      	blt.n	802a570 <_malloc_r+0x1c>
 802a56c:	42a9      	cmp	r1, r5
 802a56e:	d904      	bls.n	802a57a <_malloc_r+0x26>
 802a570:	230c      	movs	r3, #12
 802a572:	6033      	str	r3, [r6, #0]
 802a574:	2000      	movs	r0, #0
 802a576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a57a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802a650 <_malloc_r+0xfc>
 802a57e:	f000 f869 	bl	802a654 <__malloc_lock>
 802a582:	f8d8 3000 	ldr.w	r3, [r8]
 802a586:	461c      	mov	r4, r3
 802a588:	bb44      	cbnz	r4, 802a5dc <_malloc_r+0x88>
 802a58a:	4629      	mov	r1, r5
 802a58c:	4630      	mov	r0, r6
 802a58e:	f7ff ffbf 	bl	802a510 <sbrk_aligned>
 802a592:	1c43      	adds	r3, r0, #1
 802a594:	4604      	mov	r4, r0
 802a596:	d158      	bne.n	802a64a <_malloc_r+0xf6>
 802a598:	f8d8 4000 	ldr.w	r4, [r8]
 802a59c:	4627      	mov	r7, r4
 802a59e:	2f00      	cmp	r7, #0
 802a5a0:	d143      	bne.n	802a62a <_malloc_r+0xd6>
 802a5a2:	2c00      	cmp	r4, #0
 802a5a4:	d04b      	beq.n	802a63e <_malloc_r+0xea>
 802a5a6:	6823      	ldr	r3, [r4, #0]
 802a5a8:	4639      	mov	r1, r7
 802a5aa:	4630      	mov	r0, r6
 802a5ac:	eb04 0903 	add.w	r9, r4, r3
 802a5b0:	f000 faa8 	bl	802ab04 <_sbrk_r>
 802a5b4:	4581      	cmp	r9, r0
 802a5b6:	d142      	bne.n	802a63e <_malloc_r+0xea>
 802a5b8:	6821      	ldr	r1, [r4, #0]
 802a5ba:	1a6d      	subs	r5, r5, r1
 802a5bc:	4629      	mov	r1, r5
 802a5be:	4630      	mov	r0, r6
 802a5c0:	f7ff ffa6 	bl	802a510 <sbrk_aligned>
 802a5c4:	3001      	adds	r0, #1
 802a5c6:	d03a      	beq.n	802a63e <_malloc_r+0xea>
 802a5c8:	6823      	ldr	r3, [r4, #0]
 802a5ca:	442b      	add	r3, r5
 802a5cc:	6023      	str	r3, [r4, #0]
 802a5ce:	f8d8 3000 	ldr.w	r3, [r8]
 802a5d2:	685a      	ldr	r2, [r3, #4]
 802a5d4:	bb62      	cbnz	r2, 802a630 <_malloc_r+0xdc>
 802a5d6:	f8c8 7000 	str.w	r7, [r8]
 802a5da:	e00f      	b.n	802a5fc <_malloc_r+0xa8>
 802a5dc:	6822      	ldr	r2, [r4, #0]
 802a5de:	1b52      	subs	r2, r2, r5
 802a5e0:	d420      	bmi.n	802a624 <_malloc_r+0xd0>
 802a5e2:	2a0b      	cmp	r2, #11
 802a5e4:	d917      	bls.n	802a616 <_malloc_r+0xc2>
 802a5e6:	1961      	adds	r1, r4, r5
 802a5e8:	42a3      	cmp	r3, r4
 802a5ea:	6025      	str	r5, [r4, #0]
 802a5ec:	bf18      	it	ne
 802a5ee:	6059      	strne	r1, [r3, #4]
 802a5f0:	6863      	ldr	r3, [r4, #4]
 802a5f2:	bf08      	it	eq
 802a5f4:	f8c8 1000 	streq.w	r1, [r8]
 802a5f8:	5162      	str	r2, [r4, r5]
 802a5fa:	604b      	str	r3, [r1, #4]
 802a5fc:	4630      	mov	r0, r6
 802a5fe:	f000 f82f 	bl	802a660 <__malloc_unlock>
 802a602:	f104 000b 	add.w	r0, r4, #11
 802a606:	1d23      	adds	r3, r4, #4
 802a608:	f020 0007 	bic.w	r0, r0, #7
 802a60c:	1ac2      	subs	r2, r0, r3
 802a60e:	bf1c      	itt	ne
 802a610:	1a1b      	subne	r3, r3, r0
 802a612:	50a3      	strne	r3, [r4, r2]
 802a614:	e7af      	b.n	802a576 <_malloc_r+0x22>
 802a616:	6862      	ldr	r2, [r4, #4]
 802a618:	42a3      	cmp	r3, r4
 802a61a:	bf0c      	ite	eq
 802a61c:	f8c8 2000 	streq.w	r2, [r8]
 802a620:	605a      	strne	r2, [r3, #4]
 802a622:	e7eb      	b.n	802a5fc <_malloc_r+0xa8>
 802a624:	4623      	mov	r3, r4
 802a626:	6864      	ldr	r4, [r4, #4]
 802a628:	e7ae      	b.n	802a588 <_malloc_r+0x34>
 802a62a:	463c      	mov	r4, r7
 802a62c:	687f      	ldr	r7, [r7, #4]
 802a62e:	e7b6      	b.n	802a59e <_malloc_r+0x4a>
 802a630:	461a      	mov	r2, r3
 802a632:	685b      	ldr	r3, [r3, #4]
 802a634:	42a3      	cmp	r3, r4
 802a636:	d1fb      	bne.n	802a630 <_malloc_r+0xdc>
 802a638:	2300      	movs	r3, #0
 802a63a:	6053      	str	r3, [r2, #4]
 802a63c:	e7de      	b.n	802a5fc <_malloc_r+0xa8>
 802a63e:	230c      	movs	r3, #12
 802a640:	6033      	str	r3, [r6, #0]
 802a642:	4630      	mov	r0, r6
 802a644:	f000 f80c 	bl	802a660 <__malloc_unlock>
 802a648:	e794      	b.n	802a574 <_malloc_r+0x20>
 802a64a:	6005      	str	r5, [r0, #0]
 802a64c:	e7d6      	b.n	802a5fc <_malloc_r+0xa8>
 802a64e:	bf00      	nop
 802a650:	20028330 	.word	0x20028330

0802a654 <__malloc_lock>:
 802a654:	4801      	ldr	r0, [pc, #4]	@ (802a65c <__malloc_lock+0x8>)
 802a656:	f000 baa2 	b.w	802ab9e <__retarget_lock_acquire_recursive>
 802a65a:	bf00      	nop
 802a65c:	20028474 	.word	0x20028474

0802a660 <__malloc_unlock>:
 802a660:	4801      	ldr	r0, [pc, #4]	@ (802a668 <__malloc_unlock+0x8>)
 802a662:	f000 ba9d 	b.w	802aba0 <__retarget_lock_release_recursive>
 802a666:	bf00      	nop
 802a668:	20028474 	.word	0x20028474

0802a66c <__cxa_atexit>:
 802a66c:	b510      	push	{r4, lr}
 802a66e:	4604      	mov	r4, r0
 802a670:	4804      	ldr	r0, [pc, #16]	@ (802a684 <__cxa_atexit+0x18>)
 802a672:	4613      	mov	r3, r2
 802a674:	b120      	cbz	r0, 802a680 <__cxa_atexit+0x14>
 802a676:	460a      	mov	r2, r1
 802a678:	2002      	movs	r0, #2
 802a67a:	4621      	mov	r1, r4
 802a67c:	f000 faa0 	bl	802abc0 <__register_exitproc>
 802a680:	bd10      	pop	{r4, pc}
 802a682:	bf00      	nop
 802a684:	0802abc1 	.word	0x0802abc1

0802a688 <std>:
 802a688:	2300      	movs	r3, #0
 802a68a:	b510      	push	{r4, lr}
 802a68c:	4604      	mov	r4, r0
 802a68e:	e9c0 3300 	strd	r3, r3, [r0]
 802a692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802a696:	6083      	str	r3, [r0, #8]
 802a698:	8181      	strh	r1, [r0, #12]
 802a69a:	6643      	str	r3, [r0, #100]	@ 0x64
 802a69c:	81c2      	strh	r2, [r0, #14]
 802a69e:	6183      	str	r3, [r0, #24]
 802a6a0:	4619      	mov	r1, r3
 802a6a2:	2208      	movs	r2, #8
 802a6a4:	305c      	adds	r0, #92	@ 0x5c
 802a6a6:	f000 f99b 	bl	802a9e0 <memset>
 802a6aa:	4b0d      	ldr	r3, [pc, #52]	@ (802a6e0 <std+0x58>)
 802a6ac:	6263      	str	r3, [r4, #36]	@ 0x24
 802a6ae:	4b0d      	ldr	r3, [pc, #52]	@ (802a6e4 <std+0x5c>)
 802a6b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 802a6b2:	4b0d      	ldr	r3, [pc, #52]	@ (802a6e8 <std+0x60>)
 802a6b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802a6b6:	4b0d      	ldr	r3, [pc, #52]	@ (802a6ec <std+0x64>)
 802a6b8:	6323      	str	r3, [r4, #48]	@ 0x30
 802a6ba:	4b0d      	ldr	r3, [pc, #52]	@ (802a6f0 <std+0x68>)
 802a6bc:	6224      	str	r4, [r4, #32]
 802a6be:	429c      	cmp	r4, r3
 802a6c0:	d006      	beq.n	802a6d0 <std+0x48>
 802a6c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802a6c6:	4294      	cmp	r4, r2
 802a6c8:	d002      	beq.n	802a6d0 <std+0x48>
 802a6ca:	33d0      	adds	r3, #208	@ 0xd0
 802a6cc:	429c      	cmp	r4, r3
 802a6ce:	d105      	bne.n	802a6dc <std+0x54>
 802a6d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802a6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a6d8:	f000 ba60 	b.w	802ab9c <__retarget_lock_init_recursive>
 802a6dc:	bd10      	pop	{r4, pc}
 802a6de:	bf00      	nop
 802a6e0:	0802a831 	.word	0x0802a831
 802a6e4:	0802a853 	.word	0x0802a853
 802a6e8:	0802a88b 	.word	0x0802a88b
 802a6ec:	0802a8af 	.word	0x0802a8af
 802a6f0:	20028334 	.word	0x20028334

0802a6f4 <stdio_exit_handler>:
 802a6f4:	4a02      	ldr	r2, [pc, #8]	@ (802a700 <stdio_exit_handler+0xc>)
 802a6f6:	4903      	ldr	r1, [pc, #12]	@ (802a704 <stdio_exit_handler+0x10>)
 802a6f8:	4803      	ldr	r0, [pc, #12]	@ (802a708 <stdio_exit_handler+0x14>)
 802a6fa:	f000 b87b 	b.w	802a7f4 <_fwalk_sglue>
 802a6fe:	bf00      	nop
 802a700:	200000f0 	.word	0x200000f0
 802a704:	0802b3b5 	.word	0x0802b3b5
 802a708:	20000100 	.word	0x20000100

0802a70c <cleanup_stdio>:
 802a70c:	6841      	ldr	r1, [r0, #4]
 802a70e:	4b0c      	ldr	r3, [pc, #48]	@ (802a740 <cleanup_stdio+0x34>)
 802a710:	4299      	cmp	r1, r3
 802a712:	b510      	push	{r4, lr}
 802a714:	4604      	mov	r4, r0
 802a716:	d001      	beq.n	802a71c <cleanup_stdio+0x10>
 802a718:	f000 fe4c 	bl	802b3b4 <_fflush_r>
 802a71c:	68a1      	ldr	r1, [r4, #8]
 802a71e:	4b09      	ldr	r3, [pc, #36]	@ (802a744 <cleanup_stdio+0x38>)
 802a720:	4299      	cmp	r1, r3
 802a722:	d002      	beq.n	802a72a <cleanup_stdio+0x1e>
 802a724:	4620      	mov	r0, r4
 802a726:	f000 fe45 	bl	802b3b4 <_fflush_r>
 802a72a:	68e1      	ldr	r1, [r4, #12]
 802a72c:	4b06      	ldr	r3, [pc, #24]	@ (802a748 <cleanup_stdio+0x3c>)
 802a72e:	4299      	cmp	r1, r3
 802a730:	d004      	beq.n	802a73c <cleanup_stdio+0x30>
 802a732:	4620      	mov	r0, r4
 802a734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a738:	f000 be3c 	b.w	802b3b4 <_fflush_r>
 802a73c:	bd10      	pop	{r4, pc}
 802a73e:	bf00      	nop
 802a740:	20028334 	.word	0x20028334
 802a744:	2002839c 	.word	0x2002839c
 802a748:	20028404 	.word	0x20028404

0802a74c <global_stdio_init.part.0>:
 802a74c:	b510      	push	{r4, lr}
 802a74e:	4b0b      	ldr	r3, [pc, #44]	@ (802a77c <global_stdio_init.part.0+0x30>)
 802a750:	4c0b      	ldr	r4, [pc, #44]	@ (802a780 <global_stdio_init.part.0+0x34>)
 802a752:	4a0c      	ldr	r2, [pc, #48]	@ (802a784 <global_stdio_init.part.0+0x38>)
 802a754:	601a      	str	r2, [r3, #0]
 802a756:	4620      	mov	r0, r4
 802a758:	2200      	movs	r2, #0
 802a75a:	2104      	movs	r1, #4
 802a75c:	f7ff ff94 	bl	802a688 <std>
 802a760:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802a764:	2201      	movs	r2, #1
 802a766:	2109      	movs	r1, #9
 802a768:	f7ff ff8e 	bl	802a688 <std>
 802a76c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802a770:	2202      	movs	r2, #2
 802a772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a776:	2112      	movs	r1, #18
 802a778:	f7ff bf86 	b.w	802a688 <std>
 802a77c:	2002846c 	.word	0x2002846c
 802a780:	20028334 	.word	0x20028334
 802a784:	0802a6f5 	.word	0x0802a6f5

0802a788 <__sfp_lock_acquire>:
 802a788:	4801      	ldr	r0, [pc, #4]	@ (802a790 <__sfp_lock_acquire+0x8>)
 802a78a:	f000 ba08 	b.w	802ab9e <__retarget_lock_acquire_recursive>
 802a78e:	bf00      	nop
 802a790:	20028476 	.word	0x20028476

0802a794 <__sfp_lock_release>:
 802a794:	4801      	ldr	r0, [pc, #4]	@ (802a79c <__sfp_lock_release+0x8>)
 802a796:	f000 ba03 	b.w	802aba0 <__retarget_lock_release_recursive>
 802a79a:	bf00      	nop
 802a79c:	20028476 	.word	0x20028476

0802a7a0 <__sinit>:
 802a7a0:	b510      	push	{r4, lr}
 802a7a2:	4604      	mov	r4, r0
 802a7a4:	f7ff fff0 	bl	802a788 <__sfp_lock_acquire>
 802a7a8:	6a23      	ldr	r3, [r4, #32]
 802a7aa:	b11b      	cbz	r3, 802a7b4 <__sinit+0x14>
 802a7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a7b0:	f7ff bff0 	b.w	802a794 <__sfp_lock_release>
 802a7b4:	4b04      	ldr	r3, [pc, #16]	@ (802a7c8 <__sinit+0x28>)
 802a7b6:	6223      	str	r3, [r4, #32]
 802a7b8:	4b04      	ldr	r3, [pc, #16]	@ (802a7cc <__sinit+0x2c>)
 802a7ba:	681b      	ldr	r3, [r3, #0]
 802a7bc:	2b00      	cmp	r3, #0
 802a7be:	d1f5      	bne.n	802a7ac <__sinit+0xc>
 802a7c0:	f7ff ffc4 	bl	802a74c <global_stdio_init.part.0>
 802a7c4:	e7f2      	b.n	802a7ac <__sinit+0xc>
 802a7c6:	bf00      	nop
 802a7c8:	0802a70d 	.word	0x0802a70d
 802a7cc:	2002846c 	.word	0x2002846c

0802a7d0 <fiprintf>:
 802a7d0:	b40e      	push	{r1, r2, r3}
 802a7d2:	b503      	push	{r0, r1, lr}
 802a7d4:	4601      	mov	r1, r0
 802a7d6:	ab03      	add	r3, sp, #12
 802a7d8:	4805      	ldr	r0, [pc, #20]	@ (802a7f0 <fiprintf+0x20>)
 802a7da:	f853 2b04 	ldr.w	r2, [r3], #4
 802a7de:	6800      	ldr	r0, [r0, #0]
 802a7e0:	9301      	str	r3, [sp, #4]
 802a7e2:	f000 fabd 	bl	802ad60 <_vfiprintf_r>
 802a7e6:	b002      	add	sp, #8
 802a7e8:	f85d eb04 	ldr.w	lr, [sp], #4
 802a7ec:	b003      	add	sp, #12
 802a7ee:	4770      	bx	lr
 802a7f0:	200000fc 	.word	0x200000fc

0802a7f4 <_fwalk_sglue>:
 802a7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a7f8:	4607      	mov	r7, r0
 802a7fa:	4688      	mov	r8, r1
 802a7fc:	4614      	mov	r4, r2
 802a7fe:	2600      	movs	r6, #0
 802a800:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802a804:	f1b9 0901 	subs.w	r9, r9, #1
 802a808:	d505      	bpl.n	802a816 <_fwalk_sglue+0x22>
 802a80a:	6824      	ldr	r4, [r4, #0]
 802a80c:	2c00      	cmp	r4, #0
 802a80e:	d1f7      	bne.n	802a800 <_fwalk_sglue+0xc>
 802a810:	4630      	mov	r0, r6
 802a812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a816:	89ab      	ldrh	r3, [r5, #12]
 802a818:	2b01      	cmp	r3, #1
 802a81a:	d907      	bls.n	802a82c <_fwalk_sglue+0x38>
 802a81c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802a820:	3301      	adds	r3, #1
 802a822:	d003      	beq.n	802a82c <_fwalk_sglue+0x38>
 802a824:	4629      	mov	r1, r5
 802a826:	4638      	mov	r0, r7
 802a828:	47c0      	blx	r8
 802a82a:	4306      	orrs	r6, r0
 802a82c:	3568      	adds	r5, #104	@ 0x68
 802a82e:	e7e9      	b.n	802a804 <_fwalk_sglue+0x10>

0802a830 <__sread>:
 802a830:	b510      	push	{r4, lr}
 802a832:	460c      	mov	r4, r1
 802a834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a838:	f000 f93e 	bl	802aab8 <_read_r>
 802a83c:	2800      	cmp	r0, #0
 802a83e:	bfab      	itete	ge
 802a840:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802a842:	89a3      	ldrhlt	r3, [r4, #12]
 802a844:	181b      	addge	r3, r3, r0
 802a846:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802a84a:	bfac      	ite	ge
 802a84c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802a84e:	81a3      	strhlt	r3, [r4, #12]
 802a850:	bd10      	pop	{r4, pc}

0802a852 <__swrite>:
 802a852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a856:	461f      	mov	r7, r3
 802a858:	898b      	ldrh	r3, [r1, #12]
 802a85a:	05db      	lsls	r3, r3, #23
 802a85c:	4605      	mov	r5, r0
 802a85e:	460c      	mov	r4, r1
 802a860:	4616      	mov	r6, r2
 802a862:	d505      	bpl.n	802a870 <__swrite+0x1e>
 802a864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a868:	2302      	movs	r3, #2
 802a86a:	2200      	movs	r2, #0
 802a86c:	f000 f912 	bl	802aa94 <_lseek_r>
 802a870:	89a3      	ldrh	r3, [r4, #12]
 802a872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a876:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802a87a:	81a3      	strh	r3, [r4, #12]
 802a87c:	4632      	mov	r2, r6
 802a87e:	463b      	mov	r3, r7
 802a880:	4628      	mov	r0, r5
 802a882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a886:	f000 b94d 	b.w	802ab24 <_write_r>

0802a88a <__sseek>:
 802a88a:	b510      	push	{r4, lr}
 802a88c:	460c      	mov	r4, r1
 802a88e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a892:	f000 f8ff 	bl	802aa94 <_lseek_r>
 802a896:	1c43      	adds	r3, r0, #1
 802a898:	89a3      	ldrh	r3, [r4, #12]
 802a89a:	bf15      	itete	ne
 802a89c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802a89e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802a8a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802a8a6:	81a3      	strheq	r3, [r4, #12]
 802a8a8:	bf18      	it	ne
 802a8aa:	81a3      	strhne	r3, [r4, #12]
 802a8ac:	bd10      	pop	{r4, pc}

0802a8ae <__sclose>:
 802a8ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a8b2:	f000 b8df 	b.w	802aa74 <_close_r>

0802a8b6 <__swbuf_r>:
 802a8b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a8b8:	460e      	mov	r6, r1
 802a8ba:	4614      	mov	r4, r2
 802a8bc:	4605      	mov	r5, r0
 802a8be:	b118      	cbz	r0, 802a8c8 <__swbuf_r+0x12>
 802a8c0:	6a03      	ldr	r3, [r0, #32]
 802a8c2:	b90b      	cbnz	r3, 802a8c8 <__swbuf_r+0x12>
 802a8c4:	f7ff ff6c 	bl	802a7a0 <__sinit>
 802a8c8:	69a3      	ldr	r3, [r4, #24]
 802a8ca:	60a3      	str	r3, [r4, #8]
 802a8cc:	89a3      	ldrh	r3, [r4, #12]
 802a8ce:	071a      	lsls	r2, r3, #28
 802a8d0:	d501      	bpl.n	802a8d6 <__swbuf_r+0x20>
 802a8d2:	6923      	ldr	r3, [r4, #16]
 802a8d4:	b943      	cbnz	r3, 802a8e8 <__swbuf_r+0x32>
 802a8d6:	4621      	mov	r1, r4
 802a8d8:	4628      	mov	r0, r5
 802a8da:	f000 f82b 	bl	802a934 <__swsetup_r>
 802a8de:	b118      	cbz	r0, 802a8e8 <__swbuf_r+0x32>
 802a8e0:	f04f 37ff 	mov.w	r7, #4294967295
 802a8e4:	4638      	mov	r0, r7
 802a8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a8e8:	6823      	ldr	r3, [r4, #0]
 802a8ea:	6922      	ldr	r2, [r4, #16]
 802a8ec:	1a98      	subs	r0, r3, r2
 802a8ee:	6963      	ldr	r3, [r4, #20]
 802a8f0:	b2f6      	uxtb	r6, r6
 802a8f2:	4283      	cmp	r3, r0
 802a8f4:	4637      	mov	r7, r6
 802a8f6:	dc05      	bgt.n	802a904 <__swbuf_r+0x4e>
 802a8f8:	4621      	mov	r1, r4
 802a8fa:	4628      	mov	r0, r5
 802a8fc:	f000 fd5a 	bl	802b3b4 <_fflush_r>
 802a900:	2800      	cmp	r0, #0
 802a902:	d1ed      	bne.n	802a8e0 <__swbuf_r+0x2a>
 802a904:	68a3      	ldr	r3, [r4, #8]
 802a906:	3b01      	subs	r3, #1
 802a908:	60a3      	str	r3, [r4, #8]
 802a90a:	6823      	ldr	r3, [r4, #0]
 802a90c:	1c5a      	adds	r2, r3, #1
 802a90e:	6022      	str	r2, [r4, #0]
 802a910:	701e      	strb	r6, [r3, #0]
 802a912:	6962      	ldr	r2, [r4, #20]
 802a914:	1c43      	adds	r3, r0, #1
 802a916:	429a      	cmp	r2, r3
 802a918:	d004      	beq.n	802a924 <__swbuf_r+0x6e>
 802a91a:	89a3      	ldrh	r3, [r4, #12]
 802a91c:	07db      	lsls	r3, r3, #31
 802a91e:	d5e1      	bpl.n	802a8e4 <__swbuf_r+0x2e>
 802a920:	2e0a      	cmp	r6, #10
 802a922:	d1df      	bne.n	802a8e4 <__swbuf_r+0x2e>
 802a924:	4621      	mov	r1, r4
 802a926:	4628      	mov	r0, r5
 802a928:	f000 fd44 	bl	802b3b4 <_fflush_r>
 802a92c:	2800      	cmp	r0, #0
 802a92e:	d0d9      	beq.n	802a8e4 <__swbuf_r+0x2e>
 802a930:	e7d6      	b.n	802a8e0 <__swbuf_r+0x2a>
	...

0802a934 <__swsetup_r>:
 802a934:	b538      	push	{r3, r4, r5, lr}
 802a936:	4b29      	ldr	r3, [pc, #164]	@ (802a9dc <__swsetup_r+0xa8>)
 802a938:	4605      	mov	r5, r0
 802a93a:	6818      	ldr	r0, [r3, #0]
 802a93c:	460c      	mov	r4, r1
 802a93e:	b118      	cbz	r0, 802a948 <__swsetup_r+0x14>
 802a940:	6a03      	ldr	r3, [r0, #32]
 802a942:	b90b      	cbnz	r3, 802a948 <__swsetup_r+0x14>
 802a944:	f7ff ff2c 	bl	802a7a0 <__sinit>
 802a948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a94c:	0719      	lsls	r1, r3, #28
 802a94e:	d422      	bmi.n	802a996 <__swsetup_r+0x62>
 802a950:	06da      	lsls	r2, r3, #27
 802a952:	d407      	bmi.n	802a964 <__swsetup_r+0x30>
 802a954:	2209      	movs	r2, #9
 802a956:	602a      	str	r2, [r5, #0]
 802a958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a95c:	81a3      	strh	r3, [r4, #12]
 802a95e:	f04f 30ff 	mov.w	r0, #4294967295
 802a962:	e033      	b.n	802a9cc <__swsetup_r+0x98>
 802a964:	0758      	lsls	r0, r3, #29
 802a966:	d512      	bpl.n	802a98e <__swsetup_r+0x5a>
 802a968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a96a:	b141      	cbz	r1, 802a97e <__swsetup_r+0x4a>
 802a96c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802a970:	4299      	cmp	r1, r3
 802a972:	d002      	beq.n	802a97a <__swsetup_r+0x46>
 802a974:	4628      	mov	r0, r5
 802a976:	f000 f97f 	bl	802ac78 <_free_r>
 802a97a:	2300      	movs	r3, #0
 802a97c:	6363      	str	r3, [r4, #52]	@ 0x34
 802a97e:	89a3      	ldrh	r3, [r4, #12]
 802a980:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802a984:	81a3      	strh	r3, [r4, #12]
 802a986:	2300      	movs	r3, #0
 802a988:	6063      	str	r3, [r4, #4]
 802a98a:	6923      	ldr	r3, [r4, #16]
 802a98c:	6023      	str	r3, [r4, #0]
 802a98e:	89a3      	ldrh	r3, [r4, #12]
 802a990:	f043 0308 	orr.w	r3, r3, #8
 802a994:	81a3      	strh	r3, [r4, #12]
 802a996:	6923      	ldr	r3, [r4, #16]
 802a998:	b94b      	cbnz	r3, 802a9ae <__swsetup_r+0x7a>
 802a99a:	89a3      	ldrh	r3, [r4, #12]
 802a99c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802a9a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802a9a4:	d003      	beq.n	802a9ae <__swsetup_r+0x7a>
 802a9a6:	4621      	mov	r1, r4
 802a9a8:	4628      	mov	r0, r5
 802a9aa:	f000 fd51 	bl	802b450 <__smakebuf_r>
 802a9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a9b2:	f013 0201 	ands.w	r2, r3, #1
 802a9b6:	d00a      	beq.n	802a9ce <__swsetup_r+0x9a>
 802a9b8:	2200      	movs	r2, #0
 802a9ba:	60a2      	str	r2, [r4, #8]
 802a9bc:	6962      	ldr	r2, [r4, #20]
 802a9be:	4252      	negs	r2, r2
 802a9c0:	61a2      	str	r2, [r4, #24]
 802a9c2:	6922      	ldr	r2, [r4, #16]
 802a9c4:	b942      	cbnz	r2, 802a9d8 <__swsetup_r+0xa4>
 802a9c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802a9ca:	d1c5      	bne.n	802a958 <__swsetup_r+0x24>
 802a9cc:	bd38      	pop	{r3, r4, r5, pc}
 802a9ce:	0799      	lsls	r1, r3, #30
 802a9d0:	bf58      	it	pl
 802a9d2:	6962      	ldrpl	r2, [r4, #20]
 802a9d4:	60a2      	str	r2, [r4, #8]
 802a9d6:	e7f4      	b.n	802a9c2 <__swsetup_r+0x8e>
 802a9d8:	2000      	movs	r0, #0
 802a9da:	e7f7      	b.n	802a9cc <__swsetup_r+0x98>
 802a9dc:	200000fc 	.word	0x200000fc

0802a9e0 <memset>:
 802a9e0:	4402      	add	r2, r0
 802a9e2:	4603      	mov	r3, r0
 802a9e4:	4293      	cmp	r3, r2
 802a9e6:	d100      	bne.n	802a9ea <memset+0xa>
 802a9e8:	4770      	bx	lr
 802a9ea:	f803 1b01 	strb.w	r1, [r3], #1
 802a9ee:	e7f9      	b.n	802a9e4 <memset+0x4>

0802a9f0 <strncmp>:
 802a9f0:	b510      	push	{r4, lr}
 802a9f2:	b16a      	cbz	r2, 802aa10 <strncmp+0x20>
 802a9f4:	3901      	subs	r1, #1
 802a9f6:	1884      	adds	r4, r0, r2
 802a9f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a9fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802aa00:	429a      	cmp	r2, r3
 802aa02:	d103      	bne.n	802aa0c <strncmp+0x1c>
 802aa04:	42a0      	cmp	r0, r4
 802aa06:	d001      	beq.n	802aa0c <strncmp+0x1c>
 802aa08:	2a00      	cmp	r2, #0
 802aa0a:	d1f5      	bne.n	802a9f8 <strncmp+0x8>
 802aa0c:	1ad0      	subs	r0, r2, r3
 802aa0e:	bd10      	pop	{r4, pc}
 802aa10:	4610      	mov	r0, r2
 802aa12:	e7fc      	b.n	802aa0e <strncmp+0x1e>

0802aa14 <_raise_r>:
 802aa14:	291f      	cmp	r1, #31
 802aa16:	b538      	push	{r3, r4, r5, lr}
 802aa18:	4605      	mov	r5, r0
 802aa1a:	460c      	mov	r4, r1
 802aa1c:	d904      	bls.n	802aa28 <_raise_r+0x14>
 802aa1e:	2316      	movs	r3, #22
 802aa20:	6003      	str	r3, [r0, #0]
 802aa22:	f04f 30ff 	mov.w	r0, #4294967295
 802aa26:	bd38      	pop	{r3, r4, r5, pc}
 802aa28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802aa2a:	b112      	cbz	r2, 802aa32 <_raise_r+0x1e>
 802aa2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802aa30:	b94b      	cbnz	r3, 802aa46 <_raise_r+0x32>
 802aa32:	4628      	mov	r0, r5
 802aa34:	f000 f864 	bl	802ab00 <_getpid_r>
 802aa38:	4622      	mov	r2, r4
 802aa3a:	4601      	mov	r1, r0
 802aa3c:	4628      	mov	r0, r5
 802aa3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802aa42:	f000 b84b 	b.w	802aadc <_kill_r>
 802aa46:	2b01      	cmp	r3, #1
 802aa48:	d00a      	beq.n	802aa60 <_raise_r+0x4c>
 802aa4a:	1c59      	adds	r1, r3, #1
 802aa4c:	d103      	bne.n	802aa56 <_raise_r+0x42>
 802aa4e:	2316      	movs	r3, #22
 802aa50:	6003      	str	r3, [r0, #0]
 802aa52:	2001      	movs	r0, #1
 802aa54:	e7e7      	b.n	802aa26 <_raise_r+0x12>
 802aa56:	2100      	movs	r1, #0
 802aa58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802aa5c:	4620      	mov	r0, r4
 802aa5e:	4798      	blx	r3
 802aa60:	2000      	movs	r0, #0
 802aa62:	e7e0      	b.n	802aa26 <_raise_r+0x12>

0802aa64 <raise>:
 802aa64:	4b02      	ldr	r3, [pc, #8]	@ (802aa70 <raise+0xc>)
 802aa66:	4601      	mov	r1, r0
 802aa68:	6818      	ldr	r0, [r3, #0]
 802aa6a:	f7ff bfd3 	b.w	802aa14 <_raise_r>
 802aa6e:	bf00      	nop
 802aa70:	200000fc 	.word	0x200000fc

0802aa74 <_close_r>:
 802aa74:	b538      	push	{r3, r4, r5, lr}
 802aa76:	4d06      	ldr	r5, [pc, #24]	@ (802aa90 <_close_r+0x1c>)
 802aa78:	2300      	movs	r3, #0
 802aa7a:	4604      	mov	r4, r0
 802aa7c:	4608      	mov	r0, r1
 802aa7e:	602b      	str	r3, [r5, #0]
 802aa80:	f7d9 ffc2 	bl	8004a08 <_close>
 802aa84:	1c43      	adds	r3, r0, #1
 802aa86:	d102      	bne.n	802aa8e <_close_r+0x1a>
 802aa88:	682b      	ldr	r3, [r5, #0]
 802aa8a:	b103      	cbz	r3, 802aa8e <_close_r+0x1a>
 802aa8c:	6023      	str	r3, [r4, #0]
 802aa8e:	bd38      	pop	{r3, r4, r5, pc}
 802aa90:	20028470 	.word	0x20028470

0802aa94 <_lseek_r>:
 802aa94:	b538      	push	{r3, r4, r5, lr}
 802aa96:	4d07      	ldr	r5, [pc, #28]	@ (802aab4 <_lseek_r+0x20>)
 802aa98:	4604      	mov	r4, r0
 802aa9a:	4608      	mov	r0, r1
 802aa9c:	4611      	mov	r1, r2
 802aa9e:	2200      	movs	r2, #0
 802aaa0:	602a      	str	r2, [r5, #0]
 802aaa2:	461a      	mov	r2, r3
 802aaa4:	f7d9 ffba 	bl	8004a1c <_lseek>
 802aaa8:	1c43      	adds	r3, r0, #1
 802aaaa:	d102      	bne.n	802aab2 <_lseek_r+0x1e>
 802aaac:	682b      	ldr	r3, [r5, #0]
 802aaae:	b103      	cbz	r3, 802aab2 <_lseek_r+0x1e>
 802aab0:	6023      	str	r3, [r4, #0]
 802aab2:	bd38      	pop	{r3, r4, r5, pc}
 802aab4:	20028470 	.word	0x20028470

0802aab8 <_read_r>:
 802aab8:	b538      	push	{r3, r4, r5, lr}
 802aaba:	4d07      	ldr	r5, [pc, #28]	@ (802aad8 <_read_r+0x20>)
 802aabc:	4604      	mov	r4, r0
 802aabe:	4608      	mov	r0, r1
 802aac0:	4611      	mov	r1, r2
 802aac2:	2200      	movs	r2, #0
 802aac4:	602a      	str	r2, [r5, #0]
 802aac6:	461a      	mov	r2, r3
 802aac8:	f7d9 ff82 	bl	80049d0 <_read>
 802aacc:	1c43      	adds	r3, r0, #1
 802aace:	d102      	bne.n	802aad6 <_read_r+0x1e>
 802aad0:	682b      	ldr	r3, [r5, #0]
 802aad2:	b103      	cbz	r3, 802aad6 <_read_r+0x1e>
 802aad4:	6023      	str	r3, [r4, #0]
 802aad6:	bd38      	pop	{r3, r4, r5, pc}
 802aad8:	20028470 	.word	0x20028470

0802aadc <_kill_r>:
 802aadc:	b538      	push	{r3, r4, r5, lr}
 802aade:	4d07      	ldr	r5, [pc, #28]	@ (802aafc <_kill_r+0x20>)
 802aae0:	2300      	movs	r3, #0
 802aae2:	4604      	mov	r4, r0
 802aae4:	4608      	mov	r0, r1
 802aae6:	4611      	mov	r1, r2
 802aae8:	602b      	str	r3, [r5, #0]
 802aaea:	f7d9 ff63 	bl	80049b4 <_kill>
 802aaee:	1c43      	adds	r3, r0, #1
 802aaf0:	d102      	bne.n	802aaf8 <_kill_r+0x1c>
 802aaf2:	682b      	ldr	r3, [r5, #0]
 802aaf4:	b103      	cbz	r3, 802aaf8 <_kill_r+0x1c>
 802aaf6:	6023      	str	r3, [r4, #0]
 802aaf8:	bd38      	pop	{r3, r4, r5, pc}
 802aafa:	bf00      	nop
 802aafc:	20028470 	.word	0x20028470

0802ab00 <_getpid_r>:
 802ab00:	f7d9 bf56 	b.w	80049b0 <_getpid>

0802ab04 <_sbrk_r>:
 802ab04:	b538      	push	{r3, r4, r5, lr}
 802ab06:	4d06      	ldr	r5, [pc, #24]	@ (802ab20 <_sbrk_r+0x1c>)
 802ab08:	2300      	movs	r3, #0
 802ab0a:	4604      	mov	r4, r0
 802ab0c:	4608      	mov	r0, r1
 802ab0e:	602b      	str	r3, [r5, #0]
 802ab10:	f7d9 ff86 	bl	8004a20 <_sbrk>
 802ab14:	1c43      	adds	r3, r0, #1
 802ab16:	d102      	bne.n	802ab1e <_sbrk_r+0x1a>
 802ab18:	682b      	ldr	r3, [r5, #0]
 802ab1a:	b103      	cbz	r3, 802ab1e <_sbrk_r+0x1a>
 802ab1c:	6023      	str	r3, [r4, #0]
 802ab1e:	bd38      	pop	{r3, r4, r5, pc}
 802ab20:	20028470 	.word	0x20028470

0802ab24 <_write_r>:
 802ab24:	b538      	push	{r3, r4, r5, lr}
 802ab26:	4d07      	ldr	r5, [pc, #28]	@ (802ab44 <_write_r+0x20>)
 802ab28:	4604      	mov	r4, r0
 802ab2a:	4608      	mov	r0, r1
 802ab2c:	4611      	mov	r1, r2
 802ab2e:	2200      	movs	r2, #0
 802ab30:	602a      	str	r2, [r5, #0]
 802ab32:	461a      	mov	r2, r3
 802ab34:	f7d9 ff5a 	bl	80049ec <_write>
 802ab38:	1c43      	adds	r3, r0, #1
 802ab3a:	d102      	bne.n	802ab42 <_write_r+0x1e>
 802ab3c:	682b      	ldr	r3, [r5, #0]
 802ab3e:	b103      	cbz	r3, 802ab42 <_write_r+0x1e>
 802ab40:	6023      	str	r3, [r4, #0]
 802ab42:	bd38      	pop	{r3, r4, r5, pc}
 802ab44:	20028470 	.word	0x20028470

0802ab48 <__errno>:
 802ab48:	4b01      	ldr	r3, [pc, #4]	@ (802ab50 <__errno+0x8>)
 802ab4a:	6818      	ldr	r0, [r3, #0]
 802ab4c:	4770      	bx	lr
 802ab4e:	bf00      	nop
 802ab50:	200000fc 	.word	0x200000fc

0802ab54 <__libc_init_array>:
 802ab54:	b570      	push	{r4, r5, r6, lr}
 802ab56:	4d0d      	ldr	r5, [pc, #52]	@ (802ab8c <__libc_init_array+0x38>)
 802ab58:	4c0d      	ldr	r4, [pc, #52]	@ (802ab90 <__libc_init_array+0x3c>)
 802ab5a:	1b64      	subs	r4, r4, r5
 802ab5c:	10a4      	asrs	r4, r4, #2
 802ab5e:	2600      	movs	r6, #0
 802ab60:	42a6      	cmp	r6, r4
 802ab62:	d109      	bne.n	802ab78 <__libc_init_array+0x24>
 802ab64:	4d0b      	ldr	r5, [pc, #44]	@ (802ab94 <__libc_init_array+0x40>)
 802ab66:	4c0c      	ldr	r4, [pc, #48]	@ (802ab98 <__libc_init_array+0x44>)
 802ab68:	f000 fcd0 	bl	802b50c <_init>
 802ab6c:	1b64      	subs	r4, r4, r5
 802ab6e:	10a4      	asrs	r4, r4, #2
 802ab70:	2600      	movs	r6, #0
 802ab72:	42a6      	cmp	r6, r4
 802ab74:	d105      	bne.n	802ab82 <__libc_init_array+0x2e>
 802ab76:	bd70      	pop	{r4, r5, r6, pc}
 802ab78:	f855 3b04 	ldr.w	r3, [r5], #4
 802ab7c:	4798      	blx	r3
 802ab7e:	3601      	adds	r6, #1
 802ab80:	e7ee      	b.n	802ab60 <__libc_init_array+0xc>
 802ab82:	f855 3b04 	ldr.w	r3, [r5], #4
 802ab86:	4798      	blx	r3
 802ab88:	3601      	adds	r6, #1
 802ab8a:	e7f2      	b.n	802ab72 <__libc_init_array+0x1e>
 802ab8c:	0802f450 	.word	0x0802f450
 802ab90:	0802f450 	.word	0x0802f450
 802ab94:	0802f450 	.word	0x0802f450
 802ab98:	0802f46c 	.word	0x0802f46c

0802ab9c <__retarget_lock_init_recursive>:
 802ab9c:	4770      	bx	lr

0802ab9e <__retarget_lock_acquire_recursive>:
 802ab9e:	4770      	bx	lr

0802aba0 <__retarget_lock_release_recursive>:
 802aba0:	4770      	bx	lr

0802aba2 <memcpy>:
 802aba2:	440a      	add	r2, r1
 802aba4:	4291      	cmp	r1, r2
 802aba6:	f100 33ff 	add.w	r3, r0, #4294967295
 802abaa:	d100      	bne.n	802abae <memcpy+0xc>
 802abac:	4770      	bx	lr
 802abae:	b510      	push	{r4, lr}
 802abb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 802abb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 802abb8:	4291      	cmp	r1, r2
 802abba:	d1f9      	bne.n	802abb0 <memcpy+0xe>
 802abbc:	bd10      	pop	{r4, pc}
	...

0802abc0 <__register_exitproc>:
 802abc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802abc4:	4d27      	ldr	r5, [pc, #156]	@ (802ac64 <__register_exitproc+0xa4>)
 802abc6:	4607      	mov	r7, r0
 802abc8:	6828      	ldr	r0, [r5, #0]
 802abca:	4691      	mov	r9, r2
 802abcc:	460e      	mov	r6, r1
 802abce:	4698      	mov	r8, r3
 802abd0:	f7ff ffe5 	bl	802ab9e <__retarget_lock_acquire_recursive>
 802abd4:	4a24      	ldr	r2, [pc, #144]	@ (802ac68 <__register_exitproc+0xa8>)
 802abd6:	6814      	ldr	r4, [r2, #0]
 802abd8:	b93c      	cbnz	r4, 802abea <__register_exitproc+0x2a>
 802abda:	4b24      	ldr	r3, [pc, #144]	@ (802ac6c <__register_exitproc+0xac>)
 802abdc:	6013      	str	r3, [r2, #0]
 802abde:	4a24      	ldr	r2, [pc, #144]	@ (802ac70 <__register_exitproc+0xb0>)
 802abe0:	b112      	cbz	r2, 802abe8 <__register_exitproc+0x28>
 802abe2:	6812      	ldr	r2, [r2, #0]
 802abe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802abe8:	4c20      	ldr	r4, [pc, #128]	@ (802ac6c <__register_exitproc+0xac>)
 802abea:	6863      	ldr	r3, [r4, #4]
 802abec:	2b1f      	cmp	r3, #31
 802abee:	dd06      	ble.n	802abfe <__register_exitproc+0x3e>
 802abf0:	6828      	ldr	r0, [r5, #0]
 802abf2:	f7ff ffd5 	bl	802aba0 <__retarget_lock_release_recursive>
 802abf6:	f04f 30ff 	mov.w	r0, #4294967295
 802abfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802abfe:	b32f      	cbz	r7, 802ac4c <__register_exitproc+0x8c>
 802ac00:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802ac04:	b968      	cbnz	r0, 802ac22 <__register_exitproc+0x62>
 802ac06:	4b1b      	ldr	r3, [pc, #108]	@ (802ac74 <__register_exitproc+0xb4>)
 802ac08:	2b00      	cmp	r3, #0
 802ac0a:	d0f1      	beq.n	802abf0 <__register_exitproc+0x30>
 802ac0c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802ac10:	f7ff fc6e 	bl	802a4f0 <malloc>
 802ac14:	2800      	cmp	r0, #0
 802ac16:	d0eb      	beq.n	802abf0 <__register_exitproc+0x30>
 802ac18:	2300      	movs	r3, #0
 802ac1a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802ac1e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802ac22:	6863      	ldr	r3, [r4, #4]
 802ac24:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802ac28:	2201      	movs	r2, #1
 802ac2a:	409a      	lsls	r2, r3
 802ac2c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802ac30:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802ac34:	4313      	orrs	r3, r2
 802ac36:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802ac3a:	2f02      	cmp	r7, #2
 802ac3c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802ac40:	bf02      	ittt	eq
 802ac42:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802ac46:	4313      	orreq	r3, r2
 802ac48:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802ac4c:	6863      	ldr	r3, [r4, #4]
 802ac4e:	6828      	ldr	r0, [r5, #0]
 802ac50:	1c5a      	adds	r2, r3, #1
 802ac52:	3302      	adds	r3, #2
 802ac54:	6062      	str	r2, [r4, #4]
 802ac56:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802ac5a:	f7ff ffa1 	bl	802aba0 <__retarget_lock_release_recursive>
 802ac5e:	2000      	movs	r0, #0
 802ac60:	e7cb      	b.n	802abfa <__register_exitproc+0x3a>
 802ac62:	bf00      	nop
 802ac64:	2000014c 	.word	0x2000014c
 802ac68:	20028504 	.word	0x20028504
 802ac6c:	20028478 	.word	0x20028478
 802ac70:	0802f3f4 	.word	0x0802f3f4
 802ac74:	0802a4f1 	.word	0x0802a4f1

0802ac78 <_free_r>:
 802ac78:	b538      	push	{r3, r4, r5, lr}
 802ac7a:	4605      	mov	r5, r0
 802ac7c:	2900      	cmp	r1, #0
 802ac7e:	d041      	beq.n	802ad04 <_free_r+0x8c>
 802ac80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ac84:	1f0c      	subs	r4, r1, #4
 802ac86:	2b00      	cmp	r3, #0
 802ac88:	bfb8      	it	lt
 802ac8a:	18e4      	addlt	r4, r4, r3
 802ac8c:	f7ff fce2 	bl	802a654 <__malloc_lock>
 802ac90:	4a1d      	ldr	r2, [pc, #116]	@ (802ad08 <_free_r+0x90>)
 802ac92:	6813      	ldr	r3, [r2, #0]
 802ac94:	b933      	cbnz	r3, 802aca4 <_free_r+0x2c>
 802ac96:	6063      	str	r3, [r4, #4]
 802ac98:	6014      	str	r4, [r2, #0]
 802ac9a:	4628      	mov	r0, r5
 802ac9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802aca0:	f7ff bcde 	b.w	802a660 <__malloc_unlock>
 802aca4:	42a3      	cmp	r3, r4
 802aca6:	d908      	bls.n	802acba <_free_r+0x42>
 802aca8:	6820      	ldr	r0, [r4, #0]
 802acaa:	1821      	adds	r1, r4, r0
 802acac:	428b      	cmp	r3, r1
 802acae:	bf01      	itttt	eq
 802acb0:	6819      	ldreq	r1, [r3, #0]
 802acb2:	685b      	ldreq	r3, [r3, #4]
 802acb4:	1809      	addeq	r1, r1, r0
 802acb6:	6021      	streq	r1, [r4, #0]
 802acb8:	e7ed      	b.n	802ac96 <_free_r+0x1e>
 802acba:	461a      	mov	r2, r3
 802acbc:	685b      	ldr	r3, [r3, #4]
 802acbe:	b10b      	cbz	r3, 802acc4 <_free_r+0x4c>
 802acc0:	42a3      	cmp	r3, r4
 802acc2:	d9fa      	bls.n	802acba <_free_r+0x42>
 802acc4:	6811      	ldr	r1, [r2, #0]
 802acc6:	1850      	adds	r0, r2, r1
 802acc8:	42a0      	cmp	r0, r4
 802acca:	d10b      	bne.n	802ace4 <_free_r+0x6c>
 802accc:	6820      	ldr	r0, [r4, #0]
 802acce:	4401      	add	r1, r0
 802acd0:	1850      	adds	r0, r2, r1
 802acd2:	4283      	cmp	r3, r0
 802acd4:	6011      	str	r1, [r2, #0]
 802acd6:	d1e0      	bne.n	802ac9a <_free_r+0x22>
 802acd8:	6818      	ldr	r0, [r3, #0]
 802acda:	685b      	ldr	r3, [r3, #4]
 802acdc:	6053      	str	r3, [r2, #4]
 802acde:	4408      	add	r0, r1
 802ace0:	6010      	str	r0, [r2, #0]
 802ace2:	e7da      	b.n	802ac9a <_free_r+0x22>
 802ace4:	d902      	bls.n	802acec <_free_r+0x74>
 802ace6:	230c      	movs	r3, #12
 802ace8:	602b      	str	r3, [r5, #0]
 802acea:	e7d6      	b.n	802ac9a <_free_r+0x22>
 802acec:	6820      	ldr	r0, [r4, #0]
 802acee:	1821      	adds	r1, r4, r0
 802acf0:	428b      	cmp	r3, r1
 802acf2:	bf04      	itt	eq
 802acf4:	6819      	ldreq	r1, [r3, #0]
 802acf6:	685b      	ldreq	r3, [r3, #4]
 802acf8:	6063      	str	r3, [r4, #4]
 802acfa:	bf04      	itt	eq
 802acfc:	1809      	addeq	r1, r1, r0
 802acfe:	6021      	streq	r1, [r4, #0]
 802ad00:	6054      	str	r4, [r2, #4]
 802ad02:	e7ca      	b.n	802ac9a <_free_r+0x22>
 802ad04:	bd38      	pop	{r3, r4, r5, pc}
 802ad06:	bf00      	nop
 802ad08:	20028330 	.word	0x20028330

0802ad0c <__sfputc_r>:
 802ad0c:	6893      	ldr	r3, [r2, #8]
 802ad0e:	3b01      	subs	r3, #1
 802ad10:	2b00      	cmp	r3, #0
 802ad12:	b410      	push	{r4}
 802ad14:	6093      	str	r3, [r2, #8]
 802ad16:	da08      	bge.n	802ad2a <__sfputc_r+0x1e>
 802ad18:	6994      	ldr	r4, [r2, #24]
 802ad1a:	42a3      	cmp	r3, r4
 802ad1c:	db01      	blt.n	802ad22 <__sfputc_r+0x16>
 802ad1e:	290a      	cmp	r1, #10
 802ad20:	d103      	bne.n	802ad2a <__sfputc_r+0x1e>
 802ad22:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ad26:	f7ff bdc6 	b.w	802a8b6 <__swbuf_r>
 802ad2a:	6813      	ldr	r3, [r2, #0]
 802ad2c:	1c58      	adds	r0, r3, #1
 802ad2e:	6010      	str	r0, [r2, #0]
 802ad30:	7019      	strb	r1, [r3, #0]
 802ad32:	4608      	mov	r0, r1
 802ad34:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ad38:	4770      	bx	lr

0802ad3a <__sfputs_r>:
 802ad3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ad3c:	4606      	mov	r6, r0
 802ad3e:	460f      	mov	r7, r1
 802ad40:	4614      	mov	r4, r2
 802ad42:	18d5      	adds	r5, r2, r3
 802ad44:	42ac      	cmp	r4, r5
 802ad46:	d101      	bne.n	802ad4c <__sfputs_r+0x12>
 802ad48:	2000      	movs	r0, #0
 802ad4a:	e007      	b.n	802ad5c <__sfputs_r+0x22>
 802ad4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ad50:	463a      	mov	r2, r7
 802ad52:	4630      	mov	r0, r6
 802ad54:	f7ff ffda 	bl	802ad0c <__sfputc_r>
 802ad58:	1c43      	adds	r3, r0, #1
 802ad5a:	d1f3      	bne.n	802ad44 <__sfputs_r+0xa>
 802ad5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802ad60 <_vfiprintf_r>:
 802ad60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ad64:	460d      	mov	r5, r1
 802ad66:	b09d      	sub	sp, #116	@ 0x74
 802ad68:	4614      	mov	r4, r2
 802ad6a:	4698      	mov	r8, r3
 802ad6c:	4606      	mov	r6, r0
 802ad6e:	b118      	cbz	r0, 802ad78 <_vfiprintf_r+0x18>
 802ad70:	6a03      	ldr	r3, [r0, #32]
 802ad72:	b90b      	cbnz	r3, 802ad78 <_vfiprintf_r+0x18>
 802ad74:	f7ff fd14 	bl	802a7a0 <__sinit>
 802ad78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802ad7a:	07d9      	lsls	r1, r3, #31
 802ad7c:	d405      	bmi.n	802ad8a <_vfiprintf_r+0x2a>
 802ad7e:	89ab      	ldrh	r3, [r5, #12]
 802ad80:	059a      	lsls	r2, r3, #22
 802ad82:	d402      	bmi.n	802ad8a <_vfiprintf_r+0x2a>
 802ad84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802ad86:	f7ff ff0a 	bl	802ab9e <__retarget_lock_acquire_recursive>
 802ad8a:	89ab      	ldrh	r3, [r5, #12]
 802ad8c:	071b      	lsls	r3, r3, #28
 802ad8e:	d501      	bpl.n	802ad94 <_vfiprintf_r+0x34>
 802ad90:	692b      	ldr	r3, [r5, #16]
 802ad92:	b99b      	cbnz	r3, 802adbc <_vfiprintf_r+0x5c>
 802ad94:	4629      	mov	r1, r5
 802ad96:	4630      	mov	r0, r6
 802ad98:	f7ff fdcc 	bl	802a934 <__swsetup_r>
 802ad9c:	b170      	cbz	r0, 802adbc <_vfiprintf_r+0x5c>
 802ad9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802ada0:	07dc      	lsls	r4, r3, #31
 802ada2:	d504      	bpl.n	802adae <_vfiprintf_r+0x4e>
 802ada4:	f04f 30ff 	mov.w	r0, #4294967295
 802ada8:	b01d      	add	sp, #116	@ 0x74
 802adaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802adae:	89ab      	ldrh	r3, [r5, #12]
 802adb0:	0598      	lsls	r0, r3, #22
 802adb2:	d4f7      	bmi.n	802ada4 <_vfiprintf_r+0x44>
 802adb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802adb6:	f7ff fef3 	bl	802aba0 <__retarget_lock_release_recursive>
 802adba:	e7f3      	b.n	802ada4 <_vfiprintf_r+0x44>
 802adbc:	2300      	movs	r3, #0
 802adbe:	9309      	str	r3, [sp, #36]	@ 0x24
 802adc0:	2320      	movs	r3, #32
 802adc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802adc6:	f8cd 800c 	str.w	r8, [sp, #12]
 802adca:	2330      	movs	r3, #48	@ 0x30
 802adcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802af7c <_vfiprintf_r+0x21c>
 802add0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802add4:	f04f 0901 	mov.w	r9, #1
 802add8:	4623      	mov	r3, r4
 802adda:	469a      	mov	sl, r3
 802addc:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ade0:	b10a      	cbz	r2, 802ade6 <_vfiprintf_r+0x86>
 802ade2:	2a25      	cmp	r2, #37	@ 0x25
 802ade4:	d1f9      	bne.n	802adda <_vfiprintf_r+0x7a>
 802ade6:	ebba 0b04 	subs.w	fp, sl, r4
 802adea:	d00b      	beq.n	802ae04 <_vfiprintf_r+0xa4>
 802adec:	465b      	mov	r3, fp
 802adee:	4622      	mov	r2, r4
 802adf0:	4629      	mov	r1, r5
 802adf2:	4630      	mov	r0, r6
 802adf4:	f7ff ffa1 	bl	802ad3a <__sfputs_r>
 802adf8:	3001      	adds	r0, #1
 802adfa:	f000 80a7 	beq.w	802af4c <_vfiprintf_r+0x1ec>
 802adfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802ae00:	445a      	add	r2, fp
 802ae02:	9209      	str	r2, [sp, #36]	@ 0x24
 802ae04:	f89a 3000 	ldrb.w	r3, [sl]
 802ae08:	2b00      	cmp	r3, #0
 802ae0a:	f000 809f 	beq.w	802af4c <_vfiprintf_r+0x1ec>
 802ae0e:	2300      	movs	r3, #0
 802ae10:	f04f 32ff 	mov.w	r2, #4294967295
 802ae14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ae18:	f10a 0a01 	add.w	sl, sl, #1
 802ae1c:	9304      	str	r3, [sp, #16]
 802ae1e:	9307      	str	r3, [sp, #28]
 802ae20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802ae24:	931a      	str	r3, [sp, #104]	@ 0x68
 802ae26:	4654      	mov	r4, sl
 802ae28:	2205      	movs	r2, #5
 802ae2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ae2e:	4853      	ldr	r0, [pc, #332]	@ (802af7c <_vfiprintf_r+0x21c>)
 802ae30:	f7d5 fa06 	bl	8000240 <memchr>
 802ae34:	9a04      	ldr	r2, [sp, #16]
 802ae36:	b9d8      	cbnz	r0, 802ae70 <_vfiprintf_r+0x110>
 802ae38:	06d1      	lsls	r1, r2, #27
 802ae3a:	bf44      	itt	mi
 802ae3c:	2320      	movmi	r3, #32
 802ae3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802ae42:	0713      	lsls	r3, r2, #28
 802ae44:	bf44      	itt	mi
 802ae46:	232b      	movmi	r3, #43	@ 0x2b
 802ae48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802ae4c:	f89a 3000 	ldrb.w	r3, [sl]
 802ae50:	2b2a      	cmp	r3, #42	@ 0x2a
 802ae52:	d015      	beq.n	802ae80 <_vfiprintf_r+0x120>
 802ae54:	9a07      	ldr	r2, [sp, #28]
 802ae56:	4654      	mov	r4, sl
 802ae58:	2000      	movs	r0, #0
 802ae5a:	f04f 0c0a 	mov.w	ip, #10
 802ae5e:	4621      	mov	r1, r4
 802ae60:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ae64:	3b30      	subs	r3, #48	@ 0x30
 802ae66:	2b09      	cmp	r3, #9
 802ae68:	d94b      	bls.n	802af02 <_vfiprintf_r+0x1a2>
 802ae6a:	b1b0      	cbz	r0, 802ae9a <_vfiprintf_r+0x13a>
 802ae6c:	9207      	str	r2, [sp, #28]
 802ae6e:	e014      	b.n	802ae9a <_vfiprintf_r+0x13a>
 802ae70:	eba0 0308 	sub.w	r3, r0, r8
 802ae74:	fa09 f303 	lsl.w	r3, r9, r3
 802ae78:	4313      	orrs	r3, r2
 802ae7a:	9304      	str	r3, [sp, #16]
 802ae7c:	46a2      	mov	sl, r4
 802ae7e:	e7d2      	b.n	802ae26 <_vfiprintf_r+0xc6>
 802ae80:	9b03      	ldr	r3, [sp, #12]
 802ae82:	1d19      	adds	r1, r3, #4
 802ae84:	681b      	ldr	r3, [r3, #0]
 802ae86:	9103      	str	r1, [sp, #12]
 802ae88:	2b00      	cmp	r3, #0
 802ae8a:	bfbb      	ittet	lt
 802ae8c:	425b      	neglt	r3, r3
 802ae8e:	f042 0202 	orrlt.w	r2, r2, #2
 802ae92:	9307      	strge	r3, [sp, #28]
 802ae94:	9307      	strlt	r3, [sp, #28]
 802ae96:	bfb8      	it	lt
 802ae98:	9204      	strlt	r2, [sp, #16]
 802ae9a:	7823      	ldrb	r3, [r4, #0]
 802ae9c:	2b2e      	cmp	r3, #46	@ 0x2e
 802ae9e:	d10a      	bne.n	802aeb6 <_vfiprintf_r+0x156>
 802aea0:	7863      	ldrb	r3, [r4, #1]
 802aea2:	2b2a      	cmp	r3, #42	@ 0x2a
 802aea4:	d132      	bne.n	802af0c <_vfiprintf_r+0x1ac>
 802aea6:	9b03      	ldr	r3, [sp, #12]
 802aea8:	1d1a      	adds	r2, r3, #4
 802aeaa:	681b      	ldr	r3, [r3, #0]
 802aeac:	9203      	str	r2, [sp, #12]
 802aeae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802aeb2:	3402      	adds	r4, #2
 802aeb4:	9305      	str	r3, [sp, #20]
 802aeb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802af8c <_vfiprintf_r+0x22c>
 802aeba:	7821      	ldrb	r1, [r4, #0]
 802aebc:	2203      	movs	r2, #3
 802aebe:	4650      	mov	r0, sl
 802aec0:	f7d5 f9be 	bl	8000240 <memchr>
 802aec4:	b138      	cbz	r0, 802aed6 <_vfiprintf_r+0x176>
 802aec6:	9b04      	ldr	r3, [sp, #16]
 802aec8:	eba0 000a 	sub.w	r0, r0, sl
 802aecc:	2240      	movs	r2, #64	@ 0x40
 802aece:	4082      	lsls	r2, r0
 802aed0:	4313      	orrs	r3, r2
 802aed2:	3401      	adds	r4, #1
 802aed4:	9304      	str	r3, [sp, #16]
 802aed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802aeda:	4829      	ldr	r0, [pc, #164]	@ (802af80 <_vfiprintf_r+0x220>)
 802aedc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802aee0:	2206      	movs	r2, #6
 802aee2:	f7d5 f9ad 	bl	8000240 <memchr>
 802aee6:	2800      	cmp	r0, #0
 802aee8:	d03f      	beq.n	802af6a <_vfiprintf_r+0x20a>
 802aeea:	4b26      	ldr	r3, [pc, #152]	@ (802af84 <_vfiprintf_r+0x224>)
 802aeec:	bb1b      	cbnz	r3, 802af36 <_vfiprintf_r+0x1d6>
 802aeee:	9b03      	ldr	r3, [sp, #12]
 802aef0:	3307      	adds	r3, #7
 802aef2:	f023 0307 	bic.w	r3, r3, #7
 802aef6:	3308      	adds	r3, #8
 802aef8:	9303      	str	r3, [sp, #12]
 802aefa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802aefc:	443b      	add	r3, r7
 802aefe:	9309      	str	r3, [sp, #36]	@ 0x24
 802af00:	e76a      	b.n	802add8 <_vfiprintf_r+0x78>
 802af02:	fb0c 3202 	mla	r2, ip, r2, r3
 802af06:	460c      	mov	r4, r1
 802af08:	2001      	movs	r0, #1
 802af0a:	e7a8      	b.n	802ae5e <_vfiprintf_r+0xfe>
 802af0c:	2300      	movs	r3, #0
 802af0e:	3401      	adds	r4, #1
 802af10:	9305      	str	r3, [sp, #20]
 802af12:	4619      	mov	r1, r3
 802af14:	f04f 0c0a 	mov.w	ip, #10
 802af18:	4620      	mov	r0, r4
 802af1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802af1e:	3a30      	subs	r2, #48	@ 0x30
 802af20:	2a09      	cmp	r2, #9
 802af22:	d903      	bls.n	802af2c <_vfiprintf_r+0x1cc>
 802af24:	2b00      	cmp	r3, #0
 802af26:	d0c6      	beq.n	802aeb6 <_vfiprintf_r+0x156>
 802af28:	9105      	str	r1, [sp, #20]
 802af2a:	e7c4      	b.n	802aeb6 <_vfiprintf_r+0x156>
 802af2c:	fb0c 2101 	mla	r1, ip, r1, r2
 802af30:	4604      	mov	r4, r0
 802af32:	2301      	movs	r3, #1
 802af34:	e7f0      	b.n	802af18 <_vfiprintf_r+0x1b8>
 802af36:	ab03      	add	r3, sp, #12
 802af38:	9300      	str	r3, [sp, #0]
 802af3a:	462a      	mov	r2, r5
 802af3c:	4b12      	ldr	r3, [pc, #72]	@ (802af88 <_vfiprintf_r+0x228>)
 802af3e:	a904      	add	r1, sp, #16
 802af40:	4630      	mov	r0, r6
 802af42:	f3af 8000 	nop.w
 802af46:	4607      	mov	r7, r0
 802af48:	1c78      	adds	r0, r7, #1
 802af4a:	d1d6      	bne.n	802aefa <_vfiprintf_r+0x19a>
 802af4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802af4e:	07d9      	lsls	r1, r3, #31
 802af50:	d405      	bmi.n	802af5e <_vfiprintf_r+0x1fe>
 802af52:	89ab      	ldrh	r3, [r5, #12]
 802af54:	059a      	lsls	r2, r3, #22
 802af56:	d402      	bmi.n	802af5e <_vfiprintf_r+0x1fe>
 802af58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802af5a:	f7ff fe21 	bl	802aba0 <__retarget_lock_release_recursive>
 802af5e:	89ab      	ldrh	r3, [r5, #12]
 802af60:	065b      	lsls	r3, r3, #25
 802af62:	f53f af1f 	bmi.w	802ada4 <_vfiprintf_r+0x44>
 802af66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802af68:	e71e      	b.n	802ada8 <_vfiprintf_r+0x48>
 802af6a:	ab03      	add	r3, sp, #12
 802af6c:	9300      	str	r3, [sp, #0]
 802af6e:	462a      	mov	r2, r5
 802af70:	4b05      	ldr	r3, [pc, #20]	@ (802af88 <_vfiprintf_r+0x228>)
 802af72:	a904      	add	r1, sp, #16
 802af74:	4630      	mov	r0, r6
 802af76:	f000 f879 	bl	802b06c <_printf_i>
 802af7a:	e7e4      	b.n	802af46 <_vfiprintf_r+0x1e6>
 802af7c:	0802f3f8 	.word	0x0802f3f8
 802af80:	0802f402 	.word	0x0802f402
 802af84:	00000000 	.word	0x00000000
 802af88:	0802ad3b 	.word	0x0802ad3b
 802af8c:	0802f3fe 	.word	0x0802f3fe

0802af90 <_printf_common>:
 802af90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802af94:	4616      	mov	r6, r2
 802af96:	4698      	mov	r8, r3
 802af98:	688a      	ldr	r2, [r1, #8]
 802af9a:	690b      	ldr	r3, [r1, #16]
 802af9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802afa0:	4293      	cmp	r3, r2
 802afa2:	bfb8      	it	lt
 802afa4:	4613      	movlt	r3, r2
 802afa6:	6033      	str	r3, [r6, #0]
 802afa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802afac:	4607      	mov	r7, r0
 802afae:	460c      	mov	r4, r1
 802afb0:	b10a      	cbz	r2, 802afb6 <_printf_common+0x26>
 802afb2:	3301      	adds	r3, #1
 802afb4:	6033      	str	r3, [r6, #0]
 802afb6:	6823      	ldr	r3, [r4, #0]
 802afb8:	0699      	lsls	r1, r3, #26
 802afba:	bf42      	ittt	mi
 802afbc:	6833      	ldrmi	r3, [r6, #0]
 802afbe:	3302      	addmi	r3, #2
 802afc0:	6033      	strmi	r3, [r6, #0]
 802afc2:	6825      	ldr	r5, [r4, #0]
 802afc4:	f015 0506 	ands.w	r5, r5, #6
 802afc8:	d106      	bne.n	802afd8 <_printf_common+0x48>
 802afca:	f104 0a19 	add.w	sl, r4, #25
 802afce:	68e3      	ldr	r3, [r4, #12]
 802afd0:	6832      	ldr	r2, [r6, #0]
 802afd2:	1a9b      	subs	r3, r3, r2
 802afd4:	42ab      	cmp	r3, r5
 802afd6:	dc26      	bgt.n	802b026 <_printf_common+0x96>
 802afd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802afdc:	6822      	ldr	r2, [r4, #0]
 802afde:	3b00      	subs	r3, #0
 802afe0:	bf18      	it	ne
 802afe2:	2301      	movne	r3, #1
 802afe4:	0692      	lsls	r2, r2, #26
 802afe6:	d42b      	bmi.n	802b040 <_printf_common+0xb0>
 802afe8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802afec:	4641      	mov	r1, r8
 802afee:	4638      	mov	r0, r7
 802aff0:	47c8      	blx	r9
 802aff2:	3001      	adds	r0, #1
 802aff4:	d01e      	beq.n	802b034 <_printf_common+0xa4>
 802aff6:	6823      	ldr	r3, [r4, #0]
 802aff8:	6922      	ldr	r2, [r4, #16]
 802affa:	f003 0306 	and.w	r3, r3, #6
 802affe:	2b04      	cmp	r3, #4
 802b000:	bf02      	ittt	eq
 802b002:	68e5      	ldreq	r5, [r4, #12]
 802b004:	6833      	ldreq	r3, [r6, #0]
 802b006:	1aed      	subeq	r5, r5, r3
 802b008:	68a3      	ldr	r3, [r4, #8]
 802b00a:	bf0c      	ite	eq
 802b00c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b010:	2500      	movne	r5, #0
 802b012:	4293      	cmp	r3, r2
 802b014:	bfc4      	itt	gt
 802b016:	1a9b      	subgt	r3, r3, r2
 802b018:	18ed      	addgt	r5, r5, r3
 802b01a:	2600      	movs	r6, #0
 802b01c:	341a      	adds	r4, #26
 802b01e:	42b5      	cmp	r5, r6
 802b020:	d11a      	bne.n	802b058 <_printf_common+0xc8>
 802b022:	2000      	movs	r0, #0
 802b024:	e008      	b.n	802b038 <_printf_common+0xa8>
 802b026:	2301      	movs	r3, #1
 802b028:	4652      	mov	r2, sl
 802b02a:	4641      	mov	r1, r8
 802b02c:	4638      	mov	r0, r7
 802b02e:	47c8      	blx	r9
 802b030:	3001      	adds	r0, #1
 802b032:	d103      	bne.n	802b03c <_printf_common+0xac>
 802b034:	f04f 30ff 	mov.w	r0, #4294967295
 802b038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b03c:	3501      	adds	r5, #1
 802b03e:	e7c6      	b.n	802afce <_printf_common+0x3e>
 802b040:	18e1      	adds	r1, r4, r3
 802b042:	1c5a      	adds	r2, r3, #1
 802b044:	2030      	movs	r0, #48	@ 0x30
 802b046:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802b04a:	4422      	add	r2, r4
 802b04c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802b050:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802b054:	3302      	adds	r3, #2
 802b056:	e7c7      	b.n	802afe8 <_printf_common+0x58>
 802b058:	2301      	movs	r3, #1
 802b05a:	4622      	mov	r2, r4
 802b05c:	4641      	mov	r1, r8
 802b05e:	4638      	mov	r0, r7
 802b060:	47c8      	blx	r9
 802b062:	3001      	adds	r0, #1
 802b064:	d0e6      	beq.n	802b034 <_printf_common+0xa4>
 802b066:	3601      	adds	r6, #1
 802b068:	e7d9      	b.n	802b01e <_printf_common+0x8e>
	...

0802b06c <_printf_i>:
 802b06c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802b070:	7e0f      	ldrb	r7, [r1, #24]
 802b072:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802b074:	2f78      	cmp	r7, #120	@ 0x78
 802b076:	4691      	mov	r9, r2
 802b078:	4680      	mov	r8, r0
 802b07a:	460c      	mov	r4, r1
 802b07c:	469a      	mov	sl, r3
 802b07e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802b082:	d807      	bhi.n	802b094 <_printf_i+0x28>
 802b084:	2f62      	cmp	r7, #98	@ 0x62
 802b086:	d80a      	bhi.n	802b09e <_printf_i+0x32>
 802b088:	2f00      	cmp	r7, #0
 802b08a:	f000 80d2 	beq.w	802b232 <_printf_i+0x1c6>
 802b08e:	2f58      	cmp	r7, #88	@ 0x58
 802b090:	f000 80b9 	beq.w	802b206 <_printf_i+0x19a>
 802b094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802b098:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802b09c:	e03a      	b.n	802b114 <_printf_i+0xa8>
 802b09e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802b0a2:	2b15      	cmp	r3, #21
 802b0a4:	d8f6      	bhi.n	802b094 <_printf_i+0x28>
 802b0a6:	a101      	add	r1, pc, #4	@ (adr r1, 802b0ac <_printf_i+0x40>)
 802b0a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802b0ac:	0802b105 	.word	0x0802b105
 802b0b0:	0802b119 	.word	0x0802b119
 802b0b4:	0802b095 	.word	0x0802b095
 802b0b8:	0802b095 	.word	0x0802b095
 802b0bc:	0802b095 	.word	0x0802b095
 802b0c0:	0802b095 	.word	0x0802b095
 802b0c4:	0802b119 	.word	0x0802b119
 802b0c8:	0802b095 	.word	0x0802b095
 802b0cc:	0802b095 	.word	0x0802b095
 802b0d0:	0802b095 	.word	0x0802b095
 802b0d4:	0802b095 	.word	0x0802b095
 802b0d8:	0802b219 	.word	0x0802b219
 802b0dc:	0802b143 	.word	0x0802b143
 802b0e0:	0802b1d3 	.word	0x0802b1d3
 802b0e4:	0802b095 	.word	0x0802b095
 802b0e8:	0802b095 	.word	0x0802b095
 802b0ec:	0802b23b 	.word	0x0802b23b
 802b0f0:	0802b095 	.word	0x0802b095
 802b0f4:	0802b143 	.word	0x0802b143
 802b0f8:	0802b095 	.word	0x0802b095
 802b0fc:	0802b095 	.word	0x0802b095
 802b100:	0802b1db 	.word	0x0802b1db
 802b104:	6833      	ldr	r3, [r6, #0]
 802b106:	1d1a      	adds	r2, r3, #4
 802b108:	681b      	ldr	r3, [r3, #0]
 802b10a:	6032      	str	r2, [r6, #0]
 802b10c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802b110:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802b114:	2301      	movs	r3, #1
 802b116:	e09d      	b.n	802b254 <_printf_i+0x1e8>
 802b118:	6833      	ldr	r3, [r6, #0]
 802b11a:	6820      	ldr	r0, [r4, #0]
 802b11c:	1d19      	adds	r1, r3, #4
 802b11e:	6031      	str	r1, [r6, #0]
 802b120:	0606      	lsls	r6, r0, #24
 802b122:	d501      	bpl.n	802b128 <_printf_i+0xbc>
 802b124:	681d      	ldr	r5, [r3, #0]
 802b126:	e003      	b.n	802b130 <_printf_i+0xc4>
 802b128:	0645      	lsls	r5, r0, #25
 802b12a:	d5fb      	bpl.n	802b124 <_printf_i+0xb8>
 802b12c:	f9b3 5000 	ldrsh.w	r5, [r3]
 802b130:	2d00      	cmp	r5, #0
 802b132:	da03      	bge.n	802b13c <_printf_i+0xd0>
 802b134:	232d      	movs	r3, #45	@ 0x2d
 802b136:	426d      	negs	r5, r5
 802b138:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802b13c:	4859      	ldr	r0, [pc, #356]	@ (802b2a4 <_printf_i+0x238>)
 802b13e:	230a      	movs	r3, #10
 802b140:	e011      	b.n	802b166 <_printf_i+0xfa>
 802b142:	6821      	ldr	r1, [r4, #0]
 802b144:	6833      	ldr	r3, [r6, #0]
 802b146:	0608      	lsls	r0, r1, #24
 802b148:	f853 5b04 	ldr.w	r5, [r3], #4
 802b14c:	d402      	bmi.n	802b154 <_printf_i+0xe8>
 802b14e:	0649      	lsls	r1, r1, #25
 802b150:	bf48      	it	mi
 802b152:	b2ad      	uxthmi	r5, r5
 802b154:	2f6f      	cmp	r7, #111	@ 0x6f
 802b156:	4853      	ldr	r0, [pc, #332]	@ (802b2a4 <_printf_i+0x238>)
 802b158:	6033      	str	r3, [r6, #0]
 802b15a:	bf14      	ite	ne
 802b15c:	230a      	movne	r3, #10
 802b15e:	2308      	moveq	r3, #8
 802b160:	2100      	movs	r1, #0
 802b162:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802b166:	6866      	ldr	r6, [r4, #4]
 802b168:	60a6      	str	r6, [r4, #8]
 802b16a:	2e00      	cmp	r6, #0
 802b16c:	bfa2      	ittt	ge
 802b16e:	6821      	ldrge	r1, [r4, #0]
 802b170:	f021 0104 	bicge.w	r1, r1, #4
 802b174:	6021      	strge	r1, [r4, #0]
 802b176:	b90d      	cbnz	r5, 802b17c <_printf_i+0x110>
 802b178:	2e00      	cmp	r6, #0
 802b17a:	d04b      	beq.n	802b214 <_printf_i+0x1a8>
 802b17c:	4616      	mov	r6, r2
 802b17e:	fbb5 f1f3 	udiv	r1, r5, r3
 802b182:	fb03 5711 	mls	r7, r3, r1, r5
 802b186:	5dc7      	ldrb	r7, [r0, r7]
 802b188:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802b18c:	462f      	mov	r7, r5
 802b18e:	42bb      	cmp	r3, r7
 802b190:	460d      	mov	r5, r1
 802b192:	d9f4      	bls.n	802b17e <_printf_i+0x112>
 802b194:	2b08      	cmp	r3, #8
 802b196:	d10b      	bne.n	802b1b0 <_printf_i+0x144>
 802b198:	6823      	ldr	r3, [r4, #0]
 802b19a:	07df      	lsls	r7, r3, #31
 802b19c:	d508      	bpl.n	802b1b0 <_printf_i+0x144>
 802b19e:	6923      	ldr	r3, [r4, #16]
 802b1a0:	6861      	ldr	r1, [r4, #4]
 802b1a2:	4299      	cmp	r1, r3
 802b1a4:	bfde      	ittt	le
 802b1a6:	2330      	movle	r3, #48	@ 0x30
 802b1a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 802b1ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 802b1b0:	1b92      	subs	r2, r2, r6
 802b1b2:	6122      	str	r2, [r4, #16]
 802b1b4:	f8cd a000 	str.w	sl, [sp]
 802b1b8:	464b      	mov	r3, r9
 802b1ba:	aa03      	add	r2, sp, #12
 802b1bc:	4621      	mov	r1, r4
 802b1be:	4640      	mov	r0, r8
 802b1c0:	f7ff fee6 	bl	802af90 <_printf_common>
 802b1c4:	3001      	adds	r0, #1
 802b1c6:	d14a      	bne.n	802b25e <_printf_i+0x1f2>
 802b1c8:	f04f 30ff 	mov.w	r0, #4294967295
 802b1cc:	b004      	add	sp, #16
 802b1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b1d2:	6823      	ldr	r3, [r4, #0]
 802b1d4:	f043 0320 	orr.w	r3, r3, #32
 802b1d8:	6023      	str	r3, [r4, #0]
 802b1da:	4833      	ldr	r0, [pc, #204]	@ (802b2a8 <_printf_i+0x23c>)
 802b1dc:	2778      	movs	r7, #120	@ 0x78
 802b1de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802b1e2:	6823      	ldr	r3, [r4, #0]
 802b1e4:	6831      	ldr	r1, [r6, #0]
 802b1e6:	061f      	lsls	r7, r3, #24
 802b1e8:	f851 5b04 	ldr.w	r5, [r1], #4
 802b1ec:	d402      	bmi.n	802b1f4 <_printf_i+0x188>
 802b1ee:	065f      	lsls	r7, r3, #25
 802b1f0:	bf48      	it	mi
 802b1f2:	b2ad      	uxthmi	r5, r5
 802b1f4:	6031      	str	r1, [r6, #0]
 802b1f6:	07d9      	lsls	r1, r3, #31
 802b1f8:	bf44      	itt	mi
 802b1fa:	f043 0320 	orrmi.w	r3, r3, #32
 802b1fe:	6023      	strmi	r3, [r4, #0]
 802b200:	b11d      	cbz	r5, 802b20a <_printf_i+0x19e>
 802b202:	2310      	movs	r3, #16
 802b204:	e7ac      	b.n	802b160 <_printf_i+0xf4>
 802b206:	4827      	ldr	r0, [pc, #156]	@ (802b2a4 <_printf_i+0x238>)
 802b208:	e7e9      	b.n	802b1de <_printf_i+0x172>
 802b20a:	6823      	ldr	r3, [r4, #0]
 802b20c:	f023 0320 	bic.w	r3, r3, #32
 802b210:	6023      	str	r3, [r4, #0]
 802b212:	e7f6      	b.n	802b202 <_printf_i+0x196>
 802b214:	4616      	mov	r6, r2
 802b216:	e7bd      	b.n	802b194 <_printf_i+0x128>
 802b218:	6833      	ldr	r3, [r6, #0]
 802b21a:	6825      	ldr	r5, [r4, #0]
 802b21c:	6961      	ldr	r1, [r4, #20]
 802b21e:	1d18      	adds	r0, r3, #4
 802b220:	6030      	str	r0, [r6, #0]
 802b222:	062e      	lsls	r6, r5, #24
 802b224:	681b      	ldr	r3, [r3, #0]
 802b226:	d501      	bpl.n	802b22c <_printf_i+0x1c0>
 802b228:	6019      	str	r1, [r3, #0]
 802b22a:	e002      	b.n	802b232 <_printf_i+0x1c6>
 802b22c:	0668      	lsls	r0, r5, #25
 802b22e:	d5fb      	bpl.n	802b228 <_printf_i+0x1bc>
 802b230:	8019      	strh	r1, [r3, #0]
 802b232:	2300      	movs	r3, #0
 802b234:	6123      	str	r3, [r4, #16]
 802b236:	4616      	mov	r6, r2
 802b238:	e7bc      	b.n	802b1b4 <_printf_i+0x148>
 802b23a:	6833      	ldr	r3, [r6, #0]
 802b23c:	1d1a      	adds	r2, r3, #4
 802b23e:	6032      	str	r2, [r6, #0]
 802b240:	681e      	ldr	r6, [r3, #0]
 802b242:	6862      	ldr	r2, [r4, #4]
 802b244:	2100      	movs	r1, #0
 802b246:	4630      	mov	r0, r6
 802b248:	f7d4 fffa 	bl	8000240 <memchr>
 802b24c:	b108      	cbz	r0, 802b252 <_printf_i+0x1e6>
 802b24e:	1b80      	subs	r0, r0, r6
 802b250:	6060      	str	r0, [r4, #4]
 802b252:	6863      	ldr	r3, [r4, #4]
 802b254:	6123      	str	r3, [r4, #16]
 802b256:	2300      	movs	r3, #0
 802b258:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802b25c:	e7aa      	b.n	802b1b4 <_printf_i+0x148>
 802b25e:	6923      	ldr	r3, [r4, #16]
 802b260:	4632      	mov	r2, r6
 802b262:	4649      	mov	r1, r9
 802b264:	4640      	mov	r0, r8
 802b266:	47d0      	blx	sl
 802b268:	3001      	adds	r0, #1
 802b26a:	d0ad      	beq.n	802b1c8 <_printf_i+0x15c>
 802b26c:	6823      	ldr	r3, [r4, #0]
 802b26e:	079b      	lsls	r3, r3, #30
 802b270:	d413      	bmi.n	802b29a <_printf_i+0x22e>
 802b272:	68e0      	ldr	r0, [r4, #12]
 802b274:	9b03      	ldr	r3, [sp, #12]
 802b276:	4298      	cmp	r0, r3
 802b278:	bfb8      	it	lt
 802b27a:	4618      	movlt	r0, r3
 802b27c:	e7a6      	b.n	802b1cc <_printf_i+0x160>
 802b27e:	2301      	movs	r3, #1
 802b280:	4632      	mov	r2, r6
 802b282:	4649      	mov	r1, r9
 802b284:	4640      	mov	r0, r8
 802b286:	47d0      	blx	sl
 802b288:	3001      	adds	r0, #1
 802b28a:	d09d      	beq.n	802b1c8 <_printf_i+0x15c>
 802b28c:	3501      	adds	r5, #1
 802b28e:	68e3      	ldr	r3, [r4, #12]
 802b290:	9903      	ldr	r1, [sp, #12]
 802b292:	1a5b      	subs	r3, r3, r1
 802b294:	42ab      	cmp	r3, r5
 802b296:	dcf2      	bgt.n	802b27e <_printf_i+0x212>
 802b298:	e7eb      	b.n	802b272 <_printf_i+0x206>
 802b29a:	2500      	movs	r5, #0
 802b29c:	f104 0619 	add.w	r6, r4, #25
 802b2a0:	e7f5      	b.n	802b28e <_printf_i+0x222>
 802b2a2:	bf00      	nop
 802b2a4:	0802f409 	.word	0x0802f409
 802b2a8:	0802f41a 	.word	0x0802f41a

0802b2ac <__sflush_r>:
 802b2ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802b2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b2b4:	0716      	lsls	r6, r2, #28
 802b2b6:	4605      	mov	r5, r0
 802b2b8:	460c      	mov	r4, r1
 802b2ba:	d454      	bmi.n	802b366 <__sflush_r+0xba>
 802b2bc:	684b      	ldr	r3, [r1, #4]
 802b2be:	2b00      	cmp	r3, #0
 802b2c0:	dc02      	bgt.n	802b2c8 <__sflush_r+0x1c>
 802b2c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802b2c4:	2b00      	cmp	r3, #0
 802b2c6:	dd48      	ble.n	802b35a <__sflush_r+0xae>
 802b2c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802b2ca:	2e00      	cmp	r6, #0
 802b2cc:	d045      	beq.n	802b35a <__sflush_r+0xae>
 802b2ce:	2300      	movs	r3, #0
 802b2d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802b2d4:	682f      	ldr	r7, [r5, #0]
 802b2d6:	6a21      	ldr	r1, [r4, #32]
 802b2d8:	602b      	str	r3, [r5, #0]
 802b2da:	d030      	beq.n	802b33e <__sflush_r+0x92>
 802b2dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802b2de:	89a3      	ldrh	r3, [r4, #12]
 802b2e0:	0759      	lsls	r1, r3, #29
 802b2e2:	d505      	bpl.n	802b2f0 <__sflush_r+0x44>
 802b2e4:	6863      	ldr	r3, [r4, #4]
 802b2e6:	1ad2      	subs	r2, r2, r3
 802b2e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802b2ea:	b10b      	cbz	r3, 802b2f0 <__sflush_r+0x44>
 802b2ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802b2ee:	1ad2      	subs	r2, r2, r3
 802b2f0:	2300      	movs	r3, #0
 802b2f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802b2f4:	6a21      	ldr	r1, [r4, #32]
 802b2f6:	4628      	mov	r0, r5
 802b2f8:	47b0      	blx	r6
 802b2fa:	1c43      	adds	r3, r0, #1
 802b2fc:	89a3      	ldrh	r3, [r4, #12]
 802b2fe:	d106      	bne.n	802b30e <__sflush_r+0x62>
 802b300:	6829      	ldr	r1, [r5, #0]
 802b302:	291d      	cmp	r1, #29
 802b304:	d82b      	bhi.n	802b35e <__sflush_r+0xb2>
 802b306:	4a2a      	ldr	r2, [pc, #168]	@ (802b3b0 <__sflush_r+0x104>)
 802b308:	410a      	asrs	r2, r1
 802b30a:	07d6      	lsls	r6, r2, #31
 802b30c:	d427      	bmi.n	802b35e <__sflush_r+0xb2>
 802b30e:	2200      	movs	r2, #0
 802b310:	6062      	str	r2, [r4, #4]
 802b312:	04d9      	lsls	r1, r3, #19
 802b314:	6922      	ldr	r2, [r4, #16]
 802b316:	6022      	str	r2, [r4, #0]
 802b318:	d504      	bpl.n	802b324 <__sflush_r+0x78>
 802b31a:	1c42      	adds	r2, r0, #1
 802b31c:	d101      	bne.n	802b322 <__sflush_r+0x76>
 802b31e:	682b      	ldr	r3, [r5, #0]
 802b320:	b903      	cbnz	r3, 802b324 <__sflush_r+0x78>
 802b322:	6560      	str	r0, [r4, #84]	@ 0x54
 802b324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b326:	602f      	str	r7, [r5, #0]
 802b328:	b1b9      	cbz	r1, 802b35a <__sflush_r+0xae>
 802b32a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802b32e:	4299      	cmp	r1, r3
 802b330:	d002      	beq.n	802b338 <__sflush_r+0x8c>
 802b332:	4628      	mov	r0, r5
 802b334:	f7ff fca0 	bl	802ac78 <_free_r>
 802b338:	2300      	movs	r3, #0
 802b33a:	6363      	str	r3, [r4, #52]	@ 0x34
 802b33c:	e00d      	b.n	802b35a <__sflush_r+0xae>
 802b33e:	2301      	movs	r3, #1
 802b340:	4628      	mov	r0, r5
 802b342:	47b0      	blx	r6
 802b344:	4602      	mov	r2, r0
 802b346:	1c50      	adds	r0, r2, #1
 802b348:	d1c9      	bne.n	802b2de <__sflush_r+0x32>
 802b34a:	682b      	ldr	r3, [r5, #0]
 802b34c:	2b00      	cmp	r3, #0
 802b34e:	d0c6      	beq.n	802b2de <__sflush_r+0x32>
 802b350:	2b1d      	cmp	r3, #29
 802b352:	d001      	beq.n	802b358 <__sflush_r+0xac>
 802b354:	2b16      	cmp	r3, #22
 802b356:	d11e      	bne.n	802b396 <__sflush_r+0xea>
 802b358:	602f      	str	r7, [r5, #0]
 802b35a:	2000      	movs	r0, #0
 802b35c:	e022      	b.n	802b3a4 <__sflush_r+0xf8>
 802b35e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b362:	b21b      	sxth	r3, r3
 802b364:	e01b      	b.n	802b39e <__sflush_r+0xf2>
 802b366:	690f      	ldr	r7, [r1, #16]
 802b368:	2f00      	cmp	r7, #0
 802b36a:	d0f6      	beq.n	802b35a <__sflush_r+0xae>
 802b36c:	0793      	lsls	r3, r2, #30
 802b36e:	680e      	ldr	r6, [r1, #0]
 802b370:	bf08      	it	eq
 802b372:	694b      	ldreq	r3, [r1, #20]
 802b374:	600f      	str	r7, [r1, #0]
 802b376:	bf18      	it	ne
 802b378:	2300      	movne	r3, #0
 802b37a:	eba6 0807 	sub.w	r8, r6, r7
 802b37e:	608b      	str	r3, [r1, #8]
 802b380:	f1b8 0f00 	cmp.w	r8, #0
 802b384:	dde9      	ble.n	802b35a <__sflush_r+0xae>
 802b386:	6a21      	ldr	r1, [r4, #32]
 802b388:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802b38a:	4643      	mov	r3, r8
 802b38c:	463a      	mov	r2, r7
 802b38e:	4628      	mov	r0, r5
 802b390:	47b0      	blx	r6
 802b392:	2800      	cmp	r0, #0
 802b394:	dc08      	bgt.n	802b3a8 <__sflush_r+0xfc>
 802b396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b39a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b39e:	81a3      	strh	r3, [r4, #12]
 802b3a0:	f04f 30ff 	mov.w	r0, #4294967295
 802b3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b3a8:	4407      	add	r7, r0
 802b3aa:	eba8 0800 	sub.w	r8, r8, r0
 802b3ae:	e7e7      	b.n	802b380 <__sflush_r+0xd4>
 802b3b0:	dfbffffe 	.word	0xdfbffffe

0802b3b4 <_fflush_r>:
 802b3b4:	b538      	push	{r3, r4, r5, lr}
 802b3b6:	690b      	ldr	r3, [r1, #16]
 802b3b8:	4605      	mov	r5, r0
 802b3ba:	460c      	mov	r4, r1
 802b3bc:	b913      	cbnz	r3, 802b3c4 <_fflush_r+0x10>
 802b3be:	2500      	movs	r5, #0
 802b3c0:	4628      	mov	r0, r5
 802b3c2:	bd38      	pop	{r3, r4, r5, pc}
 802b3c4:	b118      	cbz	r0, 802b3ce <_fflush_r+0x1a>
 802b3c6:	6a03      	ldr	r3, [r0, #32]
 802b3c8:	b90b      	cbnz	r3, 802b3ce <_fflush_r+0x1a>
 802b3ca:	f7ff f9e9 	bl	802a7a0 <__sinit>
 802b3ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b3d2:	2b00      	cmp	r3, #0
 802b3d4:	d0f3      	beq.n	802b3be <_fflush_r+0xa>
 802b3d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802b3d8:	07d0      	lsls	r0, r2, #31
 802b3da:	d404      	bmi.n	802b3e6 <_fflush_r+0x32>
 802b3dc:	0599      	lsls	r1, r3, #22
 802b3de:	d402      	bmi.n	802b3e6 <_fflush_r+0x32>
 802b3e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b3e2:	f7ff fbdc 	bl	802ab9e <__retarget_lock_acquire_recursive>
 802b3e6:	4628      	mov	r0, r5
 802b3e8:	4621      	mov	r1, r4
 802b3ea:	f7ff ff5f 	bl	802b2ac <__sflush_r>
 802b3ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b3f0:	07da      	lsls	r2, r3, #31
 802b3f2:	4605      	mov	r5, r0
 802b3f4:	d4e4      	bmi.n	802b3c0 <_fflush_r+0xc>
 802b3f6:	89a3      	ldrh	r3, [r4, #12]
 802b3f8:	059b      	lsls	r3, r3, #22
 802b3fa:	d4e1      	bmi.n	802b3c0 <_fflush_r+0xc>
 802b3fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b3fe:	f7ff fbcf 	bl	802aba0 <__retarget_lock_release_recursive>
 802b402:	e7dd      	b.n	802b3c0 <_fflush_r+0xc>

0802b404 <__swhatbuf_r>:
 802b404:	b570      	push	{r4, r5, r6, lr}
 802b406:	460c      	mov	r4, r1
 802b408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b40c:	2900      	cmp	r1, #0
 802b40e:	b096      	sub	sp, #88	@ 0x58
 802b410:	4615      	mov	r5, r2
 802b412:	461e      	mov	r6, r3
 802b414:	da0d      	bge.n	802b432 <__swhatbuf_r+0x2e>
 802b416:	89a3      	ldrh	r3, [r4, #12]
 802b418:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802b41c:	f04f 0100 	mov.w	r1, #0
 802b420:	bf14      	ite	ne
 802b422:	2340      	movne	r3, #64	@ 0x40
 802b424:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802b428:	2000      	movs	r0, #0
 802b42a:	6031      	str	r1, [r6, #0]
 802b42c:	602b      	str	r3, [r5, #0]
 802b42e:	b016      	add	sp, #88	@ 0x58
 802b430:	bd70      	pop	{r4, r5, r6, pc}
 802b432:	466a      	mov	r2, sp
 802b434:	f000 f848 	bl	802b4c8 <_fstat_r>
 802b438:	2800      	cmp	r0, #0
 802b43a:	dbec      	blt.n	802b416 <__swhatbuf_r+0x12>
 802b43c:	9901      	ldr	r1, [sp, #4]
 802b43e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802b442:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802b446:	4259      	negs	r1, r3
 802b448:	4159      	adcs	r1, r3
 802b44a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b44e:	e7eb      	b.n	802b428 <__swhatbuf_r+0x24>

0802b450 <__smakebuf_r>:
 802b450:	898b      	ldrh	r3, [r1, #12]
 802b452:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802b454:	079d      	lsls	r5, r3, #30
 802b456:	4606      	mov	r6, r0
 802b458:	460c      	mov	r4, r1
 802b45a:	d507      	bpl.n	802b46c <__smakebuf_r+0x1c>
 802b45c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802b460:	6023      	str	r3, [r4, #0]
 802b462:	6123      	str	r3, [r4, #16]
 802b464:	2301      	movs	r3, #1
 802b466:	6163      	str	r3, [r4, #20]
 802b468:	b003      	add	sp, #12
 802b46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b46c:	ab01      	add	r3, sp, #4
 802b46e:	466a      	mov	r2, sp
 802b470:	f7ff ffc8 	bl	802b404 <__swhatbuf_r>
 802b474:	9f00      	ldr	r7, [sp, #0]
 802b476:	4605      	mov	r5, r0
 802b478:	4639      	mov	r1, r7
 802b47a:	4630      	mov	r0, r6
 802b47c:	f7ff f86a 	bl	802a554 <_malloc_r>
 802b480:	b948      	cbnz	r0, 802b496 <__smakebuf_r+0x46>
 802b482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b486:	059a      	lsls	r2, r3, #22
 802b488:	d4ee      	bmi.n	802b468 <__smakebuf_r+0x18>
 802b48a:	f023 0303 	bic.w	r3, r3, #3
 802b48e:	f043 0302 	orr.w	r3, r3, #2
 802b492:	81a3      	strh	r3, [r4, #12]
 802b494:	e7e2      	b.n	802b45c <__smakebuf_r+0xc>
 802b496:	89a3      	ldrh	r3, [r4, #12]
 802b498:	6020      	str	r0, [r4, #0]
 802b49a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802b49e:	81a3      	strh	r3, [r4, #12]
 802b4a0:	9b01      	ldr	r3, [sp, #4]
 802b4a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802b4a6:	b15b      	cbz	r3, 802b4c0 <__smakebuf_r+0x70>
 802b4a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b4ac:	4630      	mov	r0, r6
 802b4ae:	f000 f81d 	bl	802b4ec <_isatty_r>
 802b4b2:	b128      	cbz	r0, 802b4c0 <__smakebuf_r+0x70>
 802b4b4:	89a3      	ldrh	r3, [r4, #12]
 802b4b6:	f023 0303 	bic.w	r3, r3, #3
 802b4ba:	f043 0301 	orr.w	r3, r3, #1
 802b4be:	81a3      	strh	r3, [r4, #12]
 802b4c0:	89a3      	ldrh	r3, [r4, #12]
 802b4c2:	431d      	orrs	r5, r3
 802b4c4:	81a5      	strh	r5, [r4, #12]
 802b4c6:	e7cf      	b.n	802b468 <__smakebuf_r+0x18>

0802b4c8 <_fstat_r>:
 802b4c8:	b538      	push	{r3, r4, r5, lr}
 802b4ca:	4d07      	ldr	r5, [pc, #28]	@ (802b4e8 <_fstat_r+0x20>)
 802b4cc:	2300      	movs	r3, #0
 802b4ce:	4604      	mov	r4, r0
 802b4d0:	4608      	mov	r0, r1
 802b4d2:	4611      	mov	r1, r2
 802b4d4:	602b      	str	r3, [r5, #0]
 802b4d6:	f7d9 fa9a 	bl	8004a0e <_fstat>
 802b4da:	1c43      	adds	r3, r0, #1
 802b4dc:	d102      	bne.n	802b4e4 <_fstat_r+0x1c>
 802b4de:	682b      	ldr	r3, [r5, #0]
 802b4e0:	b103      	cbz	r3, 802b4e4 <_fstat_r+0x1c>
 802b4e2:	6023      	str	r3, [r4, #0]
 802b4e4:	bd38      	pop	{r3, r4, r5, pc}
 802b4e6:	bf00      	nop
 802b4e8:	20028470 	.word	0x20028470

0802b4ec <_isatty_r>:
 802b4ec:	b538      	push	{r3, r4, r5, lr}
 802b4ee:	4d06      	ldr	r5, [pc, #24]	@ (802b508 <_isatty_r+0x1c>)
 802b4f0:	2300      	movs	r3, #0
 802b4f2:	4604      	mov	r4, r0
 802b4f4:	4608      	mov	r0, r1
 802b4f6:	602b      	str	r3, [r5, #0]
 802b4f8:	f7d9 fa8e 	bl	8004a18 <_isatty>
 802b4fc:	1c43      	adds	r3, r0, #1
 802b4fe:	d102      	bne.n	802b506 <_isatty_r+0x1a>
 802b500:	682b      	ldr	r3, [r5, #0]
 802b502:	b103      	cbz	r3, 802b506 <_isatty_r+0x1a>
 802b504:	6023      	str	r3, [r4, #0]
 802b506:	bd38      	pop	{r3, r4, r5, pc}
 802b508:	20028470 	.word	0x20028470

0802b50c <_init>:
 802b50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b50e:	bf00      	nop
 802b510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b512:	bc08      	pop	{r3}
 802b514:	469e      	mov	lr, r3
 802b516:	4770      	bx	lr

0802b518 <_fini>:
 802b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b51a:	bf00      	nop
 802b51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b51e:	bc08      	pop	{r3}
 802b520:	469e      	mov	lr, r3
 802b522:	4770      	bx	lr
